{"path": "/home/asumal/git/cs410/plumbum/plumbum/machines/session.py", "lines": [{"index": "1", "colour": "orange", "code": "import time\n", "error": "none", "author": "tomerf@il.ibm.com"}, {"index": "2", "colour": "orange", "code": "import random\n", "error": "none", "author": "tomerf@il.ibm.com"}, {"index": "3", "colour": "orange", "code": "import logging\n", "error": "none", "author": "tomerf@il.ibm.com"}, {"index": "4", "colour": "orange", "code": "import threading\n", "error": "none", "author": "tomerfiliba@gmail.com"}, {"index": "5", "colour": "orange", "code": "from plumbum.commands import BaseCommand, run_proc\n", "error": "none", "author": "tomerf@il.ibm.com"}, {"index": "6", "colour": "orange", "code": "from plumbum.lib import six\n", "error": "none", "author": "tomerfiliba@gmail.com"}, {"index": "7", "colour": "orange", "code": "\n", "error": "none", "author": "tomerf@il.ibm.com"}, {"index": "8", "colour": "orange", "code": "\n", "error": "none", "author": "tomerf@il.ibm.com"}, {"index": "9", "colour": "orange", "code": "class ShellSessionError(Exception):\n", "error": "none", "author": "tomerf@il.ibm.com"}, {"index": "10", "colour": "orange", "code": "    \"\"\"Raises when something goes wrong when calling\n", "error": "none", "author": "tomer.filiba@emc.com"}, {"index": "11", "colour": "orange", "code": "    :func:`ShellSession.popen <plumbum.session.ShellSession.popen>`\"\"\"\n", "error": "none", "author": "tomerf@il.ibm.com"}, {"index": "12", "colour": "orange", "code": "    pass\n", "error": "none", "author": "tomerf@il.ibm.com"}, {"index": "13", "colour": "orange", "code": "\n", "error": "none", "author": "tomerf@il.ibm.com"}, {"index": "14", "colour": "orange", "code": "shell_logger = logging.getLogger(\"plumbum.shell\")\n", "error": "none", "author": "tomerf@il.ibm.com"}, {"index": "15", "colour": "orange", "code": "\n", "error": "none", "author": "tomerf@il.ibm.com"}, {"index": "16", "colour": "orange", "code": "\n", "error": "none", "author": "tomerf@il.ibm.com"}, {"index": "17", "colour": "orange", "code": "#===================================================================================================\n", "error": "none", "author": "tomerf@il.ibm.com"}, {"index": "18", "colour": "orange", "code": "# Shell Session Popen\n", "error": "none", "author": "tomerf@il.ibm.com"}, {"index": "19", "colour": "orange", "code": "#===================================================================================================\n", "error": "none", "author": "tomerf@il.ibm.com"}, {"index": "20", "colour": "orange", "code": "class MarkedPipe(object):\n", "error": "none", "author": "tomerf@il.ibm.com"}, {"index": "21", "colour": "orange", "code": "    \"\"\"A pipe-like object from which you can read lines; the pipe will return report EOF (the\n", "error": "none", "author": "tomer.filiba@emc.com"}, {"index": "22", "colour": "orange", "code": "    empty string) when a special marker is detected\"\"\"\n", "error": "none", "author": "tomerf@il.ibm.com"}, {"index": "23", "colour": "orange", "code": "    __slots__ = [\"pipe\", \"marker\"]\n", "error": "none", "author": "tomerf@il.ibm.com"}, {"index": "24", "colour": "orange", "code": "    def __init__(self, pipe, marker):\n", "error": "none", "author": "tomerf@il.ibm.com"}, {"index": "25", "colour": "orange", "code": "        self.pipe = pipe\n", "error": "none", "author": "tomerf@il.ibm.com"}, {"index": "26", "colour": "orange", "code": "        self.marker = marker\n", "error": "none", "author": "tomerf@il.ibm.com"}, {"index": "27", "colour": "orange", "code": "        if six.PY3:\n", "error": "none", "author": "tomerf@il.ibm.com"}, {"index": "28", "colour": "orange", "code": "            self.marker = six.bytes(self.marker, \"ascii\")\n", "error": "none", "author": "tomerfiliba@gmail.com"}, {"index": "29", "colour": "orange", "code": "    def close(self):\n", "error": "none", "author": "tomerf@il.ibm.com"}, {"index": "30", "colour": "orange", "code": "        \"\"\"'Closes' the marked pipe; following calls to ``readline`` will return \"\"\"\"\"\n", "error": "none", "author": "tomerf@il.ibm.com"}, {"index": "31", "colour": "orange", "code": "        # consume everything\n", "error": "none", "author": "tomerf@il.ibm.com"}, {"index": "32", "colour": "orange", "code": "        while self.readline():\n", "error": "none", "author": "tomerf@il.ibm.com"}, {"index": "33", "colour": "orange", "code": "            pass\n", "error": "none", "author": "tomer.filiba@emc.com"}, {"index": "34", "colour": "orange", "code": "        self.pipe = None\n", "error": "none", "author": "tomerf@il.ibm.com"}, {"index": "35", "colour": "orange", "code": "    def readline(self):\n", "error": "none", "author": "tomerf@il.ibm.com"}, {"index": "36", "colour": "orange", "code": "        \"\"\"Reads the next line from the pipe; returns \"\" when the special marker is reached.\n", "error": "none", "author": "tomerf@il.ibm.com"}, {"index": "37", "colour": "orange", "code": "        Raises ``EOFError`` if the underlying pipe has closed\"\"\"\n", "error": "none", "author": "tomerf@il.ibm.com"}, {"index": "38", "colour": "orange", "code": "        if self.pipe is None:\n", "error": "none", "author": "tomerf@il.ibm.com"}, {"index": "39", "colour": "orange", "code": "            return six.b(\"\")\n", "error": "none", "author": "tomerf@il.ibm.com"}, {"index": "40", "colour": "orange", "code": "        line = self.pipe.readline()\n", "error": "none", "author": "tomerf@il.ibm.com"}, {"index": "41", "colour": "orange", "code": "        if not line:\n", "error": "none", "author": "tomerf@il.ibm.com"}, {"index": "42", "colour": "orange", "code": "            raise EOFError()\n", "error": "none", "author": "tomerf@il.ibm.com"}, {"index": "43", "colour": "orange", "code": "        if line.strip() == self.marker:\n", "error": "none", "author": "tomerf@il.ibm.com"}, {"index": "44", "colour": "orange", "code": "            self.pipe = None\n", "error": "none", "author": "tomerf@il.ibm.com"}, {"index": "45", "colour": "orange", "code": "            line = six.b(\"\")\n", "error": "none", "author": "tomerf@il.ibm.com"}, {"index": "46", "colour": "orange", "code": "        return line\n", "error": "none", "author": "tomerf@il.ibm.com"}, {"index": "47", "colour": "orange", "code": "\n", "error": "none", "author": "tomerf@il.ibm.com"}, {"index": "48", "colour": "orange", "code": "\n", "error": "none", "author": "tomerf@il.ibm.com"}, {"index": "49", "colour": "blue", "code": "class SessionPopen(object):\n", "error": "R", "author": "tomerf@il.ibm.com"}, {"index": "50", "colour": "orange", "code": "    \"\"\"A shell-session-based ``Popen``-like object (has the following attributes: ``stdin``,\n", "error": "none", "author": "tomerf@il.ibm.com"}, {"index": "51", "colour": "orange", "code": "    ``stdout``, ``stderr``, ``returncode``)\"\"\"\n", "error": "none", "author": "tomerf@il.ibm.com"}, {"index": "52", "colour": "blue", "code": "    def __init__(self, argv, isatty, stdin, stdout, stderr, encoding):\n", "error": "R", "author": "tomerfiliba@gmail.com"}, {"index": "53", "colour": "orange", "code": "        self.argv = argv\n", "error": "none", "author": "tomerf@il.ibm.com"}, {"index": "54", "colour": "orange", "code": "        self.isatty = isatty\n", "error": "none", "author": "tomerf@il.ibm.com"}, {"index": "55", "colour": "orange", "code": "        self.stdin = stdin\n", "error": "none", "author": "tomerf@il.ibm.com"}, {"index": "56", "colour": "orange", "code": "        self.stdout = stdout\n", "error": "none", "author": "tomerf@il.ibm.com"}, {"index": "57", "colour": "orange", "code": "        self.stderr = stderr\n", "error": "none", "author": "tomerf@il.ibm.com"}, {"index": "58", "colour": "orange", "code": "        self.encoding = encoding\n", "error": "none", "author": "tomerfiliba@gmail.com"}, {"index": "59", "colour": "orange", "code": "        self.returncode = None\n", "error": "none", "author": "tomerf@il.ibm.com"}, {"index": "60", "colour": "orange", "code": "        self._done = False\n", "error": "none", "author": "tomerf@il.ibm.com"}, {"index": "61", "colour": "orange", "code": "    def poll(self):\n", "error": "none", "author": "tomerf@il.ibm.com"}, {"index": "62", "colour": "orange", "code": "        \"\"\"Returns the process' exit code or ``None`` if it's still running\"\"\"\n", "error": "none", "author": "tomerf@il.ibm.com"}, {"index": "63", "colour": "orange", "code": "        if self._done:\n", "error": "none", "author": "tomerf@il.ibm.com"}, {"index": "64", "colour": "orange", "code": "            return self.returncode\n", "error": "none", "author": "tomerf@il.ibm.com"}, {"index": "65", "colour": "orange", "code": "        else:\n", "error": "none", "author": "tomerf@il.ibm.com"}, {"index": "66", "colour": "orange", "code": "            return None\n", "error": "none", "author": "tomerf@il.ibm.com"}, {"index": "67", "colour": "orange", "code": "    def wait(self):\n", "error": "none", "author": "tomerf@il.ibm.com"}, {"index": "68", "colour": "orange", "code": "        \"\"\"Waits for the process to terminate and returns its exit code\"\"\"\n", "error": "none", "author": "tomerf@il.ibm.com"}, {"index": "69", "colour": "orange", "code": "        self.communicate()\n", "error": "none", "author": "tomerf@il.ibm.com"}, {"index": "70", "colour": "orange", "code": "        return self.returncode\n", "error": "none", "author": "tomerf@il.ibm.com"}, {"index": "71", "colour": "green", "code": "    def communicate(self, input = None):\n", "error": "W", "author": "tomerf@il.ibm.com"}, {"index": "72", "colour": "orange", "code": "        \"\"\"Consumes the process' stdout and stderr until the it terminates.\n", "error": "none", "author": "tomer.filiba@emc.com"}, {"index": "73", "colour": "orange", "code": "\n", "error": "none", "author": "tomer.filiba@emc.com"}, {"index": "74", "colour": "orange", "code": "        :param input: An optional bytes/buffer object to send to the process over stdin\n", "error": "none", "author": "tomerf@il.ibm.com"}, {"index": "75", "colour": "orange", "code": "        :returns: A tuple of (stdout, stderr)\n", "error": "none", "author": "tomerf@il.ibm.com"}, {"index": "76", "colour": "orange", "code": "        \"\"\"\n", "error": "none", "author": "tomerf@il.ibm.com"}, {"index": "77", "colour": "orange", "code": "        stdout = []\n", "error": "none", "author": "tomerf@il.ibm.com"}, {"index": "78", "colour": "orange", "code": "        stderr = []\n", "error": "none", "author": "tomerf@il.ibm.com"}, {"index": "79", "colour": "orange", "code": "        sources = [(\"1\", stdout, self.stdout)]\n", "error": "none", "author": "tomerf@il.ibm.com"}, {"index": "80", "colour": "orange", "code": "        if not self.isatty:\n", "error": "none", "author": "tomerf@il.ibm.com"}, {"index": "81", "colour": "orange", "code": "            # in tty mode, stdout and stderr are unified\n", "error": "none", "author": "tomerf@il.ibm.com"}, {"index": "82", "colour": "orange", "code": "            sources.append((\"2\", stderr, self.stderr))\n", "error": "none", "author": "tomerf@il.ibm.com"}, {"index": "83", "colour": "orange", "code": "        i = 0\n", "error": "none", "author": "tomerf@il.ibm.com"}, {"index": "84", "colour": "orange", "code": "        while sources:\n", "error": "none", "author": "tomerf@il.ibm.com"}, {"index": "85", "colour": "orange", "code": "            if input:\n", "error": "none", "author": "tomerf@il.ibm.com"}, {"index": "86", "colour": "orange", "code": "                chunk = input[:1000]\n", "error": "none", "author": "tomerf@il.ibm.com"}, {"index": "87", "colour": "orange", "code": "                self.stdin.write(chunk)\n", "error": "none", "author": "tomerf@il.ibm.com"}, {"index": "88", "colour": "orange", "code": "                self.stdin.flush()\n", "error": "none", "author": "tomerf@il.ibm.com"}, {"index": "89", "colour": "orange", "code": "                input = input[1000:]\n", "error": "none", "author": "tomerf@il.ibm.com"}, {"index": "90", "colour": "orange", "code": "            i = (i + 1) % len(sources)\n", "error": "none", "author": "tomerf@il.ibm.com"}, {"index": "91", "colour": "orange", "code": "            name, coll, pipe = sources[i]\n", "error": "none", "author": "tomerf@il.ibm.com"}, {"index": "92", "colour": "orange", "code": "            line = pipe.readline()\n", "error": "none", "author": "tomerf@il.ibm.com"}, {"index": "93", "colour": "orange", "code": "            shell_logger.debug(\"%s> %r\", name, line)\n", "error": "none", "author": "tomerf@il.ibm.com"}, {"index": "94", "colour": "orange", "code": "            if not line:\n", "error": "none", "author": "tomerf@il.ibm.com"}, {"index": "95", "colour": "orange", "code": "                del sources[i]\n", "error": "none", "author": "tomerf@il.ibm.com"}, {"index": "96", "colour": "orange", "code": "            else:\n", "error": "none", "author": "tomerf@il.ibm.com"}, {"index": "97", "colour": "orange", "code": "                coll.append(line)\n", "error": "none", "author": "tomerf@il.ibm.com"}, {"index": "98", "colour": "orange", "code": "        if self.isatty:\n", "error": "none", "author": "tomerf@il.ibm.com"}, {"index": "99", "colour": "orange", "code": "            stdout.pop(0)  # discard first line of prompt\n", "error": "none", "author": "tomer.filiba@emc.com"}, {"index": "100", "colour": "orange", "code": "        try:\n", "error": "none", "author": "tomerf@il.ibm.com"}, {"index": "101", "colour": "orange", "code": "            self.returncode = int(stdout.pop(-1))\n", "error": "none", "author": "tomerf@il.ibm.com"}, {"index": "102", "colour": "orange", "code": "        except (IndexError, ValueError):\n", "error": "none", "author": "tomerf@il.ibm.com"}, {"index": "103", "colour": "orange", "code": "            self.returncode = \"Unknown\"\n", "error": "none", "author": "tomerf@il.ibm.com"}, {"index": "104", "colour": "orange", "code": "        self._done = True\n", "error": "none", "author": "tomerf@il.ibm.com"}, {"index": "105", "colour": "orange", "code": "        stdout = six.b(\"\").join(stdout)\n", "error": "none", "author": "tomerfiliba@gmail.com"}, {"index": "106", "colour": "orange", "code": "        stderr = six.b(\"\").join(stderr)\n", "error": "none", "author": "tomerfiliba@gmail.com"}, {"index": "107", "colour": "orange", "code": "        return stdout, stderr\n", "error": "none", "author": "tomerf@il.ibm.com"}, {"index": "108", "colour": "orange", "code": "\n", "error": "none", "author": "tomerf@il.ibm.com"}, {"index": "109", "colour": "orange", "code": "\n", "error": "none", "author": "tomerf@il.ibm.com"}, {"index": "110", "colour": "orange", "code": "class ShellSession(object):\n", "error": "none", "author": "tomerf@il.ibm.com"}, {"index": "111", "colour": "orange", "code": "    \"\"\"An abstraction layer over *shell sessions*. A shell session is the execution of an\n", "error": "none", "author": "tomerf@il.ibm.com"}, {"index": "112", "colour": "orange", "code": "    interactive shell (``/bin/sh`` or something compatible), over which you may run commands\n", "error": "none", "author": "tomerf@il.ibm.com"}, {"index": "113", "colour": "orange", "code": "    (sent over stdin). The output of is then read from stdout and stderr. Shell sessions are\n", "error": "none", "author": "tomerf@il.ibm.com"}, {"index": "114", "colour": "orange", "code": "    less \"robust\" than executing a process on its own, and they are susseptible to all sorts\n", "error": "none", "author": "tomerf@il.ibm.com"}, {"index": "115", "colour": "orange", "code": "    of malformatted-strings attacks, and there is little benefit from using them locally.\n", "error": "none", "author": "tomer.filiba@emc.com"}, {"index": "116", "colour": "orange", "code": "    However, they can greatly speed up remote connections, and are required for the implementation\n", "error": "none", "author": "tomerf@il.ibm.com"}, {"index": "117", "colour": "orange", "code": "    of :class:`SshMachine <plumbum.machines.remote.SshMachine>`, as they allow us to send multiple\n", "error": "none", "author": "Tomer.Filiba@emc.com"}, {"index": "118", "colour": "orange", "code": "    commands over a single SSH connection (setting up separate SSH connections incurs a high\n", "error": "none", "author": "tomerf@il.ibm.com"}, {"index": "119", "colour": "orange", "code": "    overhead). Try to avoid using shell sessions, unless you know what you're doing.\n", "error": "none", "author": "tomer.filiba@emc.com"}, {"index": "120", "colour": "orange", "code": "\n", "error": "none", "author": "tomer.filiba@emc.com"}, {"index": "121", "colour": "orange", "code": "    Instances of this class may be used as *context-managers*.\n", "error": "none", "author": "tomerf@il.ibm.com"}, {"index": "122", "colour": "orange", "code": "\n", "error": "none", "author": "tomer.filiba@emc.com"}, {"index": "123", "colour": "orange", "code": "    :param proc: The underlying shell process (with open stdin, stdout and stderr)\n", "error": "none", "author": "tomerf@il.ibm.com"}, {"index": "124", "colour": "orange", "code": "    :param encoding: The encoding to use for the shell session. If ``\"auto\"``, the underlying\n", "error": "none", "author": "tomerf@il.ibm.com"}, {"index": "125", "colour": "orange", "code": "                     process' encoding is used.\n", "error": "none", "author": "tomerf@il.ibm.com"}, {"index": "126", "colour": "orange", "code": "    :param isatty: If true, assume the shell has a TTY and that stdout and stderr are unified\n", "error": "none", "author": "tomer.filiba@emc.com"}, {"index": "127", "colour": "orange", "code": "    :param connect_timeout: The timeout to connect to the shell, after which, if no prompt\n", "error": "none", "author": "Tomer.Filiba@emc.com"}, {"index": "128", "colour": "orange", "code": "                            is seen, the shell process is killed\n", "error": "none", "author": "Tomer.Filiba@emc.com"}, {"index": "129", "colour": "orange", "code": "    \"\"\"\n", "error": "none", "author": "tomerf@il.ibm.com"}, {"index": "130", "colour": "orange", "code": "    def __init__(self, proc, encoding = \"auto\", isatty = False, connect_timeout = 5):\n", "error": "none", "author": "Tomer.Filiba@emc.com"}, {"index": "131", "colour": "orange", "code": "        self.proc = proc\n", "error": "none", "author": "tomerf@il.ibm.com"}, {"index": "132", "colour": "orange", "code": "        self.encoding = proc.encoding if encoding == \"auto\" else encoding\n", "error": "none", "author": "tomer.filiba@emc.com"}, {"index": "133", "colour": "orange", "code": "        self.isatty = isatty\n", "error": "none", "author": "tomerf@il.ibm.com"}, {"index": "134", "colour": "orange", "code": "        self._current = None\n", "error": "none", "author": "tomerf@il.ibm.com"}, {"index": "135", "colour": "orange", "code": "        if connect_timeout:\n", "error": "none", "author": "Tomer.Filiba@emc.com"}, {"index": "136", "colour": "green", "code": "            def closer():\n", "error": "W", "author": "tomerfiliba@gmail.com"}, {"index": "137", "colour": "orange", "code": "                shell_logger.error(\"Connection to %s timed out (%d sec)\", proc, connect_timeout)\n", "error": "none", "author": "tomerfiliba@gmail.com"}, {"index": "138", "colour": "orange", "code": "                self.close()\n", "error": "none", "author": "tomerfiliba@gmail.com"}, {"index": "139", "colour": "orange", "code": "            timer = threading.Timer(connect_timeout, self.close)\n", "error": "none", "author": "Tomer.Filiba@emc.com"}, {"index": "140", "colour": "orange", "code": "            timer.start()\n", "error": "none", "author": "Tomer.Filiba@emc.com"}, {"index": "141", "colour": "orange", "code": "        self.run(\"\")\n", "error": "none", "author": "tomerf@il.ibm.com"}, {"index": "142", "colour": "orange", "code": "        if connect_timeout:\n", "error": "none", "author": "Tomer.Filiba@emc.com"}, {"index": "143", "colour": "orange", "code": "            timer.cancel()\n", "error": "none", "author": "Tomer.Filiba@emc.com"}, {"index": "144", "colour": "orange", "code": "\n", "error": "none", "author": "tomer.filiba@emc.com"}, {"index": "145", "colour": "orange", "code": "    def __enter__(self):\n", "error": "none", "author": "tomerf@il.ibm.com"}, {"index": "146", "colour": "orange", "code": "        return self\n", "error": "none", "author": "tomerf@il.ibm.com"}, {"index": "147", "colour": "orange", "code": "    def __exit__(self, t, v, tb):\n", "error": "none", "author": "tomerf@il.ibm.com"}, {"index": "148", "colour": "orange", "code": "        self.close()\n", "error": "none", "author": "tomerf@il.ibm.com"}, {"index": "149", "colour": "orange", "code": "    def __del__(self):\n", "error": "none", "author": "tomerf@il.ibm.com"}, {"index": "150", "colour": "orange", "code": "        try:\n", "error": "none", "author": "tomerf@il.ibm.com"}, {"index": "151", "colour": "orange", "code": "            self.close()\n", "error": "none", "author": "tomerf@il.ibm.com"}, {"index": "152", "colour": "green", "code": "        except Exception:\n", "error": "W", "author": "tomerf@il.ibm.com"}, {"index": "153", "colour": "orange", "code": "            pass\n", "error": "none", "author": "tomerf@il.ibm.com"}, {"index": "154", "colour": "orange", "code": "\n", "error": "none", "author": "tomer.filiba@emc.com"}, {"index": "155", "colour": "orange", "code": "    def alive(self):\n", "error": "none", "author": "tomerf@il.ibm.com"}, {"index": "156", "colour": "orange", "code": "        \"\"\"Returns ``True`` if the underlying shell process is alive, ``False`` otherwise\"\"\"\n", "error": "none", "author": "tomerf@il.ibm.com"}, {"index": "157", "colour": "orange", "code": "        return self.proc and self.proc.poll() is None\n", "error": "none", "author": "tomerf@il.ibm.com"}, {"index": "158", "colour": "orange", "code": "\n", "error": "none", "author": "tomer.filiba@emc.com"}, {"index": "159", "colour": "orange", "code": "    def close(self):\n", "error": "none", "author": "tomerf@il.ibm.com"}, {"index": "160", "colour": "orange", "code": "        \"\"\"Closes (terminates) the shell session\"\"\"\n", "error": "none", "author": "tomerf@il.ibm.com"}, {"index": "161", "colour": "orange", "code": "        if not self.alive():\n", "error": "none", "author": "tomerf@il.ibm.com"}, {"index": "162", "colour": "orange", "code": "            return\n", "error": "none", "author": "tomerf@il.ibm.com"}, {"index": "163", "colour": "orange", "code": "        try:\n", "error": "none", "author": "tomerf@il.ibm.com"}, {"index": "164", "colour": "orange", "code": "            self.proc.stdin.write(six.b(\"\\nexit\\n\\n\\nexit\\n\\n\"))\n", "error": "none", "author": "tomerfiliba@gmail.com"}, {"index": "165", "colour": "orange", "code": "            self.proc.stdin.flush()\n", "error": "none", "author": "tomerf@il.ibm.com"}, {"index": "166", "colour": "orange", "code": "            time.sleep(0.05)\n", "error": "none", "author": "tomerf@il.ibm.com"}, {"index": "167", "colour": "orange", "code": "        except (ValueError, EnvironmentError):\n", "error": "none", "author": "tomerfiliba@gmail.com"}, {"index": "168", "colour": "orange", "code": "            pass\n", "error": "none", "author": "tomerfiliba@gmail.com"}, {"index": "169", "colour": "orange", "code": "        for p in [self.proc.stdin, self.proc.stdout, self.proc.stderr]:\n", "error": "none", "author": "tomerf@il.ibm.com"}, {"index": "170", "colour": "orange", "code": "            try:\n", "error": "none", "author": "tomerf@il.ibm.com"}, {"index": "171", "colour": "orange", "code": "                p.close()\n", "error": "none", "author": "tomerf@il.ibm.com"}, {"index": "172", "colour": "green", "code": "            except Exception:\n", "error": "W", "author": "tomerf@il.ibm.com"}, {"index": "173", "colour": "orange", "code": "                pass\n", "error": "none", "author": "tomerf@il.ibm.com"}, {"index": "174", "colour": "orange", "code": "        try:\n", "error": "none", "author": "tomerfiliba@gmail.com"}, {"index": "175", "colour": "orange", "code": "            self.proc.kill()\n", "error": "none", "author": "tomerfiliba@gmail.com"}, {"index": "176", "colour": "orange", "code": "        except EnvironmentError:\n", "error": "none", "author": "tomerf@il.ibm.com"}, {"index": "177", "colour": "orange", "code": "            pass\n", "error": "none", "author": "tomerf@il.ibm.com"}, {"index": "178", "colour": "orange", "code": "        self.proc = None\n", "error": "none", "author": "tomerf@il.ibm.com"}, {"index": "179", "colour": "orange", "code": "\n", "error": "none", "author": "tomer.filiba@emc.com"}, {"index": "180", "colour": "orange", "code": "    def popen(self, cmd):\n", "error": "none", "author": "tomerf@il.ibm.com"}, {"index": "181", "colour": "orange", "code": "        \"\"\"Runs the given command in the shell, adding some decoration around it. Only a single\n", "error": "none", "author": "tomerf@il.ibm.com"}, {"index": "182", "colour": "orange", "code": "        command can be executed at any given time.\n", "error": "none", "author": "tomerf@il.ibm.com"}, {"index": "183", "colour": "orange", "code": "\n", "error": "none", "author": "tomer.filiba@emc.com"}, {"index": "184", "colour": "orange", "code": "        :param cmd: The command (string or :class:`Command <plumbum.commands.BaseCommand>` object)\n", "error": "none", "author": "tomerf@il.ibm.com"}, {"index": "185", "colour": "orange", "code": "                    to run\n", "error": "none", "author": "tomerf@il.ibm.com"}, {"index": "186", "colour": "orange", "code": "        :returns: A :class:`SessionPopen <plumbum.session.SessionPopen>` instance\n", "error": "none", "author": "tomerf@il.ibm.com"}, {"index": "187", "colour": "orange", "code": "        \"\"\"\n", "error": "none", "author": "tomerf@il.ibm.com"}, {"index": "188", "colour": "orange", "code": "        if self.proc is None:\n", "error": "none", "author": "tomerf@il.ibm.com"}, {"index": "189", "colour": "orange", "code": "            raise ShellSessionError(\"Shell session has already been closed\")\n", "error": "none", "author": "tomerf@il.ibm.com"}, {"index": "190", "colour": "green", "code": "        if self._current and not self._current._done:\n", "error": "W", "author": "tomerf@il.ibm.com"}, {"index": "191", "colour": "orange", "code": "            raise ShellSessionError(\"Each shell may start only one process at a time\")\n", "error": "none", "author": "tomerf@il.ibm.com"}, {"index": "192", "colour": "orange", "code": "\n", "error": "none", "author": "tomer.filiba@emc.com"}, {"index": "193", "colour": "orange", "code": "        if isinstance(cmd, BaseCommand):\n", "error": "none", "author": "tomerf@il.ibm.com"}, {"index": "194", "colour": "orange", "code": "            full_cmd = cmd.formulate(1)\n", "error": "none", "author": "tomerf@il.ibm.com"}, {"index": "195", "colour": "orange", "code": "        else:\n", "error": "none", "author": "tomerf@il.ibm.com"}, {"index": "196", "colour": "orange", "code": "            full_cmd = cmd\n", "error": "none", "author": "tomerf@il.ibm.com"}, {"index": "197", "colour": "orange", "code": "        marker = \"--.END%s.--\" % (time.time() * random.random(),)\n", "error": "none", "author": "tomerf@il.ibm.com"}, {"index": "198", "colour": "orange", "code": "        if full_cmd.strip():\n", "error": "none", "author": "tomerf@il.ibm.com"}, {"index": "199", "colour": "orange", "code": "            full_cmd += \" ; \"\n", "error": "none", "author": "tomerf@il.ibm.com"}, {"index": "200", "colour": "orange", "code": "        else:\n", "error": "none", "author": "tomerf@il.ibm.com"}, {"index": "201", "colour": "orange", "code": "            full_cmd = \"true ; \"\n", "error": "none", "author": "tomerf@il.ibm.com"}, {"index": "202", "colour": "orange", "code": "        full_cmd += \"echo $? ; echo '%s'\" % (marker,)\n", "error": "none", "author": "tomerf@il.ibm.com"}, {"index": "203", "colour": "orange", "code": "        if not self.isatty:\n", "error": "none", "author": "tomerf@il.ibm.com"}, {"index": "204", "colour": "orange", "code": "            full_cmd += \" ; echo '%s' 1>&2\" % (marker,)\n", "error": "none", "author": "tomerf@il.ibm.com"}, {"index": "205", "colour": "orange", "code": "        if self.encoding:\n", "error": "none", "author": "tomerfiliba@gmail.com"}, {"index": "206", "colour": "orange", "code": "            full_cmd = full_cmd.encode(self.encoding)\n", "error": "none", "author": "tomerfiliba@gmail.com"}, {"index": "207", "colour": "orange", "code": "        shell_logger.debug(\"Running %r\", full_cmd)\n", "error": "none", "author": "tomerf@il.ibm.com"}, {"index": "208", "colour": "orange", "code": "        self.proc.stdin.write(full_cmd + six.b(\"\\n\"))\n", "error": "none", "author": "tomerfiliba@gmail.com"}, {"index": "209", "colour": "orange", "code": "        self.proc.stdin.flush()\n", "error": "none", "author": "tomerf@il.ibm.com"}, {"index": "210", "colour": "orange", "code": "        self._current = SessionPopen(full_cmd, self.isatty, self.proc.stdin,\n", "error": "none", "author": "tomer.filiba@emc.com"}, {"index": "211", "colour": "orange", "code": "            MarkedPipe(self.proc.stdout, marker), MarkedPipe(self.proc.stderr, marker),\n", "error": "none", "author": "tomerfiliba@gmail.com"}, {"index": "212", "colour": "orange", "code": "            self.encoding)\n", "error": "none", "author": "tomerfiliba@gmail.com"}, {"index": "213", "colour": "orange", "code": "        return self._current\n", "error": "none", "author": "tomerf@il.ibm.com"}, {"index": "214", "colour": "orange", "code": "\n", "error": "none", "author": "tomer.filiba@emc.com"}, {"index": "215", "colour": "orange", "code": "    def run(self, cmd, retcode = 0):\n", "error": "none", "author": "tomerf@il.ibm.com"}, {"index": "216", "colour": "orange", "code": "        \"\"\"Runs the given command\n", "error": "none", "author": "tomer.filiba@emc.com"}, {"index": "217", "colour": "orange", "code": "\n", "error": "none", "author": "tomer.filiba@emc.com"}, {"index": "218", "colour": "orange", "code": "        :param cmd: The command (string or :class:`Command <plumbum.commands.BaseCommand>` object)\n", "error": "none", "author": "tomerf@il.ibm.com"}, {"index": "219", "colour": "orange", "code": "                    to run\n", "error": "none", "author": "tomerf@il.ibm.com"}, {"index": "220", "colour": "orange", "code": "        :param retcode: The expected return code (0 by default). Set to ``None`` in order to\n", "error": "none", "author": "tomer.filiba@emc.com"}, {"index": "221", "colour": "orange", "code": "                        ignore erroneous return codes\n", "error": "none", "author": "tomerf@il.ibm.com"}, {"index": "222", "colour": "orange", "code": "        :returns: A tuple of (return code, stdout, stderr)\n", "error": "none", "author": "tomerf@il.ibm.com"}, {"index": "223", "colour": "orange", "code": "        \"\"\"\n", "error": "none", "author": "tomerf@il.ibm.com"}, {"index": "224", "colour": "orange", "code": "        return run_proc(self.popen(cmd), retcode)\n", "error": "none", "author": "tomerf@il.ibm.com"}, {"index": "225", "colour": "orange", "code": "\n", "error": "none", "author": "tomerf@il.ibm.com"}]}