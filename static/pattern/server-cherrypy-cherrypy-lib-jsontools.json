{"path": "/home/asumal/git/cs410/pattern/pattern/server/cherrypy/cherrypy/lib/jsontools.py", "lines": [{"index": "1", "colour": "green", "code": "import sys\n", "error": "W", "author": "tom@organisms.be"}, {"index": "2", "colour": "orange", "code": "import cherrypy\n", "error": "none", "author": "tom@organisms.be"}, {"index": "3", "colour": "green", "code": "from cherrypy._cpcompat import basestring, ntou, json, json_encode, json_decode\n", "error": "W", "author": "tom@organisms.be"}, {"index": "4", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "5", "colour": "orange", "code": "def json_processor(entity):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "6", "colour": "orange", "code": "    \"\"\"Read application/json data into request.json.\"\"\"\n", "error": "none", "author": "tom@organisms.be"}, {"index": "7", "colour": "orange", "code": "    if not entity.headers.get(ntou(\"Content-Length\"), ntou(\"\")):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "8", "colour": "orange", "code": "        raise cherrypy.HTTPError(411)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "9", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "10", "colour": "orange", "code": "    body = entity.fp.read()\n", "error": "none", "author": "tom@organisms.be"}, {"index": "11", "colour": "orange", "code": "    try:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "12", "colour": "orange", "code": "        cherrypy.serving.request.json = json_decode(body.decode('utf-8'))\n", "error": "none", "author": "tom@organisms.be"}, {"index": "13", "colour": "orange", "code": "    except ValueError:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "14", "colour": "orange", "code": "        raise cherrypy.HTTPError(400, 'Invalid JSON document')\n", "error": "none", "author": "tom@organisms.be"}, {"index": "15", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "16", "colour": "green", "code": "def json_in(content_type=[ntou('application/json'), ntou('text/javascript')],\n", "error": "W", "author": "tom@organisms.be"}, {"index": "17", "colour": "orange", "code": "            force=True, debug=False, processor = json_processor):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "18", "colour": "orange", "code": "    \"\"\"Add a processor to parse JSON request entities:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "19", "colour": "orange", "code": "    The default processor places the parsed data into request.json.\n", "error": "none", "author": "tom@organisms.be"}, {"index": "20", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "21", "colour": "orange", "code": "    Incoming request entities which match the given content_type(s) will\n", "error": "none", "author": "tom@organisms.be"}, {"index": "22", "colour": "orange", "code": "    be deserialized from JSON to the Python equivalent, and the result\n", "error": "none", "author": "tom@organisms.be"}, {"index": "23", "colour": "orange", "code": "    stored at cherrypy.request.json. The 'content_type' argument may\n", "error": "none", "author": "tom@organisms.be"}, {"index": "24", "colour": "orange", "code": "    be a Content-Type string or a list of allowable Content-Type strings.\n", "error": "none", "author": "tom@organisms.be"}, {"index": "25", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "26", "colour": "orange", "code": "    If the 'force' argument is True (the default), then entities of other\n", "error": "none", "author": "tom@organisms.be"}, {"index": "27", "colour": "orange", "code": "    content types will not be allowed; \"415 Unsupported Media Type\" is\n", "error": "none", "author": "tom@organisms.be"}, {"index": "28", "colour": "orange", "code": "    raised instead.\n", "error": "none", "author": "tom@organisms.be"}, {"index": "29", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "30", "colour": "orange", "code": "    Supply your own processor to use a custom decoder, or to handle the parsed\n", "error": "none", "author": "tom@organisms.be"}, {"index": "31", "colour": "orange", "code": "    data differently.  The processor can be configured via\n", "error": "none", "author": "tom@organisms.be"}, {"index": "32", "colour": "orange", "code": "    tools.json_in.processor or via the decorator method.\n", "error": "none", "author": "tom@organisms.be"}, {"index": "33", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "34", "colour": "orange", "code": "    Note that the deserializer requires the client send a Content-Length\n", "error": "none", "author": "tom@organisms.be"}, {"index": "35", "colour": "orange", "code": "    request header, or it will raise \"411 Length Required\". If for any\n", "error": "none", "author": "tom@organisms.be"}, {"index": "36", "colour": "orange", "code": "    other reason the request entity cannot be deserialized from JSON,\n", "error": "none", "author": "tom@organisms.be"}, {"index": "37", "colour": "orange", "code": "    it will raise \"400 Bad Request: Invalid JSON document\".\n", "error": "none", "author": "tom@organisms.be"}, {"index": "38", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "39", "colour": "orange", "code": "    You must be using Python 2.6 or greater, or have the 'simplejson'\n", "error": "none", "author": "tom@organisms.be"}, {"index": "40", "colour": "orange", "code": "    package importable; otherwise, ValueError is raised during processing.\n", "error": "none", "author": "tom@organisms.be"}, {"index": "41", "colour": "orange", "code": "    \"\"\"\n", "error": "none", "author": "tom@organisms.be"}, {"index": "42", "colour": "orange", "code": "    request = cherrypy.serving.request\n", "error": "none", "author": "tom@organisms.be"}, {"index": "43", "colour": "orange", "code": "    if isinstance(content_type, basestring):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "44", "colour": "orange", "code": "        content_type = [content_type]\n", "error": "none", "author": "tom@organisms.be"}, {"index": "45", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "46", "colour": "orange", "code": "    if force:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "47", "colour": "orange", "code": "        if debug:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "48", "colour": "orange", "code": "            cherrypy.log('Removing body processors %s' %\n", "error": "none", "author": "tom@organisms.be"}, {"index": "49", "colour": "orange", "code": "                         repr(request.body.processors.keys()), 'TOOLS.JSON_IN')\n", "error": "none", "author": "tom@organisms.be"}, {"index": "50", "colour": "orange", "code": "        request.body.processors.clear()\n", "error": "none", "author": "tom@organisms.be"}, {"index": "51", "colour": "orange", "code": "        request.body.default_proc = cherrypy.HTTPError(\n", "error": "none", "author": "tom@organisms.be"}, {"index": "52", "colour": "orange", "code": "            415, 'Expected an entity of content type %s' %\n", "error": "none", "author": "tom@organisms.be"}, {"index": "53", "colour": "orange", "code": "            ', '.join(content_type))\n", "error": "none", "author": "tom@organisms.be"}, {"index": "54", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "55", "colour": "orange", "code": "    for ct in content_type:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "56", "colour": "orange", "code": "        if debug:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "57", "colour": "orange", "code": "            cherrypy.log('Adding body processor for %s' % ct, 'TOOLS.JSON_IN')\n", "error": "none", "author": "tom@organisms.be"}, {"index": "58", "colour": "orange", "code": "        request.body.processors[ct] = processor\n", "error": "none", "author": "tom@organisms.be"}, {"index": "59", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "60", "colour": "orange", "code": "def json_handler(*args, **kwargs):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "61", "colour": "green", "code": "    value = cherrypy.serving.request._json_inner_handler(*args, **kwargs)\n", "error": "W", "author": "tom@organisms.be"}, {"index": "62", "colour": "orange", "code": "    return json_encode(value)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "63", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "64", "colour": "orange", "code": "def json_out(content_type='application/json', debug=False, handler=json_handler):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "65", "colour": "orange", "code": "    \"\"\"Wrap request.handler to serialize its output to JSON. Sets Content-Type.\n", "error": "none", "author": "tom@organisms.be"}, {"index": "66", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "67", "colour": "orange", "code": "    If the given content_type is None, the Content-Type response header\n", "error": "none", "author": "tom@organisms.be"}, {"index": "68", "colour": "orange", "code": "    is not set.\n", "error": "none", "author": "tom@organisms.be"}, {"index": "69", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "70", "colour": "orange", "code": "    Provide your own handler to use a custom encoder.  For example\n", "error": "none", "author": "tom@organisms.be"}, {"index": "71", "colour": "orange", "code": "    cherrypy.config['tools.json_out.handler'] = <function>, or\n", "error": "none", "author": "tom@organisms.be"}, {"index": "72", "colour": "orange", "code": "    @json_out(handler=function).\n", "error": "none", "author": "tom@organisms.be"}, {"index": "73", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "74", "colour": "orange", "code": "    You must be using Python 2.6 or greater, or have the 'simplejson'\n", "error": "none", "author": "tom@organisms.be"}, {"index": "75", "colour": "orange", "code": "    package importable; otherwise, ValueError is raised during processing.\n", "error": "none", "author": "tom@organisms.be"}, {"index": "76", "colour": "orange", "code": "    \"\"\"\n", "error": "none", "author": "tom@organisms.be"}, {"index": "77", "colour": "orange", "code": "    request = cherrypy.serving.request\n", "error": "none", "author": "tom@organisms.be"}, {"index": "78", "colour": "orange", "code": "    if debug:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "79", "colour": "orange", "code": "        cherrypy.log('Replacing %s with JSON handler' % request.handler,\n", "error": "none", "author": "tom@organisms.be"}, {"index": "80", "colour": "orange", "code": "                     'TOOLS.JSON_OUT')\n", "error": "none", "author": "tom@organisms.be"}, {"index": "81", "colour": "green", "code": "    request._json_inner_handler = request.handler\n", "error": "W", "author": "tom@organisms.be"}, {"index": "82", "colour": "orange", "code": "    request.handler = handler\n", "error": "none", "author": "tom@organisms.be"}, {"index": "83", "colour": "orange", "code": "    if content_type is not None:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "84", "colour": "orange", "code": "        if debug:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "85", "colour": "orange", "code": "            cherrypy.log('Setting Content-Type to %s' % content_type, 'TOOLS.JSON_OUT')\n", "error": "none", "author": "tom@organisms.be"}, {"index": "86", "colour": "orange", "code": "        cherrypy.serving.response.headers['Content-Type'] = content_type\n", "error": "none", "author": "tom@organisms.be"}, {"index": "87", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}]}