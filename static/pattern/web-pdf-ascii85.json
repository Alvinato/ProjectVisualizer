{"path": "/home/asumal/git/cs410/pattern/pattern/web/pdf/ascii85.py", "lines": [{"index": "1", "colour": "orange", "code": "#!/usr/bin/env python2\n", "error": "none", "author": "tom@organisms.be"}, {"index": "2", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "3", "colour": "orange", "code": "\"\"\" Python implementation of ASCII85/ASCIIHex decoder (Adobe version).\n", "error": "none", "author": "tom@organisms.be"}, {"index": "4", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "5", "colour": "orange", "code": "This code is in the public domain.\n", "error": "none", "author": "tom@organisms.be"}, {"index": "6", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "7", "colour": "orange", "code": "\"\"\"\n", "error": "none", "author": "tom@organisms.be"}, {"index": "8", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "9", "colour": "orange", "code": "import re\n", "error": "none", "author": "tom@organisms.be"}, {"index": "10", "colour": "orange", "code": "import struct\n", "error": "none", "author": "tom@organisms.be"}, {"index": "11", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "12", "colour": "orange", "code": "# ascii85decode(data)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "13", "colour": "orange", "code": "def ascii85decode(data):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "14", "colour": "orange", "code": "    \"\"\"\n", "error": "none", "author": "tom@organisms.be"}, {"index": "15", "colour": "orange", "code": "    In ASCII85 encoding, every four bytes are encoded with five ASCII\n", "error": "none", "author": "tom@organisms.be"}, {"index": "16", "colour": "orange", "code": "    letters, using 85 different types of characters (as 256**4 < 85**5).\n", "error": "none", "author": "tom@organisms.be"}, {"index": "17", "colour": "orange", "code": "    When the length of the original bytes is not a multiple of 4, a special\n", "error": "none", "author": "tom@organisms.be"}, {"index": "18", "colour": "orange", "code": "    rule is used for round up.\n", "error": "none", "author": "tom@organisms.be"}, {"index": "19", "colour": "orange", "code": "    \n", "error": "none", "author": "tom@organisms.be"}, {"index": "20", "colour": "orange", "code": "    The Adobe's ASCII85 implementation is slightly different from\n", "error": "none", "author": "tom@organisms.be"}, {"index": "21", "colour": "orange", "code": "    its original in handling the last characters.\n", "error": "none", "author": "tom@organisms.be"}, {"index": "22", "colour": "orange", "code": "    \n", "error": "none", "author": "tom@organisms.be"}, {"index": "23", "colour": "orange", "code": "    The sample string is taken from:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "24", "colour": "orange", "code": "      http://en.wikipedia.org/w/index.php?title=Ascii85\n", "error": "none", "author": "tom@organisms.be"}, {"index": "25", "colour": "orange", "code": "    \n", "error": "none", "author": "tom@organisms.be"}, {"index": "26", "colour": "orange", "code": "    >>> ascii85decode('9jqo^BlbD-BleB1DJ+*+F(f,q')\n", "error": "none", "author": "tom@organisms.be"}, {"index": "27", "colour": "orange", "code": "    'Man is distinguished'\n", "error": "none", "author": "tom@organisms.be"}, {"index": "28", "colour": "orange", "code": "    >>> ascii85decode('E,9)oF*2M7/c~>')\n", "error": "none", "author": "tom@organisms.be"}, {"index": "29", "colour": "orange", "code": "    'pleasure.'\n", "error": "none", "author": "tom@organisms.be"}, {"index": "30", "colour": "orange", "code": "    \"\"\"\n", "error": "none", "author": "tom@organisms.be"}, {"index": "31", "colour": "orange", "code": "    n = b = 0\n", "error": "none", "author": "tom@organisms.be"}, {"index": "32", "colour": "orange", "code": "    out = ''\n", "error": "none", "author": "tom@organisms.be"}, {"index": "33", "colour": "orange", "code": "    for c in data:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "34", "colour": "orange", "code": "        if '!' <= c and c <= 'u':\n", "error": "none", "author": "tom@organisms.be"}, {"index": "35", "colour": "orange", "code": "            n += 1\n", "error": "none", "author": "tom@organisms.be"}, {"index": "36", "colour": "orange", "code": "            b = b*85+(ord(c)-33)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "37", "colour": "orange", "code": "            if n == 5:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "38", "colour": "orange", "code": "                out += struct.pack('>L',b)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "39", "colour": "orange", "code": "                n = b = 0\n", "error": "none", "author": "tom@organisms.be"}, {"index": "40", "colour": "orange", "code": "        elif c == 'z':\n", "error": "none", "author": "tom@organisms.be"}, {"index": "41", "colour": "orange", "code": "            assert n == 0\n", "error": "none", "author": "tom@organisms.be"}, {"index": "42", "colour": "orange", "code": "            out += '\\0\\0\\0\\0'\n", "error": "none", "author": "tom@organisms.be"}, {"index": "43", "colour": "orange", "code": "        elif c == '~':\n", "error": "none", "author": "tom@organisms.be"}, {"index": "44", "colour": "orange", "code": "            if n:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "45", "colour": "orange", "code": "                for _ in range(5-n):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "46", "colour": "orange", "code": "                    b = b*85+84\n", "error": "none", "author": "tom@organisms.be"}, {"index": "47", "colour": "orange", "code": "                out += struct.pack('>L',b)[:n-1]\n", "error": "none", "author": "tom@organisms.be"}, {"index": "48", "colour": "orange", "code": "            break\n", "error": "none", "author": "tom@organisms.be"}, {"index": "49", "colour": "orange", "code": "    return out\n", "error": "none", "author": "tom@organisms.be"}, {"index": "50", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "51", "colour": "orange", "code": "# asciihexdecode(data)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "52", "colour": "orange", "code": "hex_re = re.compile(r'([a-f\\d]{2})', re.IGNORECASE)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "53", "colour": "orange", "code": "trail_re = re.compile(r'^(?:[a-f\\d]{2}|\\s)*([a-f\\d])[\\s>]*$', re.IGNORECASE)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "54", "colour": "orange", "code": "def asciihexdecode(data):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "55", "colour": "orange", "code": "    \"\"\"\n", "error": "none", "author": "tom@organisms.be"}, {"index": "56", "colour": "orange", "code": "    ASCIIHexDecode filter: PDFReference v1.4 section 3.3.1\n", "error": "none", "author": "tom@organisms.be"}, {"index": "57", "colour": "orange", "code": "    For each pair of ASCII hexadecimal digits (0-9 and A-F or a-f), the\n", "error": "none", "author": "tom@organisms.be"}, {"index": "58", "colour": "orange", "code": "    ASCIIHexDecode filter produces one byte of binary data. All white-space\n", "error": "none", "author": "tom@organisms.be"}, {"index": "59", "colour": "orange", "code": "    characters are ignored. A right angle bracket character (>) indicates\n", "error": "none", "author": "tom@organisms.be"}, {"index": "60", "colour": "orange", "code": "    EOD. Any other characters will cause an error. If the filter encounters\n", "error": "none", "author": "tom@organisms.be"}, {"index": "61", "colour": "orange", "code": "    the EOD marker after reading an odd number of hexadecimal digits, it\n", "error": "none", "author": "tom@organisms.be"}, {"index": "62", "colour": "orange", "code": "    will behave as if a 0 followed the last digit.\n", "error": "none", "author": "tom@organisms.be"}, {"index": "63", "colour": "orange", "code": "    \n", "error": "none", "author": "tom@organisms.be"}, {"index": "64", "colour": "orange", "code": "    >>> asciihexdecode('61 62 2e6364   65')\n", "error": "none", "author": "tom@organisms.be"}, {"index": "65", "colour": "orange", "code": "    'ab.cde'\n", "error": "none", "author": "tom@organisms.be"}, {"index": "66", "colour": "orange", "code": "    >>> asciihexdecode('61 62 2e6364   657>')\n", "error": "none", "author": "tom@organisms.be"}, {"index": "67", "colour": "orange", "code": "    'ab.cdep'\n", "error": "none", "author": "tom@organisms.be"}, {"index": "68", "colour": "orange", "code": "    >>> asciihexdecode('7>')\n", "error": "none", "author": "tom@organisms.be"}, {"index": "69", "colour": "orange", "code": "    'p'\n", "error": "none", "author": "tom@organisms.be"}, {"index": "70", "colour": "orange", "code": "    \"\"\"\n", "error": "none", "author": "tom@organisms.be"}, {"index": "71", "colour": "orange", "code": "    decode = (lambda hx: chr(int(hx, 16)))\n", "error": "none", "author": "tom@organisms.be"}, {"index": "72", "colour": "green", "code": "    out = map(decode, hex_re.findall(data))\n", "error": "W", "author": "tom@organisms.be"}, {"index": "73", "colour": "orange", "code": "    m = trail_re.search(data)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "74", "colour": "orange", "code": "    if m:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "75", "colour": "orange", "code": "        out.append(decode(\"%c0\" % m.group(1)))\n", "error": "none", "author": "tom@organisms.be"}, {"index": "76", "colour": "orange", "code": "    return ''.join(out)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "77", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "78", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "79", "colour": "orange", "code": "if __name__ == '__main__':\n", "error": "none", "author": "tom@organisms.be"}, {"index": "80", "colour": "orange", "code": "    import doctest\n", "error": "none", "author": "tom@organisms.be"}, {"index": "81", "colour": "orange", "code": "    doctest.testmod()\n", "error": "none", "author": "tom@organisms.be"}]}