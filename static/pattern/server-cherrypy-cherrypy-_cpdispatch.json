{"path": "/home/asumal/git/cs410/pattern/pattern/server/cherrypy/cherrypy/_cpdispatch.py", "lines": [{"index": "1", "colour": "orange", "code": "\"\"\"CherryPy dispatchers.\n", "error": "none", "author": "tom@organisms.be"}, {"index": "2", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "3", "colour": "orange", "code": "A 'dispatcher' is the object which looks up the 'page handler' callable\n", "error": "none", "author": "tom@organisms.be"}, {"index": "4", "colour": "orange", "code": "and collects config for the current request based on the path_info, other\n", "error": "none", "author": "tom@organisms.be"}, {"index": "5", "colour": "orange", "code": "request attributes, and the application architecture. The core calls the\n", "error": "none", "author": "tom@organisms.be"}, {"index": "6", "colour": "orange", "code": "dispatcher as early as possible, passing it a 'path_info' argument.\n", "error": "none", "author": "tom@organisms.be"}, {"index": "7", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "8", "colour": "orange", "code": "The default dispatcher discovers the page handler by matching path_info\n", "error": "none", "author": "tom@organisms.be"}, {"index": "9", "colour": "orange", "code": "to a hierarchical arrangement of objects, starting at request.app.root.\n", "error": "none", "author": "tom@organisms.be"}, {"index": "10", "colour": "orange", "code": "\"\"\"\n", "error": "none", "author": "tom@organisms.be"}, {"index": "11", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "12", "colour": "orange", "code": "import string\n", "error": "none", "author": "tom@organisms.be"}, {"index": "13", "colour": "orange", "code": "import sys\n", "error": "none", "author": "tom@organisms.be"}, {"index": "14", "colour": "orange", "code": "import types\n", "error": "none", "author": "tom@organisms.be"}, {"index": "15", "colour": "orange", "code": "try:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "16", "colour": "orange", "code": "    classtype = (type, types.ClassType)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "17", "colour": "orange", "code": "except AttributeError:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "18", "colour": "orange", "code": "    classtype = type\n", "error": "none", "author": "tom@organisms.be"}, {"index": "19", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "20", "colour": "orange", "code": "import cherrypy\n", "error": "none", "author": "tom@organisms.be"}, {"index": "21", "colour": "green", "code": "from cherrypy._cpcompat import set\n", "error": "W", "author": "tom@organisms.be"}, {"index": "22", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "23", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "24", "colour": "blue", "code": "class PageHandler(object):\n", "error": "R", "author": "tom@organisms.be"}, {"index": "25", "colour": "orange", "code": "    \"\"\"Callable which sets response.body.\"\"\"\n", "error": "none", "author": "tom@organisms.be"}, {"index": "26", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "27", "colour": "green", "code": "    def __init__(self, callable, *args, **kwargs):\n", "error": "W", "author": "tom@organisms.be"}, {"index": "28", "colour": "orange", "code": "        self.callable = callable\n", "error": "none", "author": "tom@organisms.be"}, {"index": "29", "colour": "orange", "code": "        self.args = args\n", "error": "none", "author": "tom@organisms.be"}, {"index": "30", "colour": "orange", "code": "        self.kwargs = kwargs\n", "error": "none", "author": "tom@organisms.be"}, {"index": "31", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "32", "colour": "orange", "code": "    def __call__(self):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "33", "colour": "orange", "code": "        try:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "34", "colour": "orange", "code": "            return self.callable(*self.args, **self.kwargs)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "35", "colour": "orange", "code": "        except TypeError:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "36", "colour": "orange", "code": "            x = sys.exc_info()[1]\n", "error": "none", "author": "tom@organisms.be"}, {"index": "37", "colour": "orange", "code": "            try:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "38", "colour": "orange", "code": "                test_callable_spec(self.callable, self.args, self.kwargs)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "39", "colour": "orange", "code": "            except cherrypy.HTTPError:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "40", "colour": "orange", "code": "                raise sys.exc_info()[1]\n", "error": "none", "author": "tom@organisms.be"}, {"index": "41", "colour": "orange", "code": "            except:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "42", "colour": "orange", "code": "                raise x\n", "error": "none", "author": "tom@organisms.be"}, {"index": "43", "colour": "orange", "code": "            raise\n", "error": "none", "author": "tom@organisms.be"}, {"index": "44", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "45", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "46", "colour": "blue", "code": "def test_callable_spec(callable, callable_args, callable_kwargs):\n", "error": "R", "author": "tom@organisms.be"}, {"index": "47", "colour": "orange", "code": "    \"\"\"\n", "error": "none", "author": "tom@organisms.be"}, {"index": "48", "colour": "orange", "code": "    Inspect callable and test to see if the given args are suitable for it.\n", "error": "none", "author": "tom@organisms.be"}, {"index": "49", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "50", "colour": "orange", "code": "    When an error occurs during the handler's invoking stage there are 2\n", "error": "none", "author": "tom@organisms.be"}, {"index": "51", "colour": "orange", "code": "    erroneous cases:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "52", "colour": "orange", "code": "    1.  Too many parameters passed to a function which doesn't define\n", "error": "none", "author": "tom@organisms.be"}, {"index": "53", "colour": "orange", "code": "        one of *args or **kwargs.\n", "error": "none", "author": "tom@organisms.be"}, {"index": "54", "colour": "orange", "code": "    2.  Too little parameters are passed to the function.\n", "error": "none", "author": "tom@organisms.be"}, {"index": "55", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "56", "colour": "orange", "code": "    There are 3 sources of parameters to a cherrypy handler.\n", "error": "none", "author": "tom@organisms.be"}, {"index": "57", "colour": "orange", "code": "    1.  query string parameters are passed as keyword parameters to the handler.\n", "error": "none", "author": "tom@organisms.be"}, {"index": "58", "colour": "orange", "code": "    2.  body parameters are also passed as keyword parameters.\n", "error": "none", "author": "tom@organisms.be"}, {"index": "59", "colour": "orange", "code": "    3.  when partial matching occurs, the final path atoms are passed as\n", "error": "none", "author": "tom@organisms.be"}, {"index": "60", "colour": "orange", "code": "        positional args.\n", "error": "none", "author": "tom@organisms.be"}, {"index": "61", "colour": "orange", "code": "    Both the query string and path atoms are part of the URI.  If they are\n", "error": "none", "author": "tom@organisms.be"}, {"index": "62", "colour": "orange", "code": "    incorrect, then a 404 Not Found should be raised. Conversely the body\n", "error": "none", "author": "tom@organisms.be"}, {"index": "63", "colour": "orange", "code": "    parameters are part of the request; if they are invalid a 400 Bad Request.\n", "error": "none", "author": "tom@organisms.be"}, {"index": "64", "colour": "orange", "code": "    \"\"\"\n", "error": "none", "author": "tom@organisms.be"}, {"index": "65", "colour": "orange", "code": "    show_mismatched_params = getattr(\n", "error": "none", "author": "tom@organisms.be"}, {"index": "66", "colour": "orange", "code": "        cherrypy.serving.request, 'show_mismatched_params', False)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "67", "colour": "orange", "code": "    try:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "68", "colour": "orange", "code": "        (args, varargs, varkw, defaults) = inspect.getargspec(callable)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "69", "colour": "orange", "code": "    except TypeError:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "70", "colour": "orange", "code": "        if isinstance(callable, object) and hasattr(callable, '__call__'):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "71", "colour": "orange", "code": "            (args, varargs, varkw, defaults) = inspect.getargspec(callable.__call__)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "72", "colour": "orange", "code": "        else:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "73", "colour": "orange", "code": "            # If it wasn't one of our own types, re-raise\n", "error": "none", "author": "tom@organisms.be"}, {"index": "74", "colour": "orange", "code": "            # the original error\n", "error": "none", "author": "tom@organisms.be"}, {"index": "75", "colour": "orange", "code": "            raise\n", "error": "none", "author": "tom@organisms.be"}, {"index": "76", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "77", "colour": "orange", "code": "    if args and args[0] == 'self':\n", "error": "none", "author": "tom@organisms.be"}, {"index": "78", "colour": "orange", "code": "        args = args[1:]\n", "error": "none", "author": "tom@organisms.be"}, {"index": "79", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "80", "colour": "orange", "code": "    arg_usage = dict([(arg, 0,) for arg in args])\n", "error": "none", "author": "tom@organisms.be"}, {"index": "81", "colour": "orange", "code": "    vararg_usage = 0\n", "error": "none", "author": "tom@organisms.be"}, {"index": "82", "colour": "orange", "code": "    varkw_usage = 0\n", "error": "none", "author": "tom@organisms.be"}, {"index": "83", "colour": "orange", "code": "    extra_kwargs = set()\n", "error": "none", "author": "tom@organisms.be"}, {"index": "84", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "85", "colour": "green", "code": "    for i, value in enumerate(callable_args):\n", "error": "W", "author": "tom@organisms.be"}, {"index": "86", "colour": "orange", "code": "        try:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "87", "colour": "orange", "code": "            arg_usage[args[i]] += 1\n", "error": "none", "author": "tom@organisms.be"}, {"index": "88", "colour": "orange", "code": "        except IndexError:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "89", "colour": "orange", "code": "            vararg_usage += 1\n", "error": "none", "author": "tom@organisms.be"}, {"index": "90", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "91", "colour": "orange", "code": "    for key in callable_kwargs.keys():\n", "error": "none", "author": "tom@organisms.be"}, {"index": "92", "colour": "orange", "code": "        try:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "93", "colour": "orange", "code": "            arg_usage[key] += 1\n", "error": "none", "author": "tom@organisms.be"}, {"index": "94", "colour": "orange", "code": "        except KeyError:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "95", "colour": "orange", "code": "            varkw_usage += 1\n", "error": "none", "author": "tom@organisms.be"}, {"index": "96", "colour": "orange", "code": "            extra_kwargs.add(key)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "97", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "98", "colour": "orange", "code": "    # figure out which args have defaults.\n", "error": "none", "author": "tom@organisms.be"}, {"index": "99", "colour": "orange", "code": "    args_with_defaults = args[-len(defaults or []):]\n", "error": "none", "author": "tom@organisms.be"}, {"index": "100", "colour": "green", "code": "    for i, val in enumerate(defaults or []):\n", "error": "W", "author": "tom@organisms.be"}, {"index": "101", "colour": "orange", "code": "        # Defaults take effect only when the arg hasn't been used yet.\n", "error": "none", "author": "tom@organisms.be"}, {"index": "102", "colour": "orange", "code": "        if arg_usage[args_with_defaults[i]] == 0:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "103", "colour": "orange", "code": "            arg_usage[args_with_defaults[i]] += 1\n", "error": "none", "author": "tom@organisms.be"}, {"index": "104", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "105", "colour": "orange", "code": "    missing_args = []\n", "error": "none", "author": "tom@organisms.be"}, {"index": "106", "colour": "orange", "code": "    multiple_args = []\n", "error": "none", "author": "tom@organisms.be"}, {"index": "107", "colour": "orange", "code": "    for key, usage in arg_usage.items():\n", "error": "none", "author": "tom@organisms.be"}, {"index": "108", "colour": "orange", "code": "        if usage == 0:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "109", "colour": "orange", "code": "            missing_args.append(key)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "110", "colour": "orange", "code": "        elif usage > 1:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "111", "colour": "orange", "code": "            multiple_args.append(key)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "112", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "113", "colour": "orange", "code": "    if missing_args:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "114", "colour": "orange", "code": "        # In the case where the method allows body arguments\n", "error": "none", "author": "tom@organisms.be"}, {"index": "115", "colour": "orange", "code": "        # there are 3 potential errors:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "116", "colour": "orange", "code": "        # 1. not enough query string parameters -> 404\n", "error": "none", "author": "tom@organisms.be"}, {"index": "117", "colour": "orange", "code": "        # 2. not enough body parameters -> 400\n", "error": "none", "author": "tom@organisms.be"}, {"index": "118", "colour": "orange", "code": "        # 3. not enough path parts (partial matches) -> 404\n", "error": "none", "author": "tom@organisms.be"}, {"index": "119", "colour": "orange", "code": "        #\n", "error": "none", "author": "tom@organisms.be"}, {"index": "120", "colour": "orange", "code": "        # We can't actually tell which case it is,\n", "error": "none", "author": "tom@organisms.be"}, {"index": "121", "colour": "orange", "code": "        # so I'm raising a 404 because that covers 2/3 of the\n", "error": "none", "author": "tom@organisms.be"}, {"index": "122", "colour": "orange", "code": "        # possibilities\n", "error": "none", "author": "tom@organisms.be"}, {"index": "123", "colour": "orange", "code": "        #\n", "error": "none", "author": "tom@organisms.be"}, {"index": "124", "colour": "orange", "code": "        # In the case where the method does not allow body\n", "error": "none", "author": "tom@organisms.be"}, {"index": "125", "colour": "orange", "code": "        # arguments it's definitely a 404.\n", "error": "none", "author": "tom@organisms.be"}, {"index": "126", "colour": "orange", "code": "        message = None\n", "error": "none", "author": "tom@organisms.be"}, {"index": "127", "colour": "orange", "code": "        if show_mismatched_params:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "128", "colour": "orange", "code": "            message=\"Missing parameters: %s\" % \",\".join(missing_args)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "129", "colour": "orange", "code": "        raise cherrypy.HTTPError(404, message=message)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "130", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "131", "colour": "orange", "code": "    # the extra positional arguments come from the path - 404 Not Found\n", "error": "none", "author": "tom@organisms.be"}, {"index": "132", "colour": "orange", "code": "    if not varargs and vararg_usage > 0:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "133", "colour": "orange", "code": "        raise cherrypy.HTTPError(404)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "134", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "135", "colour": "orange", "code": "    body_params = cherrypy.serving.request.body.params or {}\n", "error": "none", "author": "tom@organisms.be"}, {"index": "136", "colour": "orange", "code": "    body_params = set(body_params.keys())\n", "error": "none", "author": "tom@organisms.be"}, {"index": "137", "colour": "orange", "code": "    qs_params = set(callable_kwargs.keys()) - body_params\n", "error": "none", "author": "tom@organisms.be"}, {"index": "138", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "139", "colour": "orange", "code": "    if multiple_args:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "140", "colour": "orange", "code": "        if qs_params.intersection(set(multiple_args)):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "141", "colour": "orange", "code": "            # If any of the multiple parameters came from the query string then\n", "error": "none", "author": "tom@organisms.be"}, {"index": "142", "colour": "orange", "code": "            # it's a 404 Not Found\n", "error": "none", "author": "tom@organisms.be"}, {"index": "143", "colour": "orange", "code": "            error = 404\n", "error": "none", "author": "tom@organisms.be"}, {"index": "144", "colour": "orange", "code": "        else:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "145", "colour": "orange", "code": "            # Otherwise it's a 400 Bad Request\n", "error": "none", "author": "tom@organisms.be"}, {"index": "146", "colour": "orange", "code": "            error = 400\n", "error": "none", "author": "tom@organisms.be"}, {"index": "147", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "148", "colour": "orange", "code": "        message = None\n", "error": "none", "author": "tom@organisms.be"}, {"index": "149", "colour": "orange", "code": "        if show_mismatched_params:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "150", "colour": "orange", "code": "            message=\"Multiple values for parameters: \"\\\n", "error": "none", "author": "tom@organisms.be"}, {"index": "151", "colour": "orange", "code": "                    \"%s\" % \",\".join(multiple_args)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "152", "colour": "orange", "code": "        raise cherrypy.HTTPError(error, message=message)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "153", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "154", "colour": "orange", "code": "    if not varkw and varkw_usage > 0:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "155", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "156", "colour": "orange", "code": "        # If there were extra query string parameters, it's a 404 Not Found\n", "error": "none", "author": "tom@organisms.be"}, {"index": "157", "colour": "orange", "code": "        extra_qs_params = set(qs_params).intersection(extra_kwargs)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "158", "colour": "orange", "code": "        if extra_qs_params:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "159", "colour": "orange", "code": "            message = None\n", "error": "none", "author": "tom@organisms.be"}, {"index": "160", "colour": "orange", "code": "            if show_mismatched_params:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "161", "colour": "orange", "code": "                message=\"Unexpected query string \"\\\n", "error": "none", "author": "tom@organisms.be"}, {"index": "162", "colour": "orange", "code": "                        \"parameters: %s\" % \", \".join(extra_qs_params)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "163", "colour": "orange", "code": "            raise cherrypy.HTTPError(404, message=message)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "164", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "165", "colour": "orange", "code": "        # If there were any extra body parameters, it's a 400 Not Found\n", "error": "none", "author": "tom@organisms.be"}, {"index": "166", "colour": "orange", "code": "        extra_body_params = set(body_params).intersection(extra_kwargs)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "167", "colour": "orange", "code": "        if extra_body_params:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "168", "colour": "orange", "code": "            message = None\n", "error": "none", "author": "tom@organisms.be"}, {"index": "169", "colour": "orange", "code": "            if show_mismatched_params:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "170", "colour": "orange", "code": "                message=\"Unexpected body parameters: \"\\\n", "error": "none", "author": "tom@organisms.be"}, {"index": "171", "colour": "orange", "code": "                        \"%s\" % \", \".join(extra_body_params)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "172", "colour": "orange", "code": "            raise cherrypy.HTTPError(400, message=message)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "173", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "174", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "175", "colour": "orange", "code": "try:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "176", "colour": "orange", "code": "    import inspect\n", "error": "none", "author": "tom@organisms.be"}, {"index": "177", "colour": "orange", "code": "except ImportError:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "178", "colour": "orange", "code": "    test_callable_spec = lambda callable, args, kwargs: None\n", "error": "none", "author": "tom@organisms.be"}, {"index": "179", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "180", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "181", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "182", "colour": "blue", "code": "class LateParamPageHandler(PageHandler):\n", "error": "R", "author": "tom@organisms.be"}, {"index": "183", "colour": "orange", "code": "    \"\"\"When passing cherrypy.request.params to the page handler, we do not\n", "error": "none", "author": "tom@organisms.be"}, {"index": "184", "colour": "orange", "code": "    want to capture that dict too early; we want to give tools like the\n", "error": "none", "author": "tom@organisms.be"}, {"index": "185", "colour": "orange", "code": "    decoding tool a chance to modify the params dict in-between the lookup\n", "error": "none", "author": "tom@organisms.be"}, {"index": "186", "colour": "orange", "code": "    of the handler and the actual calling of the handler. This subclass\n", "error": "none", "author": "tom@organisms.be"}, {"index": "187", "colour": "orange", "code": "    takes that into account, and allows request.params to be 'bound late'\n", "error": "none", "author": "tom@organisms.be"}, {"index": "188", "colour": "orange", "code": "    (it's more complicated than that, but that's the effect).\n", "error": "none", "author": "tom@organisms.be"}, {"index": "189", "colour": "orange", "code": "    \"\"\"\n", "error": "none", "author": "tom@organisms.be"}, {"index": "190", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "191", "colour": "orange", "code": "    def _get_kwargs(self):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "192", "colour": "orange", "code": "        kwargs = cherrypy.serving.request.params.copy()\n", "error": "none", "author": "tom@organisms.be"}, {"index": "193", "colour": "orange", "code": "        if self._kwargs:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "194", "colour": "orange", "code": "            kwargs.update(self._kwargs)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "195", "colour": "orange", "code": "        return kwargs\n", "error": "none", "author": "tom@organisms.be"}, {"index": "196", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "197", "colour": "orange", "code": "    def _set_kwargs(self, kwargs):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "198", "colour": "green", "code": "        self._kwargs = kwargs\n", "error": "W", "author": "tom@organisms.be"}, {"index": "199", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "200", "colour": "orange", "code": "    kwargs = property(_get_kwargs, _set_kwargs,\n", "error": "none", "author": "tom@organisms.be"}, {"index": "201", "colour": "orange", "code": "                      doc='page handler kwargs (with '\n", "error": "none", "author": "tom@organisms.be"}, {"index": "202", "colour": "orange", "code": "                      'cherrypy.request.params copied in)')\n", "error": "none", "author": "tom@organisms.be"}, {"index": "203", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "204", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "205", "colour": "orange", "code": "if sys.version_info < (3, 0):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "206", "colour": "orange", "code": "    punctuation_to_underscores = string.maketrans(\n", "error": "none", "author": "tom@organisms.be"}, {"index": "207", "colour": "orange", "code": "        string.punctuation, '_' * len(string.punctuation))\n", "error": "none", "author": "tom@organisms.be"}, {"index": "208", "colour": "orange", "code": "    def validate_translator(t):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "209", "colour": "orange", "code": "        if not isinstance(t, str) or len(t) != 256:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "210", "colour": "orange", "code": "            raise ValueError(\"The translate argument must be a str of len 256.\")\n", "error": "none", "author": "tom@organisms.be"}, {"index": "211", "colour": "orange", "code": "else:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "212", "colour": "red", "code": "    punctuation_to_underscores = str.maketrans(\n", "error": "E", "author": "tom@organisms.be"}, {"index": "213", "colour": "orange", "code": "        string.punctuation, '_' * len(string.punctuation))\n", "error": "none", "author": "tom@organisms.be"}, {"index": "214", "colour": "orange", "code": "    def validate_translator(t):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "215", "colour": "orange", "code": "        if not isinstance(t, dict):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "216", "colour": "orange", "code": "            raise ValueError(\"The translate argument must be a dict.\")\n", "error": "none", "author": "tom@organisms.be"}, {"index": "217", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "218", "colour": "blue", "code": "class Dispatcher(object):\n", "error": "R", "author": "tom@organisms.be"}, {"index": "219", "colour": "orange", "code": "    \"\"\"CherryPy Dispatcher which walks a tree of objects to find a handler.\n", "error": "none", "author": "tom@organisms.be"}, {"index": "220", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "221", "colour": "orange", "code": "    The tree is rooted at cherrypy.request.app.root, and each hierarchical\n", "error": "none", "author": "tom@organisms.be"}, {"index": "222", "colour": "orange", "code": "    component in the path_info argument is matched to a corresponding nested\n", "error": "none", "author": "tom@organisms.be"}, {"index": "223", "colour": "orange", "code": "    attribute of the root object. Matching handlers must have an 'exposed'\n", "error": "none", "author": "tom@organisms.be"}, {"index": "224", "colour": "orange", "code": "    attribute which evaluates to True. The special method name \"index\"\n", "error": "none", "author": "tom@organisms.be"}, {"index": "225", "colour": "orange", "code": "    matches a URI which ends in a slash (\"/\"). The special method name\n", "error": "none", "author": "tom@organisms.be"}, {"index": "226", "colour": "orange", "code": "    \"default\" may match a portion of the path_info (but only when no longer\n", "error": "none", "author": "tom@organisms.be"}, {"index": "227", "colour": "orange", "code": "    substring of the path_info matches some other object).\n", "error": "none", "author": "tom@organisms.be"}, {"index": "228", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "229", "colour": "orange", "code": "    This is the default, built-in dispatcher for CherryPy.\n", "error": "none", "author": "tom@organisms.be"}, {"index": "230", "colour": "orange", "code": "    \"\"\"\n", "error": "none", "author": "tom@organisms.be"}, {"index": "231", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "232", "colour": "orange", "code": "    dispatch_method_name = '_cp_dispatch'\n", "error": "none", "author": "tom@organisms.be"}, {"index": "233", "colour": "orange", "code": "    \"\"\"\n", "error": "none", "author": "tom@organisms.be"}, {"index": "234", "colour": "orange", "code": "    The name of the dispatch method that nodes may optionally implement\n", "error": "none", "author": "tom@organisms.be"}, {"index": "235", "colour": "orange", "code": "    to provide their own dynamic dispatch algorithm.\n", "error": "none", "author": "tom@organisms.be"}, {"index": "236", "colour": "orange", "code": "    \"\"\"\n", "error": "none", "author": "tom@organisms.be"}, {"index": "237", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "238", "colour": "orange", "code": "    def __init__(self, dispatch_method_name=None,\n", "error": "none", "author": "tom@organisms.be"}, {"index": "239", "colour": "orange", "code": "                 translate=punctuation_to_underscores):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "240", "colour": "orange", "code": "        validate_translator(translate)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "241", "colour": "orange", "code": "        self.translate = translate\n", "error": "none", "author": "tom@organisms.be"}, {"index": "242", "colour": "orange", "code": "        if dispatch_method_name:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "243", "colour": "orange", "code": "            self.dispatch_method_name = dispatch_method_name\n", "error": "none", "author": "tom@organisms.be"}, {"index": "244", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "245", "colour": "orange", "code": "    def __call__(self, path_info):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "246", "colour": "orange", "code": "        \"\"\"Set handler and config for the current request.\"\"\"\n", "error": "none", "author": "tom@organisms.be"}, {"index": "247", "colour": "orange", "code": "        request = cherrypy.serving.request\n", "error": "none", "author": "tom@organisms.be"}, {"index": "248", "colour": "orange", "code": "        func, vpath = self.find_handler(path_info)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "249", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "250", "colour": "orange", "code": "        if func:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "251", "colour": "orange", "code": "            # Decode any leftover %2F in the virtual_path atoms.\n", "error": "none", "author": "tom@organisms.be"}, {"index": "252", "colour": "orange", "code": "            vpath = [x.replace(\"%2F\", \"/\") for x in vpath]\n", "error": "none", "author": "tom@organisms.be"}, {"index": "253", "colour": "green", "code": "            request.handler = LateParamPageHandler(func, *vpath)\n", "error": "W", "author": "tom@organisms.be"}, {"index": "254", "colour": "orange", "code": "        else:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "255", "colour": "orange", "code": "            request.handler = cherrypy.NotFound()\n", "error": "none", "author": "tom@organisms.be"}, {"index": "256", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "257", "colour": "blue", "code": "    def find_handler(self, path):\n", "error": "R", "author": "tom@organisms.be"}, {"index": "258", "colour": "orange", "code": "        \"\"\"Return the appropriate page handler, plus any virtual path.\n", "error": "none", "author": "tom@organisms.be"}, {"index": "259", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "260", "colour": "orange", "code": "        This will return two objects. The first will be a callable,\n", "error": "none", "author": "tom@organisms.be"}, {"index": "261", "colour": "orange", "code": "        which can be used to generate page output. Any parameters from\n", "error": "none", "author": "tom@organisms.be"}, {"index": "262", "colour": "orange", "code": "        the query string or request body will be sent to that callable\n", "error": "none", "author": "tom@organisms.be"}, {"index": "263", "colour": "orange", "code": "        as keyword arguments.\n", "error": "none", "author": "tom@organisms.be"}, {"index": "264", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "265", "colour": "orange", "code": "        The callable is found by traversing the application's tree,\n", "error": "none", "author": "tom@organisms.be"}, {"index": "266", "colour": "orange", "code": "        starting from cherrypy.request.app.root, and matching path\n", "error": "none", "author": "tom@organisms.be"}, {"index": "267", "colour": "orange", "code": "        components to successive objects in the tree. For example, the\n", "error": "none", "author": "tom@organisms.be"}, {"index": "268", "colour": "orange", "code": "        URL \"/path/to/handler\" might return root.path.to.handler.\n", "error": "none", "author": "tom@organisms.be"}, {"index": "269", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "270", "colour": "orange", "code": "        The second object returned will be a list of names which are\n", "error": "none", "author": "tom@organisms.be"}, {"index": "271", "colour": "orange", "code": "        'virtual path' components: parts of the URL which are dynamic,\n", "error": "none", "author": "tom@organisms.be"}, {"index": "272", "colour": "orange", "code": "        and were not used when looking up the handler.\n", "error": "none", "author": "tom@organisms.be"}, {"index": "273", "colour": "orange", "code": "        These virtual path components are passed to the handler as\n", "error": "none", "author": "tom@organisms.be"}, {"index": "274", "colour": "orange", "code": "        positional arguments.\n", "error": "none", "author": "tom@organisms.be"}, {"index": "275", "colour": "orange", "code": "        \"\"\"\n", "error": "none", "author": "tom@organisms.be"}, {"index": "276", "colour": "orange", "code": "        request = cherrypy.serving.request\n", "error": "none", "author": "tom@organisms.be"}, {"index": "277", "colour": "orange", "code": "        app = request.app\n", "error": "none", "author": "tom@organisms.be"}, {"index": "278", "colour": "orange", "code": "        root = app.root\n", "error": "none", "author": "tom@organisms.be"}, {"index": "279", "colour": "orange", "code": "        dispatch_name = self.dispatch_method_name\n", "error": "none", "author": "tom@organisms.be"}, {"index": "280", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "281", "colour": "orange", "code": "        # Get config for the root object/path.\n", "error": "none", "author": "tom@organisms.be"}, {"index": "282", "colour": "orange", "code": "        fullpath = [x for x in path.strip('/').split('/') if x] + ['index']\n", "error": "none", "author": "tom@organisms.be"}, {"index": "283", "colour": "orange", "code": "        fullpath_len = len(fullpath)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "284", "colour": "orange", "code": "        segleft = fullpath_len\n", "error": "none", "author": "tom@organisms.be"}, {"index": "285", "colour": "orange", "code": "        nodeconf = {}\n", "error": "none", "author": "tom@organisms.be"}, {"index": "286", "colour": "orange", "code": "        if hasattr(root, \"_cp_config\"):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "287", "colour": "green", "code": "            nodeconf.update(root._cp_config)\n", "error": "W", "author": "tom@organisms.be"}, {"index": "288", "colour": "orange", "code": "        if \"/\" in app.config:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "289", "colour": "orange", "code": "            nodeconf.update(app.config[\"/\"])\n", "error": "none", "author": "tom@organisms.be"}, {"index": "290", "colour": "orange", "code": "        object_trail = [['root', root, nodeconf, segleft]]\n", "error": "none", "author": "tom@organisms.be"}, {"index": "291", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "292", "colour": "orange", "code": "        node = root\n", "error": "none", "author": "tom@organisms.be"}, {"index": "293", "colour": "orange", "code": "        iternames = fullpath[:]\n", "error": "none", "author": "tom@organisms.be"}, {"index": "294", "colour": "orange", "code": "        while iternames:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "295", "colour": "orange", "code": "            name = iternames[0]\n", "error": "none", "author": "tom@organisms.be"}, {"index": "296", "colour": "orange", "code": "            # map to legal Python identifiers (e.g. replace '.' with '_')\n", "error": "none", "author": "tom@organisms.be"}, {"index": "297", "colour": "orange", "code": "            objname = name.translate(self.translate)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "298", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "299", "colour": "orange", "code": "            nodeconf = {}\n", "error": "none", "author": "tom@organisms.be"}, {"index": "300", "colour": "orange", "code": "            subnode = getattr(node, objname, None)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "301", "colour": "orange", "code": "            pre_len = len(iternames)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "302", "colour": "orange", "code": "            if subnode is None:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "303", "colour": "orange", "code": "                dispatch = getattr(node, dispatch_name, None)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "304", "colour": "orange", "code": "                if dispatch and hasattr(dispatch, '__call__') and not \\\n", "error": "none", "author": "tom@organisms.be"}, {"index": "305", "colour": "orange", "code": "                        getattr(dispatch, 'exposed', False) and \\\n", "error": "none", "author": "tom@organisms.be"}, {"index": "306", "colour": "orange", "code": "                        pre_len > 1:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "307", "colour": "orange", "code": "                    #Don't expose the hidden 'index' token to _cp_dispatch\n", "error": "none", "author": "tom@organisms.be"}, {"index": "308", "colour": "orange", "code": "                    #We skip this if pre_len == 1 since it makes no sense\n", "error": "none", "author": "tom@organisms.be"}, {"index": "309", "colour": "orange", "code": "                    #to call a dispatcher when we have no tokens left.\n", "error": "none", "author": "tom@organisms.be"}, {"index": "310", "colour": "orange", "code": "                    index_name = iternames.pop()\n", "error": "none", "author": "tom@organisms.be"}, {"index": "311", "colour": "orange", "code": "                    subnode = dispatch(vpath=iternames)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "312", "colour": "orange", "code": "                    iternames.append(index_name)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "313", "colour": "orange", "code": "                else:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "314", "colour": "orange", "code": "                    #We didn't find a path, but keep processing in case there\n", "error": "none", "author": "tom@organisms.be"}, {"index": "315", "colour": "orange", "code": "                    #is a default() handler.\n", "error": "none", "author": "tom@organisms.be"}, {"index": "316", "colour": "orange", "code": "                    iternames.pop(0)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "317", "colour": "orange", "code": "            else:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "318", "colour": "orange", "code": "                #We found the path, remove the vpath entry\n", "error": "none", "author": "tom@organisms.be"}, {"index": "319", "colour": "orange", "code": "                iternames.pop(0)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "320", "colour": "orange", "code": "            segleft = len(iternames)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "321", "colour": "orange", "code": "            if segleft > pre_len:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "322", "colour": "orange", "code": "                #No path segment was removed.  Raise an error.\n", "error": "none", "author": "tom@organisms.be"}, {"index": "323", "colour": "orange", "code": "                raise cherrypy.CherryPyException(\n", "error": "none", "author": "tom@organisms.be"}, {"index": "324", "colour": "orange", "code": "                    \"A vpath segment was added.  Custom dispatchers may only \"\n", "error": "none", "author": "tom@organisms.be"}, {"index": "325", "colour": "orange", "code": "                    + \"remove elements.  While trying to process \"\n", "error": "none", "author": "tom@organisms.be"}, {"index": "326", "colour": "orange", "code": "                    + \"{0} in {1}\".format(name, fullpath)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "327", "colour": "orange", "code": "                    )\n", "error": "none", "author": "tom@organisms.be"}, {"index": "328", "colour": "orange", "code": "            elif segleft == pre_len:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "329", "colour": "orange", "code": "                #Assume that the handler used the current path segment, but\n", "error": "none", "author": "tom@organisms.be"}, {"index": "330", "colour": "orange", "code": "                #did not pop it.  This allows things like\n", "error": "none", "author": "tom@organisms.be"}, {"index": "331", "colour": "orange", "code": "                #return getattr(self, vpath[0], None)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "332", "colour": "orange", "code": "                iternames.pop(0)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "333", "colour": "orange", "code": "                segleft -= 1\n", "error": "none", "author": "tom@organisms.be"}, {"index": "334", "colour": "orange", "code": "            node = subnode\n", "error": "none", "author": "tom@organisms.be"}, {"index": "335", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "336", "colour": "orange", "code": "            if node is not None:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "337", "colour": "orange", "code": "                # Get _cp_config attached to this node.\n", "error": "none", "author": "tom@organisms.be"}, {"index": "338", "colour": "orange", "code": "                if hasattr(node, \"_cp_config\"):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "339", "colour": "green", "code": "                    nodeconf.update(node._cp_config)\n", "error": "W", "author": "tom@organisms.be"}, {"index": "340", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "341", "colour": "orange", "code": "            # Mix in values from app.config for this path.\n", "error": "none", "author": "tom@organisms.be"}, {"index": "342", "colour": "orange", "code": "            existing_len = fullpath_len - pre_len\n", "error": "none", "author": "tom@organisms.be"}, {"index": "343", "colour": "orange", "code": "            if existing_len != 0:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "344", "colour": "orange", "code": "                curpath = '/' + '/'.join(fullpath[0:existing_len])\n", "error": "none", "author": "tom@organisms.be"}, {"index": "345", "colour": "orange", "code": "            else:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "346", "colour": "orange", "code": "                curpath = ''\n", "error": "none", "author": "tom@organisms.be"}, {"index": "347", "colour": "orange", "code": "            new_segs = fullpath[fullpath_len - pre_len:fullpath_len - segleft]\n", "error": "none", "author": "tom@organisms.be"}, {"index": "348", "colour": "orange", "code": "            for seg in new_segs:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "349", "colour": "orange", "code": "                curpath += '/' + seg\n", "error": "none", "author": "tom@organisms.be"}, {"index": "350", "colour": "orange", "code": "                if curpath in app.config:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "351", "colour": "orange", "code": "                    nodeconf.update(app.config[curpath])\n", "error": "none", "author": "tom@organisms.be"}, {"index": "352", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "353", "colour": "orange", "code": "            object_trail.append([name, node, nodeconf, segleft])\n", "error": "none", "author": "tom@organisms.be"}, {"index": "354", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "355", "colour": "orange", "code": "        def set_conf():\n", "error": "none", "author": "tom@organisms.be"}, {"index": "356", "colour": "orange", "code": "            \"\"\"Collapse all object_trail config into cherrypy.request.config.\"\"\"\n", "error": "none", "author": "tom@organisms.be"}, {"index": "357", "colour": "orange", "code": "            base = cherrypy.config.copy()\n", "error": "none", "author": "tom@organisms.be"}, {"index": "358", "colour": "orange", "code": "            # Note that we merge the config from each node\n", "error": "none", "author": "tom@organisms.be"}, {"index": "359", "colour": "orange", "code": "            # even if that node was None.\n", "error": "none", "author": "tom@organisms.be"}, {"index": "360", "colour": "green", "code": "            for name, obj, conf, segleft in object_trail:\n", "error": "W", "author": "tom@organisms.be"}, {"index": "361", "colour": "orange", "code": "                base.update(conf)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "362", "colour": "orange", "code": "                if 'tools.staticdir.dir' in conf:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "363", "colour": "orange", "code": "                    base['tools.staticdir.section'] = '/' + '/'.join(fullpath[0:fullpath_len - segleft])\n", "error": "none", "author": "tom@organisms.be"}, {"index": "364", "colour": "orange", "code": "            return base\n", "error": "none", "author": "tom@organisms.be"}, {"index": "365", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "366", "colour": "orange", "code": "        # Try successive objects (reverse order)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "367", "colour": "orange", "code": "        num_candidates = len(object_trail) - 1\n", "error": "none", "author": "tom@organisms.be"}, {"index": "368", "colour": "orange", "code": "        for i in range(num_candidates, -1, -1):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "369", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "370", "colour": "orange", "code": "            name, candidate, nodeconf, segleft = object_trail[i]\n", "error": "none", "author": "tom@organisms.be"}, {"index": "371", "colour": "orange", "code": "            if candidate is None:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "372", "colour": "orange", "code": "                continue\n", "error": "none", "author": "tom@organisms.be"}, {"index": "373", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "374", "colour": "orange", "code": "            # Try a \"default\" method on the current leaf.\n", "error": "none", "author": "tom@organisms.be"}, {"index": "375", "colour": "orange", "code": "            if hasattr(candidate, \"default\"):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "376", "colour": "orange", "code": "                defhandler = candidate.default\n", "error": "none", "author": "tom@organisms.be"}, {"index": "377", "colour": "orange", "code": "                if getattr(defhandler, 'exposed', False):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "378", "colour": "orange", "code": "                    # Insert any extra _cp_config from the default handler.\n", "error": "none", "author": "tom@organisms.be"}, {"index": "379", "colour": "orange", "code": "                    conf = getattr(defhandler, \"_cp_config\", {})\n", "error": "none", "author": "tom@organisms.be"}, {"index": "380", "colour": "orange", "code": "                    object_trail.insert(i+1, [\"default\", defhandler, conf, segleft])\n", "error": "none", "author": "tom@organisms.be"}, {"index": "381", "colour": "orange", "code": "                    request.config = set_conf()\n", "error": "none", "author": "tom@organisms.be"}, {"index": "382", "colour": "orange", "code": "                    # See http://www.cherrypy.org/ticket/613\n", "error": "none", "author": "tom@organisms.be"}, {"index": "383", "colour": "orange", "code": "                    request.is_index = path.endswith(\"/\")\n", "error": "none", "author": "tom@organisms.be"}, {"index": "384", "colour": "orange", "code": "                    return defhandler, fullpath[fullpath_len - segleft:-1]\n", "error": "none", "author": "tom@organisms.be"}, {"index": "385", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "386", "colour": "orange", "code": "            # Uncomment the next line to restrict positional params to \"default\".\n", "error": "none", "author": "tom@organisms.be"}, {"index": "387", "colour": "orange", "code": "            # if i < num_candidates - 2: continue\n", "error": "none", "author": "tom@organisms.be"}, {"index": "388", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "389", "colour": "orange", "code": "            # Try the current leaf.\n", "error": "none", "author": "tom@organisms.be"}, {"index": "390", "colour": "orange", "code": "            if getattr(candidate, 'exposed', False):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "391", "colour": "orange", "code": "                request.config = set_conf()\n", "error": "none", "author": "tom@organisms.be"}, {"index": "392", "colour": "orange", "code": "                if i == num_candidates:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "393", "colour": "orange", "code": "                    # We found the extra \".index\". Mark request so tools\n", "error": "none", "author": "tom@organisms.be"}, {"index": "394", "colour": "orange", "code": "                    # can redirect if path_info has no trailing slash.\n", "error": "none", "author": "tom@organisms.be"}, {"index": "395", "colour": "orange", "code": "                    request.is_index = True\n", "error": "none", "author": "tom@organisms.be"}, {"index": "396", "colour": "orange", "code": "                else:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "397", "colour": "orange", "code": "                    # We're not at an 'index' handler. Mark request so tools\n", "error": "none", "author": "tom@organisms.be"}, {"index": "398", "colour": "orange", "code": "                    # can redirect if path_info has NO trailing slash.\n", "error": "none", "author": "tom@organisms.be"}, {"index": "399", "colour": "orange", "code": "                    # Note that this also includes handlers which take\n", "error": "none", "author": "tom@organisms.be"}, {"index": "400", "colour": "orange", "code": "                    # positional parameters (virtual paths).\n", "error": "none", "author": "tom@organisms.be"}, {"index": "401", "colour": "orange", "code": "                    request.is_index = False\n", "error": "none", "author": "tom@organisms.be"}, {"index": "402", "colour": "orange", "code": "                return candidate, fullpath[fullpath_len - segleft:-1]\n", "error": "none", "author": "tom@organisms.be"}, {"index": "403", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "404", "colour": "orange", "code": "        # We didn't find anything\n", "error": "none", "author": "tom@organisms.be"}, {"index": "405", "colour": "orange", "code": "        request.config = set_conf()\n", "error": "none", "author": "tom@organisms.be"}, {"index": "406", "colour": "orange", "code": "        return None, []\n", "error": "none", "author": "tom@organisms.be"}, {"index": "407", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "408", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "409", "colour": "blue", "code": "class MethodDispatcher(Dispatcher):\n", "error": "R", "author": "tom@organisms.be"}, {"index": "410", "colour": "orange", "code": "    \"\"\"Additional dispatch based on cherrypy.request.method.upper().\n", "error": "none", "author": "tom@organisms.be"}, {"index": "411", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "412", "colour": "orange", "code": "    Methods named GET, POST, etc will be called on an exposed class.\n", "error": "none", "author": "tom@organisms.be"}, {"index": "413", "colour": "orange", "code": "    The method names must be all caps; the appropriate Allow header\n", "error": "none", "author": "tom@organisms.be"}, {"index": "414", "colour": "orange", "code": "    will be output showing all capitalized method names as allowable\n", "error": "none", "author": "tom@organisms.be"}, {"index": "415", "colour": "orange", "code": "    HTTP verbs.\n", "error": "none", "author": "tom@organisms.be"}, {"index": "416", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "417", "colour": "orange", "code": "    Note that the containing class must be exposed, not the methods.\n", "error": "none", "author": "tom@organisms.be"}, {"index": "418", "colour": "orange", "code": "    \"\"\"\n", "error": "none", "author": "tom@organisms.be"}, {"index": "419", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "420", "colour": "orange", "code": "    def __call__(self, path_info):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "421", "colour": "orange", "code": "        \"\"\"Set handler and config for the current request.\"\"\"\n", "error": "none", "author": "tom@organisms.be"}, {"index": "422", "colour": "orange", "code": "        request = cherrypy.serving.request\n", "error": "none", "author": "tom@organisms.be"}, {"index": "423", "colour": "orange", "code": "        resource, vpath = self.find_handler(path_info)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "424", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "425", "colour": "orange", "code": "        if resource:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "426", "colour": "orange", "code": "            # Set Allow header\n", "error": "none", "author": "tom@organisms.be"}, {"index": "427", "colour": "orange", "code": "            avail = [m for m in dir(resource) if m.isupper()]\n", "error": "none", "author": "tom@organisms.be"}, {"index": "428", "colour": "orange", "code": "            if \"GET\" in avail and \"HEAD\" not in avail:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "429", "colour": "orange", "code": "                avail.append(\"HEAD\")\n", "error": "none", "author": "tom@organisms.be"}, {"index": "430", "colour": "orange", "code": "            avail.sort()\n", "error": "none", "author": "tom@organisms.be"}, {"index": "431", "colour": "orange", "code": "            cherrypy.serving.response.headers['Allow'] = \", \".join(avail)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "432", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "433", "colour": "orange", "code": "            # Find the subhandler\n", "error": "none", "author": "tom@organisms.be"}, {"index": "434", "colour": "orange", "code": "            meth = request.method.upper()\n", "error": "none", "author": "tom@organisms.be"}, {"index": "435", "colour": "orange", "code": "            func = getattr(resource, meth, None)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "436", "colour": "orange", "code": "            if func is None and meth == \"HEAD\":\n", "error": "none", "author": "tom@organisms.be"}, {"index": "437", "colour": "orange", "code": "                func = getattr(resource, \"GET\", None)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "438", "colour": "orange", "code": "            if func:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "439", "colour": "orange", "code": "                # Grab any _cp_config on the subhandler.\n", "error": "none", "author": "tom@organisms.be"}, {"index": "440", "colour": "orange", "code": "                if hasattr(func, \"_cp_config\"):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "441", "colour": "green", "code": "                    request.config.update(func._cp_config)\n", "error": "W", "author": "tom@organisms.be"}, {"index": "442", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "443", "colour": "orange", "code": "                # Decode any leftover %2F in the virtual_path atoms.\n", "error": "none", "author": "tom@organisms.be"}, {"index": "444", "colour": "orange", "code": "                vpath = [x.replace(\"%2F\", \"/\") for x in vpath]\n", "error": "none", "author": "tom@organisms.be"}, {"index": "445", "colour": "green", "code": "                request.handler = LateParamPageHandler(func, *vpath)\n", "error": "W", "author": "tom@organisms.be"}, {"index": "446", "colour": "orange", "code": "            else:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "447", "colour": "orange", "code": "                request.handler = cherrypy.HTTPError(405)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "448", "colour": "orange", "code": "        else:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "449", "colour": "orange", "code": "            request.handler = cherrypy.NotFound()\n", "error": "none", "author": "tom@organisms.be"}, {"index": "450", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "451", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "452", "colour": "orange", "code": "class RoutesDispatcher(object):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "453", "colour": "orange", "code": "    \"\"\"A Routes based dispatcher for CherryPy.\"\"\"\n", "error": "none", "author": "tom@organisms.be"}, {"index": "454", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "455", "colour": "orange", "code": "    def __init__(self, full_result=False):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "456", "colour": "orange", "code": "        \"\"\"\n", "error": "none", "author": "tom@organisms.be"}, {"index": "457", "colour": "orange", "code": "        Routes dispatcher\n", "error": "none", "author": "tom@organisms.be"}, {"index": "458", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "459", "colour": "orange", "code": "        Set full_result to True if you wish the controller\n", "error": "none", "author": "tom@organisms.be"}, {"index": "460", "colour": "orange", "code": "        and the action to be passed on to the page handler\n", "error": "none", "author": "tom@organisms.be"}, {"index": "461", "colour": "orange", "code": "        parameters. By default they won't be.\n", "error": "none", "author": "tom@organisms.be"}, {"index": "462", "colour": "orange", "code": "        \"\"\"\n", "error": "none", "author": "tom@organisms.be"}, {"index": "463", "colour": "orange", "code": "        import routes\n", "error": "none", "author": "tom@organisms.be"}, {"index": "464", "colour": "orange", "code": "        self.full_result = full_result\n", "error": "none", "author": "tom@organisms.be"}, {"index": "465", "colour": "orange", "code": "        self.controllers = {}\n", "error": "none", "author": "tom@organisms.be"}, {"index": "466", "colour": "orange", "code": "        self.mapper = routes.Mapper()\n", "error": "none", "author": "tom@organisms.be"}, {"index": "467", "colour": "orange", "code": "        self.mapper.controller_scan = self.controllers.keys\n", "error": "none", "author": "tom@organisms.be"}, {"index": "468", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "469", "colour": "orange", "code": "    def connect(self, name, route, controller, **kwargs):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "470", "colour": "orange", "code": "        self.controllers[name] = controller\n", "error": "none", "author": "tom@organisms.be"}, {"index": "471", "colour": "orange", "code": "        self.mapper.connect(name, route, controller=name, **kwargs)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "472", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "473", "colour": "blue", "code": "    def redirect(self, url):\n", "error": "R", "author": "tom@organisms.be"}, {"index": "474", "colour": "orange", "code": "        raise cherrypy.HTTPRedirect(url)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "475", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "476", "colour": "orange", "code": "    def __call__(self, path_info):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "477", "colour": "orange", "code": "        \"\"\"Set handler and config for the current request.\"\"\"\n", "error": "none", "author": "tom@organisms.be"}, {"index": "478", "colour": "orange", "code": "        func = self.find_handler(path_info)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "479", "colour": "orange", "code": "        if func:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "480", "colour": "orange", "code": "            cherrypy.serving.request.handler = LateParamPageHandler(func)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "481", "colour": "orange", "code": "        else:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "482", "colour": "orange", "code": "            cherrypy.serving.request.handler = cherrypy.NotFound()\n", "error": "none", "author": "tom@organisms.be"}, {"index": "483", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "484", "colour": "blue", "code": "    def find_handler(self, path_info):\n", "error": "R", "author": "tom@organisms.be"}, {"index": "485", "colour": "orange", "code": "        \"\"\"Find the right page handler, and set request.config.\"\"\"\n", "error": "none", "author": "tom@organisms.be"}, {"index": "486", "colour": "orange", "code": "        import routes\n", "error": "none", "author": "tom@organisms.be"}, {"index": "487", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "488", "colour": "orange", "code": "        request = cherrypy.serving.request\n", "error": "none", "author": "tom@organisms.be"}, {"index": "489", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "490", "colour": "orange", "code": "        config = routes.request_config()\n", "error": "none", "author": "tom@organisms.be"}, {"index": "491", "colour": "orange", "code": "        config.mapper = self.mapper\n", "error": "none", "author": "tom@organisms.be"}, {"index": "492", "colour": "orange", "code": "        if hasattr(request, 'wsgi_environ'):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "493", "colour": "orange", "code": "            config.environ = request.wsgi_environ\n", "error": "none", "author": "tom@organisms.be"}, {"index": "494", "colour": "orange", "code": "        config.host = request.headers.get('Host', None)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "495", "colour": "orange", "code": "        config.protocol = request.scheme\n", "error": "none", "author": "tom@organisms.be"}, {"index": "496", "colour": "orange", "code": "        config.redirect = self.redirect\n", "error": "none", "author": "tom@organisms.be"}, {"index": "497", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "498", "colour": "orange", "code": "        result = self.mapper.match(path_info)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "499", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "500", "colour": "orange", "code": "        config.mapper_dict = result\n", "error": "none", "author": "tom@organisms.be"}, {"index": "501", "colour": "orange", "code": "        params = {}\n", "error": "none", "author": "tom@organisms.be"}, {"index": "502", "colour": "orange", "code": "        if result:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "503", "colour": "orange", "code": "            params = result.copy()\n", "error": "none", "author": "tom@organisms.be"}, {"index": "504", "colour": "orange", "code": "        if not self.full_result:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "505", "colour": "orange", "code": "            params.pop('controller', None)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "506", "colour": "orange", "code": "            params.pop('action', None)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "507", "colour": "orange", "code": "        request.params.update(params)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "508", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "509", "colour": "orange", "code": "        # Get config for the root object/path.\n", "error": "none", "author": "tom@organisms.be"}, {"index": "510", "colour": "orange", "code": "        request.config = base = cherrypy.config.copy()\n", "error": "none", "author": "tom@organisms.be"}, {"index": "511", "colour": "orange", "code": "        curpath = \"\"\n", "error": "none", "author": "tom@organisms.be"}, {"index": "512", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "513", "colour": "orange", "code": "        def merge(nodeconf):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "514", "colour": "orange", "code": "            if 'tools.staticdir.dir' in nodeconf:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "515", "colour": "orange", "code": "                nodeconf['tools.staticdir.section'] = curpath or \"/\"\n", "error": "none", "author": "tom@organisms.be"}, {"index": "516", "colour": "orange", "code": "            base.update(nodeconf)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "517", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "518", "colour": "orange", "code": "        app = request.app\n", "error": "none", "author": "tom@organisms.be"}, {"index": "519", "colour": "orange", "code": "        root = app.root\n", "error": "none", "author": "tom@organisms.be"}, {"index": "520", "colour": "orange", "code": "        if hasattr(root, \"_cp_config\"):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "521", "colour": "green", "code": "            merge(root._cp_config)\n", "error": "W", "author": "tom@organisms.be"}, {"index": "522", "colour": "orange", "code": "        if \"/\" in app.config:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "523", "colour": "orange", "code": "            merge(app.config[\"/\"])\n", "error": "none", "author": "tom@organisms.be"}, {"index": "524", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "525", "colour": "orange", "code": "        # Mix in values from app.config.\n", "error": "none", "author": "tom@organisms.be"}, {"index": "526", "colour": "orange", "code": "        atoms = [x for x in path_info.split(\"/\") if x]\n", "error": "none", "author": "tom@organisms.be"}, {"index": "527", "colour": "orange", "code": "        if atoms:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "528", "colour": "orange", "code": "            last = atoms.pop()\n", "error": "none", "author": "tom@organisms.be"}, {"index": "529", "colour": "orange", "code": "        else:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "530", "colour": "orange", "code": "            last = None\n", "error": "none", "author": "tom@organisms.be"}, {"index": "531", "colour": "orange", "code": "        for atom in atoms:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "532", "colour": "orange", "code": "            curpath = \"/\".join((curpath, atom))\n", "error": "none", "author": "tom@organisms.be"}, {"index": "533", "colour": "orange", "code": "            if curpath in app.config:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "534", "colour": "orange", "code": "                merge(app.config[curpath])\n", "error": "none", "author": "tom@organisms.be"}, {"index": "535", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "536", "colour": "orange", "code": "        handler = None\n", "error": "none", "author": "tom@organisms.be"}, {"index": "537", "colour": "orange", "code": "        if result:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "538", "colour": "orange", "code": "            controller = result.get('controller')\n", "error": "none", "author": "tom@organisms.be"}, {"index": "539", "colour": "orange", "code": "            controller = self.controllers.get(controller, controller)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "540", "colour": "orange", "code": "            if controller:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "541", "colour": "orange", "code": "                if isinstance(controller, classtype):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "542", "colour": "orange", "code": "                    controller = controller()\n", "error": "none", "author": "tom@organisms.be"}, {"index": "543", "colour": "orange", "code": "                # Get config from the controller.\n", "error": "none", "author": "tom@organisms.be"}, {"index": "544", "colour": "orange", "code": "                if hasattr(controller, \"_cp_config\"):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "545", "colour": "green", "code": "                    merge(controller._cp_config)\n", "error": "W", "author": "tom@organisms.be"}, {"index": "546", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "547", "colour": "orange", "code": "            action = result.get('action')\n", "error": "none", "author": "tom@organisms.be"}, {"index": "548", "colour": "orange", "code": "            if action is not None:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "549", "colour": "orange", "code": "                handler = getattr(controller, action, None)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "550", "colour": "orange", "code": "                # Get config from the handler\n", "error": "none", "author": "tom@organisms.be"}, {"index": "551", "colour": "orange", "code": "                if hasattr(handler, \"_cp_config\"):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "552", "colour": "green", "code": "                    merge(handler._cp_config)\n", "error": "W", "author": "tom@organisms.be"}, {"index": "553", "colour": "orange", "code": "            else:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "554", "colour": "orange", "code": "                handler = controller\n", "error": "none", "author": "tom@organisms.be"}, {"index": "555", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "556", "colour": "orange", "code": "        # Do the last path atom here so it can\n", "error": "none", "author": "tom@organisms.be"}, {"index": "557", "colour": "orange", "code": "        # override the controller's _cp_config.\n", "error": "none", "author": "tom@organisms.be"}, {"index": "558", "colour": "orange", "code": "        if last:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "559", "colour": "orange", "code": "            curpath = \"/\".join((curpath, last))\n", "error": "none", "author": "tom@organisms.be"}, {"index": "560", "colour": "orange", "code": "            if curpath in app.config:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "561", "colour": "orange", "code": "                merge(app.config[curpath])\n", "error": "none", "author": "tom@organisms.be"}, {"index": "562", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "563", "colour": "orange", "code": "        return handler\n", "error": "none", "author": "tom@organisms.be"}, {"index": "564", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "565", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "566", "colour": "orange", "code": "def XMLRPCDispatcher(next_dispatcher=Dispatcher()):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "567", "colour": "orange", "code": "    from cherrypy.lib import xmlrpcutil\n", "error": "none", "author": "tom@organisms.be"}, {"index": "568", "colour": "orange", "code": "    def xmlrpc_dispatch(path_info):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "569", "colour": "orange", "code": "        path_info = xmlrpcutil.patched_path(path_info)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "570", "colour": "orange", "code": "        return next_dispatcher(path_info)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "571", "colour": "orange", "code": "    return xmlrpc_dispatch\n", "error": "none", "author": "tom@organisms.be"}, {"index": "572", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "573", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "574", "colour": "orange", "code": "def VirtualHost(next_dispatcher=Dispatcher(), use_x_forwarded_host=True, **domains):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "575", "colour": "orange", "code": "    \"\"\"\n", "error": "none", "author": "tom@organisms.be"}, {"index": "576", "colour": "orange", "code": "    Select a different handler based on the Host header.\n", "error": "none", "author": "tom@organisms.be"}, {"index": "577", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "578", "colour": "orange", "code": "    This can be useful when running multiple sites within one CP server.\n", "error": "none", "author": "tom@organisms.be"}, {"index": "579", "colour": "orange", "code": "    It allows several domains to point to different parts of a single\n", "error": "none", "author": "tom@organisms.be"}, {"index": "580", "colour": "orange", "code": "    website structure. For example::\n", "error": "none", "author": "tom@organisms.be"}, {"index": "581", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "582", "colour": "orange", "code": "        http://www.domain.example  ->  root\n", "error": "none", "author": "tom@organisms.be"}, {"index": "583", "colour": "orange", "code": "        http://www.domain2.example  ->  root/domain2/\n", "error": "none", "author": "tom@organisms.be"}, {"index": "584", "colour": "orange", "code": "        http://www.domain2.example:443  ->  root/secure\n", "error": "none", "author": "tom@organisms.be"}, {"index": "585", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "586", "colour": "orange", "code": "    can be accomplished via the following config::\n", "error": "none", "author": "tom@organisms.be"}, {"index": "587", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "588", "colour": "orange", "code": "        [/]\n", "error": "none", "author": "tom@organisms.be"}, {"index": "589", "colour": "orange", "code": "        request.dispatch = cherrypy.dispatch.VirtualHost(\n", "error": "none", "author": "tom@organisms.be"}, {"index": "590", "colour": "orange", "code": "            **{'www.domain2.example': '/domain2',\n", "error": "none", "author": "tom@organisms.be"}, {"index": "591", "colour": "orange", "code": "               'www.domain2.example:443': '/secure',\n", "error": "none", "author": "tom@organisms.be"}, {"index": "592", "colour": "orange", "code": "              })\n", "error": "none", "author": "tom@organisms.be"}, {"index": "593", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "594", "colour": "orange", "code": "    next_dispatcher\n", "error": "none", "author": "tom@organisms.be"}, {"index": "595", "colour": "orange", "code": "        The next dispatcher object in the dispatch chain.\n", "error": "none", "author": "tom@organisms.be"}, {"index": "596", "colour": "orange", "code": "        The VirtualHost dispatcher adds a prefix to the URL and calls\n", "error": "none", "author": "tom@organisms.be"}, {"index": "597", "colour": "orange", "code": "        another dispatcher. Defaults to cherrypy.dispatch.Dispatcher().\n", "error": "none", "author": "tom@organisms.be"}, {"index": "598", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "599", "colour": "orange", "code": "    use_x_forwarded_host\n", "error": "none", "author": "tom@organisms.be"}, {"index": "600", "colour": "orange", "code": "        If True (the default), any \"X-Forwarded-Host\"\n", "error": "none", "author": "tom@organisms.be"}, {"index": "601", "colour": "orange", "code": "        request header will be used instead of the \"Host\" header. This\n", "error": "none", "author": "tom@organisms.be"}, {"index": "602", "colour": "orange", "code": "        is commonly added by HTTP servers (such as Apache) when proxying.\n", "error": "none", "author": "tom@organisms.be"}, {"index": "603", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "604", "colour": "orange", "code": "    ``**domains``\n", "error": "none", "author": "tom@organisms.be"}, {"index": "605", "colour": "orange", "code": "        A dict of {host header value: virtual prefix} pairs.\n", "error": "none", "author": "tom@organisms.be"}, {"index": "606", "colour": "orange", "code": "        The incoming \"Host\" request header is looked up in this dict,\n", "error": "none", "author": "tom@organisms.be"}, {"index": "607", "colour": "orange", "code": "        and, if a match is found, the corresponding \"virtual prefix\"\n", "error": "none", "author": "tom@organisms.be"}, {"index": "608", "colour": "orange", "code": "        value will be prepended to the URL path before calling the\n", "error": "none", "author": "tom@organisms.be"}, {"index": "609", "colour": "orange", "code": "        next dispatcher. Note that you often need separate entries\n", "error": "none", "author": "tom@organisms.be"}, {"index": "610", "colour": "orange", "code": "        for \"example.com\" and \"www.example.com\". In addition, \"Host\"\n", "error": "none", "author": "tom@organisms.be"}, {"index": "611", "colour": "orange", "code": "        headers may contain the port number.\n", "error": "none", "author": "tom@organisms.be"}, {"index": "612", "colour": "orange", "code": "    \"\"\"\n", "error": "none", "author": "tom@organisms.be"}, {"index": "613", "colour": "orange", "code": "    from cherrypy.lib import httputil\n", "error": "none", "author": "tom@organisms.be"}, {"index": "614", "colour": "orange", "code": "    def vhost_dispatch(path_info):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "615", "colour": "orange", "code": "        request = cherrypy.serving.request\n", "error": "none", "author": "tom@organisms.be"}, {"index": "616", "colour": "orange", "code": "        header = request.headers.get\n", "error": "none", "author": "tom@organisms.be"}, {"index": "617", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "618", "colour": "orange", "code": "        domain = header('Host', '')\n", "error": "none", "author": "tom@organisms.be"}, {"index": "619", "colour": "orange", "code": "        if use_x_forwarded_host:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "620", "colour": "orange", "code": "            domain = header(\"X-Forwarded-Host\", domain)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "621", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "622", "colour": "orange", "code": "        prefix = domains.get(domain, \"\")\n", "error": "none", "author": "tom@organisms.be"}, {"index": "623", "colour": "orange", "code": "        if prefix:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "624", "colour": "orange", "code": "            path_info = httputil.urljoin(prefix, path_info)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "625", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "626", "colour": "orange", "code": "        result = next_dispatcher(path_info)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "627", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "628", "colour": "orange", "code": "        # Touch up staticdir config. See http://www.cherrypy.org/ticket/614.\n", "error": "none", "author": "tom@organisms.be"}, {"index": "629", "colour": "orange", "code": "        section = request.config.get('tools.staticdir.section')\n", "error": "none", "author": "tom@organisms.be"}, {"index": "630", "colour": "orange", "code": "        if section:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "631", "colour": "orange", "code": "            section = section[len(prefix):]\n", "error": "none", "author": "tom@organisms.be"}, {"index": "632", "colour": "orange", "code": "            request.config['tools.staticdir.section'] = section\n", "error": "none", "author": "tom@organisms.be"}, {"index": "633", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "634", "colour": "orange", "code": "        return result\n", "error": "none", "author": "tom@organisms.be"}, {"index": "635", "colour": "orange", "code": "    return vhost_dispatch\n", "error": "none", "author": "tom@organisms.be"}, {"index": "636", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}]}