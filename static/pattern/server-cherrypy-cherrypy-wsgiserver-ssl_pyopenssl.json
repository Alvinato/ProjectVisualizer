{"path": "/home/asumal/git/cs410/pattern/pattern/server/cherrypy/cherrypy/wsgiserver/ssl_pyopenssl.py", "lines": [{"index": "1", "colour": "orange", "code": "\"\"\"A library for integrating pyOpenSSL with CherryPy.\n", "error": "none", "author": "tom@organisms.be"}, {"index": "2", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "3", "colour": "orange", "code": "The OpenSSL module must be importable for SSL functionality.\n", "error": "none", "author": "tom@organisms.be"}, {"index": "4", "colour": "orange", "code": "You can obtain it from http://pyopenssl.sourceforge.net/\n", "error": "none", "author": "tom@organisms.be"}, {"index": "5", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "6", "colour": "orange", "code": "To use this module, set CherryPyWSGIServer.ssl_adapter to an instance of\n", "error": "none", "author": "tom@organisms.be"}, {"index": "7", "colour": "orange", "code": "SSLAdapter. There are two ways to use SSL:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "8", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "9", "colour": "orange", "code": "Method One\n", "error": "none", "author": "tom@organisms.be"}, {"index": "10", "colour": "orange", "code": "----------\n", "error": "none", "author": "tom@organisms.be"}, {"index": "11", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "12", "colour": "orange", "code": " * ``ssl_adapter.context``: an instance of SSL.Context.\n", "error": "none", "author": "tom@organisms.be"}, {"index": "13", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "14", "colour": "orange", "code": "If this is not None, it is assumed to be an SSL.Context instance,\n", "error": "none", "author": "tom@organisms.be"}, {"index": "15", "colour": "orange", "code": "and will be passed to SSL.Connection on bind(). The developer is\n", "error": "none", "author": "tom@organisms.be"}, {"index": "16", "colour": "orange", "code": "responsible for forming a valid Context object. This approach is\n", "error": "none", "author": "tom@organisms.be"}, {"index": "17", "colour": "orange", "code": "to be preferred for more flexibility, e.g. if the cert and key are\n", "error": "none", "author": "tom@organisms.be"}, {"index": "18", "colour": "orange", "code": "streams instead of files, or need decryption, or SSL.SSLv3_METHOD\n", "error": "none", "author": "tom@organisms.be"}, {"index": "19", "colour": "orange", "code": "is desired instead of the default SSL.SSLv23_METHOD, etc. Consult\n", "error": "none", "author": "tom@organisms.be"}, {"index": "20", "colour": "orange", "code": "the pyOpenSSL documentation for complete options.\n", "error": "none", "author": "tom@organisms.be"}, {"index": "21", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "22", "colour": "orange", "code": "Method Two (shortcut)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "23", "colour": "orange", "code": "---------------------\n", "error": "none", "author": "tom@organisms.be"}, {"index": "24", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "25", "colour": "orange", "code": " * ``ssl_adapter.certificate``: the filename of the server SSL certificate.\n", "error": "none", "author": "tom@organisms.be"}, {"index": "26", "colour": "orange", "code": " * ``ssl_adapter.private_key``: the filename of the server's private key file.\n", "error": "none", "author": "tom@organisms.be"}, {"index": "27", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "28", "colour": "orange", "code": "Both are None by default. If ssl_adapter.context is None, but .private_key\n", "error": "none", "author": "tom@organisms.be"}, {"index": "29", "colour": "orange", "code": "and .certificate are both given and valid, they will be read, and the\n", "error": "none", "author": "tom@organisms.be"}, {"index": "30", "colour": "orange", "code": "context will be automatically created from them.\n", "error": "none", "author": "tom@organisms.be"}, {"index": "31", "colour": "orange", "code": "\"\"\"\n", "error": "none", "author": "tom@organisms.be"}, {"index": "32", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "33", "colour": "orange", "code": "import socket\n", "error": "none", "author": "tom@organisms.be"}, {"index": "34", "colour": "orange", "code": "import threading\n", "error": "none", "author": "tom@organisms.be"}, {"index": "35", "colour": "orange", "code": "import time\n", "error": "none", "author": "tom@organisms.be"}, {"index": "36", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "37", "colour": "orange", "code": "from cherrypy import wsgiserver\n", "error": "none", "author": "tom@organisms.be"}, {"index": "38", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "39", "colour": "orange", "code": "try:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "40", "colour": "orange", "code": "    from OpenSSL import SSL\n", "error": "none", "author": "tom@organisms.be"}, {"index": "41", "colour": "orange", "code": "    from OpenSSL import crypto\n", "error": "none", "author": "tom@organisms.be"}, {"index": "42", "colour": "orange", "code": "except ImportError:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "43", "colour": "orange", "code": "    SSL = None\n", "error": "none", "author": "tom@organisms.be"}, {"index": "44", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "45", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "46", "colour": "orange", "code": "class SSL_fileobject(wsgiserver.CP_fileobject):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "47", "colour": "orange", "code": "    \"\"\"SSL file object attached to a socket object.\"\"\"\n", "error": "none", "author": "tom@organisms.be"}, {"index": "48", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "49", "colour": "orange", "code": "    ssl_timeout = 3\n", "error": "none", "author": "tom@organisms.be"}, {"index": "50", "colour": "orange", "code": "    ssl_retry = .01\n", "error": "none", "author": "tom@organisms.be"}, {"index": "51", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "52", "colour": "orange", "code": "    def _safe_call(self, is_reader, call, *args, **kwargs):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "53", "colour": "orange", "code": "        \"\"\"Wrap the given call with SSL error-trapping.\n", "error": "none", "author": "tom@organisms.be"}, {"index": "54", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "55", "colour": "orange", "code": "        is_reader: if False EOF errors will be raised. If True, EOF errors\n", "error": "none", "author": "tom@organisms.be"}, {"index": "56", "colour": "orange", "code": "        will return \"\" (to emulate normal sockets).\n", "error": "none", "author": "tom@organisms.be"}, {"index": "57", "colour": "orange", "code": "        \"\"\"\n", "error": "none", "author": "tom@organisms.be"}, {"index": "58", "colour": "orange", "code": "        start = time.time()\n", "error": "none", "author": "tom@organisms.be"}, {"index": "59", "colour": "orange", "code": "        while True:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "60", "colour": "orange", "code": "            try:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "61", "colour": "orange", "code": "                return call(*args, **kwargs)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "62", "colour": "orange", "code": "            except SSL.WantReadError:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "63", "colour": "orange", "code": "                # Sleep and try again. This is dangerous, because it means\n", "error": "none", "author": "tom@organisms.be"}, {"index": "64", "colour": "orange", "code": "                # the rest of the stack has no way of differentiating\n", "error": "none", "author": "tom@organisms.be"}, {"index": "65", "colour": "orange", "code": "                # between a \"new handshake\" error and \"client dropped\".\n", "error": "none", "author": "tom@organisms.be"}, {"index": "66", "colour": "orange", "code": "                # Note this isn't an endless loop: there's a timeout below.\n", "error": "none", "author": "tom@organisms.be"}, {"index": "67", "colour": "orange", "code": "                time.sleep(self.ssl_retry)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "68", "colour": "orange", "code": "            except SSL.WantWriteError:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "69", "colour": "orange", "code": "                time.sleep(self.ssl_retry)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "70", "colour": "orange", "code": "            except SSL.SysCallError as e:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "71", "colour": "orange", "code": "                if is_reader and e.args == (-1, 'Unexpected EOF'):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "72", "colour": "orange", "code": "                    return \"\"\n", "error": "none", "author": "tom@organisms.be"}, {"index": "73", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "74", "colour": "orange", "code": "                errnum = e.args[0]\n", "error": "none", "author": "tom@organisms.be"}, {"index": "75", "colour": "red", "code": "                if is_reader and errnum in wsgiserver.socket_errors_to_ignore:\n", "error": "E", "author": "tom@organisms.be"}, {"index": "76", "colour": "orange", "code": "                    return \"\"\n", "error": "none", "author": "tom@organisms.be"}, {"index": "77", "colour": "orange", "code": "                raise socket.error(errnum)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "78", "colour": "orange", "code": "            except SSL.Error as e:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "79", "colour": "orange", "code": "                if is_reader and e.args == (-1, 'Unexpected EOF'):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "80", "colour": "orange", "code": "                    return \"\"\n", "error": "none", "author": "tom@organisms.be"}, {"index": "81", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "82", "colour": "orange", "code": "                thirdarg = None\n", "error": "none", "author": "tom@organisms.be"}, {"index": "83", "colour": "orange", "code": "                try:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "84", "colour": "orange", "code": "                    thirdarg = e.args[0][0][2]\n", "error": "none", "author": "tom@organisms.be"}, {"index": "85", "colour": "orange", "code": "                except IndexError:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "86", "colour": "orange", "code": "                    pass\n", "error": "none", "author": "tom@organisms.be"}, {"index": "87", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "88", "colour": "orange", "code": "                if thirdarg == 'http request':\n", "error": "none", "author": "tom@organisms.be"}, {"index": "89", "colour": "orange", "code": "                    # The client is talking HTTP to an HTTPS server.\n", "error": "none", "author": "tom@organisms.be"}, {"index": "90", "colour": "orange", "code": "                    raise wsgiserver.NoSSLError()\n", "error": "none", "author": "tom@organisms.be"}, {"index": "91", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "92", "colour": "green", "code": "                raise wsgiserver.FatalSSLAlert(*e.args)\n", "error": "W", "author": "tom@organisms.be"}, {"index": "93", "colour": "orange", "code": "            except:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "94", "colour": "orange", "code": "                raise\n", "error": "none", "author": "tom@organisms.be"}, {"index": "95", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "96", "colour": "orange", "code": "            if time.time() - start > self.ssl_timeout:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "97", "colour": "orange", "code": "                raise socket.timeout(\"timed out\")\n", "error": "none", "author": "tom@organisms.be"}, {"index": "98", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "99", "colour": "orange", "code": "    def recv(self, *args, **kwargs):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "100", "colour": "orange", "code": "        buf = []\n", "error": "none", "author": "tom@organisms.be"}, {"index": "101", "colour": "orange", "code": "        r = super(SSL_fileobject, self).recv\n", "error": "none", "author": "tom@organisms.be"}, {"index": "102", "colour": "orange", "code": "        while True:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "103", "colour": "orange", "code": "            data = self._safe_call(True, r, *args, **kwargs)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "104", "colour": "orange", "code": "            buf.append(data)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "105", "colour": "orange", "code": "            p = self._sock.pending()\n", "error": "none", "author": "tom@organisms.be"}, {"index": "106", "colour": "orange", "code": "            if not p:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "107", "colour": "orange", "code": "                return \"\".join(buf)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "108", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "109", "colour": "orange", "code": "    def sendall(self, *args, **kwargs):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "110", "colour": "orange", "code": "        return self._safe_call(False, super(SSL_fileobject, self).sendall,\n", "error": "none", "author": "tom@organisms.be"}, {"index": "111", "colour": "orange", "code": "                               *args, **kwargs)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "112", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "113", "colour": "orange", "code": "    def send(self, *args, **kwargs):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "114", "colour": "orange", "code": "        return self._safe_call(False, super(SSL_fileobject, self).send,\n", "error": "none", "author": "tom@organisms.be"}, {"index": "115", "colour": "orange", "code": "                               *args, **kwargs)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "116", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "117", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "118", "colour": "blue", "code": "class SSLConnection:\n", "error": "R", "author": "tom@organisms.be"}, {"index": "119", "colour": "orange", "code": "    \"\"\"A thread-safe wrapper for an SSL.Connection.\n", "error": "none", "author": "tom@organisms.be"}, {"index": "120", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "121", "colour": "orange", "code": "    ``*args``: the arguments to create the wrapped ``SSL.Connection(*args)``.\n", "error": "none", "author": "tom@organisms.be"}, {"index": "122", "colour": "orange", "code": "    \"\"\"\n", "error": "none", "author": "tom@organisms.be"}, {"index": "123", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "124", "colour": "orange", "code": "    def __init__(self, *args):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "125", "colour": "orange", "code": "        self._ssl_conn = SSL.Connection(*args)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "126", "colour": "orange", "code": "        self._lock = threading.RLock()\n", "error": "none", "author": "tom@organisms.be"}, {"index": "127", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "128", "colour": "orange", "code": "    for f in ('get_context', 'pending', 'send', 'write', 'recv', 'read',\n", "error": "none", "author": "tom@organisms.be"}, {"index": "129", "colour": "orange", "code": "              'renegotiate', 'bind', 'listen', 'connect', 'accept',\n", "error": "none", "author": "tom@organisms.be"}, {"index": "130", "colour": "orange", "code": "              'setblocking', 'fileno', 'close', 'get_cipher_list',\n", "error": "none", "author": "tom@organisms.be"}, {"index": "131", "colour": "orange", "code": "              'getpeername', 'getsockname', 'getsockopt', 'setsockopt',\n", "error": "none", "author": "tom@organisms.be"}, {"index": "132", "colour": "orange", "code": "              'makefile', 'get_app_data', 'set_app_data', 'state_string',\n", "error": "none", "author": "tom@organisms.be"}, {"index": "133", "colour": "orange", "code": "              'sock_shutdown', 'get_peer_certificate', 'want_read',\n", "error": "none", "author": "tom@organisms.be"}, {"index": "134", "colour": "orange", "code": "              'want_write', 'set_connect_state', 'set_accept_state',\n", "error": "none", "author": "tom@organisms.be"}, {"index": "135", "colour": "orange", "code": "              'connect_ex', 'sendall', 'settimeout', 'gettimeout'):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "136", "colour": "green", "code": "        exec(\"\"\"def %s(self, *args):\n", "error": "W", "author": "tom@organisms.be"}, {"index": "137", "colour": "orange", "code": "        self._lock.acquire()\n", "error": "none", "author": "tom@organisms.be"}, {"index": "138", "colour": "orange", "code": "        try:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "139", "colour": "orange", "code": "            return self._ssl_conn.%s(*args)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "140", "colour": "orange", "code": "        finally:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "141", "colour": "orange", "code": "            self._lock.release()\n", "error": "none", "author": "tom@organisms.be"}, {"index": "142", "colour": "orange", "code": "\"\"\" % (f, f))\n", "error": "none", "author": "tom@organisms.be"}, {"index": "143", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "144", "colour": "green", "code": "    def shutdown(self, *args):\n", "error": "W", "author": "tom@organisms.be"}, {"index": "145", "colour": "orange", "code": "        self._lock.acquire()\n", "error": "none", "author": "tom@organisms.be"}, {"index": "146", "colour": "orange", "code": "        try:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "147", "colour": "orange", "code": "            # pyOpenSSL.socket.shutdown takes no args\n", "error": "none", "author": "tom@organisms.be"}, {"index": "148", "colour": "orange", "code": "            return self._ssl_conn.shutdown()\n", "error": "none", "author": "tom@organisms.be"}, {"index": "149", "colour": "orange", "code": "        finally:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "150", "colour": "orange", "code": "            self._lock.release()\n", "error": "none", "author": "tom@organisms.be"}, {"index": "151", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "152", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "153", "colour": "orange", "code": "class pyOpenSSLAdapter(wsgiserver.SSLAdapter):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "154", "colour": "orange", "code": "    \"\"\"A wrapper for integrating pyOpenSSL with CherryPy.\"\"\"\n", "error": "none", "author": "tom@organisms.be"}, {"index": "155", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "156", "colour": "orange", "code": "    context = None\n", "error": "none", "author": "tom@organisms.be"}, {"index": "157", "colour": "orange", "code": "    \"\"\"An instance of SSL.Context.\"\"\"\n", "error": "none", "author": "tom@organisms.be"}, {"index": "158", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "159", "colour": "orange", "code": "    certificate = None\n", "error": "none", "author": "tom@organisms.be"}, {"index": "160", "colour": "orange", "code": "    \"\"\"The filename of the server SSL certificate.\"\"\"\n", "error": "none", "author": "tom@organisms.be"}, {"index": "161", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "162", "colour": "orange", "code": "    private_key = None\n", "error": "none", "author": "tom@organisms.be"}, {"index": "163", "colour": "orange", "code": "    \"\"\"The filename of the server's private key file.\"\"\"\n", "error": "none", "author": "tom@organisms.be"}, {"index": "164", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "165", "colour": "orange", "code": "    certificate_chain = None\n", "error": "none", "author": "tom@organisms.be"}, {"index": "166", "colour": "orange", "code": "    \"\"\"Optional. The filename of CA's intermediate certificate bundle.\n", "error": "none", "author": "tom@organisms.be"}, {"index": "167", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "168", "colour": "orange", "code": "    This is needed for cheaper \"chained root\" SSL certificates, and should be\n", "error": "none", "author": "tom@organisms.be"}, {"index": "169", "colour": "orange", "code": "    left as None if not required.\"\"\"\n", "error": "none", "author": "tom@organisms.be"}, {"index": "170", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "171", "colour": "green", "code": "    def __init__(self, certificate, private_key, certificate_chain=None):\n", "error": "W", "author": "tom@organisms.be"}, {"index": "172", "colour": "orange", "code": "        if SSL is None:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "173", "colour": "orange", "code": "            raise ImportError(\"You must install pyOpenSSL to use HTTPS.\")\n", "error": "none", "author": "tom@organisms.be"}, {"index": "174", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "175", "colour": "orange", "code": "        self.context = None\n", "error": "none", "author": "tom@organisms.be"}, {"index": "176", "colour": "orange", "code": "        self.certificate = certificate\n", "error": "none", "author": "tom@organisms.be"}, {"index": "177", "colour": "orange", "code": "        self.private_key = private_key\n", "error": "none", "author": "tom@organisms.be"}, {"index": "178", "colour": "orange", "code": "        self.certificate_chain = certificate_chain\n", "error": "none", "author": "tom@organisms.be"}, {"index": "179", "colour": "orange", "code": "        self._environ = None\n", "error": "none", "author": "tom@organisms.be"}, {"index": "180", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "181", "colour": "orange", "code": "    def bind(self, sock):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "182", "colour": "orange", "code": "        \"\"\"Wrap and return the given socket.\"\"\"\n", "error": "none", "author": "tom@organisms.be"}, {"index": "183", "colour": "orange", "code": "        if self.context is None:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "184", "colour": "orange", "code": "            self.context = self.get_context()\n", "error": "none", "author": "tom@organisms.be"}, {"index": "185", "colour": "orange", "code": "        conn = SSLConnection(self.context, sock)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "186", "colour": "orange", "code": "        self._environ = self.get_environ()\n", "error": "none", "author": "tom@organisms.be"}, {"index": "187", "colour": "orange", "code": "        return conn\n", "error": "none", "author": "tom@organisms.be"}, {"index": "188", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "189", "colour": "orange", "code": "    def wrap(self, sock):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "190", "colour": "orange", "code": "        \"\"\"Wrap and return the given socket, plus WSGI environ entries.\"\"\"\n", "error": "none", "author": "tom@organisms.be"}, {"index": "191", "colour": "orange", "code": "        return sock, self._environ.copy()\n", "error": "none", "author": "tom@organisms.be"}, {"index": "192", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "193", "colour": "orange", "code": "    def get_context(self):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "194", "colour": "orange", "code": "        \"\"\"Return an SSL.Context from self attributes.\"\"\"\n", "error": "none", "author": "tom@organisms.be"}, {"index": "195", "colour": "orange", "code": "        # See http://aspn.activestate.com/ASPN/Cookbook/Python/Recipe/442473\n", "error": "none", "author": "tom@organisms.be"}, {"index": "196", "colour": "orange", "code": "        c = SSL.Context(SSL.SSLv23_METHOD)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "197", "colour": "orange", "code": "        c.use_privatekey_file(self.private_key)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "198", "colour": "orange", "code": "        if self.certificate_chain:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "199", "colour": "orange", "code": "            c.load_verify_locations(self.certificate_chain)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "200", "colour": "orange", "code": "        c.use_certificate_file(self.certificate)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "201", "colour": "orange", "code": "        return c\n", "error": "none", "author": "tom@organisms.be"}, {"index": "202", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "203", "colour": "orange", "code": "    def get_environ(self):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "204", "colour": "orange", "code": "        \"\"\"Return WSGI environ entries to be merged into each request.\"\"\"\n", "error": "none", "author": "tom@organisms.be"}, {"index": "205", "colour": "orange", "code": "        ssl_environ = {\n", "error": "none", "author": "tom@organisms.be"}, {"index": "206", "colour": "orange", "code": "            \"HTTPS\": \"on\",\n", "error": "none", "author": "tom@organisms.be"}, {"index": "207", "colour": "orange", "code": "            # pyOpenSSL doesn't provide access to any of these AFAICT\n", "error": "none", "author": "tom@organisms.be"}, {"index": "208", "colour": "orange", "code": "##            'SSL_PROTOCOL': 'SSLv2',\n", "error": "none", "author": "tom@organisms.be"}, {"index": "209", "colour": "orange", "code": "##            SSL_CIPHER \tstring \tThe cipher specification name\n", "error": "none", "author": "tom@organisms.be"}, {"index": "210", "colour": "orange", "code": "##            SSL_VERSION_INTERFACE \tstring \tThe mod_ssl program version\n", "error": "none", "author": "tom@organisms.be"}, {"index": "211", "colour": "orange", "code": "##            SSL_VERSION_LIBRARY \tstring \tThe OpenSSL program version\n", "error": "none", "author": "tom@organisms.be"}, {"index": "212", "colour": "orange", "code": "            }\n", "error": "none", "author": "tom@organisms.be"}, {"index": "213", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "214", "colour": "orange", "code": "        if self.certificate:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "215", "colour": "orange", "code": "            # Server certificate attributes\n", "error": "none", "author": "tom@organisms.be"}, {"index": "216", "colour": "orange", "code": "            cert = open(self.certificate, 'rb').read()\n", "error": "none", "author": "tom@organisms.be"}, {"index": "217", "colour": "orange", "code": "            cert = crypto.load_certificate(crypto.FILETYPE_PEM, cert)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "218", "colour": "orange", "code": "            ssl_environ.update({\n", "error": "none", "author": "tom@organisms.be"}, {"index": "219", "colour": "orange", "code": "                'SSL_SERVER_M_VERSION': cert.get_version(),\n", "error": "none", "author": "tom@organisms.be"}, {"index": "220", "colour": "orange", "code": "                'SSL_SERVER_M_SERIAL': cert.get_serial_number(),\n", "error": "none", "author": "tom@organisms.be"}, {"index": "221", "colour": "orange", "code": "##                'SSL_SERVER_V_START': Validity of server's certificate (start time),\n", "error": "none", "author": "tom@organisms.be"}, {"index": "222", "colour": "orange", "code": "##                'SSL_SERVER_V_END': Validity of server's certificate (end time),\n", "error": "none", "author": "tom@organisms.be"}, {"index": "223", "colour": "orange", "code": "                })\n", "error": "none", "author": "tom@organisms.be"}, {"index": "224", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "225", "colour": "orange", "code": "            for prefix, dn in [(\"I\", cert.get_issuer()),\n", "error": "none", "author": "tom@organisms.be"}, {"index": "226", "colour": "orange", "code": "                               (\"S\", cert.get_subject())]:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "227", "colour": "orange", "code": "                # X509Name objects don't seem to have a way to get the\n", "error": "none", "author": "tom@organisms.be"}, {"index": "228", "colour": "orange", "code": "                # complete DN string. Use str() and slice it instead,\n", "error": "none", "author": "tom@organisms.be"}, {"index": "229", "colour": "orange", "code": "                # because str(dn) == \"<X509Name object '/C=US/ST=...'>\"\n", "error": "none", "author": "tom@organisms.be"}, {"index": "230", "colour": "orange", "code": "                dnstr = str(dn)[18:-2]\n", "error": "none", "author": "tom@organisms.be"}, {"index": "231", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "232", "colour": "orange", "code": "                wsgikey = 'SSL_SERVER_%s_DN' % prefix\n", "error": "none", "author": "tom@organisms.be"}, {"index": "233", "colour": "orange", "code": "                ssl_environ[wsgikey] = dnstr\n", "error": "none", "author": "tom@organisms.be"}, {"index": "234", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "235", "colour": "orange", "code": "                # The DN should be of the form: /k1=v1/k2=v2, but we must allow\n", "error": "none", "author": "tom@organisms.be"}, {"index": "236", "colour": "orange", "code": "                # for any value to contain slashes itself (in a URL).\n", "error": "none", "author": "tom@organisms.be"}, {"index": "237", "colour": "orange", "code": "                while dnstr:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "238", "colour": "orange", "code": "                    pos = dnstr.rfind(\"=\")\n", "error": "none", "author": "tom@organisms.be"}, {"index": "239", "colour": "orange", "code": "                    dnstr, value = dnstr[:pos], dnstr[pos + 1:]\n", "error": "none", "author": "tom@organisms.be"}, {"index": "240", "colour": "orange", "code": "                    pos = dnstr.rfind(\"/\")\n", "error": "none", "author": "tom@organisms.be"}, {"index": "241", "colour": "orange", "code": "                    dnstr, key = dnstr[:pos], dnstr[pos + 1:]\n", "error": "none", "author": "tom@organisms.be"}, {"index": "242", "colour": "orange", "code": "                    if key and value:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "243", "colour": "orange", "code": "                        wsgikey = 'SSL_SERVER_%s_DN_%s' % (prefix, key)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "244", "colour": "orange", "code": "                        ssl_environ[wsgikey] = value\n", "error": "none", "author": "tom@organisms.be"}, {"index": "245", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "246", "colour": "orange", "code": "        return ssl_environ\n", "error": "none", "author": "tom@organisms.be"}, {"index": "247", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "248", "colour": "orange", "code": "    def makefile(self, sock, mode='r', bufsize=-1):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "249", "colour": "orange", "code": "        if SSL and isinstance(sock, SSL.ConnectionType):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "250", "colour": "orange", "code": "            timeout = sock.gettimeout()\n", "error": "none", "author": "tom@organisms.be"}, {"index": "251", "colour": "orange", "code": "            f = SSL_fileobject(sock, mode, bufsize)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "252", "colour": "orange", "code": "            f.ssl_timeout = timeout\n", "error": "none", "author": "tom@organisms.be"}, {"index": "253", "colour": "orange", "code": "            return f\n", "error": "none", "author": "tom@organisms.be"}, {"index": "254", "colour": "orange", "code": "        else:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "255", "colour": "orange", "code": "            return wsgiserver.CP_fileobject(sock, mode, bufsize)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "256", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}]}