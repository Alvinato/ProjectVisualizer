{"path": "/home/asumal/git/cs410/pattern/pattern/text/tree.py", "lines": [{"index": "1", "colour": "orange", "code": "#### PATTERN | EN | PARSE TREE #####################################################################\n", "error": "none", "author": "tom@organisms.be"}, {"index": "2", "colour": "orange", "code": "# Copyright (c) 2010 University of Antwerp, Belgium\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "3", "colour": "orange", "code": "# Author: Tom De Smedt <tom@organisms.be>\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "4", "colour": "orange", "code": "# License: BSD (see LICENSE.txt for details).\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "5", "colour": "orange", "code": "# http://www.clips.ua.ac.be/pages/pattern\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "6", "colour": "orange", "code": "\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "7", "colour": "orange", "code": "####################################################################################################\n", "error": "none", "author": "tom@organisms.be"}, {"index": "8", "colour": "orange", "code": "# Text and Sentence objects to traverse words and chunks in parsed text.\n", "error": "none", "author": "tom@organisms.be"}, {"index": "9", "colour": "orange", "code": "# from pattern.en import parsetree\n", "error": "none", "author": "tom@organisms.be"}, {"index": "10", "colour": "orange", "code": "# for sentence in parsetree(\"The cat sat on the mat.\"):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "11", "colour": "orange", "code": "#     for chunk in sentence.chunks:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "12", "colour": "orange", "code": "#         for word in chunk.words:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "13", "colour": "orange", "code": "#             print(word.string, word.tag, word.lemma)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "14", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "15", "colour": "orange", "code": "# Terminology:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "16", "colour": "orange", "code": "# - part-of-speech: the role that a word plays in a sentence: noun (NN), verb (VB), adjective, ...\n", "error": "none", "author": "tom@organisms.be"}, {"index": "17", "colour": "orange", "code": "# -    sentence: a unit of language, with a subject (e.g., \"the cat\") and a predicate (\"jumped\").\n", "error": "none", "author": "tom@organisms.be"}, {"index": "18", "colour": "orange", "code": "# -       token: a word in a sentence with a part-of-speech tag (e.g., \"jump/VB\" or \"jump/NN\").\n", "error": "none", "author": "tom@organisms.be"}, {"index": "19", "colour": "orange", "code": "# -        word: a string of characters that expresses a meaningful concept (e.g., \"cat\").\n", "error": "none", "author": "tom@organisms.be"}, {"index": "20", "colour": "orange", "code": "# -       lemma: the canonical word form (\"jumped\" => \"jump\").\n", "error": "none", "author": "tom@organisms.be"}, {"index": "21", "colour": "orange", "code": "# -      lexeme: the set of word forms (\"jump\", \"jumps\", \"jumping\", ...)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "22", "colour": "orange", "code": "# -       chunk: a phrase, group of words that express a single thought (e.g., \"the cat\").\n", "error": "none", "author": "tom@organisms.be"}, {"index": "23", "colour": "orange", "code": "# -     subject: the phrase that the sentence is about, usually a noun phrase.\n", "error": "none", "author": "tom@organisms.be"}, {"index": "24", "colour": "orange", "code": "# -   predicate: the remainder of the sentence tells us what the subject does (jump).\n", "error": "none", "author": "tom@organisms.be"}, {"index": "25", "colour": "orange", "code": "# -      object: the phrase that is affected by the action (the cat jumped [the mouse]\").\n", "error": "none", "author": "tom@organisms.be"}, {"index": "26", "colour": "orange", "code": "# - preposition: temporal, spatial or logical relationship (\"the cat jumped [on the table]\").\n", "error": "none", "author": "tom@organisms.be"}, {"index": "27", "colour": "orange", "code": "# -      anchor: the chunk to which the preposition is attached:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "28", "colour": "orange", "code": "#                \"the cat eats its snackerel with vigor\" => eat with vigor?\n", "error": "none", "author": "tom@organisms.be"}, {"index": "29", "colour": "orange", "code": "#                                                     OR => vigorous snackerel?\n", "error": "none", "author": "tom@organisms.be"}, {"index": "30", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "31", "colour": "orange", "code": "# The Text and Sentece classes are containers: \n", "error": "none", "author": "tom@organisms.be"}, {"index": "32", "colour": "orange", "code": "# no parsing functionality should be added to it.\n", "error": "none", "author": "tom@organisms.be"}, {"index": "33", "colour": "orange", "code": "\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "34", "colour": "orange", "code": "try:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "35", "colour": "orange", "code": "    from itertools import chain\n", "error": "none", "author": "tom@organisms.be"}, {"index": "36", "colour": "orange", "code": "    from itertools import izip\n", "error": "none", "author": "tom@organisms.be"}, {"index": "37", "colour": "green", "code": "except:\n", "error": "W", "author": "tom@organisms.be"}, {"index": "38", "colour": "orange", "code": "    izip = zip  # Python 3\n", "error": "none", "author": "tom@organisms.be"}, {"index": "39", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "40", "colour": "orange", "code": "try:\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "41", "colour": "orange", "code": "    from config import SLASH\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "42", "colour": "orange", "code": "    from config import WORD, POS, CHUNK, PNP, REL, ANCHOR, LEMMA\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "43", "colour": "orange", "code": "    MBSP = True # Memory-Based Shallow Parser for Python.\n", "error": "none", "author": "tom@organisms.be"}, {"index": "44", "colour": "green", "code": "except:\n", "error": "W", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "45", "colour": "orange", "code": "    SLASH, WORD, POS, CHUNK, PNP, REL, ANCHOR, LEMMA = \\\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "46", "colour": "orange", "code": "        \"&slash;\", \"word\", \"part-of-speech\", \"chunk\", \"preposition\", \"relation\", \"anchor\", \"lemma\"\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "47", "colour": "orange", "code": "    MBSP = False\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "48", "colour": "orange", "code": "\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "49", "colour": "orange", "code": "# B- marks the start of a chunk: the/DT/B-NP cat/NN/I-NP\n", "error": "none", "author": "tom@organisms.be"}, {"index": "50", "colour": "orange", "code": "# I- words are inside a chunk.\n", "error": "none", "author": "tom@organisms.be"}, {"index": "51", "colour": "orange", "code": "# O- words are outside a chunk (punctuation etc.).\n", "error": "none", "author": "tom@organisms.be"}, {"index": "52", "colour": "orange", "code": "IOB, BEGIN, INSIDE, OUTSIDE  = \"IOB\", \"B\", \"I\", \"O\"\n", "error": "none", "author": "tom@organisms.be"}, {"index": "53", "colour": "orange", "code": "\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "54", "colour": "orange", "code": "# -SBJ marks subjects: the/DT/B-NP-SBJ cat/NN/I-NP-SBJ\n", "error": "none", "author": "tom@organisms.be"}, {"index": "55", "colour": "orange", "code": "# -OBJ marks objects.\n", "error": "none", "author": "tom@organisms.be"}, {"index": "56", "colour": "orange", "code": "ROLE = \"role\"\n", "error": "none", "author": "tom@organisms.be"}, {"index": "57", "colour": "orange", "code": "\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "58", "colour": "orange", "code": "SLASH0 = SLASH[0]\n", "error": "none", "author": "tom@organisms.be"}, {"index": "59", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "60", "colour": "orange", "code": "### LIST FUNCTIONS #################################################################################\n", "error": "none", "author": "tom@organisms.be"}, {"index": "61", "colour": "orange", "code": "\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "62", "colour": "orange", "code": "def find(function, iterable):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "63", "colour": "orange", "code": "    \"\"\" Returns the first item in the list for which function(item) is True, None otherwise.\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "64", "colour": "orange", "code": "    \"\"\"\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "65", "colour": "orange", "code": "    for x in iterable:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "66", "colour": "orange", "code": "        if function(x) == True:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "67", "colour": "orange", "code": "            return x\n", "error": "none", "author": "tom@organisms.be"}, {"index": "68", "colour": "orange", "code": "\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "69", "colour": "orange", "code": "def intersects(iterable1, iterable2):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "70", "colour": "orange", "code": "    \"\"\" Returns True if the given lists have at least one item in common.\n", "error": "none", "author": "tom@organisms.be"}, {"index": "71", "colour": "orange", "code": "    \"\"\"\n", "error": "none", "author": "tom@organisms.be"}, {"index": "72", "colour": "orange", "code": "    return find(lambda x: x in iterable1, iterable2) is not None\n", "error": "none", "author": "tom@organisms.be"}, {"index": "73", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "74", "colour": "orange", "code": "def unique(iterable):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "75", "colour": "orange", "code": "    \"\"\" Returns a list copy in which each item occurs only once (in-order).\n", "error": "none", "author": "tom@organisms.be"}, {"index": "76", "colour": "orange", "code": "    \"\"\"\n", "error": "none", "author": "tom@organisms.be"}, {"index": "77", "colour": "orange", "code": "    seen = set()\n", "error": "none", "author": "tom@organisms.be"}, {"index": "78", "colour": "orange", "code": "    return [x for x in iterable if x not in seen and not seen.add(x)]\n", "error": "none", "author": "tom@organisms.be"}, {"index": "79", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "80", "colour": "orange", "code": "_zip = zip\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "81", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "82", "colour": "green", "code": "def zip(*args, **kwargs):\n", "error": "W", "author": "tom@organisms.be"}, {"index": "83", "colour": "orange", "code": "    \"\"\" Returns a list of tuples, where the i-th tuple contains the i-th element \n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "84", "colour": "orange", "code": "        from each of the argument sequences or iterables (or default if too short).\n", "error": "none", "author": "tom@organisms.be"}, {"index": "85", "colour": "orange", "code": "    \"\"\"\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "86", "colour": "orange", "code": "    args = [list(iterable) for iterable in args]\n", "error": "none", "author": "tom@organisms.be"}, {"index": "87", "colour": "green", "code": "    n = max(map(len, args))\n", "error": "W", "author": "tom@organisms.be"}, {"index": "88", "colour": "orange", "code": "    v = kwargs.get(\"default\", None)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "89", "colour": "green", "code": "    return _zip(*[i + [v] * (n - len(i)) for i in args])\n", "error": "W", "author": "tom@organisms.be"}, {"index": "90", "colour": "orange", "code": "\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "91", "colour": "orange", "code": "def unzip(i, iterable):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "92", "colour": "orange", "code": "    \"\"\" Returns the item at the given index from inside each tuple in the list.\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "93", "colour": "orange", "code": "    \"\"\"\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "94", "colour": "orange", "code": "    return [x[i] for x in iterable]\n", "error": "none", "author": "tom@organisms.be"}, {"index": "95", "colour": "orange", "code": "\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "96", "colour": "orange", "code": "class Map(list):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "97", "colour": "orange", "code": "    \"\"\" A stored imap() on a list.\n", "error": "none", "author": "tom@organisms.be"}, {"index": "98", "colour": "orange", "code": "        The list is referenced instead of copied, and the items are mapped on-the-fly.\n", "error": "none", "author": "tom@organisms.be"}, {"index": "99", "colour": "orange", "code": "    \"\"\"\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "100", "colour": "green", "code": "    def __init__(self, function=lambda x: x, items=[]):\n", "error": "W", "author": "tom@organisms.be"}, {"index": "101", "colour": "orange", "code": "        self._f = function\n", "error": "none", "author": "tom@organisms.be"}, {"index": "102", "colour": "orange", "code": "        self._a = items\n", "error": "none", "author": "tom@organisms.be"}, {"index": "103", "colour": "orange", "code": "    @property\n", "error": "none", "author": "tom@organisms.be"}, {"index": "104", "colour": "orange", "code": "    def items(self):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "105", "colour": "orange", "code": "        return self._a\n", "error": "none", "author": "tom@organisms.be"}, {"index": "106", "colour": "orange", "code": "    def __repr__(self):\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "107", "colour": "orange", "code": "        return repr(list(iter(self)))\n", "error": "none", "author": "tom@organisms.be"}, {"index": "108", "colour": "orange", "code": "    def __getitem__(self, i):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "109", "colour": "orange", "code": "        return self._f(self._a[i])\n", "error": "none", "author": "tom@organisms.be"}, {"index": "110", "colour": "orange", "code": "    def __len__(self):\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "111", "colour": "orange", "code": "        return len(self._a)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "112", "colour": "orange", "code": "    def __iter__(self):\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "113", "colour": "orange", "code": "        i = 0\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "114", "colour": "orange", "code": "        while i < len(self._a):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "115", "colour": "orange", "code": "            yield self._f(self._a[i])\n", "error": "none", "author": "tom@organisms.be"}, {"index": "116", "colour": "orange", "code": "            i += 1\n", "error": "none", "author": "tom@organisms.be"}, {"index": "117", "colour": "orange", "code": "\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "118", "colour": "orange", "code": "### SENTENCE #######################################################################################\n", "error": "none", "author": "tom@organisms.be"}, {"index": "119", "colour": "orange", "code": "\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "120", "colour": "orange", "code": "# The output of parse() is a slash-formatted string (e.g., \"the/DT cat/NN\"),\n", "error": "none", "author": "tom@organisms.be"}, {"index": "121", "colour": "orange", "code": "# so slashes in words themselves are encoded as &slash;\n", "error": "none", "author": "tom@organisms.be"}, {"index": "122", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "123", "colour": "orange", "code": "encode_entities = lambda string: string.replace(\"/\", SLASH)\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "124", "colour": "orange", "code": "decode_entities = lambda string: string.replace(SLASH, \"/\")\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "125", "colour": "orange", "code": "\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "126", "colour": "orange", "code": "#--- WORD ------------------------------------------------------------------------------------------\n", "error": "none", "author": "tom@organisms.be"}, {"index": "127", "colour": "orange", "code": "\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "128", "colour": "blue", "code": "class Word(object):\n", "error": "R", "author": "tom@organisms.be"}, {"index": "129", "colour": "orange", "code": "\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "130", "colour": "blue", "code": "    def __init__(self, sentence, string, lemma=None, type=None, index=0):\n", "error": "R", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "131", "colour": "orange", "code": "        \"\"\" A word in the sentence.\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "132", "colour": "orange", "code": "            - lemma: base form of the word; \"was\" => \"be\".\n", "error": "none", "author": "tom@organisms.be"}, {"index": "133", "colour": "orange", "code": "            -  type: the part-of-speech tag; \"NN\" => a noun.\n", "error": "none", "author": "tom@organisms.be"}, {"index": "134", "colour": "orange", "code": "            - chunk: the chunk (or phrase) this word belongs to.\n", "error": "none", "author": "tom@organisms.be"}, {"index": "135", "colour": "orange", "code": "            - index: the index in the sentence.\n", "error": "none", "author": "tom@organisms.be"}, {"index": "136", "colour": "orange", "code": "        \"\"\"\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "137", "colour": "orange", "code": "        if not isinstance(string, unicode):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "138", "colour": "orange", "code": "            try: string = string.decode(\"utf-8\") # ensure Unicode\n", "error": "none", "author": "tom@organisms.be"}, {"index": "139", "colour": "green", "code": "            except: \n", "error": "W", "author": "tom@organisms.be"}, {"index": "140", "colour": "orange", "code": "                pass\n", "error": "none", "author": "tom@organisms.be"}, {"index": "141", "colour": "orange", "code": "        self.sentence = sentence\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "142", "colour": "orange", "code": "        self.index    = index\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "143", "colour": "orange", "code": "        self.string   = string   # \"was\"\n", "error": "none", "author": "tom@organisms.be"}, {"index": "144", "colour": "orange", "code": "        self.lemma    = lemma    # \"be\"\n", "error": "none", "author": "tom@organisms.be"}, {"index": "145", "colour": "orange", "code": "        self.type     = type     # VB\n", "error": "none", "author": "tom@organisms.be"}, {"index": "146", "colour": "orange", "code": "        self.chunk    = None     # Chunk object this word belongs to (i.e., a VP).\n", "error": "none", "author": "tom@organisms.be"}, {"index": "147", "colour": "orange", "code": "        self.pnp      = None     # PNP chunk object this word belongs to.\n", "error": "none", "author": "tom@organisms.be"}, {"index": "148", "colour": "orange", "code": "                                 # word.chunk and word.pnp are set in chunk.append().\n", "error": "none", "author": "tom@organisms.be"}, {"index": "149", "colour": "orange", "code": "        self._custom_tags = None # Tags object, created on request.\n", "error": "none", "author": "tom@organisms.be"}, {"index": "150", "colour": "orange", "code": "    \n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "151", "colour": "orange", "code": "    def copy(self, chunk=None, pnp=None):\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "152", "colour": "orange", "code": "        w = Word(\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "153", "colour": "orange", "code": "            self.sentence,\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "154", "colour": "orange", "code": "            self.string,\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "155", "colour": "orange", "code": "            self.lemma,\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "156", "colour": "orange", "code": "            self.type,\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "157", "colour": "orange", "code": "            self.index\n", "error": "none", "author": "tom@organisms.be"}, {"index": "158", "colour": "orange", "code": "        )\n", "error": "none", "author": "tom@organisms.be"}, {"index": "159", "colour": "orange", "code": "        w.chunk = chunk\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "160", "colour": "orange", "code": "        w.pnp = pnp\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "161", "colour": "orange", "code": "        if self._custom_tags:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "162", "colour": "green", "code": "            w._custom_tags = Tags(w, items=self._custom_tags)\n", "error": "W", "author": "tom@organisms.be"}, {"index": "163", "colour": "orange", "code": "        return w\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "164", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "165", "colour": "orange", "code": "    def _get_tag(self):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "166", "colour": "orange", "code": "        return self.type    \n", "error": "none", "author": "tom@organisms.be"}, {"index": "167", "colour": "orange", "code": "    def _set_tag(self, v):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "168", "colour": "orange", "code": "        self.type = v\n", "error": "none", "author": "tom@organisms.be"}, {"index": "169", "colour": "orange", "code": "        \n", "error": "none", "author": "tom@organisms.be"}, {"index": "170", "colour": "orange", "code": "    tag = pos = part_of_speech = property(_get_tag, _set_tag)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "171", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "172", "colour": "orange", "code": "    @property\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "173", "colour": "orange", "code": "    def phrase(self):\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "174", "colour": "orange", "code": "        return self.chunk\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "175", "colour": "orange", "code": "    \n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "176", "colour": "orange", "code": "    @property\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "177", "colour": "orange", "code": "    def prepositional_phrase(self):\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "178", "colour": "orange", "code": "        return self.pnp\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "179", "colour": "orange", "code": "        \n", "error": "none", "author": "tom@organisms.be"}, {"index": "180", "colour": "orange", "code": "    prepositional_noun_phrase = prepositional_phrase\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "181", "colour": "orange", "code": "\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "182", "colour": "orange", "code": "    @property\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "183", "colour": "orange", "code": "    def tags(self):\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "184", "colour": "orange", "code": "        \"\"\" Yields a list of all the token tags as they appeared when the word was parsed.\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "185", "colour": "orange", "code": "            For example: [\"was\", \"VBD\", \"B-VP\", \"O\", \"VP-1\", \"A1\", \"be\"]\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "186", "colour": "orange", "code": "        \"\"\"\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "187", "colour": "orange", "code": "        # See also. Sentence.__repr__().\n", "error": "none", "author": "tom@organisms.be"}, {"index": "188", "colour": "green", "code": "        ch, I,O,B = self.chunk, INSIDE+\"-\", OUTSIDE, BEGIN+\"-\"\n", "error": "W", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "189", "colour": "orange", "code": "        tags = [OUTSIDE for i in range(len(self.sentence.token))]\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "190", "colour": "orange", "code": "        for i, tag in enumerate(self.sentence.token): # Default: [WORD, POS, CHUNK, PNP, RELATION, ANCHOR, LEMMA]\n", "error": "none", "author": "tom@organisms.be"}, {"index": "191", "colour": "orange", "code": "            if tag == WORD:\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "192", "colour": "orange", "code": "                tags[i] = encode_entities(self.string)\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "193", "colour": "orange", "code": "            elif tag == POS or tag == \"pos\" and self.type:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "194", "colour": "orange", "code": "                tags[i] = self.type\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "195", "colour": "orange", "code": "            elif tag == CHUNK and ch and ch.type:\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "196", "colour": "orange", "code": "                tags[i] = (self == ch[0] and B or I) + ch.type\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "197", "colour": "orange", "code": "            elif tag == PNP and self.pnp:\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "198", "colour": "orange", "code": "                tags[i] = (self == self.pnp[0] and B or I) + \"PNP\"\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "199", "colour": "orange", "code": "            elif tag == REL and ch and len(ch.relations) > 0:\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "200", "colour": "orange", "code": "                tags[i] = [\"-\".join([str(x) for x in [ch.type]+list(reversed(r)) if x]) for r in ch.relations]\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "201", "colour": "orange", "code": "                tags[i] = \"*\".join(tags[i])\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "202", "colour": "orange", "code": "            elif tag == ANCHOR and ch:\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "203", "colour": "orange", "code": "                tags[i] = ch.anchor_id or OUTSIDE\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "204", "colour": "orange", "code": "            elif tag == LEMMA:\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "205", "colour": "orange", "code": "                tags[i] = encode_entities(self.lemma or \"\")\n", "error": "none", "author": "tom@organisms.be"}, {"index": "206", "colour": "orange", "code": "            elif tag in self.custom_tags:\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "207", "colour": "orange", "code": "                tags[i] = self.custom_tags.get(tag) or OUTSIDE\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "208", "colour": "orange", "code": "        return tags\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "209", "colour": "orange", "code": "    \n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "210", "colour": "orange", "code": "    @property\n", "error": "none", "author": "tom@organisms.be"}, {"index": "211", "colour": "orange", "code": "    def custom_tags(self):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "212", "colour": "orange", "code": "        if not self._custom_tags: self._custom_tags = Tags(self)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "213", "colour": "orange", "code": "        return self._custom_tags\n", "error": "none", "author": "tom@organisms.be"}, {"index": "214", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "215", "colour": "green", "code": "    def next(self, type=None):\n", "error": "W", "author": "tom@organisms.be"}, {"index": "216", "colour": "orange", "code": "        \"\"\" Returns the next word in the sentence with the given type.\n", "error": "none", "author": "tom@organisms.be"}, {"index": "217", "colour": "orange", "code": "        \"\"\"\n", "error": "none", "author": "tom@organisms.be"}, {"index": "218", "colour": "orange", "code": "        i = self.index + 1\n", "error": "none", "author": "tom@organisms.be"}, {"index": "219", "colour": "orange", "code": "        s = self.sentence\n", "error": "none", "author": "tom@organisms.be"}, {"index": "220", "colour": "orange", "code": "        while i < len(s):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "221", "colour": "orange", "code": "            if type in (s[i].type, None):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "222", "colour": "orange", "code": "                return s[i]\n", "error": "none", "author": "tom@organisms.be"}, {"index": "223", "colour": "orange", "code": "            i += 1\n", "error": "none", "author": "tom@organisms.be"}, {"index": "224", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "225", "colour": "green", "code": "    def previous(self, type=None):\n", "error": "W", "author": "tom@organisms.be"}, {"index": "226", "colour": "orange", "code": "        \"\"\" Returns the next previous word in the sentence with the given type.\n", "error": "none", "author": "tom@organisms.be"}, {"index": "227", "colour": "orange", "code": "        \"\"\"\n", "error": "none", "author": "tom@organisms.be"}, {"index": "228", "colour": "orange", "code": "        i = self.index - 1\n", "error": "none", "author": "tom@organisms.be"}, {"index": "229", "colour": "orange", "code": "        s = self.sentence\n", "error": "none", "author": "tom@organisms.be"}, {"index": "230", "colour": "orange", "code": "        while i > 0:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "231", "colour": "orange", "code": "            if type in (s[i].type, None):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "232", "colour": "orange", "code": "                return s[i]\n", "error": "none", "author": "tom@organisms.be"}, {"index": "233", "colour": "orange", "code": "            i -= 1\n", "error": "none", "author": "tom@organisms.be"}, {"index": "234", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "235", "colour": "orange", "code": "    # User-defined tags are available as Word.[tag] attributes.\n", "error": "none", "author": "tom@organisms.be"}, {"index": "236", "colour": "orange", "code": "    def __getattr__(self, tag):\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "237", "colour": "orange", "code": "        d = self.__dict__.get(\"_custom_tags\", None)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "238", "colour": "orange", "code": "        if d and tag in d:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "239", "colour": "orange", "code": "            return d[tag]\n", "error": "none", "author": "tom@organisms.be"}, {"index": "240", "colour": "orange", "code": "        raise AttributeError(\"Word instance has no attribute '%s'\" % tag)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "241", "colour": "orange", "code": "\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "242", "colour": "orange", "code": "    # Word.string and unicode(Word) are Unicode strings.\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "243", "colour": "orange", "code": "    # repr(Word) is a Python string (with Unicode characters encoded).\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "244", "colour": "orange", "code": "    def __unicode__(self):\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "245", "colour": "orange", "code": "        return self.string\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "246", "colour": "orange", "code": "    def __repr__(self):\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "247", "colour": "orange", "code": "        return \"Word(%s)\" % repr(\"%s/%s\" % (\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "248", "colour": "orange", "code": "            encode_entities(self.string),\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "249", "colour": "orange", "code": "            self.type is not None and self.type or OUTSIDE))\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "250", "colour": "orange", "code": "\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "251", "colour": "orange", "code": "    def __eq__(self, word):\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "252", "colour": "orange", "code": "        return id(self) == id(word)\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "253", "colour": "orange", "code": "    def __ne__(self, word):\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "254", "colour": "orange", "code": "        return id(self) != id(word)\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "255", "colour": "orange", "code": "\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "256", "colour": "orange", "code": "class Tags(dict):\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "257", "colour": "orange", "code": "    \n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "258", "colour": "green", "code": "    def __init__(self, word, items=[]):\n", "error": "W", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "259", "colour": "orange", "code": "        \"\"\" A dictionary of custom word tags.\n", "error": "none", "author": "tom@organisms.be"}, {"index": "260", "colour": "orange", "code": "            A word may be annotated with its part-of-speech tag (e.g., \"cat/NN\"), \n", "error": "none", "author": "tom@organisms.be"}, {"index": "261", "colour": "orange", "code": "            phrase tag (e.g., \"cat/NN/NP\"), the prepositional noun phrase it is part of etc.\n", "error": "none", "author": "tom@organisms.be"}, {"index": "262", "colour": "orange", "code": "            An example of an extra custom slot is its semantic type, \n", "error": "none", "author": "tom@organisms.be"}, {"index": "263", "colour": "orange", "code": "            e.g., gene type, topic, and so on: \"cat/NN/NP/genus_felis\"\n", "error": "none", "author": "tom@organisms.be"}, {"index": "264", "colour": "orange", "code": "        \"\"\"\n", "error": "none", "author": "tom@organisms.be"}, {"index": "265", "colour": "orange", "code": "        if items:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "266", "colour": "orange", "code": "            dict.__init__(self, items)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "267", "colour": "orange", "code": "        self.word = word\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "268", "colour": "orange", "code": "    \n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "269", "colour": "orange", "code": "    def __setitem__(self, k, v):\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "270", "colour": "orange", "code": "        # Ensure that the custom tag is also in Word.sentence.token,\n", "error": "none", "author": "tom@organisms.be"}, {"index": "271", "colour": "orange", "code": "        # so that it is not forgotten when exporting or importing XML.\n", "error": "none", "author": "tom@organisms.be"}, {"index": "272", "colour": "orange", "code": "        dict.__setitem__(self, k, v)\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "273", "colour": "orange", "code": "        if k not in reversed(self.word.sentence.token): \n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "274", "colour": "orange", "code": "            self.word.sentence.token.append(k)\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "275", "colour": "orange", "code": "            \n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "276", "colour": "orange", "code": "    def setdefault(self, k, v):\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "277", "colour": "orange", "code": "        if k not in self: \n", "error": "none", "author": "tom@organisms.be"}, {"index": "278", "colour": "orange", "code": "            self.__setitem__(k, v); return self[k]\n", "error": "none", "author": "tom@organisms.be"}, {"index": "279", "colour": "orange", "code": "\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "280", "colour": "orange", "code": "#--- CHUNK -----------------------------------------------------------------------------------------\n", "error": "none", "author": "tom@organisms.be"}, {"index": "281", "colour": "orange", "code": "\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "282", "colour": "blue", "code": "class Chunk(object):\n", "error": "R", "author": "tom@organisms.be"}, {"index": "283", "colour": "orange", "code": "    \n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "284", "colour": "blue", "code": "    def __init__(self, sentence, words=[], type=None, role=None, relation=None):\n", "error": "R", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "285", "colour": "orange", "code": "        \"\"\" A list of words that make up a phrase in the sentence.\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "286", "colour": "orange", "code": "            - type: the phrase tag; \"NP\" => a noun phrase (e.g., \"the black cat\").\n", "error": "none", "author": "tom@organisms.be"}, {"index": "287", "colour": "orange", "code": "            - role: the function of the phrase; \"SBJ\" => sentence subject.\n", "error": "none", "author": "tom@organisms.be"}, {"index": "288", "colour": "orange", "code": "            - relation: an id shared with other phrases, linking subject to object in the sentence.\n", "error": "none", "author": "tom@organisms.be"}, {"index": "289", "colour": "orange", "code": "        \"\"\"\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "290", "colour": "orange", "code": "        # A chunk can have multiple roles or relations in the sentence,\n", "error": "none", "author": "tom@organisms.be"}, {"index": "291", "colour": "orange", "code": "        # so role and relation can also be given as lists.\n", "error": "none", "author": "tom@organisms.be"}, {"index": "292", "colour": "orange", "code": "        b1 = isinstance(relation, (list, tuple))\n", "error": "none", "author": "tom@organisms.be"}, {"index": "293", "colour": "orange", "code": "        b2 = isinstance(role, (list, tuple))\n", "error": "none", "author": "tom@organisms.be"}, {"index": "294", "colour": "orange", "code": "        if not b1 and not b2:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "295", "colour": "orange", "code": "            r = [(relation, role)]\n", "error": "none", "author": "tom@organisms.be"}, {"index": "296", "colour": "orange", "code": "        elif b1 and b2:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "297", "colour": "orange", "code": "            r = zip(relation, role)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "298", "colour": "orange", "code": "        elif b1:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "299", "colour": "orange", "code": "            r = zip(relation, [role] * len(relation))\n", "error": "none", "author": "tom@organisms.be"}, {"index": "300", "colour": "orange", "code": "        elif b2:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "301", "colour": "orange", "code": "            r = zip([relation] * len(role), role)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "302", "colour": "orange", "code": "        r = [(a, b) for a, b in r if a is not None or b is not None]\n", "error": "none", "author": "tom@organisms.be"}, {"index": "303", "colour": "orange", "code": "        self.sentence      = sentence\n", "error": "none", "author": "tom@organisms.be"}, {"index": "304", "colour": "orange", "code": "        self.words         = []\n", "error": "none", "author": "tom@organisms.be"}, {"index": "305", "colour": "orange", "code": "        self.type          = type  # NP, VP, ADJP ...\n", "error": "none", "author": "tom@organisms.be"}, {"index": "306", "colour": "orange", "code": "        self.relations     = r     # NP-SBJ-1 => [(1, SBJ)]\n", "error": "none", "author": "tom@organisms.be"}, {"index": "307", "colour": "orange", "code": "        self.pnp           = None  # PNP chunk object this chunk belongs to.\n", "error": "none", "author": "tom@organisms.be"}, {"index": "308", "colour": "orange", "code": "        self.anchor        = None  # PNP chunk's anchor.\n", "error": "none", "author": "tom@organisms.be"}, {"index": "309", "colour": "orange", "code": "        self.attachments   = []    # PNP chunks attached to this anchor.\n", "error": "none", "author": "tom@organisms.be"}, {"index": "310", "colour": "orange", "code": "        self._conjunctions = None  # Conjunctions object, created on request.\n", "error": "none", "author": "tom@organisms.be"}, {"index": "311", "colour": "orange", "code": "        self._modifiers    = None\n", "error": "none", "author": "tom@organisms.be"}, {"index": "312", "colour": "orange", "code": "        self.extend(words)\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "313", "colour": "orange", "code": "\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "314", "colour": "orange", "code": "    def extend(self, words):\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "315", "colour": "orange", "code": "        for w in words: \n", "error": "none", "author": "tom@organisms.be"}, {"index": "316", "colour": "orange", "code": "            self.append(w)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "317", "colour": "orange", "code": "    \n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "318", "colour": "orange", "code": "    def append(self, word):\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "319", "colour": "orange", "code": "        self.words.append(word)\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "320", "colour": "orange", "code": "        word.chunk = self\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "321", "colour": "orange", "code": "        \n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "322", "colour": "orange", "code": "    def __getitem__(self, index):\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "323", "colour": "orange", "code": "        return self.words[index]\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "324", "colour": "orange", "code": "    def __len__(self):\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "325", "colour": "orange", "code": "        return len(self.words)\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "326", "colour": "orange", "code": "    def __iter__(self):\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "327", "colour": "orange", "code": "        return self.words.__iter__()\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "328", "colour": "orange", "code": "\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "329", "colour": "orange", "code": "    def _get_tag(self):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "330", "colour": "orange", "code": "        return self.type\n", "error": "none", "author": "tom@organisms.be"}, {"index": "331", "colour": "orange", "code": "    def _set_tag(self, v):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "332", "colour": "orange", "code": "        self.type = v\n", "error": "none", "author": "tom@organisms.be"}, {"index": "333", "colour": "orange", "code": "        \n", "error": "none", "author": "tom@organisms.be"}, {"index": "334", "colour": "orange", "code": "    tag = pos = part_of_speech = property(_get_tag, _set_tag)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "335", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "336", "colour": "orange", "code": "    @property\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "337", "colour": "orange", "code": "    def start(self):\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "338", "colour": "orange", "code": "        return self.words[0].index\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "339", "colour": "orange", "code": "    @property\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "340", "colour": "orange", "code": "    def stop(self):\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "341", "colour": "orange", "code": "        return self.words[-1].index + 1\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "342", "colour": "orange", "code": "    @property\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "343", "colour": "orange", "code": "    def range(self):\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "344", "colour": "orange", "code": "        return range(self.start, self.stop)\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "345", "colour": "orange", "code": "    @property\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "346", "colour": "orange", "code": "    def span(self):\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "347", "colour": "orange", "code": "        return (self.start, self.stop)\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "348", "colour": "orange", "code": "\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "349", "colour": "orange", "code": "    @property\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "350", "colour": "orange", "code": "    def lemmata(self):\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "351", "colour": "orange", "code": "        return [word.lemma for word in self.words]\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "352", "colour": "orange", "code": "\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "353", "colour": "orange", "code": "    @property\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "354", "colour": "orange", "code": "    def tagged(self):\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "355", "colour": "orange", "code": "        return [(word.string, word.type) for word in self.words]\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "356", "colour": "orange", "code": "    \n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "357", "colour": "orange", "code": "    @property\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "358", "colour": "orange", "code": "    def head(self):\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "359", "colour": "orange", "code": "        \"\"\" Yields the head of the chunk (usually, the last word in the chunk).\n", "error": "none", "author": "tom@organisms.be"}, {"index": "360", "colour": "orange", "code": "        \"\"\"\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "361", "colour": "orange", "code": "        if self.type == \"NP\" and any(w.type.startswith(\"NNP\") for w in self):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "362", "colour": "orange", "code": "            w = find(lambda w: w.type.startswith(\"NNP\"), reversed(self))\n", "error": "none", "author": "tom@organisms.be"}, {"index": "363", "colour": "orange", "code": "        elif self.type == \"NP\":  # \"the cat\" => \"cat\"\n", "error": "none", "author": "tom@organisms.be"}, {"index": "364", "colour": "orange", "code": "            w = find(lambda w: w.type.startswith(\"NN\"), reversed(self))\n", "error": "none", "author": "tom@organisms.be"}, {"index": "365", "colour": "orange", "code": "        elif self.type == \"VP\":  # \"is watching\" => \"watching\"\n", "error": "none", "author": "tom@organisms.be"}, {"index": "366", "colour": "orange", "code": "            w = find(lambda w: w.type.startswith(\"VB\"), reversed(self))\n", "error": "none", "author": "tom@organisms.be"}, {"index": "367", "colour": "orange", "code": "        elif self.type == \"PP\":  # \"from up on\" => \"from\"\n", "error": "none", "author": "tom@organisms.be"}, {"index": "368", "colour": "orange", "code": "            w = find(lambda w: w.type.startswith((\"IN\", \"PP\")), self)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "369", "colour": "orange", "code": "        elif self.type == \"PNP\": # \"from up on the roof\" => \"roof\"\n", "error": "none", "author": "tom@organisms.be"}, {"index": "370", "colour": "orange", "code": "            w = find(lambda w: w.type.startswith(\"NN\"), reversed(self))\n", "error": "none", "author": "tom@organisms.be"}, {"index": "371", "colour": "orange", "code": "        else:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "372", "colour": "orange", "code": "            w = None\n", "error": "none", "author": "tom@organisms.be"}, {"index": "373", "colour": "orange", "code": "        if w is None:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "374", "colour": "orange", "code": "            w = self[-1]\n", "error": "none", "author": "tom@organisms.be"}, {"index": "375", "colour": "orange", "code": "        return w\n", "error": "none", "author": "tom@organisms.be"}, {"index": "376", "colour": "orange", "code": "\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "377", "colour": "orange", "code": "    @property\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "378", "colour": "orange", "code": "    def relation(self):\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "379", "colour": "orange", "code": "        \"\"\" Yields the first relation id of the chunk.\n", "error": "none", "author": "tom@organisms.be"}, {"index": "380", "colour": "orange", "code": "        \"\"\"\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "381", "colour": "orange", "code": "        # [(2,OBJ), (3,OBJ)])] => 2\n", "error": "none", "author": "tom@organisms.be"}, {"index": "382", "colour": "orange", "code": "        return len(self.relations) > 0 and self.relations[0][0] or None\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "383", "colour": "orange", "code": "        \n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "384", "colour": "orange", "code": "    @property\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "385", "colour": "orange", "code": "    def role(self):\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "386", "colour": "orange", "code": "        \"\"\" Yields the first role of the chunk (SBJ, OBJ, ...).\n", "error": "none", "author": "tom@organisms.be"}, {"index": "387", "colour": "orange", "code": "        \"\"\"\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "388", "colour": "orange", "code": "        # [(1,SBJ), (1,OBJ)])] => SBJ\n", "error": "none", "author": "tom@organisms.be"}, {"index": "389", "colour": "orange", "code": "        return len(self.relations) > 0 and self.relations[0][1] or None\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "390", "colour": "orange", "code": "\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "391", "colour": "orange", "code": "    @property\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "392", "colour": "orange", "code": "    def subject(self):\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "393", "colour": "orange", "code": "        ch = self.sentence.relations[\"SBJ\"].get(self.relation, None)\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "394", "colour": "orange", "code": "        if ch != self: \n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "395", "colour": "orange", "code": "            return ch\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "396", "colour": "orange", "code": "    @property\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "397", "colour": "orange", "code": "    def object(self):\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "398", "colour": "orange", "code": "        ch = self.sentence.relations[\"OBJ\"].get(self.relation, None)\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "399", "colour": "orange", "code": "        if ch != self: \n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "400", "colour": "orange", "code": "            return ch\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "401", "colour": "orange", "code": "    @property\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "402", "colour": "orange", "code": "    def verb(self):\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "403", "colour": "orange", "code": "        ch = self.sentence.relations[\"VP\"].get(self.relation, None)\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "404", "colour": "orange", "code": "        if ch != self: \n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "405", "colour": "orange", "code": "            return ch\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "406", "colour": "orange", "code": "    @property\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "407", "colour": "orange", "code": "    def related(self):\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "408", "colour": "orange", "code": "        \"\"\" Yields a list of all chunks in the sentence with the same relation id.\n", "error": "none", "author": "tom@organisms.be"}, {"index": "409", "colour": "orange", "code": "        \"\"\"\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "410", "colour": "orange", "code": "        return [ch for ch in self.sentence.chunks \n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "411", "colour": "orange", "code": "                    if ch != self and intersects(unzip(0, ch.relations), unzip(0, self.relations))]\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "412", "colour": "orange", "code": "\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "413", "colour": "orange", "code": "    @property\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "414", "colour": "orange", "code": "    def prepositional_phrase(self):\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "415", "colour": "orange", "code": "        return self.pnp\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "416", "colour": "orange", "code": "        \n", "error": "none", "author": "tom@organisms.be"}, {"index": "417", "colour": "orange", "code": "    prepositional_noun_phrase = prepositional_phrase\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "418", "colour": "orange", "code": "\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "419", "colour": "orange", "code": "    @property\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "420", "colour": "orange", "code": "    def anchor_id(self):\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "421", "colour": "orange", "code": "        \"\"\" Yields the anchor tag as parsed from the original token.\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "422", "colour": "orange", "code": "            Chunks that are anchors have a tag with an \"A\" prefix (e.g., \"A1\").\n", "error": "none", "author": "tom@organisms.be"}, {"index": "423", "colour": "orange", "code": "            Chunks that are PNP attachmens (or chunks inside a PNP) have \"P\" (e.g., \"P1\").\n", "error": "none", "author": "tom@organisms.be"}, {"index": "424", "colour": "orange", "code": "            Chunks inside a PNP can be both anchor and attachment (e.g., \"P1-A2\"),\n", "error": "none", "author": "tom@organisms.be"}, {"index": "425", "colour": "orange", "code": "            as in: \"clawed/A1 at/P1 mice/P1-A2 in/P2 the/P2 wall/P2\"\n", "error": "none", "author": "tom@organisms.be"}, {"index": "426", "colour": "orange", "code": "        \"\"\"\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "427", "colour": "green", "code": "        id = \"\"\n", "error": "W", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "428", "colour": "green", "code": "        f = lambda ch: filter(lambda k: self.sentence._anchors[k] == ch, self.sentence._anchors)\n", "error": "W", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "429", "colour": "orange", "code": "        if self.pnp and self.pnp.anchor:\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "430", "colour": "orange", "code": "            id += \"-\" + \"-\".join(f(self.pnp))\n", "error": "none", "author": "tom@organisms.be"}, {"index": "431", "colour": "orange", "code": "        if self.anchor:\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "432", "colour": "orange", "code": "            id += \"-\" + \"-\".join(f(self))\n", "error": "none", "author": "tom@organisms.be"}, {"index": "433", "colour": "orange", "code": "        if self.attachments:\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "434", "colour": "orange", "code": "            id += \"-\" + \"-\".join(f(self))\n", "error": "none", "author": "tom@organisms.be"}, {"index": "435", "colour": "orange", "code": "        return id.strip(\"-\") or None\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "436", "colour": "orange", "code": "\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "437", "colour": "orange", "code": "    @property\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "438", "colour": "orange", "code": "    def conjunctions(self):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "439", "colour": "orange", "code": "        if not self._conjunctions: self._conjunctions = Conjunctions(self)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "440", "colour": "orange", "code": "        return self._conjunctions\n", "error": "none", "author": "tom@organisms.be"}, {"index": "441", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "442", "colour": "orange", "code": "    @property\n", "error": "none", "author": "tom@organisms.be"}, {"index": "443", "colour": "orange", "code": "    def modifiers(self):\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "444", "colour": "orange", "code": "        \"\"\" For verb phrases (VP), yields a list of the nearest adjectives and adverbs.\n", "error": "none", "author": "tom@organisms.be"}, {"index": "445", "colour": "orange", "code": "        \"\"\"\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "446", "colour": "orange", "code": "        if self._modifiers is None:\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "447", "colour": "orange", "code": "            # Iterate over all the chunks and attach modifiers to their VP-anchor.\n", "error": "none", "author": "tom@organisms.be"}, {"index": "448", "colour": "orange", "code": "            is_modifier = lambda ch: ch.type in (\"ADJP\", \"ADVP\") and ch.relation is None\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "449", "colour": "orange", "code": "            for chunk in self.sentence.chunks:\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "450", "colour": "green", "code": "                chunk._modifiers = []\n", "error": "W", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "451", "colour": "green", "code": "            for chunk in filter(is_modifier, self.sentence.chunks):\n", "error": "W", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "452", "colour": "orange", "code": "                anchor = chunk.nearest(\"VP\")\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "453", "colour": "green", "code": "                if anchor: anchor._modifiers.append(chunk)\n", "error": "W", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "454", "colour": "orange", "code": "        return self._modifiers\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "455", "colour": "orange", "code": "\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "456", "colour": "green", "code": "    def nearest(self, type=\"VP\"):\n", "error": "W", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "457", "colour": "orange", "code": "        \"\"\" Returns the nearest chunk in the sentence with the given type.\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "458", "colour": "orange", "code": "            This can be used (for example) to find adverbs and adjectives related to verbs,\n", "error": "none", "author": "tom@organisms.be"}, {"index": "459", "colour": "orange", "code": "            as in: \"the cat is ravenous\" => is what? => \"ravenous\".\n", "error": "none", "author": "tom@organisms.be"}, {"index": "460", "colour": "orange", "code": "        \"\"\"\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "461", "colour": "orange", "code": "        candidate, d = None, len(self.sentence.chunks)\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "462", "colour": "orange", "code": "        if isinstance(self, PNPChunk):\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "463", "colour": "red", "code": "            i = self.sentence.chunks.index(self.chunks[0])\n", "error": "E", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "464", "colour": "orange", "code": "        else:\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "465", "colour": "orange", "code": "            i = self.sentence.chunks.index(self)\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "466", "colour": "orange", "code": "        for j, chunk in enumerate(self.sentence.chunks):\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "467", "colour": "orange", "code": "            if chunk.type.startswith(type) and abs(i-j) < d:\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "468", "colour": "orange", "code": "                candidate, d = chunk, abs(i-j)\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "469", "colour": "orange", "code": "        return candidate\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "470", "colour": "orange", "code": "        \n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "471", "colour": "green", "code": "    def next(self, type=None):\n", "error": "W", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "472", "colour": "orange", "code": "        \"\"\" Returns the next chunk in the sentence with the given type.\n", "error": "none", "author": "tom@organisms.be"}, {"index": "473", "colour": "orange", "code": "        \"\"\"\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "474", "colour": "orange", "code": "        i = self.stop\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "475", "colour": "orange", "code": "        s = self.sentence\n", "error": "none", "author": "tom@organisms.be"}, {"index": "476", "colour": "orange", "code": "        while i < len(s):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "477", "colour": "orange", "code": "            if s[i].chunk is not None and type in (s[i].chunk.type, None):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "478", "colour": "orange", "code": "                return s[i].chunk\n", "error": "none", "author": "tom@organisms.be"}, {"index": "479", "colour": "orange", "code": "            i += 1\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "480", "colour": "orange", "code": "\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "481", "colour": "green", "code": "    def previous(self, type=None):\n", "error": "W", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "482", "colour": "orange", "code": "        \"\"\" Returns the next previous chunk in the sentence with the given type.\n", "error": "none", "author": "tom@organisms.be"}, {"index": "483", "colour": "orange", "code": "        \"\"\"\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "484", "colour": "orange", "code": "        i = self.start - 1\n", "error": "none", "author": "tom@organisms.be"}, {"index": "485", "colour": "orange", "code": "        s = self.sentence\n", "error": "none", "author": "tom@organisms.be"}, {"index": "486", "colour": "orange", "code": "        while i > 0:\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "487", "colour": "orange", "code": "            if s[i].chunk is not None and type in (s[i].chunk.type, None):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "488", "colour": "orange", "code": "                return s[i].chunk\n", "error": "none", "author": "tom@organisms.be"}, {"index": "489", "colour": "orange", "code": "            i -= 1\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "490", "colour": "orange", "code": "\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "491", "colour": "orange", "code": "    # Chunk.string and unicode(Chunk) are Unicode strings.\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "492", "colour": "orange", "code": "    # repr(Chunk) is a Python string (with Unicode characters encoded).\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "493", "colour": "orange", "code": "    @property\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "494", "colour": "orange", "code": "    def string(self):\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "495", "colour": "orange", "code": "        return u\" \".join(word.string for word in self.words)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "496", "colour": "orange", "code": "    def __unicode__(self):\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "497", "colour": "orange", "code": "        return self.string\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "498", "colour": "orange", "code": "    def __repr__(self):\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "499", "colour": "orange", "code": "        return \"Chunk(%s)\" %  repr(\"%s/%s%s%s\") % (\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "500", "colour": "orange", "code": "                self.string,\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "501", "colour": "orange", "code": "                self.type is not None and self.type or OUTSIDE, \n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "502", "colour": "orange", "code": "                self.role is not None and (\"-\" + self.role) or \"\",\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "503", "colour": "orange", "code": "            self.relation is not None and (\"-\" + str(self.relation)) or \"\")\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "504", "colour": "orange", "code": "    \n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "505", "colour": "orange", "code": "    def __eq__(self, chunk):\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "506", "colour": "orange", "code": "        return id(self) == id(chunk)\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "507", "colour": "orange", "code": "    def __ne__(self, chunk):\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "508", "colour": "orange", "code": "        return id(self) != id(chunk)\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "509", "colour": "orange", "code": "\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "510", "colour": "orange", "code": "# Chinks are non-chunks,\n", "error": "none", "author": "tom@organisms.be"}, {"index": "511", "colour": "orange", "code": "# see also the chunked() function:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "512", "colour": "blue", "code": "class Chink(Chunk):\n", "error": "R", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "513", "colour": "orange", "code": "    def __repr__(self):\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "514", "colour": "orange", "code": "        return Chunk.__repr__(self).replace(\"Chunk(\", \"Chink(\", 1)\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "515", "colour": "orange", "code": "\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "516", "colour": "orange", "code": "#--- PNP CHUNK -------------------------------------------------------------------------------------\n", "error": "none", "author": "tom@organisms.be"}, {"index": "517", "colour": "orange", "code": "\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "518", "colour": "blue", "code": "class PNPChunk(Chunk):\n", "error": "R", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "519", "colour": "orange", "code": "\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "520", "colour": "orange", "code": "    def __init__(self, *args, **kwargs):\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "521", "colour": "orange", "code": "        \"\"\" A chunk of chunks that make up a prepositional noun phrase (i.e., PP + NP).\n", "error": "none", "author": "tom@organisms.be"}, {"index": "522", "colour": "orange", "code": "            When the output of the parser includes PP-attachment,\n", "error": "none", "author": "tom@organisms.be"}, {"index": "523", "colour": "orange", "code": "            PNPChunck.anchor will yield the chunk that is clarified by the preposition.\n", "error": "none", "author": "tom@organisms.be"}, {"index": "524", "colour": "orange", "code": "            For example: \"the cat went [for the mouse] [with its claws]\":\n", "error": "none", "author": "tom@organisms.be"}, {"index": "525", "colour": "orange", "code": "            - [went] what? => for the mouse,\n", "error": "none", "author": "tom@organisms.be"}, {"index": "526", "colour": "orange", "code": "            - [went] how? => with its claws.\n", "error": "none", "author": "tom@organisms.be"}, {"index": "527", "colour": "orange", "code": "        \"\"\"\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "528", "colour": "orange", "code": "        self.anchor = None # The anchor chunk (e.g., \"for the mouse\" => \"went\").\n", "error": "none", "author": "tom@organisms.be"}, {"index": "529", "colour": "orange", "code": "        self.chunks = []   # List of chunks in the prepositional noun phrase.\n", "error": "none", "author": "tom@organisms.be"}, {"index": "530", "colour": "orange", "code": "        Chunk.__init__(self, *args, **kwargs)\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "531", "colour": "orange", "code": "\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "532", "colour": "orange", "code": "    def append(self, word):\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "533", "colour": "orange", "code": "        self.words.append(word)\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "534", "colour": "orange", "code": "        word.pnp = self\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "535", "colour": "orange", "code": "        if word.chunk is not None:\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "536", "colour": "orange", "code": "            word.chunk.pnp = self\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "537", "colour": "orange", "code": "            if word.chunk not in self.chunks:\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "538", "colour": "orange", "code": "                self.chunks.append(word.chunk)\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "539", "colour": "orange", "code": "\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "540", "colour": "orange", "code": "    @property\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "541", "colour": "orange", "code": "    def preposition(self):\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "542", "colour": "orange", "code": "        \"\"\" Yields the first chunk in the prepositional noun phrase, usually a PP-chunk.\n", "error": "none", "author": "tom@organisms.be"}, {"index": "543", "colour": "orange", "code": "            PP-chunks contain words such as \"for\", \"with\", \"in\", ...\n", "error": "none", "author": "tom@organisms.be"}, {"index": "544", "colour": "orange", "code": "        \"\"\"\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "545", "colour": "orange", "code": "        return self.chunks[0]\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "546", "colour": "orange", "code": "        \n", "error": "none", "author": "tom@organisms.be"}, {"index": "547", "colour": "orange", "code": "    pp = preposition\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "548", "colour": "orange", "code": "\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "549", "colour": "orange", "code": "    @property\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "550", "colour": "orange", "code": "    def phrases(self):\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "551", "colour": "orange", "code": "        return self.chunks\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "552", "colour": "orange", "code": "\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "553", "colour": "orange", "code": "    def guess_anchor(self):\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "554", "colour": "orange", "code": "        \"\"\" Returns an anchor chunk for this prepositional noun phrase (without a PP-attacher).\n", "error": "none", "author": "tom@organisms.be"}, {"index": "555", "colour": "orange", "code": "            Often, the nearest verb phrase is a good candidate.\n", "error": "none", "author": "tom@organisms.be"}, {"index": "556", "colour": "orange", "code": "        \"\"\"\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "557", "colour": "orange", "code": "        return self.nearest(\"VP\")\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "558", "colour": "orange", "code": "\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "559", "colour": "orange", "code": "#--- CONJUNCTION -----------------------------------------------------------------------------------\n", "error": "none", "author": "tom@organisms.be"}, {"index": "560", "colour": "orange", "code": "\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "561", "colour": "orange", "code": "CONJUNCT = AND = \"AND\"\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "562", "colour": "orange", "code": "DISJUNCT = OR  = \"OR\"\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "563", "colour": "orange", "code": "\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "564", "colour": "orange", "code": "class Conjunctions(list):\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "565", "colour": "orange", "code": "    \n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "566", "colour": "green", "code": "    def __init__(self, chunk):\n", "error": "W", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "567", "colour": "orange", "code": "        \"\"\" Chunk.conjunctions is a list of other chunks participating in a conjunction.\n", "error": "none", "author": "tom@organisms.be"}, {"index": "568", "colour": "orange", "code": "            Each item in the list is a (chunk, conjunction)-tuple, with conjunction either AND or OR.\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "569", "colour": "orange", "code": "        \"\"\"\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "570", "colour": "orange", "code": "        self.anchor = chunk\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "571", "colour": "orange", "code": "\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "572", "colour": "green", "code": "    def append(self, chunk, type=CONJUNCT):\n", "error": "W", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "573", "colour": "orange", "code": "        list.append(self, (chunk, type))\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "574", "colour": "orange", "code": "\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "575", "colour": "orange", "code": "#--- SENTENCE --------------------------------------------------------------------------------------\n", "error": "none", "author": "tom@organisms.be"}, {"index": "576", "colour": "orange", "code": "\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "577", "colour": "orange", "code": "_UID = 0\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "578", "colour": "orange", "code": "def _uid():\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "579", "colour": "green", "code": "    global _UID; _UID+=1; return _UID\n", "error": "W", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "580", "colour": "orange", "code": "\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "581", "colour": "orange", "code": "def _is_tokenstring(string):\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "582", "colour": "orange", "code": "    # The class mbsp.TokenString stores the format of tags for each token.\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "583", "colour": "orange", "code": "    # Since it comes directly from MBSP.parse(), this format is always correct,\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "584", "colour": "orange", "code": "    # regardless of the given token format parameter for Sentence() or Text().\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "585", "colour": "orange", "code": "    return isinstance(string, unicode) and hasattr(string, \"tags\")\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "586", "colour": "orange", "code": "\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "587", "colour": "blue", "code": "class Sentence(object):\n", "error": "R", "author": "tom@organisms.be"}, {"index": "588", "colour": "orange", "code": "\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "589", "colour": "green", "code": "    def __init__(self, string=\"\", token=[WORD, POS, CHUNK, PNP, REL, ANCHOR, LEMMA], language=\"en\"):\n", "error": "W", "author": "tom@organisms.be"}, {"index": "590", "colour": "orange", "code": "        \"\"\" A nested tree of sentence words, chunks and prepositions.\n", "error": "none", "author": "tom@organisms.be"}, {"index": "591", "colour": "orange", "code": "            The input is a tagged string from parse(). \n", "error": "none", "author": "tom@organisms.be"}, {"index": "592", "colour": "orange", "code": "            The order in which token tags appear can be specified.\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "593", "colour": "orange", "code": "        \"\"\"\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "594", "colour": "orange", "code": "        # Extract token format from TokenString or TaggedString if possible.\n", "error": "none", "author": "tom@organisms.be"}, {"index": "595", "colour": "orange", "code": "        if _is_tokenstring(string):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "596", "colour": "red", "code": "            token, language = string.tags, getattr(string, \"language\", language)\n", "error": "E", "author": "tom@organisms.be"}, {"index": "597", "colour": "orange", "code": "        # Convert to Unicode.\n", "error": "none", "author": "tom@organisms.be"}, {"index": "598", "colour": "orange", "code": "        if not isinstance(string, unicode):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "599", "colour": "orange", "code": "            for encoding in ((\"utf-8\",), (\"windows-1252\",), (\"utf-8\", \"ignore\")):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "600", "colour": "green", "code": "                try: string = string.decode(*encoding)\n", "error": "W", "author": "tom@organisms.be"}, {"index": "601", "colour": "green", "code": "                except:\n", "error": "W", "author": "tom@organisms.be"}, {"index": "602", "colour": "orange", "code": "                    pass\n", "error": "none", "author": "tom@organisms.be"}, {"index": "603", "colour": "orange", "code": "        self.parent      = None # A Slice refers to the Sentence it is part of.\n", "error": "none", "author": "tom@organisms.be"}, {"index": "604", "colour": "orange", "code": "        self.text        = None # A Sentence refers to the Text it is part of.\n", "error": "none", "author": "tom@organisms.be"}, {"index": "605", "colour": "orange", "code": "        self.language    = language\n", "error": "none", "author": "tom@organisms.be"}, {"index": "606", "colour": "orange", "code": "        self.id          = _uid()\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "607", "colour": "orange", "code": "        self.token       = list(token)\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "608", "colour": "orange", "code": "        self.words       = []\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "609", "colour": "orange", "code": "        self.chunks      = [] # Words grouped into chunks.\n", "error": "none", "author": "tom@organisms.be"}, {"index": "610", "colour": "orange", "code": "        self.pnp         = [] # Words grouped into PNP chunks.\n", "error": "none", "author": "tom@organisms.be"}, {"index": "611", "colour": "orange", "code": "        self._anchors    = {} # Anchor tags related to anchor chunks or attached PNP's.\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "612", "colour": "orange", "code": "        self._relation   = None # Helper variable: the last chunk's relation and role.\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "613", "colour": "orange", "code": "        self._attachment = None # Helper variable: the last attachment tag (e.g., \"P1\") parsed in _do_pnp().\n", "error": "none", "author": "tom@organisms.be"}, {"index": "614", "colour": "orange", "code": "        self._previous   = None # Helper variable: the last token parsed in parse_token().\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "615", "colour": "orange", "code": "        self.relations   = {\"SBJ\":{}, \"OBJ\":{}, \"VP\":{}}\n", "error": "none", "author": "tom@organisms.be"}, {"index": "616", "colour": "orange", "code": "        # Split the slash-formatted token into the separate tags in the given order.\n", "error": "none", "author": "tom@organisms.be"}, {"index": "617", "colour": "orange", "code": "        # Append Word and Chunk objects according to the token's tags.        \n", "error": "none", "author": "tom@organisms.be"}, {"index": "618", "colour": "orange", "code": "        for chars in string.split(\" \"):\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "619", "colour": "orange", "code": "            if chars:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "620", "colour": "orange", "code": "                self.append(*self.parse_token(chars, token))\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "621", "colour": "orange", "code": "\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "622", "colour": "orange", "code": "    @property\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "623", "colour": "orange", "code": "    def word(self):\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "624", "colour": "orange", "code": "        return self.words\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "625", "colour": "orange", "code": "\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "626", "colour": "orange", "code": "    @property\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "627", "colour": "orange", "code": "    def lemmata(self):\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "628", "colour": "orange", "code": "        return Map(lambda w: w.lemma, self.words)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "629", "colour": "orange", "code": "        #return [word.lemma for word in self.words]\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "630", "colour": "orange", "code": "        \n", "error": "none", "author": "tom@organisms.be"}, {"index": "631", "colour": "orange", "code": "    lemma = lemmata\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "632", "colour": "orange", "code": "\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "633", "colour": "orange", "code": "    @property\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "634", "colour": "orange", "code": "    def parts_of_speech(self):\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "635", "colour": "orange", "code": "        return Map(lambda w: w.type, self.words)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "636", "colour": "orange", "code": "        #return [word.type for word in self.words]\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "637", "colour": "orange", "code": "        \n", "error": "none", "author": "tom@organisms.be"}, {"index": "638", "colour": "orange", "code": "    pos = parts_of_speech\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "639", "colour": "orange", "code": "\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "640", "colour": "orange", "code": "    @property\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "641", "colour": "orange", "code": "    def tagged(self):\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "642", "colour": "orange", "code": "        return [(word.string, word.type) for word in self]\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "643", "colour": "orange", "code": "        \n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "644", "colour": "orange", "code": "    @property\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "645", "colour": "orange", "code": "    def phrases(self):\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "646", "colour": "orange", "code": "        return self.chunks\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "647", "colour": "orange", "code": "        \n", "error": "none", "author": "tom@organisms.be"}, {"index": "648", "colour": "orange", "code": "    chunk = phrases\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "649", "colour": "orange", "code": "\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "650", "colour": "orange", "code": "    @property\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "651", "colour": "orange", "code": "    def prepositional_phrases(self):\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "652", "colour": "orange", "code": "        return self.pnp\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "653", "colour": "orange", "code": "        \n", "error": "none", "author": "tom@organisms.be"}, {"index": "654", "colour": "orange", "code": "    prepositional_noun_phrases = prepositional_phrases\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "655", "colour": "orange", "code": "\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "656", "colour": "orange", "code": "    @property\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "657", "colour": "blue", "code": "    def start(self):\n", "error": "R", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "658", "colour": "orange", "code": "        return 0\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "659", "colour": "orange", "code": "    @property\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "660", "colour": "orange", "code": "    def stop(self):\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "661", "colour": "orange", "code": "        return self.start + len(self.words)\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "662", "colour": "orange", "code": "\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "663", "colour": "orange", "code": "    @property\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "664", "colour": "orange", "code": "    def nouns(self):\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "665", "colour": "orange", "code": "        return [word for word in self if word.type.startswith(\"NN\")]\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "666", "colour": "orange", "code": "    @property\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "667", "colour": "orange", "code": "    def verbs(self):\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "668", "colour": "orange", "code": "        return [word for word in self if word.type.startswith(\"VB\")]\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "669", "colour": "orange", "code": "    @property\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "670", "colour": "orange", "code": "    def adjectives(self):\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "671", "colour": "orange", "code": "        return [word for word in self if word.type.startswith(\"JJ\")]\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "672", "colour": "orange", "code": "\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "673", "colour": "orange", "code": "    @property\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "674", "colour": "orange", "code": "    def subjects(self):\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "675", "colour": "orange", "code": "        return self.relations[\"SBJ\"].values()\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "676", "colour": "orange", "code": "    @property\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "677", "colour": "orange", "code": "    def objects(self):\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "678", "colour": "orange", "code": "        return self.relations[\"OBJ\"].values()\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "679", "colour": "orange", "code": "    @property\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "680", "colour": "red", "code": "    def verbs(self):\n", "error": "E", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "681", "colour": "orange", "code": "        return self.relations[\"VP\"].values()\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "682", "colour": "orange", "code": "        \n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "683", "colour": "orange", "code": "    @property\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "684", "colour": "orange", "code": "    def anchors(self):\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "685", "colour": "orange", "code": "        return [chunk for chunk in self.chunks if len(chunk.attachments) > 0]\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "686", "colour": "orange", "code": "\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "687", "colour": "orange", "code": "    @property\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "688", "colour": "orange", "code": "    def is_question(self):\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "689", "colour": "orange", "code": "        return len(self) > 0 and str(self[-1]) == \"?\"\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "690", "colour": "orange", "code": "    @property\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "691", "colour": "orange", "code": "    def is_exclamation(self):\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "692", "colour": "orange", "code": "        return len(self) > 0 and str(self[-1]) == \"!\"\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "693", "colour": "orange", "code": "\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "694", "colour": "orange", "code": "    def __getitem__(self, index):\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "695", "colour": "orange", "code": "        return self.words[index]\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "696", "colour": "orange", "code": "    def __len__(self):\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "697", "colour": "orange", "code": "        return len(self.words)\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "698", "colour": "orange", "code": "    def __iter__(self):\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "699", "colour": "orange", "code": "        return self.words.__iter__()\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "700", "colour": "orange", "code": "    \n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "701", "colour": "blue", "code": "    def append(self, word, lemma=None, type=None, chunk=None, role=None, relation=None, pnp=None, anchor=None, iob=None, custom={}):\n", "error": "R", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "702", "colour": "orange", "code": "        \"\"\" Appends the next word to the sentence / chunk / preposition.\n", "error": "none", "author": "tom@organisms.be"}, {"index": "703", "colour": "orange", "code": "            For example: Sentence.append(\"clawed\", \"claw\", \"VB\", \"VP\", role=None, relation=1)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "704", "colour": "orange", "code": "            - word     : the current word,\n", "error": "none", "author": "tom@organisms.be"}, {"index": "705", "colour": "orange", "code": "            - lemma    : the canonical form of the word,\n", "error": "none", "author": "tom@organisms.be"}, {"index": "706", "colour": "orange", "code": "            - type     : part-of-speech tag for the word (NN, JJ, ...),\n", "error": "none", "author": "tom@organisms.be"}, {"index": "707", "colour": "orange", "code": "            - chunk    : part-of-speech tag for the chunk this word is part of (NP, VP, ...),\n", "error": "none", "author": "tom@organisms.be"}, {"index": "708", "colour": "orange", "code": "            - role     : the chunk's grammatical role (SBJ, OBJ, ...),\n", "error": "none", "author": "tom@organisms.be"}, {"index": "709", "colour": "orange", "code": "            - relation : an id shared by other related chunks (e.g., SBJ-1 <=> VP-1),\n", "error": "none", "author": "tom@organisms.be"}, {"index": "710", "colour": "orange", "code": "            - pnp      : PNP if this word is in a prepositional noun phrase (B- prefix optional),\n", "error": "none", "author": "tom@organisms.be"}, {"index": "711", "colour": "orange", "code": "            - iob      : BEGIN if the word marks the start of a new chunk,\n", "error": "none", "author": "tom@organisms.be"}, {"index": "712", "colour": "orange", "code": "                         INSIDE (optional) if the word is part of the previous chunk,\n", "error": "none", "author": "tom@organisms.be"}, {"index": "713", "colour": "orange", "code": "            - custom   : a dictionary of (tag, value)-items for user-defined word tags.\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "714", "colour": "orange", "code": "        \"\"\"\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "715", "colour": "orange", "code": "        self._do_word(word, lemma, type)            # Append Word object.\n", "error": "none", "author": "tom@organisms.be"}, {"index": "716", "colour": "orange", "code": "        self._do_chunk(chunk, role, relation, iob)  # Append Chunk, or add last word to last chunk.\n", "error": "none", "author": "tom@organisms.be"}, {"index": "717", "colour": "orange", "code": "        self._do_conjunction()\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "718", "colour": "orange", "code": "        self._do_relation()\n", "error": "none", "author": "tom@organisms.be"}, {"index": "719", "colour": "orange", "code": "        self._do_pnp(pnp, anchor)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "720", "colour": "orange", "code": "        self._do_anchor(anchor)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "721", "colour": "orange", "code": "        self._do_custom(custom)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "722", "colour": "orange", "code": "\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "723", "colour": "green", "code": "    def parse_token(self, token, tags=[WORD, POS, CHUNK, PNP, REL, ANCHOR, LEMMA]):\n", "error": "W", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "724", "colour": "orange", "code": "        \"\"\" Returns the arguments for Sentence.append() from a tagged token representation.\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "725", "colour": "orange", "code": "            The order in which token tags appear can be specified.\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "726", "colour": "orange", "code": "            The default order is (separated by slashes): \n", "error": "none", "author": "tom@organisms.be"}, {"index": "727", "colour": "orange", "code": "            - word, \n", "error": "none", "author": "tom@organisms.be"}, {"index": "728", "colour": "orange", "code": "            - part-of-speech, \n", "error": "none", "author": "tom@organisms.be"}, {"index": "729", "colour": "orange", "code": "            - (IOB-)chunk, \n", "error": "none", "author": "tom@organisms.be"}, {"index": "730", "colour": "orange", "code": "            - (IOB-)preposition, \n", "error": "none", "author": "tom@organisms.be"}, {"index": "731", "colour": "orange", "code": "            - chunk(-relation)(-role), \n", "error": "none", "author": "tom@organisms.be"}, {"index": "732", "colour": "orange", "code": "            - anchor, \n", "error": "none", "author": "tom@organisms.be"}, {"index": "733", "colour": "orange", "code": "            - lemma.\n", "error": "none", "author": "tom@organisms.be"}, {"index": "734", "colour": "orange", "code": "            Examples:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "735", "colour": "orange", "code": "            The/DT/B-NP/O/NP-SBJ-1/O/the\n", "error": "none", "author": "tom@organisms.be"}, {"index": "736", "colour": "orange", "code": "            cats/NNS/I-NP/O/NP-SBJ-1/O/cat\n", "error": "none", "author": "tom@organisms.be"}, {"index": "737", "colour": "orange", "code": "            clawed/VBD/B-VP/O/VP-1/A1/claw\n", "error": "none", "author": "tom@organisms.be"}, {"index": "738", "colour": "orange", "code": "            at/IN/B-PP/B-PNP/PP/P1/at\n", "error": "none", "author": "tom@organisms.be"}, {"index": "739", "colour": "orange", "code": "            the/DT/B-NP/I-PNP/NP/P1/the\n", "error": "none", "author": "tom@organisms.be"}, {"index": "740", "colour": "orange", "code": "            sofa/NN/I-NP/I-PNP/NP/P1/sofa\n", "error": "none", "author": "tom@organisms.be"}, {"index": "741", "colour": "orange", "code": "            ././O/O/O/O/.\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "742", "colour": "orange", "code": "            Returns a (word, lemma, type, chunk, role, relation, preposition, anchor, iob, custom)-tuple,\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "743", "colour": "orange", "code": "            which can be passed to Sentence.append(): Sentence.append(*Sentence.parse_token(\"cats/NNS/NP\"))\n", "error": "none", "author": "tom@organisms.be"}, {"index": "744", "colour": "orange", "code": "            The custom value is a dictionary of (tag, value)-items of unrecognized tags in the token.\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "745", "colour": "orange", "code": "        \"\"\"\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "746", "colour": "orange", "code": "        p = { WORD: \"\", \n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "747", "colour": "orange", "code": "               POS: None, \n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "748", "colour": "orange", "code": "               IOB: None,\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "749", "colour": "orange", "code": "             CHUNK: None,\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "750", "colour": "orange", "code": "               PNP: None,\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "751", "colour": "orange", "code": "               REL: None,\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "752", "colour": "orange", "code": "              ROLE: None,\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "753", "colour": "orange", "code": "            ANCHOR: None,\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "754", "colour": "orange", "code": "             LEMMA: None }\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "755", "colour": "orange", "code": "        # Split the slash-formatted token into separate tags in the given order.\n", "error": "none", "author": "tom@organisms.be"}, {"index": "756", "colour": "orange", "code": "        # Decode &slash; characters (usually in words and lemmata).\n", "error": "none", "author": "tom@organisms.be"}, {"index": "757", "colour": "orange", "code": "        # Assume None for missing tags (except the word itself, which defaults to an empty string).\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "758", "colour": "orange", "code": "        custom = {}\n", "error": "none", "author": "tom@organisms.be"}, {"index": "759", "colour": "orange", "code": "        for k, v in izip(tags, token.split(\"/\")):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "760", "colour": "orange", "code": "            if SLASH0 in v:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "761", "colour": "orange", "code": "                v = v.replace(SLASH, \"/\")\n", "error": "none", "author": "tom@organisms.be"}, {"index": "762", "colour": "orange", "code": "            if k == \"pos\":\n", "error": "none", "author": "tom@organisms.be"}, {"index": "763", "colour": "orange", "code": "                k = POS\n", "error": "none", "author": "tom@organisms.be"}, {"index": "764", "colour": "orange", "code": "            if k not in p:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "765", "colour": "orange", "code": "                custom[k] = None\n", "error": "none", "author": "tom@organisms.be"}, {"index": "766", "colour": "orange", "code": "            if v != OUTSIDE or k == WORD or k == LEMMA: # \"type O negative\" => \"O\" != OUTSIDE.\n", "error": "none", "author": "tom@organisms.be"}, {"index": "767", "colour": "orange", "code": "                (p if k not in custom else custom)[k] = v\n", "error": "none", "author": "tom@organisms.be"}, {"index": "768", "colour": "orange", "code": "        # Split IOB-prefix from the chunk tag:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "769", "colour": "orange", "code": "        # B- marks the start of a new chunk, \n", "error": "none", "author": "tom@organisms.be"}, {"index": "770", "colour": "orange", "code": "        # I- marks inside of a chunk.\n", "error": "none", "author": "tom@organisms.be"}, {"index": "771", "colour": "orange", "code": "        ch = p[CHUNK]\n", "error": "none", "author": "tom@organisms.be"}, {"index": "772", "colour": "orange", "code": "        if ch is not None and ch.startswith((\"B-\", \"I-\")):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "773", "colour": "orange", "code": "            p[IOB], p[CHUNK] = ch[:1], ch[2:] # B-NP\n", "error": "none", "author": "tom@organisms.be"}, {"index": "774", "colour": "orange", "code": "        # Split the role from the relation:\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "775", "colour": "orange", "code": "        # NP-SBJ-1 => relation id is 1 and role is SBJ, \n", "error": "none", "author": "tom@organisms.be"}, {"index": "776", "colour": "orange", "code": "        # VP-1 => relation id is 1 with no role.\n", "error": "none", "author": "tom@organisms.be"}, {"index": "777", "colour": "orange", "code": "        # Tokens may be tagged with multiple relations (e.g., NP-OBJ-1*NP-OBJ-3).\n", "error": "none", "author": "tom@organisms.be"}, {"index": "778", "colour": "orange", "code": "        if p[REL] is not None:\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "779", "colour": "orange", "code": "            ch, p[REL], p[ROLE] = self._parse_relation(p[REL])\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "780", "colour": "orange", "code": "            # Infer a missing chunk tag from the relation tag (e.g., NP-SBJ-1 => NP).\n", "error": "none", "author": "tom@organisms.be"}, {"index": "781", "colour": "orange", "code": "            # For PP relation tags (e.g., PP-CLR-1), the first chunk is PP, the following chunks NP.\n", "error": "none", "author": "tom@organisms.be"}, {"index": "782", "colour": "orange", "code": "            if ch == \"PP\" \\\n", "error": "none", "author": "tom@organisms.be"}, {"index": "783", "colour": "orange", "code": "             and self._previous \\\n", "error": "none", "author": "tom@organisms.be"}, {"index": "784", "colour": "orange", "code": "             and self._previous[REL] == p[REL] \\\n", "error": "none", "author": "tom@organisms.be"}, {"index": "785", "colour": "orange", "code": "             and self._previous[ROLE] == p[ROLE]: \n", "error": "none", "author": "tom@organisms.be"}, {"index": "786", "colour": "orange", "code": "                ch = \"NP\"\n", "error": "none", "author": "tom@organisms.be"}, {"index": "787", "colour": "orange", "code": "            if p[CHUNK] is None and ch != OUTSIDE:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "788", "colour": "orange", "code": "                p[CHUNK] = ch\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "789", "colour": "orange", "code": "        self._previous = p\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "790", "colour": "orange", "code": "        # Return the tags in the right order for Sentence.append().\n", "error": "none", "author": "tom@organisms.be"}, {"index": "791", "colour": "orange", "code": "        return p[WORD], p[LEMMA], p[POS], p[CHUNK], p[ROLE], p[REL], p[PNP], p[ANCHOR], p[IOB], custom\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "792", "colour": "orange", "code": "    \n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "793", "colour": "blue", "code": "    def _parse_relation(self, tag):\n", "error": "R", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "794", "colour": "orange", "code": "        \"\"\" Parses the chunk tag, role and relation id from the token relation tag.\n", "error": "none", "author": "tom@organisms.be"}, {"index": "795", "colour": "orange", "code": "            - VP                => VP, [], []\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "796", "colour": "orange", "code": "            - VP-1              => VP, [1], [None]\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "797", "colour": "orange", "code": "            - ADJP-PRD          => ADJP, [None], [PRD]\n", "error": "none", "author": "tom@organisms.be"}, {"index": "798", "colour": "orange", "code": "            - NP-SBJ-1          => NP, [1], [SBJ]\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "799", "colour": "orange", "code": "            - NP-OBJ-1*NP-OBJ-2 => NP, [1,2], [OBJ,OBJ]\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "800", "colour": "orange", "code": "            - NP-SBJ;NP-OBJ-1   => NP, [1,1], [SBJ,OBJ]\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "801", "colour": "orange", "code": "        \"\"\"\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "802", "colour": "orange", "code": "        chunk, relation, role = None, [], []\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "803", "colour": "orange", "code": "        if \";\" in tag:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "804", "colour": "orange", "code": "            # NP-SBJ;NP-OBJ-1 => 1 relates to both SBJ and OBJ.\n", "error": "none", "author": "tom@organisms.be"}, {"index": "805", "colour": "green", "code": "            id = tag.split(\"*\")[0][-2:]\n", "error": "W", "author": "tom@organisms.be"}, {"index": "806", "colour": "orange", "code": "            id = id if id.startswith(\"-\") else \"\"\n", "error": "none", "author": "tom@organisms.be"}, {"index": "807", "colour": "orange", "code": "            tag = tag.replace(\";\", id + \"*\")\n", "error": "none", "author": "tom@organisms.be"}, {"index": "808", "colour": "orange", "code": "        if \"*\" in tag:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "809", "colour": "orange", "code": "            tag = tag.split(\"*\")\n", "error": "none", "author": "tom@organisms.be"}, {"index": "810", "colour": "orange", "code": "        else:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "811", "colour": "orange", "code": "            tag = [tag]\n", "error": "none", "author": "tom@organisms.be"}, {"index": "812", "colour": "orange", "code": "        for s in tag:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "813", "colour": "orange", "code": "            s = s.split(\"-\")\n", "error": "none", "author": "tom@organisms.be"}, {"index": "814", "colour": "orange", "code": "            n = len(s)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "815", "colour": "orange", "code": "            if n == 1: \n", "error": "none", "author": "tom@organisms.be"}, {"index": "816", "colour": "orange", "code": "                chunk = s[0]\n", "error": "none", "author": "tom@organisms.be"}, {"index": "817", "colour": "orange", "code": "            if n == 2: \n", "error": "none", "author": "tom@organisms.be"}, {"index": "818", "colour": "orange", "code": "                chunk = s[0]; relation.append(s[1]); role.append(None)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "819", "colour": "orange", "code": "            if n >= 3: \n", "error": "none", "author": "tom@organisms.be"}, {"index": "820", "colour": "orange", "code": "                chunk = s[0]; relation.append(s[2]); role.append(s[1])\n", "error": "none", "author": "tom@organisms.be"}, {"index": "821", "colour": "orange", "code": "            if n > 1:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "822", "colour": "orange", "code": "                id = relation[-1]\n", "error": "none", "author": "tom@organisms.be"}, {"index": "823", "colour": "orange", "code": "                if id.isdigit():\n", "error": "none", "author": "tom@organisms.be"}, {"index": "824", "colour": "orange", "code": "                    relation[-1] = int(id)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "825", "colour": "orange", "code": "                else:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "826", "colour": "orange", "code": "                    # Correct \"ADJP-PRD\":\n", "error": "none", "author": "tom@organisms.be"}, {"index": "827", "colour": "orange", "code": "                    # (ADJP, [PRD], [None]) => (ADJP, [None], [PRD])\n", "error": "none", "author": "tom@organisms.be"}, {"index": "828", "colour": "orange", "code": "                    relation[-1], role[-1] = None, id\n", "error": "none", "author": "tom@organisms.be"}, {"index": "829", "colour": "orange", "code": "        return chunk, relation, role\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "830", "colour": "orange", "code": "    \n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "831", "colour": "green", "code": "    def _do_word(self, word, lemma=None, type=None):\n", "error": "W", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "832", "colour": "orange", "code": "        \"\"\" Adds a new Word to the sentence.\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "833", "colour": "orange", "code": "            Other Sentence._do_[tag] functions assume a new word has just been appended.\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "834", "colour": "orange", "code": "        \"\"\"\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "835", "colour": "orange", "code": "        # Improve 3rd person singular \"'s\" lemma to \"be\", e.g., as in \"he's fine\".\n", "error": "none", "author": "tom@organisms.be"}, {"index": "836", "colour": "orange", "code": "        if lemma == \"'s\" and type in (\"VB\", \"VBZ\"):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "837", "colour": "orange", "code": "            lemma = \"be\"\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "838", "colour": "orange", "code": "        self.words.append(Word(self, word, lemma, type, index=len(self.words)))     \n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "839", "colour": "orange", "code": "\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "840", "colour": "green", "code": "    def _do_chunk(self, type, role=None, relation=None, iob=None):\n", "error": "W", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "841", "colour": "orange", "code": "        \"\"\" Adds a new Chunk to the sentence, or adds the last word to the previous chunk.\n", "error": "none", "author": "tom@organisms.be"}, {"index": "842", "colour": "orange", "code": "            The word is attached to the previous chunk if both type and relation match,\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "843", "colour": "orange", "code": "            and if the word's chunk tag does not start with \"B-\" (i.e., iob != BEGIN).\n", "error": "none", "author": "tom@organisms.be"}, {"index": "844", "colour": "orange", "code": "            Punctuation marks (or other \"O\" chunk tags) are not chunked.\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "845", "colour": "orange", "code": "        \"\"\"\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "846", "colour": "orange", "code": "        if (type is None or type == OUTSIDE) and \\\n", "error": "none", "author": "tom@organisms.be"}, {"index": "847", "colour": "orange", "code": "           (role is None or role == OUTSIDE) and (relation is None or relation == OUTSIDE):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "848", "colour": "orange", "code": "            return\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "849", "colour": "orange", "code": "        if iob != BEGIN \\\n", "error": "none", "author": "tom@organisms.be"}, {"index": "850", "colour": "orange", "code": "         and self.chunks \\\n", "error": "none", "author": "tom@organisms.be"}, {"index": "851", "colour": "orange", "code": "         and self.chunks[-1].type == type \\\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "852", "colour": "orange", "code": "         and self._relation == (relation, role) \\\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "853", "colour": "orange", "code": "         and self.words[-2].chunk is not None: # \"one, two\" => \"one\" & \"two\" different chunks.\n", "error": "none", "author": "tom@organisms.be"}, {"index": "854", "colour": "orange", "code": "            self.chunks[-1].append(self.words[-1])\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "855", "colour": "orange", "code": "        else:\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "856", "colour": "orange", "code": "            ch = Chunk(self, [self.words[-1]], type, role, relation)\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "857", "colour": "orange", "code": "            self.chunks.append(ch)\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "858", "colour": "orange", "code": "            self._relation = (relation, role)\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "859", "colour": "orange", "code": "    \n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "860", "colour": "orange", "code": "    def _do_relation(self):\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "861", "colour": "orange", "code": "        \"\"\" Attaches subjects, objects and verbs.\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "862", "colour": "orange", "code": "            If the previous chunk is a subject/object/verb, it is stored in Sentence.relations{}.\n", "error": "none", "author": "tom@organisms.be"}, {"index": "863", "colour": "orange", "code": "        \"\"\"\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "864", "colour": "orange", "code": "        if self.chunks:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "865", "colour": "orange", "code": "            ch = self.chunks[-1]\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "866", "colour": "orange", "code": "            for relation, role in ch.relations:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "867", "colour": "orange", "code": "                if role == \"SBJ\" or role == \"OBJ\":\n", "error": "none", "author": "tom@organisms.be"}, {"index": "868", "colour": "orange", "code": "                    self.relations[role][relation] = ch\n", "error": "none", "author": "tom@organisms.be"}, {"index": "869", "colour": "orange", "code": "            if ch.type in (\"VP\",):\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "870", "colour": "orange", "code": "                self.relations[ch.type][ch.relation] = ch\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "871", "colour": "orange", "code": "\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "872", "colour": "orange", "code": "    def _do_pnp(self, pnp, anchor=None):\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "873", "colour": "orange", "code": "        \"\"\" Attaches prepositional noun phrases.\n", "error": "none", "author": "tom@organisms.be"}, {"index": "874", "colour": "orange", "code": "            Identifies PNP's from either the PNP tag or the P-attachment tag.\n", "error": "none", "author": "tom@organisms.be"}, {"index": "875", "colour": "orange", "code": "            This does not determine the PP-anchor, it only groups words in a PNP chunk.\n", "error": "none", "author": "tom@organisms.be"}, {"index": "876", "colour": "orange", "code": "        \"\"\"\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "877", "colour": "orange", "code": "        if anchor or pnp and pnp.endswith(\"PNP\"):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "878", "colour": "orange", "code": "            if anchor is not None:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "879", "colour": "orange", "code": "                m = find(lambda x: x.startswith(\"P\"), anchor)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "880", "colour": "orange", "code": "            else:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "881", "colour": "orange", "code": "                m = None\n", "error": "none", "author": "tom@organisms.be"}, {"index": "882", "colour": "orange", "code": "            if self.pnp \\\n", "error": "none", "author": "tom@organisms.be"}, {"index": "883", "colour": "orange", "code": "             and pnp \\\n", "error": "none", "author": "tom@organisms.be"}, {"index": "884", "colour": "orange", "code": "             and pnp != OUTSIDE \\\n", "error": "none", "author": "tom@organisms.be"}, {"index": "885", "colour": "orange", "code": "             and pnp.startswith(\"B-\") is False \\\n", "error": "none", "author": "tom@organisms.be"}, {"index": "886", "colour": "orange", "code": "             and self.words[-2].pnp is not None:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "887", "colour": "orange", "code": "                self.pnp[-1].append(self.words[-1])\n", "error": "none", "author": "tom@organisms.be"}, {"index": "888", "colour": "orange", "code": "            elif m is not None and m == self._attachment:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "889", "colour": "orange", "code": "                self.pnp[-1].append(self.words[-1])\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "890", "colour": "orange", "code": "            else:\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "891", "colour": "orange", "code": "                ch = PNPChunk(self, [self.words[-1]], type=\"PNP\")\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "892", "colour": "orange", "code": "                self.pnp.append(ch)                \n", "error": "none", "author": "tom@organisms.be"}, {"index": "893", "colour": "orange", "code": "            self._attachment = m\n", "error": "none", "author": "tom@organisms.be"}, {"index": "894", "colour": "orange", "code": "    \n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "895", "colour": "orange", "code": "    def _do_anchor(self, anchor):\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "896", "colour": "orange", "code": "        \"\"\" Collects preposition anchors and attachments in a dictionary.\n", "error": "none", "author": "tom@organisms.be"}, {"index": "897", "colour": "orange", "code": "            Once the dictionary has an entry for both the anchor and the attachment, they are linked.\n", "error": "none", "author": "tom@organisms.be"}, {"index": "898", "colour": "orange", "code": "        \"\"\"\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "899", "colour": "orange", "code": "        if anchor:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "900", "colour": "orange", "code": "            for x in anchor.split(\"-\"):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "901", "colour": "orange", "code": "                A, P = None, None\n", "error": "none", "author": "tom@organisms.be"}, {"index": "902", "colour": "orange", "code": "                if x.startswith(\"A\") and len(self.chunks) > 0: # anchor\n", "error": "none", "author": "tom@organisms.be"}, {"index": "903", "colour": "orange", "code": "                    A, P = x, x.replace(\"A\",\"P\")\n", "error": "none", "author": "tom@organisms.be"}, {"index": "904", "colour": "orange", "code": "                    self._anchors[A] = self.chunks[-1]\n", "error": "none", "author": "tom@organisms.be"}, {"index": "905", "colour": "orange", "code": "                if x.startswith(\"P\") and len(self.pnp) > 0:    # attachment (PNP)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "906", "colour": "orange", "code": "                    A, P = x.replace(\"P\",\"A\"), x\n", "error": "none", "author": "tom@organisms.be"}, {"index": "907", "colour": "orange", "code": "                    self._anchors[P] = self.pnp[-1]\n", "error": "none", "author": "tom@organisms.be"}, {"index": "908", "colour": "orange", "code": "                if A in self._anchors and P in self._anchors and not self._anchors[P].anchor:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "909", "colour": "orange", "code": "                    pnp = self._anchors[P]\n", "error": "none", "author": "tom@organisms.be"}, {"index": "910", "colour": "orange", "code": "                    pnp.anchor = self._anchors[A]\n", "error": "none", "author": "tom@organisms.be"}, {"index": "911", "colour": "orange", "code": "                    pnp.anchor.attachments.append(pnp)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "912", "colour": "orange", "code": "                \n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "913", "colour": "orange", "code": "    def _do_custom(self, custom):\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "914", "colour": "orange", "code": "        \"\"\" Adds the user-defined tags to the last word.\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "915", "colour": "orange", "code": "            Custom tags can be used to add extra semantical meaning or metadata to words.\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "916", "colour": "orange", "code": "        \"\"\"\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "917", "colour": "orange", "code": "        if custom:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "918", "colour": "orange", "code": "            self.words[-1].custom_tags.update(custom)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "919", "colour": "orange", "code": "\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "920", "colour": "orange", "code": "    def _do_conjunction(self, _and=(\"and\", \"e\", \"en\", \"et\", \"und\", \"y\")):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "921", "colour": "orange", "code": "        \"\"\" Attach conjunctions.\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "922", "colour": "orange", "code": "            CC-words like \"and\" and \"or\" between two chunks indicate a conjunction.\n", "error": "none", "author": "tom@organisms.be"}, {"index": "923", "colour": "orange", "code": "        \"\"\"\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "924", "colour": "orange", "code": "        w = self.words\n", "error": "none", "author": "tom@organisms.be"}, {"index": "925", "colour": "orange", "code": "        if len(w) > 2 and w[-2].type == \"CC\" and w[-2].chunk is None:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "926", "colour": "orange", "code": "            cc  = w[-2].string.lower() in _and and AND or OR\n", "error": "none", "author": "tom@organisms.be"}, {"index": "927", "colour": "orange", "code": "            ch1 = w[-3].chunk\n", "error": "none", "author": "tom@organisms.be"}, {"index": "928", "colour": "orange", "code": "            ch2 = w[-1].chunk\n", "error": "none", "author": "tom@organisms.be"}, {"index": "929", "colour": "orange", "code": "            if ch1 is not None and \\\n", "error": "none", "author": "tom@organisms.be"}, {"index": "930", "colour": "orange", "code": "               ch2 is not None:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "931", "colour": "orange", "code": "                ch1.conjunctions.append(ch2, cc)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "932", "colour": "orange", "code": "                ch2.conjunctions.append(ch1, cc)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "933", "colour": "orange", "code": "\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "934", "colour": "blue", "code": "    def get(self, index, tag=LEMMA):\n", "error": "R", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "935", "colour": "orange", "code": "        \"\"\" Returns a tag for the word at the given index.\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "936", "colour": "orange", "code": "            The tag can be WORD, LEMMA, POS, CHUNK, PNP, RELATION, ROLE, ANCHOR or a custom word tag.\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "937", "colour": "orange", "code": "        \"\"\"\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "938", "colour": "orange", "code": "        if tag == WORD:\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "939", "colour": "orange", "code": "            return self.words[index]\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "940", "colour": "orange", "code": "        if tag == LEMMA:\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "941", "colour": "orange", "code": "            return self.words[index].lemma\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "942", "colour": "orange", "code": "        if tag == POS or tag == \"pos\":\n", "error": "none", "author": "tom@organisms.be"}, {"index": "943", "colour": "orange", "code": "            return self.words[index].type\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "944", "colour": "orange", "code": "        if tag == CHUNK:\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "945", "colour": "orange", "code": "            return self.words[index].chunk\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "946", "colour": "orange", "code": "        if tag == PNP:\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "947", "colour": "orange", "code": "            return self.words[index].pnp\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "948", "colour": "orange", "code": "        if tag == REL:\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "949", "colour": "orange", "code": "            ch = self.words[index].chunk; return ch and ch.relation\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "950", "colour": "orange", "code": "        if tag == ROLE:\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "951", "colour": "orange", "code": "            ch = self.words[index].chunk; return ch and ch.role\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "952", "colour": "orange", "code": "        if tag == ANCHOR:\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "953", "colour": "orange", "code": "            ch = self.words[index].pnp; return ch and ch.anchor\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "954", "colour": "orange", "code": "        if tag in self.words[index].custom_tags:\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "955", "colour": "orange", "code": "            return self.words[index].custom_tags[tag]\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "956", "colour": "orange", "code": "        return None\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "957", "colour": "orange", "code": "        \n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "958", "colour": "orange", "code": "    def loop(self, *tags):\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "959", "colour": "orange", "code": "        \"\"\" Iterates over the tags in the entire Sentence,\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "960", "colour": "orange", "code": "            For example, Sentence.loop(POS, LEMMA) yields tuples of the part-of-speech tags and lemmata. \n", "error": "none", "author": "tom@organisms.be"}, {"index": "961", "colour": "orange", "code": "            Possible tags: WORD, LEMMA, POS, CHUNK, PNP, RELATION, ROLE, ANCHOR or a custom word tag.\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "962", "colour": "orange", "code": "            Any order or combination of tags can be supplied.\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "963", "colour": "orange", "code": "        \"\"\"\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "964", "colour": "orange", "code": "        for i in range(len(self.words)):\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "965", "colour": "orange", "code": "            yield tuple([self.get(i, tag=tag) for tag in tags])  \n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "966", "colour": "orange", "code": "\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "967", "colour": "orange", "code": "    def indexof(self, value, tag=WORD):\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "968", "colour": "orange", "code": "        \"\"\" Returns the indices of tokens in the sentence where the given token tag equals the string.\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "969", "colour": "orange", "code": "            The string can contain a wildcard \"*\" at the end (this way \"NN*\" will match \"NN\" and \"NNS\").\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "970", "colour": "orange", "code": "            The tag can be WORD, LEMMA, POS, CHUNK, PNP, RELATION, ROLE, ANCHOR or a custom word tag.\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "971", "colour": "orange", "code": "            For example: Sentence.indexof(\"VP\", tag=CHUNK) \n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "972", "colour": "orange", "code": "            returns the indices of all the words that are part of a VP chunk.\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "973", "colour": "orange", "code": "        \"\"\"\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "974", "colour": "orange", "code": "        match = lambda a, b: a.endswith(\"*\") and b.startswith(a[:-1]) or a==b\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "975", "colour": "orange", "code": "        indices = []\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "976", "colour": "orange", "code": "        for i in range(len(self.words)):\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "977", "colour": "orange", "code": "            if match(value, unicode(self.get(i, tag))):\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "978", "colour": "orange", "code": "                indices.append(i)\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "979", "colour": "orange", "code": "        return indices\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "980", "colour": "orange", "code": "\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "981", "colour": "blue", "code": "    def slice(self, start, stop):\n", "error": "R", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "982", "colour": "orange", "code": "        \"\"\" Returns a portion of the sentence from word start index to word stop index.\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "983", "colour": "orange", "code": "            The returned slice is a subclass of Sentence and a deep copy.\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "984", "colour": "orange", "code": "        \"\"\"\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "985", "colour": "orange", "code": "        s = Slice(token=self.token, language=self.language)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "986", "colour": "orange", "code": "        for i, word in enumerate(self.words[start:stop]):\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "987", "colour": "orange", "code": "            # The easiest way to copy (part of) a sentence\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "988", "colour": "orange", "code": "            # is by unpacking all of the token tags and passing them to Sentence.append().\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "989", "colour": "orange", "code": "            p0 = word.string                                                       # WORD\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "990", "colour": "orange", "code": "            p1 = word.lemma                                                        # LEMMA\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "991", "colour": "orange", "code": "            p2 = word.type                                                         # POS\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "992", "colour": "orange", "code": "            p3 = word.chunk is not None and word.chunk.type or None                # CHUNK\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "993", "colour": "orange", "code": "            p4 = word.pnp is not None and \"PNP\" or None                            # PNP\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "994", "colour": "orange", "code": "            p5 = word.chunk is not None and unzip(0, word.chunk.relations) or None # REL            \n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "995", "colour": "orange", "code": "            p6 = word.chunk is not None and unzip(1, word.chunk.relations) or None # ROLE\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "996", "colour": "orange", "code": "            p7 = word.chunk and word.chunk.anchor_id or None                       # ANCHOR\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "997", "colour": "orange", "code": "            p8 = word.chunk and word.chunk.start == start+i and BEGIN or None      # IOB\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "998", "colour": "orange", "code": "            p9 = word.custom_tags                                                  # User-defined tags.\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "999", "colour": "orange", "code": "            # If the given range does not contain the chunk head, remove the chunk tags.\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1000", "colour": "orange", "code": "            if word.chunk is not None and (word.chunk.stop > stop):\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1001", "colour": "orange", "code": "                p3, p4, p5, p6, p7, p8 = None, None, None, None, None, None\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1002", "colour": "orange", "code": "            # If the word starts the preposition, add the IOB B-prefix (i.e., B-PNP).\n", "error": "none", "author": "tom@organisms.be"}, {"index": "1003", "colour": "orange", "code": "            if word.pnp is not None and word.pnp.start == start+i:\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1004", "colour": "orange", "code": "                p4 = BEGIN+\"-\"+\"PNP\"\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1005", "colour": "orange", "code": "            # If the given range does not contain the entire PNP, remove the PNP tags.\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1006", "colour": "orange", "code": "            # The range must contain the entire PNP, \n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1007", "colour": "orange", "code": "            # since it starts with the PP and ends with the chunk head (and is meaningless without these).\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1008", "colour": "orange", "code": "            if word.pnp is not None and (word.pnp.start < start or word.chunk.stop > stop):\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1009", "colour": "orange", "code": "                p4, p7 = None, None\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1010", "colour": "orange", "code": "            s.append(word=p0, lemma=p1, type=p2, chunk=p3, pnp=p4, relation=p5, role=p6, anchor=p7, iob=p8, custom=p9)\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1011", "colour": "orange", "code": "        s.parent = self\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1012", "colour": "green", "code": "        s._start = start\n", "error": "W", "author": "tom@organisms.be"}, {"index": "1013", "colour": "orange", "code": "        return s\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1014", "colour": "orange", "code": "\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1015", "colour": "orange", "code": "    def copy(self):\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1016", "colour": "orange", "code": "        return self.slice(0, len(self))\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1017", "colour": "orange", "code": "        \n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1018", "colour": "orange", "code": "    def chunked(self):\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1019", "colour": "orange", "code": "        return chunked(self)\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1020", "colour": "orange", "code": "        \n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1021", "colour": "orange", "code": "    def constituents(self, pnp=False):\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1022", "colour": "orange", "code": "        \"\"\" Returns an in-order list of mixed Chunk and Word objects.\n", "error": "none", "author": "tom@organisms.be"}, {"index": "1023", "colour": "orange", "code": "            With pnp=True, also contains PNPChunk objects whenever possible.\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1024", "colour": "orange", "code": "        \"\"\"\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1025", "colour": "orange", "code": "        a = []\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1026", "colour": "orange", "code": "        for word in self.words:\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1027", "colour": "orange", "code": "            if pnp and word.pnp is not None:\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1028", "colour": "orange", "code": "                if len(a) == 0 or a[-1] != word.pnp:\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1029", "colour": "orange", "code": "                    a.append(word.pnp)\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1030", "colour": "orange", "code": "            elif word.chunk is not None:\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1031", "colour": "orange", "code": "                if len(a) == 0 or a[-1] != word.chunk:\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1032", "colour": "orange", "code": "                    a.append(word.chunk)\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1033", "colour": "orange", "code": "            else:\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1034", "colour": "orange", "code": "                a.append(word)\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1035", "colour": "orange", "code": "        return a\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1036", "colour": "orange", "code": "\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1037", "colour": "orange", "code": "    # Sentence.string and unicode(Sentence) are Unicode strings.\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1038", "colour": "orange", "code": "    # repr(Sentence) is a Python strings (with Unicode characters encoded).\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1039", "colour": "orange", "code": "    @property\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1040", "colour": "orange", "code": "    def string(self):\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1041", "colour": "orange", "code": "        return u\" \".join(word.string for word in self)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "1042", "colour": "orange", "code": "    def __unicode__(self):\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1043", "colour": "orange", "code": "        return self.string\n", "error": "none", "author": "tom@organisms.be"}, {"index": "1044", "colour": "orange", "code": "    def __repr__(self):\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1045", "colour": "orange", "code": "        return \"Sentence(%s)\" % repr(\" \".join([\"/\".join(word.tags) for word in self.words]).encode(\"utf-8\"))\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1046", "colour": "orange", "code": "        \n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1047", "colour": "orange", "code": "    def __eq__(self, other):\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1048", "colour": "orange", "code": "        if not isinstance(other, Sentence): \n", "error": "none", "author": "tom@organisms.be"}, {"index": "1049", "colour": "orange", "code": "            return False\n", "error": "none", "author": "tom@organisms.be"}, {"index": "1050", "colour": "orange", "code": "        return len(self) == len(other) and repr(self) == repr(other)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "1051", "colour": "orange", "code": "\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1052", "colour": "orange", "code": "    @property\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1053", "colour": "orange", "code": "    def xml(self):\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1054", "colour": "orange", "code": "        \"\"\" Yields the sentence as an XML-formatted string (plain bytestring, UTF-8 encoded).\n", "error": "none", "author": "tom@organisms.be"}, {"index": "1055", "colour": "orange", "code": "        \"\"\"\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1056", "colour": "orange", "code": "        return parse_xml(self, tab=\"\\t\", id=self.id or \"\")\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1057", "colour": "orange", "code": "        \n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1058", "colour": "orange", "code": "    @classmethod\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1059", "colour": "green", "code": "    def from_xml(cls, xml):\n", "error": "W", "author": "tom@organisms.be"}, {"index": "1060", "colour": "orange", "code": "        \"\"\" Returns a new Text from the given XML string.\n", "error": "none", "author": "tom@organisms.be"}, {"index": "1061", "colour": "orange", "code": "        \"\"\"\n", "error": "none", "author": "tom@organisms.be"}, {"index": "1062", "colour": "orange", "code": "        s = parse_string(xml)\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1063", "colour": "orange", "code": "        return Sentence(s.split(\"\\n\")[0], token=s.tags, language=s.language)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "1064", "colour": "orange", "code": "        \n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1065", "colour": "orange", "code": "    fromxml = from_xml\n", "error": "none", "author": "tom@organisms.be"}, {"index": "1066", "colour": "orange", "code": "        \n", "error": "none", "author": "tom@organisms.be"}, {"index": "1067", "colour": "orange", "code": "    def nltk_tree(self):\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1068", "colour": "orange", "code": "        \"\"\" The sentence as an nltk.tree object.\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1069", "colour": "orange", "code": "        \"\"\"\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1070", "colour": "orange", "code": "        return nltk_tree(self)\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1071", "colour": "orange", "code": "\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1072", "colour": "blue", "code": "class Slice(Sentence):\n", "error": "R", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1073", "colour": "orange", "code": "    \n", "error": "none", "author": "tom@organisms.be"}, {"index": "1074", "colour": "orange", "code": "    def __init__(self, *args, **kwargs):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "1075", "colour": "orange", "code": "        \"\"\" A portion of the sentence returned by Sentence.slice().\n", "error": "none", "author": "tom@organisms.be"}, {"index": "1076", "colour": "orange", "code": "        \"\"\"\n", "error": "none", "author": "tom@organisms.be"}, {"index": "1077", "colour": "orange", "code": "        self._start = kwargs.pop(\"start\", 0)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "1078", "colour": "orange", "code": "        Sentence.__init__(self, *args, **kwargs)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "1079", "colour": "orange", "code": "    \n", "error": "none", "author": "tom@organisms.be"}, {"index": "1080", "colour": "orange", "code": "    @property\n", "error": "none", "author": "tom@organisms.be"}, {"index": "1081", "colour": "orange", "code": "    def start(self):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "1082", "colour": "orange", "code": "        return self._start\n", "error": "none", "author": "tom@organisms.be"}, {"index": "1083", "colour": "orange", "code": "        \n", "error": "none", "author": "tom@organisms.be"}, {"index": "1084", "colour": "orange", "code": "    @property\n", "error": "none", "author": "tom@organisms.be"}, {"index": "1085", "colour": "orange", "code": "    def stop(self):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "1086", "colour": "orange", "code": "        return self._start + len(self.words)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "1087", "colour": "orange", "code": "\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1088", "colour": "orange", "code": "#---------------------------------------------------------------------------------------------------\n", "error": "none", "author": "tom@organisms.be"}, {"index": "1089", "colour": "orange", "code": "# s = Sentence(parse(\"black cats and white dogs\"))\n", "error": "none", "author": "tom@organisms.be"}, {"index": "1090", "colour": "orange", "code": "# s.words          => [Word('black/JJ'), Word('cats/NNS'), Word('and/CC'), Word('white/JJ'), Word('dogs/NNS')]\n", "error": "none", "author": "tom@organisms.be"}, {"index": "1091", "colour": "orange", "code": "# s.chunks         => [Chunk('black cats/NP'), Chunk('white dogs/NP')]\n", "error": "none", "author": "tom@organisms.be"}, {"index": "1092", "colour": "orange", "code": "# s.constituents() => [Chunk('black cats/NP'), Word('and/CC'), Chunk('white dogs/NP')]\n", "error": "none", "author": "tom@organisms.be"}, {"index": "1093", "colour": "orange", "code": "# s.chunked(s)     => [Chunk('black cats/NP'), Chink('and/O'), Chunk('white dogs/NP')]\n", "error": "none", "author": "tom@organisms.be"}, {"index": "1094", "colour": "orange", "code": "\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1095", "colour": "orange", "code": "def chunked(sentence):\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1096", "colour": "orange", "code": "    \"\"\" Returns a list of Chunk and Chink objects from the given sentence.\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1097", "colour": "orange", "code": "        Chink is a subclass of Chunk used for words that have Word.chunk == None\n", "error": "none", "author": "tom@organisms.be"}, {"index": "1098", "colour": "orange", "code": "        (e.g., punctuation marks, conjunctions).\n", "error": "none", "author": "tom@organisms.be"}, {"index": "1099", "colour": "orange", "code": "    \"\"\"\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1100", "colour": "orange", "code": "    # For example, to construct a training vector with the head of previous chunks as a feature.\n", "error": "none", "author": "tom@organisms.be"}, {"index": "1101", "colour": "orange", "code": "    # Doing this with Sentence.chunks would discard the punctuation marks and conjunctions\n", "error": "none", "author": "tom@organisms.be"}, {"index": "1102", "colour": "orange", "code": "    # (Sentence.chunks only yields Chunk objects), which amy be useful features.\n", "error": "none", "author": "tom@organisms.be"}, {"index": "1103", "colour": "orange", "code": "    chunks = []\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1104", "colour": "orange", "code": "    for word in sentence:\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1105", "colour": "orange", "code": "        if word.chunk is not None:\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1106", "colour": "orange", "code": "            if len(chunks) == 0 or chunks[-1] != word.chunk:\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1107", "colour": "orange", "code": "                chunks.append(word.chunk)\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1108", "colour": "orange", "code": "        else:\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1109", "colour": "orange", "code": "            ch = Chink(sentence)\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1110", "colour": "orange", "code": "            ch.append(word.copy(ch))\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1111", "colour": "orange", "code": "            chunks.append(ch)\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1112", "colour": "orange", "code": "    return chunks\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1113", "colour": "orange", "code": "\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1114", "colour": "orange", "code": "#--- TEXT ------------------------------------------------------------------------------------------\n", "error": "none", "author": "tom@organisms.be"}, {"index": "1115", "colour": "orange", "code": "\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1116", "colour": "orange", "code": "class Text(list):\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1117", "colour": "orange", "code": "    \n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1118", "colour": "green", "code": "    def __init__(self, string, token=[WORD, POS, CHUNK, PNP, REL, ANCHOR, LEMMA], language=\"en\", encoding=\"utf-8\"):\n", "error": "W", "author": "tom@organisms.be"}, {"index": "1119", "colour": "orange", "code": "        \"\"\" A list of Sentence objects parsed from the given string.\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1120", "colour": "orange", "code": "            The string is the Unicode return value from parse().\n", "error": "none", "author": "tom@organisms.be"}, {"index": "1121", "colour": "orange", "code": "        \"\"\"\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1122", "colour": "orange", "code": "        self.encoding = encoding\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1123", "colour": "orange", "code": "        # Extract token format from TokenString if possible.\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1124", "colour": "orange", "code": "        if _is_tokenstring(string):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "1125", "colour": "orange", "code": "            token, language = string.tags, getattr(string, \"language\", language)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "1126", "colour": "orange", "code": "        if string:\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1127", "colour": "orange", "code": "            # From a string.\n", "error": "none", "author": "tom@organisms.be"}, {"index": "1128", "colour": "orange", "code": "            if isinstance(string, basestring):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "1129", "colour": "orange", "code": "                string = string.splitlines()\n", "error": "none", "author": "tom@organisms.be"}, {"index": "1130", "colour": "orange", "code": "            # From an iterable (e.g., string.splitlines(), open('parsed.txt')).\n", "error": "none", "author": "tom@organisms.be"}, {"index": "1131", "colour": "orange", "code": "            self.extend(Sentence(s, token, language) for s in string)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "1132", "colour": "orange", "code": "    \n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1133", "colour": "orange", "code": "    def insert(self, index, sentence):\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1134", "colour": "orange", "code": "        list.insert(self, index, sentence)\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1135", "colour": "orange", "code": "        sentence.text = self\n", "error": "none", "author": "tom@organisms.be"}, {"index": "1136", "colour": "orange", "code": "        \n", "error": "none", "author": "tom@organisms.be"}, {"index": "1137", "colour": "orange", "code": "    def append(self, sentence):\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1138", "colour": "orange", "code": "        list.append(self, sentence)\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1139", "colour": "orange", "code": "        sentence.text = self\n", "error": "none", "author": "tom@organisms.be"}, {"index": "1140", "colour": "orange", "code": "        \n", "error": "none", "author": "tom@organisms.be"}, {"index": "1141", "colour": "orange", "code": "    def extend(self, sentences):\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1142", "colour": "orange", "code": "        list.extend(self, sentences)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "1143", "colour": "orange", "code": "        for s in sentences:\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1144", "colour": "orange", "code": "            s.text = self\n", "error": "none", "author": "tom@organisms.be"}, {"index": "1145", "colour": "orange", "code": "            \n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1146", "colour": "orange", "code": "    def remove(self, sentence):\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1147", "colour": "orange", "code": "        list.remove(self, sentence)\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1148", "colour": "orange", "code": "        sentence.text = None\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1149", "colour": "orange", "code": "        \n", "error": "none", "author": "tom@organisms.be"}, {"index": "1150", "colour": "orange", "code": "    def pop(self, index):\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1151", "colour": "orange", "code": "        sentence = list.pop(self, index)\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1152", "colour": "orange", "code": "        sentence.text = None\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1153", "colour": "orange", "code": "        return sentence\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1154", "colour": "orange", "code": "    \n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1155", "colour": "orange", "code": "    @property\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1156", "colour": "orange", "code": "    def sentences(self):\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1157", "colour": "orange", "code": "        return list(self)\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1158", "colour": "orange", "code": "        \n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1159", "colour": "orange", "code": "    @property\n", "error": "none", "author": "tom@organisms.be"}, {"index": "1160", "colour": "orange", "code": "    def words(self):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "1161", "colour": "green", "code": "        return list(chain(*self))\n", "error": "W", "author": "tom@organisms.be"}, {"index": "1162", "colour": "orange", "code": "        \n", "error": "none", "author": "tom@organisms.be"}, {"index": "1163", "colour": "orange", "code": "    def copy(self):\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1164", "colour": "orange", "code": "        t = Text(\"\", encoding=self.encoding)\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1165", "colour": "orange", "code": "        for sentence in self:\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1166", "colour": "orange", "code": "            t.append(sentence.copy())\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1167", "colour": "orange", "code": "        return t\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1168", "colour": "orange", "code": "    \n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1169", "colour": "orange", "code": "    # Text.string and unicode(Text) are Unicode strings.\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1170", "colour": "orange", "code": "    @property\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1171", "colour": "orange", "code": "    def string(self):\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1172", "colour": "orange", "code": "        return u\"\\n\".join(sentence.string for sentence in self)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "1173", "colour": "orange", "code": "        \n", "error": "none", "author": "tom@organisms.be"}, {"index": "1174", "colour": "orange", "code": "    def __unicode__(self):\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1175", "colour": "orange", "code": "        return self.string\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1176", "colour": "orange", "code": "        \n", "error": "none", "author": "tom@organisms.be"}, {"index": "1177", "colour": "orange", "code": "    #def __repr__(self):\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1178", "colour": "orange", "code": "    #    return \"\\n\".join([repr(sentence) for sentence in self])\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1179", "colour": "orange", "code": "\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1180", "colour": "orange", "code": "    @property\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1181", "colour": "orange", "code": "    def xml(self):\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1182", "colour": "orange", "code": "        \"\"\" Yields the sentence as an XML-formatted string (plain bytestring, UTF-8 encoded).\n", "error": "none", "author": "tom@organisms.be"}, {"index": "1183", "colour": "orange", "code": "            All the sentences in the XML are wrapped in a <text> element.\n", "error": "none", "author": "tom@organisms.be"}, {"index": "1184", "colour": "orange", "code": "        \"\"\"\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1185", "colour": "green", "code": "        xml = []\n", "error": "W", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1186", "colour": "orange", "code": "        xml.append('<?xml version=\"1.0\" encoding=\"%s\"?>' % XML_ENCODING.get(self.encoding, self.encoding))\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1187", "colour": "orange", "code": "        xml.append(\"<%s>\" % XML_TEXT)\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1188", "colour": "orange", "code": "        xml.extend([sentence.xml for sentence in self])\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1189", "colour": "orange", "code": "        xml.append(\"</%s>\" % XML_TEXT)\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1190", "colour": "orange", "code": "        return \"\\n\".join(xml)\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1191", "colour": "orange", "code": "        \n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1192", "colour": "orange", "code": "    @classmethod\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1193", "colour": "green", "code": "    def from_xml(cls, xml):\n", "error": "W", "author": "tom@organisms.be"}, {"index": "1194", "colour": "orange", "code": "        \"\"\" Returns a new Text from the given XML string.\n", "error": "none", "author": "tom@organisms.be"}, {"index": "1195", "colour": "orange", "code": "        \"\"\"\n", "error": "none", "author": "tom@organisms.be"}, {"index": "1196", "colour": "orange", "code": "        return Text(parse_string(xml))\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1197", "colour": "orange", "code": "        \n", "error": "none", "author": "tom@organisms.be"}, {"index": "1198", "colour": "orange", "code": "    fromxml = from_xml\n", "error": "none", "author": "tom@organisms.be"}, {"index": "1199", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "1200", "colour": "orange", "code": "Tree = Text\n", "error": "none", "author": "tom@organisms.be"}, {"index": "1201", "colour": "orange", "code": "\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1202", "colour": "green", "code": "def tree(string, token=[WORD, POS, CHUNK, PNP, REL, ANCHOR, LEMMA]):\n", "error": "W", "author": "tom@organisms.be"}, {"index": "1203", "colour": "orange", "code": "    \"\"\" Transforms the output of parse() into a Text object.\n", "error": "none", "author": "tom@organisms.be"}, {"index": "1204", "colour": "orange", "code": "        The token parameter lists the order of tags in each token in the input string.\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1205", "colour": "orange", "code": "    \"\"\"\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1206", "colour": "orange", "code": "    return Text(string, token)\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1207", "colour": "orange", "code": "    \n", "error": "none", "author": "tom@organisms.be"}, {"index": "1208", "colour": "orange", "code": "split = tree # Backwards compatibility.\n", "error": "none", "author": "tom@organisms.be"}, {"index": "1209", "colour": "orange", "code": "\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1210", "colour": "green", "code": "def xml(string, token=[WORD, POS, CHUNK, PNP, REL, ANCHOR, LEMMA]):\n", "error": "W", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1211", "colour": "orange", "code": "    \"\"\" Transforms the output of parse() into XML.\n", "error": "none", "author": "tom@organisms.be"}, {"index": "1212", "colour": "orange", "code": "        The token parameter lists the order of tags in each token in the input string.\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1213", "colour": "orange", "code": "    \"\"\"\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1214", "colour": "orange", "code": "    return Text(string, token).xml\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1215", "colour": "orange", "code": "\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1216", "colour": "orange", "code": "### XML ############################################################################################\n", "error": "none", "author": "tom@organisms.be"}, {"index": "1217", "colour": "orange", "code": "\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1218", "colour": "orange", "code": "# Elements:\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1219", "colour": "orange", "code": "XML_TEXT     = \"text\"     # <text>, corresponds to Text object.\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1220", "colour": "orange", "code": "XML_SENTENCE = \"sentence\" # <sentence>, corresponds to Sentence object.\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1221", "colour": "orange", "code": "XML_CHINK    = \"chink\"    # <chink>, where word.chunk.type=None.\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1222", "colour": "orange", "code": "XML_CHUNK    = \"chunk\"    # <chunk>, corresponds to Chunk object.\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1223", "colour": "orange", "code": "XML_PNP      = \"chunk\"    # <chunk type=\"PNP\">, corresponds to PNP chunk object.\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1224", "colour": "orange", "code": "XML_WORD     = \"word\"     # <word>, corresponds to Word object\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1225", "colour": "orange", "code": "\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1226", "colour": "orange", "code": "# Attributes:\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1227", "colour": "orange", "code": "XML_LANGUAGE = \"language\" # <sentence language=\"\">, defines the language used.\n", "error": "none", "author": "tom@organisms.be"}, {"index": "1228", "colour": "orange", "code": "XML_TOKEN    = \"token\"    # <sentence token=\"\">, defines the order of tags in a token.\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1229", "colour": "orange", "code": "XML_TYPE     = \"type\"     # <word type=\"\">, <chunk type=\"\">\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1230", "colour": "orange", "code": "XML_RELATION = \"relation\" # <chunk relation=\"\">\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1231", "colour": "orange", "code": "XML_ID       = \"id\"       # <chunk id=\"\">\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1232", "colour": "orange", "code": "XML_OF       = \"of\"       # <chunk of=\"\"> corresponds to id-attribute.\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1233", "colour": "orange", "code": "XML_ANCHOR   = \"anchor\"   # <chunk anchor=\"\"> corresponds to id-attribute.\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1234", "colour": "orange", "code": "XML_LEMMA    = \"lemma\"    # <word lemma=\"\">\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1235", "colour": "orange", "code": "\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1236", "colour": "orange", "code": "XML_ENCODING = {\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1237", "colour": "orange", "code": "            'utf8' : 'UTF-8', \n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1238", "colour": "orange", "code": "           'utf-8' : 'UTF-8', \n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1239", "colour": "orange", "code": "           'utf16' : 'UTF-16', \n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1240", "colour": "orange", "code": "          'utf-16' : 'UTF-16',\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1241", "colour": "orange", "code": "           'latin' : 'ISO-8859-1', \n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1242", "colour": "orange", "code": "          'latin1' : 'ISO-8859-1', \n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1243", "colour": "orange", "code": "         'latin-1' : 'ISO-8859-1', \n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1244", "colour": "orange", "code": "          'cp1252' : 'windows-1252', \n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1245", "colour": "orange", "code": "    'windows-1252' : 'windows-1252'\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1246", "colour": "orange", "code": "}\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1247", "colour": "orange", "code": "\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1248", "colour": "orange", "code": "def xml_encode(string):\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1249", "colour": "orange", "code": "    \"\"\" Returns the string with XML-safe special characters.\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1250", "colour": "orange", "code": "    \"\"\"\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1251", "colour": "orange", "code": "    string = string.replace(\"&\", \"&amp;\")\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1252", "colour": "orange", "code": "    string = string.replace(\"<\", \"&lt;\")\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1253", "colour": "orange", "code": "    string = string.replace(\">\", \"&gt;\")\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1254", "colour": "orange", "code": "    string = string.replace(\"\\\"\",\"&quot;\")\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1255", "colour": "orange", "code": "    string = string.replace(SLASH, \"/\")\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1256", "colour": "orange", "code": "    return string\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1257", "colour": "orange", "code": "    \n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1258", "colour": "orange", "code": "def xml_decode(string):\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1259", "colour": "orange", "code": "    \"\"\" Returns the string with special characters decoded.\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1260", "colour": "orange", "code": "    \"\"\"\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1261", "colour": "orange", "code": "    string = string.replace(\"&amp;\", \"&\")\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1262", "colour": "orange", "code": "    string = string.replace(\"&lt;\",  \"<\")\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1263", "colour": "orange", "code": "    string = string.replace(\"&gt;\",  \">\")\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1264", "colour": "orange", "code": "    string = string.replace(\"&quot;\",\"\\\"\")\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1265", "colour": "orange", "code": "    string = string.replace(\"/\", SLASH)\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1266", "colour": "orange", "code": "    return string\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1267", "colour": "orange", "code": "\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1268", "colour": "orange", "code": "#--- SENTENCE TO XML -------------------------------------------------------------------------------\n", "error": "none", "author": "tom@organisms.be"}, {"index": "1269", "colour": "orange", "code": "\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1270", "colour": "orange", "code": "# Relation id's in the XML output are relative to the sentence id,\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1271", "colour": "orange", "code": "# so relation 1 in sentence 2 = \"2.1\".\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1272", "colour": "orange", "code": "_UID_SEPARATOR = \".\"\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1273", "colour": "orange", "code": "\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1274", "colour": "blue", "code": "def parse_xml(sentence, tab=\"\\t\", id=\"\"):\n", "error": "R", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1275", "colour": "orange", "code": "    \"\"\" Returns the given Sentence object as an XML-string (plain bytestring, UTF-8 encoded).\n", "error": "none", "author": "tom@organisms.be"}, {"index": "1276", "colour": "orange", "code": "        The tab delimiter is used as indendation for nested elements.\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1277", "colour": "orange", "code": "        The id can be used as a unique identifier per sentence for chunk id's and anchors.\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1278", "colour": "orange", "code": "        For example: \"I eat pizza with a fork.\" =>\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1279", "colour": "orange", "code": "        \n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1280", "colour": "orange", "code": "        <sentence token=\"word, part-of-speech, chunk, preposition, relation, anchor, lemma\" language=\"en\">\n", "error": "none", "author": "tom@organisms.be"}, {"index": "1281", "colour": "orange", "code": "            <chunk type=\"NP\" relation=\"SBJ\" of=\"1\">\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1282", "colour": "orange", "code": "                <word type=\"PRP\" lemma=\"i\">I</word>\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1283", "colour": "orange", "code": "            </chunk>\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1284", "colour": "orange", "code": "            <chunk type=\"VP\" relation=\"VP\" id=\"1\" anchor=\"A1\">\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1285", "colour": "orange", "code": "                <word type=\"VBP\" lemma=\"eat\">eat</word>\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1286", "colour": "orange", "code": "            </chunk>\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1287", "colour": "orange", "code": "            <chunk type=\"NP\" relation=\"OBJ\" of=\"1\">\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1288", "colour": "orange", "code": "                <word type=\"NN\" lemma=\"pizza\">pizza</word>\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1289", "colour": "orange", "code": "            </chunk>\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1290", "colour": "orange", "code": "            <chunk type=\"PNP\" of=\"A1\">\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1291", "colour": "orange", "code": "                <chunk type=\"PP\">\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1292", "colour": "orange", "code": "                    <word type=\"IN\" lemma=\"with\">with</word>\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1293", "colour": "orange", "code": "                </chunk>\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1294", "colour": "orange", "code": "                <chunk type=\"NP\">\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1295", "colour": "orange", "code": "                    <word type=\"DT\" lemma=\"a\">a</word>\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1296", "colour": "orange", "code": "                    <word type=\"NN\" lemma=\"fork\">fork</word>\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1297", "colour": "orange", "code": "                </chunk>\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1298", "colour": "orange", "code": "            </chunk>\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1299", "colour": "orange", "code": "            <chink>\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1300", "colour": "orange", "code": "                <word type=\".\" lemma=\".\">.</word>\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1301", "colour": "orange", "code": "            </chink>\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1302", "colour": "orange", "code": "        </sentence>\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1303", "colour": "orange", "code": "    \"\"\"\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1304", "colour": "orange", "code": "    uid  = lambda *parts: \"\".join([str(id), _UID_SEPARATOR ]+[str(x) for x in parts]).lstrip(_UID_SEPARATOR)\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1305", "colour": "orange", "code": "    push = lambda indent: indent+tab         # push() increases the indentation.\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1306", "colour": "orange", "code": "    pop  = lambda indent: indent[:-len(tab)] # pop() decreases the indentation.\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1307", "colour": "orange", "code": "    indent = tab\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1308", "colour": "green", "code": "    xml = []\n", "error": "W", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1309", "colour": "orange", "code": "    # Start the sentence element:\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1310", "colour": "orange", "code": "    # <sentence token=\"word, part-of-speech, chunk, preposition, relation, anchor, lemma\">\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1311", "colour": "orange", "code": "    xml.append('<%s%s %s=\"%s\" %s=\"%s\">' % (\n", "error": "none", "author": "tom@organisms.be"}, {"index": "1312", "colour": "orange", "code": "        XML_SENTENCE,\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1313", "colour": "orange", "code": "        XML_ID and \" %s=\\\"%s\\\"\" % (XML_ID, str(id)) or \"\",\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1314", "colour": "orange", "code": "        XML_TOKEN, \", \".join(sentence.token),\n", "error": "none", "author": "tom@organisms.be"}, {"index": "1315", "colour": "orange", "code": "        XML_LANGUAGE, sentence.language\n", "error": "none", "author": "tom@organisms.be"}, {"index": "1316", "colour": "orange", "code": "    ))\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1317", "colour": "orange", "code": "    # Collect chunks that are PNP anchors and assign id.\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1318", "colour": "orange", "code": "    anchors = {}\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1319", "colour": "orange", "code": "    for chunk in sentence.chunks:\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1320", "colour": "orange", "code": "        if chunk.attachments:\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1321", "colour": "orange", "code": "            anchors[chunk.start] = len(anchors) + 1\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1322", "colour": "orange", "code": "    # Traverse all words in the sentence.\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1323", "colour": "orange", "code": "    for word in sentence.words:\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1324", "colour": "orange", "code": "        chunk = word.chunk\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1325", "colour": "orange", "code": "        pnp   = word.chunk and word.chunk.pnp or None\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1326", "colour": "orange", "code": "        # Start the PNP element if the chunk is the first chunk in PNP:\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1327", "colour": "orange", "code": "        # <chunk type=\"PNP\" of=\"A1\">\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1328", "colour": "orange", "code": "        if pnp and pnp.start == chunk.start:\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1329", "colour": "orange", "code": "            a = pnp.anchor and ' %s=\"%s\"' % (XML_OF, uid(\"A\", anchors.get(pnp.anchor.start, \"\"))) or \"\"\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1330", "colour": "orange", "code": "            xml.append(indent + '<%s %s=\"PNP\"%s>' % (XML_CHUNK, XML_TYPE, a))\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1331", "colour": "orange", "code": "            indent = push(indent)\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1332", "colour": "orange", "code": "        # Start the chunk element if the word is the first word in the chunk:\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1333", "colour": "orange", "code": "        # <chunk type=\"VP\" relation=\"VP\" id=\"1\" anchor=\"A1\">\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1334", "colour": "orange", "code": "        if chunk and chunk.start == word.index:\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1335", "colour": "orange", "code": "            if chunk.relations:\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1336", "colour": "orange", "code": "                # Create the shortest possible attribute values for multiple relations, \n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1337", "colour": "orange", "code": "                # e.g., [(1,\"OBJ\"),(2,\"OBJ\")]) => relation=\"OBJ\" id=\"1|2\"\n", "error": "none", "author": "tom@organisms.be"}, {"index": "1338", "colour": "orange", "code": "                r1 = unzip(0, chunk.relations) # Relation id's.\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1339", "colour": "orange", "code": "                r2 = unzip(1, chunk.relations) # Relation roles.\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1340", "colour": "orange", "code": "                r1 = [x is None and \"-\" or uid(x) for x in r1]\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1341", "colour": "orange", "code": "                r2 = [x is None and \"-\" or x for x in r2]\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1342", "colour": "orange", "code": "                r1 = not len(unique(r1)) == 1 and \"|\".join(r1) or (r1+[None])[0]\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1343", "colour": "orange", "code": "                r2 = not len(unique(r2)) == 1 and \"|\".join(r2) or (r2+[None])[0]\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1344", "colour": "orange", "code": "            xml.append(indent + '<%s%s%s%s%s%s>' % (\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1345", "colour": "orange", "code": "                XML_CHUNK,\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1346", "colour": "orange", "code": "                chunk.type and ' %s=\"%s\"' % (XML_TYPE, chunk.type) or \"\",\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1347", "colour": "orange", "code": "                chunk.relations and chunk.role != None and ' %s=\"%s\"' % (XML_RELATION, r2) or \"\",\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1348", "colour": "orange", "code": "                chunk.relation  and chunk.type == \"VP\" and ' %s=\"%s\"' % (XML_ID, uid(chunk.relation)) or \"\",\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1349", "colour": "orange", "code": "                chunk.relation  and chunk.type != \"VP\" and ' %s=\"%s\"' % (XML_OF, r1) or \"\",\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1350", "colour": "orange", "code": "                chunk.attachments and ' %s=\"%s\"' % (XML_ANCHOR, uid(\"A\",anchors[chunk.start])) or \"\"\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1351", "colour": "orange", "code": "            ))\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1352", "colour": "orange", "code": "            indent = push(indent)\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1353", "colour": "orange", "code": "        # Words outside of a chunk are wrapped in a <chink> tag:\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1354", "colour": "orange", "code": "        # <chink>\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1355", "colour": "orange", "code": "        if not chunk:\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1356", "colour": "orange", "code": "            xml.append(indent + '<%s>' % XML_CHINK)\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1357", "colour": "orange", "code": "            indent = push(indent)\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1358", "colour": "orange", "code": "        # Add the word element:\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1359", "colour": "orange", "code": "        # <word type=\"VBP\" lemma=\"eat\">eat</word>\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1360", "colour": "orange", "code": "        xml.append(indent + '<%s%s%s%s>%s</%s>' % (\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1361", "colour": "orange", "code": "            XML_WORD,\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1362", "colour": "orange", "code": "            word.type and ' %s=\"%s\"' % (XML_TYPE, xml_encode(word.type)) or '',\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1363", "colour": "orange", "code": "            word.lemma and ' %s=\"%s\"' % (XML_LEMMA, xml_encode(word.lemma)) or '',\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1364", "colour": "orange", "code": "            (\" \"+\" \".join(['%s=\"%s\"' % (k,v) for k,v in word.custom_tags.items() if v != None])).rstrip(),\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1365", "colour": "orange", "code": "            xml_encode(unicode(word)),\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1366", "colour": "orange", "code": "            XML_WORD\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1367", "colour": "orange", "code": "        ))\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1368", "colour": "orange", "code": "        if not chunk:\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1369", "colour": "orange", "code": "            # Close the <chink> element if outside of a chunk.\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1370", "colour": "orange", "code": "            indent = pop(indent); xml.append(indent + \"</%s>\" % XML_CHINK)\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1371", "colour": "orange", "code": "        if chunk and chunk.stop-1 == word.index:\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1372", "colour": "orange", "code": "            # Close the <chunk> element if this is the last word in the chunk.\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1373", "colour": "orange", "code": "            indent = pop(indent); xml.append(indent + \"</%s>\" % XML_CHUNK)\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1374", "colour": "orange", "code": "        if pnp and pnp.stop-1 == word.index:\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1375", "colour": "orange", "code": "            # Close the PNP element if this is the last word in the PNP.\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1376", "colour": "orange", "code": "            indent = pop(indent); xml.append(indent + \"</%s>\" % XML_CHUNK)\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1377", "colour": "orange", "code": "    xml.append(\"</%s>\" % XML_SENTENCE)\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1378", "colour": "orange", "code": "    # Return as a plain str.\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1379", "colour": "orange", "code": "    return \"\\n\".join(xml).encode(\"utf-8\")\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1380", "colour": "orange", "code": "\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1381", "colour": "orange", "code": "#--- XML TO SENTENCE(S) ----------------------------------------------------------------------------\n", "error": "none", "author": "tom@organisms.be"}, {"index": "1382", "colour": "orange", "code": "\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1383", "colour": "orange", "code": "# Classes XML and XMLNode provide an abstract interface to cElementTree.\n", "error": "none", "author": "tom@organisms.be"}, {"index": "1384", "colour": "orange", "code": "# The advantage is that we can switch to a faster parser in the future\n", "error": "none", "author": "tom@organisms.be"}, {"index": "1385", "colour": "orange", "code": "# (as we did when switching from xml.dom.minidom to xml.etree).\n", "error": "none", "author": "tom@organisms.be"}, {"index": "1386", "colour": "orange", "code": "# cElemenTree is fast; but the fastest way is to simply store and reload the parsed Unicode string.\n", "error": "none", "author": "tom@organisms.be"}, {"index": "1387", "colour": "orange", "code": "# The disadvantage is that we need to remember the token format, see (1) below:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "1388", "colour": "orange", "code": "# s = \"...\"\n", "error": "none", "author": "tom@organisms.be"}, {"index": "1389", "colour": "orange", "code": "# s = parse(s, lemmata=True)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "1390", "colour": "orange", "code": "# open(\"parsed.txt\",  \"w\", encoding=\"utf-8\").write(s)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "1391", "colour": "orange", "code": "# s = open(\"parsed.txt\", encoding=\"utf-8\")\n", "error": "none", "author": "tom@organisms.be"}, {"index": "1392", "colour": "orange", "code": "# s = Text(s, token=[WORD, POS, CHUNK, PNP, LEMMA]) # (1)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "1393", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "1394", "colour": "blue", "code": "class XML(object):\n", "error": "R", "author": "tom@organisms.be"}, {"index": "1395", "colour": "orange", "code": "    def __init__(self, string):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "1396", "colour": "orange", "code": "        from xml.etree import cElementTree\n", "error": "none", "author": "tom@organisms.be"}, {"index": "1397", "colour": "orange", "code": "        self.root = cElementTree.fromstring(string)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "1398", "colour": "orange", "code": "    def __call__(self, tag):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "1399", "colour": "orange", "code": "        return [XMLNode(e) for e in self.root.findall(tag)]\n", "error": "none", "author": "tom@organisms.be"}, {"index": "1400", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "1401", "colour": "orange", "code": "class XMLNode(object):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "1402", "colour": "orange", "code": "    def __init__(self, element):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "1403", "colour": "orange", "code": "        self.element = element\n", "error": "none", "author": "tom@organisms.be"}, {"index": "1404", "colour": "orange", "code": "    @property\n", "error": "none", "author": "tom@organisms.be"}, {"index": "1405", "colour": "orange", "code": "    def tag(self):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "1406", "colour": "orange", "code": "        return self.element.tag\n", "error": "none", "author": "tom@organisms.be"}, {"index": "1407", "colour": "orange", "code": "    @property\n", "error": "none", "author": "tom@organisms.be"}, {"index": "1408", "colour": "orange", "code": "    def value(self):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "1409", "colour": "orange", "code": "        return self.element.text\n", "error": "none", "author": "tom@organisms.be"}, {"index": "1410", "colour": "orange", "code": "    def __iter__(self):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "1411", "colour": "orange", "code": "        return iter(XMLNode(e) for e in self.element)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "1412", "colour": "orange", "code": "    def __getitem__(self, k):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "1413", "colour": "orange", "code": "        return self.element.attrib[k]\n", "error": "none", "author": "tom@organisms.be"}, {"index": "1414", "colour": "orange", "code": "    def get(self, k, default=\"\"):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "1415", "colour": "orange", "code": "        return self.element.attrib.get(k, default)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "1416", "colour": "orange", "code": "\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1417", "colour": "orange", "code": "# The structure of linked anchor chunks and PNP attachments\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1418", "colour": "orange", "code": "# is collected from _parse_token() calls.\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1419", "colour": "orange", "code": "_anchors     = {} # {u'A1': [[u'eat', u'VBP', u'B-VP', 'O', u'VP-1', 'O', u'eat', 'O']]}\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1420", "colour": "orange", "code": "_attachments = {} # {u'A1': [[[u'with', u'IN', u'B-PP', 'B-PNP', u'PP', 'O', u'with', 'O'], \n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1421", "colour": "orange", "code": "                  #           [u'a', u'DT', u'B-NP', 'I-PNP', u'NP', 'O', u'a', 'O'], \n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1422", "colour": "orange", "code": "                  #           [u'fork', u'NN', u'I-NP', 'I-PNP', u'NP', 'O', u'fork', 'O']]]}\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1423", "colour": "orange", "code": "\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1424", "colour": "orange", "code": "# This is a fallback if for some reason we fail to import MBSP.TokenString,\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1425", "colour": "orange", "code": "# e.g., when tree.py is part of another project.\n", "error": "none", "author": "tom@organisms.be"}, {"index": "1426", "colour": "blue", "code": "class TaggedString(unicode):\n", "error": "R", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1427", "colour": "green", "code": "    def __new__(cls, string, tags=[\"word\"], language=\"en\"):\n", "error": "W", "author": "tom@organisms.be"}, {"index": "1428", "colour": "orange", "code": "        if isinstance(string, unicode) and hasattr(string, \"tags\"): \n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1429", "colour": "orange", "code": "            tags, language = string.tags, getattr(string, \"language\", language)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "1430", "colour": "orange", "code": "        s = unicode.__new__(cls, string)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "1431", "colour": "orange", "code": "        s.tags = list(tags)\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1432", "colour": "orange", "code": "        s.language = language\n", "error": "none", "author": "tom@organisms.be"}, {"index": "1433", "colour": "orange", "code": "        return s\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1434", "colour": "orange", "code": "\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1435", "colour": "blue", "code": "def parse_string(xml):\n", "error": "R", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1436", "colour": "orange", "code": "    \"\"\" Returns a slash-formatted string from the given XML representation.\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1437", "colour": "orange", "code": "        The return value is a TokenString (for MBSP) or TaggedString (for Pattern).\n", "error": "none", "author": "tom@organisms.be"}, {"index": "1438", "colour": "orange", "code": "    \"\"\"\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1439", "colour": "orange", "code": "    string = \"\"\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1440", "colour": "orange", "code": "    # Traverse all the <sentence> elements in the XML.\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1441", "colour": "orange", "code": "    dom = XML(xml)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "1442", "colour": "orange", "code": "    for sentence in dom(XML_SENTENCE):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "1443", "colour": "orange", "code": "        _anchors.clear()     # Populated by calling _parse_tokens().\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1444", "colour": "orange", "code": "        _attachments.clear() # Populated by calling _parse_tokens().\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1445", "colour": "orange", "code": "        # Parse the language from <sentence language=\"\">.\n", "error": "none", "author": "tom@organisms.be"}, {"index": "1446", "colour": "orange", "code": "        language = sentence.get(XML_LANGUAGE, \"en\")\n", "error": "none", "author": "tom@organisms.be"}, {"index": "1447", "colour": "orange", "code": "        # Parse the token tag format from <sentence token=\"\">.\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1448", "colour": "orange", "code": "        # This information is returned in TokenString.tags,\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1449", "colour": "orange", "code": "        # so the format and order of the token tags is retained when exporting/importing as XML.\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1450", "colour": "green", "code": "        format = sentence.get(XML_TOKEN, [WORD, POS, CHUNK, PNP, REL, ANCHOR, LEMMA])\n", "error": "W", "author": "tom@organisms.be"}, {"index": "1451", "colour": "orange", "code": "        format = not isinstance(format, basestring) and format or format.replace(\" \",\"\").split(\",\")\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1452", "colour": "orange", "code": "        # Traverse all <chunk> and <chink> elements in the sentence.\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1453", "colour": "orange", "code": "        # Find the <word> elements inside and create tokens.\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1454", "colour": "orange", "code": "        tokens = []\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1455", "colour": "orange", "code": "        for chunk in sentence:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "1456", "colour": "orange", "code": "            tokens.extend(_parse_tokens(chunk, format))\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1457", "colour": "orange", "code": "        # Attach PNP's to their anchors.\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1458", "colour": "orange", "code": "        # Keys in _anchors have linked anchor chunks (each chunk is a list of tokens).\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1459", "colour": "orange", "code": "        # The keys correspond to the keys in _attachments, which have linked PNP chunks.\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1460", "colour": "orange", "code": "        if ANCHOR in format:\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1461", "colour": "orange", "code": "            A, P, a, i = _anchors, _attachments, 1, format.index(ANCHOR)\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1462", "colour": "green", "code": "            for id in sorted(A.keys()):\n", "error": "W", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1463", "colour": "orange", "code": "                for token in A[id]:\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1464", "colour": "orange", "code": "                    token[i] += \"-\"+\"-\".join([\"A\"+str(a+p) for p in range(len(P[id]))])\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1465", "colour": "orange", "code": "                    token[i]  = token[i].strip(\"O-\")\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1466", "colour": "orange", "code": "                for p, pnp in enumerate(P[id]):\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1467", "colour": "orange", "code": "                    for token in pnp: \n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1468", "colour": "orange", "code": "                        token[i] += \"-\"+\"P\"+str(a+p)\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1469", "colour": "orange", "code": "                        token[i]  = token[i].strip(\"O-\")\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1470", "colour": "orange", "code": "                a += len(P[id])\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1471", "colour": "orange", "code": "        # Collapse the tokens to string.\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1472", "colour": "orange", "code": "        # Separate multiple sentences with a new line.\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1473", "colour": "orange", "code": "        tokens = [\"/\".join([tag for tag in token]) for token in tokens]\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1474", "colour": "orange", "code": "        tokens = \" \".join(tokens)\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1475", "colour": "orange", "code": "        string += tokens + \"\\n\"\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1476", "colour": "orange", "code": "    # Return a TokenString, which is a unicode string that transforms easily\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1477", "colour": "orange", "code": "    # into a plain str, a list of tokens, or a Sentence.\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1478", "colour": "orange", "code": "    try:\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1479", "colour": "orange", "code": "        if MBSP: from mbsp import TokenString\n", "error": "none", "author": "tom@organisms.be"}, {"index": "1480", "colour": "orange", "code": "        return TokenString(string.strip(), tags=format, language=language)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "1481", "colour": "green", "code": "    except:\n", "error": "W", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1482", "colour": "orange", "code": "        return TaggedString(string.strip(), tags=format, language=language)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "1483", "colour": "orange", "code": "\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1484", "colour": "green", "code": "def _parse_tokens(chunk, format=[WORD, POS, CHUNK, PNP, REL, ANCHOR, LEMMA]):\n", "error": "W", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1485", "colour": "orange", "code": "    \"\"\" Parses tokens from <word> elements in the given XML <chunk> element.\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1486", "colour": "orange", "code": "        Returns a flat list of tokens, in which each token is [WORD, POS, CHUNK, PNP, RELATION, ANCHOR, LEMMA].\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1487", "colour": "orange", "code": "        If a <chunk type=\"PNP\"> is encountered, traverses all of the chunks in the PNP.\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1488", "colour": "orange", "code": "    \"\"\"\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1489", "colour": "orange", "code": "    tokens = []\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1490", "colour": "orange", "code": "    # Only process <chunk> and <chink> elements, \n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1491", "colour": "orange", "code": "    # text nodes in between return an empty list.\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1492", "colour": "orange", "code": "    if not (chunk.tag == XML_CHUNK or chunk.tag == XML_CHINK):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "1493", "colour": "orange", "code": "        return []\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1494", "colour": "green", "code": "    type = chunk.get(XML_TYPE, \"O\")\n", "error": "W", "author": "tom@organisms.be"}, {"index": "1495", "colour": "orange", "code": "    if type == \"PNP\":\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1496", "colour": "orange", "code": "        # For, <chunk type=\"PNP\">, recurse all the child chunks inside the PNP.\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1497", "colour": "orange", "code": "        for ch in chunk:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "1498", "colour": "orange", "code": "            tokens.extend(_parse_tokens(ch, format))\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1499", "colour": "orange", "code": "        # Tag each of them as part of the PNP.\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1500", "colour": "orange", "code": "        if PNP in format:\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1501", "colour": "orange", "code": "            i = format.index(PNP)\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1502", "colour": "orange", "code": "            for j, token in enumerate(tokens):\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1503", "colour": "orange", "code": "                token[i] = (j==0 and \"B-\" or \"I-\") + \"PNP\"\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1504", "colour": "orange", "code": "        # Store attachments so we can construct anchor id's in parse_string().\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1505", "colour": "orange", "code": "        # This has to be done at the end, when all the chunks have been found.\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1506", "colour": "orange", "code": "        a = chunk.get(XML_OF).split(_UID_SEPARATOR)[-1]\n", "error": "none", "author": "tom@organisms.be"}, {"index": "1507", "colour": "orange", "code": "        if a:\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1508", "colour": "orange", "code": "            _attachments.setdefault(a, [])\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1509", "colour": "orange", "code": "            _attachments[a].append(tokens)\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1510", "colour": "orange", "code": "        return tokens\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1511", "colour": "orange", "code": "    # For <chunk type-\"VP\" id=\"1\">, the relation is VP-1.\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1512", "colour": "orange", "code": "    # For <chunk type=\"NP\" relation=\"OBJ\" of=\"1\">, the relation is NP-OBJ-1.\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1513", "colour": "orange", "code": "    relation = _parse_relation(chunk, type)\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1514", "colour": "orange", "code": "    # Process all of the <word> elements in the chunk, for example:\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1515", "colour": "orange", "code": "    # <word type=\"NN\" lemma=\"pizza\">pizza</word> => [pizza, NN, I-NP, O, NP-OBJ-1, O, pizza]\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1516", "colour": "green", "code": "    for word in filter(lambda n: n.tag == XML_WORD, chunk):\n", "error": "W", "author": "tom@organisms.be"}, {"index": "1517", "colour": "orange", "code": "        tokens.append(_parse_token(word, chunk=type, relation=relation, format=format))\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1518", "colour": "orange", "code": "    # Add the IOB chunk tags:\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1519", "colour": "orange", "code": "    # words at the start of a chunk are marked with B-, words inside with I-.\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1520", "colour": "orange", "code": "    if CHUNK in format:\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1521", "colour": "orange", "code": "        i = format.index(CHUNK)\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1522", "colour": "orange", "code": "        for j, token in enumerate(tokens):\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1523", "colour": "orange", "code": "            token[i] = token[i] != \"O\" and ((j==0 and \"B-\" or \"I-\") + token[i]) or \"O\"\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1524", "colour": "orange", "code": "    # The chunk can be the anchor of one or more PNP chunks.\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1525", "colour": "orange", "code": "    # Store anchors so we can construct anchor id's in parse_string().\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1526", "colour": "orange", "code": "    a = chunk.get(XML_ANCHOR, \"\").split(_UID_SEPARATOR)[-1]\n", "error": "none", "author": "tom@organisms.be"}, {"index": "1527", "colour": "orange", "code": "    if a: \n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1528", "colour": "orange", "code": "        _anchors[a] = tokens\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1529", "colour": "orange", "code": "    return tokens\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1530", "colour": "orange", "code": "\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1531", "colour": "green", "code": "def _parse_relation(chunk, type=\"O\"):\n", "error": "W", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1532", "colour": "orange", "code": "    \"\"\" Returns a string of the roles and relations parsed from the given <chunk> element.\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1533", "colour": "orange", "code": "        The chunk type (which is part of the relation string) can be given as parameter.\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1534", "colour": "orange", "code": "    \"\"\"\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1535", "colour": "orange", "code": "    r1 = chunk.get(XML_RELATION)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "1536", "colour": "orange", "code": "    r2 = chunk.get(XML_ID, chunk.get(XML_OF))\n", "error": "none", "author": "tom@organisms.be"}, {"index": "1537", "colour": "orange", "code": "    r1 = [x != \"-\" and x or None for x in r1.split(\"|\")] or [None]\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1538", "colour": "orange", "code": "    r2 = [x != \"-\" and x or None for x in r2.split(\"|\")] or [None]\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1539", "colour": "orange", "code": "    r2 = [x is not None and x.split(_UID_SEPARATOR )[-1] or x for x in r2]\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1540", "colour": "orange", "code": "    if len(r1) < len(r2): r1 = r1 + r1 * (len(r2)-len(r1)) # [1] [\"SBJ\", \"OBJ\"] => \"SBJ-1;OBJ-1\"\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1541", "colour": "orange", "code": "    if len(r2) < len(r1): r2 = r2 + r2 * (len(r1)-len(r2)) # [2,4] [\"OBJ\"] => \"OBJ-2;OBJ-4\"\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1542", "colour": "orange", "code": "    return \";\".join([\"-\".join([x for x in (type, r1, r2) if x]) for r1, r2 in zip(r1, r2)])    \n", "error": "none", "author": "tom@organisms.be"}, {"index": "1543", "colour": "orange", "code": "\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1544", "colour": "blue", "code": "def _parse_token(word, chunk=\"O\", pnp=\"O\", relation=\"O\", anchor=\"O\", \n", "error": "R", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1545", "colour": "green", "code": "                 format=[WORD, POS, CHUNK, PNP, REL, ANCHOR, LEMMA]):\n", "error": "W", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1546", "colour": "orange", "code": "    \"\"\" Returns a list of token tags parsed from the given <word> element.\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1547", "colour": "orange", "code": "        Tags that are not attributes in a <word> (e.g., relation) can be given as parameters.\n", "error": "none", "author": "tom@organisms.be"}, {"index": "1548", "colour": "orange", "code": "    \"\"\"\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1549", "colour": "orange", "code": "    tags = []\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1550", "colour": "orange", "code": "    for tag in format:\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1551", "colour": "orange", "code": "        if   tag == WORD   : tags.append(xml_decode(word.value))\n", "error": "none", "author": "tom@organisms.be"}, {"index": "1552", "colour": "orange", "code": "        elif tag == POS    : tags.append(xml_decode(word.get(XML_TYPE, \"O\")))\n", "error": "none", "author": "tom@organisms.be"}, {"index": "1553", "colour": "orange", "code": "        elif tag == CHUNK  : tags.append(chunk)\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1554", "colour": "orange", "code": "        elif tag == PNP    : tags.append(pnp)\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1555", "colour": "orange", "code": "        elif tag == REL    : tags.append(relation)\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1556", "colour": "orange", "code": "        elif tag == ANCHOR : tags.append(anchor)\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1557", "colour": "orange", "code": "        elif tag == LEMMA  : tags.append(xml_decode(word.get(XML_LEMMA, \"\")))\n", "error": "none", "author": "tom@organisms.be"}, {"index": "1558", "colour": "orange", "code": "        else:\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1559", "colour": "orange", "code": "            # Custom tags when the parser has been extended, see also Word.custom_tags{}.\n", "error": "none", "author": "tom@organisms.be"}, {"index": "1560", "colour": "orange", "code": "            tags.append(xml_decode(word.get(tag, \"O\")))\n", "error": "none", "author": "tom@organisms.be"}, {"index": "1561", "colour": "orange", "code": "    return tags\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1562", "colour": "orange", "code": "\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1563", "colour": "orange", "code": "### NLTK TREE ######################################################################################\n", "error": "none", "author": "tom@organisms.be"}, {"index": "1564", "colour": "orange", "code": "\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1565", "colour": "orange", "code": "def nltk_tree(sentence):\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1566", "colour": "orange", "code": "    \"\"\" Returns an NLTK nltk.tree.Tree object from the given Sentence.\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1567", "colour": "orange", "code": "        The NLTK module should be on the search path somewhere.\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1568", "colour": "orange", "code": "    \"\"\"\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1569", "colour": "green", "code": "    from nltk import tree\n", "error": "W", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1570", "colour": "orange", "code": "    def do_pnp(pnp):\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1571", "colour": "orange", "code": "        # Returns the PNPChunk (and the contained Chunk objects) in NLTK bracket format.\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1572", "colour": "orange", "code": "        s = ' '.join([do_chunk(ch) for ch in pnp.chunks])\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1573", "colour": "orange", "code": "        return '(PNP %s)' % s\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1574", "colour": "orange", "code": "    \n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1575", "colour": "orange", "code": "    def do_chunk(ch):\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1576", "colour": "orange", "code": "        # Returns the Chunk in NLTK bracket format. Recurse attached PNP's.\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1577", "colour": "orange", "code": "        s = ' '.join(['(%s %s)' % (w.pos, w.string) for w in ch.words])\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1578", "colour": "orange", "code": "        s+= ' '.join([do_pnp(pnp) for pnp in ch.attachments])\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1579", "colour": "orange", "code": "        return '(%s %s)' % (ch.type, s)\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1580", "colour": "orange", "code": "    \n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1581", "colour": "orange", "code": "    T = ['(S']\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1582", "colour": "orange", "code": "    v = [] # PNP's already visited.\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1583", "colour": "orange", "code": "    for ch in sentence.chunked():\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1584", "colour": "orange", "code": "        if not ch.pnp and isinstance(ch, Chink):\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1585", "colour": "orange", "code": "            T.append('(%s %s)' % (ch.words[0].pos, ch.words[0].string))\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1586", "colour": "orange", "code": "        elif not ch.pnp:\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1587", "colour": "orange", "code": "            T.append(do_chunk(ch))\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1588", "colour": "orange", "code": "        #elif ch.pnp not in v:\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1589", "colour": "orange", "code": "        elif ch.pnp.anchor is None and ch.pnp not in v:\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1590", "colour": "orange", "code": "            # The chunk is part of a PNP without an anchor.\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1591", "colour": "orange", "code": "            T.append(do_pnp(ch.pnp))\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1592", "colour": "orange", "code": "            v.append(ch.pnp)\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1593", "colour": "orange", "code": "    T.append(')')\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1594", "colour": "orange", "code": "    return tree.bracket_parse(' '.join(T))\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1595", "colour": "orange", "code": "\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1596", "colour": "orange", "code": "### GRAPHVIZ DOT ###################################################################################\n", "error": "none", "author": "tom@organisms.be"}, {"index": "1597", "colour": "orange", "code": "\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1598", "colour": "orange", "code": "BLUE = {\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1599", "colour": "orange", "code": "       '' : (\"#f0f5ff\", \"#000000\"),\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1600", "colour": "orange", "code": "     'VP' : (\"#e6f0ff\", \"#000000\"),\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1601", "colour": "orange", "code": "    'SBJ' : (\"#64788c\", \"#ffffff\"),\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1602", "colour": "orange", "code": "    'OBJ' : (\"#64788c\", \"#ffffff\"),\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1603", "colour": "orange", "code": "}\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1604", "colour": "orange", "code": "\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1605", "colour": "orange", "code": "def _colorize(x, colors):\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1606", "colour": "orange", "code": "    s = ''\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1607", "colour": "orange", "code": "    if isinstance(x, Word):\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1608", "colour": "orange", "code": "        x = x.chunk\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1609", "colour": "orange", "code": "    if isinstance(x, Chunk):\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1610", "colour": "orange", "code": "        s = ',style=filled, fillcolor=\"%s\", fontcolor=\"%s\"' % ( \\\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1611", "colour": "orange", "code": "            colors.get(x.role) or \\\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1612", "colour": "orange", "code": "            colors.get(x.type) or \\\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1613", "colour": "orange", "code": "            colors.get('') or (\"none\", \"black\"))\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1614", "colour": "orange", "code": "    return s\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1615", "colour": "orange", "code": "\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1616", "colour": "blue", "code": "def graphviz_dot(sentence, font=\"Arial\", colors=BLUE):\n", "error": "R", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1617", "colour": "orange", "code": "    \"\"\" Returns a dot-formatted string that can be visualized as a graph in GraphViz.\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1618", "colour": "orange", "code": "    \"\"\"\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1619", "colour": "orange", "code": "    s  = 'digraph sentence {\\n'\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1620", "colour": "orange", "code": "    s += '\\tranksep=0.75;\\n'\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1621", "colour": "orange", "code": "    s += '\\tnodesep=0.15;\\n'\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1622", "colour": "orange", "code": "    s += '\\tnode [penwidth=1, fontname=\"%s\", shape=record, margin=0.1, height=0.35];\\n' % font\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1623", "colour": "orange", "code": "    s += '\\tedge [penwidth=1];\\n'\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1624", "colour": "orange", "code": "    s += '\\t{ rank=same;\\n'\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1625", "colour": "orange", "code": "    # Create node groups for words, chunks and PNP chunks.\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1626", "colour": "orange", "code": "    for w in sentence.words:\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1627", "colour": "orange", "code": "        s += '\\t\\tword%s [label=\"<f0>%s|<f1>%s\"%s];\\n' % (w.index, w.string, w.type, _colorize(w, colors))\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1628", "colour": "orange", "code": "    for w in sentence.words[:-1]:\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1629", "colour": "orange", "code": "        # Invisible edges forces the words into the right order:\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1630", "colour": "orange", "code": "        s += '\\t\\tword%s -> word%s [color=none];\\n' % (w.index, w.index+1)\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1631", "colour": "orange", "code": "    s += '\\t}\\n'\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1632", "colour": "orange", "code": "    s += '\\t{ rank=same;\\n'        \n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1633", "colour": "orange", "code": "    for i, ch in enumerate(sentence.chunks):\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1634", "colour": "orange", "code": "        s += '\\t\\tchunk%s [label=\"<f0>%s\"%s];\\n' % (i+1, \"-\".join([x for x in (\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1635", "colour": "orange", "code": "            ch.type, ch.role, str(ch.relation or '')) if x]) or '-', _colorize(ch, colors))\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1636", "colour": "orange", "code": "    for i, ch in enumerate(sentence.chunks[:-1]):\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1637", "colour": "orange", "code": "        # Invisible edges forces the chunks into the right order:\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1638", "colour": "orange", "code": "        s += '\\t\\tchunk%s -> chunk%s [color=none];\\n' % (i+1, i+2)\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1639", "colour": "orange", "code": "    s += '}\\n'\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1640", "colour": "orange", "code": "    s += '\\t{ rank=same;\\n'\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1641", "colour": "orange", "code": "    for i, ch in enumerate(sentence.pnp):\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1642", "colour": "orange", "code": "        s += '\\t\\tpnp%s [label=\"<f0>PNP\"%s];\\n' % (i+1, _colorize(ch, colors))\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1643", "colour": "orange", "code": "    s += '\\t}\\n'\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1644", "colour": "orange", "code": "    s += '\\t{ rank=same;\\n S [shape=circle, margin=0.25, penwidth=2]; }\\n'\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1645", "colour": "orange", "code": "    # Connect words to chunks.\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1646", "colour": "orange", "code": "    # Connect chunks to PNP or S.\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1647", "colour": "orange", "code": "    for i, ch in enumerate(sentence.chunks):\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1648", "colour": "orange", "code": "        for w in ch:\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1649", "colour": "orange", "code": "            s += '\\tword%s -> chunk%s;\\n' % (w.index, i+1)\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1650", "colour": "orange", "code": "        if ch.pnp:\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1651", "colour": "orange", "code": "            s += '\\tchunk%s -> pnp%s;\\n' % (i+1, sentence.pnp.index(ch.pnp)+1)\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1652", "colour": "orange", "code": "        else:\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1653", "colour": "orange", "code": "            s += '\\tchunk%s -> S;\\n' % (i+1)\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1654", "colour": "orange", "code": "        if ch.type == 'VP':\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1655", "colour": "orange", "code": "            # Indicate related chunks with a dotted\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1656", "colour": "orange", "code": "            for r in ch.related:\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1657", "colour": "orange", "code": "                s += '\\tchunk%s -> chunk%s [style=dotted, arrowhead=none];\\n' % (\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1658", "colour": "orange", "code": "                    i+1, sentence.chunks.index(r)+1)\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1659", "colour": "orange", "code": "    # Connect PNP to anchor chunk or S.\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1660", "colour": "orange", "code": "    for i, ch in enumerate(sentence.pnp):\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1661", "colour": "orange", "code": "        if ch.anchor:\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1662", "colour": "orange", "code": "            s += '\\tpnp%s -> chunk%s;\\n' % (i+1, sentence.chunks.index(ch.anchor)+1)\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1663", "colour": "orange", "code": "            s += '\\tpnp%s -> S [color=none];\\n' % (i+1)\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1664", "colour": "orange", "code": "        else:\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1665", "colour": "orange", "code": "            s += '\\tpnp%s -> S;\\n' % (i+1)\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1666", "colour": "orange", "code": "    s += \"}\"\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1667", "colour": "orange", "code": "    return s\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1668", "colour": "orange", "code": "\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1669", "colour": "orange", "code": "### STDOUT TABLE ###################################################################################\n", "error": "none", "author": "tom@organisms.be"}, {"index": "1670", "colour": "orange", "code": "\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1671", "colour": "blue", "code": "def table(sentence, fill=1, placeholder=\"-\"):\n", "error": "R", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1672", "colour": "orange", "code": "    \"\"\" Returns a string where the tags of tokens in the sentence are organized in outlined columns.\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1673", "colour": "orange", "code": "    \"\"\"\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1674", "colour": "orange", "code": "    tags  = [WORD, POS, IOB, CHUNK, ROLE, REL, PNP, ANCHOR, LEMMA]\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1675", "colour": "orange", "code": "    tags += [tag for tag in sentence.token if tag not in tags]\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1676", "colour": "green", "code": "    def format(token, tag):\n", "error": "W", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1677", "colour": "orange", "code": "        # Returns the token tag as a string.\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1678", "colour": "orange", "code": "        if   tag == WORD   : s = token.string\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1679", "colour": "orange", "code": "        elif tag == POS    : s = token.type\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1680", "colour": "orange", "code": "        elif tag == IOB    : s = token.chunk and (token.index == token.chunk.start and \"B\" or \"I\")\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1681", "colour": "orange", "code": "        elif tag == CHUNK  : s = token.chunk and token.chunk.type\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1682", "colour": "orange", "code": "        elif tag == ROLE   : s = token.chunk and token.chunk.role\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1683", "colour": "orange", "code": "        elif tag == REL    : s = token.chunk and token.chunk.relation and str(token.chunk.relation)\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1684", "colour": "orange", "code": "        elif tag == PNP    : s = token.chunk and token.chunk.pnp and token.chunk.pnp.type\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1685", "colour": "orange", "code": "        elif tag == ANCHOR : s = token.chunk and token.chunk.anchor_id\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1686", "colour": "orange", "code": "        elif tag == LEMMA  : s = token.lemma\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1687", "colour": "orange", "code": "        else               : s = token.custom_tags.get(tag)\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1688", "colour": "orange", "code": "        return s or placeholder\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1689", "colour": "orange", "code": "    def outline(column, fill=1, padding=3, align=\"left\"):\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1690", "colour": "orange", "code": "        # Add spaces to each string in the column so they line out to the highest width.\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1691", "colour": "orange", "code": "        n = max([len(x) for x in column]+[fill])\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1692", "colour": "orange", "code": "        if align == \"left\"  : return [x+\" \"*(n-len(x))+\" \"*padding for x in column]\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1693", "colour": "orange", "code": "        if align == \"right\" : return [\" \"*(n-len(x))+x+\" \"*padding for x in column]\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1694", "colour": "orange", "code": "    \n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1695", "colour": "orange", "code": "    # Gather the tags of the tokens in the sentece per column.\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1696", "colour": "orange", "code": "    # If the IOB-tag is I-, mark the chunk tag with \"^\".\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1697", "colour": "orange", "code": "    # Add the tag names as headers in each column.\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1698", "colour": "orange", "code": "    columns = [[format(token, tag) for token in sentence] for tag in tags]\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1699", "colour": "orange", "code": "    columns[3] = [columns[3][i]+(iob == \"I\" and \" ^\" or \"\") for i, iob in enumerate(columns[2])]\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1700", "colour": "orange", "code": "    del columns[2]\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1701", "colour": "orange", "code": "    for i, header in enumerate(['word', 'tag', 'chunk', 'role', 'id', 'pnp', 'anchor', 'lemma']+tags[9:]):\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1702", "colour": "orange", "code": "        columns[i].insert(0, \"\")\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1703", "colour": "orange", "code": "        columns[i].insert(0, header.upper())\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1704", "colour": "orange", "code": "    # The left column (the word itself) is outlined to the right,\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1705", "colour": "orange", "code": "    # and has extra spacing so that words across sentences line out nicely below each other.\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1706", "colour": "orange", "code": "    for i, column in enumerate(columns):\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1707", "colour": "orange", "code": "        columns[i] = outline(column, fill+10*(i==0), align=(\"left\",\"right\")[i==0])\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1708", "colour": "orange", "code": "    # Anchor column is useful in MBSP but not in pattern.en.\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1709", "colour": "orange", "code": "    if not MBSP:\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1710", "colour": "orange", "code": "        del columns[6] \n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1711", "colour": "orange", "code": "    # Create a string with one row (i.e., one token) per line.\n", "error": "none", "author": "tom@organisms.be"}, {"index": "1712", "colour": "orange", "code": "    return \"\\n\".join([\"\".join([x[i] for x in columns]) for i in range(len(columns[0]))])\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1713", "colour": "orange", "code": "    ", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}]}