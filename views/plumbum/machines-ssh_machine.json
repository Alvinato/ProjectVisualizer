{"path": "/home/asumal/git/cs410/plumbum/plumbum/machines/ssh_machine.py", "lines": [[{"error": "C", "line": "1", "code": "from __future__ import with_statement\n", "colour": "blue", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "2", "code": "from plumbum.lib import _setdoc, IS_WIN32\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "3", "code": "from plumbum.machines.remote import BaseRemoteMachine\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "4", "code": "from plumbum.machines.session import ShellSession\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "5", "code": "from plumbum.machines.local import local\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "6", "code": "from plumbum.path.local import LocalPath\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "7", "code": "from plumbum.path.remote import RemotePath\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "8", "code": "from plumbum.commands import ProcessExecutionError, shquote\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "9", "code": "\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "10", "code": "\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "R", "line": "11", "code": "class SshTunnel(object):\n", "colour": "green", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "12", "code": "    \"\"\"An object representing an SSH tunnel (created by\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "13", "code": "    :func:`SshMachine.tunnel <plumbum.machines.remote.SshMachine.tunnel>`)\"\"\"\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "14", "code": "    __slots__ = [\"_session\"]\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "15", "code": "    def __init__(self, session):\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "16", "code": "        self._session = session\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "17", "code": "    def __repr__(self):\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "18", "code": "        if self._session.alive():\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "19", "code": "            return \"<SshTunnel %s>\" % (self._session.proc,)\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "20", "code": "        else:\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "21", "code": "            return \"<SshTunnel (defunct)>\"\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "22", "code": "    def __enter__(self):\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "23", "code": "        return self\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "C", "line": "24", "code": "    def __exit__(self, t, v, tb):\n", "colour": "blue", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "25", "code": "        self.close()\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "26", "code": "    def close(self):\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "27", "code": "        \"\"\"Closes(terminates) the tunnel\"\"\"\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "28", "code": "        self._session.close()\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "29", "code": "\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "30", "code": "\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "31", "code": "class SshMachine(BaseRemoteMachine):\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "32", "code": "    \"\"\"\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "C", "line": "33", "code": "    An implementation of :class:`remote machine <plumbum.machines.remote.BaseRemoteMachine>`\n", "colour": "blue", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "34", "code": "    over SSH. Invoking a remote command translates to invoking it over SSH ::\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "35", "code": "\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "36", "code": "        with SshMachine(\"yourhostname\") as rem:\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "37", "code": "            r_ls = rem[\"ls\"]\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "38", "code": "            # r_ls is the remote `ls`\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "39", "code": "            # executing r_ls() translates to `ssh yourhostname ls`\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "40", "code": "\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "41", "code": "    :param host: the host name to connect to (SSH server)\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "42", "code": "\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "43", "code": "    :param user: the user to connect as (if ``None``, the default will be used)\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "44", "code": "\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "45", "code": "    :param port: the server's port (if ``None``, the default will be used)\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "46", "code": "\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "C", "line": "47", "code": "    :param keyfile: the path to the identity file (if ``None``, the default will be used)\n", "colour": "blue", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "48", "code": "\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "C", "line": "49", "code": "    :param ssh_command: the ``ssh`` command to use; this has to be a ``Command`` object;\n", "colour": "blue", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "50", "code": "                        if ``None``, the default ssh client will be used.\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "51", "code": "\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "C", "line": "52", "code": "    :param scp_command: the ``scp`` command to use; this has to be a ``Command`` object;\n", "colour": "blue", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "53", "code": "                        if ``None``, the default scp program will be used.\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "54", "code": "\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "55", "code": "    :param ssh_opts: any additional options for ``ssh`` (a list of strings)\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "56", "code": "\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "57", "code": "    :param scp_opts: any additional options for ``scp`` (a list of strings)\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "58", "code": "\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "C", "line": "59", "code": "    :param password: the password to use; requires ``sshpass`` be installed. Cannot be used\n", "colour": "blue", "author": "Tomer.Filiba@emc.com"}, {"error": "C", "line": "60", "code": "                     in conjunction with ``ssh_command`` or ``scp_command`` (will be ignored).\n", "colour": "blue", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "61", "code": "                     NOTE: THIS IS A SECURITY RISK!\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "62", "code": "\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "63", "code": "    :param encoding: the remote machine's encoding (defaults to UTF8)\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "C", "line": "64", "code": "    \n", "colour": "blue", "author": "tomerfiliba@gmail.com"}, {"error": "C", "line": "65", "code": "    :param connect_timeout: specify a connection timeout (the time until shell prompt is seen).\n", "colour": "blue", "author": "tomerfiliba@gmail.com"}, {"error": "C", "line": "66", "code": "                            The default is 10 seconds. Set to ``None`` to disable\n", "colour": "blue", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "67", "code": "\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "68", "code": "    :param new_session: whether or not to start the background session as a new\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "C", "line": "69", "code": "                        session leader (setsid). This will prevent it from being killed on\n", "colour": "blue", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "70", "code": "                        Ctrl+C (SIGINT)\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "71", "code": "    \"\"\"\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "72", "code": "\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "R", "line": "73", "code": "    def __init__(self, host, user = None, port = None, keyfile = None, ssh_command = None,\n", "colour": "green", "author": "Tomer.Filiba@emc.com"}, {"error": "C", "line": "74", "code": "            scp_command = None, ssh_opts = (), scp_opts = (), password = None, encoding = \"utf8\",\n", "colour": "blue", "author": "tomerfiliba@gmail.com"}, {"error": "C", "line": "75", "code": "            connect_timeout = 10, new_session = False):\n", "colour": "blue", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "76", "code": "\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "77", "code": "        if ssh_command is None:\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "78", "code": "            if password is not None:\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "79", "code": "                ssh_command = local[\"sshpass\"][\"-p\", password, \"ssh\"]\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "80", "code": "            else:\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "81", "code": "                ssh_command = local[\"ssh\"]\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "82", "code": "        if scp_command is None:\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "83", "code": "            if password is not None:\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "84", "code": "                scp_command = local[\"sshpass\"][\"-p\", password, \"scp\"]\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "85", "code": "            else:\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "86", "code": "                scp_command = local[\"scp\"]\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "87", "code": "\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "88", "code": "        scp_args = []\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "89", "code": "        ssh_args = []\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "90", "code": "        if user:\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "91", "code": "            self._fqhost = \"%s@%s\" % (user, host)\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "92", "code": "        else:\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "93", "code": "            self._fqhost = host\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "94", "code": "        if port:\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "95", "code": "            ssh_args.extend([\"-p\", str(port)])\n", "colour": "black", "author": "tomerfiliba@gmail.com"}, {"error": "none", "line": "96", "code": "            scp_args.extend([\"-P\", str(port)])\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "97", "code": "        if keyfile:\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "98", "code": "            ssh_args.extend([\"-i\", str(keyfile)])\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "99", "code": "            scp_args.extend([\"-i\", str(keyfile)])\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "100", "code": "        scp_args.append(\"-r\")\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "101", "code": "        ssh_args.extend(ssh_opts)\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "102", "code": "        scp_args.extend(scp_opts)\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "103", "code": "        self._ssh_command = ssh_command[tuple(ssh_args)]\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "104", "code": "        self._scp_command = scp_command[tuple(scp_args)]\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "C", "line": "105", "code": "        BaseRemoteMachine.__init__(self, encoding = encoding, connect_timeout = connect_timeout,\n", "colour": "blue", "author": "Tomer.Filiba@emc.com"}, {"error": "C", "line": "106", "code": "            new_session = new_session)\n", "colour": "blue", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "107", "code": "\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "108", "code": "    def __str__(self):\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "109", "code": "        return \"ssh://%s\" % (self._fqhost,)\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "110", "code": "\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "111", "code": "    @_setdoc(BaseRemoteMachine)\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "C", "line": "112", "code": "    def popen(self, args, ssh_opts = (), **kwargs):\n", "colour": "blue", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "113", "code": "        cmdline = []\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "114", "code": "        cmdline.extend(ssh_opts)\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "115", "code": "        cmdline.append(self._fqhost)\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "116", "code": "        if args and hasattr(self, \"env\"):\n", "colour": "black", "author": "tomerfiliba@gmail.com"}, {"error": "none", "line": "117", "code": "            envdelta = self.env.getdelta()\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "118", "code": "            cmdline.extend([\"cd\", str(self.cwd), \"&&\"])\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "119", "code": "            if envdelta:\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "120", "code": "                cmdline.append(\"env\")\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "121", "code": "                cmdline.extend(\"%s=%s\" % (k, v) for k, v in envdelta.items())\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "122", "code": "            if isinstance(args, (tuple, list)):\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "123", "code": "                cmdline.extend(args)\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "124", "code": "            else:\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "125", "code": "                cmdline.append(args)\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "126", "code": "        return self._ssh_command[tuple(cmdline)].popen(**kwargs)\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "127", "code": "\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "128", "code": "    def nohup(self, command):\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "129", "code": "        \"\"\"\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "C", "line": "130", "code": "        Runs the given command using ``nohup`` and redirects std handles to ``/dev/null``,\n", "colour": "blue", "author": "Tomer.Filiba@emc.com"}, {"error": "C", "line": "131", "code": "        allowing the command to run \"detached\" from its controlling TTY or parent.\n", "colour": "blue", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "132", "code": "        Does not return anything.\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "133", "code": "        \"\"\"\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "134", "code": "        args = [\"nohup\"]\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "135", "code": "        args.extend(command.formulate())\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "136", "code": "        args.extend([\">/dev/null\", \"2>/dev/null\", \"</dev/null\"])\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "C", "line": "137", "code": "        proc = self.popen(args, ssh_opts = [\"-f\"])\n", "colour": "blue", "author": "Tomer.Filiba@emc.com"}, {"error": "C", "line": "138", "code": "        rc = proc.wait()\n", "colour": "blue", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "139", "code": "        try:\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "140", "code": "            if rc != 0:\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "C", "line": "141", "code": "                raise ProcessExecutionError(args, rc, proc.stdout.read(), proc.stderr.read())\n", "colour": "blue", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "142", "code": "        finally:\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "143", "code": "            proc.stdin.close()\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "144", "code": "            proc.stdout.close()\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "145", "code": "            proc.stderr.close()\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "146", "code": "\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "147", "code": "    @_setdoc(BaseRemoteMachine)\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "C", "line": "148", "code": "    def session(self, isatty = False, new_session = False):\n", "colour": "blue", "author": "Tomer.Filiba@emc.com"}, {"error": "C", "line": "149", "code": "        return ShellSession(self.popen([\"/bin/sh\"], ([\"-tt\"] if isatty else [\"-T\"]), new_session = new_session),\n", "colour": "blue", "author": "tomerfiliba@gmail.com"}, {"error": "C", "line": "150", "code": "            self.encoding, isatty, self.connect_timeout)\n", "colour": "blue", "author": "tomerfiliba@gmail.com"}, {"error": "none", "line": "151", "code": "\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "W", "line": "152", "code": "    def tunnel(self, lport, dport, lhost = \"localhost\", dhost = \"localhost\", connect_timeout = 5):\n", "colour": "purple", "author": "tomerfiliba@gmail.com"}, {"error": "C", "line": "153", "code": "        r\"\"\"Creates an SSH tunnel from the TCP port (``lport``) of the local machine\n", "colour": "blue", "author": "Tomer.Filiba@emc.com"}, {"error": "C", "line": "154", "code": "        (``lhost``, defaults to ``\"localhost\"``, but it can be any IP you can ``bind()``)\n", "colour": "blue", "author": "Tomer.Filiba@emc.com"}, {"error": "C", "line": "155", "code": "        to the remote TCP port (``dport``) of the destination machine (``dhost``, defaults\n", "colour": "blue", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "156", "code": "        to ``\"localhost\"``, which means *this remote machine*). The returned\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "C", "line": "157", "code": "        :class:`SshTunnel <plumbum.machines.remote.SshTunnel>` object can be used as a\n", "colour": "blue", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "158", "code": "        *context-manager*.\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "159", "code": "\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "160", "code": "        The more conventional use case is the following::\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "161", "code": "\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "162", "code": "            +---------+          +---------+\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "163", "code": "            | Your    |          | Remote  |\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "164", "code": "            | Machine |          | Machine |\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "165", "code": "            +----o----+          +---- ----+\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "166", "code": "                 |                    ^\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "167", "code": "                 |                    |\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "168", "code": "               lport                dport\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "169", "code": "                 |                    |\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "170", "code": "                 \\______SSH TUNNEL____/\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "171", "code": "                        (secure)\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "172", "code": "\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "C", "line": "173", "code": "        Here, you wish to communicate safely between port ``lport`` of your machine and\n", "colour": "blue", "author": "Tomer.Filiba@emc.com"}, {"error": "C", "line": "174", "code": "        port ``dport`` of the remote machine. Communication is tunneled over SSH, so the\n", "colour": "blue", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "175", "code": "        connection is authenticated and encrypted.\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "176", "code": "\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "177", "code": "        The more general case is shown below (where ``dport != \"localhost\"``)::\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "178", "code": "\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "179", "code": "            +---------+          +-------------+      +-------------+\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "180", "code": "            | Your    |          | Remote      |      | Destination |\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "181", "code": "            | Machine |          | Machine     |      | Machine     |\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "182", "code": "            +----o----+          +---- ----o---+      +---- --------+\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "183", "code": "                 |                    ^    |               ^\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "184", "code": "                 |                    |    |               |\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "185", "code": "            lhost:lport               |    |          dhost:dport\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "186", "code": "                 |                    |    |               |\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "187", "code": "                 \\_____SSH TUNNEL_____/    \\_____SOCKET____/\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "188", "code": "                        (secure)              (not secure)\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "189", "code": "\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "190", "code": "        Usage::\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "191", "code": "\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "192", "code": "            rem = SshMachine(\"megazord\")\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "193", "code": "\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "194", "code": "            with rem.tunnel(1234, 5678):\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "195", "code": "                sock = socket.socket()\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "196", "code": "                sock.connect((\"localhost\", 1234))\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "197", "code": "                # sock is now tunneled to megazord:5678\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "198", "code": "        \"\"\"\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "199", "code": "        ssh_opts = [\"-L\", \"[%s]:%s:[%s]:%s\" % (lhost, lport, dhost, dport)]\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "C", "line": "200", "code": "        proc = self.popen((), ssh_opts = ssh_opts, new_session = True)\n", "colour": "blue", "author": "Tomer.Filiba@emc.com"}, {"error": "C", "line": "201", "code": "        return SshTunnel(ShellSession(proc, self.encoding, connect_timeout = self.connect_timeout))\n", "colour": "blue", "author": "tomerfiliba@gmail.com"}, {"error": "none", "line": "202", "code": "\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "R", "line": "203", "code": "    def _translate_drive_letter(self, path):\n", "colour": "green", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "204", "code": "        # replace c:\\some\\path with /c/some/path\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "205", "code": "        path = str(path)\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "206", "code": "        if \":\" in path:\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "207", "code": "            path = \"/\" + path.replace(\":\", \"\").replace(\"\\\\\", \"/\")\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "208", "code": "        return path\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "209", "code": "\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "210", "code": "    @_setdoc(BaseRemoteMachine)\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "211", "code": "    def download(self, src, dst):\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "212", "code": "        if isinstance(src, LocalPath):\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "213", "code": "            raise TypeError(\"src of download cannot be %r\" % (src,))\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "214", "code": "        if isinstance(src, RemotePath) and src.remote != self:\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "C", "line": "215", "code": "            raise TypeError(\"src %r points to a different remote machine\" % (src,))\n", "colour": "blue", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "216", "code": "        if isinstance(dst, RemotePath):\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "217", "code": "            raise TypeError(\"dst of download cannot be %r\" % (dst,))\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "218", "code": "        if IS_WIN32:\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "219", "code": "            src = self._translate_drive_letter(src)\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "220", "code": "            dst = self._translate_drive_letter(dst)\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "221", "code": "        self._scp_command(\"%s:%s\" % (self._fqhost, shquote(src)), dst)\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "222", "code": "\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "223", "code": "    @_setdoc(BaseRemoteMachine)\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "224", "code": "    def upload(self, src, dst):\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "225", "code": "        if isinstance(src, RemotePath):\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "226", "code": "            raise TypeError(\"src of upload cannot be %r\" % (src,))\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "227", "code": "        if isinstance(dst, LocalPath):\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "228", "code": "            raise TypeError(\"dst of upload cannot be %r\" % (dst,))\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "229", "code": "        if isinstance(dst, RemotePath) and dst.remote != self:\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "C", "line": "230", "code": "            raise TypeError(\"dst %r points to a different remote machine\" % (dst,))\n", "colour": "blue", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "231", "code": "        if IS_WIN32:\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "232", "code": "            src = self._translate_drive_letter(src)\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "233", "code": "            dst = self._translate_drive_letter(dst)\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "234", "code": "        self._scp_command(src, \"%s:%s\" % (self._fqhost, shquote(dst)))\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "235", "code": "\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "236", "code": "\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "237", "code": "class PuttyMachine(SshMachine):\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "238", "code": "    \"\"\"\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "C", "line": "239", "code": "    PuTTY-flavored SSH connection. The programs ``plink`` and ``pscp`` are expected to\n", "colour": "blue", "author": "Tomer.Filiba@emc.com"}, {"error": "C", "line": "240", "code": "    be in the path (or you may provide your own ``ssh_command`` and ``scp_command``)\n", "colour": "blue", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "241", "code": "\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "242", "code": "    Arguments are the same as for :class:`plumbum.machines.remote.SshMachine`\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "243", "code": "    \"\"\"\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "R", "line": "244", "code": "    def __init__(self, host, user = None, port = None, keyfile = None, ssh_command = None,\n", "colour": "green", "author": "Tomer.Filiba@emc.com"}, {"error": "C", "line": "245", "code": "            scp_command = None, ssh_opts = (), scp_opts = (), encoding = \"utf8\",\n", "colour": "blue", "author": "Tomer.Filiba@emc.com"}, {"error": "C", "line": "246", "code": "            connect_timeout = 10, new_session = False):\n", "colour": "blue", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "247", "code": "        if ssh_command is None:\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "248", "code": "            ssh_command = local[\"plink\"]\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "249", "code": "        if scp_command is None:\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "250", "code": "            scp_command = local[\"pscp\"]\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "251", "code": "        if not ssh_opts:\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "252", "code": "            ssh_opts = [\"-ssh\"]\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "253", "code": "        if user is None:\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "254", "code": "            user = local.env.user\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "255", "code": "        if port is not None:\n", "colour": "black", "author": "tomerfiliba@gmail.com"}, {"error": "none", "line": "256", "code": "            ssh_opts.extend([\"-P\", str(port)])\n", "colour": "black", "author": "tomerfiliba@gmail.com"}, {"error": "none", "line": "257", "code": "            port = None\n", "colour": "black", "author": "tomerfiliba@gmail.com"}, {"error": "C", "line": "258", "code": "        SshMachine.__init__(self, host, user, port, keyfile = keyfile, ssh_command = ssh_command,\n", "colour": "blue", "author": "Tomer.Filiba@emc.com"}, {"error": "C", "line": "259", "code": "            scp_command = scp_command, ssh_opts = ssh_opts, scp_opts = scp_opts, encoding = encoding,\n", "colour": "blue", "author": "Tomer.Filiba@emc.com"}, {"error": "C", "line": "260", "code": "            connect_timeout = connect_timeout, new_session = new_session)\n", "colour": "blue", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "261", "code": "\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "262", "code": "    def __str__(self):\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "263", "code": "        return \"putty-ssh://%s\" % (self._fqhost,)\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "264", "code": "\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "265", "code": "    def _translate_drive_letter(self, path):\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "266", "code": "        # pscp takes care of windows paths automatically\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "267", "code": "        return path\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "268", "code": "\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "269", "code": "    @_setdoc(BaseRemoteMachine)\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "C", "line": "270", "code": "    def session(self, isatty = False, new_session = False):\n", "colour": "blue", "author": "Tomer.Filiba@emc.com"}, {"error": "C", "line": "271", "code": "        return ShellSession(self.popen((), ([\"-t\"] if isatty else [\"-T\"]), new_session = new_session),\n", "colour": "blue", "author": "Tomer.Filiba@emc.com"}, {"error": "C", "line": "272", "code": "            self.encoding, isatty, self.connect_timeout)\n", "colour": "blue", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "273", "code": "\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "274", "code": "\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}]]}