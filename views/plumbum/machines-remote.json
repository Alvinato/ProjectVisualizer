{"path": "/home/asumal/git/cs410/plumbum/plumbum/machines/remote.py", "lines": [[{"error": "C", "line": "1", "code": "from __future__ import with_statement\n", "colour": "blue", "author": "tomerf@il.ibm.com"}, {"error": "none", "line": "2", "code": "import re\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "3", "code": "from contextlib import contextmanager\n", "colour": "black", "author": "tomerf@il.ibm.com"}, {"error": "none", "line": "4", "code": "from plumbum.commands import CommandNotFound, shquote, ConcreteCommand\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "5", "code": "from plumbum.lib import _setdoc, ProcInfo, six\n", "colour": "black", "author": "tomerfiliba@gmail.com"}, {"error": "none", "line": "6", "code": "from plumbum.machines.local import LocalPath\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "7", "code": "from tempfile import NamedTemporaryFile\n", "colour": "black", "author": "tomerfiliba@gmail.com"}, {"error": "none", "line": "8", "code": "from plumbum.machines.env import BaseEnv\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "9", "code": "from plumbum.path.remote import RemotePath, RemoteWorkdir, StatRes\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "10", "code": "\n", "colour": "black", "author": "tomerf@il.ibm.com"}, {"error": "none", "line": "11", "code": "\n", "colour": "black", "author": "tomerfiliba@gmail.com"}, {"error": "none", "line": "12", "code": "class RemoteEnv(BaseEnv):\n", "colour": "black", "author": "tomerf@il.ibm.com"}, {"error": "none", "line": "13", "code": "    \"\"\"The remote machine's environment; exposes a dict-like interface\"\"\"\n", "colour": "black", "author": "tomerf@il.ibm.com"}, {"error": "none", "line": "14", "code": "\n", "colour": "black", "author": "tomerf@il.ibm.com"}, {"error": "none", "line": "15", "code": "    __slots__ = [\"_orig\", \"remote\"]\n", "colour": "black", "author": "tomerf@il.ibm.com"}, {"error": "none", "line": "16", "code": "    def __init__(self, remote):\n", "colour": "black", "author": "tomerf@il.ibm.com"}, {"error": "none", "line": "17", "code": "        self.remote = remote\n", "colour": "black", "author": "tomerf@il.ibm.com"}, {"error": "W", "line": "18", "code": "        self._curr = dict(line.split(\"=\", 1) for line in self.remote._session.run(\"env\")[1].splitlines())\n", "colour": "purple", "author": "tomer.filiba@emc.com"}, {"error": "none", "line": "19", "code": "        self._orig = self._curr.copy()\n", "colour": "black", "author": "tomerf@il.ibm.com"}, {"error": "none", "line": "20", "code": "        BaseEnv.__init__(self, self.remote.path, \":\")\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "21", "code": "\n", "colour": "black", "author": "tomerf@il.ibm.com"}, {"error": "none", "line": "22", "code": "    @_setdoc(BaseEnv)\n", "colour": "black", "author": "tomerfiliba@gmail.com"}, {"error": "none", "line": "23", "code": "    def __delitem__(self, name):\n", "colour": "black", "author": "tomerf@il.ibm.com"}, {"error": "none", "line": "24", "code": "        BaseEnv.__delitem__(self, name)\n", "colour": "black", "author": "tomerf@il.ibm.com"}, {"error": "W", "line": "25", "code": "        self.remote._session.run(\"unset %s\" % (name,))\n", "colour": "purple", "author": "tomerf@il.ibm.com"}, {"error": "none", "line": "26", "code": "    @_setdoc(BaseEnv)\n", "colour": "black", "author": "tomerfiliba@gmail.com"}, {"error": "none", "line": "27", "code": "    def __setitem__(self, name, value):\n", "colour": "black", "author": "tomerf@il.ibm.com"}, {"error": "none", "line": "28", "code": "        BaseEnv.__setitem__(self, name, value)\n", "colour": "black", "author": "tomerf@il.ibm.com"}, {"error": "W", "line": "29", "code": "        self.remote._session.run(\"export %s=%s\" % (name, shquote(value)))\n", "colour": "purple", "author": "tomerf@il.ibm.com"}, {"error": "none", "line": "30", "code": "    @_setdoc(BaseEnv)\n", "colour": "black", "author": "tomerfiliba@gmail.com"}, {"error": "none", "line": "31", "code": "    def pop(self, name, *default):\n", "colour": "black", "author": "tomerf@il.ibm.com"}, {"error": "none", "line": "32", "code": "        BaseEnv.pop(self, name, *default)\n", "colour": "black", "author": "tomerf@il.ibm.com"}, {"error": "W", "line": "33", "code": "        self.remote._session.run(\"unset %s\" % (name,))\n", "colour": "purple", "author": "tomerf@il.ibm.com"}, {"error": "none", "line": "34", "code": "    @_setdoc(BaseEnv)\n", "colour": "black", "author": "tomerfiliba@gmail.com"}, {"error": "none", "line": "35", "code": "    def update(self, *args, **kwargs):\n", "colour": "black", "author": "tomerf@il.ibm.com"}, {"error": "none", "line": "36", "code": "        BaseEnv.update(self, *args, **kwargs)\n", "colour": "black", "author": "tomerf@il.ibm.com"}, {"error": "W", "line": "37", "code": "        self.remote._session.run(\"export \" +\n", "colour": "purple", "author": "tanzer@swing.co.at"}, {"error": "C", "line": "38", "code": "            \" \".join(\"%s=%s\" % (k, shquote(v)) for k, v in self.getdict().items()))\n", "colour": "blue", "author": "tomerf@il.ibm.com"}, {"error": "none", "line": "39", "code": "\n", "colour": "black", "author": "tanzer@swing.co.at"}, {"error": "none", "line": "40", "code": "    def expand(self, expr):\n", "colour": "black", "author": "tomerfiliba@gmail.com"}, {"error": "C", "line": "41", "code": "        \"\"\"Expands any environment variables and home shortcuts found in ``expr``\n", "colour": "blue", "author": "tomerfiliba@gmail.com"}, {"error": "none", "line": "42", "code": "        (like ``os.path.expanduser`` combined with ``os.path.expandvars``)\n", "colour": "black", "author": "tomerfiliba@gmail.com"}, {"error": "none", "line": "43", "code": "\n", "colour": "black", "author": "tomerfiliba@gmail.com"}, {"error": "C", "line": "44", "code": "        :param expr: An expression containing environment variables (as ``$FOO``) or\n", "colour": "blue", "author": "tomerfiliba@gmail.com"}, {"error": "none", "line": "45", "code": "                     home shortcuts (as ``~/.bashrc``)\n", "colour": "black", "author": "tomerfiliba@gmail.com"}, {"error": "none", "line": "46", "code": "\n", "colour": "black", "author": "tomerfiliba@gmail.com"}, {"error": "none", "line": "47", "code": "        :returns: The expanded string\"\"\"\n", "colour": "black", "author": "tomerfiliba@gmail.com"}, {"error": "W", "line": "48", "code": "        return self.remote._session.run(\"echo %s\" % (expr,))[1].strip()\n", "colour": "purple", "author": "chrisprinos@gmail.com"}, {"error": "none", "line": "49", "code": "\n", "colour": "black", "author": "tanzer@swing.co.at"}, {"error": "none", "line": "50", "code": "    def expanduser(self, expr):\n", "colour": "black", "author": "tomerfiliba@gmail.com"}, {"error": "none", "line": "51", "code": "        \"\"\"Expand home shortcuts (e.g., ``~/foo/bar`` or ``~john/foo/bar``)\n", "colour": "black", "author": "tomerfiliba@gmail.com"}, {"error": "none", "line": "52", "code": "\n", "colour": "black", "author": "tomerfiliba@gmail.com"}, {"error": "none", "line": "53", "code": "        :param expr: An expression containing home shortcuts\n", "colour": "black", "author": "tomerfiliba@gmail.com"}, {"error": "none", "line": "54", "code": "\n", "colour": "black", "author": "tomerfiliba@gmail.com"}, {"error": "none", "line": "55", "code": "        :returns: The expanded string\"\"\"\n", "colour": "black", "author": "tomerfiliba@gmail.com"}, {"error": "none", "line": "56", "code": "        if not any(part.startswith(\"~\") for part in expr.split(\"/\")):\n", "colour": "black", "author": "AndydeCleyre@gmail.com"}, {"error": "none", "line": "57", "code": "            return expr\n", "colour": "black", "author": "tomerfiliba@gmail.com"}, {"error": "none", "line": "58", "code": "        # we escape all $ signs to avoid expanding env-vars\n", "colour": "black", "author": "tomerfiliba@gmail.com"}, {"error": "W", "line": "59", "code": "        return self.remote._session.run(\"echo %s\" % (expr.replace(\"$\", \"\\\\$\"),))[1].strip()\n", "colour": "purple", "author": "chrisprinos@gmail.com"}, {"error": "none", "line": "60", "code": "\n", "colour": "black", "author": "tomerf@il.ibm.com"}, {"error": "none", "line": "61", "code": "    # def clear(self):\n", "colour": "black", "author": "tomer.filiba@emc.com"}, {"error": "none", "line": "62", "code": "    #    BaseEnv.clear(self, *args, **kwargs)\n", "colour": "black", "author": "tomerf@il.ibm.com"}, {"error": "C", "line": "63", "code": "    #    self.remote._session.run(\"export %s\" % \" \".join(\"%s=%s\" % (k, v) for k, v in self.getdict()))\n", "colour": "blue", "author": "tomerf@il.ibm.com"}, {"error": "none", "line": "64", "code": "\n", "colour": "black", "author": "tomerf@il.ibm.com"}, {"error": "none", "line": "65", "code": "    def getdelta(self):\n", "colour": "black", "author": "tomerf@il.ibm.com"}, {"error": "C", "line": "66", "code": "        \"\"\"Returns the difference between the this environment and the original environment of\n", "colour": "blue", "author": "tomerf@il.ibm.com"}, {"error": "none", "line": "67", "code": "        the remote machine\"\"\"\n", "colour": "black", "author": "tomerf@il.ibm.com"}, {"error": "none", "line": "68", "code": "        self._curr[\"PATH\"] = self.path.join()\n", "colour": "black", "author": "tomerf@il.ibm.com"}, {"error": "none", "line": "69", "code": "\n", "colour": "black", "author": "drennalls@gmail.com"}, {"error": "none", "line": "70", "code": "        delta = {}\n", "colour": "black", "author": "tomerf@il.ibm.com"}, {"error": "C", "line": "71", "code": "        for k, v in self._curr.items():\n", "colour": "blue", "author": "tomerf@il.ibm.com"}, {"error": "none", "line": "72", "code": "            if k not in self._orig:\n", "colour": "black", "author": "tomerf@il.ibm.com"}, {"error": "none", "line": "73", "code": "                delta[k] = str(v)\n", "colour": "black", "author": "tomerf@il.ibm.com"}, {"error": "C", "line": "74", "code": "        for k, v in self._orig.items():\n", "colour": "blue", "author": "tomerf@il.ibm.com"}, {"error": "none", "line": "75", "code": "            if k not in self._curr:\n", "colour": "black", "author": "tomerf@il.ibm.com"}, {"error": "none", "line": "76", "code": "                delta[k] = \"\"\n", "colour": "black", "author": "tomerf@il.ibm.com"}, {"error": "none", "line": "77", "code": "            else:\n", "colour": "black", "author": "drennalls@gmail.com"}, {"error": "none", "line": "78", "code": "                if v != self._curr[k]:\n", "colour": "black", "author": "drennalls@gmail.com"}, {"error": "none", "line": "79", "code": "                    delta[k] = self._curr[k]\n", "colour": "black", "author": "drennalls@gmail.com"}, {"error": "none", "line": "80", "code": "\n", "colour": "black", "author": "drennalls@gmail.com"}, {"error": "none", "line": "81", "code": "        return delta\n", "colour": "black", "author": "tomerf@il.ibm.com"}, {"error": "none", "line": "82", "code": "\n", "colour": "black", "author": "tomerf@il.ibm.com"}, {"error": "none", "line": "83", "code": "\n", "colour": "black", "author": "tomerfiliba@gmail.com"}, {"error": "C", "line": "84", "code": "class RemoteCommand(ConcreteCommand):\n", "colour": "blue", "author": "tomerf@il.ibm.com"}, {"error": "none", "line": "85", "code": "    __slots__ = [\"remote\", \"executable\"]\n", "colour": "black", "author": "tomerfiliba@gmail.com"}, {"error": "none", "line": "86", "code": "    QUOTE_LEVEL = 1\n", "colour": "black", "author": "tomerfiliba@gmail.com"}, {"error": "none", "line": "87", "code": "\n", "colour": "black", "author": "tanzer@swing.co.at"}, {"error": "C", "line": "88", "code": "    def __init__(self, remote, executable, encoding = \"auto\"):\n", "colour": "blue", "author": "tomerfiliba@gmail.com"}, {"error": "none", "line": "89", "code": "        self.remote = remote\n", "colour": "black", "author": "tomerfiliba@gmail.com"}, {"error": "none", "line": "90", "code": "        ConcreteCommand.__init__(self, executable,\n", "colour": "black", "author": "tanzer@swing.co.at"}, {"error": "C", "line": "91", "code": "            remote.encoding if encoding == \"auto\" else encoding)\n", "colour": "blue", "author": "tomerfiliba@gmail.com"}, {"error": "none", "line": "92", "code": "    @property\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "93", "code": "    def machine(self):\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "94", "code": "        return self.remote\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "95", "code": "    def __repr__(self):\n", "colour": "black", "author": "tomerf@il.ibm.com"}, {"error": "none", "line": "96", "code": "        return \"RemoteCommand(%r, %r)\" % (self.remote, self.executable)\n", "colour": "black", "author": "tomerf@il.ibm.com"}, {"error": "C", "line": "97", "code": "    def popen(self, args = (), **kwargs):\n", "colour": "blue", "author": "tomerfiliba@gmail.com"}, {"error": "none", "line": "98", "code": "        return self.remote.popen(self[args], **kwargs)\n", "colour": "black", "author": "tomerf@il.ibm.com"}, {"error": "none", "line": "99", "code": "\n", "colour": "black", "author": "tomerf@il.ibm.com"}, {"error": "C", "line": "100", "code": "class ClosedRemoteMachine(Exception):\n", "colour": "blue", "author": "tomerf@il.ibm.com"}, {"error": "none", "line": "101", "code": "    pass\n", "colour": "black", "author": "tomerf@il.ibm.com"}, {"error": "none", "line": "102", "code": "\n", "colour": "black", "author": "tomerf@il.ibm.com"}, {"error": "R", "line": "103", "code": "class ClosedRemote(object):\n", "colour": "green", "author": "tomerf@il.ibm.com"}, {"error": "none", "line": "104", "code": "    __slots__ = [\"_obj\"]\n", "colour": "black", "author": "tomerf@il.ibm.com"}, {"error": "none", "line": "105", "code": "    def __init__(self, obj):\n", "colour": "black", "author": "tomerf@il.ibm.com"}, {"error": "none", "line": "106", "code": "        self._obj = obj\n", "colour": "black", "author": "tomerf@il.ibm.com"}, {"error": "C", "line": "107", "code": "    def close(self):\n", "colour": "blue", "author": "tomerf@il.ibm.com"}, {"error": "none", "line": "108", "code": "        pass\n", "colour": "black", "author": "tomerf@il.ibm.com"}, {"error": "none", "line": "109", "code": "    def __getattr__(self, name):\n", "colour": "black", "author": "tomerf@il.ibm.com"}, {"error": "none", "line": "110", "code": "        raise ClosedRemoteMachine(\"%r has been closed\" % (self._obj,))\n", "colour": "black", "author": "tomerf@il.ibm.com"}, {"error": "none", "line": "111", "code": "\n", "colour": "black", "author": "tomerf@il.ibm.com"}, {"error": "none", "line": "112", "code": "\n", "colour": "black", "author": "tomerf@il.ibm.com"}, {"error": "R", "line": "113", "code": "class BaseRemoteMachine(object):\n", "colour": "green", "author": "tomerfiliba@gmail.com"}, {"error": "C", "line": "114", "code": "    \"\"\"Represents a *remote machine*; serves as an entry point to everything related to that\n", "colour": "blue", "author": "tanzer@swing.co.at"}, {"error": "C", "line": "115", "code": "    remote machine, such as working directory and environment manipulation, command creation,\n", "colour": "blue", "author": "tanzer@swing.co.at"}, {"error": "none", "line": "116", "code": "    etc.\n", "colour": "black", "author": "tomerf@il.ibm.com"}, {"error": "none", "line": "117", "code": "\n", "colour": "black", "author": "tanzer@swing.co.at"}, {"error": "none", "line": "118", "code": "    Attributes:\n", "colour": "black", "author": "tomerf@il.ibm.com"}, {"error": "none", "line": "119", "code": "\n", "colour": "black", "author": "tanzer@swing.co.at"}, {"error": "none", "line": "120", "code": "    * ``cwd`` - the remote working directory\n", "colour": "black", "author": "tomerf@il.ibm.com"}, {"error": "none", "line": "121", "code": "    * ``env`` - the remote environment\n", "colour": "black", "author": "tomerf@il.ibm.com"}, {"error": "none", "line": "122", "code": "    * ``encoding`` - the remote machine's default encoding (assumed to be UTF8)\n", "colour": "black", "author": "tanzer@swing.co.at"}, {"error": "none", "line": "123", "code": "    * ``connect_timeout`` - the connection timeout\n", "colour": "black", "author": "tomerfiliba@gmail.com"}, {"error": "none", "line": "124", "code": "    \"\"\"\n", "colour": "black", "author": "tomerf@il.ibm.com"}, {"error": "none", "line": "125", "code": "\n", "colour": "black", "author": "tomerf@il.ibm.com"}, {"error": "C", "line": "126", "code": "    def __init__(self, encoding = \"utf8\", connect_timeout = 10, new_session = False):\n", "colour": "blue", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "127", "code": "        self.encoding = encoding\n", "colour": "black", "author": "tomerfiliba@gmail.com"}, {"error": "none", "line": "128", "code": "        self.connect_timeout = connect_timeout\n", "colour": "black", "author": "tomerfiliba@gmail.com"}, {"error": "C", "line": "129", "code": "        self._session = self.session(new_session = new_session)\n", "colour": "blue", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "130", "code": "        self.uname = self._get_uname()\n", "colour": "black", "author": "tomerfiliba@gmail.com"}, {"error": "none", "line": "131", "code": "        self.cwd = RemoteWorkdir(self)\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "132", "code": "        self.env = RemoteEnv(self)\n", "colour": "black", "author": "tomerf@il.ibm.com"}, {"error": "none", "line": "133", "code": "        self._python = None\n", "colour": "black", "author": "tomerf@il.ibm.com"}, {"error": "none", "line": "134", "code": "\n", "colour": "black", "author": "tomerf@il.ibm.com"}, {"error": "C", "line": "135", "code": "    def _get_uname(self):\n", "colour": "blue", "author": "tomerfiliba@gmail.com"}, {"error": "C", "line": "136", "code": "        rc, out, _ = self._session.run(\"uname\", retcode = None)\n", "colour": "blue", "author": "tomerfiliba@gmail.com"}, {"error": "none", "line": "137", "code": "        if rc == 0:\n", "colour": "black", "author": "tomerfiliba@gmail.com"}, {"error": "none", "line": "138", "code": "            return out.strip()\n", "colour": "black", "author": "tomerfiliba@gmail.com"}, {"error": "none", "line": "139", "code": "        else:\n", "colour": "black", "author": "tomerfiliba@gmail.com"}, {"error": "C", "line": "140", "code": "            rc, out, _ = self._session.run(\"python -c 'import platform;print(platform.uname()[0])'\", retcode = None)\n", "colour": "blue", "author": "tomerfiliba@gmail.com"}, {"error": "none", "line": "141", "code": "            if rc == 0:\n", "colour": "black", "author": "tomerfiliba@gmail.com"}, {"error": "none", "line": "142", "code": "                return out.strip()\n", "colour": "black", "author": "tomerfiliba@gmail.com"}, {"error": "none", "line": "143", "code": "            else:\n", "colour": "black", "author": "tomerfiliba@gmail.com"}, {"error": "C", "line": "144", "code": "                # all POSIX systems should have uname. make an educated guess it's Windows\n", "colour": "blue", "author": "tomerfiliba@gmail.com"}, {"error": "none", "line": "145", "code": "                return \"Windows\"\n", "colour": "black", "author": "tomerfiliba@gmail.com"}, {"error": "none", "line": "146", "code": "\n", "colour": "black", "author": "tomerfiliba@gmail.com"}, {"error": "none", "line": "147", "code": "    def __repr__(self):\n", "colour": "black", "author": "tomerf@il.ibm.com"}, {"error": "none", "line": "148", "code": "        return \"<%s %s>\" % (self.__class__.__name__, self)\n", "colour": "black", "author": "tomerf@il.ibm.com"}, {"error": "none", "line": "149", "code": "\n", "colour": "black", "author": "tomerfiliba@gmail.com"}, {"error": "none", "line": "150", "code": "    def __enter__(self):\n", "colour": "black", "author": "tomerf@il.ibm.com"}, {"error": "none", "line": "151", "code": "        return self\n", "colour": "black", "author": "tomerf@il.ibm.com"}, {"error": "C", "line": "152", "code": "    def __exit__(self, t, v, tb):\n", "colour": "blue", "author": "tomerf@il.ibm.com"}, {"error": "none", "line": "153", "code": "        self.close()\n", "colour": "black", "author": "tomerf@il.ibm.com"}, {"error": "none", "line": "154", "code": "    def close(self):\n", "colour": "black", "author": "tomerf@il.ibm.com"}, {"error": "C", "line": "155", "code": "        \"\"\"closes the connection to the remote machine; all paths and programs will\n", "colour": "blue", "author": "tanzer@swing.co.at"}, {"error": "none", "line": "156", "code": "        become defunct\"\"\"\n", "colour": "black", "author": "tomerf@il.ibm.com"}, {"error": "none", "line": "157", "code": "        self._session.close()\n", "colour": "black", "author": "tomerfiliba@gmail.com"}, {"error": "none", "line": "158", "code": "        self._session = ClosedRemote(self)\n", "colour": "black", "author": "tomerf@il.ibm.com"}, {"error": "none", "line": "159", "code": "\n", "colour": "black", "author": "tanzer@swing.co.at"}, {"error": "none", "line": "160", "code": "    def path(self, *parts):\n", "colour": "black", "author": "tomerf@il.ibm.com"}, {"error": "none", "line": "161", "code": "        \"\"\"A factory for :class:`RemotePaths <plumbum.path.remote.RemotePath>`.\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "162", "code": "        Usage: ``p = rem.path(\"/usr\", \"lib\", \"python2.7\")``\n", "colour": "black", "author": "tomerfiliba@gmail.com"}, {"error": "none", "line": "163", "code": "        \"\"\"\n", "colour": "black", "author": "tomerf@il.ibm.com"}, {"error": "none", "line": "164", "code": "        parts2 = [str(self.cwd)]\n", "colour": "black", "author": "tomerf@il.ibm.com"}, {"error": "C", "line": "165", "code": "        for p in parts:\n", "colour": "blue", "author": "tomerf@il.ibm.com"}, {"error": "none", "line": "166", "code": "            if isinstance(p, LocalPath):\n", "colour": "black", "author": "tomerf@il.ibm.com"}, {"error": "none", "line": "167", "code": "                raise TypeError(\"Cannot construct RemotePath from %r\" % (p,))\n", "colour": "black", "author": "tomerf@il.ibm.com"}, {"error": "C", "line": "168", "code": "            p = str(p)\n", "colour": "blue", "author": "tomerfiliba@gmail.com"}, {"error": "none", "line": "169", "code": "            if \"~\" in p:\n", "colour": "black", "author": "tomerfiliba@gmail.com"}, {"error": "C", "line": "170", "code": "                p = self.env.expanduser(p)\n", "colour": "blue", "author": "tomerfiliba@gmail.com"}, {"error": "none", "line": "171", "code": "            parts2.append(p)\n", "colour": "black", "author": "tomerfiliba@gmail.com"}, {"error": "W", "line": "172", "code": "        return RemotePath(self, *parts2)\n", "colour": "purple", "author": "tomerf@il.ibm.com"}, {"error": "none", "line": "173", "code": "\n", "colour": "black", "author": "tanzer@swing.co.at"}, {"error": "none", "line": "174", "code": "    def which(self, progname):\n", "colour": "black", "author": "tomerf@il.ibm.com"}, {"error": "C", "line": "175", "code": "        \"\"\"Looks up a program in the ``PATH``. If the program is not found, raises\n", "colour": "blue", "author": "tomerf@il.ibm.com"}, {"error": "none", "line": "176", "code": "        :class:`CommandNotFound <plumbum.commands.CommandNotFound>`\n", "colour": "black", "author": "tomerf@il.ibm.com"}, {"error": "none", "line": "177", "code": "\n", "colour": "black", "author": "tanzer@swing.co.at"}, {"error": "C", "line": "178", "code": "        :param progname: The program's name. Note that if underscores (``_``) are present\n", "colour": "blue", "author": "tomerf@il.ibm.com"}, {"error": "C", "line": "179", "code": "                         in the name, and the exact name is not found, they will be replaced\n", "colour": "blue", "author": "tanzer@swing.co.at"}, {"error": "C", "line": "180", "code": "                         in turn by hyphens (``-``) then periods (``.``), and the name will \n", "colour": "blue", "author": "andy@9mmedia.com"}, {"error": "none", "line": "181", "code": "                         be looked up again for each alternative\n", "colour": "black", "author": "andy@9mmedia.com"}, {"error": "none", "line": "182", "code": "\n", "colour": "black", "author": "tanzer@swing.co.at"}, {"error": "none", "line": "183", "code": "        :returns: A :class:`RemotePath <plumbum.path.local.RemotePath>`\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "184", "code": "        \"\"\"\n", "colour": "black", "author": "tomerf@il.ibm.com"}, {"error": "none", "line": "185", "code": "        alternatives = [progname]\n", "colour": "black", "author": "tomerf@il.ibm.com"}, {"error": "none", "line": "186", "code": "        if \"_\" in progname:\n", "colour": "black", "author": "tomerf@il.ibm.com"}, {"error": "none", "line": "187", "code": "            alternatives.append(progname.replace(\"_\", \"-\"))\n", "colour": "black", "author": "tomerf@il.ibm.com"}, {"error": "none", "line": "188", "code": "            alternatives.append(progname.replace(\"_\", \".\"))\n", "colour": "black", "author": "andy@9mmedia.com"}, {"error": "none", "line": "189", "code": "        for name in alternatives:\n", "colour": "black", "author": "tomerf@il.ibm.com"}, {"error": "C", "line": "190", "code": "            for p in self.env.path:\n", "colour": "blue", "author": "drennalls@gmail.com"}, {"error": "C", "line": "191", "code": "                fn = p / name\n", "colour": "blue", "author": "tomerfiliba@gmail.com"}, {"error": "none", "line": "192", "code": "                if fn.access(\"x\"):\n", "colour": "black", "author": "drennalls@gmail.com"}, {"error": "none", "line": "193", "code": "                    return fn\n", "colour": "black", "author": "drennalls@gmail.com"}, {"error": "none", "line": "194", "code": "\n", "colour": "black", "author": "tanzer@swing.co.at"}, {"error": "none", "line": "195", "code": "        raise CommandNotFound(progname, self.env.path)\n", "colour": "black", "author": "tomerf@il.ibm.com"}, {"error": "none", "line": "196", "code": "\n", "colour": "black", "author": "tanzer@swing.co.at"}, {"error": "none", "line": "197", "code": "    def __getitem__(self, cmd):\n", "colour": "black", "author": "tomerf@il.ibm.com"}, {"error": "C", "line": "198", "code": "        \"\"\"Returns a `Command` object representing the given program. ``cmd`` can be a string or\n", "colour": "blue", "author": "tomerf@il.ibm.com"}, {"error": "C", "line": "199", "code": "        a :class:`RemotePath <plumbum.path.remote.RemotePath>`; if it is a path, a command\n", "colour": "blue", "author": "Tomer.Filiba@emc.com"}, {"error": "C", "line": "200", "code": "        representing this path will be returned; otherwise, the program name will be looked up in\n", "colour": "blue", "author": "tanzer@swing.co.at"}, {"error": "none", "line": "201", "code": "        the system's ``PATH`` (using ``which``). Usage::\n", "colour": "black", "author": "tomerf@il.ibm.com"}, {"error": "none", "line": "202", "code": "\n", "colour": "black", "author": "tanzer@swing.co.at"}, {"error": "none", "line": "203", "code": "            r_ls = rem[\"ls\"]\n", "colour": "black", "author": "tomerf@il.ibm.com"}, {"error": "none", "line": "204", "code": "        \"\"\"\n", "colour": "black", "author": "tomerf@il.ibm.com"}, {"error": "none", "line": "205", "code": "        if isinstance(cmd, RemotePath):\n", "colour": "black", "author": "tomerf@il.ibm.com"}, {"error": "none", "line": "206", "code": "            if cmd.remote is self:\n", "colour": "black", "author": "tomerf@il.ibm.com"}, {"error": "none", "line": "207", "code": "                return RemoteCommand(self, cmd)\n", "colour": "black", "author": "tomerf@il.ibm.com"}, {"error": "none", "line": "208", "code": "            else:\n", "colour": "black", "author": "tomerf@il.ibm.com"}, {"error": "C", "line": "209", "code": "                raise TypeError(\"Given path does not belong to this remote machine: %r\" % (cmd,))\n", "colour": "blue", "author": "tomerfiliba@gmail.com"}, {"error": "none", "line": "210", "code": "        elif not isinstance(cmd, LocalPath):\n", "colour": "black", "author": "tanzer@swing.co.at"}, {"error": "none", "line": "211", "code": "            if \"/\" in cmd or \"\\\\\" in cmd:\n", "colour": "black", "author": "tomerf@il.ibm.com"}, {"error": "none", "line": "212", "code": "                return RemoteCommand(self, self.path(cmd))\n", "colour": "black", "author": "tomerf@il.ibm.com"}, {"error": "none", "line": "213", "code": "            else:\n", "colour": "black", "author": "tomerf@il.ibm.com"}, {"error": "none", "line": "214", "code": "                return RemoteCommand(self, self.which(cmd))\n", "colour": "black", "author": "tomerf@il.ibm.com"}, {"error": "none", "line": "215", "code": "        else:\n", "colour": "black", "author": "tomerfiliba@gmail.com"}, {"error": "none", "line": "216", "code": "            raise TypeError(\"cmd must not be a LocalPath: %r\" % (cmd,))\n", "colour": "black", "author": "tanzer@swing.co.at"}, {"error": "none", "line": "217", "code": "\n", "colour": "black", "author": "tomerfiliba@gmail.com"}, {"error": "none", "line": "218", "code": "    def __contains__(self, cmd):\n", "colour": "black", "author": "tomerfiliba@gmail.com"}, {"error": "C", "line": "219", "code": "        \"\"\"Tests for the existance of the command, e.g., ``\"ls\" in remote_machine``.\n", "colour": "blue", "author": "tomerfiliba@gmail.com"}, {"error": "none", "line": "220", "code": "        ``cmd`` can be anything acceptable by ``__getitem__``.\n", "colour": "black", "author": "tomerfiliba@gmail.com"}, {"error": "none", "line": "221", "code": "        \"\"\"\n", "colour": "black", "author": "tomerfiliba@gmail.com"}, {"error": "none", "line": "222", "code": "        try:\n", "colour": "black", "author": "tomerfiliba@gmail.com"}, {"error": "none", "line": "223", "code": "            self[cmd]\n", "colour": "black", "author": "tomerfiliba@gmail.com"}, {"error": "none", "line": "224", "code": "        except CommandNotFound:\n", "colour": "black", "author": "tomerfiliba@gmail.com"}, {"error": "none", "line": "225", "code": "            return False\n", "colour": "black", "author": "tomerfiliba@gmail.com"}, {"error": "none", "line": "226", "code": "        else:\n", "colour": "black", "author": "tomerfiliba@gmail.com"}, {"error": "none", "line": "227", "code": "            return True\n", "colour": "black", "author": "tomerfiliba@gmail.com"}, {"error": "none", "line": "228", "code": "\n", "colour": "black", "author": "tomerfiliba@gmail.com"}, {"error": "none", "line": "229", "code": "    @property\n", "colour": "black", "author": "tomerf@il.ibm.com"}, {"error": "none", "line": "230", "code": "    def python(self):\n", "colour": "black", "author": "tomerf@il.ibm.com"}, {"error": "none", "line": "231", "code": "        \"\"\"A command that represents the default remote python interpreter\"\"\"\n", "colour": "black", "author": "tomerf@il.ibm.com"}, {"error": "none", "line": "232", "code": "        if not self._python:\n", "colour": "black", "author": "tomerf@il.ibm.com"}, {"error": "none", "line": "233", "code": "            self._python = self[\"python\"]\n", "colour": "black", "author": "tomerf@il.ibm.com"}, {"error": "none", "line": "234", "code": "        return self._python\n", "colour": "black", "author": "tomerf@il.ibm.com"}, {"error": "none", "line": "235", "code": "\n", "colour": "black", "author": "tomerf@il.ibm.com"}, {"error": "C", "line": "236", "code": "    def session(self, isatty = False, new_session = False):\n", "colour": "blue", "author": "Tomer.Filiba@emc.com"}, {"error": "C", "line": "237", "code": "        \"\"\"Creates a new :class:`ShellSession <plumbum.session.ShellSession>` object; this invokes the user's\n", "colour": "blue", "author": "tomerf@il.ibm.com"}, {"error": "C", "line": "238", "code": "        shell on the remote machine and executes commands on it over stdin/stdout/stderr\"\"\"\n", "colour": "blue", "author": "tomerf@il.ibm.com"}, {"error": "none", "line": "239", "code": "        raise NotImplementedError()\n", "colour": "black", "author": "tomerfiliba@gmail.com"}, {"error": "none", "line": "240", "code": "\n", "colour": "black", "author": "tanzer@swing.co.at"}, {"error": "none", "line": "241", "code": "    def download(self, src, dst):\n", "colour": "black", "author": "tomerfiliba@gmail.com"}, {"error": "C", "line": "242", "code": "        \"\"\"Downloads a remote file/directory (``src``) to a local destination (``dst``).\n", "colour": "blue", "author": "tomerf@il.ibm.com"}, {"error": "C", "line": "243", "code": "        ``src`` must be a string or a :class:`RemotePath <plumbum.path.remote.RemotePath>`\n", "colour": "blue", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "244", "code": "        pointing to this remote machine, and ``dst`` must be a string or a\n", "colour": "black", "author": "tomerf@il.ibm.com"}, {"error": "none", "line": "245", "code": "        :class:`LocalPath <plumbum.machines.local.LocalPath>`\"\"\"\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "246", "code": "        raise NotImplementedError()\n", "colour": "black", "author": "tomerfiliba@gmail.com"}, {"error": "none", "line": "247", "code": "\n", "colour": "black", "author": "tanzer@swing.co.at"}, {"error": "none", "line": "248", "code": "    def upload(self, src, dst):\n", "colour": "black", "author": "tomerfiliba@gmail.com"}, {"error": "C", "line": "249", "code": "        \"\"\"Uploads a local file/directory (``src``) to a remote destination (``dst``).\n", "colour": "blue", "author": "tomerf@il.ibm.com"}, {"error": "C", "line": "250", "code": "        ``src`` must be a string or a :class:`LocalPath <plumbum.machines.local.LocalPath>`,\n", "colour": "blue", "author": "Tomer.Filiba@emc.com"}, {"error": "C", "line": "251", "code": "        and ``dst`` must be a string or a :class:`RemotePath <plumbum.path.remote.RemotePath>`\n", "colour": "blue", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "252", "code": "        pointing to this remote machine\"\"\"\n", "colour": "black", "author": "tomerf@il.ibm.com"}, {"error": "none", "line": "253", "code": "        raise NotImplementedError()\n", "colour": "black", "author": "tomerf@il.ibm.com"}, {"error": "none", "line": "254", "code": "\n", "colour": "black", "author": "tanzer@swing.co.at"}, {"error": "none", "line": "255", "code": "    def popen(self, args, **kwargs):\n", "colour": "black", "author": "tomerf@il.ibm.com"}, {"error": "C", "line": "256", "code": "        \"\"\"Spawns the given command on the remote machine, returning a ``Popen``-like object;\n", "colour": "blue", "author": "tanzer@swing.co.at"}, {"error": "C", "line": "257", "code": "        do not use this method directly, unless you need \"low-level\" control on the remote\n", "colour": "blue", "author": "tanzer@swing.co.at"}, {"error": "none", "line": "258", "code": "        process\"\"\"\n", "colour": "black", "author": "tomerf@il.ibm.com"}, {"error": "none", "line": "259", "code": "        raise NotImplementedError()\n", "colour": "black", "author": "tomerfiliba@gmail.com"}, {"error": "none", "line": "260", "code": "\n", "colour": "black", "author": "tomerfiliba@gmail.com"}, {"error": "none", "line": "261", "code": "    def list_processes(self):\n", "colour": "black", "author": "tomerfiliba@gmail.com"}, {"error": "none", "line": "262", "code": "        \"\"\"\n", "colour": "black", "author": "tomerfiliba@gmail.com"}, {"error": "C", "line": "263", "code": "        Returns information about all running processes (on POSIX systems: using ``ps``)\n", "colour": "blue", "author": "tomerfiliba@gmail.com"}, {"error": "none", "line": "264", "code": "\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "265", "code": "        .. versionadded:: 1.3\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "266", "code": "        \"\"\"\n", "colour": "black", "author": "tomerfiliba@gmail.com"}, {"error": "C", "line": "267", "code": "        ps = self[\"ps\"]\n", "colour": "blue", "author": "tomerfiliba@gmail.com"}, {"error": "none", "line": "268", "code": "        lines = ps(\"-e\", \"-o\", \"pid,uid,stat,args\").splitlines()\n", "colour": "black", "author": "tomerfiliba@gmail.com"}, {"error": "none", "line": "269", "code": "        lines.pop(0) # header\n", "colour": "black", "author": "tomerfiliba@gmail.com"}, {"error": "none", "line": "270", "code": "        for line in lines:\n", "colour": "black", "author": "tomerfiliba@gmail.com"}, {"error": "none", "line": "271", "code": "            parts = line.strip().split()\n", "colour": "black", "author": "tomerfiliba@gmail.com"}, {"error": "C", "line": "272", "code": "            yield ProcInfo(int(parts[0]), int(parts[1]), parts[2], \" \".join(parts[3:]))\n", "colour": "blue", "author": "tomerfiliba@gmail.com"}, {"error": "C", "line": "273", "code": "    \n", "colour": "blue", "author": "tomerfiliba@gmail.com"}, {"error": "none", "line": "274", "code": "    def pgrep(self, pattern):\n", "colour": "black", "author": "tomerfiliba@gmail.com"}, {"error": "none", "line": "275", "code": "        \"\"\"\n", "colour": "black", "author": "tomerfiliba@gmail.com"}, {"error": "C", "line": "276", "code": "        Process grep: return information about all processes whose command-line args match the given regex pattern\n", "colour": "blue", "author": "tomerfiliba@gmail.com"}, {"error": "none", "line": "277", "code": "        \"\"\"\n", "colour": "black", "author": "tomerfiliba@gmail.com"}, {"error": "none", "line": "278", "code": "        pat = re.compile(pattern)\n", "colour": "black", "author": "tomerfiliba@gmail.com"}, {"error": "none", "line": "279", "code": "        for procinfo in self.list_processes():\n", "colour": "black", "author": "tomerfiliba@gmail.com"}, {"error": "none", "line": "280", "code": "            if pat.search(procinfo.args):\n", "colour": "black", "author": "tomerfiliba@gmail.com"}, {"error": "C", "line": "281", "code": "                yield procinfo \n", "colour": "blue", "author": "tomerfiliba@gmail.com"}, {"error": "none", "line": "282", "code": "\n", "colour": "black", "author": "tomerfiliba@gmail.com"}, {"error": "none", "line": "283", "code": "    @contextmanager\n", "colour": "black", "author": "tomerf@il.ibm.com"}, {"error": "none", "line": "284", "code": "    def tempdir(self):\n", "colour": "black", "author": "tomerf@il.ibm.com"}, {"error": "C", "line": "285", "code": "        \"\"\"A context manager that creates a remote temporary directory, which is removed when\n", "colour": "blue", "author": "tanzer@swing.co.at"}, {"error": "none", "line": "286", "code": "        the context exits\"\"\"\n", "colour": "black", "author": "tomerf@il.ibm.com"}, {"error": "none", "line": "287", "code": "        _, out, _ = self._session.run(\"mktemp -d\")\n", "colour": "black", "author": "tomerf@il.ibm.com"}, {"error": "W", "line": "288", "code": "        dir = self.path(out.strip())  # @ReservedAssignment\n", "colour": "purple", "author": "tomer.filiba@emc.com"}, {"error": "none", "line": "289", "code": "        try:\n", "colour": "black", "author": "tomerf@il.ibm.com"}, {"error": "none", "line": "290", "code": "            yield dir\n", "colour": "black", "author": "tomerf@il.ibm.com"}, {"error": "none", "line": "291", "code": "        finally:\n", "colour": "black", "author": "tomerf@il.ibm.com"}, {"error": "none", "line": "292", "code": "            dir.delete()\n", "colour": "black", "author": "tomerf@il.ibm.com"}, {"error": "none", "line": "293", "code": "\n", "colour": "black", "author": "tomerf@il.ibm.com"}, {"error": "none", "line": "294", "code": "    #\n", "colour": "black", "author": "tomerfiliba@gmail.com"}, {"error": "none", "line": "295", "code": "    # Path implementation\n", "colour": "black", "author": "tomerfiliba@gmail.com"}, {"error": "none", "line": "296", "code": "    #\n", "colour": "black", "author": "tomerfiliba@gmail.com"}, {"error": "C", "line": "297", "code": "    def _path_listdir(self, fn):\n", "colour": "blue", "author": "tomerfiliba@gmail.com"}, {"error": "none", "line": "298", "code": "        files = self._session.run(\"ls -a %s\" % (shquote(fn),))[1].splitlines()\n", "colour": "black", "author": "tomerfiliba@gmail.com"}, {"error": "none", "line": "299", "code": "        files.remove(\".\")\n", "colour": "black", "author": "tomerfiliba@gmail.com"}, {"error": "none", "line": "300", "code": "        files.remove(\"..\")\n", "colour": "black", "author": "tomerfiliba@gmail.com"}, {"error": "none", "line": "301", "code": "        return files\n", "colour": "black", "author": "tomerfiliba@gmail.com"}, {"error": "C", "line": "302", "code": "    def _path_glob(self, fn, pattern):\n", "colour": "blue", "author": "tomerfiliba@gmail.com"}, {"error": "C", "line": "303", "code": "        matches = self._session.run(\"for fn in %s/%s; do echo $fn; done\" % (fn, pattern))[1].splitlines()\n", "colour": "blue", "author": "tomerfiliba@gmail.com"}, {"error": "none", "line": "304", "code": "        if len(matches) == 1 and not self._path_stat(matches[0]):\n", "colour": "black", "author": "tomerfiliba@gmail.com"}, {"error": "none", "line": "305", "code": "            return []  # pattern expansion failed\n", "colour": "black", "author": "tomer.filiba@emc.com"}, {"error": "none", "line": "306", "code": "        return matches\n", "colour": "black", "author": "tomerfiliba@gmail.com"}, {"error": "none", "line": "307", "code": "\n", "colour": "black", "author": "tomerfiliba@gmail.com"}, {"error": "C", "line": "308", "code": "    def _path_getuid(self, fn):\n", "colour": "blue", "author": "tomerfiliba@gmail.com"}, {"error": "C", "line": "309", "code": "        return self._session.run(\"stat -c '%u,%U' \" + shquote(fn))[1].strip().split(\",\")\n", "colour": "blue", "author": "tomerfiliba@gmail.com"}, {"error": "C", "line": "310", "code": "    def _path_getgid(self, fn):\n", "colour": "blue", "author": "tomerfiliba@gmail.com"}, {"error": "C", "line": "311", "code": "        return self._session.run(\"stat -c '%g,%G' \" + shquote(fn))[1].strip().split(\",\")\n", "colour": "blue", "author": "tomerfiliba@gmail.com"}, {"error": "C", "line": "312", "code": "    def _path_stat(self, fn):\n", "colour": "blue", "author": "tomerfiliba@gmail.com"}, {"error": "C", "line": "313", "code": "        rc, out, _ = self._session.run(\"stat -c '%F,%f,%i,%d,%h,%u,%g,%s,%X,%Y,%Z' \" + shquote(fn),\n", "colour": "blue", "author": "tomer.filiba@emc.com"}, {"error": "C", "line": "314", "code": "            retcode = None)\n", "colour": "blue", "author": "tomerfiliba@gmail.com"}, {"error": "none", "line": "315", "code": "        if rc != 0:\n", "colour": "black", "author": "tomerfiliba@gmail.com"}, {"error": "none", "line": "316", "code": "            return None\n", "colour": "black", "author": "tomerfiliba@gmail.com"}, {"error": "none", "line": "317", "code": "        statres = out.strip().split(\",\")\n", "colour": "black", "author": "tomerfiliba@gmail.com"}, {"error": "none", "line": "318", "code": "        text_mode = statres.pop(0).lower()\n", "colour": "black", "author": "tomerfiliba@gmail.com"}, {"error": "C", "line": "319", "code": "        res = StatRes((int(statres[0], 16),) + tuple(int(sr) for sr in statres[1:]))\n", "colour": "blue", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "320", "code": "        res.text_mode = text_mode\n", "colour": "black", "author": "tomerfiliba@gmail.com"}, {"error": "none", "line": "321", "code": "        return res\n", "colour": "black", "author": "tomerfiliba@gmail.com"}, {"error": "none", "line": "322", "code": "\n", "colour": "black", "author": "tomer.filiba@emc.com"}, {"error": "C", "line": "323", "code": "    def _path_delete(self, fn):\n", "colour": "blue", "author": "tomerfiliba@gmail.com"}, {"error": "none", "line": "324", "code": "        self._session.run(\"rm -rf %s\" % (shquote(fn),))\n", "colour": "black", "author": "tomerfiliba@gmail.com"}, {"error": "C", "line": "325", "code": "    def _path_move(self, src, dst):\n", "colour": "blue", "author": "tomerfiliba@gmail.com"}, {"error": "none", "line": "326", "code": "        self._session.run(\"mv %s %s\" % (shquote(src), shquote(dst)))\n", "colour": "black", "author": "tomerfiliba@gmail.com"}, {"error": "C", "line": "327", "code": "    def _path_copy(self, src, dst):\n", "colour": "blue", "author": "tomerfiliba@gmail.com"}, {"error": "none", "line": "328", "code": "        self._session.run(\"cp -r %s %s\" % (shquote(src), shquote(dst)))\n", "colour": "black", "author": "tomerfiliba@gmail.com"}, {"error": "C", "line": "329", "code": "    def _path_mkdir(self, fn):\n", "colour": "blue", "author": "tomerfiliba@gmail.com"}, {"error": "none", "line": "330", "code": "        self._session.run(\"mkdir -p %s\" % (shquote(fn),))\n", "colour": "black", "author": "tomerfiliba@gmail.com"}, {"error": "C", "line": "331", "code": "    def _path_chmod(self, mode, fn):\n", "colour": "blue", "author": "tomerfiliba@gmail.com"}, {"error": "none", "line": "332", "code": "        self._session.run(\"chmod %o %s\" % (mode, shquote(fn)))\n", "colour": "black", "author": "tomerfiliba@gmail.com"}, {"error": "C", "line": "333", "code": "    def _path_chown(self, fn, owner, group, recursive):\n", "colour": "blue", "author": "tomerfiliba@gmail.com"}, {"error": "none", "line": "334", "code": "        args = [\"chown\"]\n", "colour": "black", "author": "tomerfiliba@gmail.com"}, {"error": "none", "line": "335", "code": "        if recursive:\n", "colour": "black", "author": "tomerfiliba@gmail.com"}, {"error": "none", "line": "336", "code": "            args.append(\"-R\")\n", "colour": "black", "author": "tomerfiliba@gmail.com"}, {"error": "none", "line": "337", "code": "        if owner is not None and group is not None:\n", "colour": "black", "author": "tomerfiliba@gmail.com"}, {"error": "none", "line": "338", "code": "            args.append(\"%s:%s\" % (owner, group))\n", "colour": "black", "author": "tomerfiliba@gmail.com"}, {"error": "none", "line": "339", "code": "        elif owner is not None:\n", "colour": "black", "author": "tomerfiliba@gmail.com"}, {"error": "none", "line": "340", "code": "            args.append(str(owner))\n", "colour": "black", "author": "tomerfiliba@gmail.com"}, {"error": "none", "line": "341", "code": "        elif group is not None:\n", "colour": "black", "author": "tomerfiliba@gmail.com"}, {"error": "none", "line": "342", "code": "            args.append(\":%s\" % (group,))\n", "colour": "black", "author": "tomerfiliba@gmail.com"}, {"error": "none", "line": "343", "code": "        args.append(shquote(fn))\n", "colour": "black", "author": "tomerfiliba@gmail.com"}, {"error": "none", "line": "344", "code": "        self._session.run(\" \".join(args))\n", "colour": "black", "author": "tomerfiliba@gmail.com"}, {"error": "none", "line": "345", "code": "\n", "colour": "black", "author": "tomerfiliba@gmail.com"}, {"error": "C", "line": "346", "code": "    def _path_read(self, fn):\n", "colour": "blue", "author": "tomerfiliba@gmail.com"}, {"error": "none", "line": "347", "code": "        data = self[\"cat\"](fn)\n", "colour": "black", "author": "tomerfiliba@gmail.com"}, {"error": "none", "line": "348", "code": "        if self.encoding and isinstance(data, six.unicode_type):\n", "colour": "black", "author": "tomerfiliba@gmail.com"}, {"error": "none", "line": "349", "code": "            data = data.encode(self.encoding)\n", "colour": "black", "author": "tomerfiliba@gmail.com"}, {"error": "none", "line": "350", "code": "        return data\n", "colour": "black", "author": "tomerfiliba@gmail.com"}, {"error": "C", "line": "351", "code": "    def _path_write(self, fn, data):\n", "colour": "blue", "author": "tomerfiliba@gmail.com"}, {"error": "none", "line": "352", "code": "        if self.encoding and isinstance(data, six.unicode_type):\n", "colour": "black", "author": "tomerfiliba@gmail.com"}, {"error": "none", "line": "353", "code": "            data = data.encode(self.encoding)\n", "colour": "black", "author": "tomerfiliba@gmail.com"}, {"error": "C", "line": "354", "code": "        with NamedTemporaryFile() as f:\n", "colour": "blue", "author": "tomerfiliba@gmail.com"}, {"error": "none", "line": "355", "code": "            f.write(data)\n", "colour": "black", "author": "tomerfiliba@gmail.com"}, {"error": "none", "line": "356", "code": "            f.flush()\n", "colour": "black", "author": "tomerfiliba@gmail.com"}, {"error": "none", "line": "357", "code": "            f.seek(0)\n", "colour": "black", "author": "tomerfiliba@gmail.com"}, {"error": "none", "line": "358", "code": "            self.upload(f.name, fn)\n", "colour": "black", "author": "tomerfiliba@gmail.com"}, {"error": "none", "line": "359", "code": "\n", "colour": "black", "author": "tomer.filiba@emc.com"}, {"error": "C", "line": "360", "code": "    def _path_link(self, src, dst, symlink):\n", "colour": "blue", "author": "tomerfiliba@gmail.com"}, {"error": "E", "line": "361", "code": "        self._session.run(\"ln -s %s %s\" % (\"-s\" if symlink else \"\", shquote(src), shquote(dst)))\n", "colour": "yellow", "author": "tomerfiliba@gmail.com"}, {"error": "none", "line": "362", "code": "\n", "colour": "black", "author": "tomerfiliba@gmail.com"}, {"error": "none", "line": "363", "code": "\n", "colour": "black", "author": "tomerf@il.ibm.com"}]]}