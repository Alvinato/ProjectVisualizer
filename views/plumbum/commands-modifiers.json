{"path": "/home/asumal/git/cs410/plumbum/plumbum/commands/modifiers.py", "lines": [[{"error": "C", "line": "1", "code": "import os\n", "colour": "blue", "author": "eevee.git@veekun.com"}, {"error": "none", "line": "2", "code": "from select import select\n", "colour": "black", "author": "eevee.git@veekun.com"}, {"error": "none", "line": "3", "code": "from subprocess import PIPE\n", "colour": "black", "author": "eevee.git@veekun.com"}, {"error": "none", "line": "4", "code": "import sys\n", "colour": "black", "author": "eevee.git@veekun.com"}, {"error": "none", "line": "5", "code": "\n", "colour": "black", "author": "eevee.git@veekun.com"}, {"error": "none", "line": "6", "code": "from plumbum.commands.processes import run_proc\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "7", "code": "\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "8", "code": "\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "C", "line": "9", "code": "#===================================================================================================\n", "colour": "blue", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "10", "code": "# execution modifiers (background, foreground)\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "C", "line": "11", "code": "#===================================================================================================\n", "colour": "blue", "author": "Tomer.Filiba@emc.com"}, {"error": "R", "line": "12", "code": "class ExecutionModifier(object):\n", "colour": "green", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "13", "code": "    __slots__ = [\"retcode\"]\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "C", "line": "14", "code": "    def __init__(self, retcode = 0):\n", "colour": "blue", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "15", "code": "        self.retcode = retcode\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "16", "code": "    def __repr__(self):\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "17", "code": "        return \"%s(%r)\" % (self.__class__.__name__, self.retcode)\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "18", "code": "    @classmethod\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "19", "code": "    def __call__(cls, retcode):\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "20", "code": "        return cls(retcode)\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "21", "code": "\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "22", "code": "class Future(object):\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "C", "line": "23", "code": "    \"\"\"Represents a \"future result\" of a running process. It basically wraps a ``Popen``\n", "colour": "blue", "author": "Tomer.Filiba@emc.com"}, {"error": "C", "line": "24", "code": "    object and the expected exit code, and provides poll(), wait(), returncode, stdout,\n", "colour": "blue", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "25", "code": "    and stderr.\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "26", "code": "    \"\"\"\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "C", "line": "27", "code": "    def __init__(self, proc, expected_retcode, timeout = None):\n", "colour": "blue", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "28", "code": "        self.proc = proc\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "29", "code": "        self._expected_retcode = expected_retcode\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "30", "code": "        self._timeout = timeout\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "31", "code": "        self._returncode = None\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "32", "code": "        self._stdout = None\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "33", "code": "        self._stderr = None\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "34", "code": "    def __repr__(self):\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "C", "line": "35", "code": "        return \"<Future %r (%s)>\" % (self.proc.argv, self._returncode if self.ready() else \"running\",)\n", "colour": "blue", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "36", "code": "    def poll(self):\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "C", "line": "37", "code": "        \"\"\"Polls the underlying process for termination; returns ``None`` if still running,\n", "colour": "blue", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "38", "code": "        or the process' returncode if terminated\"\"\"\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "39", "code": "        if self.proc.poll() is not None:\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "40", "code": "            self.wait()\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "41", "code": "        return self._returncode is not None\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "42", "code": "    ready = poll\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "43", "code": "    def wait(self):\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "44", "code": "        \"\"\"Waits for the process to terminate; will raise a\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "45", "code": "        :class:`plumbum.commands.ProcessExecutionError` in case of failure\"\"\"\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "46", "code": "        if self._returncode is not None:\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "47", "code": "            return\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "48", "code": "        self._returncode, self._stdout, self._stderr = run_proc(self.proc,\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "C", "line": "49", "code": "            self._expected_retcode, self._timeout)\n", "colour": "blue", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "50", "code": "    @property\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "51", "code": "    def stdout(self):\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "C", "line": "52", "code": "        \"\"\"The process' stdout; accessing this property will wait for the process to finish\"\"\"\n", "colour": "blue", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "53", "code": "        self.wait()\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "54", "code": "        return self._stdout\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "55", "code": "    @property\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "56", "code": "    def stderr(self):\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "C", "line": "57", "code": "        \"\"\"The process' stderr; accessing this property will wait for the process to finish\"\"\"\n", "colour": "blue", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "58", "code": "        self.wait()\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "59", "code": "        return self._stderr\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "60", "code": "    @property\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "61", "code": "    def returncode(self):\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "C", "line": "62", "code": "        \"\"\"The process' returncode; accessing this property will wait for the process to finish\"\"\"\n", "colour": "blue", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "63", "code": "        self.wait()\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "64", "code": "        return self._returncode\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "65", "code": "\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "R", "line": "66", "code": "class BG(ExecutionModifier):\n", "colour": "green", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "67", "code": "    \"\"\"\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "C", "line": "68", "code": "    An execution modifier that runs the given command in the background, returning a\n", "colour": "blue", "author": "Tomer.Filiba@emc.com"}, {"error": "C", "line": "69", "code": "    :class:`Future <plumbum.commands.Future>` object. In order to mimic shell syntax, it applies\n", "colour": "blue", "author": "Tomer.Filiba@emc.com"}, {"error": "C", "line": "70", "code": "    when you right-and it with a command. If you wish to expect a different return code\n", "colour": "blue", "author": "Tomer.Filiba@emc.com"}, {"error": "C", "line": "71", "code": "    (other than the normal success indicate by 0), use ``BG(retcode)``. Example::\n", "colour": "blue", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "72", "code": "\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "73", "code": "        future = sleep[5] & BG       # a future expecting an exit code of 0\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "74", "code": "        future = sleep[5] & BG(7)    # a future expecting an exit code of 7\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "75", "code": "\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "76", "code": "    .. note::\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "77", "code": "\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "78", "code": "       When processes run in the **background** (either via ``popen`` or\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "C", "line": "79", "code": "       :class:`& BG <plumbum.commands.BG>`), their stdout/stderr pipes might fill up,\n", "colour": "blue", "author": "Tomer.Filiba@emc.com"}, {"error": "C", "line": "80", "code": "       causing them to hang. If you know a process produces output, be sure to consume it\n", "colour": "blue", "author": "Tomer.Filiba@emc.com"}, {"error": "C", "line": "81", "code": "       every once in a while, using a monitoring thread/reactor in the background.\n", "colour": "blue", "author": "Tomer.Filiba@emc.com"}, {"error": "C", "line": "82", "code": "       For more info, see `#48 <https://github.com/tomerfiliba/plumbum/issues/48>`_\n", "colour": "blue", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "83", "code": "    \"\"\"\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "84", "code": "    __slots__ = []\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "85", "code": "    def __rand__(self, cmd):\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "86", "code": "        return Future(cmd.popen(), self.retcode)\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "87", "code": "\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "88", "code": "BG = BG()\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "89", "code": "\"\"\"\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "90", "code": "An execution modifier that runs the given command in the background, returning a\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "C", "line": "91", "code": ":class:`Future <plumbum.commands.Future>` object. In order to mimic shell syntax, it applies\n", "colour": "blue", "author": "Tomer.Filiba@emc.com"}, {"error": "C", "line": "92", "code": "when you right-and it with a command. If you wish to expect a different return code\n", "colour": "blue", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "93", "code": "(other than the normal success indicate by 0), use ``BG(retcode)``. Example::\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "94", "code": "\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "95", "code": "    future = sleep[5] & BG       # a future expecting an exit code of 0\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "96", "code": "    future = sleep[5] & BG(7)    # a future expecting an exit code of 7\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "97", "code": "\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "98", "code": ".. note::\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "99", "code": "\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "100", "code": "   When processes run in the **background** (either via ``popen`` or\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "C", "line": "101", "code": "   :class:`& BG <plumbum.commands.BG>`), their stdout/stderr pipes might fill up,\n", "colour": "blue", "author": "Tomer.Filiba@emc.com"}, {"error": "C", "line": "102", "code": "   causing them to hang. If you know a process produces output, be sure to consume it\n", "colour": "blue", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "103", "code": "   every once in a while, using a monitoring thread/reactor in the background.\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "104", "code": "   For more info, see `#48 <https://github.com/tomerfiliba/plumbum/issues/48>`_\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "105", "code": "\"\"\"\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "106", "code": "\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "R", "line": "107", "code": "class FG(ExecutionModifier):\n", "colour": "green", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "108", "code": "    \"\"\"\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "C", "line": "109", "code": "    An execution modifier that runs the given command in the foreground, passing it the\n", "colour": "blue", "author": "Tomer.Filiba@emc.com"}, {"error": "C", "line": "110", "code": "    current process' stdin, stdout and stderr. Useful for interactive programs that require\n", "colour": "blue", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "111", "code": "    a TTY. There is no return value.\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "112", "code": "\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "C", "line": "113", "code": "    In order to mimic shell syntax, it applies when you right-and it with a command.\n", "colour": "blue", "author": "Tomer.Filiba@emc.com"}, {"error": "C", "line": "114", "code": "    If you wish to expect a different return code (other than the normal success indicate by 0),\n", "colour": "blue", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "115", "code": "    use ``BG(retcode)``. Example::\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "116", "code": "\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "117", "code": "        vim & FG       # run vim in the foreground, expecting an exit code of 0\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "118", "code": "        vim & FG(7)    # run vim in the foreground, expecting an exit code of 7\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "119", "code": "    \"\"\"\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "120", "code": "    __slots__ = []\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "121", "code": "    def __rand__(self, cmd):\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "C", "line": "122", "code": "        cmd(retcode = self.retcode, stdin = None, stdout = None, stderr = None)\n", "colour": "blue", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "123", "code": "\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "124", "code": "FG = FG()\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "125", "code": "\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "126", "code": "\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "R", "line": "127", "code": "class TEE(ExecutionModifier):\n", "colour": "green", "author": "eevee.git@veekun.com"}, {"error": "none", "line": "128", "code": "    \"\"\"Run a command, dumping its stdout/stderr to the current process's stdout\n", "colour": "black", "author": "eevee.git@veekun.com"}, {"error": "none", "line": "129", "code": "    and stderr, but ALSO return them.  Useful for interactive programs that\n", "colour": "black", "author": "eevee.git@veekun.com"}, {"error": "none", "line": "130", "code": "    expect a TTY but also have valuable output.\n", "colour": "black", "author": "eevee.git@veekun.com"}, {"error": "none", "line": "131", "code": "\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "132", "code": "    Use as:\n", "colour": "black", "author": "eevee.git@veekun.com"}, {"error": "none", "line": "133", "code": "\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "134", "code": "        ls[\"-l\"] & TEE\n", "colour": "black", "author": "eevee.git@veekun.com"}, {"error": "none", "line": "135", "code": "\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "136", "code": "    Returns a tuple of (return code, stdout, stderr), just like ``run()``.\n", "colour": "black", "author": "eevee.git@veekun.com"}, {"error": "none", "line": "137", "code": "    \"\"\"\n", "colour": "black", "author": "eevee.git@veekun.com"}, {"error": "W", "line": "138", "code": "    def __init__(self, retcode=0, buffered=True):\n", "colour": "purple", "author": "eevee.git@veekun.com"}, {"error": "none", "line": "139", "code": "        \"\"\"`retcode` is the return code to expect to mean \"success\".  Set\n", "colour": "black", "author": "eevee.git@veekun.com"}, {"error": "none", "line": "140", "code": "        `buffered` to false to disable line-buffering the output, which may\n", "colour": "black", "author": "eevee.git@veekun.com"}, {"error": "none", "line": "141", "code": "        cause stdout and stderr to become more entangled than usual.\n", "colour": "black", "author": "eevee.git@veekun.com"}, {"error": "none", "line": "142", "code": "        \"\"\"\n", "colour": "black", "author": "eevee.git@veekun.com"}, {"error": "none", "line": "143", "code": "        self.retcode = retcode\n", "colour": "black", "author": "eevee.git@veekun.com"}, {"error": "none", "line": "144", "code": "        self.buffered = buffered\n", "colour": "black", "author": "eevee.git@veekun.com"}, {"error": "none", "line": "145", "code": "\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "146", "code": "    @classmethod\n", "colour": "black", "author": "eevee.git@veekun.com"}, {"error": "none", "line": "147", "code": "    def __call__(cls, *args, **kwargs):\n", "colour": "black", "author": "eevee.git@veekun.com"}, {"error": "none", "line": "148", "code": "        return cls(*args, **kwargs)\n", "colour": "black", "author": "eevee.git@veekun.com"}, {"error": "none", "line": "149", "code": "\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "150", "code": "    def __rand__(self, cmd):\n", "colour": "black", "author": "eevee.git@veekun.com"}, {"error": "C", "line": "151", "code": "        with cmd.bgrun(retcode=self.retcode, stdin=None, stdout=PIPE, stderr=PIPE) as p:\n", "colour": "blue", "author": "eevee.git@veekun.com"}, {"error": "none", "line": "152", "code": "            outbuf = []\n", "colour": "black", "author": "eevee.git@veekun.com"}, {"error": "none", "line": "153", "code": "            errbuf = []\n", "colour": "black", "author": "eevee.git@veekun.com"}, {"error": "none", "line": "154", "code": "            out = p.stdout\n", "colour": "black", "author": "eevee.git@veekun.com"}, {"error": "none", "line": "155", "code": "            err = p.stderr\n", "colour": "black", "author": "eevee.git@veekun.com"}, {"error": "none", "line": "156", "code": "            buffers = {out: outbuf, err: errbuf}\n", "colour": "black", "author": "eevee.git@veekun.com"}, {"error": "none", "line": "157", "code": "            tee_to = {out: sys.stdout, err: sys.stderr}\n", "colour": "black", "author": "eevee.git@veekun.com"}, {"error": "none", "line": "158", "code": "            while p.poll() is None:\n", "colour": "black", "author": "eevee.git@veekun.com"}, {"error": "none", "line": "159", "code": "                ready, _, _ = select((out, err), (), ())\n", "colour": "black", "author": "eevee.git@veekun.com"}, {"error": "C", "line": "160", "code": "                for fd in ready:\n", "colour": "blue", "author": "eevee.git@veekun.com"}, {"error": "none", "line": "161", "code": "                    buf = buffers[fd]\n", "colour": "black", "author": "eevee.git@veekun.com"}, {"error": "none", "line": "162", "code": "                    data = os.read(fd.fileno(), 4096)\n", "colour": "black", "author": "eevee.git@veekun.com"}, {"error": "none", "line": "163", "code": "                    if not data:  # eof\n", "colour": "black", "author": "eevee.git@veekun.com"}, {"error": "none", "line": "164", "code": "                        continue\n", "colour": "black", "author": "eevee.git@veekun.com"}, {"error": "none", "line": "165", "code": "\n", "colour": "black", "author": "eevee.git@veekun.com"}, {"error": "none", "line": "166", "code": "                    # Python conveniently line-buffers stdout and stderr for\n", "colour": "black", "author": "eevee.git@veekun.com"}, {"error": "none", "line": "167", "code": "                    # us, so all we need to do is write to them\n", "colour": "black", "author": "eevee.git@veekun.com"}, {"error": "none", "line": "168", "code": "                    tee_to[fd].write(data)\n", "colour": "black", "author": "eevee.git@veekun.com"}, {"error": "none", "line": "169", "code": "                    # And then \"unbuffered\" is just flushing after each write\n", "colour": "black", "author": "eevee.git@veekun.com"}, {"error": "none", "line": "170", "code": "                    if not self.buffered:\n", "colour": "black", "author": "eevee.git@veekun.com"}, {"error": "none", "line": "171", "code": "                        tee_to[fd].flush()\n", "colour": "black", "author": "eevee.git@veekun.com"}, {"error": "none", "line": "172", "code": "\n", "colour": "black", "author": "eevee.git@veekun.com"}, {"error": "none", "line": "173", "code": "                    buf.append(data)\n", "colour": "black", "author": "eevee.git@veekun.com"}, {"error": "none", "line": "174", "code": "\n", "colour": "black", "author": "eevee.git@veekun.com"}, {"error": "none", "line": "175", "code": "            return p.returncode, ''.join(outbuf), ''.join(errbuf)\n", "colour": "black", "author": "eevee.git@veekun.com"}, {"error": "none", "line": "176", "code": "\n", "colour": "black", "author": "eevee.git@veekun.com"}, {"error": "none", "line": "177", "code": "TEE = TEE()\n", "colour": "black", "author": "eevee.git@veekun.com"}]]}