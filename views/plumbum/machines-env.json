{"path": "/home/asumal/git/cs410/plumbum/plumbum/machines/env.py", "lines": [[{"error": "C", "line": "1", "code": "import os\n", "colour": "blue", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "2", "code": "from contextlib import contextmanager\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "3", "code": "\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "4", "code": "\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "C", "line": "5", "code": "class EnvPathList(list):\n", "colour": "blue", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "6", "code": "    __slots__ = [\"_path_factory\", \"_pathsep\"]\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "7", "code": "\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "W", "line": "8", "code": "    def __init__(self, path_factory, pathsep):\n", "colour": "purple", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "9", "code": "        self._path_factory = path_factory\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "10", "code": "        self._pathsep = pathsep\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "11", "code": "    def append(self, path):\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "12", "code": "        list.append(self, self._path_factory(path))\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "13", "code": "    def extend(self, paths):\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "14", "code": "        list.extend(self, (self._path_factory(p) for p in paths))\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "15", "code": "    def insert(self, index, path):\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "16", "code": "        list.insert(self, index, self._path_factory(path))\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "17", "code": "    def index(self, path):\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "18", "code": "        list.index(self, self._path_factory(path))\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "19", "code": "    def __contains__(self, path):\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "20", "code": "        return list.__contains__(self, self._path_factory(path))\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "21", "code": "    def remove(self, path):\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "22", "code": "        list.remove(self, self._path_factory(path))\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "C", "line": "23", "code": "    def update(self, text):\n", "colour": "blue", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "24", "code": "        self[:] = [self._path_factory(p) for p in text.split(self._pathsep)]\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "C", "line": "25", "code": "    def join(self):\n", "colour": "blue", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "26", "code": "        return self._pathsep.join(str(p) for p in self)\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "27", "code": "\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "28", "code": "\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "29", "code": "class BaseEnv(object):\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "30", "code": "    \"\"\"The base class of LocalEnv and RemoteEnv\"\"\"\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "31", "code": "    __slots__ = [\"_curr\", \"_path\", \"_path_factory\"]\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "32", "code": "    CASE_SENSITIVE = True\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "33", "code": "\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "34", "code": "    def __init__(self, path_factory, pathsep):\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "35", "code": "        self._path_factory = path_factory\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "36", "code": "        self._path = EnvPathList(path_factory, pathsep)\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "37", "code": "        self._update_path()\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "38", "code": "\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "C", "line": "39", "code": "    def _update_path(self):\n", "colour": "blue", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "40", "code": "        self._path.update(self.get(\"PATH\", \"\"))\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "41", "code": "\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "42", "code": "    @contextmanager\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "43", "code": "    def __call__(self, *args, **kwargs):\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "C", "line": "44", "code": "        \"\"\"A context manager that can be used for temporal modifications of the environment.\n", "colour": "blue", "author": "Tomer.Filiba@emc.com"}, {"error": "C", "line": "45", "code": "        Any time you enter the context, a copy of the old environment is stored, and then restored,\n", "colour": "blue", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "46", "code": "        when the context exits.\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "47", "code": "\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "48", "code": "        :param args: Any positional arguments for ``update()``\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "49", "code": "        :param kwargs: Any keyword arguments for ``update()``\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "50", "code": "        \"\"\"\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "E", "line": "51", "code": "        prev = self._curr.copy()\n", "colour": "yellow", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "52", "code": "        self.update(**kwargs)\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "53", "code": "        try:\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "54", "code": "            yield\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "55", "code": "        finally:\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "W", "line": "56", "code": "            self._curr = prev\n", "colour": "purple", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "57", "code": "            self._update_path()\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "58", "code": "\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "59", "code": "    def __iter__(self):\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "C", "line": "60", "code": "        \"\"\"Returns an iterator over the items ``(key, value)`` of current environment\n", "colour": "blue", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "61", "code": "        (like dict.items)\"\"\"\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "62", "code": "        return iter(self._curr.items())\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "63", "code": "    def __hash__(self):\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "64", "code": "        raise TypeError(\"unhashable type\")\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "65", "code": "    def __len__(self):\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "66", "code": "        \"\"\"Returns the number of elements of the current environment\"\"\"\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "67", "code": "        return len(self._curr)\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "68", "code": "    def __contains__(self, name):\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "C", "line": "69", "code": "        \"\"\"Tests whether an environment variable exists in the current environment\"\"\"\n", "colour": "blue", "author": "Tomer.Filiba@emc.com"}, {"error": "C", "line": "70", "code": "        return (name if self.CASE_SENSITIVE else name.upper()) in self._curr\n", "colour": "blue", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "71", "code": "    def __getitem__(self, name):\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "C", "line": "72", "code": "        \"\"\"Returns the value of the given environment variable from current environment,\n", "colour": "blue", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "73", "code": "        raising a ``KeyError`` if it does not exist\"\"\"\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "74", "code": "        return self._curr[name if self.CASE_SENSITIVE else name.upper()]\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "75", "code": "    def keys(self):\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "76", "code": "        \"\"\"Returns the keys of the current environment (like dict.keys)\"\"\"\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "77", "code": "        return self._curr.keys()\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "78", "code": "    def items(self):\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "79", "code": "        \"\"\"Returns the items of the current environment (like dict.items)\"\"\"\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "80", "code": "        return self._curr.items()\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "81", "code": "    def values(self):\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "82", "code": "        \"\"\"Returns the values of the current environment (like dict.values)\"\"\"\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "83", "code": "        return self._curr.values()\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "84", "code": "    def get(self, name, *default):\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "85", "code": "        \"\"\"Returns the keys of the current environment (like dict.keys)\"\"\"\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "C", "line": "86", "code": "        return self._curr.get((name if self.CASE_SENSITIVE else name.upper()), *default)\n", "colour": "blue", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "87", "code": "\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "88", "code": "    def __delitem__(self, name):\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "89", "code": "        \"\"\"Deletes an environment variable from the current environment\"\"\"\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "90", "code": "        name = name if self.CASE_SENSITIVE else name.upper()\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "91", "code": "        del self._curr[name]\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "92", "code": "        if name == \"PATH\":\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "93", "code": "            self._update_path()\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "94", "code": "    def __setitem__(self, name, value):\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "C", "line": "95", "code": "        \"\"\"Sets/replaces an environment variable's value in the current environment\"\"\"\n", "colour": "blue", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "96", "code": "        name = name if self.CASE_SENSITIVE else name.upper()\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "97", "code": "        self._curr[name] = value\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "98", "code": "        if name == \"PATH\":\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "99", "code": "            self._update_path()\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "100", "code": "    def pop(self, name, *default):\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "101", "code": "        \"\"\"Pops an element from the current environment (like dict.pop)\"\"\"\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "102", "code": "        name = name if self.CASE_SENSITIVE else name.upper()\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "103", "code": "        res = self._curr.pop(name, *default)\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "104", "code": "        if name == \"PATH\":\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "105", "code": "            self._update_path()\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "106", "code": "        return res\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "107", "code": "    def clear(self):\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "108", "code": "        \"\"\"Clears the current environment (like dict.clear)\"\"\"\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "109", "code": "        self._curr.clear()\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "110", "code": "        self._update_path()\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "111", "code": "    def update(self, *args, **kwargs):\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "112", "code": "        \"\"\"Updates the current environment (like dict.update)\"\"\"\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "113", "code": "        self._curr.update(*args, **kwargs)\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "114", "code": "        if not self.CASE_SENSITIVE:\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "C", "line": "115", "code": "            for k, v in list(self._curr.items()):\n", "colour": "blue", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "116", "code": "                self._curr[k.upper()] = v\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "117", "code": "        self._update_path()\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "118", "code": "\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "119", "code": "    def getdict(self):\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "120", "code": "        \"\"\"Returns the environment as a real dictionary\"\"\"\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "121", "code": "        self._curr[\"PATH\"] = self.path.join()\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "122", "code": "        return dict((k, str(v)) for k, v in self._curr.items())\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "123", "code": "\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "124", "code": "    @property\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "125", "code": "    def path(self):\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "126", "code": "        \"\"\"The system's ``PATH`` (as an easy-to-manipulate list)\"\"\"\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "127", "code": "        return self._path\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "128", "code": "\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "C", "line": "129", "code": "    def _get_home(self):\n", "colour": "blue", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "130", "code": "        if \"HOME\" in self:\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "131", "code": "            return self._path_factory(self[\"HOME\"])\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "132", "code": "        elif \"USERPROFILE\" in self:\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "133", "code": "            return self._path_factory(self[\"USERPROFILE\"])\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "134", "code": "        elif \"HOMEPATH\" in self:\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "C", "line": "135", "code": "            return self._path_factory(self.get(\"HOMEDRIVE\", \"\"), self[\"HOMEPATH\"])\n", "colour": "blue", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "136", "code": "        return None\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "C", "line": "137", "code": "    def _set_home(self, p):\n", "colour": "blue", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "138", "code": "        if \"HOME\" in self:\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "139", "code": "            self[\"HOME\"] = str(p)\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "140", "code": "        elif \"USERPROFILE\" in self:\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "141", "code": "            self[\"USERPROFILE\"] = str(p)\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "142", "code": "        elif \"HOMEPATH\" in self:\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "143", "code": "            self[\"HOMEPATH\"] = str(p)\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "144", "code": "        else:\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "145", "code": "            self[\"HOME\"] = str(p)\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "146", "code": "    home = property(_get_home, _set_home)\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "147", "code": "    \"\"\"Get or set the home path\"\"\"\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "148", "code": "\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "149", "code": "    @property\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "150", "code": "    def user(self):\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "151", "code": "        \"\"\"Return the user name, or ``None`` if it is not set\"\"\"\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "152", "code": "        # adapted from getpass.getuser()\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "153", "code": "        for name in ('LOGNAME', 'USER', 'LNAME', 'USERNAME'):\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "154", "code": "            if name in self:\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "155", "code": "                return self[name]\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "156", "code": "        try:\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "157", "code": "            # POSIX only\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "158", "code": "            import pwd\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "159", "code": "        except ImportError:\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "160", "code": "            return None\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "161", "code": "        else:\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "162", "code": "            return pwd.getpwuid(os.getuid())[0]  # @UndefinedVariable\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "163", "code": "\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}]]}