{"path": "/home/asumal/git/cs410/plumbum/plumbum/machines/env.py", "lines": [{"index": "1", "colour": "orange", "code": "import os\n", "error": "none", "author": "Tomer.Filiba@emc.com"}, {"index": "2", "colour": "orange", "code": "from contextlib import contextmanager\n", "error": "none", "author": "Tomer.Filiba@emc.com"}, {"index": "3", "colour": "orange", "code": "\n", "error": "none", "author": "Tomer.Filiba@emc.com"}, {"index": "4", "colour": "orange", "code": "\n", "error": "none", "author": "Tomer.Filiba@emc.com"}, {"index": "5", "colour": "orange", "code": "class EnvPathList(list):\n", "error": "none", "author": "Tomer.Filiba@emc.com"}, {"index": "6", "colour": "orange", "code": "    __slots__ = [\"_path_factory\", \"_pathsep\"]\n", "error": "none", "author": "Tomer.Filiba@emc.com"}, {"index": "7", "colour": "orange", "code": "\n", "error": "none", "author": "Tomer.Filiba@emc.com"}, {"index": "8", "colour": "green", "code": "    def __init__(self, path_factory, pathsep):\n", "error": "W", "author": "Tomer.Filiba@emc.com"}, {"index": "9", "colour": "orange", "code": "        self._path_factory = path_factory\n", "error": "none", "author": "Tomer.Filiba@emc.com"}, {"index": "10", "colour": "orange", "code": "        self._pathsep = pathsep\n", "error": "none", "author": "Tomer.Filiba@emc.com"}, {"index": "11", "colour": "orange", "code": "    def append(self, path):\n", "error": "none", "author": "Tomer.Filiba@emc.com"}, {"index": "12", "colour": "orange", "code": "        list.append(self, self._path_factory(path))\n", "error": "none", "author": "Tomer.Filiba@emc.com"}, {"index": "13", "colour": "orange", "code": "    def extend(self, paths):\n", "error": "none", "author": "Tomer.Filiba@emc.com"}, {"index": "14", "colour": "orange", "code": "        list.extend(self, (self._path_factory(p) for p in paths))\n", "error": "none", "author": "Tomer.Filiba@emc.com"}, {"index": "15", "colour": "orange", "code": "    def insert(self, index, path):\n", "error": "none", "author": "Tomer.Filiba@emc.com"}, {"index": "16", "colour": "orange", "code": "        list.insert(self, index, self._path_factory(path))\n", "error": "none", "author": "Tomer.Filiba@emc.com"}, {"index": "17", "colour": "orange", "code": "    def index(self, path):\n", "error": "none", "author": "Tomer.Filiba@emc.com"}, {"index": "18", "colour": "orange", "code": "        list.index(self, self._path_factory(path))\n", "error": "none", "author": "Tomer.Filiba@emc.com"}, {"index": "19", "colour": "orange", "code": "    def __contains__(self, path):\n", "error": "none", "author": "Tomer.Filiba@emc.com"}, {"index": "20", "colour": "orange", "code": "        return list.__contains__(self, self._path_factory(path))\n", "error": "none", "author": "Tomer.Filiba@emc.com"}, {"index": "21", "colour": "orange", "code": "    def remove(self, path):\n", "error": "none", "author": "Tomer.Filiba@emc.com"}, {"index": "22", "colour": "orange", "code": "        list.remove(self, self._path_factory(path))\n", "error": "none", "author": "Tomer.Filiba@emc.com"}, {"index": "23", "colour": "orange", "code": "    def update(self, text):\n", "error": "none", "author": "Tomer.Filiba@emc.com"}, {"index": "24", "colour": "orange", "code": "        self[:] = [self._path_factory(p) for p in text.split(self._pathsep)]\n", "error": "none", "author": "Tomer.Filiba@emc.com"}, {"index": "25", "colour": "orange", "code": "    def join(self):\n", "error": "none", "author": "Tomer.Filiba@emc.com"}, {"index": "26", "colour": "orange", "code": "        return self._pathsep.join(str(p) for p in self)\n", "error": "none", "author": "Tomer.Filiba@emc.com"}, {"index": "27", "colour": "orange", "code": "\n", "error": "none", "author": "Tomer.Filiba@emc.com"}, {"index": "28", "colour": "orange", "code": "\n", "error": "none", "author": "Tomer.Filiba@emc.com"}, {"index": "29", "colour": "orange", "code": "class BaseEnv(object):\n", "error": "none", "author": "Tomer.Filiba@emc.com"}, {"index": "30", "colour": "orange", "code": "    \"\"\"The base class of LocalEnv and RemoteEnv\"\"\"\n", "error": "none", "author": "Tomer.Filiba@emc.com"}, {"index": "31", "colour": "orange", "code": "    __slots__ = [\"_curr\", \"_path\", \"_path_factory\"]\n", "error": "none", "author": "Tomer.Filiba@emc.com"}, {"index": "32", "colour": "orange", "code": "    CASE_SENSITIVE = True\n", "error": "none", "author": "Tomer.Filiba@emc.com"}, {"index": "33", "colour": "orange", "code": "\n", "error": "none", "author": "Tomer.Filiba@emc.com"}, {"index": "34", "colour": "orange", "code": "    def __init__(self, path_factory, pathsep):\n", "error": "none", "author": "Tomer.Filiba@emc.com"}, {"index": "35", "colour": "orange", "code": "        self._path_factory = path_factory\n", "error": "none", "author": "Tomer.Filiba@emc.com"}, {"index": "36", "colour": "orange", "code": "        self._path = EnvPathList(path_factory, pathsep)\n", "error": "none", "author": "Tomer.Filiba@emc.com"}, {"index": "37", "colour": "orange", "code": "        self._update_path()\n", "error": "none", "author": "Tomer.Filiba@emc.com"}, {"index": "38", "colour": "orange", "code": "\n", "error": "none", "author": "Tomer.Filiba@emc.com"}, {"index": "39", "colour": "orange", "code": "    def _update_path(self):\n", "error": "none", "author": "Tomer.Filiba@emc.com"}, {"index": "40", "colour": "orange", "code": "        self._path.update(self.get(\"PATH\", \"\"))\n", "error": "none", "author": "Tomer.Filiba@emc.com"}, {"index": "41", "colour": "orange", "code": "\n", "error": "none", "author": "Tomer.Filiba@emc.com"}, {"index": "42", "colour": "orange", "code": "    @contextmanager\n", "error": "none", "author": "Tomer.Filiba@emc.com"}, {"index": "43", "colour": "orange", "code": "    def __call__(self, *args, **kwargs):\n", "error": "none", "author": "Tomer.Filiba@emc.com"}, {"index": "44", "colour": "orange", "code": "        \"\"\"A context manager that can be used for temporal modifications of the environment.\n", "error": "none", "author": "Tomer.Filiba@emc.com"}, {"index": "45", "colour": "orange", "code": "        Any time you enter the context, a copy of the old environment is stored, and then restored,\n", "error": "none", "author": "Tomer.Filiba@emc.com"}, {"index": "46", "colour": "orange", "code": "        when the context exits.\n", "error": "none", "author": "Tomer.Filiba@emc.com"}, {"index": "47", "colour": "orange", "code": "\n", "error": "none", "author": "Tomer.Filiba@emc.com"}, {"index": "48", "colour": "orange", "code": "        :param args: Any positional arguments for ``update()``\n", "error": "none", "author": "Tomer.Filiba@emc.com"}, {"index": "49", "colour": "orange", "code": "        :param kwargs: Any keyword arguments for ``update()``\n", "error": "none", "author": "Tomer.Filiba@emc.com"}, {"index": "50", "colour": "orange", "code": "        \"\"\"\n", "error": "none", "author": "Tomer.Filiba@emc.com"}, {"index": "51", "colour": "red", "code": "        prev = self._curr.copy()\n", "error": "E", "author": "Tomer.Filiba@emc.com"}, {"index": "52", "colour": "orange", "code": "        self.update(**kwargs)\n", "error": "none", "author": "Tomer.Filiba@emc.com"}, {"index": "53", "colour": "orange", "code": "        try:\n", "error": "none", "author": "Tomer.Filiba@emc.com"}, {"index": "54", "colour": "orange", "code": "            yield\n", "error": "none", "author": "Tomer.Filiba@emc.com"}, {"index": "55", "colour": "orange", "code": "        finally:\n", "error": "none", "author": "Tomer.Filiba@emc.com"}, {"index": "56", "colour": "green", "code": "            self._curr = prev\n", "error": "W", "author": "Tomer.Filiba@emc.com"}, {"index": "57", "colour": "orange", "code": "            self._update_path()\n", "error": "none", "author": "Tomer.Filiba@emc.com"}, {"index": "58", "colour": "orange", "code": "\n", "error": "none", "author": "Tomer.Filiba@emc.com"}, {"index": "59", "colour": "orange", "code": "    def __iter__(self):\n", "error": "none", "author": "Tomer.Filiba@emc.com"}, {"index": "60", "colour": "orange", "code": "        \"\"\"Returns an iterator over the items ``(key, value)`` of current environment\n", "error": "none", "author": "Tomer.Filiba@emc.com"}, {"index": "61", "colour": "orange", "code": "        (like dict.items)\"\"\"\n", "error": "none", "author": "Tomer.Filiba@emc.com"}, {"index": "62", "colour": "orange", "code": "        return iter(self._curr.items())\n", "error": "none", "author": "Tomer.Filiba@emc.com"}, {"index": "63", "colour": "orange", "code": "    def __hash__(self):\n", "error": "none", "author": "Tomer.Filiba@emc.com"}, {"index": "64", "colour": "orange", "code": "        raise TypeError(\"unhashable type\")\n", "error": "none", "author": "Tomer.Filiba@emc.com"}, {"index": "65", "colour": "orange", "code": "    def __len__(self):\n", "error": "none", "author": "Tomer.Filiba@emc.com"}, {"index": "66", "colour": "orange", "code": "        \"\"\"Returns the number of elements of the current environment\"\"\"\n", "error": "none", "author": "Tomer.Filiba@emc.com"}, {"index": "67", "colour": "orange", "code": "        return len(self._curr)\n", "error": "none", "author": "Tomer.Filiba@emc.com"}, {"index": "68", "colour": "orange", "code": "    def __contains__(self, name):\n", "error": "none", "author": "Tomer.Filiba@emc.com"}, {"index": "69", "colour": "orange", "code": "        \"\"\"Tests whether an environment variable exists in the current environment\"\"\"\n", "error": "none", "author": "Tomer.Filiba@emc.com"}, {"index": "70", "colour": "orange", "code": "        return (name if self.CASE_SENSITIVE else name.upper()) in self._curr\n", "error": "none", "author": "Tomer.Filiba@emc.com"}, {"index": "71", "colour": "orange", "code": "    def __getitem__(self, name):\n", "error": "none", "author": "Tomer.Filiba@emc.com"}, {"index": "72", "colour": "orange", "code": "        \"\"\"Returns the value of the given environment variable from current environment,\n", "error": "none", "author": "Tomer.Filiba@emc.com"}, {"index": "73", "colour": "orange", "code": "        raising a ``KeyError`` if it does not exist\"\"\"\n", "error": "none", "author": "Tomer.Filiba@emc.com"}, {"index": "74", "colour": "orange", "code": "        return self._curr[name if self.CASE_SENSITIVE else name.upper()]\n", "error": "none", "author": "Tomer.Filiba@emc.com"}, {"index": "75", "colour": "orange", "code": "    def keys(self):\n", "error": "none", "author": "Tomer.Filiba@emc.com"}, {"index": "76", "colour": "orange", "code": "        \"\"\"Returns the keys of the current environment (like dict.keys)\"\"\"\n", "error": "none", "author": "Tomer.Filiba@emc.com"}, {"index": "77", "colour": "orange", "code": "        return self._curr.keys()\n", "error": "none", "author": "Tomer.Filiba@emc.com"}, {"index": "78", "colour": "orange", "code": "    def items(self):\n", "error": "none", "author": "Tomer.Filiba@emc.com"}, {"index": "79", "colour": "orange", "code": "        \"\"\"Returns the items of the current environment (like dict.items)\"\"\"\n", "error": "none", "author": "Tomer.Filiba@emc.com"}, {"index": "80", "colour": "orange", "code": "        return self._curr.items()\n", "error": "none", "author": "Tomer.Filiba@emc.com"}, {"index": "81", "colour": "orange", "code": "    def values(self):\n", "error": "none", "author": "Tomer.Filiba@emc.com"}, {"index": "82", "colour": "orange", "code": "        \"\"\"Returns the values of the current environment (like dict.values)\"\"\"\n", "error": "none", "author": "Tomer.Filiba@emc.com"}, {"index": "83", "colour": "orange", "code": "        return self._curr.values()\n", "error": "none", "author": "Tomer.Filiba@emc.com"}, {"index": "84", "colour": "orange", "code": "    def get(self, name, *default):\n", "error": "none", "author": "Tomer.Filiba@emc.com"}, {"index": "85", "colour": "orange", "code": "        \"\"\"Returns the keys of the current environment (like dict.keys)\"\"\"\n", "error": "none", "author": "Tomer.Filiba@emc.com"}, {"index": "86", "colour": "orange", "code": "        return self._curr.get((name if self.CASE_SENSITIVE else name.upper()), *default)\n", "error": "none", "author": "Tomer.Filiba@emc.com"}, {"index": "87", "colour": "orange", "code": "\n", "error": "none", "author": "Tomer.Filiba@emc.com"}, {"index": "88", "colour": "orange", "code": "    def __delitem__(self, name):\n", "error": "none", "author": "Tomer.Filiba@emc.com"}, {"index": "89", "colour": "orange", "code": "        \"\"\"Deletes an environment variable from the current environment\"\"\"\n", "error": "none", "author": "Tomer.Filiba@emc.com"}, {"index": "90", "colour": "orange", "code": "        name = name if self.CASE_SENSITIVE else name.upper()\n", "error": "none", "author": "Tomer.Filiba@emc.com"}, {"index": "91", "colour": "orange", "code": "        del self._curr[name]\n", "error": "none", "author": "Tomer.Filiba@emc.com"}, {"index": "92", "colour": "orange", "code": "        if name == \"PATH\":\n", "error": "none", "author": "Tomer.Filiba@emc.com"}, {"index": "93", "colour": "orange", "code": "            self._update_path()\n", "error": "none", "author": "Tomer.Filiba@emc.com"}, {"index": "94", "colour": "orange", "code": "    def __setitem__(self, name, value):\n", "error": "none", "author": "Tomer.Filiba@emc.com"}, {"index": "95", "colour": "orange", "code": "        \"\"\"Sets/replaces an environment variable's value in the current environment\"\"\"\n", "error": "none", "author": "Tomer.Filiba@emc.com"}, {"index": "96", "colour": "orange", "code": "        name = name if self.CASE_SENSITIVE else name.upper()\n", "error": "none", "author": "Tomer.Filiba@emc.com"}, {"index": "97", "colour": "orange", "code": "        self._curr[name] = value\n", "error": "none", "author": "Tomer.Filiba@emc.com"}, {"index": "98", "colour": "orange", "code": "        if name == \"PATH\":\n", "error": "none", "author": "Tomer.Filiba@emc.com"}, {"index": "99", "colour": "orange", "code": "            self._update_path()\n", "error": "none", "author": "Tomer.Filiba@emc.com"}, {"index": "100", "colour": "orange", "code": "    def pop(self, name, *default):\n", "error": "none", "author": "Tomer.Filiba@emc.com"}, {"index": "101", "colour": "orange", "code": "        \"\"\"Pops an element from the current environment (like dict.pop)\"\"\"\n", "error": "none", "author": "Tomer.Filiba@emc.com"}, {"index": "102", "colour": "orange", "code": "        name = name if self.CASE_SENSITIVE else name.upper()\n", "error": "none", "author": "Tomer.Filiba@emc.com"}, {"index": "103", "colour": "orange", "code": "        res = self._curr.pop(name, *default)\n", "error": "none", "author": "Tomer.Filiba@emc.com"}, {"index": "104", "colour": "orange", "code": "        if name == \"PATH\":\n", "error": "none", "author": "Tomer.Filiba@emc.com"}, {"index": "105", "colour": "orange", "code": "            self._update_path()\n", "error": "none", "author": "Tomer.Filiba@emc.com"}, {"index": "106", "colour": "orange", "code": "        return res\n", "error": "none", "author": "Tomer.Filiba@emc.com"}, {"index": "107", "colour": "orange", "code": "    def clear(self):\n", "error": "none", "author": "Tomer.Filiba@emc.com"}, {"index": "108", "colour": "orange", "code": "        \"\"\"Clears the current environment (like dict.clear)\"\"\"\n", "error": "none", "author": "Tomer.Filiba@emc.com"}, {"index": "109", "colour": "orange", "code": "        self._curr.clear()\n", "error": "none", "author": "Tomer.Filiba@emc.com"}, {"index": "110", "colour": "orange", "code": "        self._update_path()\n", "error": "none", "author": "Tomer.Filiba@emc.com"}, {"index": "111", "colour": "orange", "code": "    def update(self, *args, **kwargs):\n", "error": "none", "author": "Tomer.Filiba@emc.com"}, {"index": "112", "colour": "orange", "code": "        \"\"\"Updates the current environment (like dict.update)\"\"\"\n", "error": "none", "author": "Tomer.Filiba@emc.com"}, {"index": "113", "colour": "orange", "code": "        self._curr.update(*args, **kwargs)\n", "error": "none", "author": "Tomer.Filiba@emc.com"}, {"index": "114", "colour": "orange", "code": "        if not self.CASE_SENSITIVE:\n", "error": "none", "author": "Tomer.Filiba@emc.com"}, {"index": "115", "colour": "orange", "code": "            for k, v in list(self._curr.items()):\n", "error": "none", "author": "Tomer.Filiba@emc.com"}, {"index": "116", "colour": "orange", "code": "                self._curr[k.upper()] = v\n", "error": "none", "author": "Tomer.Filiba@emc.com"}, {"index": "117", "colour": "orange", "code": "        self._update_path()\n", "error": "none", "author": "Tomer.Filiba@emc.com"}, {"index": "118", "colour": "orange", "code": "\n", "error": "none", "author": "Tomer.Filiba@emc.com"}, {"index": "119", "colour": "orange", "code": "    def getdict(self):\n", "error": "none", "author": "Tomer.Filiba@emc.com"}, {"index": "120", "colour": "orange", "code": "        \"\"\"Returns the environment as a real dictionary\"\"\"\n", "error": "none", "author": "Tomer.Filiba@emc.com"}, {"index": "121", "colour": "orange", "code": "        self._curr[\"PATH\"] = self.path.join()\n", "error": "none", "author": "Tomer.Filiba@emc.com"}, {"index": "122", "colour": "orange", "code": "        return dict((k, str(v)) for k, v in self._curr.items())\n", "error": "none", "author": "Tomer.Filiba@emc.com"}, {"index": "123", "colour": "orange", "code": "\n", "error": "none", "author": "Tomer.Filiba@emc.com"}, {"index": "124", "colour": "orange", "code": "    @property\n", "error": "none", "author": "Tomer.Filiba@emc.com"}, {"index": "125", "colour": "orange", "code": "    def path(self):\n", "error": "none", "author": "Tomer.Filiba@emc.com"}, {"index": "126", "colour": "orange", "code": "        \"\"\"The system's ``PATH`` (as an easy-to-manipulate list)\"\"\"\n", "error": "none", "author": "Tomer.Filiba@emc.com"}, {"index": "127", "colour": "orange", "code": "        return self._path\n", "error": "none", "author": "Tomer.Filiba@emc.com"}, {"index": "128", "colour": "orange", "code": "\n", "error": "none", "author": "Tomer.Filiba@emc.com"}, {"index": "129", "colour": "orange", "code": "    def _get_home(self):\n", "error": "none", "author": "Tomer.Filiba@emc.com"}, {"index": "130", "colour": "orange", "code": "        if \"HOME\" in self:\n", "error": "none", "author": "Tomer.Filiba@emc.com"}, {"index": "131", "colour": "orange", "code": "            return self._path_factory(self[\"HOME\"])\n", "error": "none", "author": "Tomer.Filiba@emc.com"}, {"index": "132", "colour": "orange", "code": "        elif \"USERPROFILE\" in self:\n", "error": "none", "author": "Tomer.Filiba@emc.com"}, {"index": "133", "colour": "orange", "code": "            return self._path_factory(self[\"USERPROFILE\"])\n", "error": "none", "author": "Tomer.Filiba@emc.com"}, {"index": "134", "colour": "orange", "code": "        elif \"HOMEPATH\" in self:\n", "error": "none", "author": "Tomer.Filiba@emc.com"}, {"index": "135", "colour": "orange", "code": "            return self._path_factory(self.get(\"HOMEDRIVE\", \"\"), self[\"HOMEPATH\"])\n", "error": "none", "author": "Tomer.Filiba@emc.com"}, {"index": "136", "colour": "orange", "code": "        return None\n", "error": "none", "author": "Tomer.Filiba@emc.com"}, {"index": "137", "colour": "orange", "code": "    def _set_home(self, p):\n", "error": "none", "author": "Tomer.Filiba@emc.com"}, {"index": "138", "colour": "orange", "code": "        if \"HOME\" in self:\n", "error": "none", "author": "Tomer.Filiba@emc.com"}, {"index": "139", "colour": "orange", "code": "            self[\"HOME\"] = str(p)\n", "error": "none", "author": "Tomer.Filiba@emc.com"}, {"index": "140", "colour": "orange", "code": "        elif \"USERPROFILE\" in self:\n", "error": "none", "author": "Tomer.Filiba@emc.com"}, {"index": "141", "colour": "orange", "code": "            self[\"USERPROFILE\"] = str(p)\n", "error": "none", "author": "Tomer.Filiba@emc.com"}, {"index": "142", "colour": "orange", "code": "        elif \"HOMEPATH\" in self:\n", "error": "none", "author": "Tomer.Filiba@emc.com"}, {"index": "143", "colour": "orange", "code": "            self[\"HOMEPATH\"] = str(p)\n", "error": "none", "author": "Tomer.Filiba@emc.com"}, {"index": "144", "colour": "orange", "code": "        else:\n", "error": "none", "author": "Tomer.Filiba@emc.com"}, {"index": "145", "colour": "orange", "code": "            self[\"HOME\"] = str(p)\n", "error": "none", "author": "Tomer.Filiba@emc.com"}, {"index": "146", "colour": "orange", "code": "    home = property(_get_home, _set_home)\n", "error": "none", "author": "Tomer.Filiba@emc.com"}, {"index": "147", "colour": "orange", "code": "    \"\"\"Get or set the home path\"\"\"\n", "error": "none", "author": "Tomer.Filiba@emc.com"}, {"index": "148", "colour": "orange", "code": "\n", "error": "none", "author": "Tomer.Filiba@emc.com"}, {"index": "149", "colour": "orange", "code": "    @property\n", "error": "none", "author": "Tomer.Filiba@emc.com"}, {"index": "150", "colour": "orange", "code": "    def user(self):\n", "error": "none", "author": "Tomer.Filiba@emc.com"}, {"index": "151", "colour": "orange", "code": "        \"\"\"Return the user name, or ``None`` if it is not set\"\"\"\n", "error": "none", "author": "Tomer.Filiba@emc.com"}, {"index": "152", "colour": "orange", "code": "        # adapted from getpass.getuser()\n", "error": "none", "author": "Tomer.Filiba@emc.com"}, {"index": "153", "colour": "orange", "code": "        for name in ('LOGNAME', 'USER', 'LNAME', 'USERNAME'):\n", "error": "none", "author": "Tomer.Filiba@emc.com"}, {"index": "154", "colour": "orange", "code": "            if name in self:\n", "error": "none", "author": "Tomer.Filiba@emc.com"}, {"index": "155", "colour": "orange", "code": "                return self[name]\n", "error": "none", "author": "Tomer.Filiba@emc.com"}, {"index": "156", "colour": "orange", "code": "        try:\n", "error": "none", "author": "Tomer.Filiba@emc.com"}, {"index": "157", "colour": "orange", "code": "            # POSIX only\n", "error": "none", "author": "Tomer.Filiba@emc.com"}, {"index": "158", "colour": "orange", "code": "            import pwd\n", "error": "none", "author": "Tomer.Filiba@emc.com"}, {"index": "159", "colour": "orange", "code": "        except ImportError:\n", "error": "none", "author": "Tomer.Filiba@emc.com"}, {"index": "160", "colour": "orange", "code": "            return None\n", "error": "none", "author": "Tomer.Filiba@emc.com"}, {"index": "161", "colour": "orange", "code": "        else:\n", "error": "none", "author": "Tomer.Filiba@emc.com"}, {"index": "162", "colour": "orange", "code": "            return pwd.getpwuid(os.getuid())[0]  # @UndefinedVariable\n", "error": "none", "author": "Tomer.Filiba@emc.com"}, {"index": "163", "colour": "orange", "code": "\n", "error": "none", "author": "Tomer.Filiba@emc.com"}]}