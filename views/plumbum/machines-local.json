{"path": "/home/asumal/git/cs410/plumbum/plumbum/machines/local.py", "lines": [{"index": "1", "colour": "orange", "code": "from __future__ import with_statement\n", "error": "none", "author": "Tomer.Filiba@emc.com"}, {"index": "2", "colour": "orange", "code": "import os\n", "error": "none", "author": "Tomer.Filiba@emc.com"}, {"index": "3", "colour": "orange", "code": "import sys\n", "error": "none", "author": "Tomer.Filiba@emc.com"}, {"index": "4", "colour": "orange", "code": "import subprocess\n", "error": "none", "author": "Tomer.Filiba@emc.com"}, {"index": "5", "colour": "orange", "code": "import logging\n", "error": "none", "author": "Tomer.Filiba@emc.com"}, {"index": "6", "colour": "orange", "code": "import time\n", "error": "none", "author": "Tomer.Filiba@emc.com"}, {"index": "7", "colour": "orange", "code": "import platform\n", "error": "none", "author": "Tomer.Filiba@emc.com"}, {"index": "8", "colour": "orange", "code": "import re\n", "error": "none", "author": "Tomer.Filiba@emc.com"}, {"index": "9", "colour": "orange", "code": "from plumbum.path.local import LocalPath, LocalWorkdir\n", "error": "none", "author": "Tomer.Filiba@emc.com"}, {"index": "10", "colour": "orange", "code": "from tempfile import mkdtemp\n", "error": "none", "author": "Tomer.Filiba@emc.com"}, {"index": "11", "colour": "orange", "code": "from contextlib import contextmanager\n", "error": "none", "author": "Tomer.Filiba@emc.com"}, {"index": "12", "colour": "orange", "code": "from plumbum.path.remote import RemotePath\n", "error": "none", "author": "Tomer.Filiba@emc.com"}, {"index": "13", "colour": "orange", "code": "from plumbum.commands import CommandNotFound, ConcreteCommand\n", "error": "none", "author": "Tomer.Filiba@emc.com"}, {"index": "14", "colour": "orange", "code": "from plumbum.machines.session import ShellSession\n", "error": "none", "author": "Tomer.Filiba@emc.com"}, {"index": "15", "colour": "orange", "code": "from plumbum.lib import ProcInfo, IS_WIN32, six\n", "error": "none", "author": "tomerfiliba@gmail.com"}, {"index": "16", "colour": "orange", "code": "from plumbum.commands.daemons import win32_daemonize, posix_daemonize\n", "error": "none", "author": "Tomer.Filiba@emc.com"}, {"index": "17", "colour": "orange", "code": "from plumbum.machines.env import BaseEnv\n", "error": "none", "author": "Tomer.Filiba@emc.com"}, {"index": "18", "colour": "orange", "code": "\n", "error": "none", "author": "tomerfiliba@gmail.com"}, {"index": "19", "colour": "orange", "code": "if sys.version_info >= (3, 2):\n", "error": "none", "author": "Tomer.Filiba@emc.com"}, {"index": "20", "colour": "orange", "code": "    # python 3.2 has the new-and-improved subprocess module\n", "error": "none", "author": "Tomer.Filiba@emc.com"}, {"index": "21", "colour": "orange", "code": "    from subprocess import Popen, PIPE\n", "error": "none", "author": "Tomer.Filiba@emc.com"}, {"index": "22", "colour": "orange", "code": "    has_new_subprocess = True\n", "error": "none", "author": "Tomer.Filiba@emc.com"}, {"index": "23", "colour": "orange", "code": "else:\n", "error": "none", "author": "Tomer.Filiba@emc.com"}, {"index": "24", "colour": "orange", "code": "    # otherwise, see if we have subprocess32\n", "error": "none", "author": "Tomer.Filiba@emc.com"}, {"index": "25", "colour": "orange", "code": "    try:\n", "error": "none", "author": "Tomer.Filiba@emc.com"}, {"index": "26", "colour": "orange", "code": "        from subprocess32 import Popen, PIPE\n", "error": "none", "author": "Tomer.Filiba@emc.com"}, {"index": "27", "colour": "orange", "code": "        has_new_subprocess = True\n", "error": "none", "author": "Tomer.Filiba@emc.com"}, {"index": "28", "colour": "orange", "code": "    except ImportError:\n", "error": "none", "author": "Tomer.Filiba@emc.com"}, {"index": "29", "colour": "orange", "code": "        from subprocess import Popen, PIPE\n", "error": "none", "author": "Tomer.Filiba@emc.com"}, {"index": "30", "colour": "orange", "code": "        has_new_subprocess = False\n", "error": "none", "author": "Tomer.Filiba@emc.com"}, {"index": "31", "colour": "orange", "code": "\n", "error": "none", "author": "Tomer.Filiba@emc.com"}, {"index": "32", "colour": "orange", "code": "\n", "error": "none", "author": "Tomer.Filiba@emc.com"}, {"index": "33", "colour": "orange", "code": "logger = logging.getLogger(\"plumbum.local\")\n", "error": "none", "author": "Tomer.Filiba@emc.com"}, {"index": "34", "colour": "orange", "code": "\n", "error": "none", "author": "Tomer.Filiba@emc.com"}, {"index": "35", "colour": "orange", "code": "\n", "error": "none", "author": "Tomer.Filiba@emc.com"}, {"index": "36", "colour": "orange", "code": "#===================================================================================================\n", "error": "none", "author": "Tomer.Filiba@emc.com"}, {"index": "37", "colour": "orange", "code": "# Environment\n", "error": "none", "author": "Tomer.Filiba@emc.com"}, {"index": "38", "colour": "orange", "code": "#===================================================================================================\n", "error": "none", "author": "Tomer.Filiba@emc.com"}, {"index": "39", "colour": "orange", "code": "class LocalEnv(BaseEnv):\n", "error": "none", "author": "Tomer.Filiba@emc.com"}, {"index": "40", "colour": "orange", "code": "    \"\"\"The local machine's environment; exposes a dict-like interface\"\"\"\n", "error": "none", "author": "Tomer.Filiba@emc.com"}, {"index": "41", "colour": "orange", "code": "    __slots__ = []\n", "error": "none", "author": "Tomer.Filiba@emc.com"}, {"index": "42", "colour": "orange", "code": "    CASE_SENSITIVE = not IS_WIN32\n", "error": "none", "author": "Tomer.Filiba@emc.com"}, {"index": "43", "colour": "orange", "code": "\n", "error": "none", "author": "Tomer.Filiba@emc.com"}, {"index": "44", "colour": "orange", "code": "    def __init__(self):\n", "error": "none", "author": "Tomer.Filiba@emc.com"}, {"index": "45", "colour": "orange", "code": "        # os.environ already takes care of upper'ing on windows\n", "error": "none", "author": "Tomer.Filiba@emc.com"}, {"index": "46", "colour": "orange", "code": "        self._curr = os.environ.copy()\n", "error": "none", "author": "Tomer.Filiba@emc.com"}, {"index": "47", "colour": "orange", "code": "        BaseEnv.__init__(self, LocalPath, os.path.pathsep)\n", "error": "none", "author": "Tomer.Filiba@emc.com"}, {"index": "48", "colour": "orange", "code": "        if IS_WIN32 and \"HOME\" not in self and self.home is not None:\n", "error": "none", "author": "Tomer.Filiba@emc.com"}, {"index": "49", "colour": "orange", "code": "            self[\"HOME\"] = self.home\n", "error": "none", "author": "Tomer.Filiba@emc.com"}, {"index": "50", "colour": "orange", "code": "\n", "error": "none", "author": "Tomer.Filiba@emc.com"}, {"index": "51", "colour": "orange", "code": "    def expand(self, expr):\n", "error": "none", "author": "Tomer.Filiba@emc.com"}, {"index": "52", "colour": "orange", "code": "        \"\"\"Expands any environment variables and home shortcuts found in ``expr``\n", "error": "none", "author": "Tomer.Filiba@emc.com"}, {"index": "53", "colour": "orange", "code": "        (like ``os.path.expanduser`` combined with ``os.path.expandvars``)\n", "error": "none", "author": "Tomer.Filiba@emc.com"}, {"index": "54", "colour": "orange", "code": "\n", "error": "none", "author": "Tomer.Filiba@emc.com"}, {"index": "55", "colour": "orange", "code": "        :param expr: An expression containing environment variables (as ``$FOO``) or\n", "error": "none", "author": "Tomer.Filiba@emc.com"}, {"index": "56", "colour": "orange", "code": "                     home shortcuts (as ``~/.bashrc``)\n", "error": "none", "author": "Tomer.Filiba@emc.com"}, {"index": "57", "colour": "orange", "code": "\n", "error": "none", "author": "Tomer.Filiba@emc.com"}, {"index": "58", "colour": "orange", "code": "        :returns: The expanded string\"\"\"\n", "error": "none", "author": "Tomer.Filiba@emc.com"}, {"index": "59", "colour": "orange", "code": "        prev = os.environ\n", "error": "none", "author": "Tomer.Filiba@emc.com"}, {"index": "60", "colour": "orange", "code": "        os.environ = self.getdict()\n", "error": "none", "author": "Tomer.Filiba@emc.com"}, {"index": "61", "colour": "orange", "code": "        try:\n", "error": "none", "author": "Tomer.Filiba@emc.com"}, {"index": "62", "colour": "orange", "code": "            output = os.path.expanduser(os.path.expandvars(expr))\n", "error": "none", "author": "Tomer.Filiba@emc.com"}, {"index": "63", "colour": "orange", "code": "        finally:\n", "error": "none", "author": "Tomer.Filiba@emc.com"}, {"index": "64", "colour": "orange", "code": "            os.environ = prev\n", "error": "none", "author": "Tomer.Filiba@emc.com"}, {"index": "65", "colour": "orange", "code": "        return output\n", "error": "none", "author": "Tomer.Filiba@emc.com"}, {"index": "66", "colour": "orange", "code": "\n", "error": "none", "author": "Tomer.Filiba@emc.com"}, {"index": "67", "colour": "orange", "code": "    def expanduser(self, expr):\n", "error": "none", "author": "Tomer.Filiba@emc.com"}, {"index": "68", "colour": "orange", "code": "        \"\"\"Expand home shortcuts (e.g., ``~/foo/bar`` or ``~john/foo/bar``)\n", "error": "none", "author": "Tomer.Filiba@emc.com"}, {"index": "69", "colour": "orange", "code": "\n", "error": "none", "author": "Tomer.Filiba@emc.com"}, {"index": "70", "colour": "orange", "code": "        :param expr: An expression containing home shortcuts\n", "error": "none", "author": "Tomer.Filiba@emc.com"}, {"index": "71", "colour": "orange", "code": "\n", "error": "none", "author": "Tomer.Filiba@emc.com"}, {"index": "72", "colour": "orange", "code": "        :returns: The expanded string\"\"\"\n", "error": "none", "author": "Tomer.Filiba@emc.com"}, {"index": "73", "colour": "orange", "code": "        prev = os.environ\n", "error": "none", "author": "Tomer.Filiba@emc.com"}, {"index": "74", "colour": "orange", "code": "        os.environ = self.getdict()\n", "error": "none", "author": "Tomer.Filiba@emc.com"}, {"index": "75", "colour": "orange", "code": "        try:\n", "error": "none", "author": "Tomer.Filiba@emc.com"}, {"index": "76", "colour": "orange", "code": "            output = os.path.expanduser(expr)\n", "error": "none", "author": "Tomer.Filiba@emc.com"}, {"index": "77", "colour": "orange", "code": "        finally:\n", "error": "none", "author": "Tomer.Filiba@emc.com"}, {"index": "78", "colour": "orange", "code": "            os.environ = prev\n", "error": "none", "author": "Tomer.Filiba@emc.com"}, {"index": "79", "colour": "orange", "code": "        return output\n", "error": "none", "author": "Tomer.Filiba@emc.com"}, {"index": "80", "colour": "orange", "code": "\n", "error": "none", "author": "Tomer.Filiba@emc.com"}, {"index": "81", "colour": "orange", "code": "#===================================================================================================\n", "error": "none", "author": "Tomer.Filiba@emc.com"}, {"index": "82", "colour": "orange", "code": "# Local Commands\n", "error": "none", "author": "Tomer.Filiba@emc.com"}, {"index": "83", "colour": "orange", "code": "#===================================================================================================\n", "error": "none", "author": "Tomer.Filiba@emc.com"}, {"index": "84", "colour": "orange", "code": "class LocalCommand(ConcreteCommand):\n", "error": "none", "author": "Tomer.Filiba@emc.com"}, {"index": "85", "colour": "orange", "code": "    __slots__ = []\n", "error": "none", "author": "Tomer.Filiba@emc.com"}, {"index": "86", "colour": "orange", "code": "    QUOTE_LEVEL = 2\n", "error": "none", "author": "Tomer.Filiba@emc.com"}, {"index": "87", "colour": "orange", "code": "\n", "error": "none", "author": "Tomer.Filiba@emc.com"}, {"index": "88", "colour": "orange", "code": "    def __init__(self, executable, encoding = \"auto\"):\n", "error": "none", "author": "Tomer.Filiba@emc.com"}, {"index": "89", "colour": "orange", "code": "        ConcreteCommand.__init__(self, executable,\n", "error": "none", "author": "Tomer.Filiba@emc.com"}, {"index": "90", "colour": "orange", "code": "            local.encoding if encoding == \"auto\" else encoding)\n", "error": "none", "author": "Tomer.Filiba@emc.com"}, {"index": "91", "colour": "orange", "code": "    def __repr__(self):\n", "error": "none", "author": "Tomer.Filiba@emc.com"}, {"index": "92", "colour": "orange", "code": "        return \"LocalCommand(%r)\" % (self.executable,)\n", "error": "none", "author": "Tomer.Filiba@emc.com"}, {"index": "93", "colour": "orange", "code": "\n", "error": "none", "author": "Tomer.Filiba@emc.com"}, {"index": "94", "colour": "orange", "code": "    @property\n", "error": "none", "author": "Tomer.Filiba@emc.com"}, {"index": "95", "colour": "orange", "code": "    def machine(self):\n", "error": "none", "author": "Tomer.Filiba@emc.com"}, {"index": "96", "colour": "orange", "code": "        return local\n", "error": "none", "author": "Tomer.Filiba@emc.com"}, {"index": "97", "colour": "orange", "code": "\n", "error": "none", "author": "Tomer.Filiba@emc.com"}, {"index": "98", "colour": "orange", "code": "    def popen(self, args = (), cwd = None, env = None, **kwargs):\n", "error": "none", "author": "Tomer.Filiba@emc.com"}, {"index": "99", "colour": "orange", "code": "        if isinstance(args, six.string_types):\n", "error": "none", "author": "Tomer.Filiba@emc.com"}, {"index": "100", "colour": "orange", "code": "            args = (args,)\n", "error": "none", "author": "Tomer.Filiba@emc.com"}, {"index": "101", "colour": "green", "code": "        return local._popen(self.executable, self.formulate(0, args),\n", "error": "W", "author": "Tomer.Filiba@emc.com"}, {"index": "102", "colour": "orange", "code": "            cwd = self.cwd if cwd is None else cwd, env = self.env if env is None else env,\n", "error": "none", "author": "Tomer.Filiba@emc.com"}, {"index": "103", "colour": "orange", "code": "            **kwargs)\n", "error": "none", "author": "Tomer.Filiba@emc.com"}, {"index": "104", "colour": "orange", "code": "\n", "error": "none", "author": "Tomer.Filiba@emc.com"}, {"index": "105", "colour": "orange", "code": "#===================================================================================================\n", "error": "none", "author": "Tomer.Filiba@emc.com"}, {"index": "106", "colour": "orange", "code": "# Local Machine\n", "error": "none", "author": "Tomer.Filiba@emc.com"}, {"index": "107", "colour": "orange", "code": "#===================================================================================================\n", "error": "none", "author": "Tomer.Filiba@emc.com"}, {"index": "108", "colour": "orange", "code": "class LocalMachine(object):\n", "error": "none", "author": "Tomer.Filiba@emc.com"}, {"index": "109", "colour": "orange", "code": "    \"\"\"The *local machine* (a singleton object). It serves as an entry point to everything\n", "error": "none", "author": "Tomer.Filiba@emc.com"}, {"index": "110", "colour": "orange", "code": "    related to the local machine, such as working directory and environment manipulation,\n", "error": "none", "author": "Tomer.Filiba@emc.com"}, {"index": "111", "colour": "orange", "code": "    command creation, etc.\n", "error": "none", "author": "Tomer.Filiba@emc.com"}, {"index": "112", "colour": "orange", "code": "\n", "error": "none", "author": "Tomer.Filiba@emc.com"}, {"index": "113", "colour": "orange", "code": "    Attributes:\n", "error": "none", "author": "Tomer.Filiba@emc.com"}, {"index": "114", "colour": "orange", "code": "\n", "error": "none", "author": "Tomer.Filiba@emc.com"}, {"index": "115", "colour": "orange", "code": "    * ``cwd`` - the local working directory\n", "error": "none", "author": "Tomer.Filiba@emc.com"}, {"index": "116", "colour": "orange", "code": "    * ``env`` - the local environment\n", "error": "none", "author": "Tomer.Filiba@emc.com"}, {"index": "117", "colour": "orange", "code": "    * ``encoding`` - the local machine's default encoding (``sys.getfilesystemencoding()``)\n", "error": "none", "author": "Tomer.Filiba@emc.com"}, {"index": "118", "colour": "orange", "code": "    \"\"\"\n", "error": "none", "author": "Tomer.Filiba@emc.com"}, {"index": "119", "colour": "orange", "code": "    cwd = LocalWorkdir()\n", "error": "none", "author": "Tomer.Filiba@emc.com"}, {"index": "120", "colour": "orange", "code": "    env = LocalEnv()\n", "error": "none", "author": "Tomer.Filiba@emc.com"}, {"index": "121", "colour": "orange", "code": "    encoding = sys.getfilesystemencoding()\n", "error": "none", "author": "Tomer.Filiba@emc.com"}, {"index": "122", "colour": "orange", "code": "    uname = platform.uname()[0]\n", "error": "none", "author": "Tomer.Filiba@emc.com"}, {"index": "123", "colour": "orange", "code": "\n", "error": "none", "author": "Tomer.Filiba@emc.com"}, {"index": "124", "colour": "orange", "code": "    def __init__(self):\n", "error": "none", "author": "Tomer.Filiba@emc.com"}, {"index": "125", "colour": "orange", "code": "        self._as_user_stack = []\n", "error": "none", "author": "Tomer.Filiba@emc.com"}, {"index": "126", "colour": "orange", "code": "\n", "error": "none", "author": "Tomer.Filiba@emc.com"}, {"index": "127", "colour": "orange", "code": "    if IS_WIN32:\n", "error": "none", "author": "Tomer.Filiba@emc.com"}, {"index": "128", "colour": "orange", "code": "        _EXTENSIONS = [\"\"] + env.get(\"PATHEXT\", \":.exe:.bat\").lower().split(os.path.pathsep)\n", "error": "none", "author": "Tomer.Filiba@emc.com"}, {"index": "129", "colour": "orange", "code": "\n", "error": "none", "author": "Tomer.Filiba@emc.com"}, {"index": "130", "colour": "orange", "code": "        @classmethod\n", "error": "none", "author": "Tomer.Filiba@emc.com"}, {"index": "131", "colour": "orange", "code": "        def _which(cls, progname):\n", "error": "none", "author": "Tomer.Filiba@emc.com"}, {"index": "132", "colour": "orange", "code": "            progname = progname.lower()\n", "error": "none", "author": "Tomer.Filiba@emc.com"}, {"index": "133", "colour": "orange", "code": "            for p in cls.env.path:\n", "error": "none", "author": "Tomer.Filiba@emc.com"}, {"index": "134", "colour": "orange", "code": "                for ext in cls._EXTENSIONS:\n", "error": "none", "author": "Tomer.Filiba@emc.com"}, {"index": "135", "colour": "orange", "code": "                    fn = p / (progname + ext)\n", "error": "none", "author": "tomer.filiba@emc.com"}, {"index": "136", "colour": "orange", "code": "                    if fn.access(\"x\"):\n", "error": "none", "author": "tomer.filiba@emc.com"}, {"index": "137", "colour": "orange", "code": "                        return fn\n", "error": "none", "author": "tomer.filiba@emc.com"}, {"index": "138", "colour": "orange", "code": "            return None\n", "error": "none", "author": "Tomer.Filiba@emc.com"}, {"index": "139", "colour": "orange", "code": "    else:\n", "error": "none", "author": "Tomer.Filiba@emc.com"}, {"index": "140", "colour": "orange", "code": "        @classmethod\n", "error": "none", "author": "Tomer.Filiba@emc.com"}, {"index": "141", "colour": "orange", "code": "        def _which(cls, progname):\n", "error": "none", "author": "Tomer.Filiba@emc.com"}, {"index": "142", "colour": "orange", "code": "            for p in cls.env.path:\n", "error": "none", "author": "jlisee@gmail.com"}, {"index": "143", "colour": "orange", "code": "                fn = p / progname\n", "error": "none", "author": "tomer.filiba@emc.com"}, {"index": "144", "colour": "orange", "code": "                if fn.access(\"x\"):\n", "error": "none", "author": "tomer.filiba@emc.com"}, {"index": "145", "colour": "orange", "code": "                    return fn\n", "error": "none", "author": "tomer.filiba@emc.com"}, {"index": "146", "colour": "orange", "code": "            return None\n", "error": "none", "author": "Tomer.Filiba@emc.com"}, {"index": "147", "colour": "orange", "code": "\n", "error": "none", "author": "Tomer.Filiba@emc.com"}, {"index": "148", "colour": "orange", "code": "    @classmethod\n", "error": "none", "author": "Tomer.Filiba@emc.com"}, {"index": "149", "colour": "orange", "code": "    def which(cls, progname):\n", "error": "none", "author": "Tomer.Filiba@emc.com"}, {"index": "150", "colour": "orange", "code": "        \"\"\"Looks up a program in the ``PATH``. If the program is not found, raises\n", "error": "none", "author": "Tomer.Filiba@emc.com"}, {"index": "151", "colour": "orange", "code": "        :class:`CommandNotFound <plumbum.commands.CommandNotFound>`\n", "error": "none", "author": "Tomer.Filiba@emc.com"}, {"index": "152", "colour": "orange", "code": "\n", "error": "none", "author": "Tomer.Filiba@emc.com"}, {"index": "153", "colour": "orange", "code": "        :param progname: The program's name. Note that if underscores (``_``) are present\n", "error": "none", "author": "Tomer.Filiba@emc.com"}, {"index": "154", "colour": "orange", "code": "                         in the name, and the exact name is not found, they will be replaced\n", "error": "none", "author": "Tomer.Filiba@emc.com"}, {"index": "155", "colour": "orange", "code": "                         in turn by hyphens (``-``) then periods (``.``), and the name will\n", "error": "none", "author": "tomerfiliba@gmail.com"}, {"index": "156", "colour": "orange", "code": "                         be looked up again for each alternative\n", "error": "none", "author": "andy@9mmedia.com"}, {"index": "157", "colour": "orange", "code": "\n", "error": "none", "author": "Tomer.Filiba@emc.com"}, {"index": "158", "colour": "orange", "code": "        :returns: A :class:`LocalPath <plumbum.machines.local.LocalPath>`\n", "error": "none", "author": "Tomer.Filiba@emc.com"}, {"index": "159", "colour": "orange", "code": "        \"\"\"\n", "error": "none", "author": "Tomer.Filiba@emc.com"}, {"index": "160", "colour": "orange", "code": "        alternatives = [progname]\n", "error": "none", "author": "Tomer.Filiba@emc.com"}, {"index": "161", "colour": "orange", "code": "        if \"_\" in progname:\n", "error": "none", "author": "Tomer.Filiba@emc.com"}, {"index": "162", "colour": "orange", "code": "            alternatives.append(progname.replace(\"_\", \"-\"))\n", "error": "none", "author": "Tomer.Filiba@emc.com"}, {"index": "163", "colour": "orange", "code": "            alternatives.append(progname.replace(\"_\", \".\"))\n", "error": "none", "author": "andy@9mmedia.com"}, {"index": "164", "colour": "orange", "code": "        for pn in alternatives:\n", "error": "none", "author": "Tomer.Filiba@emc.com"}, {"index": "165", "colour": "orange", "code": "            path = cls._which(pn)\n", "error": "none", "author": "Tomer.Filiba@emc.com"}, {"index": "166", "colour": "orange", "code": "            if path:\n", "error": "none", "author": "Tomer.Filiba@emc.com"}, {"index": "167", "colour": "orange", "code": "                return path\n", "error": "none", "author": "Tomer.Filiba@emc.com"}, {"index": "168", "colour": "orange", "code": "        raise CommandNotFound(progname, list(cls.env.path))\n", "error": "none", "author": "Tomer.Filiba@emc.com"}, {"index": "169", "colour": "orange", "code": "\n", "error": "none", "author": "Tomer.Filiba@emc.com"}, {"index": "170", "colour": "orange", "code": "    def path(self, *parts):\n", "error": "none", "author": "Tomer.Filiba@emc.com"}, {"index": "171", "colour": "orange", "code": "        \"\"\"A factory for :class:`LocalPaths <plumbum.path.local.LocalPath>`.\n", "error": "none", "author": "Tomer.Filiba@emc.com"}, {"index": "172", "colour": "orange", "code": "        Usage: ``p = local.path(\"/usr\", \"lib\", \"python2.7\")``\n", "error": "none", "author": "Tomer.Filiba@emc.com"}, {"index": "173", "colour": "orange", "code": "        \"\"\"\n", "error": "none", "author": "Tomer.Filiba@emc.com"}, {"index": "174", "colour": "orange", "code": "        parts2 = [str(self.cwd)]\n", "error": "none", "author": "Tomer.Filiba@emc.com"}, {"index": "175", "colour": "orange", "code": "        for p in parts:\n", "error": "none", "author": "Tomer.Filiba@emc.com"}, {"index": "176", "colour": "orange", "code": "            if isinstance(p, RemotePath):\n", "error": "none", "author": "Tomer.Filiba@emc.com"}, {"index": "177", "colour": "orange", "code": "                raise TypeError(\"Cannot construct LocalPath from %r\" % (p,))\n", "error": "none", "author": "Tomer.Filiba@emc.com"}, {"index": "178", "colour": "orange", "code": "            parts2.append(self.env.expanduser(str(p)))\n", "error": "none", "author": "Tomer.Filiba@emc.com"}, {"index": "179", "colour": "green", "code": "        return LocalPath(os.path.join(*parts2))\n", "error": "W", "author": "Tomer.Filiba@emc.com"}, {"index": "180", "colour": "orange", "code": "\n", "error": "none", "author": "Tomer.Filiba@emc.com"}, {"index": "181", "colour": "orange", "code": "    def __getitem__(self, cmd):\n", "error": "none", "author": "Tomer.Filiba@emc.com"}, {"index": "182", "colour": "orange", "code": "        \"\"\"Returns a `Command` object representing the given program. ``cmd`` can be a string or\n", "error": "none", "author": "Tomer.Filiba@emc.com"}, {"index": "183", "colour": "orange", "code": "        a :class:`LocalPath <plumbum.path.local.LocalPath>`; if it is a path, a command\n", "error": "none", "author": "Tomer.Filiba@emc.com"}, {"index": "184", "colour": "orange", "code": "        representing this path will be returned; otherwise, the program name will be looked up\n", "error": "none", "author": "Tomer.Filiba@emc.com"}, {"index": "185", "colour": "orange", "code": "        in the system's ``PATH`` (using ``which``). Usage::\n", "error": "none", "author": "Tomer.Filiba@emc.com"}, {"index": "186", "colour": "orange", "code": "\n", "error": "none", "author": "Tomer.Filiba@emc.com"}, {"index": "187", "colour": "orange", "code": "            ls = local[\"ls\"]\n", "error": "none", "author": "Tomer.Filiba@emc.com"}, {"index": "188", "colour": "orange", "code": "        \"\"\"\n", "error": "none", "author": "Tomer.Filiba@emc.com"}, {"index": "189", "colour": "orange", "code": "        if isinstance(cmd, LocalPath):\n", "error": "none", "author": "Tomer.Filiba@emc.com"}, {"index": "190", "colour": "orange", "code": "            return LocalCommand(cmd)\n", "error": "none", "author": "Tomer.Filiba@emc.com"}, {"index": "191", "colour": "orange", "code": "        elif not isinstance(cmd, RemotePath):\n", "error": "none", "author": "Tomer.Filiba@emc.com"}, {"index": "192", "colour": "orange", "code": "            if \"/\" in cmd or \"\\\\\" in cmd:\n", "error": "none", "author": "Tomer.Filiba@emc.com"}, {"index": "193", "colour": "orange", "code": "                # assume path\n", "error": "none", "author": "Tomer.Filiba@emc.com"}, {"index": "194", "colour": "orange", "code": "                return LocalCommand(local.path(cmd))\n", "error": "none", "author": "Tomer.Filiba@emc.com"}, {"index": "195", "colour": "orange", "code": "            else:\n", "error": "none", "author": "Tomer.Filiba@emc.com"}, {"index": "196", "colour": "orange", "code": "                # search for command\n", "error": "none", "author": "Tomer.Filiba@emc.com"}, {"index": "197", "colour": "orange", "code": "                return LocalCommand(self.which(cmd))\n", "error": "none", "author": "Tomer.Filiba@emc.com"}, {"index": "198", "colour": "orange", "code": "        else:\n", "error": "none", "author": "Tomer.Filiba@emc.com"}, {"index": "199", "colour": "orange", "code": "            raise TypeError(\"cmd must not be a RemotePath: %r\" % (cmd,))\n", "error": "none", "author": "Tomer.Filiba@emc.com"}, {"index": "200", "colour": "orange", "code": "\n", "error": "none", "author": "tomerfiliba@gmail.com"}, {"index": "201", "colour": "orange", "code": "    def __contains__(self, cmd):\n", "error": "none", "author": "tomerfiliba@gmail.com"}, {"index": "202", "colour": "orange", "code": "        \"\"\"Tests for the existance of the command, e.g., ``\"ls\" in plumbum.local``.\n", "error": "none", "author": "tomerfiliba@gmail.com"}, {"index": "203", "colour": "orange", "code": "        ``cmd`` can be anything acceptable by ``__getitem__``.\n", "error": "none", "author": "tomerfiliba@gmail.com"}, {"index": "204", "colour": "orange", "code": "        \"\"\"\n", "error": "none", "author": "tomerfiliba@gmail.com"}, {"index": "205", "colour": "orange", "code": "        try:\n", "error": "none", "author": "tomerfiliba@gmail.com"}, {"index": "206", "colour": "orange", "code": "            self[cmd]\n", "error": "none", "author": "tomerfiliba@gmail.com"}, {"index": "207", "colour": "orange", "code": "        except CommandNotFound:\n", "error": "none", "author": "tomerfiliba@gmail.com"}, {"index": "208", "colour": "orange", "code": "            return False\n", "error": "none", "author": "tomerfiliba@gmail.com"}, {"index": "209", "colour": "orange", "code": "        else:\n", "error": "none", "author": "tomerfiliba@gmail.com"}, {"index": "210", "colour": "orange", "code": "            return True\n", "error": "none", "author": "tomerfiliba@gmail.com"}, {"index": "211", "colour": "orange", "code": "\n", "error": "none", "author": "Tomer.Filiba@emc.com"}, {"index": "212", "colour": "blue", "code": "    def _popen(self, executable, argv, stdin = PIPE, stdout = PIPE, stderr = PIPE,\n", "error": "R", "author": "Tomer.Filiba@emc.com"}, {"index": "213", "colour": "orange", "code": "            cwd = None, env = None, new_session = False, **kwargs):\n", "error": "none", "author": "Tomer.Filiba@emc.com"}, {"index": "214", "colour": "orange", "code": "        if new_session:\n", "error": "none", "author": "Tomer.Filiba@emc.com"}, {"index": "215", "colour": "orange", "code": "            if has_new_subprocess:\n", "error": "none", "author": "Tomer.Filiba@emc.com"}, {"index": "216", "colour": "orange", "code": "                kwargs[\"start_new_session\"] = True\n", "error": "none", "author": "Tomer.Filiba@emc.com"}, {"index": "217", "colour": "orange", "code": "            elif subprocess.mswindows:\n", "error": "none", "author": "Tomer.Filiba@emc.com"}, {"index": "218", "colour": "orange", "code": "                kwargs[\"creationflags\"] = kwargs.get(\"creationflags\", 0) | subprocess.CREATE_NEW_PROCESS_GROUP\n", "error": "none", "author": "tomerfiliba@gmail.com"}, {"index": "219", "colour": "orange", "code": "            else:\n", "error": "none", "author": "Tomer.Filiba@emc.com"}, {"index": "220", "colour": "orange", "code": "                def preexec_fn(prev_fn = kwargs.get(\"preexec_fn\", lambda: None)):\n", "error": "none", "author": "Tomer.Filiba@emc.com"}, {"index": "221", "colour": "orange", "code": "                    os.setsid()\n", "error": "none", "author": "Tomer.Filiba@emc.com"}, {"index": "222", "colour": "orange", "code": "                    prev_fn()\n", "error": "none", "author": "Tomer.Filiba@emc.com"}, {"index": "223", "colour": "orange", "code": "                kwargs[\"preexec_fn\"] = preexec_fn\n", "error": "none", "author": "Tomer.Filiba@emc.com"}, {"index": "224", "colour": "orange", "code": "\n", "error": "none", "author": "Tomer.Filiba@emc.com"}, {"index": "225", "colour": "orange", "code": "        if subprocess.mswindows and \"startupinfo\" not in kwargs and stdin not in (sys.stdin, None):\n", "error": "none", "author": "Tomer.Filiba@emc.com"}, {"index": "226", "colour": "orange", "code": "            kwargs[\"startupinfo\"] = sui = subprocess.STARTUPINFO()\n", "error": "none", "author": "Tomer.Filiba@emc.com"}, {"index": "227", "colour": "orange", "code": "            if hasattr(subprocess, \"_subprocess\"):\n", "error": "none", "author": "Tomer.Filiba@emc.com"}, {"index": "228", "colour": "green", "code": "                sui.dwFlags |= subprocess._subprocess.STARTF_USESHOWWINDOW  # @UndefinedVariable\n", "error": "W", "author": "Tomer.Filiba@emc.com"}, {"index": "229", "colour": "green", "code": "                sui.wShowWindow = subprocess._subprocess.SW_HIDE  # @UndefinedVariable\n", "error": "W", "author": "Tomer.Filiba@emc.com"}, {"index": "230", "colour": "orange", "code": "            else:\n", "error": "none", "author": "Tomer.Filiba@emc.com"}, {"index": "231", "colour": "orange", "code": "                sui.dwFlags |= subprocess.STARTF_USESHOWWINDOW  # @UndefinedVariable\n", "error": "none", "author": "Tomer.Filiba@emc.com"}, {"index": "232", "colour": "orange", "code": "                sui.wShowWindow = subprocess.SW_HIDE  # @UndefinedVariable\n", "error": "none", "author": "Tomer.Filiba@emc.com"}, {"index": "233", "colour": "orange", "code": "\n", "error": "none", "author": "tomerfiliba@gmail.com"}, {"index": "234", "colour": "orange", "code": "        if not has_new_subprocess and \"close_fds\" not in kwargs:\n", "error": "none", "author": "Tomer.Filiba@emc.com"}, {"index": "235", "colour": "orange", "code": "            if subprocess.mswindows and (stdin is not None or stdout is not None or stderr is not None):\n", "error": "none", "author": "Tomer.Filiba@emc.com"}, {"index": "236", "colour": "orange", "code": "                # we can't close fds if we're on windows and we want to redirect any std handle\n", "error": "none", "author": "Tomer.Filiba@emc.com"}, {"index": "237", "colour": "orange", "code": "                kwargs[\"close_fds\"] = False\n", "error": "none", "author": "Tomer.Filiba@emc.com"}, {"index": "238", "colour": "orange", "code": "            else:\n", "error": "none", "author": "Tomer.Filiba@emc.com"}, {"index": "239", "colour": "orange", "code": "                kwargs[\"close_fds\"] = True\n", "error": "none", "author": "Tomer.Filiba@emc.com"}, {"index": "240", "colour": "orange", "code": "\n", "error": "none", "author": "Tomer.Filiba@emc.com"}, {"index": "241", "colour": "orange", "code": "        if cwd is None:\n", "error": "none", "author": "Tomer.Filiba@emc.com"}, {"index": "242", "colour": "orange", "code": "            cwd = self.cwd\n", "error": "none", "author": "Tomer.Filiba@emc.com"}, {"index": "243", "colour": "orange", "code": "        if env is None:\n", "error": "none", "author": "Tomer.Filiba@emc.com"}, {"index": "244", "colour": "orange", "code": "            env = self.env\n", "error": "none", "author": "Tomer.Filiba@emc.com"}, {"index": "245", "colour": "orange", "code": "        if isinstance(env, BaseEnv):\n", "error": "none", "author": "Tomer.Filiba@emc.com"}, {"index": "246", "colour": "orange", "code": "            env = env.getdict()\n", "error": "none", "author": "Tomer.Filiba@emc.com"}, {"index": "247", "colour": "orange", "code": "\n", "error": "none", "author": "Tomer.Filiba@emc.com"}, {"index": "248", "colour": "orange", "code": "        if self._as_user_stack:\n", "error": "none", "author": "Tomer.Filiba@emc.com"}, {"index": "249", "colour": "orange", "code": "            argv, executable = self._as_user_stack[-1](argv)\n", "error": "none", "author": "Tomer.Filiba@emc.com"}, {"index": "250", "colour": "orange", "code": "\n", "error": "none", "author": "Tomer.Filiba@emc.com"}, {"index": "251", "colour": "orange", "code": "        logger.debug(\"Running %r\", argv)\n", "error": "none", "author": "Tomer.Filiba@emc.com"}, {"index": "252", "colour": "orange", "code": "        proc = Popen(argv, executable = str(executable), stdin = stdin, stdout = stdout,\n", "error": "none", "author": "Tomer.Filiba@emc.com"}, {"index": "253", "colour": "orange", "code": "            stderr = stderr, cwd = str(cwd), env = env, **kwargs)  # bufsize = 4096\n", "error": "none", "author": "Tomer.Filiba@emc.com"}, {"index": "254", "colour": "green", "code": "        proc._start_time = time.time()\n", "error": "W", "author": "Tomer.Filiba@emc.com"}, {"index": "255", "colour": "orange", "code": "        proc.encoding = self.encoding\n", "error": "none", "author": "Tomer.Filiba@emc.com"}, {"index": "256", "colour": "orange", "code": "        proc.argv = argv\n", "error": "none", "author": "Tomer.Filiba@emc.com"}, {"index": "257", "colour": "orange", "code": "        return proc\n", "error": "none", "author": "Tomer.Filiba@emc.com"}, {"index": "258", "colour": "orange", "code": "\n", "error": "none", "author": "Tomer.Filiba@emc.com"}, {"index": "259", "colour": "blue", "code": "    def daemonic_popen(self, command, cwd = \"/\"):\n", "error": "R", "author": "Tomer.Filiba@emc.com"}, {"index": "260", "colour": "orange", "code": "        \"\"\"\n", "error": "none", "author": "Tomer.Filiba@emc.com"}, {"index": "261", "colour": "orange", "code": "        On POSIX systems:\n", "error": "none", "author": "tomer.filiba@emc.com"}, {"index": "262", "colour": "orange", "code": "\n", "error": "none", "author": "tomerfiliba@gmail.com"}, {"index": "263", "colour": "orange", "code": "        Run ``command`` as a UNIX daemon: fork a child process to setpid, redirect std handles to /dev/null,\n", "error": "none", "author": "Tomer.Filiba@emc.com"}, {"index": "264", "colour": "orange", "code": "        umask, close all fds, chdir to ``cwd``, then fork and exec ``command``. Returns a ``Popen`` process that\n", "error": "none", "author": "Tomer.Filiba@emc.com"}, {"index": "265", "colour": "orange", "code": "        can be used to poll/wait for the executed command (but keep in mind that you cannot access std handles)\n", "error": "none", "author": "Tomer.Filiba@emc.com"}, {"index": "266", "colour": "orange", "code": "\n", "error": "none", "author": "Tomer.Filiba@emc.com"}, {"index": "267", "colour": "orange", "code": "        On Windows:\n", "error": "none", "author": "tomer.filiba@emc.com"}, {"index": "268", "colour": "orange", "code": "\n", "error": "none", "author": "tomerfiliba@gmail.com"}, {"index": "269", "colour": "orange", "code": "        Run ``command`` as a \"Windows daemon\": detach from controlling console and create a new process group.\n", "error": "none", "author": "Tomer.Filiba@emc.com"}, {"index": "270", "colour": "orange", "code": "        This means that the command will not receive console events and would survive its parent's termination.\n", "error": "none", "author": "Tomer.Filiba@emc.com"}, {"index": "271", "colour": "orange", "code": "        Returns a ``Popen`` object.\n", "error": "none", "author": "Tomer.Filiba@emc.com"}, {"index": "272", "colour": "orange", "code": "\n", "error": "none", "author": "Tomer.Filiba@emc.com"}, {"index": "273", "colour": "orange", "code": "        .. note:: this does not run ``command`` as a system service, only detaches it from its parent.\n", "error": "none", "author": "Tomer.Filiba@emc.com"}, {"index": "274", "colour": "orange", "code": "\n", "error": "none", "author": "Tomer.Filiba@emc.com"}, {"index": "275", "colour": "orange", "code": "        .. versionadded:: 1.3\n", "error": "none", "author": "Tomer.Filiba@emc.com"}, {"index": "276", "colour": "orange", "code": "        \"\"\"\n", "error": "none", "author": "Tomer.Filiba@emc.com"}, {"index": "277", "colour": "orange", "code": "        if IS_WIN32:\n", "error": "none", "author": "Tomer.Filiba@emc.com"}, {"index": "278", "colour": "orange", "code": "            return win32_daemonize(command, cwd)\n", "error": "none", "author": "Tomer.Filiba@emc.com"}, {"index": "279", "colour": "orange", "code": "        else:\n", "error": "none", "author": "Tomer.Filiba@emc.com"}, {"index": "280", "colour": "orange", "code": "            return posix_daemonize(command, cwd)\n", "error": "none", "author": "Tomer.Filiba@emc.com"}, {"index": "281", "colour": "orange", "code": "\n", "error": "none", "author": "Tomer.Filiba@emc.com"}, {"index": "282", "colour": "orange", "code": "    if IS_WIN32:\n", "error": "none", "author": "Tomer.Filiba@emc.com"}, {"index": "283", "colour": "blue", "code": "        def list_processes(self):\n", "error": "R", "author": "Tomer.Filiba@emc.com"}, {"index": "284", "colour": "orange", "code": "            \"\"\"\n", "error": "none", "author": "Tomer.Filiba@emc.com"}, {"index": "285", "colour": "orange", "code": "            Returns information about all running processes (on Windows: using ``tasklist``)\n", "error": "none", "author": "Tomer.Filiba@emc.com"}, {"index": "286", "colour": "orange", "code": "\n", "error": "none", "author": "Tomer.Filiba@emc.com"}, {"index": "287", "colour": "orange", "code": "            .. versionadded:: 1.3\n", "error": "none", "author": "Tomer.Filiba@emc.com"}, {"index": "288", "colour": "orange", "code": "            \"\"\"\n", "error": "none", "author": "Tomer.Filiba@emc.com"}, {"index": "289", "colour": "orange", "code": "            import csv\n", "error": "none", "author": "Tomer.Filiba@emc.com"}, {"index": "290", "colour": "orange", "code": "            tasklist = local[\"tasklist\"]\n", "error": "none", "author": "Tomer.Filiba@emc.com"}, {"index": "291", "colour": "orange", "code": "            lines = tasklist(\"/V\", \"/FO\", \"CSV\").encode(\"utf8\").splitlines()\n", "error": "none", "author": "Tomer.Filiba@emc.com"}, {"index": "292", "colour": "orange", "code": "            rows = csv.reader(lines)\n", "error": "none", "author": "Tomer.Filiba@emc.com"}, {"index": "293", "colour": "orange", "code": "            header = rows.next()\n", "error": "none", "author": "Tomer.Filiba@emc.com"}, {"index": "294", "colour": "orange", "code": "            imgidx = header.index('Image Name')\n", "error": "none", "author": "Tomer.Filiba@emc.com"}, {"index": "295", "colour": "orange", "code": "            pididx = header.index('PID')\n", "error": "none", "author": "Tomer.Filiba@emc.com"}, {"index": "296", "colour": "orange", "code": "            statidx = header.index('Status')\n", "error": "none", "author": "Tomer.Filiba@emc.com"}, {"index": "297", "colour": "orange", "code": "            useridx = header.index('User Name')\n", "error": "none", "author": "Tomer.Filiba@emc.com"}, {"index": "298", "colour": "orange", "code": "            for row in rows:\n", "error": "none", "author": "Tomer.Filiba@emc.com"}, {"index": "299", "colour": "orange", "code": "                yield ProcInfo(int(row[pididx]), row[useridx].decode(\"utf8\"),\n", "error": "none", "author": "tomerfiliba@gmail.com"}, {"index": "300", "colour": "orange", "code": "                    row[statidx].decode(\"utf8\"), row[imgidx].decode(\"utf8\"))\n", "error": "none", "author": "Tomer.Filiba@emc.com"}, {"index": "301", "colour": "orange", "code": "    else:\n", "error": "none", "author": "Tomer.Filiba@emc.com"}, {"index": "302", "colour": "orange", "code": "        def list_processes(self):\n", "error": "none", "author": "Tomer.Filiba@emc.com"}, {"index": "303", "colour": "orange", "code": "            \"\"\"\n", "error": "none", "author": "Tomer.Filiba@emc.com"}, {"index": "304", "colour": "orange", "code": "            Returns information about all running processes (on POSIX systems: using ``ps``)\n", "error": "none", "author": "Tomer.Filiba@emc.com"}, {"index": "305", "colour": "orange", "code": "\n", "error": "none", "author": "Tomer.Filiba@emc.com"}, {"index": "306", "colour": "orange", "code": "            .. versionadded:: 1.3\n", "error": "none", "author": "Tomer.Filiba@emc.com"}, {"index": "307", "colour": "orange", "code": "            \"\"\"\n", "error": "none", "author": "Tomer.Filiba@emc.com"}, {"index": "308", "colour": "orange", "code": "            ps = self[\"ps\"]\n", "error": "none", "author": "Tomer.Filiba@emc.com"}, {"index": "309", "colour": "orange", "code": "            lines = ps(\"-e\", \"-o\", \"pid,uid,stat,args\").splitlines()\n", "error": "none", "author": "Tomer.Filiba@emc.com"}, {"index": "310", "colour": "orange", "code": "            lines.pop(0) # header\n", "error": "none", "author": "Tomer.Filiba@emc.com"}, {"index": "311", "colour": "orange", "code": "            for line in lines:\n", "error": "none", "author": "Tomer.Filiba@emc.com"}, {"index": "312", "colour": "orange", "code": "                parts = line.strip().split()\n", "error": "none", "author": "Tomer.Filiba@emc.com"}, {"index": "313", "colour": "orange", "code": "                yield ProcInfo(int(parts[0]), int(parts[1]), parts[2], \" \".join(parts[3:]))\n", "error": "none", "author": "Tomer.Filiba@emc.com"}, {"index": "314", "colour": "orange", "code": "\n", "error": "none", "author": "Tomer.Filiba@emc.com"}, {"index": "315", "colour": "orange", "code": "    def pgrep(self, pattern):\n", "error": "none", "author": "Tomer.Filiba@emc.com"}, {"index": "316", "colour": "orange", "code": "        \"\"\"\n", "error": "none", "author": "Tomer.Filiba@emc.com"}, {"index": "317", "colour": "orange", "code": "        Process grep: return information about all processes whose command-line args match the given regex pattern\n", "error": "none", "author": "Tomer.Filiba@emc.com"}, {"index": "318", "colour": "orange", "code": "        \"\"\"\n", "error": "none", "author": "Tomer.Filiba@emc.com"}, {"index": "319", "colour": "orange", "code": "        pat = re.compile(pattern)\n", "error": "none", "author": "Tomer.Filiba@emc.com"}, {"index": "320", "colour": "orange", "code": "        for procinfo in self.list_processes():\n", "error": "none", "author": "Tomer.Filiba@emc.com"}, {"index": "321", "colour": "orange", "code": "            if pat.search(procinfo.args):\n", "error": "none", "author": "Tomer.Filiba@emc.com"}, {"index": "322", "colour": "orange", "code": "                yield procinfo\n", "error": "none", "author": "tomerfiliba@gmail.com"}, {"index": "323", "colour": "orange", "code": "\n", "error": "none", "author": "Tomer.Filiba@emc.com"}, {"index": "324", "colour": "orange", "code": "    def session(self, new_session = False):\n", "error": "none", "author": "Tomer.Filiba@emc.com"}, {"index": "325", "colour": "orange", "code": "        \"\"\"Creates a new :class:`ShellSession <plumbum.session.ShellSession>` object; this\n", "error": "none", "author": "Tomer.Filiba@emc.com"}, {"index": "326", "colour": "orange", "code": "        invokes ``/bin/sh`` and executes commands on it over stdin/stdout/stderr\"\"\"\n", "error": "none", "author": "Tomer.Filiba@emc.com"}, {"index": "327", "colour": "orange", "code": "        return ShellSession(self[\"sh\"].popen(new_session = new_session))\n", "error": "none", "author": "Tomer.Filiba@emc.com"}, {"index": "328", "colour": "orange", "code": "\n", "error": "none", "author": "Tomer.Filiba@emc.com"}, {"index": "329", "colour": "orange", "code": "    @contextmanager\n", "error": "none", "author": "Tomer.Filiba@emc.com"}, {"index": "330", "colour": "orange", "code": "    def tempdir(self):\n", "error": "none", "author": "Tomer.Filiba@emc.com"}, {"index": "331", "colour": "orange", "code": "        \"\"\"A context manager that creates a temporary directory, which is removed when the context\n", "error": "none", "author": "Tomer.Filiba@emc.com"}, {"index": "332", "colour": "orange", "code": "        exits\"\"\"\n", "error": "none", "author": "Tomer.Filiba@emc.com"}, {"index": "333", "colour": "green", "code": "        dir = self.path(mkdtemp())  # @ReservedAssignment\n", "error": "W", "author": "Tomer.Filiba@emc.com"}, {"index": "334", "colour": "orange", "code": "        try:\n", "error": "none", "author": "Tomer.Filiba@emc.com"}, {"index": "335", "colour": "orange", "code": "            yield dir\n", "error": "none", "author": "Tomer.Filiba@emc.com"}, {"index": "336", "colour": "orange", "code": "        finally:\n", "error": "none", "author": "Tomer.Filiba@emc.com"}, {"index": "337", "colour": "orange", "code": "            dir.delete()\n", "error": "none", "author": "Tomer.Filiba@emc.com"}, {"index": "338", "colour": "orange", "code": "\n", "error": "none", "author": "Tomer.Filiba@emc.com"}, {"index": "339", "colour": "orange", "code": "    @contextmanager\n", "error": "none", "author": "Tomer.Filiba@emc.com"}, {"index": "340", "colour": "orange", "code": "    def as_user(self, username = None):\n", "error": "none", "author": "Tomer.Filiba@emc.com"}, {"index": "341", "colour": "orange", "code": "        \"\"\"Run nested commands as the given user. For example::\n", "error": "none", "author": "Tomer.Filiba@emc.com"}, {"index": "342", "colour": "orange", "code": "\n", "error": "none", "author": "Tomer.Filiba@emc.com"}, {"index": "343", "colour": "orange", "code": "            head = local[\"head\"]\n", "error": "none", "author": "Tomer.Filiba@emc.com"}, {"index": "344", "colour": "orange", "code": "            head(\"-n1\", \"/dev/sda1\")    # this will fail...\n", "error": "none", "author": "Tomer.Filiba@emc.com"}, {"index": "345", "colour": "orange", "code": "            with local.as_user():\n", "error": "none", "author": "Tomer.Filiba@emc.com"}, {"index": "346", "colour": "orange", "code": "                head(\"-n1\", \"/dev/sda1\")\n", "error": "none", "author": "Tomer.Filiba@emc.com"}, {"index": "347", "colour": "orange", "code": "\n", "error": "none", "author": "Tomer.Filiba@emc.com"}, {"index": "348", "colour": "orange", "code": "        :param username: The user to run commands as. If not given, root (or Administrator) is assumed\n", "error": "none", "author": "Tomer.Filiba@emc.com"}, {"index": "349", "colour": "orange", "code": "        \"\"\"\n", "error": "none", "author": "Tomer.Filiba@emc.com"}, {"index": "350", "colour": "orange", "code": "        if IS_WIN32:\n", "error": "none", "author": "Tomer.Filiba@emc.com"}, {"index": "351", "colour": "orange", "code": "            if username is None:\n", "error": "none", "author": "Tomer.Filiba@emc.com"}, {"index": "352", "colour": "orange", "code": "                username = \"Administrator\"\n", "error": "none", "author": "Tomer.Filiba@emc.com"}, {"index": "353", "colour": "orange", "code": "            self._as_user_stack.append(lambda argv: ([\"runas\", \"/savecred\", \"/user:%s\" % (username,),\n", "error": "none", "author": "Tomer.Filiba@emc.com"}, {"index": "354", "colour": "orange", "code": "                '\"' + \" \".join(str(a) for a in argv) + '\"'], self.which(\"runas\")))\n", "error": "none", "author": "Tomer.Filiba@emc.com"}, {"index": "355", "colour": "orange", "code": "        else:\n", "error": "none", "author": "Tomer.Filiba@emc.com"}, {"index": "356", "colour": "orange", "code": "            if username is None:\n", "error": "none", "author": "Tomer.Filiba@emc.com"}, {"index": "357", "colour": "orange", "code": "                self._as_user_stack.append(lambda argv: ([\"sudo\"] + list(argv), self.which(\"sudo\")))\n", "error": "none", "author": "Tomer.Filiba@emc.com"}, {"index": "358", "colour": "orange", "code": "            else:\n", "error": "none", "author": "Tomer.Filiba@emc.com"}, {"index": "359", "colour": "orange", "code": "                self._as_user_stack.append(lambda argv: ([\"sudo\", \"-u\", username] + list(argv), self.which(\"sudo\")))\n", "error": "none", "author": "Tomer.Filiba@emc.com"}, {"index": "360", "colour": "orange", "code": "        try:\n", "error": "none", "author": "Tomer.Filiba@emc.com"}, {"index": "361", "colour": "orange", "code": "            yield\n", "error": "none", "author": "Tomer.Filiba@emc.com"}, {"index": "362", "colour": "orange", "code": "        finally:\n", "error": "none", "author": "Tomer.Filiba@emc.com"}, {"index": "363", "colour": "orange", "code": "            self._as_user_stack.pop(-1)\n", "error": "none", "author": "Tomer.Filiba@emc.com"}, {"index": "364", "colour": "orange", "code": "\n", "error": "none", "author": "Tomer.Filiba@emc.com"}, {"index": "365", "colour": "orange", "code": "    def as_root(self):\n", "error": "none", "author": "Tomer.Filiba@emc.com"}, {"index": "366", "colour": "orange", "code": "        \"\"\"A shorthand for :func:`as_user(\"root\") <plumbum.machines.local.LocalMachine.as_user>`\"\"\"\n", "error": "none", "author": "Tomer.Filiba@emc.com"}, {"index": "367", "colour": "orange", "code": "        return self.as_user()\n", "error": "none", "author": "Tomer.Filiba@emc.com"}, {"index": "368", "colour": "orange", "code": "\n", "error": "none", "author": "Tomer.Filiba@emc.com"}, {"index": "369", "colour": "orange", "code": "    python = LocalCommand(sys.executable, encoding)\n", "error": "none", "author": "Tomer.Filiba@emc.com"}, {"index": "370", "colour": "orange", "code": "    \"\"\"A command that represents the current python interpreter (``sys.executable``)\"\"\"\n", "error": "none", "author": "Tomer.Filiba@emc.com"}, {"index": "371", "colour": "orange", "code": "\n", "error": "none", "author": "Tomer.Filiba@emc.com"}, {"index": "372", "colour": "orange", "code": "local = LocalMachine()\n", "error": "none", "author": "Tomer.Filiba@emc.com"}, {"index": "373", "colour": "orange", "code": "\"\"\"The *local machine* (a singleton object). It serves as an entry point to everything\n", "error": "none", "author": "Tomer.Filiba@emc.com"}, {"index": "374", "colour": "orange", "code": "related to the local machine, such as working directory and environment manipulation,\n", "error": "none", "author": "Tomer.Filiba@emc.com"}, {"index": "375", "colour": "orange", "code": "command creation, etc.\n", "error": "none", "author": "Tomer.Filiba@emc.com"}, {"index": "376", "colour": "orange", "code": "\n", "error": "none", "author": "Tomer.Filiba@emc.com"}, {"index": "377", "colour": "orange", "code": "Attributes:\n", "error": "none", "author": "Tomer.Filiba@emc.com"}, {"index": "378", "colour": "orange", "code": "\n", "error": "none", "author": "Tomer.Filiba@emc.com"}, {"index": "379", "colour": "orange", "code": "* ``cwd`` - the local working directory\n", "error": "none", "author": "Tomer.Filiba@emc.com"}, {"index": "380", "colour": "orange", "code": "* ``env`` - the local environment\n", "error": "none", "author": "Tomer.Filiba@emc.com"}, {"index": "381", "colour": "orange", "code": "* ``encoding`` - the local machine's default encoding (``sys.getfilesystemencoding()``)\n", "error": "none", "author": "Tomer.Filiba@emc.com"}, {"index": "382", "colour": "orange", "code": "\"\"\"\n", "error": "none", "author": "Tomer.Filiba@emc.com"}]}