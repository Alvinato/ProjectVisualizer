{"path": "/home/asumal/git/cs410/plumbum/plumbum/commands/base.py", "lines": [[{"error": "C", "line": "1", "code": "from __future__ import with_statement\n", "colour": "blue", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "2", "code": "import subprocess\n", "colour": "black", "author": "tomerfiliba@gmail.com"}, {"error": "none", "line": "3", "code": "import functools\n", "colour": "black", "author": "tomerfiliba@gmail.com"}, {"error": "none", "line": "4", "code": "from contextlib import contextmanager\n", "colour": "black", "author": "tomerfiliba@gmail.com"}, {"error": "none", "line": "5", "code": "from plumbum.commands.processes import run_proc\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "6", "code": "from plumbum.lib import six\n", "colour": "black", "author": "tomerfiliba@gmail.com"}, {"error": "none", "line": "7", "code": "from tempfile import TemporaryFile\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "8", "code": "from subprocess import PIPE, Popen\n", "colour": "black", "author": "tomerfiliba@gmail.com"}, {"error": "none", "line": "9", "code": "\n", "colour": "black", "author": "tomerfiliba@gmail.com"}, {"error": "none", "line": "10", "code": "\n", "colour": "black", "author": "tomerfiliba@gmail.com"}, {"error": "none", "line": "11", "code": "class RedirectionError(Exception):\n", "colour": "black", "author": "tomerfiliba@gmail.com"}, {"error": "none", "line": "12", "code": "    \"\"\"Raised when an attempt is made to redirect an process' standard handle,\n", "colour": "black", "author": "tomerf@il.ibm.com"}, {"error": "none", "line": "13", "code": "    which was already redirected to/from a file\"\"\"\n", "colour": "black", "author": "tanzer@swing.co.at"}, {"error": "none", "line": "14", "code": "\n", "colour": "black", "author": "tomerfiliba@gmail.com"}, {"error": "none", "line": "15", "code": "\n", "colour": "black", "author": "tomerfiliba@gmail.com"}, {"error": "C", "line": "16", "code": "#===================================================================================================\n", "colour": "blue", "author": "tomerfiliba@gmail.com"}, {"error": "none", "line": "17", "code": "# Utilities\n", "colour": "black", "author": "tomerfiliba@gmail.com"}, {"error": "C", "line": "18", "code": "#===================================================================================================\n", "colour": "blue", "author": "tomerfiliba@gmail.com"}, {"error": "none", "line": "19", "code": "# modified from the stdlib pipes module for windows\n", "colour": "black", "author": "tomerfiliba@gmail.com"}, {"error": "C", "line": "20", "code": "_safechars = 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!@%_-+=:,./'\n", "colour": "blue", "author": "tomerfiliba@gmail.com"}, {"error": "C", "line": "21", "code": "_funnychars = '\"`$\\\\'\n", "colour": "blue", "author": "tomerfiliba@gmail.com"}, {"error": "none", "line": "22", "code": "def shquote(text):\n", "colour": "black", "author": "tomerfiliba@gmail.com"}, {"error": "C", "line": "23", "code": "    \"\"\"Quotes the given text with shell escaping (assumes as syntax similar to ``sh``)\"\"\"\n", "colour": "blue", "author": "tomerf@il.ibm.com"}, {"error": "none", "line": "24", "code": "    if not text:\n", "colour": "black", "author": "tomerfiliba@gmail.com"}, {"error": "none", "line": "25", "code": "        return \"''\"\n", "colour": "black", "author": "tomerfiliba@gmail.com"}, {"error": "none", "line": "26", "code": "    text = str(text)\n", "colour": "black", "author": "tomerf@il.ibm.com"}, {"error": "none", "line": "27", "code": "    if not text:\n", "colour": "black", "author": "tomerfiliba@gmail.com"}, {"error": "none", "line": "28", "code": "        return \"''\"\n", "colour": "black", "author": "tomerfiliba@gmail.com"}, {"error": "C", "line": "29", "code": "    for c in text:\n", "colour": "blue", "author": "tomerfiliba@gmail.com"}, {"error": "none", "line": "30", "code": "        if c not in _safechars:\n", "colour": "black", "author": "tomerfiliba@gmail.com"}, {"error": "none", "line": "31", "code": "            break\n", "colour": "black", "author": "tomerfiliba@gmail.com"}, {"error": "none", "line": "32", "code": "    else:\n", "colour": "black", "author": "tomerfiliba@gmail.com"}, {"error": "none", "line": "33", "code": "        return text\n", "colour": "black", "author": "tomerfiliba@gmail.com"}, {"error": "none", "line": "34", "code": "    if \"'\" not in text:\n", "colour": "black", "author": "tomerfiliba@gmail.com"}, {"error": "none", "line": "35", "code": "        return \"'\" + text + \"'\"\n", "colour": "black", "author": "tomerfiliba@gmail.com"}, {"error": "none", "line": "36", "code": "    res = \"\".join(('\\\\' + c if c in _funnychars else c) for c in text)\n", "colour": "black", "author": "tomerfiliba@gmail.com"}, {"error": "none", "line": "37", "code": "    return '\"' + res + '\"'\n", "colour": "black", "author": "tomerfiliba@gmail.com"}, {"error": "none", "line": "38", "code": "\n", "colour": "black", "author": "tomerfiliba@gmail.com"}, {"error": "C", "line": "39", "code": "def shquote_list(seq):\n", "colour": "blue", "author": "tomerfiliba@gmail.com"}, {"error": "none", "line": "40", "code": "    return [shquote(item) for item in seq]\n", "colour": "black", "author": "tomerfiliba@gmail.com"}, {"error": "none", "line": "41", "code": "\n", "colour": "black", "author": "tomerf@il.ibm.com"}, {"error": "none", "line": "42", "code": "\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "C", "line": "43", "code": "#===================================================================================================\n", "colour": "blue", "author": "tomerfiliba@gmail.com"}, {"error": "none", "line": "44", "code": "# Commands\n", "colour": "black", "author": "tomerfiliba@gmail.com"}, {"error": "C", "line": "45", "code": "#===================================================================================================\n", "colour": "blue", "author": "tomerfiliba@gmail.com"}, {"error": "none", "line": "46", "code": "class BaseCommand(object):\n", "colour": "black", "author": "tomerfiliba@gmail.com"}, {"error": "none", "line": "47", "code": "    \"\"\"Base of all command objects\"\"\"\n", "colour": "black", "author": "tomerf@il.ibm.com"}, {"error": "none", "line": "48", "code": "\n", "colour": "black", "author": "tanzer@swing.co.at"}, {"error": "none", "line": "49", "code": "    __slots__ = [\"cwd\", \"env\", \"encoding\"]\n", "colour": "black", "author": "tomerfiliba@gmail.com"}, {"error": "none", "line": "50", "code": "\n", "colour": "black", "author": "tanzer@swing.co.at"}, {"error": "none", "line": "51", "code": "    def __str__(self):\n", "colour": "black", "author": "tomerfiliba@gmail.com"}, {"error": "none", "line": "52", "code": "        return \" \".join(self.formulate())\n", "colour": "black", "author": "tomerfiliba@gmail.com"}, {"error": "none", "line": "53", "code": "\n", "colour": "black", "author": "tanzer@swing.co.at"}, {"error": "none", "line": "54", "code": "    def __or__(self, other):\n", "colour": "black", "author": "tomerfiliba@gmail.com"}, {"error": "none", "line": "55", "code": "        \"\"\"Creates a pipe with the other command\"\"\"\n", "colour": "black", "author": "tomerf@il.ibm.com"}, {"error": "none", "line": "56", "code": "        return Pipeline(self, other)\n", "colour": "black", "author": "tomerfiliba@gmail.com"}, {"error": "none", "line": "57", "code": "\n", "colour": "black", "author": "tanzer@swing.co.at"}, {"error": "W", "line": "58", "code": "    def __gt__(self, file):\n", "colour": "purple", "author": "tomerfiliba@gmail.com"}, {"error": "none", "line": "59", "code": "        \"\"\"Redirects the process' stdout to the given file\"\"\"\n", "colour": "black", "author": "tomerf@il.ibm.com"}, {"error": "none", "line": "60", "code": "        return StdoutRedirection(self, file)\n", "colour": "black", "author": "tomerfiliba@gmail.com"}, {"error": "none", "line": "61", "code": "\n", "colour": "black", "author": "tanzer@swing.co.at"}, {"error": "W", "line": "62", "code": "    def __rshift__(self, file):\n", "colour": "purple", "author": "bawan03@gmeail.com"}, {"error": "none", "line": "63", "code": "        \"\"\"Redirects the process' stdout to the given file (appending)\"\"\"\n", "colour": "black", "author": "bawan03@gmeail.com"}, {"error": "none", "line": "64", "code": "        return AppendingStdoutRedirection(self, file)\n", "colour": "black", "author": "bawan03@gmeail.com"}, {"error": "none", "line": "65", "code": "\n", "colour": "black", "author": "bawan03@gmeail.com"}, {"error": "W", "line": "66", "code": "    def __ge__(self, file):\n", "colour": "purple", "author": "tomerfiliba@gmail.com"}, {"error": "none", "line": "67", "code": "        \"\"\"Redirects the process' stderr to the given file\"\"\"\n", "colour": "black", "author": "tomerf@il.ibm.com"}, {"error": "none", "line": "68", "code": "        return StderrRedirection(self, file)\n", "colour": "black", "author": "tomerfiliba@gmail.com"}, {"error": "none", "line": "69", "code": "\n", "colour": "black", "author": "tanzer@swing.co.at"}, {"error": "W", "line": "70", "code": "    def __lt__(self, file):\n", "colour": "purple", "author": "tomerfiliba@gmail.com"}, {"error": "none", "line": "71", "code": "        \"\"\"Redirects the given file into the process' stdin\"\"\"\n", "colour": "black", "author": "tomerf@il.ibm.com"}, {"error": "none", "line": "72", "code": "        return StdinRedirection(self, file)\n", "colour": "black", "author": "tomerfiliba@gmail.com"}, {"error": "none", "line": "73", "code": "    def __lshift__(self, data):\n", "colour": "black", "author": "tomerfiliba@gmail.com"}, {"error": "none", "line": "74", "code": "        \"\"\"Redirects the given data into the process' stdin\"\"\"\n", "colour": "black", "author": "tomerf@il.ibm.com"}, {"error": "none", "line": "75", "code": "        return StdinDataRedirection(self, data)\n", "colour": "black", "author": "tomerfiliba@gmail.com"}, {"error": "none", "line": "76", "code": "\n", "colour": "black", "author": "tanzer@swing.co.at"}, {"error": "none", "line": "77", "code": "    def __getitem__(self, args):\n", "colour": "black", "author": "tomerfiliba@gmail.com"}, {"error": "none", "line": "78", "code": "        \"\"\"Creates a bound-command with the given arguments\"\"\"\n", "colour": "black", "author": "tomerf@il.ibm.com"}, {"error": "none", "line": "79", "code": "        if not isinstance(args, (tuple, list)):\n", "colour": "black", "author": "tomerfiliba@gmail.com"}, {"error": "none", "line": "80", "code": "            args = [args, ]\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "81", "code": "        if not args:\n", "colour": "black", "author": "tomerf@il.ibm.com"}, {"error": "none", "line": "82", "code": "            return self\n", "colour": "black", "author": "tomerf@il.ibm.com"}, {"error": "none", "line": "83", "code": "        if isinstance(self, BoundCommand):\n", "colour": "black", "author": "tomerf@il.ibm.com"}, {"error": "E", "line": "84", "code": "            return BoundCommand(self.cmd, self.args + list(args))\n", "colour": "yellow", "author": "kurt.neufeld@calgaryscientific.com"}, {"error": "none", "line": "85", "code": "        else:\n", "colour": "black", "author": "tomerf@il.ibm.com"}, {"error": "none", "line": "86", "code": "            return BoundCommand(self, args)\n", "colour": "black", "author": "tomerf@il.ibm.com"}, {"error": "none", "line": "87", "code": "\n", "colour": "black", "author": "tanzer@swing.co.at"}, {"error": "none", "line": "88", "code": "    def __call__(self, *args, **kwargs):\n", "colour": "black", "author": "tomerfiliba@gmail.com"}, {"error": "none", "line": "89", "code": "        \"\"\"A shortcut for `run(args)`, returning only the process' stdout\"\"\"\n", "colour": "black", "author": "tomerf@il.ibm.com"}, {"error": "none", "line": "90", "code": "        return self.run(args, **kwargs)[1]\n", "colour": "black", "author": "tomerfiliba@gmail.com"}, {"error": "none", "line": "91", "code": "\n", "colour": "black", "author": "tomerfiliba@gmail.com"}, {"error": "C", "line": "92", "code": "    def _get_encoding(self):\n", "colour": "blue", "author": "tomerfiliba@gmail.com"}, {"error": "none", "line": "93", "code": "        raise NotImplementedError()\n", "colour": "black", "author": "tomerfiliba@gmail.com"}, {"error": "none", "line": "94", "code": "\n", "colour": "black", "author": "tomerf@il.ibm.com"}, {"error": "none", "line": "95", "code": "    def with_env(self, **envvars):\n", "colour": "black", "author": "boolegue@yahoo.com"}, {"error": "none", "line": "96", "code": "        \"\"\"Returns a BoundEnvCommand with the given environment variables\"\"\"\n", "colour": "black", "author": "boolegue@yahoo.com"}, {"error": "none", "line": "97", "code": "        if not envvars:\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "98", "code": "            return self\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "99", "code": "        return BoundEnvCommand(self, envvars)\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "100", "code": "\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "101", "code": "    setenv = with_env\n", "colour": "black", "author": "boolegue@yahoo.com"}, {"error": "none", "line": "102", "code": "\n", "colour": "black", "author": "boolegue@yahoo.com"}, {"error": "none", "line": "103", "code": "    @property\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "C", "line": "104", "code": "    def machine(self):\n", "colour": "blue", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "105", "code": "        raise NotImplementedError()\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "106", "code": "\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "C", "line": "107", "code": "    def formulate(self, level = 0, args = ()):\n", "colour": "blue", "author": "tomerfiliba@gmail.com"}, {"error": "C", "line": "108", "code": "        \"\"\"Formulates the command into a command-line, i.e., a list of shell-quoted strings\n", "colour": "blue", "author": "tomerf@il.ibm.com"}, {"error": "none", "line": "109", "code": "        that can be executed by ``Popen`` or shells.\n", "colour": "black", "author": "tanzer@swing.co.at"}, {"error": "none", "line": "110", "code": "\n", "colour": "black", "author": "tanzer@swing.co.at"}, {"error": "C", "line": "111", "code": "        :param level: The nesting level of the formulation; it dictates how much shell-quoting\n", "colour": "blue", "author": "tomerf@il.ibm.com"}, {"error": "none", "line": "112", "code": "                      (if any) should be performed\n", "colour": "black", "author": "tomerf@il.ibm.com"}, {"error": "none", "line": "113", "code": "\n", "colour": "black", "author": "tanzer@swing.co.at"}, {"error": "none", "line": "114", "code": "        :param args: The arguments passed to this command (a tuple)\n", "colour": "black", "author": "tomerf@il.ibm.com"}, {"error": "none", "line": "115", "code": "\n", "colour": "black", "author": "tanzer@swing.co.at"}, {"error": "none", "line": "116", "code": "        :returns: A list of strings\n", "colour": "black", "author": "tomerf@il.ibm.com"}, {"error": "none", "line": "117", "code": "        \"\"\"\n", "colour": "black", "author": "tomerf@il.ibm.com"}, {"error": "none", "line": "118", "code": "        raise NotImplementedError()\n", "colour": "black", "author": "tomerfiliba@gmail.com"}, {"error": "none", "line": "119", "code": "\n", "colour": "black", "author": "tomerf@il.ibm.com"}, {"error": "C", "line": "120", "code": "    def popen(self, args = (), **kwargs):\n", "colour": "blue", "author": "tomerfiliba@gmail.com"}, {"error": "none", "line": "121", "code": "        \"\"\"Spawns the given command, returning a ``Popen``-like object.\n", "colour": "black", "author": "tomerf@il.ibm.com"}, {"error": "none", "line": "122", "code": "\n", "colour": "black", "author": "tanzer@swing.co.at"}, {"error": "none", "line": "123", "code": "        .. note::\n", "colour": "black", "author": "tomerfiliba@gmail.com"}, {"error": "none", "line": "124", "code": "\n", "colour": "black", "author": "tomer.filiba@emc.com"}, {"error": "none", "line": "125", "code": "           When processes run in the **background** (either via ``popen`` or\n", "colour": "black", "author": "tomer.filiba@emc.com"}, {"error": "C", "line": "126", "code": "           :class:`& BG <plumbum.commands.BG>`), their stdout/stderr pipes might fill up,\n", "colour": "blue", "author": "tomerfiliba@gmail.com"}, {"error": "C", "line": "127", "code": "           causing them to hang. If you know a process produces output, be sure to consume it\n", "colour": "blue", "author": "tomer.filiba@emc.com"}, {"error": "C", "line": "128", "code": "           every once in a while, using a monitoring thread/reactor in the background.\n", "colour": "blue", "author": "tomerfiliba@gmail.com"}, {"error": "C", "line": "129", "code": "           For more info, see `#48 <https://github.com/tomerfiliba/plumbum/issues/48>`_\n", "colour": "blue", "author": "tomerfiliba@gmail.com"}, {"error": "none", "line": "130", "code": "\n", "colour": "black", "author": "tomerfiliba@gmail.com"}, {"error": "none", "line": "131", "code": "        :param args: Any arguments to be passed to the process (a tuple)\n", "colour": "black", "author": "tomerf@il.ibm.com"}, {"error": "none", "line": "132", "code": "\n", "colour": "black", "author": "tanzer@swing.co.at"}, {"error": "C", "line": "133", "code": "        :param kwargs: Any keyword-arguments to be passed to the ``Popen`` constructor\n", "colour": "blue", "author": "tomerf@il.ibm.com"}, {"error": "none", "line": "134", "code": "\n", "colour": "black", "author": "tanzer@swing.co.at"}, {"error": "none", "line": "135", "code": "        :returns: A ``Popen``-like object\n", "colour": "black", "author": "tomerf@il.ibm.com"}, {"error": "none", "line": "136", "code": "        \"\"\"\n", "colour": "black", "author": "tomerf@il.ibm.com"}, {"error": "none", "line": "137", "code": "        raise NotImplementedError()\n", "colour": "black", "author": "tomerfiliba@gmail.com"}, {"error": "none", "line": "138", "code": "\n", "colour": "black", "author": "tanzer@swing.co.at"}, {"error": "none", "line": "139", "code": "    @contextmanager\n", "colour": "black", "author": "tomerfiliba@gmail.com"}, {"error": "C", "line": "140", "code": "    def bgrun(self, args = (), **kwargs):\n", "colour": "blue", "author": "tomerfiliba@gmail.com"}, {"error": "none", "line": "141", "code": "        \"\"\"Runs the given command as a context manager, allowing you to create a\n", "colour": "black", "author": "tomerfiliba@gmail.com"}, {"error": "C", "line": "142", "code": "        `pipeline <http://en.wikipedia.org/wiki/Pipeline_(computing)>`_ (not in the UNIX sense)\n", "colour": "blue", "author": "tomerfiliba@gmail.com"}, {"error": "C", "line": "143", "code": "        of programs, parallelizing their work. In other words, instead of running programs\n", "colour": "blue", "author": "tomerfiliba@gmail.com"}, {"error": "C", "line": "144", "code": "        one after the other, you can start all of them at the same time and wait for them to\n", "colour": "blue", "author": "tomerfiliba@gmail.com"}, {"error": "none", "line": "145", "code": "        finish. For a more thorough review, see\n", "colour": "black", "author": "tomerfiliba@gmail.com"}, {"error": "C", "line": "146", "code": "        `Lightweight Asynchronism <http://tomerfiliba.com/blog/Toying-with-Context-Managers/>`_.\n", "colour": "blue", "author": "tomerfiliba@gmail.com"}, {"error": "none", "line": "147", "code": "\n", "colour": "black", "author": "tomer.filiba@emc.com"}, {"error": "none", "line": "148", "code": "        Example::\n", "colour": "black", "author": "tomerfiliba@gmail.com"}, {"error": "none", "line": "149", "code": "\n", "colour": "black", "author": "tomer.filiba@emc.com"}, {"error": "none", "line": "150", "code": "            from plumbum.cmd import mkfs\n", "colour": "black", "author": "tomerfiliba@gmail.com"}, {"error": "none", "line": "151", "code": "\n", "colour": "black", "author": "tomer.filiba@emc.com"}, {"error": "none", "line": "152", "code": "            with mkfs[\"-t\", \"ext3\", \"/dev/sda1\"] as p1:\n", "colour": "black", "author": "tomerfiliba@gmail.com"}, {"error": "none", "line": "153", "code": "                with mkfs[\"-t\", \"ext3\", \"/dev/sdb1\"] as p2:\n", "colour": "black", "author": "tomerfiliba@gmail.com"}, {"error": "none", "line": "154", "code": "                    pass\n", "colour": "black", "author": "tomerfiliba@gmail.com"}, {"error": "none", "line": "155", "code": "\n", "colour": "black", "author": "tomerfiliba@gmail.com"}, {"error": "none", "line": "156", "code": "        .. note::\n", "colour": "black", "author": "tomerfiliba@gmail.com"}, {"error": "none", "line": "157", "code": "\n", "colour": "black", "author": "tomer.filiba@emc.com"}, {"error": "none", "line": "158", "code": "           When processes run in the **background** (either via ``popen`` or\n", "colour": "black", "author": "tomer.filiba@emc.com"}, {"error": "C", "line": "159", "code": "           :class:`& BG <plumbum.commands.BG>`), their stdout/stderr pipes might fill up,\n", "colour": "blue", "author": "tomerfiliba@gmail.com"}, {"error": "C", "line": "160", "code": "           causing them to hang. If you know a process produces output, be sure to consume it\n", "colour": "blue", "author": "tomer.filiba@emc.com"}, {"error": "C", "line": "161", "code": "           every once in a while, using a monitoring thread/reactor in the background.\n", "colour": "blue", "author": "tomerfiliba@gmail.com"}, {"error": "C", "line": "162", "code": "           For more info, see `#48 <https://github.com/tomerfiliba/plumbum/issues/48>`_\n", "colour": "blue", "author": "tomerfiliba@gmail.com"}, {"error": "none", "line": "163", "code": "\n", "colour": "black", "author": "tomerfiliba@gmail.com"}, {"error": "none", "line": "164", "code": "        For the arguments, see :func:`run <BaseCommand.run>`.\n", "colour": "black", "author": "tomerfiliba@gmail.com"}, {"error": "none", "line": "165", "code": "\n", "colour": "black", "author": "tomerfiliba@gmail.com"}, {"error": "C", "line": "166", "code": "        :returns: A Popen object, augmented with a ``.run()`` method, which returns a tuple of\n", "colour": "blue", "author": "tomerfiliba@gmail.com"}, {"error": "none", "line": "167", "code": "                  (return code, stdout, stderr)\n", "colour": "black", "author": "tomerfiliba@gmail.com"}, {"error": "none", "line": "168", "code": "        \"\"\"\n", "colour": "black", "author": "tomerfiliba@gmail.com"}, {"error": "none", "line": "169", "code": "        retcode = kwargs.pop(\"retcode\", 0)\n", "colour": "black", "author": "tomerfiliba@gmail.com"}, {"error": "none", "line": "170", "code": "        timeout = kwargs.pop(\"timeout\", None)\n", "colour": "black", "author": "tomerfiliba@gmail.com"}, {"error": "C", "line": "171", "code": "        p = self.popen(args, **kwargs)\n", "colour": "blue", "author": "tomerfiliba@gmail.com"}, {"error": "none", "line": "172", "code": "        was_run = [False]\n", "colour": "black", "author": "tomerfiliba@gmail.com"}, {"error": "C", "line": "173", "code": "        def runner():\n", "colour": "blue", "author": "tomerfiliba@gmail.com"}, {"error": "none", "line": "174", "code": "            if was_run[0]:\n", "colour": "black", "author": "tomerfiliba@gmail.com"}, {"error": "none", "line": "175", "code": "                return  # already done\n", "colour": "black", "author": "tomer.filiba@emc.com"}, {"error": "none", "line": "176", "code": "            was_run[0] = True\n", "colour": "black", "author": "tomerfiliba@gmail.com"}, {"error": "none", "line": "177", "code": "            try:\n", "colour": "black", "author": "tomerfiliba@gmail.com"}, {"error": "none", "line": "178", "code": "                return run_proc(p, retcode, timeout)\n", "colour": "black", "author": "tomerfiliba@gmail.com"}, {"error": "none", "line": "179", "code": "            finally:\n", "colour": "black", "author": "tomerfiliba@gmail.com"}, {"error": "C", "line": "180", "code": "                for f in [p.stdin, p.stdout, p.stderr]:\n", "colour": "blue", "author": "tomerfiliba@gmail.com"}, {"error": "none", "line": "181", "code": "                    try:\n", "colour": "black", "author": "tomerfiliba@gmail.com"}, {"error": "none", "line": "182", "code": "                        f.close()\n", "colour": "black", "author": "tomerfiliba@gmail.com"}, {"error": "W", "line": "183", "code": "                    except Exception:\n", "colour": "purple", "author": "tomerfiliba@gmail.com"}, {"error": "none", "line": "184", "code": "                        pass\n", "colour": "black", "author": "tomerfiliba@gmail.com"}, {"error": "none", "line": "185", "code": "        p.run = runner\n", "colour": "black", "author": "tomerfiliba@gmail.com"}, {"error": "none", "line": "186", "code": "        yield p\n", "colour": "black", "author": "tomerfiliba@gmail.com"}, {"error": "none", "line": "187", "code": "        runner()\n", "colour": "black", "author": "tomerfiliba@gmail.com"}, {"error": "none", "line": "188", "code": "\n", "colour": "black", "author": "tomerfiliba@gmail.com"}, {"error": "C", "line": "189", "code": "    def run(self, args = (), **kwargs):\n", "colour": "blue", "author": "tomerfiliba@gmail.com"}, {"error": "none", "line": "190", "code": "        \"\"\"Runs the given command (equivalent to popen() followed by\n", "colour": "black", "author": "tanzer@swing.co.at"}, {"error": "C", "line": "191", "code": "        :func:`run_proc <plumbum.commands.run_proc>`). If the exit code of the process does\n", "colour": "blue", "author": "tomerf@il.ibm.com"}, {"error": "none", "line": "192", "code": "        not match the expected one, :class:`ProcessExecutionError\n", "colour": "black", "author": "tanzer@swing.co.at"}, {"error": "none", "line": "193", "code": "        <plumbum.commands.ProcessExecutionError>` is raised.\n", "colour": "black", "author": "tomerf@il.ibm.com"}, {"error": "none", "line": "194", "code": "\n", "colour": "black", "author": "tanzer@swing.co.at"}, {"error": "none", "line": "195", "code": "        :param args: Any arguments to be passed to the process (a tuple)\n", "colour": "black", "author": "tomerf@il.ibm.com"}, {"error": "none", "line": "196", "code": "\n", "colour": "black", "author": "tanzer@swing.co.at"}, {"error": "C", "line": "197", "code": "        :param retcode: The expected return code of this process (defaults to 0).\n", "colour": "blue", "author": "tomerf@il.ibm.com"}, {"error": "C", "line": "198", "code": "                        In order to disable exit-code validation, pass ``None``. It may also\n", "colour": "blue", "author": "tomerf@il.ibm.com"}, {"error": "none", "line": "199", "code": "                        be a tuple (or any iterable) of expected exit codes.\n", "colour": "black", "author": "tomerf@il.ibm.com"}, {"error": "none", "line": "200", "code": "\n", "colour": "black", "author": "tanzer@swing.co.at"}, {"error": "C", "line": "201", "code": "                        .. note:: this argument must be passed as a keyword argument.\n", "colour": "blue", "author": "tomerf@il.ibm.com"}, {"error": "none", "line": "202", "code": "\n", "colour": "black", "author": "tanzer@swing.co.at"}, {"error": "C", "line": "203", "code": "        :param timeout: The maximal amount of time (in seconds) to allow the process to run.\n", "colour": "blue", "author": "tomerfiliba@gmail.com"}, {"error": "C", "line": "204", "code": "                        ``None`` means no timeout is imposed; otherwise, if the process hasn't\n", "colour": "blue", "author": "tomerfiliba@gmail.com"}, {"error": "C", "line": "205", "code": "                        terminated after that many seconds, the process will be forcefully\n", "colour": "blue", "author": "tomerfiliba@gmail.com"}, {"error": "none", "line": "206", "code": "                        terminated an exception will be raised\n", "colour": "black", "author": "tomerfiliba@gmail.com"}, {"error": "none", "line": "207", "code": "\n", "colour": "black", "author": "tomerfiliba@gmail.com"}, {"error": "C", "line": "208", "code": "                        .. note:: this argument must be passed as a keyword argument.\n", "colour": "blue", "author": "tomerfiliba@gmail.com"}, {"error": "none", "line": "209", "code": "\n", "colour": "black", "author": "tanzer@swing.co.at"}, {"error": "C", "line": "210", "code": "        :param kwargs: Any keyword-arguments to be passed to the ``Popen`` constructor\n", "colour": "blue", "author": "tomerf@il.ibm.com"}, {"error": "none", "line": "211", "code": "\n", "colour": "black", "author": "tanzer@swing.co.at"}, {"error": "none", "line": "212", "code": "        :returns: A tuple of (return code, stdout, stderr)\n", "colour": "black", "author": "tomerf@il.ibm.com"}, {"error": "none", "line": "213", "code": "        \"\"\"\n", "colour": "black", "author": "tomerf@il.ibm.com"}, {"error": "C", "line": "214", "code": "        with self.bgrun(args, **kwargs) as p:\n", "colour": "blue", "author": "tomerfiliba@gmail.com"}, {"error": "none", "line": "215", "code": "            return p.run()\n", "colour": "black", "author": "tomerfiliba@gmail.com"}, {"error": "none", "line": "216", "code": "\n", "colour": "black", "author": "tomerfiliba@gmail.com"}, {"error": "none", "line": "217", "code": "\n", "colour": "black", "author": "tomerfiliba@gmail.com"}, {"error": "C", "line": "218", "code": "class BoundCommand(BaseCommand):\n", "colour": "blue", "author": "tomerfiliba@gmail.com"}, {"error": "none", "line": "219", "code": "    __slots__ = [\"cmd\", \"args\"]\n", "colour": "black", "author": "tomerfiliba@gmail.com"}, {"error": "none", "line": "220", "code": "    def __init__(self, cmd, args):\n", "colour": "black", "author": "tomerfiliba@gmail.com"}, {"error": "none", "line": "221", "code": "        self.cmd = cmd\n", "colour": "black", "author": "tomerfiliba@gmail.com"}, {"error": "none", "line": "222", "code": "        self.args = list(args)\n", "colour": "black", "author": "kurt.neufeld@calgaryscientific.com"}, {"error": "none", "line": "223", "code": "    def __repr__(self):\n", "colour": "black", "author": "tomerf@il.ibm.com"}, {"error": "none", "line": "224", "code": "        return \"BoundCommand(%r, %r)\" % (self.cmd, self.args)\n", "colour": "black", "author": "tomerf@il.ibm.com"}, {"error": "none", "line": "225", "code": "    def _get_encoding(self):\n", "colour": "black", "author": "tomerfiliba@gmail.com"}, {"error": "W", "line": "226", "code": "        return self.cmd._get_encoding()\n", "colour": "purple", "author": "tomerfiliba@gmail.com"}, {"error": "C", "line": "227", "code": "    def formulate(self, level = 0, args = ()):\n", "colour": "blue", "author": "tomerfiliba@gmail.com"}, {"error": "none", "line": "228", "code": "        return self.cmd.formulate(level + 1, self.args + list(args))\n", "colour": "black", "author": "kurt.neufeld@calgaryscientific.com"}, {"error": "none", "line": "229", "code": "    @property\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "230", "code": "    def machine(self):\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "231", "code": "        return self.cmd.machine\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "C", "line": "232", "code": "    def popen(self, args = (), **kwargs):\n", "colour": "blue", "author": "tomerfiliba@gmail.com"}, {"error": "none", "line": "233", "code": "        if isinstance(args, six.string_types):\n", "colour": "black", "author": "tomerfiliba@gmail.com"}, {"error": "none", "line": "234", "code": "            args = [args, ]\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "235", "code": "        return self.cmd.popen(self.args + list(args), **kwargs)\n", "colour": "black", "author": "kurt.neufeld@calgaryscientific.com"}, {"error": "none", "line": "236", "code": "\n", "colour": "black", "author": "tomerfiliba@gmail.com"}, {"error": "C", "line": "237", "code": "class BoundEnvCommand(BaseCommand):\n", "colour": "blue", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "238", "code": "    __slots__ = [\"cmd\", \"envvars\"]\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "239", "code": "    def __init__(self, cmd, envvars):\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "240", "code": "        self.cmd = cmd\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "241", "code": "        self.envvars = envvars\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "242", "code": "    def __repr__(self):\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "243", "code": "        return \"BoundEnvCommand(%r, %r)\" % (self.cmd, self.envvars)\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "244", "code": "    def _get_encoding(self):\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "W", "line": "245", "code": "        return self.cmd._get_encoding()\n", "colour": "purple", "author": "Tomer.Filiba@emc.com"}, {"error": "C", "line": "246", "code": "    def formulate(self, level = 0, args = ()):\n", "colour": "blue", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "247", "code": "        return self.cmd.formulate(level, args)\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "248", "code": "    @property\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "249", "code": "    def machine(self):\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "250", "code": "        return self.cmd.machine\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "C", "line": "251", "code": "    def popen(self, args = (), **kwargs):\n", "colour": "blue", "author": "Tomer.Filiba@emc.com"}, {"error": "W", "line": "252", "code": "        with self.machine.env(**self.envvars):\n", "colour": "purple", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "253", "code": "            return self.cmd.popen(args, **kwargs)\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "254", "code": "\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "C", "line": "255", "code": "class Pipeline(BaseCommand):\n", "colour": "blue", "author": "tomerfiliba@gmail.com"}, {"error": "none", "line": "256", "code": "    __slots__ = [\"srccmd\", \"dstcmd\"]\n", "colour": "black", "author": "tomerfiliba@gmail.com"}, {"error": "none", "line": "257", "code": "    def __init__(self, srccmd, dstcmd):\n", "colour": "black", "author": "tomerfiliba@gmail.com"}, {"error": "none", "line": "258", "code": "        self.srccmd = srccmd\n", "colour": "black", "author": "tomerfiliba@gmail.com"}, {"error": "none", "line": "259", "code": "        self.dstcmd = dstcmd\n", "colour": "black", "author": "tomerfiliba@gmail.com"}, {"error": "none", "line": "260", "code": "    def __repr__(self):\n", "colour": "black", "author": "tomerf@il.ibm.com"}, {"error": "none", "line": "261", "code": "        return \"Pipeline(%r, %r)\" % (self.srccmd, self.dstcmd)\n", "colour": "black", "author": "tomerf@il.ibm.com"}, {"error": "none", "line": "262", "code": "    def _get_encoding(self):\n", "colour": "black", "author": "tomerfiliba@gmail.com"}, {"error": "W", "line": "263", "code": "        return self.srccmd._get_encoding() or self.dstcmd._get_encoding()\n", "colour": "purple", "author": "tomerfiliba@gmail.com"}, {"error": "C", "line": "264", "code": "    def formulate(self, level = 0, args = ()):\n", "colour": "blue", "author": "tomerfiliba@gmail.com"}, {"error": "C", "line": "265", "code": "        return self.srccmd.formulate(level + 1) + [\"|\"] + self.dstcmd.formulate(level + 1, args)\n", "colour": "blue", "author": "tomerfiliba@gmail.com"}, {"error": "none", "line": "266", "code": "\n", "colour": "black", "author": "tomerfiliba@gmail.com"}, {"error": "none", "line": "267", "code": "    @property\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "268", "code": "    def machine(self):\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "269", "code": "        return self.srccmd.machine\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "270", "code": "\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "C", "line": "271", "code": "    def popen(self, args = (), **kwargs):\n", "colour": "blue", "author": "tomerfiliba@gmail.com"}, {"error": "none", "line": "272", "code": "        src_kwargs = kwargs.copy()\n", "colour": "black", "author": "tomerfiliba@gmail.com"}, {"error": "none", "line": "273", "code": "        src_kwargs[\"stdout\"] = PIPE\n", "colour": "black", "author": "tomerfiliba@gmail.com"}, {"error": "none", "line": "274", "code": "        src_kwargs[\"stderr\"] = PIPE\n", "colour": "black", "author": "tomerfiliba@gmail.com"}, {"error": "none", "line": "275", "code": "\n", "colour": "black", "author": "tanzer@swing.co.at"}, {"error": "W", "line": "276", "code": "        srcproc = self.srccmd.popen(args, **src_kwargs)\n", "colour": "purple", "author": "tomerfiliba@gmail.com"}, {"error": "none", "line": "277", "code": "        kwargs[\"stdin\"] = srcproc.stdout\n", "colour": "black", "author": "tomerfiliba@gmail.com"}, {"error": "none", "line": "278", "code": "        dstproc = self.dstcmd.popen(**kwargs)\n", "colour": "black", "author": "tomerfiliba@gmail.com"}, {"error": "none", "line": "279", "code": "        # allow p1 to receive a SIGPIPE if p2 exits\n", "colour": "black", "author": "tomerfiliba@gmail.com"}, {"error": "none", "line": "280", "code": "        srcproc.stdout.close()\n", "colour": "black", "author": "tomerfiliba@gmail.com"}, {"error": "none", "line": "281", "code": "        srcproc.stderr.close()\n", "colour": "black", "author": "tomerfiliba@gmail.com"}, {"error": "none", "line": "282", "code": "        if srcproc.stdin:\n", "colour": "black", "author": "tomerfiliba@gmail.com"}, {"error": "none", "line": "283", "code": "            srcproc.stdin.close()\n", "colour": "black", "author": "tomerfiliba@gmail.com"}, {"error": "none", "line": "284", "code": "        dstproc.srcproc = srcproc\n", "colour": "black", "author": "tomerfiliba@gmail.com"}, {"error": "none", "line": "285", "code": "\n", "colour": "black", "author": "tomerfiliba@gmail.com"}, {"error": "C", "line": "286", "code": "        # monkey-patch .wait() to wait on srcproc as well (it's expected to die when dstproc dies)\n", "colour": "blue", "author": "tomerfiliba@gmail.com"}, {"error": "none", "line": "287", "code": "        dstproc_wait = dstproc.wait\n", "colour": "black", "author": "tomerfiliba@gmail.com"}, {"error": "none", "line": "288", "code": "        @functools.wraps(Popen.wait)\n", "colour": "black", "author": "tomerfiliba@gmail.com"}, {"error": "C", "line": "289", "code": "        def wait2(*args, **kwargs):\n", "colour": "blue", "author": "tomerfiliba@gmail.com"}, {"error": "none", "line": "290", "code": "            rc_dst = dstproc_wait(*args, **kwargs)\n", "colour": "black", "author": "tomerfiliba@gmail.com"}, {"error": "none", "line": "291", "code": "            rc_src = srcproc.wait(*args, **kwargs)\n", "colour": "black", "author": "tomerfiliba@gmail.com"}, {"error": "none", "line": "292", "code": "            dstproc.returncode = rc_src or rc_dst\n", "colour": "black", "author": "tomerfiliba@gmail.com"}, {"error": "none", "line": "293", "code": "            return dstproc.returncode\n", "colour": "black", "author": "tomerfiliba@gmail.com"}, {"error": "none", "line": "294", "code": "        dstproc.wait = wait2\n", "colour": "black", "author": "tomerfiliba@gmail.com"}, {"error": "none", "line": "295", "code": "        return dstproc\n", "colour": "black", "author": "tomerfiliba@gmail.com"}, {"error": "none", "line": "296", "code": "\n", "colour": "black", "author": "tomerfiliba@gmail.com"}, {"error": "C", "line": "297", "code": "class BaseRedirection(BaseCommand):\n", "colour": "blue", "author": "tomerfiliba@gmail.com"}, {"error": "none", "line": "298", "code": "    __slots__ = [\"cmd\", \"file\"]\n", "colour": "black", "author": "tomerfiliba@gmail.com"}, {"error": "none", "line": "299", "code": "    SYM = None\n", "colour": "black", "author": "tomerfiliba@gmail.com"}, {"error": "none", "line": "300", "code": "    KWARG = None\n", "colour": "black", "author": "tomerfiliba@gmail.com"}, {"error": "none", "line": "301", "code": "    MODE = None\n", "colour": "black", "author": "tomerfiliba@gmail.com"}, {"error": "none", "line": "302", "code": "\n", "colour": "black", "author": "tanzer@swing.co.at"}, {"error": "W", "line": "303", "code": "    def __init__(self, cmd, file):\n", "colour": "purple", "author": "tomerfiliba@gmail.com"}, {"error": "none", "line": "304", "code": "        self.cmd = cmd\n", "colour": "black", "author": "tomerfiliba@gmail.com"}, {"error": "none", "line": "305", "code": "        self.file = file\n", "colour": "black", "author": "tomerfiliba@gmail.com"}, {"error": "none", "line": "306", "code": "    def _get_encoding(self):\n", "colour": "black", "author": "tomerfiliba@gmail.com"}, {"error": "W", "line": "307", "code": "        return self.cmd._get_encoding()\n", "colour": "purple", "author": "tomerfiliba@gmail.com"}, {"error": "none", "line": "308", "code": "    def __repr__(self):\n", "colour": "black", "author": "tomerf@il.ibm.com"}, {"error": "none", "line": "309", "code": "        return \"%s(%r, %r)\" % (self.__class__.__name__, self.cmd, self.file)\n", "colour": "black", "author": "tomerf@il.ibm.com"}, {"error": "C", "line": "310", "code": "    def formulate(self, level = 0, args = ()):\n", "colour": "blue", "author": "tomerfiliba@gmail.com"}, {"error": "C", "line": "311", "code": "        return self.cmd.formulate(level + 1, args) + [self.SYM, shquote(getattr(self.file, \"name\", self.file))]\n", "colour": "blue", "author": "tomerfiliba@gmail.com"}, {"error": "none", "line": "312", "code": "    @property\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "313", "code": "    def machine(self):\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "314", "code": "        return self.cmd.machine\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "C", "line": "315", "code": "    def popen(self, args = (), **kwargs):\n", "colour": "blue", "author": "tomerfiliba@gmail.com"}, {"error": "none", "line": "316", "code": "        from plumbum.machines.local import LocalPath\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "317", "code": "        from plumbum.machines.remote import RemotePath\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "318", "code": "\n", "colour": "black", "author": "tanzer@swing.co.at"}, {"error": "none", "line": "319", "code": "        if self.KWARG in kwargs and kwargs[self.KWARG] not in (PIPE, None):\n", "colour": "black", "author": "tomerfiliba@gmail.com"}, {"error": "none", "line": "320", "code": "            raise RedirectionError(\"%s is already redirected\" % (self.KWARG,))\n", "colour": "black", "author": "tomerfiliba@gmail.com"}, {"error": "none", "line": "321", "code": "        if isinstance(self.file, six.string_types + (LocalPath,)):\n", "colour": "black", "author": "tomerfiliba@gmail.com"}, {"error": "C", "line": "322", "code": "            f = kwargs[self.KWARG] = open(str(self.file), self.MODE)\n", "colour": "blue", "author": "tomerf@il.ibm.com"}, {"error": "none", "line": "323", "code": "        elif isinstance(self.file, RemotePath):\n", "colour": "black", "author": "tomerf@il.ibm.com"}, {"error": "none", "line": "324", "code": "            raise TypeError(\"Cannot redirect to/from remote paths\")\n", "colour": "black", "author": "tomerf@il.ibm.com"}, {"error": "none", "line": "325", "code": "        else:\n", "colour": "black", "author": "tomerfiliba@gmail.com"}, {"error": "none", "line": "326", "code": "            kwargs[self.KWARG] = self.file\n", "colour": "black", "author": "tomerfiliba@gmail.com"}, {"error": "C", "line": "327", "code": "            f = None\n", "colour": "blue", "author": "tomerfiliba@gmail.com"}, {"error": "none", "line": "328", "code": "        try:\n", "colour": "black", "author": "tomerfiliba@gmail.com"}, {"error": "none", "line": "329", "code": "            return self.cmd.popen(args, **kwargs)\n", "colour": "black", "author": "tomerfiliba@gmail.com"}, {"error": "none", "line": "330", "code": "        finally:\n", "colour": "black", "author": "tomerfiliba@gmail.com"}, {"error": "none", "line": "331", "code": "            if f:\n", "colour": "black", "author": "tomerfiliba@gmail.com"}, {"error": "none", "line": "332", "code": "                f.close()\n", "colour": "black", "author": "tomerfiliba@gmail.com"}, {"error": "none", "line": "333", "code": "\n", "colour": "black", "author": "tomerfiliba@gmail.com"}, {"error": "C", "line": "334", "code": "class StdinRedirection(BaseRedirection):\n", "colour": "blue", "author": "tomerfiliba@gmail.com"}, {"error": "none", "line": "335", "code": "    __slots__ = []\n", "colour": "black", "author": "tomerfiliba@gmail.com"}, {"error": "none", "line": "336", "code": "    SYM = \"<\"\n", "colour": "black", "author": "tomerfiliba@gmail.com"}, {"error": "none", "line": "337", "code": "    KWARG = \"stdin\"\n", "colour": "black", "author": "tomerfiliba@gmail.com"}, {"error": "none", "line": "338", "code": "    MODE = \"r\"\n", "colour": "black", "author": "tomerfiliba@gmail.com"}, {"error": "none", "line": "339", "code": "\n", "colour": "black", "author": "tomerfiliba@gmail.com"}, {"error": "C", "line": "340", "code": "class StdoutRedirection(BaseRedirection):\n", "colour": "blue", "author": "tomerfiliba@gmail.com"}, {"error": "none", "line": "341", "code": "    __slots__ = []\n", "colour": "black", "author": "tomerfiliba@gmail.com"}, {"error": "none", "line": "342", "code": "    SYM = \">\"\n", "colour": "black", "author": "tomerfiliba@gmail.com"}, {"error": "none", "line": "343", "code": "    KWARG = \"stdout\"\n", "colour": "black", "author": "tomerfiliba@gmail.com"}, {"error": "none", "line": "344", "code": "    MODE = \"w\"\n", "colour": "black", "author": "tomerfiliba@gmail.com"}, {"error": "none", "line": "345", "code": "\n", "colour": "black", "author": "tomerfiliba@gmail.com"}, {"error": "C", "line": "346", "code": "class AppendingStdoutRedirection(BaseRedirection):\n", "colour": "blue", "author": "bawan03@gmeail.com"}, {"error": "none", "line": "347", "code": "    __slots__ = []\n", "colour": "black", "author": "bawan03@gmeail.com"}, {"error": "none", "line": "348", "code": "    SYM = \">>\"\n", "colour": "black", "author": "bawan03@gmeail.com"}, {"error": "none", "line": "349", "code": "    KWARG = \"stdout\"\n", "colour": "black", "author": "bawan03@gmeail.com"}, {"error": "none", "line": "350", "code": "    MODE = \"a\"\n", "colour": "black", "author": "bawan03@gmeail.com"}, {"error": "none", "line": "351", "code": "\n", "colour": "black", "author": "bawan03@gmeail.com"}, {"error": "C", "line": "352", "code": "class StderrRedirection(BaseRedirection):\n", "colour": "blue", "author": "tomerfiliba@gmail.com"}, {"error": "none", "line": "353", "code": "    __slots__ = []\n", "colour": "black", "author": "tomerfiliba@gmail.com"}, {"error": "none", "line": "354", "code": "    SYM = \"2>\"\n", "colour": "black", "author": "tomerfiliba@gmail.com"}, {"error": "none", "line": "355", "code": "    KWARG = \"stderr\"\n", "colour": "black", "author": "tomerfiliba@gmail.com"}, {"error": "none", "line": "356", "code": "    MODE = \"w\"\n", "colour": "black", "author": "tomerfiliba@gmail.com"}, {"error": "none", "line": "357", "code": "\n", "colour": "black", "author": "tomerfiliba@gmail.com"}, {"error": "C", "line": "358", "code": "class ERROUT(int):\n", "colour": "blue", "author": "tomerfiliba@gmail.com"}, {"error": "none", "line": "359", "code": "    def __repr__(self):\n", "colour": "black", "author": "tomerfiliba@gmail.com"}, {"error": "none", "line": "360", "code": "        return \"ERROUT\"\n", "colour": "black", "author": "tomerfiliba@gmail.com"}, {"error": "none", "line": "361", "code": "    def __str__(self):\n", "colour": "black", "author": "tomerfiliba@gmail.com"}, {"error": "none", "line": "362", "code": "        return \"&1\"\n", "colour": "black", "author": "tomerfiliba@gmail.com"}, {"error": "none", "line": "363", "code": "ERROUT = ERROUT(subprocess.STDOUT)\n", "colour": "black", "author": "tomerfiliba@gmail.com"}, {"error": "none", "line": "364", "code": "\n", "colour": "black", "author": "tomerfiliba@gmail.com"}, {"error": "C", "line": "365", "code": "class StdinDataRedirection(BaseCommand):\n", "colour": "blue", "author": "tomerfiliba@gmail.com"}, {"error": "none", "line": "366", "code": "    __slots__ = [\"cmd\", \"data\"]\n", "colour": "black", "author": "tomerfiliba@gmail.com"}, {"error": "none", "line": "367", "code": "    CHUNK_SIZE = 16000\n", "colour": "black", "author": "tomerfiliba@gmail.com"}, {"error": "none", "line": "368", "code": "\n", "colour": "black", "author": "tanzer@swing.co.at"}, {"error": "none", "line": "369", "code": "    def __init__(self, cmd, data):\n", "colour": "black", "author": "tomerfiliba@gmail.com"}, {"error": "none", "line": "370", "code": "        self.cmd = cmd\n", "colour": "black", "author": "tomerfiliba@gmail.com"}, {"error": "none", "line": "371", "code": "        self.data = data\n", "colour": "black", "author": "tomerfiliba@gmail.com"}, {"error": "none", "line": "372", "code": "    def _get_encoding(self):\n", "colour": "black", "author": "tomerfiliba@gmail.com"}, {"error": "W", "line": "373", "code": "        return self.cmd._get_encoding()\n", "colour": "purple", "author": "tomerfiliba@gmail.com"}, {"error": "none", "line": "374", "code": "\n", "colour": "black", "author": "tanzer@swing.co.at"}, {"error": "C", "line": "375", "code": "    def formulate(self, level = 0, args = ()):\n", "colour": "blue", "author": "tomerfiliba@gmail.com"}, {"error": "C", "line": "376", "code": "        return [\"echo %s\" % (shquote(self.data),), \"|\", self.cmd.formulate(level + 1, args)]\n", "colour": "blue", "author": "tomerfiliba@gmail.com"}, {"error": "none", "line": "377", "code": "    @property\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "378", "code": "    def machine(self):\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "379", "code": "        return self.cmd.machine\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "C", "line": "380", "code": "    def popen(self, args = (), **kwargs):\n", "colour": "blue", "author": "tomerfiliba@gmail.com"}, {"error": "none", "line": "381", "code": "        if \"stdin\" in kwargs and kwargs[\"stdin\"] != PIPE:\n", "colour": "black", "author": "tomerfiliba@gmail.com"}, {"error": "none", "line": "382", "code": "            raise RedirectionError(\"stdin is already redirected\")\n", "colour": "black", "author": "tomerfiliba@gmail.com"}, {"error": "none", "line": "383", "code": "        data = self.data\n", "colour": "black", "author": "tomerfiliba@gmail.com"}, {"error": "C", "line": "384", "code": "        if isinstance(data, six.unicode_type) and self._get_encoding() is not None:\n", "colour": "blue", "author": "tomerfiliba@gmail.com"}, {"error": "none", "line": "385", "code": "            data = data.encode(self._get_encoding())\n", "colour": "black", "author": "tomerfiliba@gmail.com"}, {"error": "C", "line": "386", "code": "        f = TemporaryFile()\n", "colour": "blue", "author": "tomerfiliba@gmail.com"}, {"error": "none", "line": "387", "code": "        while data:\n", "colour": "black", "author": "tomerfiliba@gmail.com"}, {"error": "none", "line": "388", "code": "            chunk = data[:self.CHUNK_SIZE]\n", "colour": "black", "author": "tomerfiliba@gmail.com"}, {"error": "none", "line": "389", "code": "            f.write(chunk)\n", "colour": "black", "author": "tomerfiliba@gmail.com"}, {"error": "none", "line": "390", "code": "            data = data[self.CHUNK_SIZE:]\n", "colour": "black", "author": "tomerfiliba@gmail.com"}, {"error": "none", "line": "391", "code": "        f.seek(0)\n", "colour": "black", "author": "tomerfiliba@gmail.com"}, {"error": "none", "line": "392", "code": "        # try:\n", "colour": "black", "author": "tomer.filiba@emc.com"}, {"error": "C", "line": "393", "code": "        return self.cmd.popen(args, stdin = f, **kwargs)\n", "colour": "blue", "author": "tomerfiliba@gmail.com"}, {"error": "none", "line": "394", "code": "        # finally:\n", "colour": "black", "author": "tomer.filiba@emc.com"}, {"error": "none", "line": "395", "code": "        #    f.close()\n", "colour": "black", "author": "tomerfiliba@gmail.com"}, {"error": "none", "line": "396", "code": "\n", "colour": "black", "author": "tomerfiliba@gmail.com"}, {"error": "W", "line": "397", "code": "class ConcreteCommand(BaseCommand):\n", "colour": "purple", "author": "tomerfiliba@gmail.com"}, {"error": "none", "line": "398", "code": "    QUOTE_LEVEL = None\n", "colour": "black", "author": "tomerfiliba@gmail.com"}, {"error": "none", "line": "399", "code": "    __slots__ = [\"executable\", \"encoding\"]\n", "colour": "black", "author": "tomerfiliba@gmail.com"}, {"error": "none", "line": "400", "code": "    def __init__(self, executable, encoding):\n", "colour": "black", "author": "tomerfiliba@gmail.com"}, {"error": "none", "line": "401", "code": "        self.executable = executable\n", "colour": "black", "author": "tomerfiliba@gmail.com"}, {"error": "none", "line": "402", "code": "        self.encoding = encoding\n", "colour": "black", "author": "tomerfiliba@gmail.com"}, {"error": "none", "line": "403", "code": "        self.cwd = None\n", "colour": "black", "author": "tomerfiliba@gmail.com"}, {"error": "none", "line": "404", "code": "        self.env = None\n", "colour": "black", "author": "tomerfiliba@gmail.com"}, {"error": "none", "line": "405", "code": "    def __str__(self):\n", "colour": "black", "author": "tomerfiliba@gmail.com"}, {"error": "none", "line": "406", "code": "        return str(self.executable)\n", "colour": "black", "author": "tomerfiliba@gmail.com"}, {"error": "none", "line": "407", "code": "    def _get_encoding(self):\n", "colour": "black", "author": "tomerfiliba@gmail.com"}, {"error": "none", "line": "408", "code": "        return self.encoding\n", "colour": "black", "author": "tomerfiliba@gmail.com"}, {"error": "none", "line": "409", "code": "\n", "colour": "black", "author": "tomerfiliba@gmail.com"}, {"error": "C", "line": "410", "code": "    def formulate(self, level = 0, args = ()):\n", "colour": "blue", "author": "tomerfiliba@gmail.com"}, {"error": "none", "line": "411", "code": "        argv = [str(self.executable)]\n", "colour": "black", "author": "tomerfiliba@gmail.com"}, {"error": "C", "line": "412", "code": "        for a in args:\n", "colour": "blue", "author": "tomerfiliba@gmail.com"}, {"error": "none", "line": "413", "code": "            if not a and a != \"\":\n", "colour": "black", "author": "tomerfiliba@gmail.com"}, {"error": "none", "line": "414", "code": "                continue\n", "colour": "black", "author": "tomerfiliba@gmail.com"}, {"error": "none", "line": "415", "code": "            if isinstance(a, BaseCommand):\n", "colour": "black", "author": "tomerfiliba@gmail.com"}, {"error": "none", "line": "416", "code": "                if level >= self.QUOTE_LEVEL:\n", "colour": "black", "author": "tomerfiliba@gmail.com"}, {"error": "none", "line": "417", "code": "                    argv.extend(shquote_list(a.formulate(level + 1)))\n", "colour": "black", "author": "tomerfiliba@gmail.com"}, {"error": "none", "line": "418", "code": "                else:\n", "colour": "black", "author": "tomerfiliba@gmail.com"}, {"error": "none", "line": "419", "code": "                    argv.extend(a.formulate(level + 1))\n", "colour": "black", "author": "tomerfiliba@gmail.com"}, {"error": "none", "line": "420", "code": "            elif isinstance(a, (list, tuple)):\n", "colour": "black", "author": "tomerfiliba@gmail.com"}, {"error": "C", "line": "421", "code": "                argv.extend(shquote(b) if level >= self.QUOTE_LEVEL else str(b) for b in a)\n", "colour": "blue", "author": "tomerfiliba@gmail.com"}, {"error": "none", "line": "422", "code": "            else:\n", "colour": "black", "author": "tomerfiliba@gmail.com"}, {"error": "none", "line": "423", "code": "                argv.append(shquote(a) if level >= self.QUOTE_LEVEL else str(a))\n", "colour": "black", "author": "tomerfiliba@gmail.com"}, {"error": "none", "line": "424", "code": "        # if self.encoding:\n", "colour": "black", "author": "tomer.filiba@emc.com"}, {"error": "C", "line": "425", "code": "        #    argv = [a.encode(self.encoding) for a in argv if isinstance(a, six.string_types)]\n", "colour": "blue", "author": "tomerfiliba@gmail.com"}, {"error": "none", "line": "426", "code": "        return argv\n", "colour": "black", "author": "tomerfiliba@gmail.com"}, {"error": "none", "line": "427", "code": "\n", "colour": "black", "author": "tomerfiliba@gmail.com"}, {"error": "none", "line": "428", "code": "\n", "colour": "black", "author": "tomerfiliba@gmail.com"}, {"error": "none", "line": "429", "code": "\n", "colour": "black", "author": "tomerfiliba@gmail.com"}, {"error": "none", "line": "430", "code": "\n", "colour": "black", "author": "tomerfiliba@gmail.com"}, {"error": "none", "line": "431", "code": "\n", "colour": "black", "author": "tomerfiliba@gmail.com"}, {"error": "none", "line": "432", "code": "\n", "colour": "black", "author": "tomerfiliba@gmail.com"}, {"error": "none", "line": "433", "code": "\n", "colour": "black", "author": "tomerfiliba@gmail.com"}, {"error": "none", "line": "434", "code": "\n", "colour": "black", "author": "tomerfiliba@gmail.com"}]]}