{"path": "/home/asumal/git/cs410/plumbum/plumbum/path/base.py", "lines": [[{"error": "C", "line": "1", "code": "import itertools\n", "colour": "blue", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "2", "code": "import operator\n", "colour": "black", "author": "tomer.filiba@emc.com"}, {"error": "none", "line": "3", "code": "import os\n", "colour": "black", "author": "tomer.filiba@emc.com"}, {"error": "none", "line": "4", "code": "\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "5", "code": "try:\n", "colour": "black", "author": "tomer.filiba@emc.com"}, {"error": "none", "line": "6", "code": "    reduce\n", "colour": "black", "author": "tomer.filiba@emc.com"}, {"error": "none", "line": "7", "code": "except NameError:\n", "colour": "black", "author": "tomer.filiba@emc.com"}, {"error": "W", "line": "8", "code": "    from functools import reduce\n", "colour": "purple", "author": "tomer.filiba@emc.com"}, {"error": "none", "line": "9", "code": "\n", "colour": "black", "author": "tomer.filiba@emc.com"}, {"error": "none", "line": "10", "code": "\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "11", "code": "class FSUser(int):\n", "colour": "black", "author": "tomerfiliba@gmail.com"}, {"error": "C", "line": "12", "code": "    \"\"\"A special object that represents a file-system user. It derives from ``int``, so it behaves\n", "colour": "blue", "author": "Tomer.Filiba@emc.com"}, {"error": "C", "line": "13", "code": "    just like a number (``uid``/``gid``), but also have a ``.name`` attribute that holds the\n", "colour": "blue", "author": "tomerfiliba@gmail.com"}, {"error": "none", "line": "14", "code": "    string-name of the user, if given (otherwise ``None``)\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "15", "code": "    \"\"\"\n", "colour": "black", "author": "tomerfiliba@gmail.com"}, {"error": "C", "line": "16", "code": "    def __new__(cls, val, name = None):\n", "colour": "blue", "author": "tomerfiliba@gmail.com"}, {"error": "none", "line": "17", "code": "        self = int.__new__(cls, val)\n", "colour": "black", "author": "tomerfiliba@gmail.com"}, {"error": "none", "line": "18", "code": "        self.name = name\n", "colour": "black", "author": "tomerfiliba@gmail.com"}, {"error": "none", "line": "19", "code": "        return self\n", "colour": "black", "author": "tomerfiliba@gmail.com"}, {"error": "none", "line": "20", "code": "\n", "colour": "black", "author": "tomerfiliba@gmail.com"}, {"error": "R", "line": "21", "code": "class Path(object):\n", "colour": "green", "author": "tomerf@il.ibm.com"}, {"error": "C", "line": "22", "code": "    \"\"\"An abstraction over file system paths. This class is abstract, and the two implementations\n", "colour": "blue", "author": "tomerfiliba@gmail.com"}, {"error": "none", "line": "23", "code": "    are :class:`LocalPath <plumbum.machines.local.LocalPath>` and\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "24", "code": "    :class:`RemotePath <plumbum.path.remote.RemotePath>`.\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "25", "code": "    \"\"\"\n", "colour": "black", "author": "tomerfiliba@gmail.com"}, {"error": "none", "line": "26", "code": "\n", "colour": "black", "author": "njharman@gmail.com"}, {"error": "none", "line": "27", "code": "    __slots__ = []\n", "colour": "black", "author": "tomerfiliba@gmail.com"}, {"error": "none", "line": "28", "code": "    CASE_SENSITIVE = True\n", "colour": "black", "author": "tomerfiliba@gmail.com"}, {"error": "none", "line": "29", "code": "\n", "colour": "black", "author": "njharman@gmail.com"}, {"error": "none", "line": "30", "code": "    def __repr__(self):\n", "colour": "black", "author": "tomerf@il.ibm.com"}, {"error": "none", "line": "31", "code": "        return \"<%s %s>\" % (self.__class__.__name__, str(self))\n", "colour": "black", "author": "tomerfiliba@gmail.com"}, {"error": "none", "line": "32", "code": "    def __div__(self, other):\n", "colour": "black", "author": "tomerf@il.ibm.com"}, {"error": "none", "line": "33", "code": "        \"\"\"Joins two paths\"\"\"\n", "colour": "black", "author": "tomerfiliba@gmail.com"}, {"error": "none", "line": "34", "code": "        return self.join(other)\n", "colour": "black", "author": "tomerfiliba@gmail.com"}, {"error": "none", "line": "35", "code": "    __truediv__ = __div__\n", "colour": "black", "author": "tomerfiliba@gmail.com"}, {"error": "none", "line": "36", "code": "    def __floordiv__(self, expr):\n", "colour": "black", "author": "tomerfiliba@gmail.com"}, {"error": "C", "line": "37", "code": "        \"\"\"Returns a (possibly empty) list of paths that matched the glob-pattern under this path\"\"\"\n", "colour": "blue", "author": "tomerfiliba@gmail.com"}, {"error": "none", "line": "38", "code": "        return self.glob(expr)\n", "colour": "black", "author": "tomerfiliba@gmail.com"}, {"error": "none", "line": "39", "code": "    def __iter__(self):\n", "colour": "black", "author": "tomerf@il.ibm.com"}, {"error": "none", "line": "40", "code": "        \"\"\"Iterate over the files in this directory\"\"\"\n", "colour": "black", "author": "tomerfiliba@gmail.com"}, {"error": "none", "line": "41", "code": "        return iter(self.list())\n", "colour": "black", "author": "tomerf@il.ibm.com"}, {"error": "none", "line": "42", "code": "    def __eq__(self, other):\n", "colour": "black", "author": "tomerf@il.ibm.com"}, {"error": "none", "line": "43", "code": "        if isinstance(other, Path):\n", "colour": "black", "author": "tomerfiliba@gmail.com"}, {"error": "W", "line": "44", "code": "            return self._get_info() == other._get_info()\n", "colour": "purple", "author": "tomerfiliba@gmail.com"}, {"error": "none", "line": "45", "code": "        elif isinstance(other, str):\n", "colour": "black", "author": "tomerfiliba@gmail.com"}, {"error": "none", "line": "46", "code": "            if self.CASE_SENSITIVE:\n", "colour": "black", "author": "tomerfiliba@gmail.com"}, {"error": "none", "line": "47", "code": "                return str(self) == other\n", "colour": "black", "author": "tomerfiliba@gmail.com"}, {"error": "none", "line": "48", "code": "            else:\n", "colour": "black", "author": "tomerfiliba@gmail.com"}, {"error": "none", "line": "49", "code": "                return str(self).lower() == other.lower()\n", "colour": "black", "author": "tomerfiliba@gmail.com"}, {"error": "none", "line": "50", "code": "        else:\n", "colour": "black", "author": "tomerfiliba@gmail.com"}, {"error": "none", "line": "51", "code": "            return NotImplemented\n", "colour": "black", "author": "tomerfiliba@gmail.com"}, {"error": "none", "line": "52", "code": "    def __ne__(self, other):\n", "colour": "black", "author": "tomerf@il.ibm.com"}, {"error": "C", "line": "53", "code": "        return not (self == other)\n", "colour": "blue", "author": "tomerfiliba@gmail.com"}, {"error": "none", "line": "54", "code": "    def __gt__(self, other):\n", "colour": "black", "author": "tomerfiliba@gmail.com"}, {"error": "none", "line": "55", "code": "        return str(self) > str(other)\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "56", "code": "    def __ge__(self, other):\n", "colour": "black", "author": "tomerfiliba@gmail.com"}, {"error": "none", "line": "57", "code": "        return str(self) >= str(other)\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "58", "code": "    def __lt__(self, other):\n", "colour": "black", "author": "tomerfiliba@gmail.com"}, {"error": "none", "line": "59", "code": "        return str(self) < str(other)\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "60", "code": "    def __le__(self, other):\n", "colour": "black", "author": "tomerfiliba@gmail.com"}, {"error": "none", "line": "61", "code": "        return str(self) <= str(other)\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "62", "code": "    def __hash__(self):\n", "colour": "black", "author": "tomerf@il.ibm.com"}, {"error": "none", "line": "63", "code": "        if self.CASE_SENSITIVE:\n", "colour": "black", "author": "grambo@grambo.me.uk"}, {"error": "none", "line": "64", "code": "            return hash(str(self))\n", "colour": "black", "author": "grambo@grambo.me.uk"}, {"error": "none", "line": "65", "code": "        else:\n", "colour": "black", "author": "grambo@grambo.me.uk"}, {"error": "none", "line": "66", "code": "            return hash(str(self).lower())\n", "colour": "black", "author": "grambo@grambo.me.uk"}, {"error": "none", "line": "67", "code": "    def __nonzero__(self):\n", "colour": "black", "author": "tomerf@il.ibm.com"}, {"error": "none", "line": "68", "code": "        return bool(str(self))\n", "colour": "black", "author": "tomerf@il.ibm.com"}, {"error": "none", "line": "69", "code": "    __bool__ = __nonzero__\n", "colour": "black", "author": "tomerf@il.ibm.com"}, {"error": "none", "line": "70", "code": "\n", "colour": "black", "author": "njharman@gmail.com"}, {"error": "C", "line": "71", "code": "    def _form(self, *parts):\n", "colour": "blue", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "72", "code": "        raise NotImplementedError()\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "73", "code": "\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "C", "line": "74", "code": "    def up(self, count = 1):\n", "colour": "blue", "author": "tomerfiliba@gmail.com"}, {"error": "none", "line": "75", "code": "        \"\"\"Go up in ``count`` directories (the default is 1)\"\"\"\n", "colour": "black", "author": "tomerfiliba@gmail.com"}, {"error": "none", "line": "76", "code": "        return self.join(\"../\" * count)\n", "colour": "black", "author": "tomerfiliba@gmail.com"}, {"error": "W", "line": "77", "code": "    def walk(self, filter = lambda p: True, dir_filter = lambda p: True):  # @ReservedAssignment\n", "colour": "purple", "author": "tomerfiliba@gmail.com"}, {"error": "C", "line": "78", "code": "        \"\"\"traverse all (recursive) sub-elements under this directory, that match the given filter.\n", "colour": "blue", "author": "tomerfiliba@gmail.com"}, {"error": "C", "line": "79", "code": "        By default, the filter accepts everything; you can provide a custom filter function that\n", "colour": "blue", "author": "tomerfiliba@gmail.com"}, {"error": "none", "line": "80", "code": "        takes a path as an argument and returns a boolean\n", "colour": "black", "author": "tomerfiliba@gmail.com"}, {"error": "C", "line": "81", "code": "        \n", "colour": "blue", "author": "tomerfiliba@gmail.com"}, {"error": "C", "line": "82", "code": "        :param filter: the filter (predicate function) for matching results. Only paths matching \n", "colour": "blue", "author": "tomerfiliba@gmail.com"}, {"error": "none", "line": "83", "code": "                       this predicate are returned. Defaults to everything.\n", "colour": "black", "author": "tomerfiliba@gmail.com"}, {"error": "C", "line": "84", "code": "        :param dir_filter: the filter (predicate function) for matching directories. Only directories\n", "colour": "blue", "author": "tomerfiliba@gmail.com"}, {"error": "C", "line": "85", "code": "                           matching this predicate are recursed into. Defaults to everything.\n", "colour": "blue", "author": "tomerfiliba@gmail.com"}, {"error": "none", "line": "86", "code": "        \"\"\"\n", "colour": "black", "author": "tomerfiliba@gmail.com"}, {"error": "C", "line": "87", "code": "        for p in self.list():\n", "colour": "blue", "author": "tomerfiliba@gmail.com"}, {"error": "none", "line": "88", "code": "            if filter(p):\n", "colour": "black", "author": "tomerfiliba@gmail.com"}, {"error": "none", "line": "89", "code": "                yield p\n", "colour": "black", "author": "tomerf@il.ibm.com"}, {"error": "none", "line": "90", "code": "            if p.isdir() and dir_filter(p):\n", "colour": "black", "author": "tomerfiliba@gmail.com"}, {"error": "C", "line": "91", "code": "                for p2 in p.walk(filter, dir_filter):\n", "colour": "blue", "author": "tomerfiliba@gmail.com"}, {"error": "none", "line": "92", "code": "                    yield p2\n", "colour": "black", "author": "tomerfiliba@gmail.com"}, {"error": "none", "line": "93", "code": "\n", "colour": "black", "author": "tomerfiliba@gmail.com"}, {"error": "none", "line": "94", "code": "    @property\n", "colour": "black", "author": "tomerf@il.ibm.com"}, {"error": "none", "line": "95", "code": "    def basename(self):\n", "colour": "black", "author": "tomerf@il.ibm.com"}, {"error": "none", "line": "96", "code": "        \"\"\"The basename component of this path\"\"\"\n", "colour": "black", "author": "tomerfiliba@gmail.com"}, {"error": "none", "line": "97", "code": "        raise NotImplementedError()\n", "colour": "black", "author": "tomerfiliba@gmail.com"}, {"error": "none", "line": "98", "code": "    @property\n", "colour": "black", "author": "tomerf@il.ibm.com"}, {"error": "none", "line": "99", "code": "    def dirname(self):\n", "colour": "black", "author": "tomerf@il.ibm.com"}, {"error": "none", "line": "100", "code": "        \"\"\"The dirname component of this path\"\"\"\n", "colour": "black", "author": "tomerfiliba@gmail.com"}, {"error": "none", "line": "101", "code": "        raise NotImplementedError()\n", "colour": "black", "author": "tomerfiliba@gmail.com"}, {"error": "none", "line": "102", "code": "    @property\n", "colour": "black", "author": "njharman@gmail.com"}, {"error": "none", "line": "103", "code": "    def uid(self):\n", "colour": "black", "author": "tomerfiliba@gmail.com"}, {"error": "C", "line": "104", "code": "        \"\"\"The user that owns this path. The returned value is a :class:`FSUser <plumbum.path.FSUser>`\n", "colour": "blue", "author": "tomerfiliba@gmail.com"}, {"error": "C", "line": "105", "code": "        object which behaves like an ``int`` (as expected from ``uid``), but it also has a ``.name``\n", "colour": "blue", "author": "tomerfiliba@gmail.com"}, {"error": "none", "line": "106", "code": "        attribute that holds the string-name of the user\"\"\"\n", "colour": "black", "author": "tomerfiliba@gmail.com"}, {"error": "none", "line": "107", "code": "        raise NotImplementedError()\n", "colour": "black", "author": "njharman@gmail.com"}, {"error": "none", "line": "108", "code": "    @property\n", "colour": "black", "author": "njharman@gmail.com"}, {"error": "none", "line": "109", "code": "    def gid(self):\n", "colour": "black", "author": "tomerfiliba@gmail.com"}, {"error": "C", "line": "110", "code": "        \"\"\"The group that owns this path. The returned value is a :class:`FSUser <plumbum.path.FSUser>`\n", "colour": "blue", "author": "tomerfiliba@gmail.com"}, {"error": "C", "line": "111", "code": "        object which behaves like an ``int`` (as expected from ``gid``), but it also has a ``.name``\n", "colour": "blue", "author": "tomerfiliba@gmail.com"}, {"error": "none", "line": "112", "code": "        attribute that holds the string-name of the group\"\"\"\n", "colour": "black", "author": "tomerfiliba@gmail.com"}, {"error": "none", "line": "113", "code": "        raise NotImplementedError()\n", "colour": "black", "author": "njharman@gmail.com"}, {"error": "none", "line": "114", "code": "\n", "colour": "black", "author": "njharman@gmail.com"}, {"error": "C", "line": "115", "code": "    def _get_info(self):\n", "colour": "blue", "author": "tomerfiliba@gmail.com"}, {"error": "none", "line": "116", "code": "        raise NotImplementedError()\n", "colour": "black", "author": "tomerfiliba@gmail.com"}, {"error": "none", "line": "117", "code": "    def join(self, *parts):\n", "colour": "black", "author": "tomerfiliba@gmail.com"}, {"error": "none", "line": "118", "code": "        \"\"\"Joins this path with any number of paths\"\"\"\n", "colour": "black", "author": "njharman@gmail.com"}, {"error": "none", "line": "119", "code": "        raise NotImplementedError()\n", "colour": "black", "author": "tomerfiliba@gmail.com"}, {"error": "none", "line": "120", "code": "    def list(self):\n", "colour": "black", "author": "tomerfiliba@gmail.com"}, {"error": "none", "line": "121", "code": "        \"\"\"Returns the files in this directory\"\"\"\n", "colour": "black", "author": "tomerfiliba@gmail.com"}, {"error": "none", "line": "122", "code": "        raise NotImplementedError()\n", "colour": "black", "author": "tomerfiliba@gmail.com"}, {"error": "none", "line": "123", "code": "    def isdir(self):\n", "colour": "black", "author": "tomerf@il.ibm.com"}, {"error": "none", "line": "124", "code": "        \"\"\"Returns ``True`` if this path is a directory, ``False`` otherwise\"\"\"\n", "colour": "black", "author": "tomerfiliba@gmail.com"}, {"error": "none", "line": "125", "code": "        raise NotImplementedError()\n", "colour": "black", "author": "tomerfiliba@gmail.com"}, {"error": "none", "line": "126", "code": "    def isfile(self):\n", "colour": "black", "author": "tomerf@il.ibm.com"}, {"error": "C", "line": "127", "code": "        \"\"\"Returns ``True`` if this path is a regular file, ``False`` otherwise\"\"\"\n", "colour": "blue", "author": "tomerfiliba@gmail.com"}, {"error": "none", "line": "128", "code": "        raise NotImplementedError()\n", "colour": "black", "author": "tomerfiliba@gmail.com"}, {"error": "none", "line": "129", "code": "    def islink(self):\n", "colour": "black", "author": "antoine.dechaume@sogeti.com"}, {"error": "C", "line": "130", "code": "        \"\"\"Returns ``True`` if this path is a symbolic link, ``False`` otherwise\"\"\"\n", "colour": "blue", "author": "antoine.dechaume@sogeti.com"}, {"error": "none", "line": "131", "code": "        raise NotImplementedError()\n", "colour": "black", "author": "antoine.dechaume@sogeti.com"}, {"error": "none", "line": "132", "code": "    def exists(self):\n", "colour": "black", "author": "tomerf@il.ibm.com"}, {"error": "none", "line": "133", "code": "        \"\"\"Returns ``True`` if this path exists, ``False`` otherwise\"\"\"\n", "colour": "black", "author": "tomerfiliba@gmail.com"}, {"error": "none", "line": "134", "code": "        raise NotImplementedError()\n", "colour": "black", "author": "tomerfiliba@gmail.com"}, {"error": "C", "line": "135", "code": "    def stat(self):\n", "colour": "blue", "author": "tomerf@il.ibm.com"}, {"error": "none", "line": "136", "code": "        raise NotImplementedError()\n", "colour": "black", "author": "tomerfiliba@gmail.com"}, {"error": "none", "line": "137", "code": "    def glob(self, pattern):\n", "colour": "black", "author": "tomerfiliba@gmail.com"}, {"error": "C", "line": "138", "code": "        \"\"\"Returns a (possibly empty) list of paths that matched the glob-pattern under this path\"\"\"\n", "colour": "blue", "author": "tomerfiliba@gmail.com"}, {"error": "none", "line": "139", "code": "        raise NotImplementedError()\n", "colour": "black", "author": "tomerfiliba@gmail.com"}, {"error": "none", "line": "140", "code": "    def delete(self):\n", "colour": "black", "author": "tomerfiliba@gmail.com"}, {"error": "none", "line": "141", "code": "        \"\"\"Deletes this path (recursively, if a directory)\"\"\"\n", "colour": "black", "author": "tomerfiliba@gmail.com"}, {"error": "none", "line": "142", "code": "        raise NotImplementedError()\n", "colour": "black", "author": "tomerfiliba@gmail.com"}, {"error": "none", "line": "143", "code": "    def move(self, dst):\n", "colour": "black", "author": "tomerfiliba@gmail.com"}, {"error": "none", "line": "144", "code": "        \"\"\"Moves this path to a different location\"\"\"\n", "colour": "black", "author": "tomerfiliba@gmail.com"}, {"error": "none", "line": "145", "code": "        raise NotImplementedError()\n", "colour": "black", "author": "tomerfiliba@gmail.com"}, {"error": "none", "line": "146", "code": "    def rename(self, newname):\n", "colour": "black", "author": "tomerfiliba@gmail.com"}, {"error": "C", "line": "147", "code": "        \"\"\"Renames this path to the ``new name`` (only the basename is changed)\"\"\"\n", "colour": "blue", "author": "tomerfiliba@gmail.com"}, {"error": "none", "line": "148", "code": "        return self.move(self.up() / newname)\n", "colour": "black", "author": "tomerfiliba@gmail.com"}, {"error": "C", "line": "149", "code": "    def copy(self, dst, override = False):\n", "colour": "blue", "author": "tomerf@il.ibm.com"}, {"error": "C", "line": "150", "code": "        \"\"\"Copies this path (recursively, if a directory) to the destination path\"\"\"\n", "colour": "blue", "author": "tomerfiliba@gmail.com"}, {"error": "none", "line": "151", "code": "        raise NotImplementedError()\n", "colour": "black", "author": "tomerfiliba@gmail.com"}, {"error": "none", "line": "152", "code": "    def mkdir(self):\n", "colour": "black", "author": "tomerfiliba@gmail.com"}, {"error": "C", "line": "153", "code": "        \"\"\"Creates a directory at this path; if the directory already exists, silently ignore\"\"\"\n", "colour": "blue", "author": "tomerfiliba@gmail.com"}, {"error": "none", "line": "154", "code": "        raise NotImplementedError()\n", "colour": "black", "author": "tomerfiliba@gmail.com"}, {"error": "C", "line": "155", "code": "    def open(self, mode = \"r\"):\n", "colour": "blue", "author": "tomerf@il.ibm.com"}, {"error": "none", "line": "156", "code": "        \"\"\"opens this path as a file\"\"\"\n", "colour": "black", "author": "tomerf@il.ibm.com"}, {"error": "none", "line": "157", "code": "        raise NotImplementedError()\n", "colour": "black", "author": "tomerf@il.ibm.com"}, {"error": "none", "line": "158", "code": "    def read(self, encoding=None):\n", "colour": "black", "author": "tomerfiliba@gmail.com"}, {"error": "C", "line": "159", "code": "        \"\"\"returns the contents of this file. By default the data is binary (``bytes``), but you can\n", "colour": "blue", "author": "tomerfiliba@gmail.com"}, {"error": "none", "line": "160", "code": "        specify the encoding, e.g., ``'latin1'`` or ``'utf8'``\"\"\"\n", "colour": "black", "author": "tomerfiliba@gmail.com"}, {"error": "none", "line": "161", "code": "        raise NotImplementedError()\n", "colour": "black", "author": "tomerf@il.ibm.com"}, {"error": "none", "line": "162", "code": "    def write(self, data, encoding=None):\n", "colour": "black", "author": "tomerfiliba@gmail.com"}, {"error": "C", "line": "163", "code": "        \"\"\"writes the given data to this file. By default the data is expected to be binary (``bytes``), \n", "colour": "blue", "author": "tomerfiliba@gmail.com"}, {"error": "none", "line": "164", "code": "        but you can specify the encoding, e.g., ``'latin1'`` or ``'utf8'``\"\"\"\n", "colour": "black", "author": "tomerfiliba@gmail.com"}, {"error": "none", "line": "165", "code": "        raise NotImplementedError()\n", "colour": "black", "author": "tomerf@il.ibm.com"}, {"error": "C", "line": "166", "code": "    def chown(self, owner = None, group = None, recursive = None):\n", "colour": "blue", "author": "tomer.filiba@emc.com"}, {"error": "none", "line": "167", "code": "        \"\"\"Change ownership of this path.\n", "colour": "black", "author": "tomerfiliba@gmail.com"}, {"error": "none", "line": "168", "code": "\n", "colour": "black", "author": "tomer.filiba@emc.com"}, {"error": "C", "line": "169", "code": "        :param owner: The owner to set (either ``uid`` or ``username``), optional\n", "colour": "blue", "author": "tomerfiliba@gmail.com"}, {"error": "C", "line": "170", "code": "        :param owner: The group to set (either ``gid`` or ``groupname``), optional\n", "colour": "blue", "author": "tomerfiliba@gmail.com"}, {"error": "C", "line": "171", "code": "        :param recursive: whether to change ownership of all contained files and subdirectories.\n", "colour": "blue", "author": "tomerfiliba@gmail.com"}, {"error": "C", "line": "172", "code": "                          Only meaningful when ``self`` is a directory. If ``None``, the value\n", "colour": "blue", "author": "tomerfiliba@gmail.com"}, {"error": "C", "line": "173", "code": "                          will default to ``True`` if ``self`` is a directory, ``False`` otherwise.\n", "colour": "blue", "author": "tomerfiliba@gmail.com"}, {"error": "none", "line": "174", "code": "        \"\"\"\n", "colour": "black", "author": "tomerfiliba@gmail.com"}, {"error": "none", "line": "175", "code": "        raise NotImplementedError()\n", "colour": "black", "author": "njharman@gmail.com"}, {"error": "none", "line": "176", "code": "    def chmod(self, mode):\n", "colour": "black", "author": "obutovich@gmail.com"}, {"error": "none", "line": "177", "code": "        \"\"\"Change the mode of path to the numeric mode.\n", "colour": "black", "author": "obutovich@gmail.com"}, {"error": "none", "line": "178", "code": "\n", "colour": "black", "author": "obutovich@gmail.com"}, {"error": "none", "line": "179", "code": "        :param mode: file mode as for os.chmod\n", "colour": "black", "author": "obutovich@gmail.com"}, {"error": "none", "line": "180", "code": "        \"\"\"\n", "colour": "black", "author": "obutovich@gmail.com"}, {"error": "none", "line": "181", "code": "        raise NotImplementedError()\n", "colour": "black", "author": "obutovich@gmail.com"}, {"error": "none", "line": "182", "code": "\n", "colour": "black", "author": "tomer.filiba@emc.com"}, {"error": "none", "line": "183", "code": "    @staticmethod\n", "colour": "black", "author": "tomer.filiba@emc.com"}, {"error": "C", "line": "184", "code": "    def _access_mode_to_flags(mode, flags = {\"f\" : os.F_OK, \"w\" : os.W_OK, \"r\" : os.R_OK, \"x\" : os.X_OK}):\n", "colour": "blue", "author": "tomer.filiba@emc.com"}, {"error": "none", "line": "185", "code": "        if isinstance(mode, str):\n", "colour": "black", "author": "tomer.filiba@emc.com"}, {"error": "none", "line": "186", "code": "            mode = reduce(operator.or_, [flags[m] for m in mode.lower()], 0)\n", "colour": "black", "author": "tomer.filiba@emc.com"}, {"error": "none", "line": "187", "code": "        return mode\n", "colour": "black", "author": "tomer.filiba@emc.com"}, {"error": "C", "line": "188", "code": "    \n", "colour": "blue", "author": "tomer.filiba@emc.com"}, {"error": "C", "line": "189", "code": "    def access(self, mode = 0):\n", "colour": "blue", "author": "tomer.filiba@emc.com"}, {"error": "none", "line": "190", "code": "        \"\"\"Test file existence or permission bits\n", "colour": "black", "author": "tomer.filiba@emc.com"}, {"error": "C", "line": "191", "code": "        \n", "colour": "blue", "author": "tomer.filiba@emc.com"}, {"error": "C", "line": "192", "code": "        :param mode: a bitwise-or of access bits, or a string-representation thereof: \n", "colour": "blue", "author": "tomer.filiba@emc.com"}, {"error": "C", "line": "193", "code": "                     ``'f'``, ``'x'``, ``'r'``, ``'w'`` for ``os.F_OK``, ``os.X_OK``, \n", "colour": "blue", "author": "tomer.filiba@emc.com"}, {"error": "none", "line": "194", "code": "                     ``os.R_OK``, ``os.W_OK``\n", "colour": "black", "author": "tomer.filiba@emc.com"}, {"error": "none", "line": "195", "code": "        \"\"\"\n", "colour": "black", "author": "tomer.filiba@emc.com"}, {"error": "none", "line": "196", "code": "        raise NotImplementedError()\n", "colour": "black", "author": "tomer.filiba@emc.com"}, {"error": "none", "line": "197", "code": "\n", "colour": "black", "author": "tomer.filiba@emc.com"}, {"error": "none", "line": "198", "code": "    def link(self, dst):\n", "colour": "black", "author": "tomerfiliba@gmail.com"}, {"error": "none", "line": "199", "code": "        \"\"\"Creates a hard link from ``self`` to ``dst``\n", "colour": "black", "author": "tomerfiliba@gmail.com"}, {"error": "none", "line": "200", "code": "\n", "colour": "black", "author": "tomerfiliba@gmail.com"}, {"error": "none", "line": "201", "code": "        :param dst: the destination path\n", "colour": "black", "author": "tomerfiliba@gmail.com"}, {"error": "none", "line": "202", "code": "        \"\"\"\n", "colour": "black", "author": "tomerfiliba@gmail.com"}, {"error": "none", "line": "203", "code": "        raise NotImplementedError()\n", "colour": "black", "author": "tomerfiliba@gmail.com"}, {"error": "none", "line": "204", "code": "\n", "colour": "black", "author": "antoine.dechaume@sogeti.com"}, {"error": "none", "line": "205", "code": "    def symlink(self, dst):\n", "colour": "black", "author": "tomerfiliba@gmail.com"}, {"error": "none", "line": "206", "code": "        \"\"\"Creates a symbolic link from ``self`` to ``dst``\n", "colour": "black", "author": "tomerfiliba@gmail.com"}, {"error": "none", "line": "207", "code": "\n", "colour": "black", "author": "tomerfiliba@gmail.com"}, {"error": "none", "line": "208", "code": "        :param dst: the destination path\n", "colour": "black", "author": "tomerfiliba@gmail.com"}, {"error": "none", "line": "209", "code": "        \"\"\"\n", "colour": "black", "author": "tomerfiliba@gmail.com"}, {"error": "none", "line": "210", "code": "        raise NotImplementedError()\n", "colour": "black", "author": "tomerfiliba@gmail.com"}, {"error": "none", "line": "211", "code": "\n", "colour": "black", "author": "tomerfiliba@gmail.com"}, {"error": "none", "line": "212", "code": "    def unlink(self):\n", "colour": "black", "author": "antoine.dechaume@sogeti.com"}, {"error": "none", "line": "213", "code": "        \"\"\"Deletes a symbolic link\"\"\"\n", "colour": "black", "author": "antoine.dechaume@sogeti.com"}, {"error": "none", "line": "214", "code": "        raise NotImplementedError()\n", "colour": "black", "author": "antoine.dechaume@sogeti.com"}, {"error": "none", "line": "215", "code": "\n", "colour": "black", "author": "antoine.dechaume@sogeti.com"}, {"error": "none", "line": "216", "code": "    def split(self):\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "C", "line": "217", "code": "        \"\"\"Splits the path on directory separators, yielding a list of directories, e.g,\n", "colour": "blue", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "218", "code": "        ``\"/var/log/messages\"`` will yield ``['var', 'log', 'messages']``.\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "219", "code": "        \"\"\"\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "220", "code": "        parts = []\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "221", "code": "        path = self\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "222", "code": "        while path != path.dirname:\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "223", "code": "            parts.append(path.basename)\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "224", "code": "            path = path.dirname\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "225", "code": "        return parts[::-1]\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "226", "code": "\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "227", "code": "    def relative_to(self, source):\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "C", "line": "228", "code": "        \"\"\"Computes the \"relative path\" require to get from ``source`` to ``self``. They satisfy the invariant\n", "colour": "blue", "author": "tomerfiliba@gmail.com"}, {"error": "C", "line": "229", "code": "        ``source_path + (target_path - source_path) == target_path``. For example::\n", "colour": "blue", "author": "tomerfiliba@gmail.com"}, {"error": "none", "line": "230", "code": "\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "231", "code": "            /var/log/messages - /var/log/messages = []\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "232", "code": "            /var/log/messages - /var              = [log, messages]\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "233", "code": "            /var/log/messages - /                 = [var, log, messages]\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "234", "code": "            /var/log/messages - /var/tmp          = [.., log, messages]\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "235", "code": "            /var/log/messages - /opt              = [.., var, log, messages]\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "236", "code": "            /var/log/messages - /opt/lib          = [.., .., var, log, messages]\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "237", "code": "        \"\"\"\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "238", "code": "        if isinstance(source, str):\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "239", "code": "            source = self._form(source)\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "240", "code": "        parts = self.split()\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "241", "code": "        baseparts = source.split()\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "C", "line": "242", "code": "        ancestors = len(list(itertools.takewhile(lambda p: p[0] == p[1], zip(parts, baseparts))))\n", "colour": "blue", "author": "Tomer.Filiba@emc.com"}, {"error": "C", "line": "243", "code": "        return RelativePath([\"..\"] * (len(baseparts) - ancestors) + parts[ancestors:])\n", "colour": "blue", "author": "tomerfiliba@gmail.com"}, {"error": "none", "line": "244", "code": "\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "245", "code": "    def __sub__(self, other):\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "246", "code": "        \"\"\"Same as ``self.relative_to(other)``\"\"\"\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "247", "code": "        return self.relative_to(other)\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "248", "code": "\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "249", "code": "\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "R", "line": "250", "code": "class RelativePath(object):\n", "colour": "green", "author": "tomerfiliba@gmail.com"}, {"error": "none", "line": "251", "code": "    \"\"\"\n", "colour": "black", "author": "tomerfiliba@gmail.com"}, {"error": "none", "line": "252", "code": "    Relative paths are the \"delta\" required to get from one path to another.\n", "colour": "black", "author": "tomerfiliba@gmail.com"}, {"error": "none", "line": "253", "code": "    Note that relative path do not point at anything, and thus are not paths.\n", "colour": "black", "author": "tomerfiliba@gmail.com"}, {"error": "C", "line": "254", "code": "    Therefore they are system agnostic (but closed under addition) \n", "colour": "blue", "author": "tomerfiliba@gmail.com"}, {"error": "none", "line": "255", "code": "    Paths are always absolute and point at \"something\", whether existent or not.\n", "colour": "black", "author": "tomerfiliba@gmail.com"}, {"error": "C", "line": "256", "code": "    \n", "colour": "blue", "author": "tomerfiliba@gmail.com"}, {"error": "none", "line": "257", "code": "    Relative paths are created by subtracting paths (``Path.relative_to``)\n", "colour": "black", "author": "tomerfiliba@gmail.com"}, {"error": "none", "line": "258", "code": "    \"\"\"\n", "colour": "black", "author": "tomerfiliba@gmail.com"}, {"error": "none", "line": "259", "code": "    def __init__(self, parts):\n", "colour": "black", "author": "tomerfiliba@gmail.com"}, {"error": "none", "line": "260", "code": "        self.parts = parts\n", "colour": "black", "author": "tomerfiliba@gmail.com"}, {"error": "none", "line": "261", "code": "    def __str__(self):\n", "colour": "black", "author": "tomerfiliba@gmail.com"}, {"error": "none", "line": "262", "code": "        return \"/\".join(self.parts)\n", "colour": "black", "author": "tomerfiliba@gmail.com"}, {"error": "none", "line": "263", "code": "    def __iter__(self):\n", "colour": "black", "author": "tomerfiliba@gmail.com"}, {"error": "none", "line": "264", "code": "        return iter(self.parts)\n", "colour": "black", "author": "tomerfiliba@gmail.com"}, {"error": "none", "line": "265", "code": "    def __len__(self):\n", "colour": "black", "author": "tomerfiliba@gmail.com"}, {"error": "none", "line": "266", "code": "        return len(self.parts)\n", "colour": "black", "author": "tomerfiliba@gmail.com"}, {"error": "none", "line": "267", "code": "    def __getitem__(self, index):\n", "colour": "black", "author": "tomerfiliba@gmail.com"}, {"error": "none", "line": "268", "code": "        return self.parts[index]\n", "colour": "black", "author": "tomerfiliba@gmail.com"}, {"error": "none", "line": "269", "code": "    def __repr__(self):\n", "colour": "black", "author": "tomerfiliba@gmail.com"}, {"error": "none", "line": "270", "code": "        return \"RelativePath(%r)\" % (self.parts,)\n", "colour": "black", "author": "tomerfiliba@gmail.com"}, {"error": "none", "line": "271", "code": "\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "272", "code": "    def __eq__(self, other):\n", "colour": "black", "author": "tomerfiliba@gmail.com"}, {"error": "none", "line": "273", "code": "        return str(self) == str(other)\n", "colour": "black", "author": "tomerfiliba@gmail.com"}, {"error": "none", "line": "274", "code": "    def __ne__(self, other):\n", "colour": "black", "author": "tomerfiliba@gmail.com"}, {"error": "C", "line": "275", "code": "        return not (self == other)\n", "colour": "blue", "author": "tomerfiliba@gmail.com"}, {"error": "none", "line": "276", "code": "    def __gt__(self, other):\n", "colour": "black", "author": "tomerfiliba@gmail.com"}, {"error": "none", "line": "277", "code": "        return str(self) > str(other)\n", "colour": "black", "author": "tomerfiliba@gmail.com"}, {"error": "none", "line": "278", "code": "    def __ge__(self, other):\n", "colour": "black", "author": "tomerfiliba@gmail.com"}, {"error": "none", "line": "279", "code": "        return str(self) >= str(other)\n", "colour": "black", "author": "tomerfiliba@gmail.com"}, {"error": "none", "line": "280", "code": "    def __lt__(self, other):\n", "colour": "black", "author": "tomerfiliba@gmail.com"}, {"error": "none", "line": "281", "code": "        return str(self) < str(other)\n", "colour": "black", "author": "tomerfiliba@gmail.com"}, {"error": "none", "line": "282", "code": "    def __le__(self, other):\n", "colour": "black", "author": "tomerfiliba@gmail.com"}, {"error": "none", "line": "283", "code": "        return str(self) <= str(other)\n", "colour": "black", "author": "tomerfiliba@gmail.com"}, {"error": "none", "line": "284", "code": "    def __hash__(self):\n", "colour": "black", "author": "tomerfiliba@gmail.com"}, {"error": "none", "line": "285", "code": "        return hash(str(self))\n", "colour": "black", "author": "tomerfiliba@gmail.com"}, {"error": "none", "line": "286", "code": "    def __nonzero__(self):\n", "colour": "black", "author": "tomerfiliba@gmail.com"}, {"error": "none", "line": "287", "code": "        return bool(str(self))\n", "colour": "black", "author": "tomerfiliba@gmail.com"}, {"error": "none", "line": "288", "code": "    __bool__ = __nonzero__\n", "colour": "black", "author": "tomerfiliba@gmail.com"}, {"error": "C", "line": "289", "code": "    \n", "colour": "blue", "author": "tomerfiliba@gmail.com"}, {"error": "C", "line": "290", "code": "    def up(self, count = 1):\n", "colour": "blue", "author": "tomerfiliba@gmail.com"}, {"error": "none", "line": "291", "code": "        return RelativePath(self.parts[:-count])\n", "colour": "black", "author": "tomerfiliba@gmail.com"}, {"error": "C", "line": "292", "code": "    \n", "colour": "blue", "author": "tomerfiliba@gmail.com"}, {"error": "none", "line": "293", "code": "    def __radd__(self, path):\n", "colour": "black", "author": "tomerfiliba@gmail.com"}, {"error": "none", "line": "294", "code": "        return path.join(*self.parts)\n", "colour": "black", "author": "tomerfiliba@gmail.com"}, {"error": "none", "line": "295", "code": "\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "296", "code": "\n", "colour": "black", "author": "tomerfiliba@gmail.com"}, {"error": "none", "line": "297", "code": "\n", "colour": "black", "author": "tomerfiliba@gmail.com"}]]}