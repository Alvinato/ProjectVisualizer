{"path": "/home/asumal/git/cs410/plumbum/plumbum/path/base.py", "lines": [[{"index": "1", "colour": "orange", "code": "import itertools\n", "error": "none", "author": "Tomer.Filiba@emc.com"}, {"index": "2", "colour": "orange", "code": "import operator\n", "error": "none", "author": "tomer.filiba@emc.com"}, {"index": "3", "colour": "orange", "code": "import os\n", "error": "none", "author": "tomer.filiba@emc.com"}, {"index": "4", "colour": "orange", "code": "\n", "error": "none", "author": "Tomer.Filiba@emc.com"}, {"index": "5", "colour": "orange", "code": "try:\n", "error": "none", "author": "tomer.filiba@emc.com"}, {"index": "6", "colour": "orange", "code": "    reduce\n", "error": "none", "author": "tomer.filiba@emc.com"}, {"index": "7", "colour": "orange", "code": "except NameError:\n", "error": "none", "author": "tomer.filiba@emc.com"}, {"index": "8", "colour": "green", "code": "    from functools import reduce\n", "error": "W", "author": "tomer.filiba@emc.com"}, {"index": "9", "colour": "orange", "code": "\n", "error": "none", "author": "tomer.filiba@emc.com"}, {"index": "10", "colour": "orange", "code": "\n", "error": "none", "author": "Tomer.Filiba@emc.com"}, {"index": "11", "colour": "orange", "code": "class FSUser(int):\n", "error": "none", "author": "tomerfiliba@gmail.com"}, {"index": "12", "colour": "orange", "code": "    \"\"\"A special object that represents a file-system user. It derives from ``int``, so it behaves\n", "error": "none", "author": "Tomer.Filiba@emc.com"}, {"index": "13", "colour": "orange", "code": "    just like a number (``uid``/``gid``), but also have a ``.name`` attribute that holds the\n", "error": "none", "author": "tomerfiliba@gmail.com"}, {"index": "14", "colour": "orange", "code": "    string-name of the user, if given (otherwise ``None``)\n", "error": "none", "author": "Tomer.Filiba@emc.com"}, {"index": "15", "colour": "orange", "code": "    \"\"\"\n", "error": "none", "author": "tomerfiliba@gmail.com"}, {"index": "16", "colour": "orange", "code": "    def __new__(cls, val, name = None):\n", "error": "none", "author": "tomerfiliba@gmail.com"}, {"index": "17", "colour": "orange", "code": "        self = int.__new__(cls, val)\n", "error": "none", "author": "tomerfiliba@gmail.com"}, {"index": "18", "colour": "orange", "code": "        self.name = name\n", "error": "none", "author": "tomerfiliba@gmail.com"}, {"index": "19", "colour": "orange", "code": "        return self\n", "error": "none", "author": "tomerfiliba@gmail.com"}, {"index": "20", "colour": "orange", "code": "\n", "error": "none", "author": "tomerfiliba@gmail.com"}, {"index": "21", "colour": "blue", "code": "class Path(object):\n", "error": "R", "author": "tomerf@il.ibm.com"}, {"index": "22", "colour": "orange", "code": "    \"\"\"An abstraction over file system paths. This class is abstract, and the two implementations\n", "error": "none", "author": "tomerfiliba@gmail.com"}, {"index": "23", "colour": "orange", "code": "    are :class:`LocalPath <plumbum.machines.local.LocalPath>` and\n", "error": "none", "author": "Tomer.Filiba@emc.com"}, {"index": "24", "colour": "orange", "code": "    :class:`RemotePath <plumbum.path.remote.RemotePath>`.\n", "error": "none", "author": "Tomer.Filiba@emc.com"}, {"index": "25", "colour": "orange", "code": "    \"\"\"\n", "error": "none", "author": "tomerfiliba@gmail.com"}, {"index": "26", "colour": "orange", "code": "\n", "error": "none", "author": "njharman@gmail.com"}, {"index": "27", "colour": "orange", "code": "    __slots__ = []\n", "error": "none", "author": "tomerfiliba@gmail.com"}, {"index": "28", "colour": "orange", "code": "    CASE_SENSITIVE = True\n", "error": "none", "author": "tomerfiliba@gmail.com"}, {"index": "29", "colour": "orange", "code": "\n", "error": "none", "author": "njharman@gmail.com"}, {"index": "30", "colour": "orange", "code": "    def __repr__(self):\n", "error": "none", "author": "tomerf@il.ibm.com"}, {"index": "31", "colour": "orange", "code": "        return \"<%s %s>\" % (self.__class__.__name__, str(self))\n", "error": "none", "author": "tomerfiliba@gmail.com"}, {"index": "32", "colour": "orange", "code": "    def __div__(self, other):\n", "error": "none", "author": "tomerf@il.ibm.com"}, {"index": "33", "colour": "orange", "code": "        \"\"\"Joins two paths\"\"\"\n", "error": "none", "author": "tomerfiliba@gmail.com"}, {"index": "34", "colour": "orange", "code": "        return self.join(other)\n", "error": "none", "author": "tomerfiliba@gmail.com"}, {"index": "35", "colour": "orange", "code": "    __truediv__ = __div__\n", "error": "none", "author": "tomerfiliba@gmail.com"}, {"index": "36", "colour": "orange", "code": "    def __floordiv__(self, expr):\n", "error": "none", "author": "tomerfiliba@gmail.com"}, {"index": "37", "colour": "orange", "code": "        \"\"\"Returns a (possibly empty) list of paths that matched the glob-pattern under this path\"\"\"\n", "error": "none", "author": "tomerfiliba@gmail.com"}, {"index": "38", "colour": "orange", "code": "        return self.glob(expr)\n", "error": "none", "author": "tomerfiliba@gmail.com"}, {"index": "39", "colour": "orange", "code": "    def __iter__(self):\n", "error": "none", "author": "tomerf@il.ibm.com"}, {"index": "40", "colour": "orange", "code": "        \"\"\"Iterate over the files in this directory\"\"\"\n", "error": "none", "author": "tomerfiliba@gmail.com"}, {"index": "41", "colour": "orange", "code": "        return iter(self.list())\n", "error": "none", "author": "tomerf@il.ibm.com"}, {"index": "42", "colour": "orange", "code": "    def __eq__(self, other):\n", "error": "none", "author": "tomerf@il.ibm.com"}, {"index": "43", "colour": "orange", "code": "        if isinstance(other, Path):\n", "error": "none", "author": "tomerfiliba@gmail.com"}, {"index": "44", "colour": "green", "code": "            return self._get_info() == other._get_info()\n", "error": "W", "author": "tomerfiliba@gmail.com"}, {"index": "45", "colour": "orange", "code": "        elif isinstance(other, str):\n", "error": "none", "author": "tomerfiliba@gmail.com"}, {"index": "46", "colour": "orange", "code": "            if self.CASE_SENSITIVE:\n", "error": "none", "author": "tomerfiliba@gmail.com"}, {"index": "47", "colour": "orange", "code": "                return str(self) == other\n", "error": "none", "author": "tomerfiliba@gmail.com"}, {"index": "48", "colour": "orange", "code": "            else:\n", "error": "none", "author": "tomerfiliba@gmail.com"}, {"index": "49", "colour": "orange", "code": "                return str(self).lower() == other.lower()\n", "error": "none", "author": "tomerfiliba@gmail.com"}, {"index": "50", "colour": "orange", "code": "        else:\n", "error": "none", "author": "tomerfiliba@gmail.com"}, {"index": "51", "colour": "orange", "code": "            return NotImplemented\n", "error": "none", "author": "tomerfiliba@gmail.com"}, {"index": "52", "colour": "orange", "code": "    def __ne__(self, other):\n", "error": "none", "author": "tomerf@il.ibm.com"}, {"index": "53", "colour": "orange", "code": "        return not (self == other)\n", "error": "none", "author": "tomerfiliba@gmail.com"}, {"index": "54", "colour": "orange", "code": "    def __gt__(self, other):\n", "error": "none", "author": "tomerfiliba@gmail.com"}, {"index": "55", "colour": "orange", "code": "        return str(self) > str(other)\n", "error": "none", "author": "Tomer.Filiba@emc.com"}, {"index": "56", "colour": "orange", "code": "    def __ge__(self, other):\n", "error": "none", "author": "tomerfiliba@gmail.com"}, {"index": "57", "colour": "orange", "code": "        return str(self) >= str(other)\n", "error": "none", "author": "Tomer.Filiba@emc.com"}, {"index": "58", "colour": "orange", "code": "    def __lt__(self, other):\n", "error": "none", "author": "tomerfiliba@gmail.com"}, {"index": "59", "colour": "orange", "code": "        return str(self) < str(other)\n", "error": "none", "author": "Tomer.Filiba@emc.com"}, {"index": "60", "colour": "orange", "code": "    def __le__(self, other):\n", "error": "none", "author": "tomerfiliba@gmail.com"}, {"index": "61", "colour": "orange", "code": "        return str(self) <= str(other)\n", "error": "none", "author": "Tomer.Filiba@emc.com"}, {"index": "62", "colour": "orange", "code": "    def __hash__(self):\n", "error": "none", "author": "tomerf@il.ibm.com"}, {"index": "63", "colour": "orange", "code": "        if self.CASE_SENSITIVE:\n", "error": "none", "author": "grambo@grambo.me.uk"}, {"index": "64", "colour": "orange", "code": "            return hash(str(self))\n", "error": "none", "author": "grambo@grambo.me.uk"}, {"index": "65", "colour": "orange", "code": "        else:\n", "error": "none", "author": "grambo@grambo.me.uk"}, {"index": "66", "colour": "orange", "code": "            return hash(str(self).lower())\n", "error": "none", "author": "grambo@grambo.me.uk"}, {"index": "67", "colour": "orange", "code": "    def __nonzero__(self):\n", "error": "none", "author": "tomerf@il.ibm.com"}, {"index": "68", "colour": "orange", "code": "        return bool(str(self))\n", "error": "none", "author": "tomerf@il.ibm.com"}, {"index": "69", "colour": "orange", "code": "    __bool__ = __nonzero__\n", "error": "none", "author": "tomerf@il.ibm.com"}, {"index": "70", "colour": "orange", "code": "\n", "error": "none", "author": "njharman@gmail.com"}, {"index": "71", "colour": "orange", "code": "    def _form(self, *parts):\n", "error": "none", "author": "Tomer.Filiba@emc.com"}, {"index": "72", "colour": "orange", "code": "        raise NotImplementedError()\n", "error": "none", "author": "Tomer.Filiba@emc.com"}, {"index": "73", "colour": "orange", "code": "\n", "error": "none", "author": "Tomer.Filiba@emc.com"}, {"index": "74", "colour": "orange", "code": "    def up(self, count = 1):\n", "error": "none", "author": "tomerfiliba@gmail.com"}, {"index": "75", "colour": "orange", "code": "        \"\"\"Go up in ``count`` directories (the default is 1)\"\"\"\n", "error": "none", "author": "tomerfiliba@gmail.com"}, {"index": "76", "colour": "orange", "code": "        return self.join(\"../\" * count)\n", "error": "none", "author": "tomerfiliba@gmail.com"}, {"index": "77", "colour": "green", "code": "    def walk(self, filter = lambda p: True, dir_filter = lambda p: True):  # @ReservedAssignment\n", "error": "W", "author": "tomerfiliba@gmail.com"}, {"index": "78", "colour": "orange", "code": "        \"\"\"traverse all (recursive) sub-elements under this directory, that match the given filter.\n", "error": "none", "author": "tomerfiliba@gmail.com"}, {"index": "79", "colour": "orange", "code": "        By default, the filter accepts everything; you can provide a custom filter function that\n", "error": "none", "author": "tomerfiliba@gmail.com"}, {"index": "80", "colour": "orange", "code": "        takes a path as an argument and returns a boolean\n", "error": "none", "author": "tomerfiliba@gmail.com"}, {"index": "81", "colour": "orange", "code": "        \n", "error": "none", "author": "tomerfiliba@gmail.com"}, {"index": "82", "colour": "orange", "code": "        :param filter: the filter (predicate function) for matching results. Only paths matching \n", "error": "none", "author": "tomerfiliba@gmail.com"}, {"index": "83", "colour": "orange", "code": "                       this predicate are returned. Defaults to everything.\n", "error": "none", "author": "tomerfiliba@gmail.com"}, {"index": "84", "colour": "orange", "code": "        :param dir_filter: the filter (predicate function) for matching directories. Only directories\n", "error": "none", "author": "tomerfiliba@gmail.com"}, {"index": "85", "colour": "orange", "code": "                           matching this predicate are recursed into. Defaults to everything.\n", "error": "none", "author": "tomerfiliba@gmail.com"}, {"index": "86", "colour": "orange", "code": "        \"\"\"\n", "error": "none", "author": "tomerfiliba@gmail.com"}, {"index": "87", "colour": "orange", "code": "        for p in self.list():\n", "error": "none", "author": "tomerfiliba@gmail.com"}, {"index": "88", "colour": "orange", "code": "            if filter(p):\n", "error": "none", "author": "tomerfiliba@gmail.com"}, {"index": "89", "colour": "orange", "code": "                yield p\n", "error": "none", "author": "tomerf@il.ibm.com"}, {"index": "90", "colour": "orange", "code": "            if p.isdir() and dir_filter(p):\n", "error": "none", "author": "tomerfiliba@gmail.com"}, {"index": "91", "colour": "orange", "code": "                for p2 in p.walk(filter, dir_filter):\n", "error": "none", "author": "tomerfiliba@gmail.com"}, {"index": "92", "colour": "orange", "code": "                    yield p2\n", "error": "none", "author": "tomerfiliba@gmail.com"}, {"index": "93", "colour": "orange", "code": "\n", "error": "none", "author": "tomerfiliba@gmail.com"}, {"index": "94", "colour": "orange", "code": "    @property\n", "error": "none", "author": "tomerf@il.ibm.com"}, {"index": "95", "colour": "orange", "code": "    def basename(self):\n", "error": "none", "author": "tomerf@il.ibm.com"}, {"index": "96", "colour": "orange", "code": "        \"\"\"The basename component of this path\"\"\"\n", "error": "none", "author": "tomerfiliba@gmail.com"}, {"index": "97", "colour": "orange", "code": "        raise NotImplementedError()\n", "error": "none", "author": "tomerfiliba@gmail.com"}, {"index": "98", "colour": "orange", "code": "    @property\n", "error": "none", "author": "tomerf@il.ibm.com"}, {"index": "99", "colour": "orange", "code": "    def dirname(self):\n", "error": "none", "author": "tomerf@il.ibm.com"}, {"index": "100", "colour": "orange", "code": "        \"\"\"The dirname component of this path\"\"\"\n", "error": "none", "author": "tomerfiliba@gmail.com"}, {"index": "101", "colour": "orange", "code": "        raise NotImplementedError()\n", "error": "none", "author": "tomerfiliba@gmail.com"}, {"index": "102", "colour": "orange", "code": "    @property\n", "error": "none", "author": "njharman@gmail.com"}, {"index": "103", "colour": "orange", "code": "    def uid(self):\n", "error": "none", "author": "tomerfiliba@gmail.com"}, {"index": "104", "colour": "orange", "code": "        \"\"\"The user that owns this path. The returned value is a :class:`FSUser <plumbum.path.FSUser>`\n", "error": "none", "author": "tomerfiliba@gmail.com"}, {"index": "105", "colour": "orange", "code": "        object which behaves like an ``int`` (as expected from ``uid``), but it also has a ``.name``\n", "error": "none", "author": "tomerfiliba@gmail.com"}, {"index": "106", "colour": "orange", "code": "        attribute that holds the string-name of the user\"\"\"\n", "error": "none", "author": "tomerfiliba@gmail.com"}, {"index": "107", "colour": "orange", "code": "        raise NotImplementedError()\n", "error": "none", "author": "njharman@gmail.com"}, {"index": "108", "colour": "orange", "code": "    @property\n", "error": "none", "author": "njharman@gmail.com"}, {"index": "109", "colour": "orange", "code": "    def gid(self):\n", "error": "none", "author": "tomerfiliba@gmail.com"}, {"index": "110", "colour": "orange", "code": "        \"\"\"The group that owns this path. The returned value is a :class:`FSUser <plumbum.path.FSUser>`\n", "error": "none", "author": "tomerfiliba@gmail.com"}, {"index": "111", "colour": "orange", "code": "        object which behaves like an ``int`` (as expected from ``gid``), but it also has a ``.name``\n", "error": "none", "author": "tomerfiliba@gmail.com"}, {"index": "112", "colour": "orange", "code": "        attribute that holds the string-name of the group\"\"\"\n", "error": "none", "author": "tomerfiliba@gmail.com"}, {"index": "113", "colour": "orange", "code": "        raise NotImplementedError()\n", "error": "none", "author": "njharman@gmail.com"}, {"index": "114", "colour": "orange", "code": "\n", "error": "none", "author": "njharman@gmail.com"}, {"index": "115", "colour": "orange", "code": "    def _get_info(self):\n", "error": "none", "author": "tomerfiliba@gmail.com"}, {"index": "116", "colour": "orange", "code": "        raise NotImplementedError()\n", "error": "none", "author": "tomerfiliba@gmail.com"}, {"index": "117", "colour": "orange", "code": "    def join(self, *parts):\n", "error": "none", "author": "tomerfiliba@gmail.com"}, {"index": "118", "colour": "orange", "code": "        \"\"\"Joins this path with any number of paths\"\"\"\n", "error": "none", "author": "njharman@gmail.com"}, {"index": "119", "colour": "orange", "code": "        raise NotImplementedError()\n", "error": "none", "author": "tomerfiliba@gmail.com"}, {"index": "120", "colour": "orange", "code": "    def list(self):\n", "error": "none", "author": "tomerfiliba@gmail.com"}, {"index": "121", "colour": "orange", "code": "        \"\"\"Returns the files in this directory\"\"\"\n", "error": "none", "author": "tomerfiliba@gmail.com"}, {"index": "122", "colour": "orange", "code": "        raise NotImplementedError()\n", "error": "none", "author": "tomerfiliba@gmail.com"}, {"index": "123", "colour": "orange", "code": "    def isdir(self):\n", "error": "none", "author": "tomerf@il.ibm.com"}, {"index": "124", "colour": "orange", "code": "        \"\"\"Returns ``True`` if this path is a directory, ``False`` otherwise\"\"\"\n", "error": "none", "author": "tomerfiliba@gmail.com"}, {"index": "125", "colour": "orange", "code": "        raise NotImplementedError()\n", "error": "none", "author": "tomerfiliba@gmail.com"}, {"index": "126", "colour": "orange", "code": "    def isfile(self):\n", "error": "none", "author": "tomerf@il.ibm.com"}, {"index": "127", "colour": "orange", "code": "        \"\"\"Returns ``True`` if this path is a regular file, ``False`` otherwise\"\"\"\n", "error": "none", "author": "tomerfiliba@gmail.com"}, {"index": "128", "colour": "orange", "code": "        raise NotImplementedError()\n", "error": "none", "author": "tomerfiliba@gmail.com"}, {"index": "129", "colour": "orange", "code": "    def islink(self):\n", "error": "none", "author": "antoine.dechaume@sogeti.com"}, {"index": "130", "colour": "orange", "code": "        \"\"\"Returns ``True`` if this path is a symbolic link, ``False`` otherwise\"\"\"\n", "error": "none", "author": "antoine.dechaume@sogeti.com"}, {"index": "131", "colour": "orange", "code": "        raise NotImplementedError()\n", "error": "none", "author": "antoine.dechaume@sogeti.com"}, {"index": "132", "colour": "orange", "code": "    def exists(self):\n", "error": "none", "author": "tomerf@il.ibm.com"}, {"index": "133", "colour": "orange", "code": "        \"\"\"Returns ``True`` if this path exists, ``False`` otherwise\"\"\"\n", "error": "none", "author": "tomerfiliba@gmail.com"}, {"index": "134", "colour": "orange", "code": "        raise NotImplementedError()\n", "error": "none", "author": "tomerfiliba@gmail.com"}, {"index": "135", "colour": "orange", "code": "    def stat(self):\n", "error": "none", "author": "tomerf@il.ibm.com"}, {"index": "136", "colour": "orange", "code": "        raise NotImplementedError()\n", "error": "none", "author": "tomerfiliba@gmail.com"}, {"index": "137", "colour": "orange", "code": "    def glob(self, pattern):\n", "error": "none", "author": "tomerfiliba@gmail.com"}, {"index": "138", "colour": "orange", "code": "        \"\"\"Returns a (possibly empty) list of paths that matched the glob-pattern under this path\"\"\"\n", "error": "none", "author": "tomerfiliba@gmail.com"}, {"index": "139", "colour": "orange", "code": "        raise NotImplementedError()\n", "error": "none", "author": "tomerfiliba@gmail.com"}, {"index": "140", "colour": "orange", "code": "    def delete(self):\n", "error": "none", "author": "tomerfiliba@gmail.com"}, {"index": "141", "colour": "orange", "code": "        \"\"\"Deletes this path (recursively, if a directory)\"\"\"\n", "error": "none", "author": "tomerfiliba@gmail.com"}, {"index": "142", "colour": "orange", "code": "        raise NotImplementedError()\n", "error": "none", "author": "tomerfiliba@gmail.com"}, {"index": "143", "colour": "orange", "code": "    def move(self, dst):\n", "error": "none", "author": "tomerfiliba@gmail.com"}, {"index": "144", "colour": "orange", "code": "        \"\"\"Moves this path to a different location\"\"\"\n", "error": "none", "author": "tomerfiliba@gmail.com"}, {"index": "145", "colour": "orange", "code": "        raise NotImplementedError()\n", "error": "none", "author": "tomerfiliba@gmail.com"}, {"index": "146", "colour": "orange", "code": "    def rename(self, newname):\n", "error": "none", "author": "tomerfiliba@gmail.com"}, {"index": "147", "colour": "orange", "code": "        \"\"\"Renames this path to the ``new name`` (only the basename is changed)\"\"\"\n", "error": "none", "author": "tomerfiliba@gmail.com"}, {"index": "148", "colour": "orange", "code": "        return self.move(self.up() / newname)\n", "error": "none", "author": "tomerfiliba@gmail.com"}, {"index": "149", "colour": "orange", "code": "    def copy(self, dst, override = False):\n", "error": "none", "author": "tomerf@il.ibm.com"}, {"index": "150", "colour": "orange", "code": "        \"\"\"Copies this path (recursively, if a directory) to the destination path\"\"\"\n", "error": "none", "author": "tomerfiliba@gmail.com"}, {"index": "151", "colour": "orange", "code": "        raise NotImplementedError()\n", "error": "none", "author": "tomerfiliba@gmail.com"}, {"index": "152", "colour": "orange", "code": "    def mkdir(self):\n", "error": "none", "author": "tomerfiliba@gmail.com"}, {"index": "153", "colour": "orange", "code": "        \"\"\"Creates a directory at this path; if the directory already exists, silently ignore\"\"\"\n", "error": "none", "author": "tomerfiliba@gmail.com"}, {"index": "154", "colour": "orange", "code": "        raise NotImplementedError()\n", "error": "none", "author": "tomerfiliba@gmail.com"}, {"index": "155", "colour": "orange", "code": "    def open(self, mode = \"r\"):\n", "error": "none", "author": "tomerf@il.ibm.com"}, {"index": "156", "colour": "orange", "code": "        \"\"\"opens this path as a file\"\"\"\n", "error": "none", "author": "tomerf@il.ibm.com"}, {"index": "157", "colour": "orange", "code": "        raise NotImplementedError()\n", "error": "none", "author": "tomerf@il.ibm.com"}, {"index": "158", "colour": "orange", "code": "    def read(self, encoding=None):\n", "error": "none", "author": "tomerfiliba@gmail.com"}, {"index": "159", "colour": "orange", "code": "        \"\"\"returns the contents of this file. By default the data is binary (``bytes``), but you can\n", "error": "none", "author": "tomerfiliba@gmail.com"}, {"index": "160", "colour": "orange", "code": "        specify the encoding, e.g., ``'latin1'`` or ``'utf8'``\"\"\"\n", "error": "none", "author": "tomerfiliba@gmail.com"}, {"index": "161", "colour": "orange", "code": "        raise NotImplementedError()\n", "error": "none", "author": "tomerf@il.ibm.com"}, {"index": "162", "colour": "orange", "code": "    def write(self, data, encoding=None):\n", "error": "none", "author": "tomerfiliba@gmail.com"}, {"index": "163", "colour": "orange", "code": "        \"\"\"writes the given data to this file. By default the data is expected to be binary (``bytes``), \n", "error": "none", "author": "tomerfiliba@gmail.com"}, {"index": "164", "colour": "orange", "code": "        but you can specify the encoding, e.g., ``'latin1'`` or ``'utf8'``\"\"\"\n", "error": "none", "author": "tomerfiliba@gmail.com"}, {"index": "165", "colour": "orange", "code": "        raise NotImplementedError()\n", "error": "none", "author": "tomerf@il.ibm.com"}, {"index": "166", "colour": "orange", "code": "    def chown(self, owner = None, group = None, recursive = None):\n", "error": "none", "author": "tomer.filiba@emc.com"}, {"index": "167", "colour": "orange", "code": "        \"\"\"Change ownership of this path.\n", "error": "none", "author": "tomerfiliba@gmail.com"}, {"index": "168", "colour": "orange", "code": "\n", "error": "none", "author": "tomer.filiba@emc.com"}, {"index": "169", "colour": "orange", "code": "        :param owner: The owner to set (either ``uid`` or ``username``), optional\n", "error": "none", "author": "tomerfiliba@gmail.com"}, {"index": "170", "colour": "orange", "code": "        :param owner: The group to set (either ``gid`` or ``groupname``), optional\n", "error": "none", "author": "tomerfiliba@gmail.com"}, {"index": "171", "colour": "orange", "code": "        :param recursive: whether to change ownership of all contained files and subdirectories.\n", "error": "none", "author": "tomerfiliba@gmail.com"}, {"index": "172", "colour": "orange", "code": "                          Only meaningful when ``self`` is a directory. If ``None``, the value\n", "error": "none", "author": "tomerfiliba@gmail.com"}, {"index": "173", "colour": "orange", "code": "                          will default to ``True`` if ``self`` is a directory, ``False`` otherwise.\n", "error": "none", "author": "tomerfiliba@gmail.com"}, {"index": "174", "colour": "orange", "code": "        \"\"\"\n", "error": "none", "author": "tomerfiliba@gmail.com"}, {"index": "175", "colour": "orange", "code": "        raise NotImplementedError()\n", "error": "none", "author": "njharman@gmail.com"}, {"index": "176", "colour": "orange", "code": "    def chmod(self, mode):\n", "error": "none", "author": "obutovich@gmail.com"}, {"index": "177", "colour": "orange", "code": "        \"\"\"Change the mode of path to the numeric mode.\n", "error": "none", "author": "obutovich@gmail.com"}, {"index": "178", "colour": "orange", "code": "\n", "error": "none", "author": "obutovich@gmail.com"}, {"index": "179", "colour": "orange", "code": "        :param mode: file mode as for os.chmod\n", "error": "none", "author": "obutovich@gmail.com"}, {"index": "180", "colour": "orange", "code": "        \"\"\"\n", "error": "none", "author": "obutovich@gmail.com"}, {"index": "181", "colour": "orange", "code": "        raise NotImplementedError()\n", "error": "none", "author": "obutovich@gmail.com"}, {"index": "182", "colour": "orange", "code": "\n", "error": "none", "author": "tomer.filiba@emc.com"}, {"index": "183", "colour": "orange", "code": "    @staticmethod\n", "error": "none", "author": "tomer.filiba@emc.com"}, {"index": "184", "colour": "green", "code": "    def _access_mode_to_flags(mode, flags = {\"f\" : os.F_OK, \"w\" : os.W_OK, \"r\" : os.R_OK, \"x\" : os.X_OK}):\n", "error": "W", "author": "tomer.filiba@emc.com"}, {"index": "185", "colour": "orange", "code": "        if isinstance(mode, str):\n", "error": "none", "author": "tomer.filiba@emc.com"}, {"index": "186", "colour": "orange", "code": "            mode = reduce(operator.or_, [flags[m] for m in mode.lower()], 0)\n", "error": "none", "author": "tomer.filiba@emc.com"}, {"index": "187", "colour": "orange", "code": "        return mode\n", "error": "none", "author": "tomer.filiba@emc.com"}, {"index": "188", "colour": "orange", "code": "    \n", "error": "none", "author": "tomer.filiba@emc.com"}, {"index": "189", "colour": "orange", "code": "    def access(self, mode = 0):\n", "error": "none", "author": "tomer.filiba@emc.com"}, {"index": "190", "colour": "orange", "code": "        \"\"\"Test file existence or permission bits\n", "error": "none", "author": "tomer.filiba@emc.com"}, {"index": "191", "colour": "orange", "code": "        \n", "error": "none", "author": "tomer.filiba@emc.com"}, {"index": "192", "colour": "orange", "code": "        :param mode: a bitwise-or of access bits, or a string-representation thereof: \n", "error": "none", "author": "tomer.filiba@emc.com"}, {"index": "193", "colour": "orange", "code": "                     ``'f'``, ``'x'``, ``'r'``, ``'w'`` for ``os.F_OK``, ``os.X_OK``, \n", "error": "none", "author": "tomer.filiba@emc.com"}, {"index": "194", "colour": "orange", "code": "                     ``os.R_OK``, ``os.W_OK``\n", "error": "none", "author": "tomer.filiba@emc.com"}, {"index": "195", "colour": "orange", "code": "        \"\"\"\n", "error": "none", "author": "tomer.filiba@emc.com"}, {"index": "196", "colour": "orange", "code": "        raise NotImplementedError()\n", "error": "none", "author": "tomer.filiba@emc.com"}, {"index": "197", "colour": "orange", "code": "\n", "error": "none", "author": "tomer.filiba@emc.com"}, {"index": "198", "colour": "orange", "code": "    def link(self, dst):\n", "error": "none", "author": "tomerfiliba@gmail.com"}, {"index": "199", "colour": "orange", "code": "        \"\"\"Creates a hard link from ``self`` to ``dst``\n", "error": "none", "author": "tomerfiliba@gmail.com"}, {"index": "200", "colour": "orange", "code": "\n", "error": "none", "author": "tomerfiliba@gmail.com"}, {"index": "201", "colour": "orange", "code": "        :param dst: the destination path\n", "error": "none", "author": "tomerfiliba@gmail.com"}, {"index": "202", "colour": "orange", "code": "        \"\"\"\n", "error": "none", "author": "tomerfiliba@gmail.com"}, {"index": "203", "colour": "orange", "code": "        raise NotImplementedError()\n", "error": "none", "author": "tomerfiliba@gmail.com"}, {"index": "204", "colour": "orange", "code": "\n", "error": "none", "author": "antoine.dechaume@sogeti.com"}, {"index": "205", "colour": "orange", "code": "    def symlink(self, dst):\n", "error": "none", "author": "tomerfiliba@gmail.com"}, {"index": "206", "colour": "orange", "code": "        \"\"\"Creates a symbolic link from ``self`` to ``dst``\n", "error": "none", "author": "tomerfiliba@gmail.com"}, {"index": "207", "colour": "orange", "code": "\n", "error": "none", "author": "tomerfiliba@gmail.com"}, {"index": "208", "colour": "orange", "code": "        :param dst: the destination path\n", "error": "none", "author": "tomerfiliba@gmail.com"}, {"index": "209", "colour": "orange", "code": "        \"\"\"\n", "error": "none", "author": "tomerfiliba@gmail.com"}, {"index": "210", "colour": "orange", "code": "        raise NotImplementedError()\n", "error": "none", "author": "tomerfiliba@gmail.com"}, {"index": "211", "colour": "orange", "code": "\n", "error": "none", "author": "tomerfiliba@gmail.com"}, {"index": "212", "colour": "orange", "code": "    def unlink(self):\n", "error": "none", "author": "antoine.dechaume@sogeti.com"}, {"index": "213", "colour": "orange", "code": "        \"\"\"Deletes a symbolic link\"\"\"\n", "error": "none", "author": "antoine.dechaume@sogeti.com"}, {"index": "214", "colour": "orange", "code": "        raise NotImplementedError()\n", "error": "none", "author": "antoine.dechaume@sogeti.com"}, {"index": "215", "colour": "orange", "code": "\n", "error": "none", "author": "antoine.dechaume@sogeti.com"}, {"index": "216", "colour": "orange", "code": "    def split(self):\n", "error": "none", "author": "Tomer.Filiba@emc.com"}, {"index": "217", "colour": "orange", "code": "        \"\"\"Splits the path on directory separators, yielding a list of directories, e.g,\n", "error": "none", "author": "Tomer.Filiba@emc.com"}, {"index": "218", "colour": "orange", "code": "        ``\"/var/log/messages\"`` will yield ``['var', 'log', 'messages']``.\n", "error": "none", "author": "Tomer.Filiba@emc.com"}, {"index": "219", "colour": "orange", "code": "        \"\"\"\n", "error": "none", "author": "Tomer.Filiba@emc.com"}, {"index": "220", "colour": "orange", "code": "        parts = []\n", "error": "none", "author": "Tomer.Filiba@emc.com"}, {"index": "221", "colour": "orange", "code": "        path = self\n", "error": "none", "author": "Tomer.Filiba@emc.com"}, {"index": "222", "colour": "orange", "code": "        while path != path.dirname:\n", "error": "none", "author": "Tomer.Filiba@emc.com"}, {"index": "223", "colour": "orange", "code": "            parts.append(path.basename)\n", "error": "none", "author": "Tomer.Filiba@emc.com"}, {"index": "224", "colour": "orange", "code": "            path = path.dirname\n", "error": "none", "author": "Tomer.Filiba@emc.com"}, {"index": "225", "colour": "orange", "code": "        return parts[::-1]\n", "error": "none", "author": "Tomer.Filiba@emc.com"}, {"index": "226", "colour": "orange", "code": "\n", "error": "none", "author": "Tomer.Filiba@emc.com"}, {"index": "227", "colour": "orange", "code": "    def relative_to(self, source):\n", "error": "none", "author": "Tomer.Filiba@emc.com"}, {"index": "228", "colour": "orange", "code": "        \"\"\"Computes the \"relative path\" require to get from ``source`` to ``self``. They satisfy the invariant\n", "error": "none", "author": "tomerfiliba@gmail.com"}, {"index": "229", "colour": "orange", "code": "        ``source_path + (target_path - source_path) == target_path``. For example::\n", "error": "none", "author": "tomerfiliba@gmail.com"}, {"index": "230", "colour": "orange", "code": "\n", "error": "none", "author": "Tomer.Filiba@emc.com"}, {"index": "231", "colour": "orange", "code": "            /var/log/messages - /var/log/messages = []\n", "error": "none", "author": "Tomer.Filiba@emc.com"}, {"index": "232", "colour": "orange", "code": "            /var/log/messages - /var              = [log, messages]\n", "error": "none", "author": "Tomer.Filiba@emc.com"}, {"index": "233", "colour": "orange", "code": "            /var/log/messages - /                 = [var, log, messages]\n", "error": "none", "author": "Tomer.Filiba@emc.com"}, {"index": "234", "colour": "orange", "code": "            /var/log/messages - /var/tmp          = [.., log, messages]\n", "error": "none", "author": "Tomer.Filiba@emc.com"}, {"index": "235", "colour": "orange", "code": "            /var/log/messages - /opt              = [.., var, log, messages]\n", "error": "none", "author": "Tomer.Filiba@emc.com"}, {"index": "236", "colour": "orange", "code": "            /var/log/messages - /opt/lib          = [.., .., var, log, messages]\n", "error": "none", "author": "Tomer.Filiba@emc.com"}, {"index": "237", "colour": "orange", "code": "        \"\"\"\n", "error": "none", "author": "Tomer.Filiba@emc.com"}, {"index": "238", "colour": "orange", "code": "        if isinstance(source, str):\n", "error": "none", "author": "Tomer.Filiba@emc.com"}, {"index": "239", "colour": "orange", "code": "            source = self._form(source)\n", "error": "none", "author": "Tomer.Filiba@emc.com"}, {"index": "240", "colour": "orange", "code": "        parts = self.split()\n", "error": "none", "author": "Tomer.Filiba@emc.com"}, {"index": "241", "colour": "orange", "code": "        baseparts = source.split()\n", "error": "none", "author": "Tomer.Filiba@emc.com"}, {"index": "242", "colour": "orange", "code": "        ancestors = len(list(itertools.takewhile(lambda p: p[0] == p[1], zip(parts, baseparts))))\n", "error": "none", "author": "Tomer.Filiba@emc.com"}, {"index": "243", "colour": "orange", "code": "        return RelativePath([\"..\"] * (len(baseparts) - ancestors) + parts[ancestors:])\n", "error": "none", "author": "tomerfiliba@gmail.com"}, {"index": "244", "colour": "orange", "code": "\n", "error": "none", "author": "Tomer.Filiba@emc.com"}, {"index": "245", "colour": "orange", "code": "    def __sub__(self, other):\n", "error": "none", "author": "Tomer.Filiba@emc.com"}, {"index": "246", "colour": "orange", "code": "        \"\"\"Same as ``self.relative_to(other)``\"\"\"\n", "error": "none", "author": "Tomer.Filiba@emc.com"}, {"index": "247", "colour": "orange", "code": "        return self.relative_to(other)\n", "error": "none", "author": "Tomer.Filiba@emc.com"}, {"index": "248", "colour": "orange", "code": "\n", "error": "none", "author": "Tomer.Filiba@emc.com"}, {"index": "249", "colour": "orange", "code": "\n", "error": "none", "author": "Tomer.Filiba@emc.com"}, {"index": "250", "colour": "blue", "code": "class RelativePath(object):\n", "error": "R", "author": "tomerfiliba@gmail.com"}, {"index": "251", "colour": "orange", "code": "    \"\"\"\n", "error": "none", "author": "tomerfiliba@gmail.com"}, {"index": "252", "colour": "orange", "code": "    Relative paths are the \"delta\" required to get from one path to another.\n", "error": "none", "author": "tomerfiliba@gmail.com"}, {"index": "253", "colour": "orange", "code": "    Note that relative path do not point at anything, and thus are not paths.\n", "error": "none", "author": "tomerfiliba@gmail.com"}, {"index": "254", "colour": "orange", "code": "    Therefore they are system agnostic (but closed under addition) \n", "error": "none", "author": "tomerfiliba@gmail.com"}, {"index": "255", "colour": "orange", "code": "    Paths are always absolute and point at \"something\", whether existent or not.\n", "error": "none", "author": "tomerfiliba@gmail.com"}, {"index": "256", "colour": "orange", "code": "    \n", "error": "none", "author": "tomerfiliba@gmail.com"}, {"index": "257", "colour": "orange", "code": "    Relative paths are created by subtracting paths (``Path.relative_to``)\n", "error": "none", "author": "tomerfiliba@gmail.com"}, {"index": "258", "colour": "orange", "code": "    \"\"\"\n", "error": "none", "author": "tomerfiliba@gmail.com"}, {"index": "259", "colour": "orange", "code": "    def __init__(self, parts):\n", "error": "none", "author": "tomerfiliba@gmail.com"}, {"index": "260", "colour": "orange", "code": "        self.parts = parts\n", "error": "none", "author": "tomerfiliba@gmail.com"}, {"index": "261", "colour": "orange", "code": "    def __str__(self):\n", "error": "none", "author": "tomerfiliba@gmail.com"}, {"index": "262", "colour": "orange", "code": "        return \"/\".join(self.parts)\n", "error": "none", "author": "tomerfiliba@gmail.com"}, {"index": "263", "colour": "orange", "code": "    def __iter__(self):\n", "error": "none", "author": "tomerfiliba@gmail.com"}, {"index": "264", "colour": "orange", "code": "        return iter(self.parts)\n", "error": "none", "author": "tomerfiliba@gmail.com"}, {"index": "265", "colour": "orange", "code": "    def __len__(self):\n", "error": "none", "author": "tomerfiliba@gmail.com"}, {"index": "266", "colour": "orange", "code": "        return len(self.parts)\n", "error": "none", "author": "tomerfiliba@gmail.com"}, {"index": "267", "colour": "orange", "code": "    def __getitem__(self, index):\n", "error": "none", "author": "tomerfiliba@gmail.com"}, {"index": "268", "colour": "orange", "code": "        return self.parts[index]\n", "error": "none", "author": "tomerfiliba@gmail.com"}, {"index": "269", "colour": "orange", "code": "    def __repr__(self):\n", "error": "none", "author": "tomerfiliba@gmail.com"}, {"index": "270", "colour": "orange", "code": "        return \"RelativePath(%r)\" % (self.parts,)\n", "error": "none", "author": "tomerfiliba@gmail.com"}, {"index": "271", "colour": "orange", "code": "\n", "error": "none", "author": "Tomer.Filiba@emc.com"}, {"index": "272", "colour": "orange", "code": "    def __eq__(self, other):\n", "error": "none", "author": "tomerfiliba@gmail.com"}, {"index": "273", "colour": "orange", "code": "        return str(self) == str(other)\n", "error": "none", "author": "tomerfiliba@gmail.com"}, {"index": "274", "colour": "orange", "code": "    def __ne__(self, other):\n", "error": "none", "author": "tomerfiliba@gmail.com"}, {"index": "275", "colour": "orange", "code": "        return not (self == other)\n", "error": "none", "author": "tomerfiliba@gmail.com"}, {"index": "276", "colour": "orange", "code": "    def __gt__(self, other):\n", "error": "none", "author": "tomerfiliba@gmail.com"}, {"index": "277", "colour": "orange", "code": "        return str(self) > str(other)\n", "error": "none", "author": "tomerfiliba@gmail.com"}, {"index": "278", "colour": "orange", "code": "    def __ge__(self, other):\n", "error": "none", "author": "tomerfiliba@gmail.com"}, {"index": "279", "colour": "orange", "code": "        return str(self) >= str(other)\n", "error": "none", "author": "tomerfiliba@gmail.com"}, {"index": "280", "colour": "orange", "code": "    def __lt__(self, other):\n", "error": "none", "author": "tomerfiliba@gmail.com"}, {"index": "281", "colour": "orange", "code": "        return str(self) < str(other)\n", "error": "none", "author": "tomerfiliba@gmail.com"}, {"index": "282", "colour": "orange", "code": "    def __le__(self, other):\n", "error": "none", "author": "tomerfiliba@gmail.com"}, {"index": "283", "colour": "orange", "code": "        return str(self) <= str(other)\n", "error": "none", "author": "tomerfiliba@gmail.com"}, {"index": "284", "colour": "orange", "code": "    def __hash__(self):\n", "error": "none", "author": "tomerfiliba@gmail.com"}, {"index": "285", "colour": "orange", "code": "        return hash(str(self))\n", "error": "none", "author": "tomerfiliba@gmail.com"}, {"index": "286", "colour": "orange", "code": "    def __nonzero__(self):\n", "error": "none", "author": "tomerfiliba@gmail.com"}, {"index": "287", "colour": "orange", "code": "        return bool(str(self))\n", "error": "none", "author": "tomerfiliba@gmail.com"}, {"index": "288", "colour": "orange", "code": "    __bool__ = __nonzero__\n", "error": "none", "author": "tomerfiliba@gmail.com"}, {"index": "289", "colour": "orange", "code": "    \n", "error": "none", "author": "tomerfiliba@gmail.com"}, {"index": "290", "colour": "orange", "code": "    def up(self, count = 1):\n", "error": "none", "author": "tomerfiliba@gmail.com"}, {"index": "291", "colour": "orange", "code": "        return RelativePath(self.parts[:-count])\n", "error": "none", "author": "tomerfiliba@gmail.com"}, {"index": "292", "colour": "orange", "code": "    \n", "error": "none", "author": "tomerfiliba@gmail.com"}, {"index": "293", "colour": "orange", "code": "    def __radd__(self, path):\n", "error": "none", "author": "tomerfiliba@gmail.com"}, {"index": "294", "colour": "orange", "code": "        return path.join(*self.parts)\n", "error": "none", "author": "tomerfiliba@gmail.com"}, {"index": "295", "colour": "orange", "code": "\n", "error": "none", "author": "Tomer.Filiba@emc.com"}, {"index": "296", "colour": "orange", "code": "\n", "error": "none", "author": "tomerfiliba@gmail.com"}, {"index": "297", "colour": "orange", "code": "\n", "error": "none", "author": "tomerfiliba@gmail.com"}]]}