{"path": "/home/asumal/git/cs410/plumbum/plumbum/machines/paramiko_machine.py", "lines": [[{"error": "C", "line": "1", "code": "import logging\n", "colour": "blue", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "2", "code": "import errno\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "3", "code": "import socket\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "4", "code": "from plumbum.machines.remote import BaseRemoteMachine\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "5", "code": "from plumbum.machines.session import ShellSession\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "6", "code": "from plumbum.lib import _setdoc, six\n", "colour": "black", "author": "tomerfiliba@gmail.com"}, {"error": "none", "line": "7", "code": "from plumbum.path.local import LocalPath\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "8", "code": "from plumbum.path.remote import RemotePath\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "9", "code": "try:\n", "colour": "black", "author": "tomerfiliba@gmail.com"}, {"error": "none", "line": "10", "code": "    # Sigh... we need to gracefully-import paramiko for Sphinx builds, etc\n", "colour": "black", "author": "tomerfiliba@gmail.com"}, {"error": "F", "line": "11", "code": "    import paramiko\n", "colour": "red", "author": "tomerfiliba@gmail.com"}, {"error": "none", "line": "12", "code": "except ImportError:\n", "colour": "black", "author": "tomerfiliba@gmail.com"}, {"error": "R", "line": "13", "code": "    class paramiko(object):\n", "colour": "green", "author": "tomerfiliba@gmail.com"}, {"error": "none", "line": "14", "code": "        def __nonzero__(self):\n", "colour": "black", "author": "tomerfiliba@gmail.com"}, {"error": "none", "line": "15", "code": "            return False\n", "colour": "black", "author": "tomerfiliba@gmail.com"}, {"error": "none", "line": "16", "code": "        __bool__ = __nonzero__\n", "colour": "black", "author": "tomerfiliba@gmail.com"}, {"error": "none", "line": "17", "code": "        def __getattr__(self, name):\n", "colour": "black", "author": "tomerfiliba@gmail.com"}, {"error": "none", "line": "18", "code": "            raise ImportError(\"No module named paramiko\")\n", "colour": "black", "author": "tomerfiliba@gmail.com"}, {"error": "C", "line": "19", "code": "    paramiko = paramiko()\n", "colour": "blue", "author": "tomerfiliba@gmail.com"}, {"error": "none", "line": "20", "code": "\n", "colour": "black", "author": "tomerfiliba@gmail.com"}, {"error": "none", "line": "21", "code": "\n", "colour": "black", "author": "tomerfiliba@gmail.com"}, {"error": "C", "line": "22", "code": "logger = logging.getLogger(\"plumbum.paramiko\")\n", "colour": "blue", "author": "tomerfiliba@gmail.com"}, {"error": "none", "line": "23", "code": "\n", "colour": "black", "author": "tomerfiliba@gmail.com"}, {"error": "R", "line": "24", "code": "class ParamikoPopen(object):\n", "colour": "green", "author": "tomerfiliba@gmail.com"}, {"error": "R", "line": "25", "code": "    def __init__(self, argv, stdin, stdout, stderr, encoding, stdin_file = None,\n", "colour": "green", "author": "tomer.filiba@emc.com"}, {"error": "C", "line": "26", "code": "            stdout_file = None, stderr_file = None):\n", "colour": "blue", "author": "tomerfiliba@gmail.com"}, {"error": "none", "line": "27", "code": "        self.argv = argv\n", "colour": "black", "author": "tomerfiliba@gmail.com"}, {"error": "none", "line": "28", "code": "        self.channel = stdout.channel\n", "colour": "black", "author": "tomerfiliba@gmail.com"}, {"error": "none", "line": "29", "code": "        self.stdin = stdin\n", "colour": "black", "author": "tomerfiliba@gmail.com"}, {"error": "none", "line": "30", "code": "        self.stdout = stdout\n", "colour": "black", "author": "tomerfiliba@gmail.com"}, {"error": "none", "line": "31", "code": "        self.stderr = stderr\n", "colour": "black", "author": "tomerfiliba@gmail.com"}, {"error": "none", "line": "32", "code": "        self.encoding = encoding\n", "colour": "black", "author": "tomerfiliba@gmail.com"}, {"error": "none", "line": "33", "code": "        self.returncode = None\n", "colour": "black", "author": "tomerfiliba@gmail.com"}, {"error": "none", "line": "34", "code": "        self.pid = None\n", "colour": "black", "author": "tomerfiliba@gmail.com"}, {"error": "none", "line": "35", "code": "        self.stdin_file = stdin_file\n", "colour": "black", "author": "tomerfiliba@gmail.com"}, {"error": "none", "line": "36", "code": "        self.stdout_file = stdout_file\n", "colour": "black", "author": "tomerfiliba@gmail.com"}, {"error": "none", "line": "37", "code": "        self.stderr_file = stderr_file\n", "colour": "black", "author": "tomerfiliba@gmail.com"}, {"error": "C", "line": "38", "code": "    def poll(self):\n", "colour": "blue", "author": "tomerfiliba@gmail.com"}, {"error": "none", "line": "39", "code": "        if self.returncode is None:\n", "colour": "black", "author": "tomerfiliba@gmail.com"}, {"error": "none", "line": "40", "code": "            if self.channel.exit_status_ready():\n", "colour": "black", "author": "tomerfiliba@gmail.com"}, {"error": "none", "line": "41", "code": "                return self.wait()\n", "colour": "black", "author": "tomerfiliba@gmail.com"}, {"error": "none", "line": "42", "code": "        return self.returncode\n", "colour": "black", "author": "tomerfiliba@gmail.com"}, {"error": "C", "line": "43", "code": "    def wait(self):\n", "colour": "blue", "author": "tomerfiliba@gmail.com"}, {"error": "none", "line": "44", "code": "        if self.returncode is None:\n", "colour": "black", "author": "tomerfiliba@gmail.com"}, {"error": "none", "line": "45", "code": "            self.channel.recv_exit_status()\n", "colour": "black", "author": "tomerfiliba@gmail.com"}, {"error": "none", "line": "46", "code": "            self.returncode = self.channel.exit_status\n", "colour": "black", "author": "tomerfiliba@gmail.com"}, {"error": "none", "line": "47", "code": "            self.close()\n", "colour": "black", "author": "tomerfiliba@gmail.com"}, {"error": "none", "line": "48", "code": "        return self.returncode\n", "colour": "black", "author": "tomerfiliba@gmail.com"}, {"error": "C", "line": "49", "code": "    def close(self):\n", "colour": "blue", "author": "tomerfiliba@gmail.com"}, {"error": "none", "line": "50", "code": "        self.channel.shutdown_read()\n", "colour": "black", "author": "tomerfiliba@gmail.com"}, {"error": "none", "line": "51", "code": "        self.channel.shutdown_write()\n", "colour": "black", "author": "tomerfiliba@gmail.com"}, {"error": "none", "line": "52", "code": "        self.channel.close()\n", "colour": "black", "author": "tomerfiliba@gmail.com"}, {"error": "R", "line": "53", "code": "    def kill(self):\n", "colour": "green", "author": "tomerfiliba@gmail.com"}, {"error": "none", "line": "54", "code": "        # possible way to obtain pid:\n", "colour": "black", "author": "tomerfiliba@gmail.com"}, {"error": "none", "line": "55", "code": "        # \"(cmd ; echo $?) & echo ?!\"\n", "colour": "black", "author": "tomerfiliba@gmail.com"}, {"error": "none", "line": "56", "code": "        # and then client.exec_command(\"kill -9 %s\" % (pid,))\n", "colour": "black", "author": "tomerfiliba@gmail.com"}, {"error": "C", "line": "57", "code": "        raise EnvironmentError(\"Cannot kill remote processes, we don't have their PIDs\")\n", "colour": "blue", "author": "tomerfiliba@gmail.com"}, {"error": "none", "line": "58", "code": "    terminate = kill\n", "colour": "black", "author": "tomerfiliba@gmail.com"}, {"error": "C", "line": "59", "code": "    def send_signal(self, sig):\n", "colour": "blue", "author": "tomerfiliba@gmail.com"}, {"error": "none", "line": "60", "code": "        raise NotImplementedError()\n", "colour": "black", "author": "tomerfiliba@gmail.com"}, {"error": "C", "line": "61", "code": "    def communicate(self):\n", "colour": "blue", "author": "tomerfiliba@gmail.com"}, {"error": "none", "line": "62", "code": "        stdout = []\n", "colour": "black", "author": "tomerfiliba@gmail.com"}, {"error": "none", "line": "63", "code": "        stderr = []\n", "colour": "black", "author": "tomerfiliba@gmail.com"}, {"error": "none", "line": "64", "code": "        infile = self.stdin_file\n", "colour": "black", "author": "tomerfiliba@gmail.com"}, {"error": "C", "line": "65", "code": "        sources = [(\"1\", stdout, self.stdout, self.stdout_file), (\"2\", stderr, self.stderr, self.stderr_file)]\n", "colour": "blue", "author": "tomerfiliba@gmail.com"}, {"error": "none", "line": "66", "code": "        i = 0\n", "colour": "black", "author": "tomerfiliba@gmail.com"}, {"error": "none", "line": "67", "code": "        while sources:\n", "colour": "black", "author": "tomerfiliba@gmail.com"}, {"error": "none", "line": "68", "code": "            if infile:\n", "colour": "black", "author": "tomerfiliba@gmail.com"}, {"error": "none", "line": "69", "code": "                try:\n", "colour": "black", "author": "tomerfiliba@gmail.com"}, {"error": "none", "line": "70", "code": "                    line = infile.readline()\n", "colour": "black", "author": "tomerfiliba@gmail.com"}, {"error": "none", "line": "71", "code": "                except (ValueError, IOError):\n", "colour": "black", "author": "tomerfiliba@gmail.com"}, {"error": "none", "line": "72", "code": "                    line = None\n", "colour": "black", "author": "tomerfiliba@gmail.com"}, {"error": "none", "line": "73", "code": "                logger.debug(\"communicate: %r\", line)\n", "colour": "black", "author": "tomerfiliba@gmail.com"}, {"error": "none", "line": "74", "code": "                if not line:\n", "colour": "black", "author": "tomerfiliba@gmail.com"}, {"error": "none", "line": "75", "code": "                    infile.close()\n", "colour": "black", "author": "tomerfiliba@gmail.com"}, {"error": "none", "line": "76", "code": "                    infile = None\n", "colour": "black", "author": "tomerfiliba@gmail.com"}, {"error": "none", "line": "77", "code": "                    self.stdin.close()\n", "colour": "black", "author": "tomerfiliba@gmail.com"}, {"error": "none", "line": "78", "code": "                else:\n", "colour": "black", "author": "tomerfiliba@gmail.com"}, {"error": "none", "line": "79", "code": "                    self.stdin.write(line)\n", "colour": "black", "author": "tomerfiliba@gmail.com"}, {"error": "none", "line": "80", "code": "                    self.stdin.flush()\n", "colour": "black", "author": "tomerfiliba@gmail.com"}, {"error": "none", "line": "81", "code": "\n", "colour": "black", "author": "tomerfiliba@gmail.com"}, {"error": "none", "line": "82", "code": "            i = (i + 1) % len(sources)\n", "colour": "black", "author": "tomerfiliba@gmail.com"}, {"error": "W", "line": "83", "code": "            name, coll, pipe, outfile = sources[i]\n", "colour": "purple", "author": "tomerfiliba@gmail.com"}, {"error": "none", "line": "84", "code": "            line = pipe.readline()\n", "colour": "black", "author": "tomerfiliba@gmail.com"}, {"error": "none", "line": "85", "code": "            # logger.debug(\"%s> %r\", name, line)\n", "colour": "black", "author": "tomer.filiba@emc.com"}, {"error": "none", "line": "86", "code": "            if not line:\n", "colour": "black", "author": "tomerfiliba@gmail.com"}, {"error": "none", "line": "87", "code": "                del sources[i]\n", "colour": "black", "author": "tomerfiliba@gmail.com"}, {"error": "none", "line": "88", "code": "            elif outfile:\n", "colour": "black", "author": "tomerfiliba@gmail.com"}, {"error": "none", "line": "89", "code": "                outfile.write(line)\n", "colour": "black", "author": "tomerfiliba@gmail.com"}, {"error": "none", "line": "90", "code": "                outfile.flush()\n", "colour": "black", "author": "tomerfiliba@gmail.com"}, {"error": "none", "line": "91", "code": "            else:\n", "colour": "black", "author": "tomerfiliba@gmail.com"}, {"error": "none", "line": "92", "code": "                coll.append(line)\n", "colour": "black", "author": "tomerfiliba@gmail.com"}, {"error": "none", "line": "93", "code": "        self.wait()\n", "colour": "black", "author": "tomerfiliba@gmail.com"}, {"error": "none", "line": "94", "code": "        stdout = six.b(\"\").join(six.b(s) for s in stdout)\n", "colour": "black", "author": "tomer.filiba@emc.com"}, {"error": "none", "line": "95", "code": "        stderr = six.b(\"\").join(six.b(s) for s in stderr)\n", "colour": "black", "author": "tomer.filiba@emc.com"}, {"error": "none", "line": "96", "code": "        return stdout, stderr\n", "colour": "black", "author": "tomerfiliba@gmail.com"}, {"error": "none", "line": "97", "code": "\n", "colour": "black", "author": "tomerfiliba@gmail.com"}, {"error": "none", "line": "98", "code": "\n", "colour": "black", "author": "tomerfiliba@gmail.com"}, {"error": "none", "line": "99", "code": "class ParamikoMachine(BaseRemoteMachine):\n", "colour": "black", "author": "tomerfiliba@gmail.com"}, {"error": "none", "line": "100", "code": "    \"\"\"\n", "colour": "black", "author": "tomerfiliba@gmail.com"}, {"error": "C", "line": "101", "code": "    An implementation of :class:`remote machine <plumbum.machines.remote.BaseRemoteMachine>`\n", "colour": "blue", "author": "Tomer.Filiba@emc.com"}, {"error": "C", "line": "102", "code": "    over Paramiko (a Python implementation of openSSH2 client/server). Invoking a remote command\n", "colour": "blue", "author": "tomer.filiba@emc.com"}, {"error": "none", "line": "103", "code": "    translates to invoking it over SSH ::\n", "colour": "black", "author": "tomerfiliba@gmail.com"}, {"error": "none", "line": "104", "code": "\n", "colour": "black", "author": "tomerfiliba@gmail.com"}, {"error": "none", "line": "105", "code": "        with ParamikoMachine(\"yourhostname\") as rem:\n", "colour": "black", "author": "tomerfiliba@gmail.com"}, {"error": "none", "line": "106", "code": "            r_ls = rem[\"ls\"]\n", "colour": "black", "author": "tomerfiliba@gmail.com"}, {"error": "none", "line": "107", "code": "            # r_ls is the remote `ls`\n", "colour": "black", "author": "tomerfiliba@gmail.com"}, {"error": "C", "line": "108", "code": "            # executing r_ls() is equivalent to `ssh yourhostname ls`, only without\n", "colour": "blue", "author": "tomer.filiba@emc.com"}, {"error": "none", "line": "109", "code": "            # spawning a new ssh client\n", "colour": "black", "author": "tomerfiliba@gmail.com"}, {"error": "none", "line": "110", "code": "\n", "colour": "black", "author": "tomerfiliba@gmail.com"}, {"error": "none", "line": "111", "code": "    :param host: the host name to connect to (SSH server)\n", "colour": "black", "author": "tomerfiliba@gmail.com"}, {"error": "none", "line": "112", "code": "\n", "colour": "black", "author": "tomerfiliba@gmail.com"}, {"error": "none", "line": "113", "code": "    :param user: the user to connect as (if ``None``, the default will be used)\n", "colour": "black", "author": "tomerfiliba@gmail.com"}, {"error": "none", "line": "114", "code": "\n", "colour": "black", "author": "tomerfiliba@gmail.com"}, {"error": "none", "line": "115", "code": "    :param port: the server's port (if ``None``, the default will be used)\n", "colour": "black", "author": "tomerfiliba@gmail.com"}, {"error": "none", "line": "116", "code": "\n", "colour": "black", "author": "tomerfiliba@gmail.com"}, {"error": "C", "line": "117", "code": "    :param password: the user's password (if a password-based authentication is to be performed)\n", "colour": "blue", "author": "tomerfiliba@gmail.com"}, {"error": "none", "line": "118", "code": "                     (if ``None``, key-based authentication will be used)\n", "colour": "black", "author": "tomerfiliba@gmail.com"}, {"error": "none", "line": "119", "code": "\n", "colour": "black", "author": "tomerfiliba@gmail.com"}, {"error": "C", "line": "120", "code": "    :param keyfile: the path to the identity file (if ``None``, the default will be used)\n", "colour": "blue", "author": "tomerfiliba@gmail.com"}, {"error": "none", "line": "121", "code": "\n", "colour": "black", "author": "tomer.filiba@emc.com"}, {"error": "C", "line": "122", "code": "    :param load_system_host_keys: whether or not to load the system's host keys (from ``/etc/ssh``\n", "colour": "blue", "author": "tomer.filiba@emc.com"}, {"error": "C", "line": "123", "code": "                                  and ``~/.ssh``). The default is ``True``, which means Paramiko\n", "colour": "blue", "author": "tomerfiliba@gmail.com"}, {"error": "C", "line": "124", "code": "                                  behaves much like the ``ssh`` command-line client\n", "colour": "blue", "author": "tomerfiliba@gmail.com"}, {"error": "none", "line": "125", "code": "\n", "colour": "black", "author": "tomerfiliba@gmail.com"}, {"error": "C", "line": "126", "code": "    :param missing_host_policy: the value passed to the underlying ``set_missing_host_key_policy``\n", "colour": "blue", "author": "tomerfiliba@gmail.com"}, {"error": "C", "line": "127", "code": "                                of the client. The default is ``None``, which means\n", "colour": "blue", "author": "tomerfiliba@gmail.com"}, {"error": "C", "line": "128", "code": "                                ``set_missing_host_key_policy`` is not invoked and paramiko's\n", "colour": "blue", "author": "tomerfiliba@gmail.com"}, {"error": "none", "line": "129", "code": "                                default behavior (reject) is employed\n", "colour": "black", "author": "tomerfiliba@gmail.com"}, {"error": "none", "line": "130", "code": "\n", "colour": "black", "author": "tomerfiliba@gmail.com"}, {"error": "none", "line": "131", "code": "    :param encoding: the remote machine's encoding (defaults to UTF8)\n", "colour": "black", "author": "tomerfiliba@gmail.com"}, {"error": "none", "line": "132", "code": "\n", "colour": "black", "author": "vitty@redhat.com"}, {"error": "none", "line": "133", "code": "    :param look_for_keys: set to False to disable searching for discoverable\n", "colour": "black", "author": "vitty@redhat.com"}, {"error": "none", "line": "134", "code": "                          private key files in ``~/.ssh``\n", "colour": "black", "author": "vitty@redhat.com"}, {"error": "none", "line": "135", "code": "\n", "colour": "black", "author": "vitty@redhat.com"}, {"error": "none", "line": "136", "code": "    :param connect_timeout: timeout for TCP connection\n", "colour": "black", "author": "tomerfiliba@gmail.com"}, {"error": "none", "line": "137", "code": "    \"\"\"\n", "colour": "black", "author": "vitty@redhat.com"}, {"error": "R", "line": "138", "code": "    def __init__(self, host, user = None, port = None, password = None, keyfile = None,\n", "colour": "green", "author": "tomer.filiba@emc.com"}, {"error": "C", "line": "139", "code": "            load_system_host_keys = True, missing_host_policy = None, encoding = \"utf8\",\n", "colour": "blue", "author": "vitty@redhat.com"}, {"error": "C", "line": "140", "code": "            look_for_keys = None, connect_timeout = None):\n", "colour": "blue", "author": "tomerfiliba@gmail.com"}, {"error": "none", "line": "141", "code": "        self.host = host\n", "colour": "black", "author": "tomerfiliba@gmail.com"}, {"error": "none", "line": "142", "code": "        kwargs = {}\n", "colour": "black", "author": "itai.in@gmail.com"}, {"error": "none", "line": "143", "code": "        if user:\n", "colour": "black", "author": "tomerfiliba@gmail.com"}, {"error": "none", "line": "144", "code": "            self._fqhost = \"%s@%s\" % (user, host)\n", "colour": "black", "author": "tomerfiliba@gmail.com"}, {"error": "none", "line": "145", "code": "            kwargs['username'] = user\n", "colour": "black", "author": "itai.in@gmail.com"}, {"error": "none", "line": "146", "code": "        else:\n", "colour": "black", "author": "tomerfiliba@gmail.com"}, {"error": "none", "line": "147", "code": "            self._fqhost = host\n", "colour": "black", "author": "tomerfiliba@gmail.com"}, {"error": "E", "line": "148", "code": "        self._client = paramiko.SSHClient()\n", "colour": "yellow", "author": "tomerfiliba@gmail.com"}, {"error": "none", "line": "149", "code": "        if load_system_host_keys:\n", "colour": "black", "author": "tomerfiliba@gmail.com"}, {"error": "none", "line": "150", "code": "            self._client.load_system_host_keys()\n", "colour": "black", "author": "tomerfiliba@gmail.com"}, {"error": "none", "line": "151", "code": "        if port is not None:\n", "colour": "black", "author": "tomerfiliba@gmail.com"}, {"error": "none", "line": "152", "code": "            kwargs[\"port\"] = port\n", "colour": "black", "author": "tomerfiliba@gmail.com"}, {"error": "none", "line": "153", "code": "        if keyfile is not None:\n", "colour": "black", "author": "tomerfiliba@gmail.com"}, {"error": "none", "line": "154", "code": "            kwargs[\"key_filename\"] = keyfile\n", "colour": "black", "author": "tomerfiliba@gmail.com"}, {"error": "none", "line": "155", "code": "        if password is not None:\n", "colour": "black", "author": "tomerfiliba@gmail.com"}, {"error": "none", "line": "156", "code": "            kwargs[\"password\"] = password\n", "colour": "black", "author": "tomerfiliba@gmail.com"}, {"error": "none", "line": "157", "code": "        if missing_host_policy is not None:\n", "colour": "black", "author": "tomerfiliba@gmail.com"}, {"error": "none", "line": "158", "code": "            self._client.set_missing_host_key_policy(missing_host_policy)\n", "colour": "black", "author": "tomerfiliba@gmail.com"}, {"error": "none", "line": "159", "code": "        if look_for_keys is not None:\n", "colour": "black", "author": "vitty@redhat.com"}, {"error": "none", "line": "160", "code": "            kwargs[\"look_for_keys\"] = look_for_keys\n", "colour": "black", "author": "vitty@redhat.com"}, {"error": "none", "line": "161", "code": "        if connect_timeout is not None:\n", "colour": "black", "author": "tomerfiliba@gmail.com"}, {"error": "none", "line": "162", "code": "            kwargs[\"timeout\"] = connect_timeout\n", "colour": "black", "author": "tomerfiliba@gmail.com"}, {"error": "W", "line": "163", "code": "        self._client.connect(host, **kwargs)\n", "colour": "purple", "author": "tomerfiliba@gmail.com"}, {"error": "none", "line": "164", "code": "        self._sftp = None\n", "colour": "black", "author": "tomerfiliba@gmail.com"}, {"error": "none", "line": "165", "code": "        BaseRemoteMachine.__init__(self, encoding, connect_timeout)\n", "colour": "black", "author": "tomerfiliba@gmail.com"}, {"error": "none", "line": "166", "code": "\n", "colour": "black", "author": "tomerfiliba@gmail.com"}, {"error": "none", "line": "167", "code": "    def __str__(self):\n", "colour": "black", "author": "tomerfiliba@gmail.com"}, {"error": "none", "line": "168", "code": "        return \"paramiko://%s\" % (self._fqhost,)\n", "colour": "black", "author": "tomerfiliba@gmail.com"}, {"error": "none", "line": "169", "code": "\n", "colour": "black", "author": "tomerfiliba@gmail.com"}, {"error": "none", "line": "170", "code": "    def close(self):\n", "colour": "black", "author": "tomerfiliba@gmail.com"}, {"error": "none", "line": "171", "code": "        BaseRemoteMachine.close(self)\n", "colour": "black", "author": "tomerfiliba@gmail.com"}, {"error": "none", "line": "172", "code": "        self._client.close()\n", "colour": "black", "author": "tomerfiliba@gmail.com"}, {"error": "none", "line": "173", "code": "\n", "colour": "black", "author": "tomerfiliba@gmail.com"}, {"error": "none", "line": "174", "code": "    @property\n", "colour": "black", "author": "tomerfiliba@gmail.com"}, {"error": "none", "line": "175", "code": "    def sftp(self):\n", "colour": "black", "author": "tomerfiliba@gmail.com"}, {"error": "none", "line": "176", "code": "        \"\"\"\n", "colour": "black", "author": "tomerfiliba@gmail.com"}, {"error": "C", "line": "177", "code": "        Returns an SFTP client on top of the current SSH connection; it can be used to manipulate\n", "colour": "blue", "author": "tomerfiliba@gmail.com"}, {"error": "none", "line": "178", "code": "        files directly, much like an interactive FTP/SFTP session\n", "colour": "black", "author": "tomerfiliba@gmail.com"}, {"error": "none", "line": "179", "code": "        \"\"\"\n", "colour": "black", "author": "tomerfiliba@gmail.com"}, {"error": "none", "line": "180", "code": "        if not self._sftp:\n", "colour": "black", "author": "tomerfiliba@gmail.com"}, {"error": "none", "line": "181", "code": "            self._sftp = self._client.open_sftp()\n", "colour": "black", "author": "tomerfiliba@gmail.com"}, {"error": "none", "line": "182", "code": "        return self._sftp\n", "colour": "black", "author": "tomerfiliba@gmail.com"}, {"error": "none", "line": "183", "code": "\n", "colour": "black", "author": "tomerfiliba@gmail.com"}, {"error": "none", "line": "184", "code": "    @_setdoc(BaseRemoteMachine)\n", "colour": "black", "author": "tomerfiliba@gmail.com"}, {"error": "W", "line": "185", "code": "    def session(self, isatty = False, term = \"vt100\", width = 80, height = 24, new_session = False):\n", "colour": "purple", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "186", "code": "        # new_session is ignored for ParamikoMachine\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "187", "code": "        chan = self._client.get_transport().open_session()\n", "colour": "black", "author": "tomerfiliba@gmail.com"}, {"error": "none", "line": "188", "code": "        if isatty:\n", "colour": "black", "author": "tomerfiliba@gmail.com"}, {"error": "none", "line": "189", "code": "            chan.get_pty(term, width, height)\n", "colour": "black", "author": "tomerfiliba@gmail.com"}, {"error": "none", "line": "190", "code": "            chan.set_combine_stderr()\n", "colour": "black", "author": "tomerfiliba@gmail.com"}, {"error": "none", "line": "191", "code": "        chan.invoke_shell()\n", "colour": "black", "author": "tomerfiliba@gmail.com"}, {"error": "none", "line": "192", "code": "        stdin = chan.makefile('wb', -1)\n", "colour": "black", "author": "tomerfiliba@gmail.com"}, {"error": "none", "line": "193", "code": "        stdout = chan.makefile('rb', -1)\n", "colour": "black", "author": "tomerfiliba@gmail.com"}, {"error": "none", "line": "194", "code": "        stderr = chan.makefile_stderr('rb', -1)\n", "colour": "black", "author": "tomerfiliba@gmail.com"}, {"error": "none", "line": "195", "code": "        proc = ParamikoPopen([\"<shell>\"], stdin, stdout, stderr, self.encoding)\n", "colour": "black", "author": "tomerfiliba@gmail.com"}, {"error": "none", "line": "196", "code": "        return ShellSession(proc, self.encoding, isatty)\n", "colour": "black", "author": "tomerfiliba@gmail.com"}, {"error": "none", "line": "197", "code": "\n", "colour": "black", "author": "tomerfiliba@gmail.com"}, {"error": "none", "line": "198", "code": "    @_setdoc(BaseRemoteMachine)\n", "colour": "black", "author": "tomerfiliba@gmail.com"}, {"error": "W", "line": "199", "code": "    def popen(self, args, stdin = None, stdout = None, stderr = None, new_session = False):\n", "colour": "purple", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "200", "code": "        # new_session is ignored for ParamikoMachine\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "201", "code": "        argv = []\n", "colour": "black", "author": "tomerfiliba@gmail.com"}, {"error": "none", "line": "202", "code": "        envdelta = self.env.getdelta()\n", "colour": "black", "author": "tomerfiliba@gmail.com"}, {"error": "none", "line": "203", "code": "        argv.extend([\"cd\", str(self.cwd), \"&&\"])\n", "colour": "black", "author": "tomerfiliba@gmail.com"}, {"error": "none", "line": "204", "code": "        if envdelta:\n", "colour": "black", "author": "tomerfiliba@gmail.com"}, {"error": "none", "line": "205", "code": "            argv.append(\"env\")\n", "colour": "black", "author": "tomerfiliba@gmail.com"}, {"error": "none", "line": "206", "code": "            argv.extend(\"%s=%s\" % (k, v) for k, v in envdelta.items())\n", "colour": "black", "author": "tomerfiliba@gmail.com"}, {"error": "none", "line": "207", "code": "        argv.extend(args.formulate())\n", "colour": "black", "author": "tomerfiliba@gmail.com"}, {"error": "none", "line": "208", "code": "        cmdline = \" \".join(argv)\n", "colour": "black", "author": "tomerfiliba@gmail.com"}, {"error": "none", "line": "209", "code": "        logger.debug(cmdline)\n", "colour": "black", "author": "tomerfiliba@gmail.com"}, {"error": "C", "line": "210", "code": "        si, so, se = self._client.exec_command(cmdline, 1)\n", "colour": "blue", "author": "tomerfiliba@gmail.com"}, {"error": "C", "line": "211", "code": "        return ParamikoPopen(argv, si, so, se, self.encoding, stdin_file = stdin,\n", "colour": "blue", "author": "tomer.filiba@emc.com"}, {"error": "C", "line": "212", "code": "            stdout_file = stdout, stderr_file = stderr)\n", "colour": "blue", "author": "tomer.filiba@emc.com"}, {"error": "none", "line": "213", "code": "\n", "colour": "black", "author": "tomerfiliba@gmail.com"}, {"error": "none", "line": "214", "code": "    @_setdoc(BaseRemoteMachine)\n", "colour": "black", "author": "tomerfiliba@gmail.com"}, {"error": "none", "line": "215", "code": "    def download(self, src, dst):\n", "colour": "black", "author": "tomerfiliba@gmail.com"}, {"error": "none", "line": "216", "code": "        if isinstance(src, LocalPath):\n", "colour": "black", "author": "tomerfiliba@gmail.com"}, {"error": "none", "line": "217", "code": "            raise TypeError(\"src of download cannot be %r\" % (src,))\n", "colour": "black", "author": "tomerfiliba@gmail.com"}, {"error": "none", "line": "218", "code": "        if isinstance(src, RemotePath) and src.remote != self:\n", "colour": "black", "author": "tomerfiliba@gmail.com"}, {"error": "C", "line": "219", "code": "            raise TypeError(\"src %r points to a different remote machine\" % (src,))\n", "colour": "blue", "author": "tomerfiliba@gmail.com"}, {"error": "none", "line": "220", "code": "        if isinstance(dst, RemotePath):\n", "colour": "black", "author": "tomerfiliba@gmail.com"}, {"error": "none", "line": "221", "code": "            raise TypeError(\"dst of download cannot be %r\" % (dst,))\n", "colour": "black", "author": "tomerfiliba@gmail.com"}, {"error": "C", "line": "222", "code": "        return self._download(src if isinstance(src, RemotePath) else self.path(src),\n", "colour": "blue", "author": "tomerfiliba@gmail.com"}, {"error": "C", "line": "223", "code": "            dst if isinstance(dst, LocalPath) else LocalPath(dst))\n", "colour": "blue", "author": "tomer.filiba@emc.com"}, {"error": "none", "line": "224", "code": "\n", "colour": "black", "author": "tomerfiliba@gmail.com"}, {"error": "C", "line": "225", "code": "    def _download(self, src, dst):\n", "colour": "blue", "author": "tomerfiliba@gmail.com"}, {"error": "none", "line": "226", "code": "        if src.isdir():\n", "colour": "black", "author": "tomerfiliba@gmail.com"}, {"error": "none", "line": "227", "code": "            if not dst.exists():\n", "colour": "black", "author": "tomerfiliba@gmail.com"}, {"error": "none", "line": "228", "code": "                self.sftp.mkdir(str(dst))\n", "colour": "black", "author": "tomerfiliba@gmail.com"}, {"error": "C", "line": "229", "code": "            for fn in src:\n", "colour": "blue", "author": "tomerfiliba@gmail.com"}, {"error": "none", "line": "230", "code": "                self._download(fn, dst / fn.basename)\n", "colour": "black", "author": "tomerfiliba@gmail.com"}, {"error": "none", "line": "231", "code": "        elif dst.isdir():\n", "colour": "black", "author": "tomerfiliba@gmail.com"}, {"error": "none", "line": "232", "code": "            self.sftp.get(str(src), str(dst / src.basename))\n", "colour": "black", "author": "tomerfiliba@gmail.com"}, {"error": "none", "line": "233", "code": "        else:\n", "colour": "black", "author": "tomerfiliba@gmail.com"}, {"error": "none", "line": "234", "code": "            self.sftp.get(str(src), str(dst))\n", "colour": "black", "author": "tomerfiliba@gmail.com"}, {"error": "none", "line": "235", "code": "\n", "colour": "black", "author": "tomerfiliba@gmail.com"}, {"error": "none", "line": "236", "code": "    @_setdoc(BaseRemoteMachine)\n", "colour": "black", "author": "tomerfiliba@gmail.com"}, {"error": "none", "line": "237", "code": "    def upload(self, src, dst):\n", "colour": "black", "author": "tomerfiliba@gmail.com"}, {"error": "none", "line": "238", "code": "        if isinstance(src, RemotePath):\n", "colour": "black", "author": "tomerfiliba@gmail.com"}, {"error": "none", "line": "239", "code": "            raise TypeError(\"src of upload cannot be %r\" % (src,))\n", "colour": "black", "author": "tomerfiliba@gmail.com"}, {"error": "none", "line": "240", "code": "        if isinstance(dst, LocalPath):\n", "colour": "black", "author": "tomerfiliba@gmail.com"}, {"error": "none", "line": "241", "code": "            raise TypeError(\"dst of upload cannot be %r\" % (dst,))\n", "colour": "black", "author": "tomerfiliba@gmail.com"}, {"error": "none", "line": "242", "code": "        if isinstance(dst, RemotePath) and dst.remote != self:\n", "colour": "black", "author": "tomerfiliba@gmail.com"}, {"error": "C", "line": "243", "code": "            raise TypeError(\"dst %r points to a different remote machine\" % (dst,))\n", "colour": "blue", "author": "tomerfiliba@gmail.com"}, {"error": "C", "line": "244", "code": "        return self._upload(src if isinstance(src, LocalPath) else LocalPath(src),\n", "colour": "blue", "author": "tomer.filiba@emc.com"}, {"error": "C", "line": "245", "code": "            dst if isinstance(dst, RemotePath) else self.path(dst))\n", "colour": "blue", "author": "tomerfiliba@gmail.com"}, {"error": "none", "line": "246", "code": "\n", "colour": "black", "author": "tomerfiliba@gmail.com"}, {"error": "C", "line": "247", "code": "    def _upload(self, src, dst):\n", "colour": "blue", "author": "tomerfiliba@gmail.com"}, {"error": "none", "line": "248", "code": "        if src.isdir():\n", "colour": "black", "author": "tomerfiliba@gmail.com"}, {"error": "none", "line": "249", "code": "            if not dst.exists():\n", "colour": "black", "author": "tomerfiliba@gmail.com"}, {"error": "none", "line": "250", "code": "                self.sftp.mkdir(str(dst))\n", "colour": "black", "author": "tomerfiliba@gmail.com"}, {"error": "C", "line": "251", "code": "            for fn in src:\n", "colour": "blue", "author": "tomerfiliba@gmail.com"}, {"error": "none", "line": "252", "code": "                self._upload(fn, dst / fn.basename)\n", "colour": "black", "author": "tomerfiliba@gmail.com"}, {"error": "none", "line": "253", "code": "        elif dst.isdir():\n", "colour": "black", "author": "tomerfiliba@gmail.com"}, {"error": "none", "line": "254", "code": "            self.sftp.put(str(src), str(dst / src.basename))\n", "colour": "black", "author": "tomerfiliba@gmail.com"}, {"error": "none", "line": "255", "code": "        else:\n", "colour": "black", "author": "tomerfiliba@gmail.com"}, {"error": "none", "line": "256", "code": "            self.sftp.put(str(src), str(dst))\n", "colour": "black", "author": "tomerfiliba@gmail.com"}, {"error": "none", "line": "257", "code": "\n", "colour": "black", "author": "tomerfiliba@gmail.com"}, {"error": "C", "line": "258", "code": "    def connect_sock(self, dport, dhost = \"localhost\", ipv6 = False):\n", "colour": "blue", "author": "tomerfiliba@gmail.com"}, {"error": "C", "line": "259", "code": "        \"\"\"Returns a Paramiko ``Channel``, connected to dhost:dport on the remote machine.\n", "colour": "blue", "author": "tomerfiliba@gmail.com"}, {"error": "C", "line": "260", "code": "        The ``Channel`` behaves like a regular socket; you can ``send`` and ``recv`` on it\n", "colour": "blue", "author": "tomerfiliba@gmail.com"}, {"error": "none", "line": "261", "code": "        and the data will pass encrypted over SSH. Usage::\n", "colour": "black", "author": "tomerfiliba@gmail.com"}, {"error": "none", "line": "262", "code": "\n", "colour": "black", "author": "tomer.filiba@emc.com"}, {"error": "none", "line": "263", "code": "            mach = ParamikoMachine(\"myhost\")\n", "colour": "black", "author": "tomerfiliba@gmail.com"}, {"error": "none", "line": "264", "code": "            sock = mach.connect_sock(12345)\n", "colour": "black", "author": "tomerfiliba@gmail.com"}, {"error": "none", "line": "265", "code": "            data = sock.recv(100)\n", "colour": "black", "author": "tomerfiliba@gmail.com"}, {"error": "none", "line": "266", "code": "            sock.send(\"foobar\")\n", "colour": "black", "author": "tomerfiliba@gmail.com"}, {"error": "none", "line": "267", "code": "            sock.close()\n", "colour": "black", "author": "tomerfiliba@gmail.com"}, {"error": "none", "line": "268", "code": "        \"\"\"\n", "colour": "black", "author": "tomerfiliba@gmail.com"}, {"error": "none", "line": "269", "code": "        if ipv6 and dhost == \"localhost\":\n", "colour": "black", "author": "tomerfiliba@gmail.com"}, {"error": "none", "line": "270", "code": "            dhost = \"::1\"\n", "colour": "black", "author": "tomerfiliba@gmail.com"}, {"error": "none", "line": "271", "code": "        srcaddr = (\"::1\", 0, 0, 0) if ipv6 else (\"127.0.0.1\", 0)\n", "colour": "black", "author": "tomerfiliba@gmail.com"}, {"error": "C", "line": "272", "code": "        chan = self._client.get_transport().open_channel('direct-tcpip', (dhost, dport), srcaddr)\n", "colour": "blue", "author": "tomerfiliba@gmail.com"}, {"error": "none", "line": "273", "code": "        return SocketCompatibleChannel(chan)\n", "colour": "black", "author": "tomerfiliba@gmail.com"}, {"error": "none", "line": "274", "code": "\n", "colour": "black", "author": "tomerfiliba@gmail.com"}, {"error": "none", "line": "275", "code": "    #\n", "colour": "black", "author": "tomerfiliba@gmail.com"}, {"error": "none", "line": "276", "code": "    # Path implementation\n", "colour": "black", "author": "tomerfiliba@gmail.com"}, {"error": "none", "line": "277", "code": "    #\n", "colour": "black", "author": "tomerfiliba@gmail.com"}, {"error": "none", "line": "278", "code": "    def _path_listdir(self, fn):\n", "colour": "black", "author": "tomerfiliba@gmail.com"}, {"error": "none", "line": "279", "code": "        return self.sftp.listdir(str(fn))\n", "colour": "black", "author": "tomerfiliba@gmail.com"}, {"error": "none", "line": "280", "code": "\n", "colour": "black", "author": "tomer.filiba@emc.com"}, {"error": "none", "line": "281", "code": "    def _path_read(self, fn):\n", "colour": "black", "author": "tomerfiliba@gmail.com"}, {"error": "C", "line": "282", "code": "        f = self.sftp.open(str(fn), 'rb')\n", "colour": "blue", "author": "tomerfiliba@gmail.com"}, {"error": "none", "line": "283", "code": "        data = f.read()\n", "colour": "black", "author": "tomerfiliba@gmail.com"}, {"error": "none", "line": "284", "code": "        f.close()\n", "colour": "black", "author": "tomerfiliba@gmail.com"}, {"error": "none", "line": "285", "code": "        return data\n", "colour": "black", "author": "tomerfiliba@gmail.com"}, {"error": "none", "line": "286", "code": "    def _path_write(self, fn, data):\n", "colour": "black", "author": "tomerfiliba@gmail.com"}, {"error": "none", "line": "287", "code": "        if self.encoding and isinstance(data, six.unicode_type):\n", "colour": "black", "author": "tomerfiliba@gmail.com"}, {"error": "none", "line": "288", "code": "            data = data.encode(self.encoding)\n", "colour": "black", "author": "tomerfiliba@gmail.com"}, {"error": "C", "line": "289", "code": "        f = self.sftp.open(str(fn), 'wb')\n", "colour": "blue", "author": "tomerfiliba@gmail.com"}, {"error": "none", "line": "290", "code": "        f.write(data)\n", "colour": "black", "author": "tomerfiliba@gmail.com"}, {"error": "none", "line": "291", "code": "        f.close()\n", "colour": "black", "author": "tomerfiliba@gmail.com"}, {"error": "none", "line": "292", "code": "\n", "colour": "black", "author": "tomerfiliba@gmail.com"}, {"error": "none", "line": "293", "code": "\n", "colour": "black", "author": "tomerfiliba@gmail.com"}, {"error": "none", "line": "294", "code": "\n", "colour": "black", "author": "tomerfiliba@gmail.com"}, {"error": "C", "line": "295", "code": "###################################################################################################\n", "colour": "blue", "author": "tomerfiliba@gmail.com"}, {"error": "C", "line": "296", "code": "# Make paramiko.Channel adhere to the socket protocol, namely, send and recv should fail\n", "colour": "blue", "author": "tomer.filiba@emc.com"}, {"error": "none", "line": "297", "code": "# when the socket has been closed\n", "colour": "black", "author": "tomerfiliba@gmail.com"}, {"error": "C", "line": "298", "code": "###################################################################################################\n", "colour": "blue", "author": "tomerfiliba@gmail.com"}, {"error": "C", "line": "299", "code": "class SocketCompatibleChannel(object):\n", "colour": "blue", "author": "tomerfiliba@gmail.com"}, {"error": "none", "line": "300", "code": "    def __init__(self, chan):\n", "colour": "black", "author": "tomerfiliba@gmail.com"}, {"error": "none", "line": "301", "code": "        self._chan = chan\n", "colour": "black", "author": "tomerfiliba@gmail.com"}, {"error": "none", "line": "302", "code": "    def __getattr__(self, name):\n", "colour": "black", "author": "tomerfiliba@gmail.com"}, {"error": "none", "line": "303", "code": "        return getattr(self._chan, name)\n", "colour": "black", "author": "tomerfiliba@gmail.com"}, {"error": "C", "line": "304", "code": "    def send(self, s):\n", "colour": "blue", "author": "tomerfiliba@gmail.com"}, {"error": "none", "line": "305", "code": "        if self._chan.closed:\n", "colour": "black", "author": "tomerfiliba@gmail.com"}, {"error": "none", "line": "306", "code": "            raise socket.error(errno.EBADF, 'Bad file descriptor')\n", "colour": "black", "author": "tomerfiliba@gmail.com"}, {"error": "none", "line": "307", "code": "        return self._chan.send(s)\n", "colour": "black", "author": "tomerfiliba@gmail.com"}, {"error": "C", "line": "308", "code": "    def recv(self, count):\n", "colour": "blue", "author": "tomerfiliba@gmail.com"}, {"error": "none", "line": "309", "code": "        if self._chan.closed:\n", "colour": "black", "author": "tomerfiliba@gmail.com"}, {"error": "none", "line": "310", "code": "            raise socket.error(errno.EBADF, 'Bad file descriptor')\n", "colour": "black", "author": "tomerfiliba@gmail.com"}, {"error": "none", "line": "311", "code": "        return self._chan.recv(count)\n", "colour": "black", "author": "tomerfiliba@gmail.com"}, {"error": "none", "line": "312", "code": "\n", "colour": "black", "author": "tomerfiliba@gmail.com"}, {"error": "none", "line": "313", "code": "\n", "colour": "black", "author": "tomerfiliba@gmail.com"}, {"error": "none", "line": "314", "code": "\n", "colour": "black", "author": "tomerfiliba@gmail.com"}]]}