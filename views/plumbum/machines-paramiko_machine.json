{"path": "/home/asumal/git/cs410/plumbum/plumbum/machines/paramiko_machine.py", "lines": [{"index": "1", "colour": "orange", "code": "import logging\n", "error": "none", "author": "Tomer.Filiba@emc.com"}, {"index": "2", "colour": "orange", "code": "import errno\n", "error": "none", "author": "Tomer.Filiba@emc.com"}, {"index": "3", "colour": "orange", "code": "import socket\n", "error": "none", "author": "Tomer.Filiba@emc.com"}, {"index": "4", "colour": "orange", "code": "from plumbum.machines.remote import BaseRemoteMachine\n", "error": "none", "author": "Tomer.Filiba@emc.com"}, {"index": "5", "colour": "orange", "code": "from plumbum.machines.session import ShellSession\n", "error": "none", "author": "Tomer.Filiba@emc.com"}, {"index": "6", "colour": "orange", "code": "from plumbum.lib import _setdoc, six\n", "error": "none", "author": "tomerfiliba@gmail.com"}, {"index": "7", "colour": "orange", "code": "from plumbum.path.local import LocalPath\n", "error": "none", "author": "Tomer.Filiba@emc.com"}, {"index": "8", "colour": "orange", "code": "from plumbum.path.remote import RemotePath\n", "error": "none", "author": "Tomer.Filiba@emc.com"}, {"index": "9", "colour": "orange", "code": "try:\n", "error": "none", "author": "tomerfiliba@gmail.com"}, {"index": "10", "colour": "orange", "code": "    # Sigh... we need to gracefully-import paramiko for Sphinx builds, etc\n", "error": "none", "author": "tomerfiliba@gmail.com"}, {"index": "11", "colour": "orange", "code": "    import paramiko\n", "error": "none", "author": "tomerfiliba@gmail.com"}, {"index": "12", "colour": "orange", "code": "except ImportError:\n", "error": "none", "author": "tomerfiliba@gmail.com"}, {"index": "13", "colour": "blue", "code": "    class paramiko(object):\n", "error": "R", "author": "tomerfiliba@gmail.com"}, {"index": "14", "colour": "orange", "code": "        def __nonzero__(self):\n", "error": "none", "author": "tomerfiliba@gmail.com"}, {"index": "15", "colour": "orange", "code": "            return False\n", "error": "none", "author": "tomerfiliba@gmail.com"}, {"index": "16", "colour": "orange", "code": "        __bool__ = __nonzero__\n", "error": "none", "author": "tomerfiliba@gmail.com"}, {"index": "17", "colour": "orange", "code": "        def __getattr__(self, name):\n", "error": "none", "author": "tomerfiliba@gmail.com"}, {"index": "18", "colour": "orange", "code": "            raise ImportError(\"No module named paramiko\")\n", "error": "none", "author": "tomerfiliba@gmail.com"}, {"index": "19", "colour": "orange", "code": "    paramiko = paramiko()\n", "error": "none", "author": "tomerfiliba@gmail.com"}, {"index": "20", "colour": "orange", "code": "\n", "error": "none", "author": "tomerfiliba@gmail.com"}, {"index": "21", "colour": "orange", "code": "\n", "error": "none", "author": "tomerfiliba@gmail.com"}, {"index": "22", "colour": "orange", "code": "logger = logging.getLogger(\"plumbum.paramiko\")\n", "error": "none", "author": "tomerfiliba@gmail.com"}, {"index": "23", "colour": "orange", "code": "\n", "error": "none", "author": "tomerfiliba@gmail.com"}, {"index": "24", "colour": "blue", "code": "class ParamikoPopen(object):\n", "error": "R", "author": "tomerfiliba@gmail.com"}, {"index": "25", "colour": "blue", "code": "    def __init__(self, argv, stdin, stdout, stderr, encoding, stdin_file = None,\n", "error": "R", "author": "tomer.filiba@emc.com"}, {"index": "26", "colour": "orange", "code": "            stdout_file = None, stderr_file = None):\n", "error": "none", "author": "tomerfiliba@gmail.com"}, {"index": "27", "colour": "orange", "code": "        self.argv = argv\n", "error": "none", "author": "tomerfiliba@gmail.com"}, {"index": "28", "colour": "orange", "code": "        self.channel = stdout.channel\n", "error": "none", "author": "tomerfiliba@gmail.com"}, {"index": "29", "colour": "orange", "code": "        self.stdin = stdin\n", "error": "none", "author": "tomerfiliba@gmail.com"}, {"index": "30", "colour": "orange", "code": "        self.stdout = stdout\n", "error": "none", "author": "tomerfiliba@gmail.com"}, {"index": "31", "colour": "orange", "code": "        self.stderr = stderr\n", "error": "none", "author": "tomerfiliba@gmail.com"}, {"index": "32", "colour": "orange", "code": "        self.encoding = encoding\n", "error": "none", "author": "tomerfiliba@gmail.com"}, {"index": "33", "colour": "orange", "code": "        self.returncode = None\n", "error": "none", "author": "tomerfiliba@gmail.com"}, {"index": "34", "colour": "orange", "code": "        self.pid = None\n", "error": "none", "author": "tomerfiliba@gmail.com"}, {"index": "35", "colour": "orange", "code": "        self.stdin_file = stdin_file\n", "error": "none", "author": "tomerfiliba@gmail.com"}, {"index": "36", "colour": "orange", "code": "        self.stdout_file = stdout_file\n", "error": "none", "author": "tomerfiliba@gmail.com"}, {"index": "37", "colour": "orange", "code": "        self.stderr_file = stderr_file\n", "error": "none", "author": "tomerfiliba@gmail.com"}, {"index": "38", "colour": "orange", "code": "    def poll(self):\n", "error": "none", "author": "tomerfiliba@gmail.com"}, {"index": "39", "colour": "orange", "code": "        if self.returncode is None:\n", "error": "none", "author": "tomerfiliba@gmail.com"}, {"index": "40", "colour": "orange", "code": "            if self.channel.exit_status_ready():\n", "error": "none", "author": "tomerfiliba@gmail.com"}, {"index": "41", "colour": "orange", "code": "                return self.wait()\n", "error": "none", "author": "tomerfiliba@gmail.com"}, {"index": "42", "colour": "orange", "code": "        return self.returncode\n", "error": "none", "author": "tomerfiliba@gmail.com"}, {"index": "43", "colour": "orange", "code": "    def wait(self):\n", "error": "none", "author": "tomerfiliba@gmail.com"}, {"index": "44", "colour": "orange", "code": "        if self.returncode is None:\n", "error": "none", "author": "tomerfiliba@gmail.com"}, {"index": "45", "colour": "orange", "code": "            self.channel.recv_exit_status()\n", "error": "none", "author": "tomerfiliba@gmail.com"}, {"index": "46", "colour": "orange", "code": "            self.returncode = self.channel.exit_status\n", "error": "none", "author": "tomerfiliba@gmail.com"}, {"index": "47", "colour": "orange", "code": "            self.close()\n", "error": "none", "author": "tomerfiliba@gmail.com"}, {"index": "48", "colour": "orange", "code": "        return self.returncode\n", "error": "none", "author": "tomerfiliba@gmail.com"}, {"index": "49", "colour": "orange", "code": "    def close(self):\n", "error": "none", "author": "tomerfiliba@gmail.com"}, {"index": "50", "colour": "orange", "code": "        self.channel.shutdown_read()\n", "error": "none", "author": "tomerfiliba@gmail.com"}, {"index": "51", "colour": "orange", "code": "        self.channel.shutdown_write()\n", "error": "none", "author": "tomerfiliba@gmail.com"}, {"index": "52", "colour": "orange", "code": "        self.channel.close()\n", "error": "none", "author": "tomerfiliba@gmail.com"}, {"index": "53", "colour": "blue", "code": "    def kill(self):\n", "error": "R", "author": "tomerfiliba@gmail.com"}, {"index": "54", "colour": "orange", "code": "        # possible way to obtain pid:\n", "error": "none", "author": "tomerfiliba@gmail.com"}, {"index": "55", "colour": "orange", "code": "        # \"(cmd ; echo $?) & echo ?!\"\n", "error": "none", "author": "tomerfiliba@gmail.com"}, {"index": "56", "colour": "orange", "code": "        # and then client.exec_command(\"kill -9 %s\" % (pid,))\n", "error": "none", "author": "tomerfiliba@gmail.com"}, {"index": "57", "colour": "orange", "code": "        raise EnvironmentError(\"Cannot kill remote processes, we don't have their PIDs\")\n", "error": "none", "author": "tomerfiliba@gmail.com"}, {"index": "58", "colour": "orange", "code": "    terminate = kill\n", "error": "none", "author": "tomerfiliba@gmail.com"}, {"index": "59", "colour": "orange", "code": "    def send_signal(self, sig):\n", "error": "none", "author": "tomerfiliba@gmail.com"}, {"index": "60", "colour": "orange", "code": "        raise NotImplementedError()\n", "error": "none", "author": "tomerfiliba@gmail.com"}, {"index": "61", "colour": "orange", "code": "    def communicate(self):\n", "error": "none", "author": "tomerfiliba@gmail.com"}, {"index": "62", "colour": "orange", "code": "        stdout = []\n", "error": "none", "author": "tomerfiliba@gmail.com"}, {"index": "63", "colour": "orange", "code": "        stderr = []\n", "error": "none", "author": "tomerfiliba@gmail.com"}, {"index": "64", "colour": "orange", "code": "        infile = self.stdin_file\n", "error": "none", "author": "tomerfiliba@gmail.com"}, {"index": "65", "colour": "orange", "code": "        sources = [(\"1\", stdout, self.stdout, self.stdout_file), (\"2\", stderr, self.stderr, self.stderr_file)]\n", "error": "none", "author": "tomerfiliba@gmail.com"}, {"index": "66", "colour": "orange", "code": "        i = 0\n", "error": "none", "author": "tomerfiliba@gmail.com"}, {"index": "67", "colour": "orange", "code": "        while sources:\n", "error": "none", "author": "tomerfiliba@gmail.com"}, {"index": "68", "colour": "orange", "code": "            if infile:\n", "error": "none", "author": "tomerfiliba@gmail.com"}, {"index": "69", "colour": "orange", "code": "                try:\n", "error": "none", "author": "tomerfiliba@gmail.com"}, {"index": "70", "colour": "orange", "code": "                    line = infile.readline()\n", "error": "none", "author": "tomerfiliba@gmail.com"}, {"index": "71", "colour": "orange", "code": "                except (ValueError, IOError):\n", "error": "none", "author": "tomerfiliba@gmail.com"}, {"index": "72", "colour": "orange", "code": "                    line = None\n", "error": "none", "author": "tomerfiliba@gmail.com"}, {"index": "73", "colour": "orange", "code": "                logger.debug(\"communicate: %r\", line)\n", "error": "none", "author": "tomerfiliba@gmail.com"}, {"index": "74", "colour": "orange", "code": "                if not line:\n", "error": "none", "author": "tomerfiliba@gmail.com"}, {"index": "75", "colour": "orange", "code": "                    infile.close()\n", "error": "none", "author": "tomerfiliba@gmail.com"}, {"index": "76", "colour": "orange", "code": "                    infile = None\n", "error": "none", "author": "tomerfiliba@gmail.com"}, {"index": "77", "colour": "orange", "code": "                    self.stdin.close()\n", "error": "none", "author": "tomerfiliba@gmail.com"}, {"index": "78", "colour": "orange", "code": "                else:\n", "error": "none", "author": "tomerfiliba@gmail.com"}, {"index": "79", "colour": "orange", "code": "                    self.stdin.write(line)\n", "error": "none", "author": "tomerfiliba@gmail.com"}, {"index": "80", "colour": "orange", "code": "                    self.stdin.flush()\n", "error": "none", "author": "tomerfiliba@gmail.com"}, {"index": "81", "colour": "orange", "code": "\n", "error": "none", "author": "tomerfiliba@gmail.com"}, {"index": "82", "colour": "orange", "code": "            i = (i + 1) % len(sources)\n", "error": "none", "author": "tomerfiliba@gmail.com"}, {"index": "83", "colour": "green", "code": "            name, coll, pipe, outfile = sources[i]\n", "error": "W", "author": "tomerfiliba@gmail.com"}, {"index": "84", "colour": "orange", "code": "            line = pipe.readline()\n", "error": "none", "author": "tomerfiliba@gmail.com"}, {"index": "85", "colour": "orange", "code": "            # logger.debug(\"%s> %r\", name, line)\n", "error": "none", "author": "tomer.filiba@emc.com"}, {"index": "86", "colour": "orange", "code": "            if not line:\n", "error": "none", "author": "tomerfiliba@gmail.com"}, {"index": "87", "colour": "orange", "code": "                del sources[i]\n", "error": "none", "author": "tomerfiliba@gmail.com"}, {"index": "88", "colour": "orange", "code": "            elif outfile:\n", "error": "none", "author": "tomerfiliba@gmail.com"}, {"index": "89", "colour": "orange", "code": "                outfile.write(line)\n", "error": "none", "author": "tomerfiliba@gmail.com"}, {"index": "90", "colour": "orange", "code": "                outfile.flush()\n", "error": "none", "author": "tomerfiliba@gmail.com"}, {"index": "91", "colour": "orange", "code": "            else:\n", "error": "none", "author": "tomerfiliba@gmail.com"}, {"index": "92", "colour": "orange", "code": "                coll.append(line)\n", "error": "none", "author": "tomerfiliba@gmail.com"}, {"index": "93", "colour": "orange", "code": "        self.wait()\n", "error": "none", "author": "tomerfiliba@gmail.com"}, {"index": "94", "colour": "orange", "code": "        stdout = six.b(\"\").join(six.b(s) for s in stdout)\n", "error": "none", "author": "tomer.filiba@emc.com"}, {"index": "95", "colour": "orange", "code": "        stderr = six.b(\"\").join(six.b(s) for s in stderr)\n", "error": "none", "author": "tomer.filiba@emc.com"}, {"index": "96", "colour": "orange", "code": "        return stdout, stderr\n", "error": "none", "author": "tomerfiliba@gmail.com"}, {"index": "97", "colour": "orange", "code": "\n", "error": "none", "author": "tomerfiliba@gmail.com"}, {"index": "98", "colour": "orange", "code": "\n", "error": "none", "author": "tomerfiliba@gmail.com"}, {"index": "99", "colour": "orange", "code": "class ParamikoMachine(BaseRemoteMachine):\n", "error": "none", "author": "tomerfiliba@gmail.com"}, {"index": "100", "colour": "orange", "code": "    \"\"\"\n", "error": "none", "author": "tomerfiliba@gmail.com"}, {"index": "101", "colour": "orange", "code": "    An implementation of :class:`remote machine <plumbum.machines.remote.BaseRemoteMachine>`\n", "error": "none", "author": "Tomer.Filiba@emc.com"}, {"index": "102", "colour": "orange", "code": "    over Paramiko (a Python implementation of openSSH2 client/server). Invoking a remote command\n", "error": "none", "author": "tomer.filiba@emc.com"}, {"index": "103", "colour": "orange", "code": "    translates to invoking it over SSH ::\n", "error": "none", "author": "tomerfiliba@gmail.com"}, {"index": "104", "colour": "orange", "code": "\n", "error": "none", "author": "tomerfiliba@gmail.com"}, {"index": "105", "colour": "orange", "code": "        with ParamikoMachine(\"yourhostname\") as rem:\n", "error": "none", "author": "tomerfiliba@gmail.com"}, {"index": "106", "colour": "orange", "code": "            r_ls = rem[\"ls\"]\n", "error": "none", "author": "tomerfiliba@gmail.com"}, {"index": "107", "colour": "orange", "code": "            # r_ls is the remote `ls`\n", "error": "none", "author": "tomerfiliba@gmail.com"}, {"index": "108", "colour": "orange", "code": "            # executing r_ls() is equivalent to `ssh yourhostname ls`, only without\n", "error": "none", "author": "tomer.filiba@emc.com"}, {"index": "109", "colour": "orange", "code": "            # spawning a new ssh client\n", "error": "none", "author": "tomerfiliba@gmail.com"}, {"index": "110", "colour": "orange", "code": "\n", "error": "none", "author": "tomerfiliba@gmail.com"}, {"index": "111", "colour": "orange", "code": "    :param host: the host name to connect to (SSH server)\n", "error": "none", "author": "tomerfiliba@gmail.com"}, {"index": "112", "colour": "orange", "code": "\n", "error": "none", "author": "tomerfiliba@gmail.com"}, {"index": "113", "colour": "orange", "code": "    :param user: the user to connect as (if ``None``, the default will be used)\n", "error": "none", "author": "tomerfiliba@gmail.com"}, {"index": "114", "colour": "orange", "code": "\n", "error": "none", "author": "tomerfiliba@gmail.com"}, {"index": "115", "colour": "orange", "code": "    :param port: the server's port (if ``None``, the default will be used)\n", "error": "none", "author": "tomerfiliba@gmail.com"}, {"index": "116", "colour": "orange", "code": "\n", "error": "none", "author": "tomerfiliba@gmail.com"}, {"index": "117", "colour": "orange", "code": "    :param password: the user's password (if a password-based authentication is to be performed)\n", "error": "none", "author": "tomerfiliba@gmail.com"}, {"index": "118", "colour": "orange", "code": "                     (if ``None``, key-based authentication will be used)\n", "error": "none", "author": "tomerfiliba@gmail.com"}, {"index": "119", "colour": "orange", "code": "\n", "error": "none", "author": "tomerfiliba@gmail.com"}, {"index": "120", "colour": "orange", "code": "    :param keyfile: the path to the identity file (if ``None``, the default will be used)\n", "error": "none", "author": "tomerfiliba@gmail.com"}, {"index": "121", "colour": "orange", "code": "\n", "error": "none", "author": "tomer.filiba@emc.com"}, {"index": "122", "colour": "orange", "code": "    :param load_system_host_keys: whether or not to load the system's host keys (from ``/etc/ssh``\n", "error": "none", "author": "tomer.filiba@emc.com"}, {"index": "123", "colour": "orange", "code": "                                  and ``~/.ssh``). The default is ``True``, which means Paramiko\n", "error": "none", "author": "tomerfiliba@gmail.com"}, {"index": "124", "colour": "orange", "code": "                                  behaves much like the ``ssh`` command-line client\n", "error": "none", "author": "tomerfiliba@gmail.com"}, {"index": "125", "colour": "orange", "code": "\n", "error": "none", "author": "tomerfiliba@gmail.com"}, {"index": "126", "colour": "orange", "code": "    :param missing_host_policy: the value passed to the underlying ``set_missing_host_key_policy``\n", "error": "none", "author": "tomerfiliba@gmail.com"}, {"index": "127", "colour": "orange", "code": "                                of the client. The default is ``None``, which means\n", "error": "none", "author": "tomerfiliba@gmail.com"}, {"index": "128", "colour": "orange", "code": "                                ``set_missing_host_key_policy`` is not invoked and paramiko's\n", "error": "none", "author": "tomerfiliba@gmail.com"}, {"index": "129", "colour": "orange", "code": "                                default behavior (reject) is employed\n", "error": "none", "author": "tomerfiliba@gmail.com"}, {"index": "130", "colour": "orange", "code": "\n", "error": "none", "author": "tomerfiliba@gmail.com"}, {"index": "131", "colour": "orange", "code": "    :param encoding: the remote machine's encoding (defaults to UTF8)\n", "error": "none", "author": "tomerfiliba@gmail.com"}, {"index": "132", "colour": "orange", "code": "\n", "error": "none", "author": "vitty@redhat.com"}, {"index": "133", "colour": "orange", "code": "    :param look_for_keys: set to False to disable searching for discoverable\n", "error": "none", "author": "vitty@redhat.com"}, {"index": "134", "colour": "orange", "code": "                          private key files in ``~/.ssh``\n", "error": "none", "author": "vitty@redhat.com"}, {"index": "135", "colour": "orange", "code": "\n", "error": "none", "author": "vitty@redhat.com"}, {"index": "136", "colour": "orange", "code": "    :param connect_timeout: timeout for TCP connection\n", "error": "none", "author": "tomerfiliba@gmail.com"}, {"index": "137", "colour": "orange", "code": "    \"\"\"\n", "error": "none", "author": "vitty@redhat.com"}, {"index": "138", "colour": "blue", "code": "    def __init__(self, host, user = None, port = None, password = None, keyfile = None,\n", "error": "R", "author": "tomer.filiba@emc.com"}, {"index": "139", "colour": "orange", "code": "            load_system_host_keys = True, missing_host_policy = None, encoding = \"utf8\",\n", "error": "none", "author": "vitty@redhat.com"}, {"index": "140", "colour": "orange", "code": "            look_for_keys = None, connect_timeout = None):\n", "error": "none", "author": "tomerfiliba@gmail.com"}, {"index": "141", "colour": "orange", "code": "        self.host = host\n", "error": "none", "author": "tomerfiliba@gmail.com"}, {"index": "142", "colour": "orange", "code": "        kwargs = {}\n", "error": "none", "author": "itai.in@gmail.com"}, {"index": "143", "colour": "orange", "code": "        if user:\n", "error": "none", "author": "tomerfiliba@gmail.com"}, {"index": "144", "colour": "orange", "code": "            self._fqhost = \"%s@%s\" % (user, host)\n", "error": "none", "author": "tomerfiliba@gmail.com"}, {"index": "145", "colour": "orange", "code": "            kwargs['username'] = user\n", "error": "none", "author": "itai.in@gmail.com"}, {"index": "146", "colour": "orange", "code": "        else:\n", "error": "none", "author": "tomerfiliba@gmail.com"}, {"index": "147", "colour": "orange", "code": "            self._fqhost = host\n", "error": "none", "author": "tomerfiliba@gmail.com"}, {"index": "148", "colour": "red", "code": "        self._client = paramiko.SSHClient()\n", "error": "E", "author": "tomerfiliba@gmail.com"}, {"index": "149", "colour": "orange", "code": "        if load_system_host_keys:\n", "error": "none", "author": "tomerfiliba@gmail.com"}, {"index": "150", "colour": "orange", "code": "            self._client.load_system_host_keys()\n", "error": "none", "author": "tomerfiliba@gmail.com"}, {"index": "151", "colour": "orange", "code": "        if port is not None:\n", "error": "none", "author": "tomerfiliba@gmail.com"}, {"index": "152", "colour": "orange", "code": "            kwargs[\"port\"] = port\n", "error": "none", "author": "tomerfiliba@gmail.com"}, {"index": "153", "colour": "orange", "code": "        if keyfile is not None:\n", "error": "none", "author": "tomerfiliba@gmail.com"}, {"index": "154", "colour": "orange", "code": "            kwargs[\"key_filename\"] = keyfile\n", "error": "none", "author": "tomerfiliba@gmail.com"}, {"index": "155", "colour": "orange", "code": "        if password is not None:\n", "error": "none", "author": "tomerfiliba@gmail.com"}, {"index": "156", "colour": "orange", "code": "            kwargs[\"password\"] = password\n", "error": "none", "author": "tomerfiliba@gmail.com"}, {"index": "157", "colour": "orange", "code": "        if missing_host_policy is not None:\n", "error": "none", "author": "tomerfiliba@gmail.com"}, {"index": "158", "colour": "orange", "code": "            self._client.set_missing_host_key_policy(missing_host_policy)\n", "error": "none", "author": "tomerfiliba@gmail.com"}, {"index": "159", "colour": "orange", "code": "        if look_for_keys is not None:\n", "error": "none", "author": "vitty@redhat.com"}, {"index": "160", "colour": "orange", "code": "            kwargs[\"look_for_keys\"] = look_for_keys\n", "error": "none", "author": "vitty@redhat.com"}, {"index": "161", "colour": "orange", "code": "        if connect_timeout is not None:\n", "error": "none", "author": "tomerfiliba@gmail.com"}, {"index": "162", "colour": "orange", "code": "            kwargs[\"timeout\"] = connect_timeout\n", "error": "none", "author": "tomerfiliba@gmail.com"}, {"index": "163", "colour": "green", "code": "        self._client.connect(host, **kwargs)\n", "error": "W", "author": "tomerfiliba@gmail.com"}, {"index": "164", "colour": "orange", "code": "        self._sftp = None\n", "error": "none", "author": "tomerfiliba@gmail.com"}, {"index": "165", "colour": "orange", "code": "        BaseRemoteMachine.__init__(self, encoding, connect_timeout)\n", "error": "none", "author": "tomerfiliba@gmail.com"}, {"index": "166", "colour": "orange", "code": "\n", "error": "none", "author": "tomerfiliba@gmail.com"}, {"index": "167", "colour": "orange", "code": "    def __str__(self):\n", "error": "none", "author": "tomerfiliba@gmail.com"}, {"index": "168", "colour": "orange", "code": "        return \"paramiko://%s\" % (self._fqhost,)\n", "error": "none", "author": "tomerfiliba@gmail.com"}, {"index": "169", "colour": "orange", "code": "\n", "error": "none", "author": "tomerfiliba@gmail.com"}, {"index": "170", "colour": "orange", "code": "    def close(self):\n", "error": "none", "author": "tomerfiliba@gmail.com"}, {"index": "171", "colour": "orange", "code": "        BaseRemoteMachine.close(self)\n", "error": "none", "author": "tomerfiliba@gmail.com"}, {"index": "172", "colour": "orange", "code": "        self._client.close()\n", "error": "none", "author": "tomerfiliba@gmail.com"}, {"index": "173", "colour": "orange", "code": "\n", "error": "none", "author": "tomerfiliba@gmail.com"}, {"index": "174", "colour": "orange", "code": "    @property\n", "error": "none", "author": "tomerfiliba@gmail.com"}, {"index": "175", "colour": "orange", "code": "    def sftp(self):\n", "error": "none", "author": "tomerfiliba@gmail.com"}, {"index": "176", "colour": "orange", "code": "        \"\"\"\n", "error": "none", "author": "tomerfiliba@gmail.com"}, {"index": "177", "colour": "orange", "code": "        Returns an SFTP client on top of the current SSH connection; it can be used to manipulate\n", "error": "none", "author": "tomerfiliba@gmail.com"}, {"index": "178", "colour": "orange", "code": "        files directly, much like an interactive FTP/SFTP session\n", "error": "none", "author": "tomerfiliba@gmail.com"}, {"index": "179", "colour": "orange", "code": "        \"\"\"\n", "error": "none", "author": "tomerfiliba@gmail.com"}, {"index": "180", "colour": "orange", "code": "        if not self._sftp:\n", "error": "none", "author": "tomerfiliba@gmail.com"}, {"index": "181", "colour": "orange", "code": "            self._sftp = self._client.open_sftp()\n", "error": "none", "author": "tomerfiliba@gmail.com"}, {"index": "182", "colour": "orange", "code": "        return self._sftp\n", "error": "none", "author": "tomerfiliba@gmail.com"}, {"index": "183", "colour": "orange", "code": "\n", "error": "none", "author": "tomerfiliba@gmail.com"}, {"index": "184", "colour": "orange", "code": "    @_setdoc(BaseRemoteMachine)\n", "error": "none", "author": "tomerfiliba@gmail.com"}, {"index": "185", "colour": "green", "code": "    def session(self, isatty = False, term = \"vt100\", width = 80, height = 24, new_session = False):\n", "error": "W", "author": "Tomer.Filiba@emc.com"}, {"index": "186", "colour": "orange", "code": "        # new_session is ignored for ParamikoMachine\n", "error": "none", "author": "Tomer.Filiba@emc.com"}, {"index": "187", "colour": "orange", "code": "        chan = self._client.get_transport().open_session()\n", "error": "none", "author": "tomerfiliba@gmail.com"}, {"index": "188", "colour": "orange", "code": "        if isatty:\n", "error": "none", "author": "tomerfiliba@gmail.com"}, {"index": "189", "colour": "orange", "code": "            chan.get_pty(term, width, height)\n", "error": "none", "author": "tomerfiliba@gmail.com"}, {"index": "190", "colour": "orange", "code": "            chan.set_combine_stderr()\n", "error": "none", "author": "tomerfiliba@gmail.com"}, {"index": "191", "colour": "orange", "code": "        chan.invoke_shell()\n", "error": "none", "author": "tomerfiliba@gmail.com"}, {"index": "192", "colour": "orange", "code": "        stdin = chan.makefile('wb', -1)\n", "error": "none", "author": "tomerfiliba@gmail.com"}, {"index": "193", "colour": "orange", "code": "        stdout = chan.makefile('rb', -1)\n", "error": "none", "author": "tomerfiliba@gmail.com"}, {"index": "194", "colour": "orange", "code": "        stderr = chan.makefile_stderr('rb', -1)\n", "error": "none", "author": "tomerfiliba@gmail.com"}, {"index": "195", "colour": "orange", "code": "        proc = ParamikoPopen([\"<shell>\"], stdin, stdout, stderr, self.encoding)\n", "error": "none", "author": "tomerfiliba@gmail.com"}, {"index": "196", "colour": "orange", "code": "        return ShellSession(proc, self.encoding, isatty)\n", "error": "none", "author": "tomerfiliba@gmail.com"}, {"index": "197", "colour": "orange", "code": "\n", "error": "none", "author": "tomerfiliba@gmail.com"}, {"index": "198", "colour": "orange", "code": "    @_setdoc(BaseRemoteMachine)\n", "error": "none", "author": "tomerfiliba@gmail.com"}, {"index": "199", "colour": "green", "code": "    def popen(self, args, stdin = None, stdout = None, stderr = None, new_session = False):\n", "error": "W", "author": "Tomer.Filiba@emc.com"}, {"index": "200", "colour": "orange", "code": "        # new_session is ignored for ParamikoMachine\n", "error": "none", "author": "Tomer.Filiba@emc.com"}, {"index": "201", "colour": "orange", "code": "        argv = []\n", "error": "none", "author": "tomerfiliba@gmail.com"}, {"index": "202", "colour": "orange", "code": "        envdelta = self.env.getdelta()\n", "error": "none", "author": "tomerfiliba@gmail.com"}, {"index": "203", "colour": "orange", "code": "        argv.extend([\"cd\", str(self.cwd), \"&&\"])\n", "error": "none", "author": "tomerfiliba@gmail.com"}, {"index": "204", "colour": "orange", "code": "        if envdelta:\n", "error": "none", "author": "tomerfiliba@gmail.com"}, {"index": "205", "colour": "orange", "code": "            argv.append(\"env\")\n", "error": "none", "author": "tomerfiliba@gmail.com"}, {"index": "206", "colour": "orange", "code": "            argv.extend(\"%s=%s\" % (k, v) for k, v in envdelta.items())\n", "error": "none", "author": "tomerfiliba@gmail.com"}, {"index": "207", "colour": "orange", "code": "        argv.extend(args.formulate())\n", "error": "none", "author": "tomerfiliba@gmail.com"}, {"index": "208", "colour": "orange", "code": "        cmdline = \" \".join(argv)\n", "error": "none", "author": "tomerfiliba@gmail.com"}, {"index": "209", "colour": "orange", "code": "        logger.debug(cmdline)\n", "error": "none", "author": "tomerfiliba@gmail.com"}, {"index": "210", "colour": "orange", "code": "        si, so, se = self._client.exec_command(cmdline, 1)\n", "error": "none", "author": "tomerfiliba@gmail.com"}, {"index": "211", "colour": "orange", "code": "        return ParamikoPopen(argv, si, so, se, self.encoding, stdin_file = stdin,\n", "error": "none", "author": "tomer.filiba@emc.com"}, {"index": "212", "colour": "orange", "code": "            stdout_file = stdout, stderr_file = stderr)\n", "error": "none", "author": "tomer.filiba@emc.com"}, {"index": "213", "colour": "orange", "code": "\n", "error": "none", "author": "tomerfiliba@gmail.com"}, {"index": "214", "colour": "orange", "code": "    @_setdoc(BaseRemoteMachine)\n", "error": "none", "author": "tomerfiliba@gmail.com"}, {"index": "215", "colour": "orange", "code": "    def download(self, src, dst):\n", "error": "none", "author": "tomerfiliba@gmail.com"}, {"index": "216", "colour": "orange", "code": "        if isinstance(src, LocalPath):\n", "error": "none", "author": "tomerfiliba@gmail.com"}, {"index": "217", "colour": "orange", "code": "            raise TypeError(\"src of download cannot be %r\" % (src,))\n", "error": "none", "author": "tomerfiliba@gmail.com"}, {"index": "218", "colour": "orange", "code": "        if isinstance(src, RemotePath) and src.remote != self:\n", "error": "none", "author": "tomerfiliba@gmail.com"}, {"index": "219", "colour": "orange", "code": "            raise TypeError(\"src %r points to a different remote machine\" % (src,))\n", "error": "none", "author": "tomerfiliba@gmail.com"}, {"index": "220", "colour": "orange", "code": "        if isinstance(dst, RemotePath):\n", "error": "none", "author": "tomerfiliba@gmail.com"}, {"index": "221", "colour": "orange", "code": "            raise TypeError(\"dst of download cannot be %r\" % (dst,))\n", "error": "none", "author": "tomerfiliba@gmail.com"}, {"index": "222", "colour": "orange", "code": "        return self._download(src if isinstance(src, RemotePath) else self.path(src),\n", "error": "none", "author": "tomerfiliba@gmail.com"}, {"index": "223", "colour": "orange", "code": "            dst if isinstance(dst, LocalPath) else LocalPath(dst))\n", "error": "none", "author": "tomer.filiba@emc.com"}, {"index": "224", "colour": "orange", "code": "\n", "error": "none", "author": "tomerfiliba@gmail.com"}, {"index": "225", "colour": "orange", "code": "    def _download(self, src, dst):\n", "error": "none", "author": "tomerfiliba@gmail.com"}, {"index": "226", "colour": "orange", "code": "        if src.isdir():\n", "error": "none", "author": "tomerfiliba@gmail.com"}, {"index": "227", "colour": "orange", "code": "            if not dst.exists():\n", "error": "none", "author": "tomerfiliba@gmail.com"}, {"index": "228", "colour": "orange", "code": "                self.sftp.mkdir(str(dst))\n", "error": "none", "author": "tomerfiliba@gmail.com"}, {"index": "229", "colour": "orange", "code": "            for fn in src:\n", "error": "none", "author": "tomerfiliba@gmail.com"}, {"index": "230", "colour": "orange", "code": "                self._download(fn, dst / fn.basename)\n", "error": "none", "author": "tomerfiliba@gmail.com"}, {"index": "231", "colour": "orange", "code": "        elif dst.isdir():\n", "error": "none", "author": "tomerfiliba@gmail.com"}, {"index": "232", "colour": "orange", "code": "            self.sftp.get(str(src), str(dst / src.basename))\n", "error": "none", "author": "tomerfiliba@gmail.com"}, {"index": "233", "colour": "orange", "code": "        else:\n", "error": "none", "author": "tomerfiliba@gmail.com"}, {"index": "234", "colour": "orange", "code": "            self.sftp.get(str(src), str(dst))\n", "error": "none", "author": "tomerfiliba@gmail.com"}, {"index": "235", "colour": "orange", "code": "\n", "error": "none", "author": "tomerfiliba@gmail.com"}, {"index": "236", "colour": "orange", "code": "    @_setdoc(BaseRemoteMachine)\n", "error": "none", "author": "tomerfiliba@gmail.com"}, {"index": "237", "colour": "orange", "code": "    def upload(self, src, dst):\n", "error": "none", "author": "tomerfiliba@gmail.com"}, {"index": "238", "colour": "orange", "code": "        if isinstance(src, RemotePath):\n", "error": "none", "author": "tomerfiliba@gmail.com"}, {"index": "239", "colour": "orange", "code": "            raise TypeError(\"src of upload cannot be %r\" % (src,))\n", "error": "none", "author": "tomerfiliba@gmail.com"}, {"index": "240", "colour": "orange", "code": "        if isinstance(dst, LocalPath):\n", "error": "none", "author": "tomerfiliba@gmail.com"}, {"index": "241", "colour": "orange", "code": "            raise TypeError(\"dst of upload cannot be %r\" % (dst,))\n", "error": "none", "author": "tomerfiliba@gmail.com"}, {"index": "242", "colour": "orange", "code": "        if isinstance(dst, RemotePath) and dst.remote != self:\n", "error": "none", "author": "tomerfiliba@gmail.com"}, {"index": "243", "colour": "orange", "code": "            raise TypeError(\"dst %r points to a different remote machine\" % (dst,))\n", "error": "none", "author": "tomerfiliba@gmail.com"}, {"index": "244", "colour": "orange", "code": "        return self._upload(src if isinstance(src, LocalPath) else LocalPath(src),\n", "error": "none", "author": "tomer.filiba@emc.com"}, {"index": "245", "colour": "orange", "code": "            dst if isinstance(dst, RemotePath) else self.path(dst))\n", "error": "none", "author": "tomerfiliba@gmail.com"}, {"index": "246", "colour": "orange", "code": "\n", "error": "none", "author": "tomerfiliba@gmail.com"}, {"index": "247", "colour": "orange", "code": "    def _upload(self, src, dst):\n", "error": "none", "author": "tomerfiliba@gmail.com"}, {"index": "248", "colour": "orange", "code": "        if src.isdir():\n", "error": "none", "author": "tomerfiliba@gmail.com"}, {"index": "249", "colour": "orange", "code": "            if not dst.exists():\n", "error": "none", "author": "tomerfiliba@gmail.com"}, {"index": "250", "colour": "orange", "code": "                self.sftp.mkdir(str(dst))\n", "error": "none", "author": "tomerfiliba@gmail.com"}, {"index": "251", "colour": "orange", "code": "            for fn in src:\n", "error": "none", "author": "tomerfiliba@gmail.com"}, {"index": "252", "colour": "orange", "code": "                self._upload(fn, dst / fn.basename)\n", "error": "none", "author": "tomerfiliba@gmail.com"}, {"index": "253", "colour": "orange", "code": "        elif dst.isdir():\n", "error": "none", "author": "tomerfiliba@gmail.com"}, {"index": "254", "colour": "orange", "code": "            self.sftp.put(str(src), str(dst / src.basename))\n", "error": "none", "author": "tomerfiliba@gmail.com"}, {"index": "255", "colour": "orange", "code": "        else:\n", "error": "none", "author": "tomerfiliba@gmail.com"}, {"index": "256", "colour": "orange", "code": "            self.sftp.put(str(src), str(dst))\n", "error": "none", "author": "tomerfiliba@gmail.com"}, {"index": "257", "colour": "orange", "code": "\n", "error": "none", "author": "tomerfiliba@gmail.com"}, {"index": "258", "colour": "orange", "code": "    def connect_sock(self, dport, dhost = \"localhost\", ipv6 = False):\n", "error": "none", "author": "tomerfiliba@gmail.com"}, {"index": "259", "colour": "orange", "code": "        \"\"\"Returns a Paramiko ``Channel``, connected to dhost:dport on the remote machine.\n", "error": "none", "author": "tomerfiliba@gmail.com"}, {"index": "260", "colour": "orange", "code": "        The ``Channel`` behaves like a regular socket; you can ``send`` and ``recv`` on it\n", "error": "none", "author": "tomerfiliba@gmail.com"}, {"index": "261", "colour": "orange", "code": "        and the data will pass encrypted over SSH. Usage::\n", "error": "none", "author": "tomerfiliba@gmail.com"}, {"index": "262", "colour": "orange", "code": "\n", "error": "none", "author": "tomer.filiba@emc.com"}, {"index": "263", "colour": "orange", "code": "            mach = ParamikoMachine(\"myhost\")\n", "error": "none", "author": "tomerfiliba@gmail.com"}, {"index": "264", "colour": "orange", "code": "            sock = mach.connect_sock(12345)\n", "error": "none", "author": "tomerfiliba@gmail.com"}, {"index": "265", "colour": "orange", "code": "            data = sock.recv(100)\n", "error": "none", "author": "tomerfiliba@gmail.com"}, {"index": "266", "colour": "orange", "code": "            sock.send(\"foobar\")\n", "error": "none", "author": "tomerfiliba@gmail.com"}, {"index": "267", "colour": "orange", "code": "            sock.close()\n", "error": "none", "author": "tomerfiliba@gmail.com"}, {"index": "268", "colour": "orange", "code": "        \"\"\"\n", "error": "none", "author": "tomerfiliba@gmail.com"}, {"index": "269", "colour": "orange", "code": "        if ipv6 and dhost == \"localhost\":\n", "error": "none", "author": "tomerfiliba@gmail.com"}, {"index": "270", "colour": "orange", "code": "            dhost = \"::1\"\n", "error": "none", "author": "tomerfiliba@gmail.com"}, {"index": "271", "colour": "orange", "code": "        srcaddr = (\"::1\", 0, 0, 0) if ipv6 else (\"127.0.0.1\", 0)\n", "error": "none", "author": "tomerfiliba@gmail.com"}, {"index": "272", "colour": "orange", "code": "        chan = self._client.get_transport().open_channel('direct-tcpip', (dhost, dport), srcaddr)\n", "error": "none", "author": "tomerfiliba@gmail.com"}, {"index": "273", "colour": "orange", "code": "        return SocketCompatibleChannel(chan)\n", "error": "none", "author": "tomerfiliba@gmail.com"}, {"index": "274", "colour": "orange", "code": "\n", "error": "none", "author": "tomerfiliba@gmail.com"}, {"index": "275", "colour": "orange", "code": "    #\n", "error": "none", "author": "tomerfiliba@gmail.com"}, {"index": "276", "colour": "orange", "code": "    # Path implementation\n", "error": "none", "author": "tomerfiliba@gmail.com"}, {"index": "277", "colour": "orange", "code": "    #\n", "error": "none", "author": "tomerfiliba@gmail.com"}, {"index": "278", "colour": "orange", "code": "    def _path_listdir(self, fn):\n", "error": "none", "author": "tomerfiliba@gmail.com"}, {"index": "279", "colour": "orange", "code": "        return self.sftp.listdir(str(fn))\n", "error": "none", "author": "tomerfiliba@gmail.com"}, {"index": "280", "colour": "orange", "code": "\n", "error": "none", "author": "tomer.filiba@emc.com"}, {"index": "281", "colour": "orange", "code": "    def _path_read(self, fn):\n", "error": "none", "author": "tomerfiliba@gmail.com"}, {"index": "282", "colour": "orange", "code": "        f = self.sftp.open(str(fn), 'rb')\n", "error": "none", "author": "tomerfiliba@gmail.com"}, {"index": "283", "colour": "orange", "code": "        data = f.read()\n", "error": "none", "author": "tomerfiliba@gmail.com"}, {"index": "284", "colour": "orange", "code": "        f.close()\n", "error": "none", "author": "tomerfiliba@gmail.com"}, {"index": "285", "colour": "orange", "code": "        return data\n", "error": "none", "author": "tomerfiliba@gmail.com"}, {"index": "286", "colour": "orange", "code": "    def _path_write(self, fn, data):\n", "error": "none", "author": "tomerfiliba@gmail.com"}, {"index": "287", "colour": "orange", "code": "        if self.encoding and isinstance(data, six.unicode_type):\n", "error": "none", "author": "tomerfiliba@gmail.com"}, {"index": "288", "colour": "orange", "code": "            data = data.encode(self.encoding)\n", "error": "none", "author": "tomerfiliba@gmail.com"}, {"index": "289", "colour": "orange", "code": "        f = self.sftp.open(str(fn), 'wb')\n", "error": "none", "author": "tomerfiliba@gmail.com"}, {"index": "290", "colour": "orange", "code": "        f.write(data)\n", "error": "none", "author": "tomerfiliba@gmail.com"}, {"index": "291", "colour": "orange", "code": "        f.close()\n", "error": "none", "author": "tomerfiliba@gmail.com"}, {"index": "292", "colour": "orange", "code": "\n", "error": "none", "author": "tomerfiliba@gmail.com"}, {"index": "293", "colour": "orange", "code": "\n", "error": "none", "author": "tomerfiliba@gmail.com"}, {"index": "294", "colour": "orange", "code": "\n", "error": "none", "author": "tomerfiliba@gmail.com"}, {"index": "295", "colour": "orange", "code": "###################################################################################################\n", "error": "none", "author": "tomerfiliba@gmail.com"}, {"index": "296", "colour": "orange", "code": "# Make paramiko.Channel adhere to the socket protocol, namely, send and recv should fail\n", "error": "none", "author": "tomer.filiba@emc.com"}, {"index": "297", "colour": "orange", "code": "# when the socket has been closed\n", "error": "none", "author": "tomerfiliba@gmail.com"}, {"index": "298", "colour": "orange", "code": "###################################################################################################\n", "error": "none", "author": "tomerfiliba@gmail.com"}, {"index": "299", "colour": "orange", "code": "class SocketCompatibleChannel(object):\n", "error": "none", "author": "tomerfiliba@gmail.com"}, {"index": "300", "colour": "orange", "code": "    def __init__(self, chan):\n", "error": "none", "author": "tomerfiliba@gmail.com"}, {"index": "301", "colour": "orange", "code": "        self._chan = chan\n", "error": "none", "author": "tomerfiliba@gmail.com"}, {"index": "302", "colour": "orange", "code": "    def __getattr__(self, name):\n", "error": "none", "author": "tomerfiliba@gmail.com"}, {"index": "303", "colour": "orange", "code": "        return getattr(self._chan, name)\n", "error": "none", "author": "tomerfiliba@gmail.com"}, {"index": "304", "colour": "orange", "code": "    def send(self, s):\n", "error": "none", "author": "tomerfiliba@gmail.com"}, {"index": "305", "colour": "orange", "code": "        if self._chan.closed:\n", "error": "none", "author": "tomerfiliba@gmail.com"}, {"index": "306", "colour": "orange", "code": "            raise socket.error(errno.EBADF, 'Bad file descriptor')\n", "error": "none", "author": "tomerfiliba@gmail.com"}, {"index": "307", "colour": "orange", "code": "        return self._chan.send(s)\n", "error": "none", "author": "tomerfiliba@gmail.com"}, {"index": "308", "colour": "orange", "code": "    def recv(self, count):\n", "error": "none", "author": "tomerfiliba@gmail.com"}, {"index": "309", "colour": "orange", "code": "        if self._chan.closed:\n", "error": "none", "author": "tomerfiliba@gmail.com"}, {"index": "310", "colour": "orange", "code": "            raise socket.error(errno.EBADF, 'Bad file descriptor')\n", "error": "none", "author": "tomerfiliba@gmail.com"}, {"index": "311", "colour": "orange", "code": "        return self._chan.recv(count)\n", "error": "none", "author": "tomerfiliba@gmail.com"}, {"index": "312", "colour": "orange", "code": "\n", "error": "none", "author": "tomerfiliba@gmail.com"}, {"index": "313", "colour": "orange", "code": "\n", "error": "none", "author": "tomerfiliba@gmail.com"}, {"index": "314", "colour": "orange", "code": "\n", "error": "none", "author": "tomerfiliba@gmail.com"}]}