{"path": "/home/asumal/git/cs410/plumbum/plumbum/path/local.py", "lines": [[{"error": "C", "line": "1", "code": "from __future__ import with_statement\n", "colour": "blue", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "2", "code": "import os\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "3", "code": "import sys\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "4", "code": "import glob\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "5", "code": "import shutil\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "6", "code": "import errno\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "7", "code": "import logging\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "8", "code": "from contextlib import contextmanager\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "9", "code": "from plumbum.lib import _setdoc, IS_WIN32\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "10", "code": "from plumbum.path.base import Path, FSUser\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "11", "code": "from plumbum.path.remote import RemotePath\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "12", "code": "try:\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "13", "code": "    from pwd import getpwuid, getpwnam\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "14", "code": "    from grp import getgrgid, getgrnam\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "15", "code": "except ImportError:\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "W", "line": "16", "code": "    def getpwuid(x):\n", "colour": "purple", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "17", "code": "        return (None,)\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "W", "line": "18", "code": "    def getgrgid(x):\n", "colour": "purple", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "19", "code": "        return (None,)\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "W", "line": "20", "code": "    def getpwnam(x):\n", "colour": "purple", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "21", "code": "        raise OSError(\"`getpwnam` not supported\")\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "W", "line": "22", "code": "    def getgrnam(x):\n", "colour": "purple", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "23", "code": "        raise OSError(\"`getgrnam` not supported\")\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "24", "code": "\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "C", "line": "25", "code": "logger = logging.getLogger(\"plumbum.local\")\n", "colour": "blue", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "26", "code": "\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "27", "code": "\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "C", "line": "28", "code": "#===================================================================================================\n", "colour": "blue", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "29", "code": "# Local Paths\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "C", "line": "30", "code": "#===================================================================================================\n", "colour": "blue", "author": "Tomer.Filiba@emc.com"}, {"error": "R", "line": "31", "code": "class LocalPath(Path):\n", "colour": "green", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "32", "code": "    \"\"\"The class implementing local-machine paths\"\"\"\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "33", "code": "\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "34", "code": "    __slots__ = [\"_path\"]\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "35", "code": "    CASE_SENSITIVE = not IS_WIN32\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "36", "code": "\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "37", "code": "    def __init__(self, *parts):\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "38", "code": "        if not parts:\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "39", "code": "            raise TypeError(\"At least one path part is require (none given)\")\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "40", "code": "        if any(isinstance(path, RemotePath) for path in parts):\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "C", "line": "41", "code": "            raise TypeError(\"LocalPath cannot be constructed from %r\" % (parts,))\n", "colour": "blue", "author": "Tomer.Filiba@emc.com"}, {"error": "W", "line": "42", "code": "        self._path = os.path.normpath(os.path.join(*(str(p) for p in parts)))\n", "colour": "purple", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "43", "code": "    def __new__(cls, *parts):\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "44", "code": "        if len(parts) == 1 and \\\n", "colour": "black", "author": "boolegue@yahoo.com"}, {"error": "none", "line": "45", "code": "                isinstance(parts[0], cls) and \\\n", "colour": "black", "author": "boolegue@yahoo.com"}, {"error": "none", "line": "46", "code": "                not isinstance(parts[0], LocalWorkdir):\n", "colour": "black", "author": "boolegue@yahoo.com"}, {"error": "none", "line": "47", "code": "            return parts[0]\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "48", "code": "        return object.__new__(cls)\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "49", "code": "    def __str__(self):\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "50", "code": "        return self._path\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "51", "code": "    def _get_info(self):\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "52", "code": "        return self._path\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "53", "code": "    def __getstate__(self):\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "54", "code": "        return {\"_path\" : self._path}\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "55", "code": "\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "56", "code": "    def _form(self, *parts):\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "57", "code": "        return LocalPath(*parts)\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "58", "code": "\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "59", "code": "    @property\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "60", "code": "    @_setdoc(Path)\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "61", "code": "    def basename(self):\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "62", "code": "        return os.path.basename(str(self))\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "63", "code": "\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "64", "code": "    @property\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "65", "code": "    @_setdoc(Path)\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "66", "code": "    def dirname(self):\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "67", "code": "        return LocalPath(os.path.dirname(str(self)))\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "68", "code": "\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "69", "code": "    @property\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "70", "code": "    @_setdoc(Path)\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "71", "code": "    def uid(self):\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "72", "code": "        uid = self.stat().st_uid\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "73", "code": "        name = getpwuid(uid)[0]\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "74", "code": "        return FSUser(uid, name)\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "75", "code": "\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "76", "code": "    @property\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "77", "code": "    @_setdoc(Path)\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "78", "code": "    def gid(self):\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "79", "code": "        gid = self.stat().st_gid\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "80", "code": "        name = getgrgid(gid)[0]\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "81", "code": "        return FSUser(gid, name)\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "82", "code": "\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "83", "code": "    @_setdoc(Path)\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "84", "code": "    def join(self, *others):\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "85", "code": "        return LocalPath(self, *others)\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "86", "code": "\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "87", "code": "    @_setdoc(Path)\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "88", "code": "    def list(self):\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "89", "code": "        return [self / fn for fn in os.listdir(str(self))]\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "90", "code": "\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "91", "code": "    @_setdoc(Path)\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "92", "code": "    def isdir(self):\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "93", "code": "        return os.path.isdir(str(self))\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "94", "code": "\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "95", "code": "    @_setdoc(Path)\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "96", "code": "    def isfile(self):\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "97", "code": "        return os.path.isfile(str(self))\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "98", "code": "\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "99", "code": "    @_setdoc(Path)\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "100", "code": "    def islink(self):\n", "colour": "black", "author": "antoine.dechaume@sogeti.com"}, {"error": "none", "line": "101", "code": "        return os.path.islink(str(self))\n", "colour": "black", "author": "antoine.dechaume@sogeti.com"}, {"error": "none", "line": "102", "code": "\n", "colour": "black", "author": "antoine.dechaume@sogeti.com"}, {"error": "none", "line": "103", "code": "    @_setdoc(Path)\n", "colour": "black", "author": "antoine.dechaume@sogeti.com"}, {"error": "none", "line": "104", "code": "    def exists(self):\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "105", "code": "        return os.path.exists(str(self))\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "106", "code": "\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "107", "code": "    @_setdoc(Path)\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "108", "code": "    def stat(self):\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "109", "code": "        return os.stat(str(self))\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "110", "code": "\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "111", "code": "    @_setdoc(Path)\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "112", "code": "    def glob(self, pattern):\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "113", "code": "        return [LocalPath(fn) for fn in glob.glob(str(self / pattern))]\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "114", "code": "\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "115", "code": "    @_setdoc(Path)\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "116", "code": "    def delete(self):\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "117", "code": "        if not self.exists():\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "118", "code": "            return\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "119", "code": "        if self.isdir():\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "120", "code": "            shutil.rmtree(str(self))\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "121", "code": "        else:\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "122", "code": "            try:\n", "colour": "black", "author": "antoine.dechaume@sogeti.com"}, {"error": "none", "line": "123", "code": "                os.remove(str(self))\n", "colour": "black", "author": "antoine.dechaume@sogeti.com"}, {"error": "none", "line": "124", "code": "            except OSError:\n", "colour": "black", "author": "antoine.dechaume@sogeti.com"}, {"error": "C", "line": "125", "code": "                # file might already been removed (a race with other threads/processes)\n", "colour": "blue", "author": "antoine.dechaume@sogeti.com"}, {"error": "none", "line": "126", "code": "                _, ex, _ = sys.exc_info()\n", "colour": "black", "author": "antoine.dechaume@sogeti.com"}, {"error": "none", "line": "127", "code": "                if ex.errno != errno.ENOENT:\n", "colour": "black", "author": "antoine.dechaume@sogeti.com"}, {"error": "none", "line": "128", "code": "                    raise\n", "colour": "black", "author": "antoine.dechaume@sogeti.com"}, {"error": "none", "line": "129", "code": "\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "130", "code": "    @_setdoc(Path)\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "131", "code": "    def move(self, dst):\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "132", "code": "        if isinstance(dst, RemotePath):\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "133", "code": "            raise TypeError(\"Cannot move local path %s to %r\" % (self, dst))\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "134", "code": "        shutil.move(str(self), str(dst))\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "135", "code": "        return LocalPath(dst)\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "136", "code": "\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "137", "code": "    @_setdoc(Path)\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "C", "line": "138", "code": "    def copy(self, dst, override = False):\n", "colour": "blue", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "139", "code": "        if isinstance(dst, RemotePath):\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "140", "code": "            raise TypeError(\"Cannot copy local path %s to %r\" % (self, dst))\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "141", "code": "        dst = LocalPath(dst)\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "142", "code": "        if override:\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "143", "code": "            dst.delete()\n", "colour": "black", "author": "tomerfiliba@gmail.com"}, {"error": "none", "line": "144", "code": "        if self.isdir():\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "145", "code": "            shutil.copytree(str(self), str(dst))\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "146", "code": "        else:\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "147", "code": "            dst_dir = LocalPath(dst).dirname\n", "colour": "black", "author": "tomerfiliba@gmail.com"}, {"error": "none", "line": "148", "code": "            if not dst_dir.exists():\n", "colour": "black", "author": "tomerfiliba@gmail.com"}, {"error": "none", "line": "149", "code": "                dst_dir.mkdir()\n", "colour": "black", "author": "tomerfiliba@gmail.com"}, {"error": "none", "line": "150", "code": "            shutil.copy2(str(self), str(dst))\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "151", "code": "        return dst\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "152", "code": "\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "153", "code": "    @_setdoc(Path)\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "154", "code": "    def mkdir(self):\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "155", "code": "        if not self.exists():\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "156", "code": "            try:\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "157", "code": "                os.makedirs(str(self))\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "158", "code": "            except OSError:\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "C", "line": "159", "code": "                # directory might already exist (a race with other threads/processes)\n", "colour": "blue", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "160", "code": "                _, ex, _ = sys.exc_info()\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "161", "code": "                if ex.errno != errno.EEXIST:\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "162", "code": "                    raise\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "163", "code": "\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "164", "code": "    @_setdoc(Path)\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "C", "line": "165", "code": "    def open(self, mode = \"rb\"):\n", "colour": "blue", "author": "tomerfiliba@gmail.com"}, {"error": "none", "line": "166", "code": "        return open(str(self), mode)\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "167", "code": "\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "168", "code": "    @_setdoc(Path)\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "169", "code": "    def read(self, encoding=None):\n", "colour": "black", "author": "tomerfiliba@gmail.com"}, {"error": "C", "line": "170", "code": "        with self.open(\"rb\") as f:\n", "colour": "blue", "author": "tomerfiliba@gmail.com"}, {"error": "none", "line": "171", "code": "            data = f.read()\n", "colour": "black", "author": "tomerfiliba@gmail.com"}, {"error": "none", "line": "172", "code": "            if encoding:\n", "colour": "black", "author": "tomerfiliba@gmail.com"}, {"error": "none", "line": "173", "code": "                data = data.decode(encoding)\n", "colour": "black", "author": "tomerfiliba@gmail.com"}, {"error": "none", "line": "174", "code": "            return data\n", "colour": "black", "author": "tomerfiliba@gmail.com"}, {"error": "none", "line": "175", "code": "\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "176", "code": "    @_setdoc(Path)\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "177", "code": "    def write(self, data, encoding=None):\n", "colour": "black", "author": "tomerfiliba@gmail.com"}, {"error": "none", "line": "178", "code": "        if encoding:\n", "colour": "black", "author": "tomerfiliba@gmail.com"}, {"error": "none", "line": "179", "code": "            data = data.encode(encoding)\n", "colour": "black", "author": "tomerfiliba@gmail.com"}, {"error": "C", "line": "180", "code": "        with self.open(\"wb\") as f:\n", "colour": "blue", "author": "tomerfiliba@gmail.com"}, {"error": "none", "line": "181", "code": "            f.write(data)\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "182", "code": "\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "183", "code": "    @_setdoc(Path)\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "C", "line": "184", "code": "    def chown(self, owner = None, group = None, recursive = None):\n", "colour": "blue", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "185", "code": "        if not hasattr(os, \"chown\"):\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "186", "code": "            raise OSError(\"os.chown() not supported\")\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "C", "line": "187", "code": "        uid = self.uid if owner is None else (owner if isinstance(owner, int) else getpwnam(owner)[2])\n", "colour": "blue", "author": "Tomer.Filiba@emc.com"}, {"error": "C", "line": "188", "code": "        gid = self.gid if group is None else (group if isinstance(group, int) else getgrnam(group)[2])\n", "colour": "blue", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "189", "code": "        os.chown(str(self), uid, gid)\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "190", "code": "        if recursive or (recursive is None and self.isdir()):\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "191", "code": "            for subpath in self.walk():\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "192", "code": "                os.chown(str(subpath), uid, gid)\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "193", "code": "\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "194", "code": "    @_setdoc(Path)\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "195", "code": "    def chmod(self, mode):\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "196", "code": "        if not hasattr(os, \"chmod\"):\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "197", "code": "            raise OSError(\"os.chmod() not supported\")\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "198", "code": "        os.chmod(str(self), mode)\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "199", "code": "\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "200", "code": "    @_setdoc(Path)\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "C", "line": "201", "code": "    def access(self, mode = 0):\n", "colour": "blue", "author": "tomer.filiba@emc.com"}, {"error": "none", "line": "202", "code": "        return os.access(str(self), self._access_mode_to_flags(mode))\n", "colour": "black", "author": "tomer.filiba@emc.com"}, {"error": "none", "line": "203", "code": "\n", "colour": "black", "author": "tomer.filiba@emc.com"}, {"error": "none", "line": "204", "code": "    @_setdoc(Path)\n", "colour": "black", "author": "tomer.filiba@emc.com"}, {"error": "none", "line": "205", "code": "    def link(self, dst):\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "206", "code": "        if isinstance(dst, RemotePath):\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "C", "line": "207", "code": "            raise TypeError(\"Cannot create a hardlink from local path %s to %r\" % (self, dst))\n", "colour": "blue", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "208", "code": "        if hasattr(os, \"link\"):\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "209", "code": "            os.link(str(self), str(dst))\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "210", "code": "        else:\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "211", "code": "            from plumbum.machines.local import local\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "212", "code": "            # windows: use mklink\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "213", "code": "            if self.isdir():\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "214", "code": "                local[\"cmd\"](\"/C\", \"mklink\", \"/D\", \"/H\", str(dst), str(self))\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "215", "code": "            else:\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "216", "code": "                local[\"cmd\"](\"/C\", \"mklink\", \"/H\", str(dst), str(self))\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "217", "code": "\n", "colour": "black", "author": "antoine.dechaume@sogeti.com"}, {"error": "none", "line": "218", "code": "    @_setdoc(Path)\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "219", "code": "    def symlink(self, dst):\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "220", "code": "        if isinstance(dst, RemotePath):\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "C", "line": "221", "code": "            raise TypeError(\"Cannot create a symlink from local path %s to %r\" % (self, dst))\n", "colour": "blue", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "222", "code": "        if hasattr(os, \"symlink\"):\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "223", "code": "            os.symlink(str(self), str(dst))\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "224", "code": "        else:\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "225", "code": "            from plumbum.machines.local import local\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "226", "code": "            # windows: use mklink\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "227", "code": "            if self.isdir():\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "228", "code": "                local[\"cmd\"](\"/C\", \"mklink\", \"/D\", str(dst), str(self))\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "229", "code": "            else:\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "230", "code": "                local[\"cmd\"](\"/C\", \"mklink\", str(dst), str(self))\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "231", "code": "\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "232", "code": "    @_setdoc(Path)\n", "colour": "black", "author": "antoine.dechaume@sogeti.com"}, {"error": "none", "line": "233", "code": "    def unlink(self):\n", "colour": "black", "author": "antoine.dechaume@sogeti.com"}, {"error": "none", "line": "234", "code": "        try:\n", "colour": "black", "author": "antoine.dechaume@sogeti.com"}, {"error": "none", "line": "235", "code": "            os.unlink(str(self))\n", "colour": "black", "author": "antoine.dechaume@sogeti.com"}, {"error": "none", "line": "236", "code": "        except OSError:\n", "colour": "black", "author": "antoine.dechaume@sogeti.com"}, {"error": "C", "line": "237", "code": "            # file might already been removed (a race with other threads/processes)\n", "colour": "blue", "author": "antoine.dechaume@sogeti.com"}, {"error": "none", "line": "238", "code": "            _, ex, _ = sys.exc_info()\n", "colour": "black", "author": "antoine.dechaume@sogeti.com"}, {"error": "none", "line": "239", "code": "            if ex.errno != errno.ENOENT:\n", "colour": "black", "author": "antoine.dechaume@sogeti.com"}, {"error": "none", "line": "240", "code": "                raise\n", "colour": "black", "author": "antoine.dechaume@sogeti.com"}, {"error": "none", "line": "241", "code": "\n", "colour": "black", "author": "antoine.dechaume@sogeti.com"}, {"error": "none", "line": "242", "code": "\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "R", "line": "243", "code": "class LocalWorkdir(LocalPath):\n", "colour": "green", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "244", "code": "    \"\"\"Working directory manipulator\"\"\"\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "245", "code": "\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "246", "code": "    __slots__ = []\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "247", "code": "    def __init__(self):\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "248", "code": "        LocalPath.__init__(self, os.getcwd())\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "249", "code": "    def __hash__(self):\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "250", "code": "        raise TypeError(\"unhashable type\")\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "251", "code": "    def __new__(cls):\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "252", "code": "        return object.__new__(cls)\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "253", "code": "\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "254", "code": "    def chdir(self, newdir):\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "255", "code": "        \"\"\"Changes the current working directory to the given one\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "256", "code": "\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "257", "code": "        :param newdir: The destination director (a string or a ``LocalPath``)\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "258", "code": "        \"\"\"\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "259", "code": "        if isinstance(newdir, RemotePath):\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "260", "code": "            raise TypeError(\"newdir cannot be %r\" % (newdir,))\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "261", "code": "        logger.debug(\"Chdir to %s\", newdir)\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "262", "code": "        os.chdir(str(newdir))\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "263", "code": "        self._path = os.path.normpath(os.getcwd())\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "264", "code": "    def getpath(self):\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "265", "code": "        \"\"\"Returns the current working directory as a ``LocalPath`` object\"\"\"\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "266", "code": "        return LocalPath(self._path)\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "267", "code": "    @contextmanager\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "268", "code": "    def __call__(self, newdir):\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "C", "line": "269", "code": "        \"\"\"A context manager used to ``chdir`` into a directory and then ``chdir`` back to\n", "colour": "blue", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "270", "code": "        the previous location; much like ``pushd``/``popd``.\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "271", "code": "\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "272", "code": "        :param newdir: The destination director (a string or a ``LocalPath``)\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "273", "code": "        \"\"\"\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "274", "code": "        prev = self._path\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "275", "code": "        self.chdir(newdir)\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "276", "code": "        try:\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "277", "code": "            yield\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "278", "code": "        finally:\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "279", "code": "            self.chdir(prev)\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "280", "code": "\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "281", "code": "\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}]]}