{"path": "/home/asumal/git/cs410/plumbum/plumbum/fs/atomic.py", "lines": [[{"index": "1", "colour": "orange", "code": "\"\"\"\n", "error": "none", "author": "Tomer.Filiba@emc.com"}, {"index": "2", "colour": "orange", "code": "Atomic file operations\n", "error": "none", "author": "Tomer.Filiba@emc.com"}, {"index": "3", "colour": "orange", "code": "\"\"\"\n", "error": "none", "author": "Tomer.Filiba@emc.com"}, {"index": "4", "colour": "orange", "code": "\n", "error": "none", "author": "Tomer.Filiba@emc.com"}, {"index": "5", "colour": "orange", "code": "from __future__ import with_statement\n", "error": "none", "author": "Tomer.Filiba@emc.com"}, {"index": "6", "colour": "orange", "code": "import os\n", "error": "none", "author": "Tomer.Filiba@emc.com"}, {"index": "7", "colour": "orange", "code": "import threading\n", "error": "none", "author": "Tomer.Filiba@emc.com"}, {"index": "8", "colour": "orange", "code": "import sys\n", "error": "none", "author": "Tomer.Filiba@emc.com"}, {"index": "9", "colour": "orange", "code": "import atexit\n", "error": "none", "author": "Tomer.Filiba@emc.com"}, {"index": "10", "colour": "orange", "code": "from contextlib import contextmanager\n", "error": "none", "author": "Tomer.Filiba@emc.com"}, {"index": "11", "colour": "orange", "code": "from plumbum.machines.local import local\n", "error": "none", "author": "Tomer.Filiba@emc.com"}, {"index": "12", "colour": "orange", "code": "from plumbum.lib import six\n", "error": "none", "author": "tomerfiliba@gmail.com"}, {"index": "13", "colour": "orange", "code": "\n", "error": "none", "author": "tomerfiliba@gmail.com"}, {"index": "14", "colour": "orange", "code": "\n", "error": "none", "author": "Tomer.Filiba@emc.com"}, {"index": "15", "colour": "orange", "code": "if not hasattr(threading, \"get_ident\"):\n", "error": "none", "author": "Tomer.Filiba@emc.com"}, {"index": "16", "colour": "orange", "code": "    try:\n", "error": "none", "author": "Tomer.Filiba@emc.com"}, {"index": "17", "colour": "orange", "code": "        import thread\n", "error": "none", "author": "Tomer.Filiba@emc.com"}, {"index": "18", "colour": "orange", "code": "    except ImportError:\n", "error": "none", "author": "Tomer.Filiba@emc.com"}, {"index": "19", "colour": "orange", "code": "        import _thread as thread\n", "error": "none", "author": "Tomer.Filiba@emc.com"}, {"index": "20", "colour": "orange", "code": "    threading.get_ident = thread.get_ident\n", "error": "none", "author": "Tomer.Filiba@emc.com"}, {"index": "21", "colour": "orange", "code": "    del thread\n", "error": "none", "author": "Tomer.Filiba@emc.com"}, {"index": "22", "colour": "orange", "code": "\n", "error": "none", "author": "Tomer.Filiba@emc.com"}, {"index": "23", "colour": "orange", "code": "\n", "error": "none", "author": "Tomer.Filiba@emc.com"}, {"index": "24", "colour": "orange", "code": "try:\n", "error": "none", "author": "Tomer.Filiba@emc.com"}, {"index": "25", "colour": "orange", "code": "    import fcntl\n", "error": "none", "author": "Tomer.Filiba@emc.com"}, {"index": "26", "colour": "orange", "code": "except ImportError:\n", "error": "none", "author": "Tomer.Filiba@emc.com"}, {"index": "27", "colour": "orange", "code": "    import msvcrt\n", "error": "none", "author": "Tomer.Filiba@emc.com"}, {"index": "28", "colour": "orange", "code": "    try:\n", "error": "none", "author": "Tomer.Filiba@emc.com"}, {"index": "29", "colour": "orange", "code": "        from pywintypes import error as WinError\n", "error": "none", "author": "tomer.filiba@emc.com"}, {"index": "30", "colour": "orange", "code": "        from win32file import LockFileEx, UnlockFile, OVERLAPPED\n", "error": "none", "author": "Tomer.Filiba@emc.com"}, {"index": "31", "colour": "orange", "code": "        from win32con import LOCKFILE_EXCLUSIVE_LOCK, LOCKFILE_FAIL_IMMEDIATELY\n", "error": "none", "author": "Tomer.Filiba@emc.com"}, {"index": "32", "colour": "orange", "code": "    except ImportError:\n", "error": "none", "author": "Tomer.Filiba@emc.com"}, {"index": "33", "colour": "orange", "code": "        raise ImportError(\"On Windows, we require Python for Windows Extensions (pywin32)\")\n", "error": "none", "author": "Tomer.Filiba@emc.com"}, {"index": "34", "colour": "orange", "code": "    \n", "error": "none", "author": "Tomer.Filiba@emc.com"}, {"index": "35", "colour": "orange", "code": "    @contextmanager\n", "error": "none", "author": "Tomer.Filiba@emc.com"}, {"index": "36", "colour": "orange", "code": "    def locked_file(fileno, blocking = True):\n", "error": "none", "author": "Tomer.Filiba@emc.com"}, {"index": "37", "colour": "orange", "code": "        hndl = msvcrt.get_osfhandle(fileno)\n", "error": "none", "author": "Tomer.Filiba@emc.com"}, {"index": "38", "colour": "orange", "code": "        try:\n", "error": "none", "author": "Tomer.Filiba@emc.com"}, {"index": "39", "colour": "orange", "code": "            LockFileEx(hndl, LOCKFILE_EXCLUSIVE_LOCK | (0 if blocking else LOCKFILE_FAIL_IMMEDIATELY), \n", "error": "none", "author": "Tomer.Filiba@emc.com"}, {"index": "40", "colour": "orange", "code": "                0xffffffff, 0xffffffff, OVERLAPPED())\n", "error": "none", "author": "Tomer.Filiba@emc.com"}, {"index": "41", "colour": "orange", "code": "        except WinError:\n", "error": "none", "author": "Tomer.Filiba@emc.com"}, {"index": "42", "colour": "orange", "code": "            _, ex, _ = sys.exc_info()\n", "error": "none", "author": "Tomer.Filiba@emc.com"}, {"index": "43", "colour": "red", "code": "            raise WindowsError(*ex.args)\n", "error": "E", "author": "Tomer.Filiba@emc.com"}, {"index": "44", "colour": "orange", "code": "        try:\n", "error": "none", "author": "Tomer.Filiba@emc.com"}, {"index": "45", "colour": "orange", "code": "            yield\n", "error": "none", "author": "Tomer.Filiba@emc.com"}, {"index": "46", "colour": "orange", "code": "        finally:\n", "error": "none", "author": "Tomer.Filiba@emc.com"}, {"index": "47", "colour": "orange", "code": "            UnlockFile(hndl, 0, 0, 0xffffffff, 0xffffffff)\n", "error": "none", "author": "Tomer.Filiba@emc.com"}, {"index": "48", "colour": "orange", "code": "else:\n", "error": "none", "author": "Tomer.Filiba@emc.com"}, {"index": "49", "colour": "orange", "code": "    if hasattr(fcntl, \"lockf\"):\n", "error": "none", "author": "Tomer.Filiba@emc.com"}, {"index": "50", "colour": "orange", "code": "        @contextmanager\n", "error": "none", "author": "Tomer.Filiba@emc.com"}, {"index": "51", "colour": "orange", "code": "        def locked_file(fileno, blocking = True):\n", "error": "none", "author": "Tomer.Filiba@emc.com"}, {"index": "52", "colour": "orange", "code": "            fcntl.lockf(fileno, fcntl.LOCK_EX | (0 if blocking else fcntl.LOCK_NB))\n", "error": "none", "author": "Tomer.Filiba@emc.com"}, {"index": "53", "colour": "orange", "code": "            try:\n", "error": "none", "author": "Tomer.Filiba@emc.com"}, {"index": "54", "colour": "orange", "code": "                yield\n", "error": "none", "author": "Tomer.Filiba@emc.com"}, {"index": "55", "colour": "orange", "code": "            finally:\n", "error": "none", "author": "Tomer.Filiba@emc.com"}, {"index": "56", "colour": "orange", "code": "                fcntl.lockf(fileno, fcntl.LOCK_UN)\n", "error": "none", "author": "Tomer.Filiba@emc.com"}, {"index": "57", "colour": "orange", "code": "    else:\n", "error": "none", "author": "Tomer.Filiba@emc.com"}, {"index": "58", "colour": "orange", "code": "        @contextmanager\n", "error": "none", "author": "Tomer.Filiba@emc.com"}, {"index": "59", "colour": "orange", "code": "        def locked_file(fileno, blocking = True):\n", "error": "none", "author": "Tomer.Filiba@emc.com"}, {"index": "60", "colour": "orange", "code": "            fcntl.flock(fileno, fcntl.LOCK_EX | (0 if blocking else fcntl.LOCK_NB))\n", "error": "none", "author": "Tomer.Filiba@emc.com"}, {"index": "61", "colour": "orange", "code": "            try:\n", "error": "none", "author": "Tomer.Filiba@emc.com"}, {"index": "62", "colour": "orange", "code": "                yield\n", "error": "none", "author": "Tomer.Filiba@emc.com"}, {"index": "63", "colour": "orange", "code": "            finally:\n", "error": "none", "author": "Tomer.Filiba@emc.com"}, {"index": "64", "colour": "orange", "code": "                fcntl.flock(fileno, fcntl.LOCK_UN)\n", "error": "none", "author": "Tomer.Filiba@emc.com"}, {"index": "65", "colour": "orange", "code": "\n", "error": "none", "author": "Tomer.Filiba@emc.com"}, {"index": "66", "colour": "orange", "code": "\n", "error": "none", "author": "Tomer.Filiba@emc.com"}, {"index": "67", "colour": "orange", "code": "class AtomicFile(object):\n", "error": "none", "author": "Tomer.Filiba@emc.com"}, {"index": "68", "colour": "orange", "code": "    \"\"\"\n", "error": "none", "author": "Tomer.Filiba@emc.com"}, {"index": "69", "colour": "orange", "code": "    Atomic file operations implemented using file-system advisory locks (``flock`` on POSIX,\n", "error": "none", "author": "Tomer.Filiba@emc.com"}, {"index": "70", "colour": "orange", "code": "    ``LockFile`` on Windows).\n", "error": "none", "author": "Tomer.Filiba@emc.com"}, {"index": "71", "colour": "orange", "code": "\n", "error": "none", "author": "Tomer.Filiba@emc.com"}, {"index": "72", "colour": "orange", "code": "    .. note::\n", "error": "none", "author": "Tomer.Filiba@emc.com"}, {"index": "73", "colour": "orange", "code": "        On Linux, the manpage says ``flock`` might have issues with NFS mounts. You should\n", "error": "none", "author": "Tomer.Filiba@emc.com"}, {"index": "74", "colour": "orange", "code": "        take this into account.\n", "error": "none", "author": "Tomer.Filiba@emc.com"}, {"index": "75", "colour": "orange", "code": "\n", "error": "none", "author": "Tomer.Filiba@emc.com"}, {"index": "76", "colour": "orange", "code": "    .. versionadded:: 1.3\n", "error": "none", "author": "Tomer.Filiba@emc.com"}, {"index": "77", "colour": "orange", "code": "    \"\"\"\n", "error": "none", "author": "Tomer.Filiba@emc.com"}, {"index": "78", "colour": "orange", "code": "\n", "error": "none", "author": "Tomer.Filiba@emc.com"}, {"index": "79", "colour": "orange", "code": "    CHUNK_SIZE = 32 * 1024\n", "error": "none", "author": "Tomer.Filiba@emc.com"}, {"index": "80", "colour": "orange", "code": "    \n", "error": "none", "author": "Tomer.Filiba@emc.com"}, {"index": "81", "colour": "orange", "code": "    def __init__(self, filename, ignore_deletion = False):\n", "error": "none", "author": "Tomer.Filiba@emc.com"}, {"index": "82", "colour": "orange", "code": "        self.path = local.path(filename)\n", "error": "none", "author": "Tomer.Filiba@emc.com"}, {"index": "83", "colour": "orange", "code": "        self._ignore_deletion = ignore_deletion\n", "error": "none", "author": "Tomer.Filiba@emc.com"}, {"index": "84", "colour": "orange", "code": "        self._thdlock = threading.Lock()\n", "error": "none", "author": "Tomer.Filiba@emc.com"}, {"index": "85", "colour": "orange", "code": "        self._owned_by = None\n", "error": "none", "author": "Tomer.Filiba@emc.com"}, {"index": "86", "colour": "orange", "code": "        self._fileobj = None\n", "error": "none", "author": "Tomer.Filiba@emc.com"}, {"index": "87", "colour": "orange", "code": "        self.reopen()\n", "error": "none", "author": "Tomer.Filiba@emc.com"}, {"index": "88", "colour": "orange", "code": "\n", "error": "none", "author": "Tomer.Filiba@emc.com"}, {"index": "89", "colour": "orange", "code": "    def __repr__(self):\n", "error": "none", "author": "Tomer.Filiba@emc.com"}, {"index": "90", "colour": "orange", "code": "        return \"<AtomicFile: %s>\" % (self.path,) if self._fileobj else \"<AtomicFile: closed>\"\n", "error": "none", "author": "Tomer.Filiba@emc.com"}, {"index": "91", "colour": "orange", "code": "\n", "error": "none", "author": "Tomer.Filiba@emc.com"}, {"index": "92", "colour": "orange", "code": "    def __del__(self):\n", "error": "none", "author": "Tomer.Filiba@emc.com"}, {"index": "93", "colour": "orange", "code": "        self.close()\n", "error": "none", "author": "Tomer.Filiba@emc.com"}, {"index": "94", "colour": "orange", "code": "    def __enter__(self):\n", "error": "none", "author": "Tomer.Filiba@emc.com"}, {"index": "95", "colour": "orange", "code": "        return self\n", "error": "none", "author": "Tomer.Filiba@emc.com"}, {"index": "96", "colour": "orange", "code": "    def __exit__(self, t, v, tb):\n", "error": "none", "author": "Tomer.Filiba@emc.com"}, {"index": "97", "colour": "orange", "code": "        self.close()\n", "error": "none", "author": "Tomer.Filiba@emc.com"}, {"index": "98", "colour": "orange", "code": "    \n", "error": "none", "author": "Tomer.Filiba@emc.com"}, {"index": "99", "colour": "orange", "code": "    def close(self):\n", "error": "none", "author": "Tomer.Filiba@emc.com"}, {"index": "100", "colour": "orange", "code": "        if self._fileobj is not None:\n", "error": "none", "author": "Tomer.Filiba@emc.com"}, {"index": "101", "colour": "orange", "code": "            self._fileobj.close()\n", "error": "none", "author": "Tomer.Filiba@emc.com"}, {"index": "102", "colour": "orange", "code": "            self._fileobj = None\n", "error": "none", "author": "Tomer.Filiba@emc.com"}, {"index": "103", "colour": "orange", "code": "    \n", "error": "none", "author": "Tomer.Filiba@emc.com"}, {"index": "104", "colour": "orange", "code": "    def reopen(self):\n", "error": "none", "author": "Tomer.Filiba@emc.com"}, {"index": "105", "colour": "orange", "code": "        \"\"\"\n", "error": "none", "author": "Tomer.Filiba@emc.com"}, {"index": "106", "colour": "orange", "code": "        Close and reopen the file; useful when the file was deleted from the file system\n", "error": "none", "author": "Tomer.Filiba@emc.com"}, {"index": "107", "colour": "orange", "code": "        by a different process\n", "error": "none", "author": "Tomer.Filiba@emc.com"}, {"index": "108", "colour": "orange", "code": "        \"\"\"\n", "error": "none", "author": "Tomer.Filiba@emc.com"}, {"index": "109", "colour": "orange", "code": "        self.close()\n", "error": "none", "author": "Tomer.Filiba@emc.com"}, {"index": "110", "colour": "orange", "code": "        self._fileobj = os.fdopen(os.open(str(self.path), os.O_CREAT | os.O_RDWR, 384), \"r+b\", 0)\n", "error": "none", "author": "Tomer.Filiba@emc.com"}, {"index": "111", "colour": "orange", "code": "\n", "error": "none", "author": "Tomer.Filiba@emc.com"}, {"index": "112", "colour": "orange", "code": "    @contextmanager\n", "error": "none", "author": "Tomer.Filiba@emc.com"}, {"index": "113", "colour": "orange", "code": "    def locked(self, blocking = True):\n", "error": "none", "author": "Tomer.Filiba@emc.com"}, {"index": "114", "colour": "orange", "code": "        \"\"\"\n", "error": "none", "author": "Tomer.Filiba@emc.com"}, {"index": "115", "colour": "orange", "code": "        A context manager that locks the file; this function is reentrant by the thread currently\n", "error": "none", "author": "Tomer.Filiba@emc.com"}, {"index": "116", "colour": "orange", "code": "        holding the lock.\n", "error": "none", "author": "Tomer.Filiba@emc.com"}, {"index": "117", "colour": "orange", "code": "\n", "error": "none", "author": "Tomer.Filiba@emc.com"}, {"index": "118", "colour": "orange", "code": "        :param blocking: if ``True``, the call will block until we can grab the file system lock.\n", "error": "none", "author": "Tomer.Filiba@emc.com"}, {"index": "119", "colour": "orange", "code": "                         if ``False``, the call may fail immediately with the underlying exception\n", "error": "none", "author": "Tomer.Filiba@emc.com"}, {"index": "120", "colour": "orange", "code": "                         (``IOError`` or ``WindowsError``)\n", "error": "none", "author": "Tomer.Filiba@emc.com"}, {"index": "121", "colour": "orange", "code": "        \"\"\"\n", "error": "none", "author": "Tomer.Filiba@emc.com"}, {"index": "122", "colour": "orange", "code": "        if self._owned_by == threading.get_ident():\n", "error": "none", "author": "Tomer.Filiba@emc.com"}, {"index": "123", "colour": "orange", "code": "            yield\n", "error": "none", "author": "Tomer.Filiba@emc.com"}, {"index": "124", "colour": "orange", "code": "            return\n", "error": "none", "author": "Tomer.Filiba@emc.com"}, {"index": "125", "colour": "orange", "code": "        with self._thdlock:\n", "error": "none", "author": "Tomer.Filiba@emc.com"}, {"index": "126", "colour": "orange", "code": "            with locked_file(self._fileobj.fileno(), blocking):\n", "error": "none", "author": "Tomer.Filiba@emc.com"}, {"index": "127", "colour": "orange", "code": "                if not self.path.exists() and not self._ignore_deletion:\n", "error": "none", "author": "Tomer.Filiba@emc.com"}, {"index": "128", "colour": "orange", "code": "                    raise ValueError(\"Atomic file removed from filesystem\")\n", "error": "none", "author": "Tomer.Filiba@emc.com"}, {"index": "129", "colour": "orange", "code": "                self._owned_by = threading.get_ident()\n", "error": "none", "author": "Tomer.Filiba@emc.com"}, {"index": "130", "colour": "orange", "code": "                try:\n", "error": "none", "author": "Tomer.Filiba@emc.com"}, {"index": "131", "colour": "orange", "code": "                    yield\n", "error": "none", "author": "Tomer.Filiba@emc.com"}, {"index": "132", "colour": "orange", "code": "                finally:\n", "error": "none", "author": "Tomer.Filiba@emc.com"}, {"index": "133", "colour": "orange", "code": "                    self._owned_by = None\n", "error": "none", "author": "Tomer.Filiba@emc.com"}, {"index": "134", "colour": "orange", "code": "\n", "error": "none", "author": "Tomer.Filiba@emc.com"}, {"index": "135", "colour": "orange", "code": "    def delete(self):\n", "error": "none", "author": "Tomer.Filiba@emc.com"}, {"index": "136", "colour": "orange", "code": "        \"\"\"\n", "error": "none", "author": "Tomer.Filiba@emc.com"}, {"index": "137", "colour": "orange", "code": "        Atomically delete the file (holds the lock while doing it)\n", "error": "none", "author": "Tomer.Filiba@emc.com"}, {"index": "138", "colour": "orange", "code": "        \"\"\"\n", "error": "none", "author": "Tomer.Filiba@emc.com"}, {"index": "139", "colour": "orange", "code": "        with self.locked():\n", "error": "none", "author": "Tomer.Filiba@emc.com"}, {"index": "140", "colour": "orange", "code": "            self.path.delete()\n", "error": "none", "author": "Tomer.Filiba@emc.com"}, {"index": "141", "colour": "orange", "code": "\n", "error": "none", "author": "Tomer.Filiba@emc.com"}, {"index": "142", "colour": "orange", "code": "    def _read_all(self):\n", "error": "none", "author": "Tomer.Filiba@emc.com"}, {"index": "143", "colour": "orange", "code": "        self._fileobj.seek(0)\n", "error": "none", "author": "Tomer.Filiba@emc.com"}, {"index": "144", "colour": "orange", "code": "        data = []\n", "error": "none", "author": "Tomer.Filiba@emc.com"}, {"index": "145", "colour": "orange", "code": "        while True:\n", "error": "none", "author": "Tomer.Filiba@emc.com"}, {"index": "146", "colour": "orange", "code": "            buf = self._fileobj.read(self.CHUNK_SIZE)\n", "error": "none", "author": "Tomer.Filiba@emc.com"}, {"index": "147", "colour": "orange", "code": "            data.append(buf)\n", "error": "none", "author": "Tomer.Filiba@emc.com"}, {"index": "148", "colour": "orange", "code": "            if len(buf) < self.CHUNK_SIZE:\n", "error": "none", "author": "Tomer.Filiba@emc.com"}, {"index": "149", "colour": "orange", "code": "                break\n", "error": "none", "author": "Tomer.Filiba@emc.com"}, {"index": "150", "colour": "orange", "code": "        return six.b(\"\").join(data)\n", "error": "none", "author": "Tomer.Filiba@emc.com"}, {"index": "151", "colour": "orange", "code": "        \n", "error": "none", "author": "Tomer.Filiba@emc.com"}, {"index": "152", "colour": "orange", "code": "    def read_atomic(self):\n", "error": "none", "author": "Tomer.Filiba@emc.com"}, {"index": "153", "colour": "orange", "code": "        \"\"\"Atomically read the entire file\"\"\"\n", "error": "none", "author": "Tomer.Filiba@emc.com"}, {"index": "154", "colour": "orange", "code": "        with self.locked():\n", "error": "none", "author": "Tomer.Filiba@emc.com"}, {"index": "155", "colour": "orange", "code": "            return self._read_all()\n", "error": "none", "author": "Tomer.Filiba@emc.com"}, {"index": "156", "colour": "orange", "code": "\n", "error": "none", "author": "Tomer.Filiba@emc.com"}, {"index": "157", "colour": "orange", "code": "    def read_shared(self):\n", "error": "none", "author": "Tomer.Filiba@emc.com"}, {"index": "158", "colour": "orange", "code": "        \"\"\"Read the file **without** holding the lock\"\"\"\n", "error": "none", "author": "Tomer.Filiba@emc.com"}, {"index": "159", "colour": "orange", "code": "        return self._read_all()\n", "error": "none", "author": "Tomer.Filiba@emc.com"}, {"index": "160", "colour": "orange", "code": "\n", "error": "none", "author": "Tomer.Filiba@emc.com"}, {"index": "161", "colour": "orange", "code": "    def write_atomic(self, data):\n", "error": "none", "author": "Tomer.Filiba@emc.com"}, {"index": "162", "colour": "orange", "code": "        \"\"\"Writes the given data atomically to the file. Note that it overwrites the entire file;\n", "error": "none", "author": "Tomer.Filiba@emc.com"}, {"index": "163", "colour": "orange", "code": "        ``write_atomic(\"foo\")`` followed by ``write_atomic(\"bar\")`` will result in only ``\"bar\"``.\n", "error": "none", "author": "Tomer.Filiba@emc.com"}, {"index": "164", "colour": "orange", "code": "        \"\"\"\n", "error": "none", "author": "Tomer.Filiba@emc.com"}, {"index": "165", "colour": "orange", "code": "        with self.locked():\n", "error": "none", "author": "Tomer.Filiba@emc.com"}, {"index": "166", "colour": "orange", "code": "            self._fileobj.seek(0)\n", "error": "none", "author": "Tomer.Filiba@emc.com"}, {"index": "167", "colour": "orange", "code": "            while data:\n", "error": "none", "author": "Tomer.Filiba@emc.com"}, {"index": "168", "colour": "orange", "code": "                chunk = data[:self.CHUNK_SIZE]\n", "error": "none", "author": "Tomer.Filiba@emc.com"}, {"index": "169", "colour": "orange", "code": "                self._fileobj.write(chunk)\n", "error": "none", "author": "Tomer.Filiba@emc.com"}, {"index": "170", "colour": "orange", "code": "                data = data[len(chunk):]\n", "error": "none", "author": "Tomer.Filiba@emc.com"}, {"index": "171", "colour": "orange", "code": "            self._fileobj.flush()\n", "error": "none", "author": "Tomer.Filiba@emc.com"}, {"index": "172", "colour": "orange", "code": "            self._fileobj.truncate()\n", "error": "none", "author": "Tomer.Filiba@emc.com"}, {"index": "173", "colour": "orange", "code": "\n", "error": "none", "author": "Tomer.Filiba@emc.com"}, {"index": "174", "colour": "orange", "code": "\n", "error": "none", "author": "Tomer.Filiba@emc.com"}, {"index": "175", "colour": "orange", "code": "class AtomicCounterFile(object):\n", "error": "none", "author": "Tomer.Filiba@emc.com"}, {"index": "176", "colour": "orange", "code": "    \"\"\"\n", "error": "none", "author": "Tomer.Filiba@emc.com"}, {"index": "177", "colour": "orange", "code": "    An atomic counter based on AtomicFile. Each time you call ``next()``, it will\n", "error": "none", "author": "Tomer.Filiba@emc.com"}, {"index": "178", "colour": "orange", "code": "    atomically read and increment the counter's value, returning its previous value\n", "error": "none", "author": "Tomer.Filiba@emc.com"}, {"index": "179", "colour": "orange", "code": "\n", "error": "none", "author": "Tomer.Filiba@emc.com"}, {"index": "180", "colour": "orange", "code": "    Example::\n", "error": "none", "author": "Tomer.Filiba@emc.com"}, {"index": "181", "colour": "orange", "code": "\n", "error": "none", "author": "Tomer.Filiba@emc.com"}, {"index": "182", "colour": "orange", "code": "        acf = AtomicCounterFile.open(\"/some/file\")\n", "error": "none", "author": "Tomer.Filiba@emc.com"}, {"index": "183", "colour": "orange", "code": "        print acf.next()   # e.g., 7\n", "error": "none", "author": "Tomer.Filiba@emc.com"}, {"index": "184", "colour": "orange", "code": "        print acf.next()   # 8\n", "error": "none", "author": "Tomer.Filiba@emc.com"}, {"index": "185", "colour": "orange", "code": "        print acf.next()   # 9\n", "error": "none", "author": "Tomer.Filiba@emc.com"}, {"index": "186", "colour": "orange", "code": "\n", "error": "none", "author": "Tomer.Filiba@emc.com"}, {"index": "187", "colour": "orange", "code": "    .. versionadded:: 1.3\n", "error": "none", "author": "Tomer.Filiba@emc.com"}, {"index": "188", "colour": "orange", "code": "    \"\"\"\n", "error": "none", "author": "Tomer.Filiba@emc.com"}, {"index": "189", "colour": "orange", "code": "\n", "error": "none", "author": "Tomer.Filiba@emc.com"}, {"index": "190", "colour": "orange", "code": "    def __init__(self, atomicfile, initial = 0):\n", "error": "none", "author": "Tomer.Filiba@emc.com"}, {"index": "191", "colour": "orange", "code": "        \"\"\"\n", "error": "none", "author": "Tomer.Filiba@emc.com"}, {"index": "192", "colour": "orange", "code": "        :param atomicfile: an :class:`AtomicFile <plumbum.atomic.AtomicFile>` instance\n", "error": "none", "author": "Tomer.Filiba@emc.com"}, {"index": "193", "colour": "orange", "code": "        :param initial: the initial value (used when the first time the file is created)\n", "error": "none", "author": "Tomer.Filiba@emc.com"}, {"index": "194", "colour": "orange", "code": "        \"\"\"\n", "error": "none", "author": "Tomer.Filiba@emc.com"}, {"index": "195", "colour": "orange", "code": "        self.atomicfile = atomicfile\n", "error": "none", "author": "Tomer.Filiba@emc.com"}, {"index": "196", "colour": "orange", "code": "        self.initial = initial\n", "error": "none", "author": "Tomer.Filiba@emc.com"}, {"index": "197", "colour": "orange", "code": "\n", "error": "none", "author": "Tomer.Filiba@emc.com"}, {"index": "198", "colour": "orange", "code": "    def __enter__(self):\n", "error": "none", "author": "Tomer.Filiba@emc.com"}, {"index": "199", "colour": "orange", "code": "        return self\n", "error": "none", "author": "Tomer.Filiba@emc.com"}, {"index": "200", "colour": "orange", "code": "    def __exit__(self, t, v, tb):\n", "error": "none", "author": "Tomer.Filiba@emc.com"}, {"index": "201", "colour": "orange", "code": "        self.close()\n", "error": "none", "author": "Tomer.Filiba@emc.com"}, {"index": "202", "colour": "orange", "code": "    def close(self):\n", "error": "none", "author": "Tomer.Filiba@emc.com"}, {"index": "203", "colour": "orange", "code": "        self.atomicfile.close()\n", "error": "none", "author": "Tomer.Filiba@emc.com"}, {"index": "204", "colour": "orange", "code": "\n", "error": "none", "author": "Tomer.Filiba@emc.com"}, {"index": "205", "colour": "orange", "code": "    @classmethod\n", "error": "none", "author": "Tomer.Filiba@emc.com"}, {"index": "206", "colour": "orange", "code": "    def open(cls, filename):\n", "error": "none", "author": "Tomer.Filiba@emc.com"}, {"index": "207", "colour": "orange", "code": "        \"\"\"\n", "error": "none", "author": "Tomer.Filiba@emc.com"}, {"index": "208", "colour": "orange", "code": "        Shortcut for ``AtomicCounterFile(AtomicFile(filename))``\n", "error": "none", "author": "Tomer.Filiba@emc.com"}, {"index": "209", "colour": "orange", "code": "        \"\"\"\n", "error": "none", "author": "Tomer.Filiba@emc.com"}, {"index": "210", "colour": "orange", "code": "        return cls(AtomicFile(filename))\n", "error": "none", "author": "Tomer.Filiba@emc.com"}, {"index": "211", "colour": "orange", "code": "\n", "error": "none", "author": "Tomer.Filiba@emc.com"}, {"index": "212", "colour": "orange", "code": "    def reset(self, value = None):\n", "error": "none", "author": "Tomer.Filiba@emc.com"}, {"index": "213", "colour": "orange", "code": "        \"\"\"\n", "error": "none", "author": "Tomer.Filiba@emc.com"}, {"index": "214", "colour": "orange", "code": "        Reset the counter's value to the one given. If ``None``, it will default to the\n", "error": "none", "author": "Tomer.Filiba@emc.com"}, {"index": "215", "colour": "orange", "code": "        initial value provided to the constructor\n", "error": "none", "author": "Tomer.Filiba@emc.com"}, {"index": "216", "colour": "orange", "code": "        \"\"\"\n", "error": "none", "author": "Tomer.Filiba@emc.com"}, {"index": "217", "colour": "orange", "code": "        if value is None:\n", "error": "none", "author": "Tomer.Filiba@emc.com"}, {"index": "218", "colour": "orange", "code": "            value = self.initial\n", "error": "none", "author": "Tomer.Filiba@emc.com"}, {"index": "219", "colour": "orange", "code": "        if not isinstance(value, six.integer_types):\n", "error": "none", "author": "Tomer.Filiba@emc.com"}, {"index": "220", "colour": "orange", "code": "            raise TypeError(\"value must be an integer, not %r\" % (type(value),))\n", "error": "none", "author": "Tomer.Filiba@emc.com"}, {"index": "221", "colour": "orange", "code": "        self.atomicfile.write_atomic(str(value).encode(\"utf8\"))\n", "error": "none", "author": "Tomer.Filiba@emc.com"}, {"index": "222", "colour": "orange", "code": "\n", "error": "none", "author": "Tomer.Filiba@emc.com"}, {"index": "223", "colour": "orange", "code": "    def next(self):\n", "error": "none", "author": "Tomer.Filiba@emc.com"}, {"index": "224", "colour": "orange", "code": "        \"\"\"\n", "error": "none", "author": "Tomer.Filiba@emc.com"}, {"index": "225", "colour": "orange", "code": "        Read and increment the counter, returning its previous value\n", "error": "none", "author": "Tomer.Filiba@emc.com"}, {"index": "226", "colour": "orange", "code": "        \"\"\"\n", "error": "none", "author": "Tomer.Filiba@emc.com"}, {"index": "227", "colour": "orange", "code": "        with self.atomicfile.locked():\n", "error": "none", "author": "Tomer.Filiba@emc.com"}, {"index": "228", "colour": "orange", "code": "            curr = self.atomicfile.read_atomic().decode(\"utf8\")\n", "error": "none", "author": "Tomer.Filiba@emc.com"}, {"index": "229", "colour": "orange", "code": "            if not curr:\n", "error": "none", "author": "Tomer.Filiba@emc.com"}, {"index": "230", "colour": "orange", "code": "                curr = self.initial\n", "error": "none", "author": "Tomer.Filiba@emc.com"}, {"index": "231", "colour": "orange", "code": "            else:\n", "error": "none", "author": "Tomer.Filiba@emc.com"}, {"index": "232", "colour": "orange", "code": "                curr = int(curr)\n", "error": "none", "author": "Tomer.Filiba@emc.com"}, {"index": "233", "colour": "orange", "code": "            self.atomicfile.write_atomic(str(curr + 1).encode(\"utf8\"))\n", "error": "none", "author": "Tomer.Filiba@emc.com"}, {"index": "234", "colour": "orange", "code": "            return curr\n", "error": "none", "author": "Tomer.Filiba@emc.com"}, {"index": "235", "colour": "orange", "code": "\n", "error": "none", "author": "Tomer.Filiba@emc.com"}, {"index": "236", "colour": "orange", "code": "\n", "error": "none", "author": "Tomer.Filiba@emc.com"}, {"index": "237", "colour": "orange", "code": "class PidFileTaken(SystemExit):\n", "error": "none", "author": "Tomer.Filiba@emc.com"}, {"index": "238", "colour": "orange", "code": "    \"\"\"\n", "error": "none", "author": "Tomer.Filiba@emc.com"}, {"index": "239", "colour": "orange", "code": "    This exception is raised when PidFile.acquire fails to lock the pid file. Note that it\n", "error": "none", "author": "Tomer.Filiba@emc.com"}, {"index": "240", "colour": "orange", "code": "    derives from ``SystemExit``, so unless explicitly handled, it will terminate the process\n", "error": "none", "author": "Tomer.Filiba@emc.com"}, {"index": "241", "colour": "orange", "code": "    cleanly\n", "error": "none", "author": "Tomer.Filiba@emc.com"}, {"index": "242", "colour": "orange", "code": "    \"\"\"\n", "error": "none", "author": "Tomer.Filiba@emc.com"}, {"index": "243", "colour": "orange", "code": "    def __init__(self, msg, pid):\n", "error": "none", "author": "Tomer.Filiba@emc.com"}, {"index": "244", "colour": "orange", "code": "        SystemExit.__init__(self, msg)\n", "error": "none", "author": "Tomer.Filiba@emc.com"}, {"index": "245", "colour": "orange", "code": "        self.pid = pid\n", "error": "none", "author": "Tomer.Filiba@emc.com"}, {"index": "246", "colour": "orange", "code": "\n", "error": "none", "author": "Tomer.Filiba@emc.com"}, {"index": "247", "colour": "orange", "code": "class PidFile(object):\n", "error": "none", "author": "Tomer.Filiba@emc.com"}, {"index": "248", "colour": "orange", "code": "    \"\"\"\n", "error": "none", "author": "Tomer.Filiba@emc.com"}, {"index": "249", "colour": "orange", "code": "    A PID file is a file that's locked by some process from the moment it starts until it dies\n", "error": "none", "author": "Tomer.Filiba@emc.com"}, {"index": "250", "colour": "orange", "code": "    (the OS will clear the lock when the process exits). It is used to prevent two instances\n", "error": "none", "author": "Tomer.Filiba@emc.com"}, {"index": "251", "colour": "orange", "code": "    of the same process (normally a daemon) from running concurrently. The PID file holds its\n", "error": "none", "author": "Tomer.Filiba@emc.com"}, {"index": "252", "colour": "orange", "code": "    process' PID, so you know who's holding it.\n", "error": "none", "author": "Tomer.Filiba@emc.com"}, {"index": "253", "colour": "orange", "code": "\n", "error": "none", "author": "Tomer.Filiba@emc.com"}, {"index": "254", "colour": "orange", "code": "    .. versionadded:: 1.3\n", "error": "none", "author": "Tomer.Filiba@emc.com"}, {"index": "255", "colour": "orange", "code": "    \"\"\"\n", "error": "none", "author": "Tomer.Filiba@emc.com"}, {"index": "256", "colour": "orange", "code": "\n", "error": "none", "author": "Tomer.Filiba@emc.com"}, {"index": "257", "colour": "orange", "code": "    def __init__(self, filename):\n", "error": "none", "author": "Tomer.Filiba@emc.com"}, {"index": "258", "colour": "orange", "code": "        self.atomicfile = AtomicFile(filename)\n", "error": "none", "author": "Tomer.Filiba@emc.com"}, {"index": "259", "colour": "orange", "code": "        self._ctx = None\n", "error": "none", "author": "Tomer.Filiba@emc.com"}, {"index": "260", "colour": "orange", "code": "    def __enter__(self):\n", "error": "none", "author": "Tomer.Filiba@emc.com"}, {"index": "261", "colour": "orange", "code": "        self.acquire()\n", "error": "none", "author": "Tomer.Filiba@emc.com"}, {"index": "262", "colour": "orange", "code": "    def __exit__(self, t, v, tb):\n", "error": "none", "author": "Tomer.Filiba@emc.com"}, {"index": "263", "colour": "orange", "code": "        self.release()\n", "error": "none", "author": "Tomer.Filiba@emc.com"}, {"index": "264", "colour": "orange", "code": "    def __del__(self):\n", "error": "none", "author": "Tomer.Filiba@emc.com"}, {"index": "265", "colour": "orange", "code": "        try:\n", "error": "none", "author": "Tomer.Filiba@emc.com"}, {"index": "266", "colour": "orange", "code": "            self.release()\n", "error": "none", "author": "Tomer.Filiba@emc.com"}, {"index": "267", "colour": "green", "code": "        except Exception:\n", "error": "W", "author": "Tomer.Filiba@emc.com"}, {"index": "268", "colour": "orange", "code": "            pass\n", "error": "none", "author": "Tomer.Filiba@emc.com"}, {"index": "269", "colour": "orange", "code": "    def close(self):\n", "error": "none", "author": "Tomer.Filiba@emc.com"}, {"index": "270", "colour": "orange", "code": "        self.atomicfile.close()\n", "error": "none", "author": "Tomer.Filiba@emc.com"}, {"index": "271", "colour": "orange", "code": "\n", "error": "none", "author": "Tomer.Filiba@emc.com"}, {"index": "272", "colour": "orange", "code": "    def acquire(self):\n", "error": "none", "author": "Tomer.Filiba@emc.com"}, {"index": "273", "colour": "orange", "code": "        \"\"\"\n", "error": "none", "author": "Tomer.Filiba@emc.com"}, {"index": "274", "colour": "orange", "code": "        Attempt to acquire the PID file. If it's already locked, raises\n", "error": "none", "author": "Tomer.Filiba@emc.com"}, {"index": "275", "colour": "orange", "code": "        :class:`PidFileTaken <plumbum.atomic.PidFileTaken>`. You should normally acquire\n", "error": "none", "author": "Tomer.Filiba@emc.com"}, {"index": "276", "colour": "orange", "code": "        the file as early as possible when the program starts\n", "error": "none", "author": "Tomer.Filiba@emc.com"}, {"index": "277", "colour": "orange", "code": "        \"\"\"\n", "error": "none", "author": "Tomer.Filiba@emc.com"}, {"index": "278", "colour": "orange", "code": "        if self._ctx is not None:\n", "error": "none", "author": "Tomer.Filiba@emc.com"}, {"index": "279", "colour": "orange", "code": "            return\n", "error": "none", "author": "Tomer.Filiba@emc.com"}, {"index": "280", "colour": "orange", "code": "        self._ctx = self.atomicfile.locked(blocking = False)\n", "error": "none", "author": "Tomer.Filiba@emc.com"}, {"index": "281", "colour": "orange", "code": "        try:\n", "error": "none", "author": "Tomer.Filiba@emc.com"}, {"index": "282", "colour": "orange", "code": "            self._ctx.__enter__()\n", "error": "none", "author": "Tomer.Filiba@emc.com"}, {"index": "283", "colour": "orange", "code": "        except (IOError, OSError):\n", "error": "none", "author": "Tomer.Filiba@emc.com"}, {"index": "284", "colour": "orange", "code": "            self._ctx = None\n", "error": "none", "author": "Tomer.Filiba@emc.com"}, {"index": "285", "colour": "orange", "code": "            try:\n", "error": "none", "author": "Tomer.Filiba@emc.com"}, {"index": "286", "colour": "orange", "code": "                pid = self.atomicfile.read_shared().strip().decode(\"utf8\")\n", "error": "none", "author": "Tomer.Filiba@emc.com"}, {"index": "287", "colour": "orange", "code": "            except (IOError, OSError):\n", "error": "none", "author": "Tomer.Filiba@emc.com"}, {"index": "288", "colour": "orange", "code": "                pid = \"Unknown\"\n", "error": "none", "author": "Tomer.Filiba@emc.com"}, {"index": "289", "colour": "orange", "code": "            raise PidFileTaken(\"PID file %r taken by process %s\" % (self.atomicfile.path, pid), pid)\n", "error": "none", "author": "Tomer.Filiba@emc.com"}, {"index": "290", "colour": "orange", "code": "        else:\n", "error": "none", "author": "Tomer.Filiba@emc.com"}, {"index": "291", "colour": "orange", "code": "            self.atomicfile.write_atomic(str(os.getpid()).encode(\"utf8\"))\n", "error": "none", "author": "Tomer.Filiba@emc.com"}, {"index": "292", "colour": "orange", "code": "            atexit.register(self.release)\n", "error": "none", "author": "Tomer.Filiba@emc.com"}, {"index": "293", "colour": "orange", "code": "\n", "error": "none", "author": "Tomer.Filiba@emc.com"}, {"index": "294", "colour": "orange", "code": "    def release(self):\n", "error": "none", "author": "Tomer.Filiba@emc.com"}, {"index": "295", "colour": "orange", "code": "        \"\"\"\n", "error": "none", "author": "Tomer.Filiba@emc.com"}, {"index": "296", "colour": "orange", "code": "        Release the PID file (should only happen when the program terminates)\n", "error": "none", "author": "Tomer.Filiba@emc.com"}, {"index": "297", "colour": "orange", "code": "        \"\"\"\n", "error": "none", "author": "Tomer.Filiba@emc.com"}, {"index": "298", "colour": "orange", "code": "        if self._ctx is None:\n", "error": "none", "author": "Tomer.Filiba@emc.com"}, {"index": "299", "colour": "orange", "code": "            return\n", "error": "none", "author": "Tomer.Filiba@emc.com"}, {"index": "300", "colour": "orange", "code": "        self.atomicfile.delete()\n", "error": "none", "author": "Tomer.Filiba@emc.com"}, {"index": "301", "colour": "orange", "code": "        try:\n", "error": "none", "author": "Tomer.Filiba@emc.com"}, {"index": "302", "colour": "orange", "code": "            self._ctx.__exit__(None, None, None)\n", "error": "none", "author": "Tomer.Filiba@emc.com"}, {"index": "303", "colour": "orange", "code": "        finally:\n", "error": "none", "author": "Tomer.Filiba@emc.com"}, {"index": "304", "colour": "orange", "code": "            self._ctx = None\n", "error": "none", "author": "Tomer.Filiba@emc.com"}, {"index": "305", "colour": "orange", "code": "\n", "error": "none", "author": "Tomer.Filiba@emc.com"}, {"index": "306", "colour": "orange", "code": "\n", "error": "none", "author": "Tomer.Filiba@emc.com"}, {"index": "307", "colour": "orange", "code": "\n", "error": "none", "author": "Tomer.Filiba@emc.com"}, {"index": "308", "colour": "orange", "code": "\n", "error": "none", "author": "Tomer.Filiba@emc.com"}]]}