{"path": "/home/asumal/git/cs410/plumbum/plumbum/fs/atomic.py", "lines": [[{"error": "none", "line": "1", "code": "\"\"\"\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "2", "code": "Atomic file operations\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "3", "code": "\"\"\"\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "4", "code": "\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "5", "code": "from __future__ import with_statement\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "6", "code": "import os\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "7", "code": "import threading\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "8", "code": "import sys\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "9", "code": "import atexit\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "10", "code": "from contextlib import contextmanager\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "11", "code": "from plumbum.machines.local import local\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "12", "code": "from plumbum.lib import six\n", "colour": "black", "author": "tomerfiliba@gmail.com"}, {"error": "none", "line": "13", "code": "\n", "colour": "black", "author": "tomerfiliba@gmail.com"}, {"error": "none", "line": "14", "code": "\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "15", "code": "if not hasattr(threading, \"get_ident\"):\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "16", "code": "    try:\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "17", "code": "        import thread\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "18", "code": "    except ImportError:\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "F", "line": "19", "code": "        import _thread as thread\n", "colour": "red", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "20", "code": "    threading.get_ident = thread.get_ident\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "21", "code": "    del thread\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "22", "code": "\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "23", "code": "\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "24", "code": "try:\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "25", "code": "    import fcntl\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "26", "code": "except ImportError:\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "F", "line": "27", "code": "    import msvcrt\n", "colour": "red", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "28", "code": "    try:\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "F", "line": "29", "code": "        from pywintypes import error as WinError\n", "colour": "red", "author": "tomer.filiba@emc.com"}, {"error": "F", "line": "30", "code": "        from win32file import LockFileEx, UnlockFile, OVERLAPPED\n", "colour": "red", "author": "Tomer.Filiba@emc.com"}, {"error": "F", "line": "31", "code": "        from win32con import LOCKFILE_EXCLUSIVE_LOCK, LOCKFILE_FAIL_IMMEDIATELY\n", "colour": "red", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "32", "code": "    except ImportError:\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "C", "line": "33", "code": "        raise ImportError(\"On Windows, we require Python for Windows Extensions (pywin32)\")\n", "colour": "blue", "author": "Tomer.Filiba@emc.com"}, {"error": "C", "line": "34", "code": "    \n", "colour": "blue", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "35", "code": "    @contextmanager\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "C", "line": "36", "code": "    def locked_file(fileno, blocking = True):\n", "colour": "blue", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "37", "code": "        hndl = msvcrt.get_osfhandle(fileno)\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "38", "code": "        try:\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "C", "line": "39", "code": "            LockFileEx(hndl, LOCKFILE_EXCLUSIVE_LOCK | (0 if blocking else LOCKFILE_FAIL_IMMEDIATELY), \n", "colour": "blue", "author": "Tomer.Filiba@emc.com"}, {"error": "C", "line": "40", "code": "                0xffffffff, 0xffffffff, OVERLAPPED())\n", "colour": "blue", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "41", "code": "        except WinError:\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "42", "code": "            _, ex, _ = sys.exc_info()\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "E", "line": "43", "code": "            raise WindowsError(*ex.args)\n", "colour": "yellow", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "44", "code": "        try:\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "45", "code": "            yield\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "46", "code": "        finally:\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "47", "code": "            UnlockFile(hndl, 0, 0, 0xffffffff, 0xffffffff)\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "48", "code": "else:\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "49", "code": "    if hasattr(fcntl, \"lockf\"):\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "50", "code": "        @contextmanager\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "C", "line": "51", "code": "        def locked_file(fileno, blocking = True):\n", "colour": "blue", "author": "Tomer.Filiba@emc.com"}, {"error": "C", "line": "52", "code": "            fcntl.lockf(fileno, fcntl.LOCK_EX | (0 if blocking else fcntl.LOCK_NB))\n", "colour": "blue", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "53", "code": "            try:\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "54", "code": "                yield\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "55", "code": "            finally:\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "56", "code": "                fcntl.lockf(fileno, fcntl.LOCK_UN)\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "57", "code": "    else:\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "58", "code": "        @contextmanager\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "C", "line": "59", "code": "        def locked_file(fileno, blocking = True):\n", "colour": "blue", "author": "Tomer.Filiba@emc.com"}, {"error": "C", "line": "60", "code": "            fcntl.flock(fileno, fcntl.LOCK_EX | (0 if blocking else fcntl.LOCK_NB))\n", "colour": "blue", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "61", "code": "            try:\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "62", "code": "                yield\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "63", "code": "            finally:\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "64", "code": "                fcntl.flock(fileno, fcntl.LOCK_UN)\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "65", "code": "\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "66", "code": "\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "67", "code": "class AtomicFile(object):\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "68", "code": "    \"\"\"\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "C", "line": "69", "code": "    Atomic file operations implemented using file-system advisory locks (``flock`` on POSIX,\n", "colour": "blue", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "70", "code": "    ``LockFile`` on Windows).\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "71", "code": "\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "72", "code": "    .. note::\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "C", "line": "73", "code": "        On Linux, the manpage says ``flock`` might have issues with NFS mounts. You should\n", "colour": "blue", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "74", "code": "        take this into account.\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "75", "code": "\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "76", "code": "    .. versionadded:: 1.3\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "77", "code": "    \"\"\"\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "78", "code": "\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "79", "code": "    CHUNK_SIZE = 32 * 1024\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "C", "line": "80", "code": "    \n", "colour": "blue", "author": "Tomer.Filiba@emc.com"}, {"error": "C", "line": "81", "code": "    def __init__(self, filename, ignore_deletion = False):\n", "colour": "blue", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "82", "code": "        self.path = local.path(filename)\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "83", "code": "        self._ignore_deletion = ignore_deletion\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "84", "code": "        self._thdlock = threading.Lock()\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "85", "code": "        self._owned_by = None\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "86", "code": "        self._fileobj = None\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "87", "code": "        self.reopen()\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "88", "code": "\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "89", "code": "    def __repr__(self):\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "C", "line": "90", "code": "        return \"<AtomicFile: %s>\" % (self.path,) if self._fileobj else \"<AtomicFile: closed>\"\n", "colour": "blue", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "91", "code": "\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "92", "code": "    def __del__(self):\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "93", "code": "        self.close()\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "94", "code": "    def __enter__(self):\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "95", "code": "        return self\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "C", "line": "96", "code": "    def __exit__(self, t, v, tb):\n", "colour": "blue", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "97", "code": "        self.close()\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "C", "line": "98", "code": "    \n", "colour": "blue", "author": "Tomer.Filiba@emc.com"}, {"error": "C", "line": "99", "code": "    def close(self):\n", "colour": "blue", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "100", "code": "        if self._fileobj is not None:\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "101", "code": "            self._fileobj.close()\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "102", "code": "            self._fileobj = None\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "C", "line": "103", "code": "    \n", "colour": "blue", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "104", "code": "    def reopen(self):\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "105", "code": "        \"\"\"\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "C", "line": "106", "code": "        Close and reopen the file; useful when the file was deleted from the file system\n", "colour": "blue", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "107", "code": "        by a different process\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "108", "code": "        \"\"\"\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "109", "code": "        self.close()\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "C", "line": "110", "code": "        self._fileobj = os.fdopen(os.open(str(self.path), os.O_CREAT | os.O_RDWR, 384), \"r+b\", 0)\n", "colour": "blue", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "111", "code": "\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "112", "code": "    @contextmanager\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "C", "line": "113", "code": "    def locked(self, blocking = True):\n", "colour": "blue", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "114", "code": "        \"\"\"\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "C", "line": "115", "code": "        A context manager that locks the file; this function is reentrant by the thread currently\n", "colour": "blue", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "116", "code": "        holding the lock.\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "117", "code": "\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "C", "line": "118", "code": "        :param blocking: if ``True``, the call will block until we can grab the file system lock.\n", "colour": "blue", "author": "Tomer.Filiba@emc.com"}, {"error": "C", "line": "119", "code": "                         if ``False``, the call may fail immediately with the underlying exception\n", "colour": "blue", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "120", "code": "                         (``IOError`` or ``WindowsError``)\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "121", "code": "        \"\"\"\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "122", "code": "        if self._owned_by == threading.get_ident():\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "123", "code": "            yield\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "124", "code": "            return\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "125", "code": "        with self._thdlock:\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "126", "code": "            with locked_file(self._fileobj.fileno(), blocking):\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "127", "code": "                if not self.path.exists() and not self._ignore_deletion:\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "128", "code": "                    raise ValueError(\"Atomic file removed from filesystem\")\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "129", "code": "                self._owned_by = threading.get_ident()\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "130", "code": "                try:\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "131", "code": "                    yield\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "132", "code": "                finally:\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "133", "code": "                    self._owned_by = None\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "134", "code": "\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "135", "code": "    def delete(self):\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "136", "code": "        \"\"\"\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "137", "code": "        Atomically delete the file (holds the lock while doing it)\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "138", "code": "        \"\"\"\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "139", "code": "        with self.locked():\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "140", "code": "            self.path.delete()\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "141", "code": "\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "C", "line": "142", "code": "    def _read_all(self):\n", "colour": "blue", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "143", "code": "        self._fileobj.seek(0)\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "144", "code": "        data = []\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "145", "code": "        while True:\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "146", "code": "            buf = self._fileobj.read(self.CHUNK_SIZE)\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "147", "code": "            data.append(buf)\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "148", "code": "            if len(buf) < self.CHUNK_SIZE:\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "149", "code": "                break\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "150", "code": "        return six.b(\"\").join(data)\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "C", "line": "151", "code": "        \n", "colour": "blue", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "152", "code": "    def read_atomic(self):\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "153", "code": "        \"\"\"Atomically read the entire file\"\"\"\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "154", "code": "        with self.locked():\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "155", "code": "            return self._read_all()\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "156", "code": "\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "157", "code": "    def read_shared(self):\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "158", "code": "        \"\"\"Read the file **without** holding the lock\"\"\"\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "159", "code": "        return self._read_all()\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "160", "code": "\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "161", "code": "    def write_atomic(self, data):\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "C", "line": "162", "code": "        \"\"\"Writes the given data atomically to the file. Note that it overwrites the entire file;\n", "colour": "blue", "author": "Tomer.Filiba@emc.com"}, {"error": "C", "line": "163", "code": "        ``write_atomic(\"foo\")`` followed by ``write_atomic(\"bar\")`` will result in only ``\"bar\"``.\n", "colour": "blue", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "164", "code": "        \"\"\"\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "165", "code": "        with self.locked():\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "166", "code": "            self._fileobj.seek(0)\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "167", "code": "            while data:\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "168", "code": "                chunk = data[:self.CHUNK_SIZE]\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "169", "code": "                self._fileobj.write(chunk)\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "170", "code": "                data = data[len(chunk):]\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "171", "code": "            self._fileobj.flush()\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "172", "code": "            self._fileobj.truncate()\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "173", "code": "\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "174", "code": "\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "175", "code": "class AtomicCounterFile(object):\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "176", "code": "    \"\"\"\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "C", "line": "177", "code": "    An atomic counter based on AtomicFile. Each time you call ``next()``, it will\n", "colour": "blue", "author": "Tomer.Filiba@emc.com"}, {"error": "C", "line": "178", "code": "    atomically read and increment the counter's value, returning its previous value\n", "colour": "blue", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "179", "code": "\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "180", "code": "    Example::\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "181", "code": "\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "182", "code": "        acf = AtomicCounterFile.open(\"/some/file\")\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "183", "code": "        print acf.next()   # e.g., 7\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "184", "code": "        print acf.next()   # 8\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "185", "code": "        print acf.next()   # 9\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "186", "code": "\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "187", "code": "    .. versionadded:: 1.3\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "188", "code": "    \"\"\"\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "189", "code": "\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "C", "line": "190", "code": "    def __init__(self, atomicfile, initial = 0):\n", "colour": "blue", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "191", "code": "        \"\"\"\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "C", "line": "192", "code": "        :param atomicfile: an :class:`AtomicFile <plumbum.atomic.AtomicFile>` instance\n", "colour": "blue", "author": "Tomer.Filiba@emc.com"}, {"error": "C", "line": "193", "code": "        :param initial: the initial value (used when the first time the file is created)\n", "colour": "blue", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "194", "code": "        \"\"\"\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "195", "code": "        self.atomicfile = atomicfile\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "196", "code": "        self.initial = initial\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "197", "code": "\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "198", "code": "    def __enter__(self):\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "199", "code": "        return self\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "C", "line": "200", "code": "    def __exit__(self, t, v, tb):\n", "colour": "blue", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "201", "code": "        self.close()\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "C", "line": "202", "code": "    def close(self):\n", "colour": "blue", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "203", "code": "        self.atomicfile.close()\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "204", "code": "\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "205", "code": "    @classmethod\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "206", "code": "    def open(cls, filename):\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "207", "code": "        \"\"\"\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "208", "code": "        Shortcut for ``AtomicCounterFile(AtomicFile(filename))``\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "209", "code": "        \"\"\"\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "210", "code": "        return cls(AtomicFile(filename))\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "211", "code": "\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "C", "line": "212", "code": "    def reset(self, value = None):\n", "colour": "blue", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "213", "code": "        \"\"\"\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "C", "line": "214", "code": "        Reset the counter's value to the one given. If ``None``, it will default to the\n", "colour": "blue", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "215", "code": "        initial value provided to the constructor\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "216", "code": "        \"\"\"\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "217", "code": "        if value is None:\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "218", "code": "            value = self.initial\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "219", "code": "        if not isinstance(value, six.integer_types):\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "220", "code": "            raise TypeError(\"value must be an integer, not %r\" % (type(value),))\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "221", "code": "        self.atomicfile.write_atomic(str(value).encode(\"utf8\"))\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "222", "code": "\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "223", "code": "    def next(self):\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "224", "code": "        \"\"\"\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "225", "code": "        Read and increment the counter, returning its previous value\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "226", "code": "        \"\"\"\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "227", "code": "        with self.atomicfile.locked():\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "228", "code": "            curr = self.atomicfile.read_atomic().decode(\"utf8\")\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "229", "code": "            if not curr:\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "230", "code": "                curr = self.initial\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "231", "code": "            else:\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "232", "code": "                curr = int(curr)\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "233", "code": "            self.atomicfile.write_atomic(str(curr + 1).encode(\"utf8\"))\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "234", "code": "            return curr\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "235", "code": "\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "236", "code": "\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "237", "code": "class PidFileTaken(SystemExit):\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "238", "code": "    \"\"\"\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "C", "line": "239", "code": "    This exception is raised when PidFile.acquire fails to lock the pid file. Note that it\n", "colour": "blue", "author": "Tomer.Filiba@emc.com"}, {"error": "C", "line": "240", "code": "    derives from ``SystemExit``, so unless explicitly handled, it will terminate the process\n", "colour": "blue", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "241", "code": "    cleanly\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "242", "code": "    \"\"\"\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "243", "code": "    def __init__(self, msg, pid):\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "244", "code": "        SystemExit.__init__(self, msg)\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "245", "code": "        self.pid = pid\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "246", "code": "\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "247", "code": "class PidFile(object):\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "248", "code": "    \"\"\"\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "C", "line": "249", "code": "    A PID file is a file that's locked by some process from the moment it starts until it dies\n", "colour": "blue", "author": "Tomer.Filiba@emc.com"}, {"error": "C", "line": "250", "code": "    (the OS will clear the lock when the process exits). It is used to prevent two instances\n", "colour": "blue", "author": "Tomer.Filiba@emc.com"}, {"error": "C", "line": "251", "code": "    of the same process (normally a daemon) from running concurrently. The PID file holds its\n", "colour": "blue", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "252", "code": "    process' PID, so you know who's holding it.\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "253", "code": "\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "254", "code": "    .. versionadded:: 1.3\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "255", "code": "    \"\"\"\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "256", "code": "\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "257", "code": "    def __init__(self, filename):\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "258", "code": "        self.atomicfile = AtomicFile(filename)\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "259", "code": "        self._ctx = None\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "260", "code": "    def __enter__(self):\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "261", "code": "        self.acquire()\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "C", "line": "262", "code": "    def __exit__(self, t, v, tb):\n", "colour": "blue", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "263", "code": "        self.release()\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "264", "code": "    def __del__(self):\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "265", "code": "        try:\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "266", "code": "            self.release()\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "W", "line": "267", "code": "        except Exception:\n", "colour": "purple", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "268", "code": "            pass\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "C", "line": "269", "code": "    def close(self):\n", "colour": "blue", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "270", "code": "        self.atomicfile.close()\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "271", "code": "\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "272", "code": "    def acquire(self):\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "273", "code": "        \"\"\"\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "274", "code": "        Attempt to acquire the PID file. If it's already locked, raises\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "C", "line": "275", "code": "        :class:`PidFileTaken <plumbum.atomic.PidFileTaken>`. You should normally acquire\n", "colour": "blue", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "276", "code": "        the file as early as possible when the program starts\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "277", "code": "        \"\"\"\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "278", "code": "        if self._ctx is not None:\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "279", "code": "            return\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "C", "line": "280", "code": "        self._ctx = self.atomicfile.locked(blocking = False)\n", "colour": "blue", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "281", "code": "        try:\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "282", "code": "            self._ctx.__enter__()\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "283", "code": "        except (IOError, OSError):\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "284", "code": "            self._ctx = None\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "285", "code": "            try:\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "286", "code": "                pid = self.atomicfile.read_shared().strip().decode(\"utf8\")\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "287", "code": "            except (IOError, OSError):\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "288", "code": "                pid = \"Unknown\"\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "C", "line": "289", "code": "            raise PidFileTaken(\"PID file %r taken by process %s\" % (self.atomicfile.path, pid), pid)\n", "colour": "blue", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "290", "code": "        else:\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "291", "code": "            self.atomicfile.write_atomic(str(os.getpid()).encode(\"utf8\"))\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "292", "code": "            atexit.register(self.release)\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "293", "code": "\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "294", "code": "    def release(self):\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "295", "code": "        \"\"\"\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "296", "code": "        Release the PID file (should only happen when the program terminates)\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "297", "code": "        \"\"\"\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "298", "code": "        if self._ctx is None:\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "299", "code": "            return\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "300", "code": "        self.atomicfile.delete()\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "301", "code": "        try:\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "302", "code": "            self._ctx.__exit__(None, None, None)\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "303", "code": "        finally:\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "304", "code": "            self._ctx = None\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "305", "code": "\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "306", "code": "\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "307", "code": "\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "308", "code": "\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}]]}