{"path": "/home/asumal/git/cs410/plumbum/plumbum/cli/terminal.py", "lines": [{"index": "1", "colour": "orange", "code": "\"\"\"\n", "error": "none", "author": "tomerfiliba@gmail.com"}, {"index": "2", "colour": "orange", "code": "Terminal-related utilities\n", "error": "none", "author": "tomerfiliba@gmail.com"}, {"index": "3", "colour": "orange", "code": "\"\"\"\n", "error": "none", "author": "tomerfiliba@gmail.com"}, {"index": "4", "colour": "orange", "code": "import sys\n", "error": "none", "author": "tomerfiliba@gmail.com"}, {"index": "5", "colour": "orange", "code": "import os\n", "error": "none", "author": "tomerfiliba@gmail.com"}, {"index": "6", "colour": "orange", "code": "import platform\n", "error": "none", "author": "tomerfiliba@gmail.com"}, {"index": "7", "colour": "orange", "code": "from struct import Struct\n", "error": "none", "author": "tomerfiliba@gmail.com"}, {"index": "8", "colour": "orange", "code": "from plumbum import local\n", "error": "none", "author": "tomerfiliba@gmail.com"}, {"index": "9", "colour": "orange", "code": "\n", "error": "none", "author": "tomerfiliba@gmail.com"}, {"index": "10", "colour": "orange", "code": "\n", "error": "none", "author": "tomerfiliba@gmail.com"}, {"index": "11", "colour": "orange", "code": "def get_terminal_size():\n", "error": "none", "author": "tomerfiliba@gmail.com"}, {"index": "12", "colour": "orange", "code": "    \"\"\"\n", "error": "none", "author": "tomerfiliba@gmail.com"}, {"index": "13", "colour": "orange", "code": "    Get width and height of console; works on linux, os x, windows and cygwin\n", "error": "none", "author": "tomerfiliba@gmail.com"}, {"index": "14", "colour": "orange", "code": "\n", "error": "none", "author": "tomerfiliba@gmail.com"}, {"index": "15", "colour": "orange", "code": "    Adapted from https://gist.github.com/jtriley/1108174\n", "error": "none", "author": "tomerfiliba@gmail.com"}, {"index": "16", "colour": "orange", "code": "    Originally from: http://stackoverflow.com/questions/566746/how-to-get-console-window-width-in-python\n", "error": "none", "author": "tomerfiliba@gmail.com"}, {"index": "17", "colour": "orange", "code": "    \"\"\"\n", "error": "none", "author": "tomerfiliba@gmail.com"}, {"index": "18", "colour": "orange", "code": "    current_os = platform.system()\n", "error": "none", "author": "tomerfiliba@gmail.com"}, {"index": "19", "colour": "orange", "code": "    if current_os == 'Windows':\n", "error": "none", "author": "tomerfiliba@gmail.com"}, {"index": "20", "colour": "orange", "code": "        size = _get_terminal_size_windows()\n", "error": "none", "author": "tomerfiliba@gmail.com"}, {"index": "21", "colour": "orange", "code": "        if not size:\n", "error": "none", "author": "tomerfiliba@gmail.com"}, {"index": "22", "colour": "orange", "code": "            # needed for window's python in cygwin's xterm!\n", "error": "none", "author": "tomerfiliba@gmail.com"}, {"index": "23", "colour": "orange", "code": "            size = _get_terminal_size_tput()\n", "error": "none", "author": "tomerfiliba@gmail.com"}, {"index": "24", "colour": "orange", "code": "    elif current_os in ('Linux', 'Darwin', 'FreeBSD') or current_os.startswith('CYGWIN'):\n", "error": "none", "author": "oleg@volchkov.net"}, {"index": "25", "colour": "orange", "code": "        size = _get_terminal_size_linux()\n", "error": "none", "author": "tomerfiliba@gmail.com"}, {"index": "26", "colour": "orange", "code": "    \n", "error": "none", "author": "github@drewbotwinick.com"}, {"index": "27", "colour": "orange", "code": "    if size is None: # we'll assume the standard 80x25 if for any reason we don't know the terminal size\n", "error": "none", "author": "github@drewbotwinick.com"}, {"index": "28", "colour": "orange", "code": "        size = (80, 25)\n", "error": "none", "author": "oleg@volchkov.net"}, {"index": "29", "colour": "orange", "code": "    return size\n", "error": "none", "author": "tomerfiliba@gmail.com"}, {"index": "30", "colour": "orange", "code": "\n", "error": "none", "author": "tomerfiliba@gmail.com"}, {"index": "31", "colour": "orange", "code": "def _get_terminal_size_windows():\n", "error": "none", "author": "tomerfiliba@gmail.com"}, {"index": "32", "colour": "orange", "code": "    try:\n", "error": "none", "author": "tomerfiliba@gmail.com"}, {"index": "33", "colour": "orange", "code": "        from ctypes import windll, create_string_buffer\n", "error": "none", "author": "tomerfiliba@gmail.com"}, {"index": "34", "colour": "orange", "code": "        STDERR_HANDLE = -12\n", "error": "none", "author": "tomerfiliba@gmail.com"}, {"index": "35", "colour": "orange", "code": "        h = windll.kernel32.GetStdHandle(STDERR_HANDLE)\n", "error": "none", "author": "tomerfiliba@gmail.com"}, {"index": "36", "colour": "orange", "code": "        csbi_struct = Struct(\"hhhhHhhhhhh\")\n", "error": "none", "author": "tomerfiliba@gmail.com"}, {"index": "37", "colour": "orange", "code": "        csbi = create_string_buffer(csbi_struct.size)\n", "error": "none", "author": "tomerfiliba@gmail.com"}, {"index": "38", "colour": "orange", "code": "        res = windll.kernel32.GetConsoleScreenBufferInfo(h, csbi)\n", "error": "none", "author": "tomerfiliba@gmail.com"}, {"index": "39", "colour": "orange", "code": "        if res:\n", "error": "none", "author": "tomerfiliba@gmail.com"}, {"index": "40", "colour": "orange", "code": "            _, _, _, _, _, left, top, right, bottom, _, _ = csbi_struct.unpack(csbi.raw)\n", "error": "none", "author": "tomerfiliba@gmail.com"}, {"index": "41", "colour": "orange", "code": "            return right - left + 1, bottom - top + 1\n", "error": "none", "author": "tomerfiliba@gmail.com"}, {"index": "42", "colour": "orange", "code": "        return None\n", "error": "none", "author": "tomerfiliba@gmail.com"}, {"index": "43", "colour": "green", "code": "    except Exception:\n", "error": "W", "author": "tomerfiliba@gmail.com"}, {"index": "44", "colour": "orange", "code": "        return None\n", "error": "none", "author": "tomerfiliba@gmail.com"}, {"index": "45", "colour": "orange", "code": "\n", "error": "none", "author": "tomerfiliba@gmail.com"}, {"index": "46", "colour": "orange", "code": "def _get_terminal_size_tput():\n", "error": "none", "author": "tomerfiliba@gmail.com"}, {"index": "47", "colour": "orange", "code": "    # get terminal width\n", "error": "none", "author": "tomerfiliba@gmail.com"}, {"index": "48", "colour": "orange", "code": "    # src: http://stackoverflow.com/questions/263890/how-do-i-find-the-width-height-of-a-terminal-window\n", "error": "none", "author": "tomerfiliba@gmail.com"}, {"index": "49", "colour": "orange", "code": "    try:\n", "error": "none", "author": "tomerfiliba@gmail.com"}, {"index": "50", "colour": "orange", "code": "        from plumbum.cmd import tput\n", "error": "none", "author": "tomerfiliba@gmail.com"}, {"index": "51", "colour": "orange", "code": "        cols = int(tput('cols'))\n", "error": "none", "author": "tomerfiliba@gmail.com"}, {"index": "52", "colour": "orange", "code": "        rows = int(tput('lines'))\n", "error": "none", "author": "tomerfiliba@gmail.com"}, {"index": "53", "colour": "orange", "code": "        return (cols, rows)\n", "error": "none", "author": "tomerfiliba@gmail.com"}, {"index": "54", "colour": "green", "code": "    except Exception:\n", "error": "W", "author": "tomerfiliba@gmail.com"}, {"index": "55", "colour": "orange", "code": "        return None\n", "error": "none", "author": "tomerfiliba@gmail.com"}, {"index": "56", "colour": "orange", "code": "\n", "error": "none", "author": "tomerfiliba@gmail.com"}, {"index": "57", "colour": "orange", "code": "def _ioctl_GWINSZ(fd):\n", "error": "none", "author": "tomerfiliba@gmail.com"}, {"index": "58", "colour": "orange", "code": "    yx = Struct(\"hh\")\n", "error": "none", "author": "tomerfiliba@gmail.com"}, {"index": "59", "colour": "orange", "code": "    try:\n", "error": "none", "author": "tomerfiliba@gmail.com"}, {"index": "60", "colour": "orange", "code": "        import fcntl\n", "error": "none", "author": "tomerfiliba@gmail.com"}, {"index": "61", "colour": "orange", "code": "        import termios\n", "error": "none", "author": "tomerfiliba@gmail.com"}, {"index": "62", "colour": "orange", "code": "        return yx.unpack(fcntl.ioctl(fd, termios.TIOCGWINSZ, '1234'))\n", "error": "none", "author": "tomerfiliba@gmail.com"}, {"index": "63", "colour": "green", "code": "    except Exception:\n", "error": "W", "author": "tomerfiliba@gmail.com"}, {"index": "64", "colour": "orange", "code": "        return None\n", "error": "none", "author": "tomerfiliba@gmail.com"}, {"index": "65", "colour": "orange", "code": "\n", "error": "none", "author": "tomerfiliba@gmail.com"}, {"index": "66", "colour": "orange", "code": "def _get_terminal_size_linux():\n", "error": "none", "author": "tomerfiliba@gmail.com"}, {"index": "67", "colour": "orange", "code": "    cr = _ioctl_GWINSZ(0) or _ioctl_GWINSZ(1) or _ioctl_GWINSZ(2)\n", "error": "none", "author": "tomerfiliba@gmail.com"}, {"index": "68", "colour": "orange", "code": "    if not cr:\n", "error": "none", "author": "tomerfiliba@gmail.com"}, {"index": "69", "colour": "orange", "code": "        try:\n", "error": "none", "author": "tomerfiliba@gmail.com"}, {"index": "70", "colour": "orange", "code": "            fd = os.open(os.ctermid(), os.O_RDONLY)\n", "error": "none", "author": "tomerfiliba@gmail.com"}, {"index": "71", "colour": "orange", "code": "            cr = _ioctl_GWINSZ(fd)\n", "error": "none", "author": "tomerfiliba@gmail.com"}, {"index": "72", "colour": "orange", "code": "            os.close(fd)\n", "error": "none", "author": "tomerfiliba@gmail.com"}, {"index": "73", "colour": "green", "code": "        except Exception:\n", "error": "W", "author": "tomerfiliba@gmail.com"}, {"index": "74", "colour": "orange", "code": "            pass\n", "error": "none", "author": "tomerfiliba@gmail.com"}, {"index": "75", "colour": "orange", "code": "    if not cr:\n", "error": "none", "author": "tomerfiliba@gmail.com"}, {"index": "76", "colour": "orange", "code": "        try:\n", "error": "none", "author": "tomerfiliba@gmail.com"}, {"index": "77", "colour": "orange", "code": "            cr = (int(os.environ['LINES']), int(os.environ['COLUMNS']))\n", "error": "none", "author": "tomerfiliba@gmail.com"}, {"index": "78", "colour": "green", "code": "        except Exception:\n", "error": "W", "author": "tomerfiliba@gmail.com"}, {"index": "79", "colour": "orange", "code": "            return None\n", "error": "none", "author": "tomerfiliba@gmail.com"}, {"index": "80", "colour": "orange", "code": "    return cr[1], cr[0]\n", "error": "none", "author": "tomerfiliba@gmail.com"}, {"index": "81", "colour": "orange", "code": "\n", "error": "none", "author": "tomerfiliba@gmail.com"}, {"index": "82", "colour": "orange", "code": "def readline(message = \"\"):                          \n", "error": "none", "author": "tomerfiliba@gmail.com"}, {"index": "83", "colour": "orange", "code": "    \"\"\"Gets a line of input from the user (stdin)\"\"\"\n", "error": "none", "author": "tomerfiliba@gmail.com"}, {"index": "84", "colour": "orange", "code": "    sys.stdout.write(message)\n", "error": "none", "author": "tomerfiliba@gmail.com"}, {"index": "85", "colour": "orange", "code": "    return sys.stdin.readline()\n", "error": "none", "author": "tomerfiliba@gmail.com"}, {"index": "86", "colour": "orange", "code": "\n", "error": "none", "author": "tomerfiliba@gmail.com"}, {"index": "87", "colour": "orange", "code": "def ask(question, default = None):\n", "error": "none", "author": "tomerfiliba@gmail.com"}, {"index": "88", "colour": "orange", "code": "    \"\"\"\n", "error": "none", "author": "tomerfiliba@gmail.com"}, {"index": "89", "colour": "orange", "code": "    Presents the user with a yes/no question. \n", "error": "none", "author": "tomerfiliba@gmail.com"}, {"index": "90", "colour": "orange", "code": "    \n", "error": "none", "author": "tomerfiliba@gmail.com"}, {"index": "91", "colour": "orange", "code": "    :param question: The question to ask\n", "error": "none", "author": "tomerfiliba@gmail.com"}, {"index": "92", "colour": "orange", "code": "    :param default: If ``None``, the user must answer. If ``True`` or ``False``, lack of response is \n", "error": "none", "author": "tomerfiliba@gmail.com"}, {"index": "93", "colour": "orange", "code": "                    interpreted as the default option\n", "error": "none", "author": "tomerfiliba@gmail.com"}, {"index": "94", "colour": "orange", "code": "    \n", "error": "none", "author": "tomerfiliba@gmail.com"}, {"index": "95", "colour": "orange", "code": "    :returns: the user's choice\n", "error": "none", "author": "tomerfiliba@gmail.com"}, {"index": "96", "colour": "orange", "code": "    \"\"\"\n", "error": "none", "author": "tomerfiliba@gmail.com"}, {"index": "97", "colour": "orange", "code": "    question = question.rstrip().rstrip(\"?\").rstrip() + \"?\"\n", "error": "none", "author": "tomerfiliba@gmail.com"}, {"index": "98", "colour": "orange", "code": "    if default is None:\n", "error": "none", "author": "tomerfiliba@gmail.com"}, {"index": "99", "colour": "orange", "code": "        question += \" (y/n) \"\n", "error": "none", "author": "tomerfiliba@gmail.com"}, {"index": "100", "colour": "orange", "code": "    elif default:\n", "error": "none", "author": "tomerfiliba@gmail.com"}, {"index": "101", "colour": "orange", "code": "        question += \" [Y/n] \"\n", "error": "none", "author": "tomerfiliba@gmail.com"}, {"index": "102", "colour": "orange", "code": "    else:\n", "error": "none", "author": "tomerfiliba@gmail.com"}, {"index": "103", "colour": "orange", "code": "        question += \" [y/N] \"\n", "error": "none", "author": "tomerfiliba@gmail.com"}, {"index": "104", "colour": "orange", "code": "    \n", "error": "none", "author": "tomerfiliba@gmail.com"}, {"index": "105", "colour": "orange", "code": "    while True:\n", "error": "none", "author": "tomerfiliba@gmail.com"}, {"index": "106", "colour": "orange", "code": "        try:\n", "error": "none", "author": "tomerfiliba@gmail.com"}, {"index": "107", "colour": "orange", "code": "            answer = readline(question).strip().lower()\n", "error": "none", "author": "tomerfiliba@gmail.com"}, {"index": "108", "colour": "orange", "code": "        except EOFError:\n", "error": "none", "author": "tomerfiliba@gmail.com"}, {"index": "109", "colour": "orange", "code": "            answer = None\n", "error": "none", "author": "tomerfiliba@gmail.com"}, {"index": "110", "colour": "orange", "code": "        if answer in (\"y\", \"yes\"):\n", "error": "none", "author": "tomerfiliba@gmail.com"}, {"index": "111", "colour": "orange", "code": "            return True\n", "error": "none", "author": "tomerfiliba@gmail.com"}, {"index": "112", "colour": "orange", "code": "        elif answer in (\"n\", \"no\"):\n", "error": "none", "author": "tomerfiliba@gmail.com"}, {"index": "113", "colour": "orange", "code": "            return False\n", "error": "none", "author": "AndydeCleyre@gmail.com"}, {"index": "114", "colour": "orange", "code": "        elif not answer and default is not None:\n", "error": "none", "author": "tomerfiliba@gmail.com"}, {"index": "115", "colour": "orange", "code": "            return default\n", "error": "none", "author": "tomerfiliba@gmail.com"}, {"index": "116", "colour": "orange", "code": "        else:\n", "error": "none", "author": "tomerfiliba@gmail.com"}, {"index": "117", "colour": "orange", "code": "            sys.stdout.write(\"Invalid response, please try again\\n\")\n", "error": "none", "author": "tomerfiliba@gmail.com"}, {"index": "118", "colour": "orange", "code": "\n", "error": "none", "author": "tomerfiliba@gmail.com"}, {"index": "119", "colour": "blue", "code": "def choose(question, options, default = None):\n", "error": "R", "author": "tomerfiliba@gmail.com"}, {"index": "120", "colour": "orange", "code": "    \"\"\"Prompts the user with a question and a set of options, from which the user need choose.\n", "error": "none", "author": "tomerfiliba@gmail.com"}, {"index": "121", "colour": "orange", "code": "    \n", "error": "none", "author": "tomerfiliba@gmail.com"}, {"index": "122", "colour": "orange", "code": "    :param question: The question to ask\n", "error": "none", "author": "tomerfiliba@gmail.com"}, {"index": "123", "colour": "orange", "code": "    :param options: A set of options. It can be a list (of strings or two-tuples, mapping text \n", "error": "none", "author": "tomerfiliba@gmail.com"}, {"index": "124", "colour": "orange", "code": "                    to returned-object) or a dict (mapping text to returned-object).``\n", "error": "none", "author": "tomerfiliba@gmail.com"}, {"index": "125", "colour": "orange", "code": "    :param default: If ``None``, the user must answer. Otherwise, lack of response is interpreted\n", "error": "none", "author": "tomerfiliba@gmail.com"}, {"index": "126", "colour": "orange", "code": "                    as this answer\n", "error": "none", "author": "tomerfiliba@gmail.com"}, {"index": "127", "colour": "orange", "code": "    \n", "error": "none", "author": "tomerfiliba@gmail.com"}, {"index": "128", "colour": "orange", "code": "    :returns: The user's choice\n", "error": "none", "author": "tomerfiliba@gmail.com"}, {"index": "129", "colour": "orange", "code": "    \n", "error": "none", "author": "tomerfiliba@gmail.com"}, {"index": "130", "colour": "orange", "code": "    Example::\n", "error": "none", "author": "tomerfiliba@gmail.com"}, {"index": "131", "colour": "orange", "code": "    \n", "error": "none", "author": "tomerfiliba@gmail.com"}, {"index": "132", "colour": "orange", "code": "        ans = choose(\"What is your favorite color?\", [\"blue\", \"yellow\", \"green\"], default = \"yellow\")\n", "error": "none", "author": "tomerfiliba@gmail.com"}, {"index": "133", "colour": "orange", "code": "        # `ans` will be one of \"blue\", \"yellow\" or \"green\"\n", "error": "none", "author": "tomerfiliba@gmail.com"}, {"index": "134", "colour": "orange", "code": "\n", "error": "none", "author": "tomerfiliba@gmail.com"}, {"index": "135", "colour": "orange", "code": "        ans = choose(\"What is your favorite color?\", \n", "error": "none", "author": "tomerfiliba@gmail.com"}, {"index": "136", "colour": "orange", "code": "                {\"blue\" : 0x0000ff, \"yellow\" : 0xffff00 , \"green\" : 0x00ff00}, default = 0x00ff00)\n", "error": "none", "author": "tomerfiliba@gmail.com"}, {"index": "137", "colour": "orange", "code": "        # this will display \"blue\", \"yellow\" and \"green\" but return a numerical value\n", "error": "none", "author": "tomerfiliba@gmail.com"}, {"index": "138", "colour": "orange", "code": "    \"\"\"\n", "error": "none", "author": "tomerfiliba@gmail.com"}, {"index": "139", "colour": "orange", "code": "    if hasattr(options, \"items\"):\n", "error": "none", "author": "tomerfiliba@gmail.com"}, {"index": "140", "colour": "orange", "code": "        options = options.items()\n", "error": "none", "author": "tomerfiliba@gmail.com"}, {"index": "141", "colour": "orange", "code": "    sys.stdout.write(question.rstrip() + \"\\n\")\n", "error": "none", "author": "tomerfiliba@gmail.com"}, {"index": "142", "colour": "orange", "code": "    choices = {}\n", "error": "none", "author": "tomerfiliba@gmail.com"}, {"index": "143", "colour": "orange", "code": "    defindex = None\n", "error": "none", "author": "tomerfiliba@gmail.com"}, {"index": "144", "colour": "orange", "code": "    for i, item in enumerate(options):\n", "error": "none", "author": "tomerfiliba@gmail.com"}, {"index": "145", "colour": "orange", "code": "        i = i + 1 # python2.5\n", "error": "none", "author": "tomerfiliba@gmail.com"}, {"index": "146", "colour": "orange", "code": "        if isinstance(item, (tuple, list)) and len(item) == 2:\n", "error": "none", "author": "tomerfiliba@gmail.com"}, {"index": "147", "colour": "orange", "code": "            text = item[0]\n", "error": "none", "author": "tomerfiliba@gmail.com"}, {"index": "148", "colour": "orange", "code": "            val = item[1]\n", "error": "none", "author": "tomerfiliba@gmail.com"}, {"index": "149", "colour": "orange", "code": "        else:\n", "error": "none", "author": "tomerfiliba@gmail.com"}, {"index": "150", "colour": "orange", "code": "            text = item\n", "error": "none", "author": "tomerfiliba@gmail.com"}, {"index": "151", "colour": "orange", "code": "            val = item\n", "error": "none", "author": "tomerfiliba@gmail.com"}, {"index": "152", "colour": "orange", "code": "        choices[i] = val\n", "error": "none", "author": "tomerfiliba@gmail.com"}, {"index": "153", "colour": "orange", "code": "        if default is not None and default == val:\n", "error": "none", "author": "tomerfiliba@gmail.com"}, {"index": "154", "colour": "orange", "code": "            defindex = i\n", "error": "none", "author": "tomerfiliba@gmail.com"}, {"index": "155", "colour": "orange", "code": "        sys.stdout.write(\"(%d) %s\\n\" % (i, text))\n", "error": "none", "author": "tomerfiliba@gmail.com"}, {"index": "156", "colour": "orange", "code": "    if default is not None:\n", "error": "none", "author": "tomerfiliba@gmail.com"}, {"index": "157", "colour": "orange", "code": "        if defindex is None:\n", "error": "none", "author": "tomerfiliba@gmail.com"}, {"index": "158", "colour": "orange", "code": "            msg = \"Choice [%s]: \" % (default,)\n", "error": "none", "author": "tomerfiliba@gmail.com"}, {"index": "159", "colour": "orange", "code": "        else:\n", "error": "none", "author": "tomerfiliba@gmail.com"}, {"index": "160", "colour": "orange", "code": "            msg = \"Choice [%d]: \" % (defindex,)\n", "error": "none", "author": "tomerfiliba@gmail.com"}, {"index": "161", "colour": "orange", "code": "    else:\n", "error": "none", "author": "tomerfiliba@gmail.com"}, {"index": "162", "colour": "orange", "code": "        msg = \"Choice: \"\n", "error": "none", "author": "tomerfiliba@gmail.com"}, {"index": "163", "colour": "orange", "code": "    while True:\n", "error": "none", "author": "tomerfiliba@gmail.com"}, {"index": "164", "colour": "orange", "code": "        try:\n", "error": "none", "author": "tomerfiliba@gmail.com"}, {"index": "165", "colour": "orange", "code": "            choice = readline(msg).strip()\n", "error": "none", "author": "tomerfiliba@gmail.com"}, {"index": "166", "colour": "orange", "code": "        except EOFError:\n", "error": "none", "author": "tomerfiliba@gmail.com"}, {"index": "167", "colour": "orange", "code": "            choice = \"\"\n", "error": "none", "author": "tomerfiliba@gmail.com"}, {"index": "168", "colour": "orange", "code": "        if not choice and default:\n", "error": "none", "author": "tomerfiliba@gmail.com"}, {"index": "169", "colour": "orange", "code": "            return default\n", "error": "none", "author": "tomerfiliba@gmail.com"}, {"index": "170", "colour": "orange", "code": "        try:\n", "error": "none", "author": "tomerfiliba@gmail.com"}, {"index": "171", "colour": "orange", "code": "            choice = int(choice)\n", "error": "none", "author": "tomerfiliba@gmail.com"}, {"index": "172", "colour": "orange", "code": "            if choice not in choices:\n", "error": "none", "author": "tomerfiliba@gmail.com"}, {"index": "173", "colour": "orange", "code": "                raise ValueError()\n", "error": "none", "author": "tomerfiliba@gmail.com"}, {"index": "174", "colour": "orange", "code": "        except ValueError:\n", "error": "none", "author": "tomerfiliba@gmail.com"}, {"index": "175", "colour": "orange", "code": "            sys.stdout.write(\"Invalid choice, please try again\\n\")\n", "error": "none", "author": "tomerfiliba@gmail.com"}, {"index": "176", "colour": "orange", "code": "            continue\n", "error": "none", "author": "tomerfiliba@gmail.com"}, {"index": "177", "colour": "orange", "code": "        return choices[choice]\n", "error": "none", "author": "tomerfiliba@gmail.com"}, {"index": "178", "colour": "orange", "code": "\n", "error": "none", "author": "tomerfiliba@gmail.com"}, {"index": "179", "colour": "green", "code": "def prompt(question, type = int, default = NotImplemented, validator = lambda val: True):\n", "error": "W", "author": "tomer@weka.io"}, {"index": "180", "colour": "orange", "code": "    question = question.rstrip(\" \\t:\")\n", "error": "none", "author": "tomer@weka.io"}, {"index": "181", "colour": "orange", "code": "    if default is not NotImplemented:\n", "error": "none", "author": "tomer@weka.io"}, {"index": "182", "colour": "orange", "code": "        question += \" [%s]\" % (default,)\n", "error": "none", "author": "tomer@weka.io"}, {"index": "183", "colour": "orange", "code": "    question += \": \"\n", "error": "none", "author": "tomer@weka.io"}, {"index": "184", "colour": "orange", "code": "    while True:\n", "error": "none", "author": "tomer@weka.io"}, {"index": "185", "colour": "orange", "code": "        try:\n", "error": "none", "author": "tomer@weka.io"}, {"index": "186", "colour": "orange", "code": "            ans = readline(question).strip()\n", "error": "none", "author": "tomer@weka.io"}, {"index": "187", "colour": "orange", "code": "        except EOFError:\n", "error": "none", "author": "tomer@weka.io"}, {"index": "188", "colour": "orange", "code": "            ans = \"\"\n", "error": "none", "author": "tomer@weka.io"}, {"index": "189", "colour": "orange", "code": "        if not ans:\n", "error": "none", "author": "tomer@weka.io"}, {"index": "190", "colour": "orange", "code": "            if default is not NotImplemented:\n", "error": "none", "author": "tomer@weka.io"}, {"index": "191", "colour": "orange", "code": "                #sys.stdout.write(\"\\b%s\\n\" % (default,))\n", "error": "none", "author": "tomer@weka.io"}, {"index": "192", "colour": "orange", "code": "                return default\n", "error": "none", "author": "tomer@weka.io"}, {"index": "193", "colour": "orange", "code": "            else:\n", "error": "none", "author": "tomer@weka.io"}, {"index": "194", "colour": "orange", "code": "                continue\n", "error": "none", "author": "tomer@weka.io"}, {"index": "195", "colour": "orange", "code": "        try:\n", "error": "none", "author": "tomer@weka.io"}, {"index": "196", "colour": "orange", "code": "            ans = type(ans)\n", "error": "none", "author": "tomer@weka.io"}, {"index": "197", "colour": "orange", "code": "        except (TypeError, ValueError) as ex:\n", "error": "none", "author": "tomer@weka.io"}, {"index": "198", "colour": "orange", "code": "            sys.stdout.write(\"Invalid value (%s), please try again\\n\" % (ex,))\n", "error": "none", "author": "tomer@weka.io"}, {"index": "199", "colour": "orange", "code": "            continue\n", "error": "none", "author": "tomer@weka.io"}, {"index": "200", "colour": "orange", "code": "        try:\n", "error": "none", "author": "tomer@weka.io"}, {"index": "201", "colour": "orange", "code": "            validator(ans)\n", "error": "none", "author": "tomer@weka.io"}, {"index": "202", "colour": "orange", "code": "        except ValueError as ex:\n", "error": "none", "author": "tomer@weka.io"}, {"index": "203", "colour": "orange", "code": "            sys.stdout.write(\"%s, please try again\\n\" % (ex,))\n", "error": "none", "author": "tomer@weka.io"}, {"index": "204", "colour": "orange", "code": "        return ans\n", "error": "none", "author": "tomer@weka.io"}, {"index": "205", "colour": "orange", "code": "\n", "error": "none", "author": "tomer@weka.io"}, {"index": "206", "colour": "orange", "code": "def hexdump(data_or_stream, bytes_per_line = 16, aggregate = True):\n", "error": "none", "author": "tomerfiliba@gmail.com"}, {"index": "207", "colour": "orange", "code": "    \"\"\"Convert the given bytes (or a stream with a buffering ``read()`` method) to hexdump-formatted lines, \n", "error": "none", "author": "tomerfiliba@gmail.com"}, {"index": "208", "colour": "orange", "code": "    with possible aggregation of identical lines. Returns a generator of formatted lines.\n", "error": "none", "author": "tomerfiliba@gmail.com"}, {"index": "209", "colour": "orange", "code": "    \"\"\"\n", "error": "none", "author": "tomerfiliba@gmail.com"}, {"index": "210", "colour": "orange", "code": "    if hasattr(data_or_stream, \"read\"):\n", "error": "none", "author": "tomerfiliba@gmail.com"}, {"index": "211", "colour": "orange", "code": "        def read_chunk():\n", "error": "none", "author": "tomerfiliba@gmail.com"}, {"index": "212", "colour": "orange", "code": "            while True:\n", "error": "none", "author": "tomerfiliba@gmail.com"}, {"index": "213", "colour": "orange", "code": "                buf = data_or_stream.read(bytes_per_line)\n", "error": "none", "author": "tomerfiliba@gmail.com"}, {"index": "214", "colour": "orange", "code": "                if not buf:\n", "error": "none", "author": "tomerfiliba@gmail.com"}, {"index": "215", "colour": "orange", "code": "                    break\n", "error": "none", "author": "tomerfiliba@gmail.com"}, {"index": "216", "colour": "orange", "code": "                yield buf\n", "error": "none", "author": "tomerfiliba@gmail.com"}, {"index": "217", "colour": "orange", "code": "    else:\n", "error": "none", "author": "tomerfiliba@gmail.com"}, {"index": "218", "colour": "orange", "code": "        def read_chunk():\n", "error": "none", "author": "tomerfiliba@gmail.com"}, {"index": "219", "colour": "orange", "code": "            for i in range(0, len(data_or_stream), bytes_per_line):\n", "error": "none", "author": "tomerfiliba@gmail.com"}, {"index": "220", "colour": "orange", "code": "                yield data_or_stream[i:i + bytes_per_line]\n", "error": "none", "author": "tomerfiliba@gmail.com"}, {"index": "221", "colour": "orange", "code": "    prev = None\n", "error": "none", "author": "tomerfiliba@gmail.com"}, {"index": "222", "colour": "orange", "code": "    skipped = False\n", "error": "none", "author": "tomerfiliba@gmail.com"}, {"index": "223", "colour": "orange", "code": "    for i, chunk in enumerate(read_chunk()):\n", "error": "none", "author": "tomerfiliba@gmail.com"}, {"index": "224", "colour": "orange", "code": "        hexd = \" \".join(\"%02x\" % (ord(ch),) for ch in chunk)\n", "error": "none", "author": "tomerfiliba@gmail.com"}, {"index": "225", "colour": "orange", "code": "        text = \"\".join(ch if 32 <= ord(ch) < 127 else \".\" for ch in chunk)\n", "error": "none", "author": "tomerfiliba@gmail.com"}, {"index": "226", "colour": "orange", "code": "        if aggregate and prev == chunk:\n", "error": "none", "author": "tomerfiliba@gmail.com"}, {"index": "227", "colour": "orange", "code": "            skipped = True\n", "error": "none", "author": "tomerfiliba@gmail.com"}, {"index": "228", "colour": "orange", "code": "            continue\n", "error": "none", "author": "tomerfiliba@gmail.com"}, {"index": "229", "colour": "orange", "code": "        prev = chunk\n", "error": "none", "author": "tomerfiliba@gmail.com"}, {"index": "230", "colour": "orange", "code": "        if skipped:\n", "error": "none", "author": "tomerfiliba@gmail.com"}, {"index": "231", "colour": "orange", "code": "            yield \"*\"\n", "error": "none", "author": "tomerfiliba@gmail.com"}, {"index": "232", "colour": "orange", "code": "        yield \"%06x | %s| %s\" % (i * bytes_per_line, hexd.ljust(bytes_per_line * 3, \" \"), text)\n", "error": "none", "author": "tomerfiliba@gmail.com"}, {"index": "233", "colour": "orange", "code": "        skipped = False\n", "error": "none", "author": "tomerfiliba@gmail.com"}, {"index": "234", "colour": "orange", "code": "\n", "error": "none", "author": "tomerfiliba@gmail.com"}, {"index": "235", "colour": "orange", "code": "\n", "error": "none", "author": "tomerfiliba@gmail.com"}, {"index": "236", "colour": "orange", "code": "def pager(rows, pagercmd = None):\n", "error": "none", "author": "tomerfiliba@gmail.com"}, {"index": "237", "colour": "orange", "code": "    \"\"\"Opens a pager (e.g., ``less``) to display the given text. Requires a terminal.\n", "error": "none", "author": "tomerfiliba@gmail.com"}, {"index": "238", "colour": "orange", "code": "    \n", "error": "none", "author": "tomerfiliba@gmail.com"}, {"index": "239", "colour": "orange", "code": "    :param rows: a ``bytes`` or a list/iterator of \"rows\" (``bytes``)\n", "error": "none", "author": "tomerfiliba@gmail.com"}, {"index": "240", "colour": "orange", "code": "    :param pagercmd: the pager program to run. Defaults to ``less -RSin``\n", "error": "none", "author": "tomerfiliba@gmail.com"}, {"index": "241", "colour": "orange", "code": "    \"\"\"\n", "error": "none", "author": "tomerfiliba@gmail.com"}, {"index": "242", "colour": "orange", "code": "    if not pagercmd:\n", "error": "none", "author": "tomerfiliba@gmail.com"}, {"index": "243", "colour": "orange", "code": "        pagercmd = local[\"less\"][\"-RSin\"]\n", "error": "none", "author": "tomerfiliba@gmail.com"}, {"index": "244", "colour": "orange", "code": "    if hasattr(rows, \"splitlines\"):\n", "error": "none", "author": "tomerfiliba@gmail.com"}, {"index": "245", "colour": "orange", "code": "        rows = rows.splitlines()\n", "error": "none", "author": "tomerfiliba@gmail.com"}, {"index": "246", "colour": "orange", "code": "\n", "error": "none", "author": "tomerfiliba@gmail.com"}, {"index": "247", "colour": "orange", "code": "    pg = pagercmd.popen(stdout = None, stderr = None)\n", "error": "none", "author": "tomerfiliba@gmail.com"}, {"index": "248", "colour": "orange", "code": "    try:\n", "error": "none", "author": "tomerfiliba@gmail.com"}, {"index": "249", "colour": "orange", "code": "        for row in rows:\n", "error": "none", "author": "tomerfiliba@gmail.com"}, {"index": "250", "colour": "orange", "code": "            line = \"%s\\n\" % (row,)\n", "error": "none", "author": "tomerfiliba@gmail.com"}, {"index": "251", "colour": "orange", "code": "            try:\n", "error": "none", "author": "tomerfiliba@gmail.com"}, {"index": "252", "colour": "orange", "code": "                pg.stdin.write(line)\n", "error": "none", "author": "tomerfiliba@gmail.com"}, {"index": "253", "colour": "orange", "code": "                pg.stdin.flush()\n", "error": "none", "author": "tomerfiliba@gmail.com"}, {"index": "254", "colour": "orange", "code": "            except IOError:\n", "error": "none", "author": "tomerfiliba@gmail.com"}, {"index": "255", "colour": "orange", "code": "                break\n", "error": "none", "author": "tomerfiliba@gmail.com"}, {"index": "256", "colour": "orange", "code": "        pg.stdin.close()\n", "error": "none", "author": "tomerfiliba@gmail.com"}, {"index": "257", "colour": "orange", "code": "        pg.wait()\n", "error": "none", "author": "tomerfiliba@gmail.com"}, {"index": "258", "colour": "orange", "code": "    finally:\n", "error": "none", "author": "tomerfiliba@gmail.com"}, {"index": "259", "colour": "orange", "code": "        try:\n", "error": "none", "author": "tomerfiliba@gmail.com"}, {"index": "260", "colour": "orange", "code": "            rows.close()\n", "error": "none", "author": "tomerfiliba@gmail.com"}, {"index": "261", "colour": "green", "code": "        except Exception:\n", "error": "W", "author": "tomerfiliba@gmail.com"}, {"index": "262", "colour": "orange", "code": "            pass\n", "error": "none", "author": "tomerfiliba@gmail.com"}, {"index": "263", "colour": "orange", "code": "        if pg and pg.poll() is None:\n", "error": "none", "author": "tomerfiliba@gmail.com"}, {"index": "264", "colour": "orange", "code": "            try:\n", "error": "none", "author": "tomerfiliba@gmail.com"}, {"index": "265", "colour": "orange", "code": "                pg.terminate()\n", "error": "none", "author": "tomerfiliba@gmail.com"}, {"index": "266", "colour": "green", "code": "            except Exception:\n", "error": "W", "author": "tomerfiliba@gmail.com"}, {"index": "267", "colour": "orange", "code": "                pass\n", "error": "none", "author": "tomerfiliba@gmail.com"}, {"index": "268", "colour": "orange", "code": "            os.system(\"reset\")\n", "error": "none", "author": "tomerfiliba@gmail.com"}, {"index": "269", "colour": "orange", "code": "\n", "error": "none", "author": "tomerfiliba@gmail.com"}, {"index": "270", "colour": "orange", "code": "\n", "error": "none", "author": "tomerfiliba@gmail.com"}, {"index": "271", "colour": "orange", "code": "\n", "error": "none", "author": "tomerfiliba@gmail.com"}, {"index": "272", "colour": "orange", "code": "\n", "error": "none", "author": "tomerfiliba@gmail.com"}, {"index": "273", "colour": "orange", "code": "\n", "error": "none", "author": "tomerfiliba@gmail.com"}]}