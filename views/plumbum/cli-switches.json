{"path": "/home/asumal/git/cs410/plumbum/plumbum/cli/switches.py", "lines": [[{"error": "C", "line": "1", "code": "import inspect\n", "colour": "blue", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "2", "code": "from plumbum.lib import six\n", "colour": "black", "author": "tomerfiliba@gmail.com"}, {"error": "none", "line": "3", "code": "from plumbum import local\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "4", "code": "\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "5", "code": "\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "6", "code": "class SwitchError(Exception):\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "7", "code": "    \"\"\"A general switch related-error (base class of all other switch errors)\"\"\"\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "8", "code": "    pass\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "9", "code": "class PositionalArgumentsError(SwitchError):\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "10", "code": "    \"\"\"Raised when an invalid number of positional arguments has been given\"\"\"\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "11", "code": "    pass\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "12", "code": "class SwitchCombinationError(SwitchError):\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "13", "code": "    \"\"\"Raised when an invalid combination of switches has been given\"\"\"\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "14", "code": "    pass\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "15", "code": "class UnknownSwitch(SwitchError):\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "16", "code": "    \"\"\"Raised when an unrecognized switch has been given\"\"\"\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "17", "code": "    pass\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "18", "code": "class MissingArgument(SwitchError):\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "19", "code": "    \"\"\"Raised when a switch requires an argument, but one was not provided\"\"\"\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "20", "code": "    pass\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "21", "code": "class MissingMandatorySwitch(SwitchError):\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "22", "code": "    \"\"\"Raised when a mandatory switch has not been given\"\"\"\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "23", "code": "    pass\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "24", "code": "class WrongArgumentType(SwitchError):\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "C", "line": "25", "code": "    \"\"\"Raised when a switch expected an argument of some type, but an argument of a wrong\n", "colour": "blue", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "26", "code": "    type has been given\"\"\"\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "27", "code": "    pass\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "28", "code": "class SubcommandError(SwitchError):\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "29", "code": "    \"\"\"Raised when there's something wrong with subcommands\"\"\"\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "30", "code": "    pass\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "31", "code": "\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "32", "code": "\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "C", "line": "33", "code": "#===================================================================================================\n", "colour": "blue", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "34", "code": "# The switch decorator\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "C", "line": "35", "code": "#===================================================================================================\n", "colour": "blue", "author": "Tomer.Filiba@emc.com"}, {"error": "R", "line": "36", "code": "class SwitchInfo(object):\n", "colour": "green", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "37", "code": "    def __init__(self, **kwargs):\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "C", "line": "38", "code": "        for k, v in kwargs.items():\n", "colour": "blue", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "39", "code": "            setattr(self, k, v)\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "40", "code": "\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "R", "line": "41", "code": "def switch(names, argtype = None, argname = None, list = False, mandatory = False, requires = (),\n", "colour": "green", "author": "Tomer.Filiba@emc.com"}, {"error": "W", "line": "42", "code": "        excludes = (), help = None, overridable = False, group = \"Switches\"):\n", "colour": "purple", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "43", "code": "    \"\"\"\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "44", "code": "    A decorator that exposes functions as command-line switches. Usage::\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "45", "code": "\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "46", "code": "        class MyApp(Application):\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "47", "code": "            @switch([\"-l\", \"--log-to-file\"], argtype = str)\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "48", "code": "            def log_to_file(self, filename):\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "49", "code": "                handler = logging.FileHandler(filename)\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "50", "code": "                logger.addHandler(handler)\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "51", "code": "\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "C", "line": "52", "code": "            @switch([\"--verbose\"], excludes=[\"--terse\"], requires=[\"--log-to-file\"])\n", "colour": "blue", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "53", "code": "            def set_debug(self):\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "54", "code": "                logger.setLevel(logging.DEBUG)\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "55", "code": "\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "C", "line": "56", "code": "            @switch([\"--terse\"], excludes=[\"--verbose\"], requires=[\"--log-to-file\"])\n", "colour": "blue", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "57", "code": "            def set_terse(self):\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "58", "code": "                logger.setLevel(logging.WARNING)\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "59", "code": "\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "C", "line": "60", "code": "    :param names: The name(s) under which the function is reachable; it can be a string\n", "colour": "blue", "author": "Tomer.Filiba@emc.com"}, {"error": "C", "line": "61", "code": "                  or a list of string, but at least one name is required. There's no need\n", "colour": "blue", "author": "Tomer.Filiba@emc.com"}, {"error": "C", "line": "62", "code": "                  to prefix the name with ``-`` or ``--`` (this is added automatically),\n", "colour": "blue", "author": "Tomer.Filiba@emc.com"}, {"error": "C", "line": "63", "code": "                  but it can be used for clarity. Single-letter names are prefixed by ``-``,\n", "colour": "blue", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "64", "code": "                  while longer names are prefixed by ``--``\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "65", "code": "\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "C", "line": "66", "code": "    :param argtype: If this function takes an argument, you need to specify its type. The\n", "colour": "blue", "author": "Tomer.Filiba@emc.com"}, {"error": "C", "line": "67", "code": "                    default is ``None``, which means the function takes no argument. The type\n", "colour": "blue", "author": "Tomer.Filiba@emc.com"}, {"error": "C", "line": "68", "code": "                    is more of a \"validator\" than a real type; it can be any callable object\n", "colour": "blue", "author": "Tomer.Filiba@emc.com"}, {"error": "C", "line": "69", "code": "                    that raises a ``TypeError`` if the argument is invalid, or returns an\n", "colour": "blue", "author": "Tomer.Filiba@emc.com"}, {"error": "C", "line": "70", "code": "                    appropriate value on success. If the user provides an invalid value,\n", "colour": "blue", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "71", "code": "                    :func:`plumbum.cli.WrongArgumentType`\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "72", "code": "\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "C", "line": "73", "code": "    :param argname: The name of the argument; if ``None``, the name will be inferred from the\n", "colour": "blue", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "74", "code": "                    function's signature\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "75", "code": "\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "C", "line": "76", "code": "    :param list: Whether or not this switch can be repeated (e.g. ``gcc -I/lib -I/usr/lib``).\n", "colour": "blue", "author": "Tomer.Filiba@emc.com"}, {"error": "C", "line": "77", "code": "                 If ``False``, only a single occurrence of the switch is allowed; if ``True``,\n", "colour": "blue", "author": "Tomer.Filiba@emc.com"}, {"error": "C", "line": "78", "code": "                 it may be repeated indefinitely. The occurrences are collected into a list,\n", "colour": "blue", "author": "Tomer.Filiba@emc.com"}, {"error": "C", "line": "79", "code": "                 so the function is only called once with the collections. For instance,\n", "colour": "blue", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "80", "code": "                 for ``gcc -I/lib -I/usr/lib``, the function will be called with\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "81", "code": "                 ``[\"/lib\", \"/usr/lib\"]``.\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "82", "code": "\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "C", "line": "83", "code": "    :param mandatory: Whether or not this switch is mandatory; if a mandatory switch is not\n", "colour": "blue", "author": "Tomer.Filiba@emc.com"}, {"error": "C", "line": "84", "code": "                      given, :class:`MissingMandatorySwitch <plumbum.cli.MissingMandatorySwitch>`\n", "colour": "blue", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "85", "code": "                      is raised. The default is ``False``.\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "86", "code": "\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "C", "line": "87", "code": "    :param requires: A list of switches that this switch depends on (\"requires\"). This means that\n", "colour": "blue", "author": "Tomer.Filiba@emc.com"}, {"error": "C", "line": "88", "code": "                     it's invalid to invoke this switch without also invoking the required ones.\n", "colour": "blue", "author": "Tomer.Filiba@emc.com"}, {"error": "C", "line": "89", "code": "                     In the example above, it's illegal to pass ``--verbose`` or ``--terse``\n", "colour": "blue", "author": "Tomer.Filiba@emc.com"}, {"error": "C", "line": "90", "code": "                     without also passing ``--log-to-file``. By default, this list is empty,\n", "colour": "blue", "author": "Tomer.Filiba@emc.com"}, {"error": "C", "line": "91", "code": "                     which means the switch has no prerequisites. If an invalid combination\n", "colour": "blue", "author": "Tomer.Filiba@emc.com"}, {"error": "C", "line": "92", "code": "                     is given, :class:`SwitchCombinationError <plumbum.cli.SwitchCombinationError>`\n", "colour": "blue", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "93", "code": "                     is raised.\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "94", "code": "\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "C", "line": "95", "code": "                     Note that this list is made of the switch *names*; if a switch has more\n", "colour": "blue", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "96", "code": "                     than a single name, any of its names will do.\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "97", "code": "\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "98", "code": "                     .. note::\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "C", "line": "99", "code": "                        There is no guarantee on the (topological) order in which the actual\n", "colour": "blue", "author": "Tomer.Filiba@emc.com"}, {"error": "C", "line": "100", "code": "                        switch functions will be invoked, as the dependency graph might contain\n", "colour": "blue", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "101", "code": "                        cycles.\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "102", "code": "\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "C", "line": "103", "code": "    :param excludes: A list of switches that this switch forbids (\"excludes\"). This means that\n", "colour": "blue", "author": "Tomer.Filiba@emc.com"}, {"error": "C", "line": "104", "code": "                     it's invalid to invoke this switch if any of the excluded ones are given.\n", "colour": "blue", "author": "Tomer.Filiba@emc.com"}, {"error": "C", "line": "105", "code": "                     In the example above, it's illegal to pass ``--verbose`` along with\n", "colour": "blue", "author": "Tomer.Filiba@emc.com"}, {"error": "C", "line": "106", "code": "                     ``--terse``, as it will result in a contradiction. By default, this list\n", "colour": "blue", "author": "Tomer.Filiba@emc.com"}, {"error": "C", "line": "107", "code": "                     is empty, which means the switch has no prerequisites. If an invalid\n", "colour": "blue", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "108", "code": "                     combination is given, :class:`SwitchCombinationError\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "109", "code": "                     <plumbum.cli.SwitchCombinationError>` is raised.\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "110", "code": "\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "C", "line": "111", "code": "                     Note that this list is made of the switch *names*; if a switch has more\n", "colour": "blue", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "112", "code": "                     than a single name, any of its names will do.\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "113", "code": "\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "C", "line": "114", "code": "    :param help: The help message (description) for this switch; this description is used when\n", "colour": "blue", "author": "Tomer.Filiba@emc.com"}, {"error": "C", "line": "115", "code": "                 ``--help`` is given. If ``None``, the function's docstring will be used.\n", "colour": "blue", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "116", "code": "\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "C", "line": "117", "code": "    :param overridable: Whether or not the names of this switch are overridable by other switches.\n", "colour": "blue", "author": "Tomer.Filiba@emc.com"}, {"error": "C", "line": "118", "code": "                        If ``False`` (the default), having another switch function with the same\n", "colour": "blue", "author": "Tomer.Filiba@emc.com"}, {"error": "C", "line": "119", "code": "                        name(s) will cause an exception. If ``True``, this is silently ignored.\n", "colour": "blue", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "120", "code": "\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "C", "line": "121", "code": "    :param group: The switch's *group*; this is a string that is used to group related switches\n", "colour": "blue", "author": "Tomer.Filiba@emc.com"}, {"error": "C", "line": "122", "code": "                  together when ``--help`` is given. The default group is ``Switches``.\n", "colour": "blue", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "123", "code": "\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "124", "code": "    :returns: The decorated function (with a ``_switch_info`` attribute)\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "125", "code": "    \"\"\"\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "126", "code": "    if isinstance(names, six.string_types):\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "127", "code": "        names = [names]\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "128", "code": "    names = [n.lstrip(\"-\") for n in names]\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "129", "code": "    requires = [n.lstrip(\"-\") for n in requires]\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "130", "code": "    excludes = [n.lstrip(\"-\") for n in excludes]\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "131", "code": "\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "C", "line": "132", "code": "    def deco(func):\n", "colour": "blue", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "133", "code": "        if argname is None:\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "134", "code": "            argspec = inspect.getargspec(func)[0]\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "135", "code": "            if len(argspec) == 2:\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "136", "code": "                argname2 = argspec[1]\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "137", "code": "            else:\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "138", "code": "                argname2 = \"VALUE\"\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "139", "code": "        else:\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "140", "code": "            argname2 = argname\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "141", "code": "        help2 = inspect.getdoc(func) if help is None else help\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "142", "code": "        if not help2:\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "143", "code": "            help2 = str(func)\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "W", "line": "144", "code": "        func._switch_info = SwitchInfo(names = names, argtype = argtype, list = list, func = func,\n", "colour": "purple", "author": "Tomer.Filiba@emc.com"}, {"error": "C", "line": "145", "code": "            mandatory = mandatory, overridable = overridable, group = group,\n", "colour": "blue", "author": "Tomer.Filiba@emc.com"}, {"error": "C", "line": "146", "code": "            requires = requires, excludes = excludes, argname = argname2, help = help2)\n", "colour": "blue", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "147", "code": "        return func\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "148", "code": "    return deco\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "149", "code": "\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "150", "code": "def autoswitch(*args, **kwargs):\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "C", "line": "151", "code": "    \"\"\"A decorator that exposes a function as a switch, \"inferring\" the name of the switch\n", "colour": "blue", "author": "Tomer.Filiba@emc.com"}, {"error": "C", "line": "152", "code": "    from the function's name (converting to lower-case, and replacing underscores with hyphens).\n", "colour": "blue", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "153", "code": "    The arguments are the same as for :func:`switch <plumbum.cli.switch>`.\"\"\"\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "C", "line": "154", "code": "    def deco(func):\n", "colour": "blue", "author": "Tomer.Filiba@emc.com"}, {"error": "W", "line": "155", "code": "        return switch(func.__name__.replace(\"_\", \"-\"), *args, **kwargs)(func)\n", "colour": "purple", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "156", "code": "    return deco\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "157", "code": "\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "C", "line": "158", "code": "#===================================================================================================\n", "colour": "blue", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "159", "code": "# Switch Attributes\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "C", "line": "160", "code": "#===================================================================================================\n", "colour": "blue", "author": "Tomer.Filiba@emc.com"}, {"error": "R", "line": "161", "code": "class SwitchAttr(object):\n", "colour": "green", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "162", "code": "    \"\"\"\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "163", "code": "    A switch that stores its result in an attribute (descriptor). Usage::\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "164", "code": "\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "165", "code": "        class MyApp(Application):\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "166", "code": "            logfile = SwitchAttr([\"-f\", \"--log-file\"], str)\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "167", "code": "\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "168", "code": "            def main(self):\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "169", "code": "                if self.logfile:\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "170", "code": "                    open(self.logfile, \"w\")\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "171", "code": "\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "172", "code": "    :param names: The switch names\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "173", "code": "    :param argtype: The switch argument's (and attribute's) type\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "174", "code": "    :param default: The attribute's default value (``None``)\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "175", "code": "    :param argname: The switch argument's name (default is ``\"VALUE\"``)\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "C", "line": "176", "code": "    :param kwargs: Any of the keyword arguments accepted by :func:`switch <plumbum.cli.switch>`\n", "colour": "blue", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "177", "code": "    \"\"\"\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "178", "code": "    ATTR_NAME = '__plumbum_switchattr_dict__'\n", "colour": "black", "author": "coroa@online.de"}, {"error": "none", "line": "179", "code": "\n", "colour": "black", "author": "coroa@online.de"}, {"error": "R", "line": "180", "code": "    def __init__(self, names, argtype = str, default = None, list = False, argname = \"VALUE\", **kwargs):\n", "colour": "green", "author": "Tomer.Filiba@emc.com"}, {"error": "C", "line": "181", "code": "        self.__doc__ = \"Sets an attribute\"  # to prevent the help message from showing SwitchAttr's docstring\n", "colour": "blue", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "182", "code": "        if \"help\" in kwargs and default:\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "183", "code": "            kwargs[\"help\"] += \"; the default is %r\" % (default,)\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "184", "code": "\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "C", "line": "185", "code": "        switch(names, argtype = argtype, argname = argname, list = list, **kwargs)(self)\n", "colour": "blue", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "186", "code": "        listtype = type([])\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "187", "code": "        if list:\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "188", "code": "            if default is None:\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "189", "code": "                self._default_value = []\n", "colour": "black", "author": "coroa@online.de"}, {"error": "none", "line": "190", "code": "            elif isinstance(default, (tuple, listtype)):\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "191", "code": "                self._default_value = listtype(default)\n", "colour": "black", "author": "coroa@online.de"}, {"error": "none", "line": "192", "code": "            else:\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "193", "code": "                self._default_value = [default]\n", "colour": "black", "author": "coroa@online.de"}, {"error": "none", "line": "194", "code": "        else:\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "195", "code": "            self._default_value = default\n", "colour": "black", "author": "coroa@online.de"}, {"error": "none", "line": "196", "code": "\n", "colour": "black", "author": "coroa@online.de"}, {"error": "none", "line": "197", "code": "    def __call__(self, inst, val):\n", "colour": "black", "author": "coroa@online.de"}, {"error": "none", "line": "198", "code": "        self.__set__(inst, val)\n", "colour": "black", "author": "coroa@online.de"}, {"error": "none", "line": "199", "code": "\n", "colour": "black", "author": "coroa@online.de"}, {"error": "none", "line": "200", "code": "    def __get__(self, inst, cls):\n", "colour": "black", "author": "coroa@online.de"}, {"error": "none", "line": "201", "code": "        if inst is None:\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "202", "code": "            return self\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "203", "code": "        else:\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "C", "line": "204", "code": "            return getattr(inst, self.ATTR_NAME, {}).get(self, self._default_value)\n", "colour": "blue", "author": "tomerfiliba@gmail.com"}, {"error": "none", "line": "205", "code": "\n", "colour": "black", "author": "coroa@online.de"}, {"error": "none", "line": "206", "code": "    def __set__(self, inst, val):\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "207", "code": "        if inst is None:\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "208", "code": "            raise AttributeError(\"cannot set an unbound SwitchAttr\")\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "209", "code": "        else:\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "210", "code": "            if not hasattr(inst, self.ATTR_NAME):\n", "colour": "black", "author": "tomerfiliba@gmail.com"}, {"error": "none", "line": "211", "code": "                setattr(inst, self.ATTR_NAME, {self : val})\n", "colour": "black", "author": "tomerfiliba@gmail.com"}, {"error": "none", "line": "212", "code": "            else:\n", "colour": "black", "author": "tomerfiliba@gmail.com"}, {"error": "none", "line": "213", "code": "                getattr(inst, self.ATTR_NAME)[self] = val\n", "colour": "black", "author": "tomerfiliba@gmail.com"}, {"error": "none", "line": "214", "code": "\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "R", "line": "215", "code": "class Flag(SwitchAttr):\n", "colour": "green", "author": "Tomer.Filiba@emc.com"}, {"error": "C", "line": "216", "code": "    \"\"\"A specialized :class:`SwitchAttr <plumbum.cli.SwitchAttr>` for boolean flags. If the flag is not\n", "colour": "blue", "author": "Tomer.Filiba@emc.com"}, {"error": "C", "line": "217", "code": "    given, the value of this attribute is the ``default``; if it is given, the value changes\n", "colour": "blue", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "218", "code": "    to ``not default``. Usage::\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "219", "code": "\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "220", "code": "        class MyApp(Application):\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "C", "line": "221", "code": "            verbose = Flag([\"-v\", \"--verbose\"], help = \"If given, I'll be very talkative\")\n", "colour": "blue", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "222", "code": "\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "223", "code": "    :param names: The switch names\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "224", "code": "    :param default: The attribute's initial value (``False`` by default)\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "C", "line": "225", "code": "    :param kwargs: Any of the keyword arguments accepted by :func:`switch <plumbum.cli.switch>`,\n", "colour": "blue", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "226", "code": "                   except for ``list`` and ``argtype``.\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "227", "code": "    \"\"\"\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "C", "line": "228", "code": "    def __init__(self, names, default = False, **kwargs):\n", "colour": "blue", "author": "Tomer.Filiba@emc.com"}, {"error": "C", "line": "229", "code": "        SwitchAttr.__init__(self, names, argtype = None, default = default, list = False, **kwargs)\n", "colour": "blue", "author": "Tomer.Filiba@emc.com"}, {"error": "W", "line": "230", "code": "    def __call__(self, inst):\n", "colour": "purple", "author": "coroa@online.de"}, {"error": "none", "line": "231", "code": "        self.__set__(inst, not self._default_value)\n", "colour": "black", "author": "coroa@online.de"}, {"error": "none", "line": "232", "code": "\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "R", "line": "233", "code": "class CountOf(SwitchAttr):\n", "colour": "green", "author": "Tomer.Filiba@emc.com"}, {"error": "C", "line": "234", "code": "    \"\"\"A specialized :class:`SwitchAttr <plumbum.cli.SwitchAttr>` that counts the number of\n", "colour": "blue", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "235", "code": "    occurrences of the switch in the command line. Usage::\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "236", "code": "\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "237", "code": "        class MyApp(Application):\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "C", "line": "238", "code": "            verbosity = CountOf([\"-v\", \"--verbose\"], help = \"The more, the merrier\")\n", "colour": "blue", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "239", "code": "\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "C", "line": "240", "code": "    If ``-v -v -vv`` is given in the command-line, it will result in ``verbosity = 4``.\n", "colour": "blue", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "241", "code": "\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "242", "code": "    :param names: The switch names\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "243", "code": "    :param default: The default value (0)\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "C", "line": "244", "code": "    :param kwargs: Any of the keyword arguments accepted by :func:`switch <plumbum.cli.switch>`,\n", "colour": "blue", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "245", "code": "                   except for ``list`` and ``argtype``.\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "246", "code": "    \"\"\"\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "C", "line": "247", "code": "    def __init__(self, names, default = 0, **kwargs):\n", "colour": "blue", "author": "Tomer.Filiba@emc.com"}, {"error": "C", "line": "248", "code": "        SwitchAttr.__init__(self, names, argtype = None, default = default, list = True, **kwargs)\n", "colour": "blue", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "249", "code": "        self._default_value = default  # issue #118\n", "colour": "black", "author": "tomerfiliba@gmail.com"}, {"error": "none", "line": "250", "code": "    def __call__(self, inst, v):\n", "colour": "black", "author": "coroa@online.de"}, {"error": "none", "line": "251", "code": "        self.__set__(inst, len(v))\n", "colour": "black", "author": "coroa@online.de"}, {"error": "none", "line": "252", "code": "\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "C", "line": "253", "code": "#===================================================================================================\n", "colour": "blue", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "254", "code": "# Switch type validators\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "C", "line": "255", "code": "#===================================================================================================\n", "colour": "blue", "author": "Tomer.Filiba@emc.com"}, {"error": "R", "line": "256", "code": "class Range(object):\n", "colour": "green", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "257", "code": "    \"\"\"\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "C", "line": "258", "code": "    A switch-type validator that checks for the inclusion of a value in a certain range.\n", "colour": "blue", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "259", "code": "    Usage::\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "260", "code": "\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "261", "code": "        class MyApp(Application):\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "262", "code": "            age = SwitchAttr([\"--age\"], Range(18, 120))\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "263", "code": "\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "264", "code": "    :param start: The minimal value\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "265", "code": "    :param end: The maximal value\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "266", "code": "    \"\"\"\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "267", "code": "    def __init__(self, start, end):\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "268", "code": "        self.start = start\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "269", "code": "        self.end = end\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "270", "code": "    def __repr__(self):\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "271", "code": "        return \"[%d..%d]\" % (self.start, self.end)\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "272", "code": "    def __call__(self, obj):\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "273", "code": "        obj = int(obj)\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "274", "code": "        if obj < self.start or obj > self.end:\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "275", "code": "            raise ValueError(\"Not in range [%d..%d]\" % (self.start, self.end))\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "276", "code": "        return obj\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "277", "code": "\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "R", "line": "278", "code": "class Set(object):\n", "colour": "green", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "279", "code": "    \"\"\"\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "280", "code": "    A switch-type validator that checks that the value is contained in a defined\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "281", "code": "    set of values. Usage::\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "282", "code": "\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "283", "code": "        class MyApp(Application):\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "C", "line": "284", "code": "            mode = SwitchAttr([\"--mode\"], Set(\"TCP\", \"UDP\", case_insensitive = False))\n", "colour": "blue", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "285", "code": "\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "286", "code": "    :param values: The set of values (strings)\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "C", "line": "287", "code": "    :param case_insensitive: A keyword argument that indicates whether to use case-sensitive\n", "colour": "blue", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "288", "code": "                             comparison or not. The default is ``True``\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "289", "code": "    \"\"\"\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "290", "code": "    def __init__(self, *values, **kwargs):\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "291", "code": "        self.case_sensitive = kwargs.pop(\"case_sensitive\", False)\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "292", "code": "        if kwargs:\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "C", "line": "293", "code": "            raise TypeError(\"got unexpected keyword argument(s): %r\" % (kwargs.keys(),))\n", "colour": "blue", "author": "Tomer.Filiba@emc.com"}, {"error": "C", "line": "294", "code": "        self.values = dict(((v if self.case_sensitive else v.lower()), v) for v in values)\n", "colour": "blue", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "295", "code": "    def __repr__(self):\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "296", "code": "        return \"{%s}\" % (\", \".join(repr(v) for v in self.values.values()))\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "297", "code": "    def __call__(self, obj):\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "298", "code": "        if not self.case_sensitive:\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "299", "code": "            obj = obj.lower()\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "300", "code": "        if obj not in self.values:\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "C", "line": "301", "code": "            raise ValueError(\"Expected one of %r\" % (list(self.values.values()),))\n", "colour": "blue", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "302", "code": "        return self.values[obj]\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "303", "code": "\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "R", "line": "304", "code": "class Predicate(object):\n", "colour": "green", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "305", "code": "    \"\"\"A wrapper for a single-argument function with pretty printing\"\"\"\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "306", "code": "    def __init__(self, func):\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "307", "code": "        self.func = func\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "308", "code": "    def __str__(self):\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "309", "code": "        return self.func.__name__\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "310", "code": "    def __call__(self, val):\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "311", "code": "        return self.func(val)\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "312", "code": "\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "313", "code": "@Predicate\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "C", "line": "314", "code": "def ExistingDirectory(val):\n", "colour": "blue", "author": "Tomer.Filiba@emc.com"}, {"error": "C", "line": "315", "code": "    \"\"\"A switch-type validator that ensures that the given argument is an existing directory\"\"\"\n", "colour": "blue", "author": "Tomer.Filiba@emc.com"}, {"error": "C", "line": "316", "code": "    p = local.path(val)\n", "colour": "blue", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "317", "code": "    if not p.isdir():\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "318", "code": "        raise ValueError(\"%r is not a directory\" % (val,))\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "319", "code": "    return p\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "320", "code": "\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "321", "code": "@Predicate\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "C", "line": "322", "code": "def ExistingFile(val):\n", "colour": "blue", "author": "Tomer.Filiba@emc.com"}, {"error": "C", "line": "323", "code": "    \"\"\"A switch-type validator that ensures that the given argument is an existing file\"\"\"\n", "colour": "blue", "author": "Tomer.Filiba@emc.com"}, {"error": "C", "line": "324", "code": "    p = local.path(val)\n", "colour": "blue", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "325", "code": "    if not p.isfile():\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "326", "code": "        raise ValueError(\"%r is not a file\" % (val,))\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "327", "code": "    return p\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "328", "code": "\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "329", "code": "@Predicate\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "C", "line": "330", "code": "def NonexistentPath(val):\n", "colour": "blue", "author": "Tomer.Filiba@emc.com"}, {"error": "C", "line": "331", "code": "    \"\"\"A switch-type validator that ensures that the given argument is a nonexistent path\"\"\"\n", "colour": "blue", "author": "Tomer.Filiba@emc.com"}, {"error": "C", "line": "332", "code": "    p = local.path(val)\n", "colour": "blue", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "333", "code": "    if p.exists():\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "334", "code": "        raise ValueError(\"%r already exists\" % (val,))\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "335", "code": "    return p\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "336", "code": "\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "337", "code": "\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "338", "code": "\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}]]}