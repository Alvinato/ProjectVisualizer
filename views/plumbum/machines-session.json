{"path": "/home/asumal/git/cs410/plumbum/plumbum/machines/session.py", "lines": [[{"error": "C", "line": "1", "code": "import time\n", "colour": "blue", "author": "tomerf@il.ibm.com"}, {"error": "none", "line": "2", "code": "import random\n", "colour": "black", "author": "tomerf@il.ibm.com"}, {"error": "none", "line": "3", "code": "import logging\n", "colour": "black", "author": "tomerf@il.ibm.com"}, {"error": "none", "line": "4", "code": "import threading\n", "colour": "black", "author": "tomerfiliba@gmail.com"}, {"error": "none", "line": "5", "code": "from plumbum.commands import BaseCommand, run_proc\n", "colour": "black", "author": "tomerf@il.ibm.com"}, {"error": "none", "line": "6", "code": "from plumbum.lib import six\n", "colour": "black", "author": "tomerfiliba@gmail.com"}, {"error": "none", "line": "7", "code": "\n", "colour": "black", "author": "tomerf@il.ibm.com"}, {"error": "none", "line": "8", "code": "\n", "colour": "black", "author": "tomerf@il.ibm.com"}, {"error": "none", "line": "9", "code": "class ShellSessionError(Exception):\n", "colour": "black", "author": "tomerf@il.ibm.com"}, {"error": "none", "line": "10", "code": "    \"\"\"Raises when something goes wrong when calling\n", "colour": "black", "author": "tomer.filiba@emc.com"}, {"error": "none", "line": "11", "code": "    :func:`ShellSession.popen <plumbum.session.ShellSession.popen>`\"\"\"\n", "colour": "black", "author": "tomerf@il.ibm.com"}, {"error": "none", "line": "12", "code": "    pass\n", "colour": "black", "author": "tomerf@il.ibm.com"}, {"error": "none", "line": "13", "code": "\n", "colour": "black", "author": "tomerf@il.ibm.com"}, {"error": "C", "line": "14", "code": "shell_logger = logging.getLogger(\"plumbum.shell\")\n", "colour": "blue", "author": "tomerf@il.ibm.com"}, {"error": "none", "line": "15", "code": "\n", "colour": "black", "author": "tomerf@il.ibm.com"}, {"error": "none", "line": "16", "code": "\n", "colour": "black", "author": "tomerf@il.ibm.com"}, {"error": "C", "line": "17", "code": "#===================================================================================================\n", "colour": "blue", "author": "tomerf@il.ibm.com"}, {"error": "none", "line": "18", "code": "# Shell Session Popen\n", "colour": "black", "author": "tomerf@il.ibm.com"}, {"error": "C", "line": "19", "code": "#===================================================================================================\n", "colour": "blue", "author": "tomerf@il.ibm.com"}, {"error": "none", "line": "20", "code": "class MarkedPipe(object):\n", "colour": "black", "author": "tomerf@il.ibm.com"}, {"error": "C", "line": "21", "code": "    \"\"\"A pipe-like object from which you can read lines; the pipe will return report EOF (the\n", "colour": "blue", "author": "tomer.filiba@emc.com"}, {"error": "none", "line": "22", "code": "    empty string) when a special marker is detected\"\"\"\n", "colour": "black", "author": "tomerf@il.ibm.com"}, {"error": "none", "line": "23", "code": "    __slots__ = [\"pipe\", \"marker\"]\n", "colour": "black", "author": "tomerf@il.ibm.com"}, {"error": "none", "line": "24", "code": "    def __init__(self, pipe, marker):\n", "colour": "black", "author": "tomerf@il.ibm.com"}, {"error": "none", "line": "25", "code": "        self.pipe = pipe\n", "colour": "black", "author": "tomerf@il.ibm.com"}, {"error": "none", "line": "26", "code": "        self.marker = marker\n", "colour": "black", "author": "tomerf@il.ibm.com"}, {"error": "none", "line": "27", "code": "        if six.PY3:\n", "colour": "black", "author": "tomerf@il.ibm.com"}, {"error": "none", "line": "28", "code": "            self.marker = six.bytes(self.marker, \"ascii\")\n", "colour": "black", "author": "tomerfiliba@gmail.com"}, {"error": "none", "line": "29", "code": "    def close(self):\n", "colour": "black", "author": "tomerf@il.ibm.com"}, {"error": "C", "line": "30", "code": "        \"\"\"'Closes' the marked pipe; following calls to ``readline`` will return \"\"\"\"\"\n", "colour": "blue", "author": "tomerf@il.ibm.com"}, {"error": "none", "line": "31", "code": "        # consume everything\n", "colour": "black", "author": "tomerf@il.ibm.com"}, {"error": "none", "line": "32", "code": "        while self.readline():\n", "colour": "black", "author": "tomerf@il.ibm.com"}, {"error": "none", "line": "33", "code": "            pass\n", "colour": "black", "author": "tomer.filiba@emc.com"}, {"error": "none", "line": "34", "code": "        self.pipe = None\n", "colour": "black", "author": "tomerf@il.ibm.com"}, {"error": "none", "line": "35", "code": "    def readline(self):\n", "colour": "black", "author": "tomerf@il.ibm.com"}, {"error": "C", "line": "36", "code": "        \"\"\"Reads the next line from the pipe; returns \"\" when the special marker is reached.\n", "colour": "blue", "author": "tomerf@il.ibm.com"}, {"error": "none", "line": "37", "code": "        Raises ``EOFError`` if the underlying pipe has closed\"\"\"\n", "colour": "black", "author": "tomerf@il.ibm.com"}, {"error": "none", "line": "38", "code": "        if self.pipe is None:\n", "colour": "black", "author": "tomerf@il.ibm.com"}, {"error": "none", "line": "39", "code": "            return six.b(\"\")\n", "colour": "black", "author": "tomerf@il.ibm.com"}, {"error": "none", "line": "40", "code": "        line = self.pipe.readline()\n", "colour": "black", "author": "tomerf@il.ibm.com"}, {"error": "none", "line": "41", "code": "        if not line:\n", "colour": "black", "author": "tomerf@il.ibm.com"}, {"error": "none", "line": "42", "code": "            raise EOFError()\n", "colour": "black", "author": "tomerf@il.ibm.com"}, {"error": "none", "line": "43", "code": "        if line.strip() == self.marker:\n", "colour": "black", "author": "tomerf@il.ibm.com"}, {"error": "none", "line": "44", "code": "            self.pipe = None\n", "colour": "black", "author": "tomerf@il.ibm.com"}, {"error": "none", "line": "45", "code": "            line = six.b(\"\")\n", "colour": "black", "author": "tomerf@il.ibm.com"}, {"error": "none", "line": "46", "code": "        return line\n", "colour": "black", "author": "tomerf@il.ibm.com"}, {"error": "none", "line": "47", "code": "\n", "colour": "black", "author": "tomerf@il.ibm.com"}, {"error": "none", "line": "48", "code": "\n", "colour": "black", "author": "tomerf@il.ibm.com"}, {"error": "R", "line": "49", "code": "class SessionPopen(object):\n", "colour": "green", "author": "tomerf@il.ibm.com"}, {"error": "C", "line": "50", "code": "    \"\"\"A shell-session-based ``Popen``-like object (has the following attributes: ``stdin``,\n", "colour": "blue", "author": "tomerf@il.ibm.com"}, {"error": "none", "line": "51", "code": "    ``stdout``, ``stderr``, ``returncode``)\"\"\"\n", "colour": "black", "author": "tomerf@il.ibm.com"}, {"error": "R", "line": "52", "code": "    def __init__(self, argv, isatty, stdin, stdout, stderr, encoding):\n", "colour": "green", "author": "tomerfiliba@gmail.com"}, {"error": "none", "line": "53", "code": "        self.argv = argv\n", "colour": "black", "author": "tomerf@il.ibm.com"}, {"error": "none", "line": "54", "code": "        self.isatty = isatty\n", "colour": "black", "author": "tomerf@il.ibm.com"}, {"error": "none", "line": "55", "code": "        self.stdin = stdin\n", "colour": "black", "author": "tomerf@il.ibm.com"}, {"error": "none", "line": "56", "code": "        self.stdout = stdout\n", "colour": "black", "author": "tomerf@il.ibm.com"}, {"error": "none", "line": "57", "code": "        self.stderr = stderr\n", "colour": "black", "author": "tomerf@il.ibm.com"}, {"error": "none", "line": "58", "code": "        self.encoding = encoding\n", "colour": "black", "author": "tomerfiliba@gmail.com"}, {"error": "none", "line": "59", "code": "        self.returncode = None\n", "colour": "black", "author": "tomerf@il.ibm.com"}, {"error": "none", "line": "60", "code": "        self._done = False\n", "colour": "black", "author": "tomerf@il.ibm.com"}, {"error": "none", "line": "61", "code": "    def poll(self):\n", "colour": "black", "author": "tomerf@il.ibm.com"}, {"error": "none", "line": "62", "code": "        \"\"\"Returns the process' exit code or ``None`` if it's still running\"\"\"\n", "colour": "black", "author": "tomerf@il.ibm.com"}, {"error": "none", "line": "63", "code": "        if self._done:\n", "colour": "black", "author": "tomerf@il.ibm.com"}, {"error": "none", "line": "64", "code": "            return self.returncode\n", "colour": "black", "author": "tomerf@il.ibm.com"}, {"error": "none", "line": "65", "code": "        else:\n", "colour": "black", "author": "tomerf@il.ibm.com"}, {"error": "none", "line": "66", "code": "            return None\n", "colour": "black", "author": "tomerf@il.ibm.com"}, {"error": "none", "line": "67", "code": "    def wait(self):\n", "colour": "black", "author": "tomerf@il.ibm.com"}, {"error": "none", "line": "68", "code": "        \"\"\"Waits for the process to terminate and returns its exit code\"\"\"\n", "colour": "black", "author": "tomerf@il.ibm.com"}, {"error": "none", "line": "69", "code": "        self.communicate()\n", "colour": "black", "author": "tomerf@il.ibm.com"}, {"error": "none", "line": "70", "code": "        return self.returncode\n", "colour": "black", "author": "tomerf@il.ibm.com"}, {"error": "W", "line": "71", "code": "    def communicate(self, input = None):\n", "colour": "purple", "author": "tomerf@il.ibm.com"}, {"error": "none", "line": "72", "code": "        \"\"\"Consumes the process' stdout and stderr until the it terminates.\n", "colour": "black", "author": "tomer.filiba@emc.com"}, {"error": "none", "line": "73", "code": "\n", "colour": "black", "author": "tomer.filiba@emc.com"}, {"error": "C", "line": "74", "code": "        :param input: An optional bytes/buffer object to send to the process over stdin\n", "colour": "blue", "author": "tomerf@il.ibm.com"}, {"error": "none", "line": "75", "code": "        :returns: A tuple of (stdout, stderr)\n", "colour": "black", "author": "tomerf@il.ibm.com"}, {"error": "none", "line": "76", "code": "        \"\"\"\n", "colour": "black", "author": "tomerf@il.ibm.com"}, {"error": "none", "line": "77", "code": "        stdout = []\n", "colour": "black", "author": "tomerf@il.ibm.com"}, {"error": "none", "line": "78", "code": "        stderr = []\n", "colour": "black", "author": "tomerf@il.ibm.com"}, {"error": "none", "line": "79", "code": "        sources = [(\"1\", stdout, self.stdout)]\n", "colour": "black", "author": "tomerf@il.ibm.com"}, {"error": "none", "line": "80", "code": "        if not self.isatty:\n", "colour": "black", "author": "tomerf@il.ibm.com"}, {"error": "none", "line": "81", "code": "            # in tty mode, stdout and stderr are unified\n", "colour": "black", "author": "tomerf@il.ibm.com"}, {"error": "none", "line": "82", "code": "            sources.append((\"2\", stderr, self.stderr))\n", "colour": "black", "author": "tomerf@il.ibm.com"}, {"error": "none", "line": "83", "code": "        i = 0\n", "colour": "black", "author": "tomerf@il.ibm.com"}, {"error": "none", "line": "84", "code": "        while sources:\n", "colour": "black", "author": "tomerf@il.ibm.com"}, {"error": "none", "line": "85", "code": "            if input:\n", "colour": "black", "author": "tomerf@il.ibm.com"}, {"error": "none", "line": "86", "code": "                chunk = input[:1000]\n", "colour": "black", "author": "tomerf@il.ibm.com"}, {"error": "none", "line": "87", "code": "                self.stdin.write(chunk)\n", "colour": "black", "author": "tomerf@il.ibm.com"}, {"error": "none", "line": "88", "code": "                self.stdin.flush()\n", "colour": "black", "author": "tomerf@il.ibm.com"}, {"error": "none", "line": "89", "code": "                input = input[1000:]\n", "colour": "black", "author": "tomerf@il.ibm.com"}, {"error": "none", "line": "90", "code": "            i = (i + 1) % len(sources)\n", "colour": "black", "author": "tomerf@il.ibm.com"}, {"error": "none", "line": "91", "code": "            name, coll, pipe = sources[i]\n", "colour": "black", "author": "tomerf@il.ibm.com"}, {"error": "none", "line": "92", "code": "            line = pipe.readline()\n", "colour": "black", "author": "tomerf@il.ibm.com"}, {"error": "none", "line": "93", "code": "            shell_logger.debug(\"%s> %r\", name, line)\n", "colour": "black", "author": "tomerf@il.ibm.com"}, {"error": "none", "line": "94", "code": "            if not line:\n", "colour": "black", "author": "tomerf@il.ibm.com"}, {"error": "none", "line": "95", "code": "                del sources[i]\n", "colour": "black", "author": "tomerf@il.ibm.com"}, {"error": "none", "line": "96", "code": "            else:\n", "colour": "black", "author": "tomerf@il.ibm.com"}, {"error": "none", "line": "97", "code": "                coll.append(line)\n", "colour": "black", "author": "tomerf@il.ibm.com"}, {"error": "none", "line": "98", "code": "        if self.isatty:\n", "colour": "black", "author": "tomerf@il.ibm.com"}, {"error": "none", "line": "99", "code": "            stdout.pop(0)  # discard first line of prompt\n", "colour": "black", "author": "tomer.filiba@emc.com"}, {"error": "none", "line": "100", "code": "        try:\n", "colour": "black", "author": "tomerf@il.ibm.com"}, {"error": "none", "line": "101", "code": "            self.returncode = int(stdout.pop(-1))\n", "colour": "black", "author": "tomerf@il.ibm.com"}, {"error": "none", "line": "102", "code": "        except (IndexError, ValueError):\n", "colour": "black", "author": "tomerf@il.ibm.com"}, {"error": "none", "line": "103", "code": "            self.returncode = \"Unknown\"\n", "colour": "black", "author": "tomerf@il.ibm.com"}, {"error": "none", "line": "104", "code": "        self._done = True\n", "colour": "black", "author": "tomerf@il.ibm.com"}, {"error": "none", "line": "105", "code": "        stdout = six.b(\"\").join(stdout)\n", "colour": "black", "author": "tomerfiliba@gmail.com"}, {"error": "none", "line": "106", "code": "        stderr = six.b(\"\").join(stderr)\n", "colour": "black", "author": "tomerfiliba@gmail.com"}, {"error": "none", "line": "107", "code": "        return stdout, stderr\n", "colour": "black", "author": "tomerf@il.ibm.com"}, {"error": "none", "line": "108", "code": "\n", "colour": "black", "author": "tomerf@il.ibm.com"}, {"error": "none", "line": "109", "code": "\n", "colour": "black", "author": "tomerf@il.ibm.com"}, {"error": "none", "line": "110", "code": "class ShellSession(object):\n", "colour": "black", "author": "tomerf@il.ibm.com"}, {"error": "C", "line": "111", "code": "    \"\"\"An abstraction layer over *shell sessions*. A shell session is the execution of an\n", "colour": "blue", "author": "tomerf@il.ibm.com"}, {"error": "C", "line": "112", "code": "    interactive shell (``/bin/sh`` or something compatible), over which you may run commands\n", "colour": "blue", "author": "tomerf@il.ibm.com"}, {"error": "C", "line": "113", "code": "    (sent over stdin). The output of is then read from stdout and stderr. Shell sessions are\n", "colour": "blue", "author": "tomerf@il.ibm.com"}, {"error": "C", "line": "114", "code": "    less \"robust\" than executing a process on its own, and they are susseptible to all sorts\n", "colour": "blue", "author": "tomerf@il.ibm.com"}, {"error": "C", "line": "115", "code": "    of malformatted-strings attacks, and there is little benefit from using them locally.\n", "colour": "blue", "author": "tomer.filiba@emc.com"}, {"error": "C", "line": "116", "code": "    However, they can greatly speed up remote connections, and are required for the implementation\n", "colour": "blue", "author": "tomerf@il.ibm.com"}, {"error": "C", "line": "117", "code": "    of :class:`SshMachine <plumbum.machines.remote.SshMachine>`, as they allow us to send multiple\n", "colour": "blue", "author": "Tomer.Filiba@emc.com"}, {"error": "C", "line": "118", "code": "    commands over a single SSH connection (setting up separate SSH connections incurs a high\n", "colour": "blue", "author": "tomerf@il.ibm.com"}, {"error": "C", "line": "119", "code": "    overhead). Try to avoid using shell sessions, unless you know what you're doing.\n", "colour": "blue", "author": "tomer.filiba@emc.com"}, {"error": "none", "line": "120", "code": "\n", "colour": "black", "author": "tomer.filiba@emc.com"}, {"error": "none", "line": "121", "code": "    Instances of this class may be used as *context-managers*.\n", "colour": "black", "author": "tomerf@il.ibm.com"}, {"error": "none", "line": "122", "code": "\n", "colour": "black", "author": "tomer.filiba@emc.com"}, {"error": "C", "line": "123", "code": "    :param proc: The underlying shell process (with open stdin, stdout and stderr)\n", "colour": "blue", "author": "tomerf@il.ibm.com"}, {"error": "C", "line": "124", "code": "    :param encoding: The encoding to use for the shell session. If ``\"auto\"``, the underlying\n", "colour": "blue", "author": "tomerf@il.ibm.com"}, {"error": "none", "line": "125", "code": "                     process' encoding is used.\n", "colour": "black", "author": "tomerf@il.ibm.com"}, {"error": "C", "line": "126", "code": "    :param isatty: If true, assume the shell has a TTY and that stdout and stderr are unified\n", "colour": "blue", "author": "tomer.filiba@emc.com"}, {"error": "C", "line": "127", "code": "    :param connect_timeout: The timeout to connect to the shell, after which, if no prompt\n", "colour": "blue", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "128", "code": "                            is seen, the shell process is killed\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "129", "code": "    \"\"\"\n", "colour": "black", "author": "tomerf@il.ibm.com"}, {"error": "C", "line": "130", "code": "    def __init__(self, proc, encoding = \"auto\", isatty = False, connect_timeout = 5):\n", "colour": "blue", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "131", "code": "        self.proc = proc\n", "colour": "black", "author": "tomerf@il.ibm.com"}, {"error": "none", "line": "132", "code": "        self.encoding = proc.encoding if encoding == \"auto\" else encoding\n", "colour": "black", "author": "tomer.filiba@emc.com"}, {"error": "none", "line": "133", "code": "        self.isatty = isatty\n", "colour": "black", "author": "tomerf@il.ibm.com"}, {"error": "none", "line": "134", "code": "        self._current = None\n", "colour": "black", "author": "tomerf@il.ibm.com"}, {"error": "none", "line": "135", "code": "        if connect_timeout:\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "W", "line": "136", "code": "            def closer():\n", "colour": "purple", "author": "tomerfiliba@gmail.com"}, {"error": "C", "line": "137", "code": "                shell_logger.error(\"Connection to %s timed out (%d sec)\", proc, connect_timeout)\n", "colour": "blue", "author": "tomerfiliba@gmail.com"}, {"error": "none", "line": "138", "code": "                self.close()\n", "colour": "black", "author": "tomerfiliba@gmail.com"}, {"error": "none", "line": "139", "code": "            timer = threading.Timer(connect_timeout, self.close)\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "140", "code": "            timer.start()\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "141", "code": "        self.run(\"\")\n", "colour": "black", "author": "tomerf@il.ibm.com"}, {"error": "none", "line": "142", "code": "        if connect_timeout:\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "143", "code": "            timer.cancel()\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "144", "code": "\n", "colour": "black", "author": "tomer.filiba@emc.com"}, {"error": "none", "line": "145", "code": "    def __enter__(self):\n", "colour": "black", "author": "tomerf@il.ibm.com"}, {"error": "none", "line": "146", "code": "        return self\n", "colour": "black", "author": "tomerf@il.ibm.com"}, {"error": "C", "line": "147", "code": "    def __exit__(self, t, v, tb):\n", "colour": "blue", "author": "tomerf@il.ibm.com"}, {"error": "none", "line": "148", "code": "        self.close()\n", "colour": "black", "author": "tomerf@il.ibm.com"}, {"error": "none", "line": "149", "code": "    def __del__(self):\n", "colour": "black", "author": "tomerf@il.ibm.com"}, {"error": "none", "line": "150", "code": "        try:\n", "colour": "black", "author": "tomerf@il.ibm.com"}, {"error": "none", "line": "151", "code": "            self.close()\n", "colour": "black", "author": "tomerf@il.ibm.com"}, {"error": "W", "line": "152", "code": "        except Exception:\n", "colour": "purple", "author": "tomerf@il.ibm.com"}, {"error": "none", "line": "153", "code": "            pass\n", "colour": "black", "author": "tomerf@il.ibm.com"}, {"error": "none", "line": "154", "code": "\n", "colour": "black", "author": "tomer.filiba@emc.com"}, {"error": "none", "line": "155", "code": "    def alive(self):\n", "colour": "black", "author": "tomerf@il.ibm.com"}, {"error": "C", "line": "156", "code": "        \"\"\"Returns ``True`` if the underlying shell process is alive, ``False`` otherwise\"\"\"\n", "colour": "blue", "author": "tomerf@il.ibm.com"}, {"error": "none", "line": "157", "code": "        return self.proc and self.proc.poll() is None\n", "colour": "black", "author": "tomerf@il.ibm.com"}, {"error": "none", "line": "158", "code": "\n", "colour": "black", "author": "tomer.filiba@emc.com"}, {"error": "none", "line": "159", "code": "    def close(self):\n", "colour": "black", "author": "tomerf@il.ibm.com"}, {"error": "none", "line": "160", "code": "        \"\"\"Closes (terminates) the shell session\"\"\"\n", "colour": "black", "author": "tomerf@il.ibm.com"}, {"error": "none", "line": "161", "code": "        if not self.alive():\n", "colour": "black", "author": "tomerf@il.ibm.com"}, {"error": "none", "line": "162", "code": "            return\n", "colour": "black", "author": "tomerf@il.ibm.com"}, {"error": "none", "line": "163", "code": "        try:\n", "colour": "black", "author": "tomerf@il.ibm.com"}, {"error": "none", "line": "164", "code": "            self.proc.stdin.write(six.b(\"\\nexit\\n\\n\\nexit\\n\\n\"))\n", "colour": "black", "author": "tomerfiliba@gmail.com"}, {"error": "none", "line": "165", "code": "            self.proc.stdin.flush()\n", "colour": "black", "author": "tomerf@il.ibm.com"}, {"error": "none", "line": "166", "code": "            time.sleep(0.05)\n", "colour": "black", "author": "tomerf@il.ibm.com"}, {"error": "none", "line": "167", "code": "        except (ValueError, EnvironmentError):\n", "colour": "black", "author": "tomerfiliba@gmail.com"}, {"error": "none", "line": "168", "code": "            pass\n", "colour": "black", "author": "tomerfiliba@gmail.com"}, {"error": "C", "line": "169", "code": "        for p in [self.proc.stdin, self.proc.stdout, self.proc.stderr]:\n", "colour": "blue", "author": "tomerf@il.ibm.com"}, {"error": "none", "line": "170", "code": "            try:\n", "colour": "black", "author": "tomerf@il.ibm.com"}, {"error": "none", "line": "171", "code": "                p.close()\n", "colour": "black", "author": "tomerf@il.ibm.com"}, {"error": "W", "line": "172", "code": "            except Exception:\n", "colour": "purple", "author": "tomerf@il.ibm.com"}, {"error": "none", "line": "173", "code": "                pass\n", "colour": "black", "author": "tomerf@il.ibm.com"}, {"error": "none", "line": "174", "code": "        try:\n", "colour": "black", "author": "tomerfiliba@gmail.com"}, {"error": "none", "line": "175", "code": "            self.proc.kill()\n", "colour": "black", "author": "tomerfiliba@gmail.com"}, {"error": "none", "line": "176", "code": "        except EnvironmentError:\n", "colour": "black", "author": "tomerf@il.ibm.com"}, {"error": "none", "line": "177", "code": "            pass\n", "colour": "black", "author": "tomerf@il.ibm.com"}, {"error": "none", "line": "178", "code": "        self.proc = None\n", "colour": "black", "author": "tomerf@il.ibm.com"}, {"error": "none", "line": "179", "code": "\n", "colour": "black", "author": "tomer.filiba@emc.com"}, {"error": "none", "line": "180", "code": "    def popen(self, cmd):\n", "colour": "black", "author": "tomerf@il.ibm.com"}, {"error": "C", "line": "181", "code": "        \"\"\"Runs the given command in the shell, adding some decoration around it. Only a single\n", "colour": "blue", "author": "tomerf@il.ibm.com"}, {"error": "none", "line": "182", "code": "        command can be executed at any given time.\n", "colour": "black", "author": "tomerf@il.ibm.com"}, {"error": "none", "line": "183", "code": "\n", "colour": "black", "author": "tomer.filiba@emc.com"}, {"error": "C", "line": "184", "code": "        :param cmd: The command (string or :class:`Command <plumbum.commands.BaseCommand>` object)\n", "colour": "blue", "author": "tomerf@il.ibm.com"}, {"error": "none", "line": "185", "code": "                    to run\n", "colour": "black", "author": "tomerf@il.ibm.com"}, {"error": "C", "line": "186", "code": "        :returns: A :class:`SessionPopen <plumbum.session.SessionPopen>` instance\n", "colour": "blue", "author": "tomerf@il.ibm.com"}, {"error": "none", "line": "187", "code": "        \"\"\"\n", "colour": "black", "author": "tomerf@il.ibm.com"}, {"error": "none", "line": "188", "code": "        if self.proc is None:\n", "colour": "black", "author": "tomerf@il.ibm.com"}, {"error": "none", "line": "189", "code": "            raise ShellSessionError(\"Shell session has already been closed\")\n", "colour": "black", "author": "tomerf@il.ibm.com"}, {"error": "W", "line": "190", "code": "        if self._current and not self._current._done:\n", "colour": "purple", "author": "tomerf@il.ibm.com"}, {"error": "C", "line": "191", "code": "            raise ShellSessionError(\"Each shell may start only one process at a time\")\n", "colour": "blue", "author": "tomerf@il.ibm.com"}, {"error": "none", "line": "192", "code": "\n", "colour": "black", "author": "tomer.filiba@emc.com"}, {"error": "none", "line": "193", "code": "        if isinstance(cmd, BaseCommand):\n", "colour": "black", "author": "tomerf@il.ibm.com"}, {"error": "none", "line": "194", "code": "            full_cmd = cmd.formulate(1)\n", "colour": "black", "author": "tomerf@il.ibm.com"}, {"error": "none", "line": "195", "code": "        else:\n", "colour": "black", "author": "tomerf@il.ibm.com"}, {"error": "none", "line": "196", "code": "            full_cmd = cmd\n", "colour": "black", "author": "tomerf@il.ibm.com"}, {"error": "none", "line": "197", "code": "        marker = \"--.END%s.--\" % (time.time() * random.random(),)\n", "colour": "black", "author": "tomerf@il.ibm.com"}, {"error": "none", "line": "198", "code": "        if full_cmd.strip():\n", "colour": "black", "author": "tomerf@il.ibm.com"}, {"error": "none", "line": "199", "code": "            full_cmd += \" ; \"\n", "colour": "black", "author": "tomerf@il.ibm.com"}, {"error": "none", "line": "200", "code": "        else:\n", "colour": "black", "author": "tomerf@il.ibm.com"}, {"error": "none", "line": "201", "code": "            full_cmd = \"true ; \"\n", "colour": "black", "author": "tomerf@il.ibm.com"}, {"error": "none", "line": "202", "code": "        full_cmd += \"echo $? ; echo '%s'\" % (marker,)\n", "colour": "black", "author": "tomerf@il.ibm.com"}, {"error": "none", "line": "203", "code": "        if not self.isatty:\n", "colour": "black", "author": "tomerf@il.ibm.com"}, {"error": "none", "line": "204", "code": "            full_cmd += \" ; echo '%s' 1>&2\" % (marker,)\n", "colour": "black", "author": "tomerf@il.ibm.com"}, {"error": "none", "line": "205", "code": "        if self.encoding:\n", "colour": "black", "author": "tomerfiliba@gmail.com"}, {"error": "none", "line": "206", "code": "            full_cmd = full_cmd.encode(self.encoding)\n", "colour": "black", "author": "tomerfiliba@gmail.com"}, {"error": "none", "line": "207", "code": "        shell_logger.debug(\"Running %r\", full_cmd)\n", "colour": "black", "author": "tomerf@il.ibm.com"}, {"error": "none", "line": "208", "code": "        self.proc.stdin.write(full_cmd + six.b(\"\\n\"))\n", "colour": "black", "author": "tomerfiliba@gmail.com"}, {"error": "none", "line": "209", "code": "        self.proc.stdin.flush()\n", "colour": "black", "author": "tomerf@il.ibm.com"}, {"error": "none", "line": "210", "code": "        self._current = SessionPopen(full_cmd, self.isatty, self.proc.stdin,\n", "colour": "black", "author": "tomer.filiba@emc.com"}, {"error": "C", "line": "211", "code": "            MarkedPipe(self.proc.stdout, marker), MarkedPipe(self.proc.stderr, marker),\n", "colour": "blue", "author": "tomerfiliba@gmail.com"}, {"error": "C", "line": "212", "code": "            self.encoding)\n", "colour": "blue", "author": "tomerfiliba@gmail.com"}, {"error": "none", "line": "213", "code": "        return self._current\n", "colour": "black", "author": "tomerf@il.ibm.com"}, {"error": "none", "line": "214", "code": "\n", "colour": "black", "author": "tomer.filiba@emc.com"}, {"error": "C", "line": "215", "code": "    def run(self, cmd, retcode = 0):\n", "colour": "blue", "author": "tomerf@il.ibm.com"}, {"error": "none", "line": "216", "code": "        \"\"\"Runs the given command\n", "colour": "black", "author": "tomer.filiba@emc.com"}, {"error": "none", "line": "217", "code": "\n", "colour": "black", "author": "tomer.filiba@emc.com"}, {"error": "C", "line": "218", "code": "        :param cmd: The command (string or :class:`Command <plumbum.commands.BaseCommand>` object)\n", "colour": "blue", "author": "tomerf@il.ibm.com"}, {"error": "none", "line": "219", "code": "                    to run\n", "colour": "black", "author": "tomerf@il.ibm.com"}, {"error": "C", "line": "220", "code": "        :param retcode: The expected return code (0 by default). Set to ``None`` in order to\n", "colour": "blue", "author": "tomer.filiba@emc.com"}, {"error": "none", "line": "221", "code": "                        ignore erroneous return codes\n", "colour": "black", "author": "tomerf@il.ibm.com"}, {"error": "none", "line": "222", "code": "        :returns: A tuple of (return code, stdout, stderr)\n", "colour": "black", "author": "tomerf@il.ibm.com"}, {"error": "none", "line": "223", "code": "        \"\"\"\n", "colour": "black", "author": "tomerf@il.ibm.com"}, {"error": "none", "line": "224", "code": "        return run_proc(self.popen(cmd), retcode)\n", "colour": "black", "author": "tomerf@il.ibm.com"}, {"error": "none", "line": "225", "code": "\n", "colour": "black", "author": "tomerf@il.ibm.com"}]]}