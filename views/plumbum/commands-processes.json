{"path": "/home/asumal/git/cs410/plumbum/plumbum/commands/processes.py", "lines": [[{"error": "C", "line": "1", "code": "from __future__ import with_statement\n", "colour": "blue", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "2", "code": "import time\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "3", "code": "import atexit\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "4", "code": "import heapq\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "5", "code": "from subprocess import Popen\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "6", "code": "from threading import Thread\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "7", "code": "from plumbum.lib import IS_WIN32, six\n", "colour": "black", "author": "tomerfiliba@gmail.com"}, {"error": "none", "line": "8", "code": "try:\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "F", "line": "9", "code": "    from queue import Queue, Empty as QueueEmpty\n", "colour": "red", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "10", "code": "except ImportError:\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "11", "code": "    from Queue import Queue, Empty as QueueEmpty\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "12", "code": "\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "13", "code": "\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "14", "code": "if not hasattr(Popen, \"kill\"):\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "15", "code": "    # python 2.5 compatibility\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "16", "code": "    import os\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "17", "code": "    import sys\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "18", "code": "    import signal\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "19", "code": "    if IS_WIN32:\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "F", "line": "20", "code": "        import _subprocess\n", "colour": "red", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "21", "code": "\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "C", "line": "22", "code": "        def _Popen_terminate(self):\n", "colour": "blue", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "23", "code": "            \"\"\"taken from subprocess.py of python 2.7\"\"\"\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "24", "code": "            try:\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "W", "line": "25", "code": "                _subprocess.TerminateProcess(self._handle, 1)\n", "colour": "purple", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "26", "code": "            except OSError:\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "27", "code": "                ex = sys.exc_info()[1]\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "28", "code": "                # ERROR_ACCESS_DENIED (winerror 5) is received when the\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "29", "code": "                # process already died.\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "30", "code": "                if ex.winerror != 5:\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "31", "code": "                    raise\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "W", "line": "32", "code": "                rc = _subprocess.GetExitCodeProcess(self._handle)\n", "colour": "purple", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "33", "code": "                if rc == _subprocess.STILL_ACTIVE:\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "34", "code": "                    raise\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "35", "code": "                self.returncode = rc\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "36", "code": "\n", "colour": "black", "author": "tomerfiliba@gmail.com"}, {"error": "none", "line": "37", "code": "        Popen.kill = _Popen_terminate\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "38", "code": "        Popen.terminate = _Popen_terminate\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "39", "code": "    else:\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "C", "line": "40", "code": "        def _Popen_kill(self):\n", "colour": "blue", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "41", "code": "            os.kill(self.pid, signal.SIGKILL)\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "C", "line": "42", "code": "        def _Popen_terminate(self):\n", "colour": "blue", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "43", "code": "            os.kill(self.pid, signal.SIGTERM)\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "C", "line": "44", "code": "        def _Popen_send_signal(self, sig):\n", "colour": "blue", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "45", "code": "            os.kill(self.pid, sig)\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "46", "code": "        Popen.kill = _Popen_kill\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "47", "code": "        Popen.terminate = _Popen_kill\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "48", "code": "        Popen.send_signal = _Popen_send_signal\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "49", "code": "\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "C", "line": "50", "code": "#===================================================================================================\n", "colour": "blue", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "51", "code": "# Exceptions\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "C", "line": "52", "code": "#===================================================================================================\n", "colour": "blue", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "53", "code": "class ProcessExecutionError(EnvironmentError):\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "C", "line": "54", "code": "    \"\"\"Represents the failure of a process. When the exit code of a terminated process does not\n", "colour": "blue", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "55", "code": "    match the expected result, this exception is raised by :func:`run_proc\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "C", "line": "56", "code": "    <plumbum.commands.run_proc>`. It contains the process' return code, stdout, and stderr, as\n", "colour": "blue", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "57", "code": "    well as the command line used to create the process (``argv``)\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "58", "code": "    \"\"\"\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "W", "line": "59", "code": "    def __init__(self, argv, retcode, stdout, stderr):\n", "colour": "purple", "author": "Tomer.Filiba@emc.com"}, {"error": "W", "line": "60", "code": "        Exception.__init__(self, argv, retcode, stdout, stderr)\n", "colour": "purple", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "61", "code": "        self.argv = argv\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "62", "code": "        self.retcode = retcode\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "63", "code": "        if six.PY3 and isinstance(stdout, six.bytes):\n", "colour": "black", "author": "tomerfiliba@gmail.com"}, {"error": "none", "line": "64", "code": "            stdout = six.ascii(stdout)\n", "colour": "black", "author": "tomerfiliba@gmail.com"}, {"error": "none", "line": "65", "code": "        if six.PY3 and isinstance(stderr, six.bytes):\n", "colour": "black", "author": "tomerfiliba@gmail.com"}, {"error": "none", "line": "66", "code": "            stderr = six.ascii(stderr)\n", "colour": "black", "author": "tomerfiliba@gmail.com"}, {"error": "none", "line": "67", "code": "        self.stdout = stdout\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "68", "code": "        self.stderr = stderr\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "69", "code": "    def __str__(self):\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "70", "code": "        stdout = \"\\n         | \".join(str(self.stdout).splitlines())\n", "colour": "black", "author": "tomerfiliba@gmail.com"}, {"error": "none", "line": "71", "code": "        stderr = \"\\n         | \".join(str(self.stderr).splitlines())\n", "colour": "black", "author": "tomerfiliba@gmail.com"}, {"error": "C", "line": "72", "code": "        lines = [\"Command line: %r\" % (self.argv,), \"Exit code: %s\" % (self.retcode)]\n", "colour": "blue", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "73", "code": "        if stdout:\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "74", "code": "            lines.append(\"Stdout:  | %s\" % (stdout,))\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "75", "code": "        if stderr:\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "76", "code": "            lines.append(\"Stderr:  | %s\" % (stderr,))\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "77", "code": "        return \"\\n\".join(lines)\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "78", "code": "\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "79", "code": "class ProcessTimedOut(Exception):\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "C", "line": "80", "code": "    \"\"\"Raises by :func:`run_proc <plumbum.commands.run_proc>` when a ``timeout`` has been\n", "colour": "blue", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "81", "code": "    specified and it has elapsed before the process terminated\"\"\"\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "82", "code": "    def __init__(self, msg, argv):\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "83", "code": "        Exception.__init__(self, msg, argv)\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "84", "code": "        self.argv = argv\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "85", "code": "\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "86", "code": "class CommandNotFound(Exception):\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "C", "line": "87", "code": "    \"\"\"Raised by :func:`local.which <plumbum.machines.local.LocalMachine.which>` and\n", "colour": "blue", "author": "Tomer.Filiba@emc.com"}, {"error": "C", "line": "88", "code": "    :func:`RemoteMachine.which <plumbum.machines.remote.RemoteMachine.which>` when a\n", "colour": "blue", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "89", "code": "    command was not found in the system's ``PATH``\"\"\"\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "90", "code": "    def __init__(self, program, path):\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "91", "code": "        Exception.__init__(self, program, path)\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "92", "code": "        self.program = program\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "93", "code": "        self.path = path\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "94", "code": "\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "C", "line": "95", "code": "#===================================================================================================\n", "colour": "blue", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "96", "code": "# Timeout thread\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "C", "line": "97", "code": "#===================================================================================================\n", "colour": "blue", "author": "Tomer.Filiba@emc.com"}, {"error": "C", "line": "98", "code": "class MinHeap(object):\n", "colour": "blue", "author": "Tomer.Filiba@emc.com"}, {"error": "C", "line": "99", "code": "    def __init__(self, items = ()):\n", "colour": "blue", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "100", "code": "        self._items = list(items)\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "101", "code": "        heapq.heapify(self._items)\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "102", "code": "    def __len__(self):\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "103", "code": "        return len(self._items)\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "C", "line": "104", "code": "    def push(self, item):\n", "colour": "blue", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "105", "code": "        heapq.heappush(self._items, item)\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "C", "line": "106", "code": "    def pop(self):\n", "colour": "blue", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "107", "code": "        heapq.heappop(self._items)\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "C", "line": "108", "code": "    def peek(self):\n", "colour": "blue", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "109", "code": "        return self._items[0]\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "110", "code": "\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "C", "line": "111", "code": "_timeout_queue = Queue()\n", "colour": "blue", "author": "Tomer.Filiba@emc.com"}, {"error": "C", "line": "112", "code": "_shutting_down = False\n", "colour": "blue", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "113", "code": "\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "C", "line": "114", "code": "def _timeout_thread_func():\n", "colour": "blue", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "115", "code": "    waiting = MinHeap()\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "116", "code": "    try:\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "117", "code": "        while not _shutting_down:\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "118", "code": "            if waiting:\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "119", "code": "                ttk, _ = waiting.peek()\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "120", "code": "                timeout = max(0, ttk - time.time())\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "121", "code": "            else:\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "122", "code": "                timeout = None\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "123", "code": "            try:\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "C", "line": "124", "code": "                proc, time_to_kill = _timeout_queue.get(timeout = timeout)\n", "colour": "blue", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "125", "code": "                if proc is SystemExit:\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "126", "code": "                    # terminate\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "127", "code": "                    return\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "128", "code": "                waiting.push((time_to_kill, proc))\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "129", "code": "            except QueueEmpty:\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "130", "code": "                pass\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "131", "code": "            now = time.time()\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "132", "code": "            while waiting:\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "133", "code": "                ttk, proc = waiting.peek()\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "134", "code": "                if ttk > now:\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "135", "code": "                    break\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "136", "code": "                waiting.pop()\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "137", "code": "                try:\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "138", "code": "                    if proc.poll() is None:\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "139", "code": "                        proc.kill()\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "W", "line": "140", "code": "                        proc._timed_out = True\n", "colour": "purple", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "141", "code": "                except EnvironmentError:\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "142", "code": "                    pass\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "W", "line": "143", "code": "    except Exception:\n", "colour": "purple", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "144", "code": "        if _shutting_down:\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "145", "code": "            # to prevent all sorts of exceptions during interpreter shutdown\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "146", "code": "            pass\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "147", "code": "        else:\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "148", "code": "            raise\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "149", "code": "\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "C", "line": "150", "code": "bgthd = Thread(target = _timeout_thread_func, name = \"PlumbumTimeoutThread\")\n", "colour": "blue", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "151", "code": "bgthd.setDaemon(True)\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "152", "code": "bgthd.start()\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "153", "code": "\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "C", "line": "154", "code": "def _shutdown_bg_threads():\n", "colour": "blue", "author": "Tomer.Filiba@emc.com"}, {"error": "W", "line": "155", "code": "    global _shutting_down\n", "colour": "purple", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "156", "code": "    _shutting_down = True\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "157", "code": "    _timeout_queue.put((SystemExit, 0))\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "158", "code": "    # grace period\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "159", "code": "    bgthd.join(0.1)\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "160", "code": "\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "161", "code": "atexit.register(_shutdown_bg_threads)\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "162", "code": "\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "C", "line": "163", "code": "#===================================================================================================\n", "colour": "blue", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "164", "code": "# run_proc\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "C", "line": "165", "code": "#===================================================================================================\n", "colour": "blue", "author": "Tomer.Filiba@emc.com"}, {"error": "C", "line": "166", "code": "def run_proc(proc, retcode, timeout = None):\n", "colour": "blue", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "167", "code": "    \"\"\"Waits for the given process to terminate, with the expected exit code\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "168", "code": "\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "169", "code": "    :param proc: a running Popen-like object\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "170", "code": "\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "C", "line": "171", "code": "    :param retcode: the expected return (exit) code of the process. It defaults to 0 (the\n", "colour": "blue", "author": "Tomer.Filiba@emc.com"}, {"error": "C", "line": "172", "code": "                    convention for success). If ``None``, the return code is ignored.\n", "colour": "blue", "author": "Tomer.Filiba@emc.com"}, {"error": "C", "line": "173", "code": "                    It may also be a tuple (or any object that supports ``__contains__``)\n", "colour": "blue", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "174", "code": "                    of expected return codes.\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "175", "code": "\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "C", "line": "176", "code": "    :param timeout: the number of seconds (a ``float``) to allow the process to run, before\n", "colour": "blue", "author": "Tomer.Filiba@emc.com"}, {"error": "C", "line": "177", "code": "                    forcefully terminating it. If ``None``, not timeout is imposed; otherwise\n", "colour": "blue", "author": "Tomer.Filiba@emc.com"}, {"error": "C", "line": "178", "code": "                    the process is expected to terminate within that timeout value, or it will\n", "colour": "blue", "author": "Tomer.Filiba@emc.com"}, {"error": "C", "line": "179", "code": "                    be killed and :class:`ProcessTimedOut <plumbum.cli.ProcessTimedOut>`\n", "colour": "blue", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "180", "code": "                    will be raised\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "181", "code": "\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "182", "code": "    :returns: A tuple of (return code, stdout, stderr)\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "183", "code": "    \"\"\"\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "184", "code": "    if timeout is not None:\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "185", "code": "        _timeout_queue.put((proc, time.time() + timeout))\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "186", "code": "    stdout, stderr = proc.communicate()\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "W", "line": "187", "code": "    proc._end_time = time.time()\n", "colour": "purple", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "188", "code": "    if not stdout:\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "189", "code": "        stdout = six.b(\"\")\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "190", "code": "    if not stderr:\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "191", "code": "        stderr = six.b(\"\")\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "192", "code": "    if getattr(proc, \"encoding\", None):\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "193", "code": "        stdout = stdout.decode(proc.encoding, \"ignore\")\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "194", "code": "        stderr = stderr.decode(proc.encoding, \"ignore\")\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "195", "code": "\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "196", "code": "    if getattr(proc, \"_timed_out\", False):\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "C", "line": "197", "code": "        raise ProcessTimedOut(\"Process did not terminate within %s seconds\" % (timeout,),\n", "colour": "blue", "author": "Tomer.Filiba@emc.com"}, {"error": "C", "line": "198", "code": "            getattr(proc, \"argv\", None))\n", "colour": "blue", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "199", "code": "\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "200", "code": "    if retcode is not None:\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "201", "code": "        if hasattr(retcode, \"__contains__\"):\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "202", "code": "            if proc.returncode not in retcode:\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "C", "line": "203", "code": "                raise ProcessExecutionError(getattr(proc, \"argv\", None), proc.returncode,\n", "colour": "blue", "author": "Tomer.Filiba@emc.com"}, {"error": "C", "line": "204", "code": "                    stdout, stderr)\n", "colour": "blue", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "205", "code": "        elif proc.returncode != retcode:\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "C", "line": "206", "code": "            raise ProcessExecutionError(getattr(proc, \"argv\", None), proc.returncode,\n", "colour": "blue", "author": "Tomer.Filiba@emc.com"}, {"error": "C", "line": "207", "code": "                stdout, stderr)\n", "colour": "blue", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "208", "code": "    return proc.returncode, stdout, stderr\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "209", "code": "\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "210", "code": "\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "211", "code": "\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}]]}