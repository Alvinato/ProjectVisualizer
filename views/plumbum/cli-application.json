{"path": "/home/asumal/git/cs410/plumbum/plumbum/cli/application.py", "lines": [[{"error": "C", "line": "1", "code": "import os\n", "colour": "blue", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "2", "code": "import sys\n", "colour": "black", "author": "tomerfiliba@gmail.com"}, {"error": "none", "line": "3", "code": "import inspect\n", "colour": "black", "author": "tomerf@il.ibm.com"}, {"error": "none", "line": "4", "code": "import functools\n", "colour": "black", "author": "koreno@gmail.com"}, {"error": "none", "line": "5", "code": "from plumbum.lib import six\n", "colour": "black", "author": "tomerfiliba@gmail.com"}, {"error": "none", "line": "6", "code": "from textwrap import TextWrapper\n", "colour": "black", "author": "tomerfiliba@gmail.com"}, {"error": "none", "line": "7", "code": "from plumbum.cli.terminal import get_terminal_size\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "C", "line": "8", "code": "from plumbum.cli.switches import (SwitchError, UnknownSwitch, MissingArgument, WrongArgumentType,\n", "colour": "blue", "author": "Tomer.Filiba@emc.com"}, {"error": "C", "line": "9", "code": "    MissingMandatorySwitch, SwitchCombinationError, PositionalArgumentsError, switch,\n", "colour": "blue", "author": "Tomer.Filiba@emc.com"}, {"error": "C", "line": "10", "code": "    SubcommandError, Flag, CountOf)\n", "colour": "blue", "author": "ofer@weka.io"}, {"error": "none", "line": "11", "code": "\n", "colour": "black", "author": "tomerfiliba@gmail.com"}, {"error": "none", "line": "12", "code": "\n", "colour": "black", "author": "tomerfiliba@gmail.com"}, {"error": "C", "line": "13", "code": "class ShowHelp(SwitchError):\n", "colour": "blue", "author": "tomerfiliba@gmail.com"}, {"error": "none", "line": "14", "code": "    pass\n", "colour": "black", "author": "tomerfiliba@gmail.com"}, {"error": "C", "line": "15", "code": "class ShowHelpAll(SwitchError):\n", "colour": "blue", "author": "jonas@chaoflow.net"}, {"error": "none", "line": "16", "code": "    pass\n", "colour": "black", "author": "jonas@chaoflow.net"}, {"error": "C", "line": "17", "code": "class ShowVersion(SwitchError):\n", "colour": "blue", "author": "tomerfiliba@gmail.com"}, {"error": "none", "line": "18", "code": "    pass\n", "colour": "black", "author": "tomerfiliba@gmail.com"}, {"error": "none", "line": "19", "code": "\n", "colour": "black", "author": "tomerfiliba@gmail.com"}, {"error": "R", "line": "20", "code": "class SwitchParseInfo(object):\n", "colour": "green", "author": "tomerf@il.ibm.com"}, {"error": "none", "line": "21", "code": "    __slots__ = [\"swname\", \"val\", \"index\"]\n", "colour": "black", "author": "tomerf@il.ibm.com"}, {"error": "none", "line": "22", "code": "    def __init__(self, swname, val, index):\n", "colour": "black", "author": "tomerf@il.ibm.com"}, {"error": "none", "line": "23", "code": "        self.swname = swname\n", "colour": "black", "author": "tomerf@il.ibm.com"}, {"error": "none", "line": "24", "code": "        self.val = val\n", "colour": "black", "author": "tomerf@il.ibm.com"}, {"error": "none", "line": "25", "code": "        self.index = index\n", "colour": "black", "author": "tomerf@il.ibm.com"}, {"error": "none", "line": "26", "code": "\n", "colour": "black", "author": "tomerf@il.ibm.com"}, {"error": "R", "line": "27", "code": "class Subcommand(object):\n", "colour": "green", "author": "tomerfiliba@gmail.com"}, {"error": "none", "line": "28", "code": "    def __init__(self, name, subapplication):\n", "colour": "black", "author": "tomerfiliba@gmail.com"}, {"error": "none", "line": "29", "code": "        self.name = name\n", "colour": "black", "author": "tomerfiliba@gmail.com"}, {"error": "none", "line": "30", "code": "        self.subapplication = subapplication\n", "colour": "black", "author": "tomerfiliba@gmail.com"}, {"error": "C", "line": "31", "code": "    def get(self):\n", "colour": "blue", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "32", "code": "        if isinstance(self.subapplication, str):\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "33", "code": "            modname, clsname = self.subapplication.rsplit(\".\", 1)\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "34", "code": "            mod = __import__(modname, None, None, \"*\")\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "35", "code": "            try:\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "36", "code": "                cls = getattr(mod, clsname)\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "37", "code": "            except AttributeError:\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "38", "code": "                raise ImportError(\"cannot import name %s\" % (clsname,))\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "39", "code": "            self.subapplication = cls\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "40", "code": "        return self.subapplication\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "41", "code": "\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "42", "code": "    def __repr__(self):\n", "colour": "black", "author": "tomerfiliba@gmail.com"}, {"error": "none", "line": "43", "code": "        return \"Subcommand(%r, %r)\" % (self.name, self.subapplication)\n", "colour": "black", "author": "tomerfiliba@gmail.com"}, {"error": "none", "line": "44", "code": "\n", "colour": "black", "author": "tomerfiliba@gmail.com"}, {"error": "none", "line": "45", "code": "\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "C", "line": "46", "code": "#===================================================================================================\n", "colour": "blue", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "47", "code": "# CLI Application base class\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "C", "line": "48", "code": "#===================================================================================================\n", "colour": "blue", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "49", "code": "\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "R", "line": "50", "code": "class Application(object):\n", "colour": "green", "author": "tomerfiliba@gmail.com"}, {"error": "none", "line": "51", "code": "    \"\"\"\n", "colour": "black", "author": "tomerf@il.ibm.com"}, {"error": "C", "line": "52", "code": "    The base class for CLI applications; your \"entry point\" class should derive from it,\n", "colour": "blue", "author": "tomerfiliba@gmail.com"}, {"error": "C", "line": "53", "code": "    define the relevant switch functions and attributes, and the ``main()`` function.\n", "colour": "blue", "author": "tanzer@swing.co.at"}, {"error": "C", "line": "54", "code": "    The class defines two overridable \"meta switches\" for version (``-v``, ``--version``)\n", "colour": "blue", "author": "tanzer@swing.co.at"}, {"error": "none", "line": "55", "code": "    and help (``-h``, ``--help``).\n", "colour": "black", "author": "tanzer@swing.co.at"}, {"error": "none", "line": "56", "code": "\n", "colour": "black", "author": "tanzer@swing.co.at"}, {"error": "C", "line": "57", "code": "    The signature of the main function matters: any positional arguments (e.g., non-switch\n", "colour": "blue", "author": "tanzer@swing.co.at"}, {"error": "C", "line": "58", "code": "    arguments) given on the command line are passed to the ``main()`` function; if you wish\n", "colour": "blue", "author": "tomerfiliba@gmail.com"}, {"error": "C", "line": "59", "code": "    to allow unlimited number of positional arguments, use varargs (``*args``). The names\n", "colour": "blue", "author": "tomerfiliba@gmail.com"}, {"error": "none", "line": "60", "code": "    of the arguments will be shown in the help message.\n", "colour": "black", "author": "tomerfiliba@gmail.com"}, {"error": "none", "line": "61", "code": "\n", "colour": "black", "author": "tanzer@swing.co.at"}, {"error": "C", "line": "62", "code": "    The classmethod ``run`` serves as the entry point of the class. It parses the command-line\n", "colour": "blue", "author": "tomerfiliba@gmail.com"}, {"error": "C", "line": "63", "code": "    arguments, invokes switch functions and enter ``main``. You should **not override** this\n", "colour": "blue", "author": "tanzer@swing.co.at"}, {"error": "none", "line": "64", "code": "    method.\n", "colour": "black", "author": "tomerfiliba@gmail.com"}, {"error": "none", "line": "65", "code": "\n", "colour": "black", "author": "tanzer@swing.co.at"}, {"error": "none", "line": "66", "code": "    Usage::\n", "colour": "black", "author": "tomerf@il.ibm.com"}, {"error": "none", "line": "67", "code": "\n", "colour": "black", "author": "tanzer@swing.co.at"}, {"error": "none", "line": "68", "code": "        class FileCopier(Application):\n", "colour": "black", "author": "tomerfiliba@gmail.com"}, {"error": "none", "line": "69", "code": "            stat = Flag(\"p\", \"copy stat info as well\")\n", "colour": "black", "author": "tomerfiliba@gmail.com"}, {"error": "none", "line": "70", "code": "\n", "colour": "black", "author": "tanzer@swing.co.at"}, {"error": "none", "line": "71", "code": "            def main(self, src, dst):\n", "colour": "black", "author": "tomerfiliba@gmail.com"}, {"error": "none", "line": "72", "code": "                if self.stat:\n", "colour": "black", "author": "tomerfiliba@gmail.com"}, {"error": "none", "line": "73", "code": "                    shutil.copy2(src, dst)\n", "colour": "black", "author": "tomerfiliba@gmail.com"}, {"error": "none", "line": "74", "code": "                else:\n", "colour": "black", "author": "tomerfiliba@gmail.com"}, {"error": "none", "line": "75", "code": "                    shutil.copy(src, dst)\n", "colour": "black", "author": "tomerfiliba@gmail.com"}, {"error": "none", "line": "76", "code": "\n", "colour": "black", "author": "tanzer@swing.co.at"}, {"error": "none", "line": "77", "code": "        if __name__ == \"__main__\":\n", "colour": "black", "author": "tomerfiliba@gmail.com"}, {"error": "none", "line": "78", "code": "            FileCopier.run()\n", "colour": "black", "author": "tomerfiliba@gmail.com"}, {"error": "none", "line": "79", "code": "\n", "colour": "black", "author": "tanzer@swing.co.at"}, {"error": "none", "line": "80", "code": "    There are several class-level attributes you may set:\n", "colour": "black", "author": "tomerfiliba@gmail.com"}, {"error": "none", "line": "81", "code": "\n", "colour": "black", "author": "tanzer@swing.co.at"}, {"error": "C", "line": "82", "code": "    * ``PROGNAME`` - the name of the program; if ``None`` (the default), it is set to the\n", "colour": "blue", "author": "tomerfiliba@gmail.com"}, {"error": "none", "line": "83", "code": "      name of the executable (``argv[0]``)\n", "colour": "black", "author": "tomerfiliba@gmail.com"}, {"error": "none", "line": "84", "code": "\n", "colour": "black", "author": "tomerfiliba@gmail.com"}, {"error": "none", "line": "85", "code": "    * ``VERSION`` - the program's version (defaults to ``1.0``)\n", "colour": "black", "author": "tomerfiliba@gmail.com"}, {"error": "none", "line": "86", "code": "\n", "colour": "black", "author": "tanzer@swing.co.at"}, {"error": "C", "line": "87", "code": "    * ``DESCRIPTION`` - a short description of your program (shown in help). If not set,\n", "colour": "blue", "author": "tomer.filiba@emc.com"}, {"error": "none", "line": "88", "code": "      the class' ``__doc__`` will be used.\n", "colour": "black", "author": "tomerfiliba@gmail.com"}, {"error": "none", "line": "89", "code": "\n", "colour": "black", "author": "tanzer@swing.co.at"}, {"error": "none", "line": "90", "code": "    * ``USAGE`` - the usage line (shown in help)\n", "colour": "black", "author": "tomerfiliba@gmail.com"}, {"error": "none", "line": "91", "code": "\n", "colour": "black", "author": "tomer.filiba@emc.com"}, {"error": "C", "line": "92", "code": "    A note on sub-commands: when an application is the root, its ``parent`` attribute is set to\n", "colour": "blue", "author": "tomerfiliba@gmail.com"}, {"error": "C", "line": "93", "code": "    ``None``. When it is used as a nested-command, ``parent`` will point to be its direct ancestor.\n", "colour": "blue", "author": "tomerfiliba@gmail.com"}, {"error": "C", "line": "94", "code": "    Likewise, when an application is invoked with a sub-command, its ``nested_command`` attribute\n", "colour": "blue", "author": "tomerfiliba@gmail.com"}, {"error": "C", "line": "95", "code": "    will hold the chosen sub-application and its command-line arguments (a tuple); otherwise, it\n", "colour": "blue", "author": "tomerfiliba@gmail.com"}, {"error": "none", "line": "96", "code": "    will be set to ``None``\n", "colour": "black", "author": "tomerfiliba@gmail.com"}, {"error": "none", "line": "97", "code": "    \"\"\"\n", "colour": "black", "author": "tomerf@il.ibm.com"}, {"error": "none", "line": "98", "code": "\n", "colour": "black", "author": "tanzer@swing.co.at"}, {"error": "none", "line": "99", "code": "    PROGNAME = None\n", "colour": "black", "author": "tomerfiliba@gmail.com"}, {"error": "none", "line": "100", "code": "    DESCRIPTION = None\n", "colour": "black", "author": "tomerfiliba@gmail.com"}, {"error": "none", "line": "101", "code": "    VERSION = None\n", "colour": "black", "author": "tomerfiliba@gmail.com"}, {"error": "none", "line": "102", "code": "    USAGE = None\n", "colour": "black", "author": "tomerfiliba@gmail.com"}, {"error": "none", "line": "103", "code": "    CALL_MAIN_IF_NESTED_COMMAND = True\n", "colour": "black", "author": "flo@chaoflow.net"}, {"error": "none", "line": "104", "code": "\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "105", "code": "    parent = None\n", "colour": "black", "author": "tomerfiliba@gmail.com"}, {"error": "none", "line": "106", "code": "    nested_command = None\n", "colour": "black", "author": "tomerfiliba@gmail.com"}, {"error": "none", "line": "107", "code": "    _unbound_switches = ()\n", "colour": "black", "author": "tomerfiliba@gmail.com"}, {"error": "none", "line": "108", "code": "\n", "colour": "black", "author": "tanzer@swing.co.at"}, {"error": "none", "line": "109", "code": "    def __init__(self, executable):\n", "colour": "black", "author": "tomerfiliba@gmail.com"}, {"error": "none", "line": "110", "code": "        if self.PROGNAME is None:\n", "colour": "black", "author": "tomerfiliba@gmail.com"}, {"error": "C", "line": "111", "code": "            self.PROGNAME = os.path.basename(executable)\n", "colour": "blue", "author": "tomerfiliba@gmail.com"}, {"error": "none", "line": "112", "code": "        if self.DESCRIPTION is None:\n", "colour": "black", "author": "tomerfiliba@gmail.com"}, {"error": "C", "line": "113", "code": "            self.DESCRIPTION = inspect.getdoc(self)\n", "colour": "blue", "author": "tomerfiliba@gmail.com"}, {"error": "none", "line": "114", "code": "\n", "colour": "black", "author": "tomerfiliba@gmail.com"}, {"error": "none", "line": "115", "code": "        self.executable = executable\n", "colour": "black", "author": "tomerfiliba@gmail.com"}, {"error": "none", "line": "116", "code": "        self._switches_by_name = {}\n", "colour": "black", "author": "tomerfiliba@gmail.com"}, {"error": "none", "line": "117", "code": "        self._switches_by_func = {}\n", "colour": "black", "author": "tomerfiliba@gmail.com"}, {"error": "none", "line": "118", "code": "        self._subcommands = {}\n", "colour": "black", "author": "tomerfiliba@gmail.com"}, {"error": "none", "line": "119", "code": "\n", "colour": "black", "author": "tomer.filiba@emc.com"}, {"error": "none", "line": "120", "code": "        for cls in reversed(type(self).mro()):\n", "colour": "black", "author": "tomerfiliba@gmail.com"}, {"error": "none", "line": "121", "code": "            for obj in cls.__dict__.values():\n", "colour": "black", "author": "tomerfiliba@gmail.com"}, {"error": "none", "line": "122", "code": "                if isinstance(obj, Subcommand):\n", "colour": "black", "author": "tomerfiliba@gmail.com"}, {"error": "none", "line": "123", "code": "                    if obj.name.startswith(\"-\"):\n", "colour": "black", "author": "tomerfiliba@gmail.com"}, {"error": "C", "line": "124", "code": "                        raise SubcommandError(\"Subcommand names cannot start with '-'\")\n", "colour": "blue", "author": "tomerfiliba@gmail.com"}, {"error": "C", "line": "125", "code": "                    # it's okay for child classes to override subcommands set by their parents\n", "colour": "blue", "author": "tomerfiliba@gmail.com"}, {"error": "none", "line": "126", "code": "                    self._subcommands[obj.name] = obj\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "127", "code": "                    continue\n", "colour": "black", "author": "tomerfiliba@gmail.com"}, {"error": "none", "line": "128", "code": "\n", "colour": "black", "author": "tomer.filiba@emc.com"}, {"error": "none", "line": "129", "code": "                swinfo = getattr(obj, \"_switch_info\", None)\n", "colour": "black", "author": "tomerfiliba@gmail.com"}, {"error": "none", "line": "130", "code": "                if not swinfo:\n", "colour": "black", "author": "tomerfiliba@gmail.com"}, {"error": "none", "line": "131", "code": "                    continue\n", "colour": "black", "author": "tomerfiliba@gmail.com"}, {"error": "none", "line": "132", "code": "                for name in swinfo.names:\n", "colour": "black", "author": "tomerfiliba@gmail.com"}, {"error": "none", "line": "133", "code": "                    if name in self._unbound_switches:\n", "colour": "black", "author": "tomerfiliba@gmail.com"}, {"error": "none", "line": "134", "code": "                        continue\n", "colour": "black", "author": "tomerfiliba@gmail.com"}, {"error": "C", "line": "135", "code": "                    if name in self._switches_by_name and not self._switches_by_name[name].overridable:\n", "colour": "blue", "author": "tomerfiliba@gmail.com"}, {"error": "C", "line": "136", "code": "                        raise SwitchError(\"Switch %r already defined and is not overridable\" % (name,))\n", "colour": "blue", "author": "tomerfiliba@gmail.com"}, {"error": "none", "line": "137", "code": "                    self._switches_by_name[name] = swinfo\n", "colour": "black", "author": "tomerfiliba@gmail.com"}, {"error": "none", "line": "138", "code": "                    self._switches_by_func[swinfo.func] = swinfo\n", "colour": "black", "author": "tomerfiliba@gmail.com"}, {"error": "none", "line": "139", "code": "\n", "colour": "black", "author": "tomerfiliba@gmail.com"}, {"error": "none", "line": "140", "code": "    @property\n", "colour": "black", "author": "kevin.horn@gmail.com"}, {"error": "C", "line": "141", "code": "    def root_app(self):\n", "colour": "blue", "author": "kevin.horn@gmail.com"}, {"error": "none", "line": "142", "code": "        return self.parent.root_app if self.parent else self\n", "colour": "black", "author": "kevin.horn@gmail.com"}, {"error": "none", "line": "143", "code": "\n", "colour": "black", "author": "ofer@weka.io"}, {"error": "none", "line": "144", "code": "    @classmethod\n", "colour": "black", "author": "tomerfiliba@gmail.com"}, {"error": "none", "line": "145", "code": "    def unbind_switches(cls, *switch_names):\n", "colour": "black", "author": "tomerfiliba@gmail.com"}, {"error": "none", "line": "146", "code": "        \"\"\"Unbinds the given switch names from this application. For example\n", "colour": "black", "author": "tomer.filiba@emc.com"}, {"error": "none", "line": "147", "code": "\n", "colour": "black", "author": "tomerfiliba@gmail.com"}, {"error": "none", "line": "148", "code": "        ::\n", "colour": "black", "author": "tomer.filiba@emc.com"}, {"error": "none", "line": "149", "code": "\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "150", "code": "            class MyApp(cli.Application):\n", "colour": "black", "author": "tomerfiliba@gmail.com"}, {"error": "none", "line": "151", "code": "                pass\n", "colour": "black", "author": "tomerfiliba@gmail.com"}, {"error": "none", "line": "152", "code": "            MyApp.unbind(\"--version\")\n", "colour": "black", "author": "tomerfiliba@gmail.com"}, {"error": "none", "line": "153", "code": "\n", "colour": "black", "author": "tomerfiliba@gmail.com"}, {"error": "none", "line": "154", "code": "        \"\"\"\n", "colour": "black", "author": "tomerfiliba@gmail.com"}, {"error": "C", "line": "155", "code": "        cls._unbound_switches += tuple(name.lstrip(\"-\") for name in switch_names if name)\n", "colour": "blue", "author": "tomerfiliba@gmail.com"}, {"error": "none", "line": "156", "code": "\n", "colour": "black", "author": "tomer.filiba@emc.com"}, {"error": "none", "line": "157", "code": "    @classmethod\n", "colour": "black", "author": "tomerfiliba@gmail.com"}, {"error": "C", "line": "158", "code": "    def subcommand(cls, name, subapp = None):\n", "colour": "blue", "author": "tomerfiliba@gmail.com"}, {"error": "C", "line": "159", "code": "        \"\"\"Registers the given sub-application as a sub-command of this one. This method can be\n", "colour": "blue", "author": "tomerfiliba@gmail.com"}, {"error": "none", "line": "160", "code": "        used both as a decorator and as a normal ``classmethod``::\n", "colour": "black", "author": "tomerfiliba@gmail.com"}, {"error": "none", "line": "161", "code": "\n", "colour": "black", "author": "tomer.filiba@emc.com"}, {"error": "none", "line": "162", "code": "            @MyApp.subcommand(\"foo\")\n", "colour": "black", "author": "tomerfiliba@gmail.com"}, {"error": "none", "line": "163", "code": "            class FooApp(cli.Application):\n", "colour": "black", "author": "tomerfiliba@gmail.com"}, {"error": "none", "line": "164", "code": "                pass\n", "colour": "black", "author": "tomerfiliba@gmail.com"}, {"error": "none", "line": "165", "code": "\n", "colour": "black", "author": "tomer.filiba@emc.com"}, {"error": "none", "line": "166", "code": "        Or ::\n", "colour": "black", "author": "tomerfiliba@gmail.com"}, {"error": "none", "line": "167", "code": "\n", "colour": "black", "author": "tomer.filiba@emc.com"}, {"error": "none", "line": "168", "code": "            MyApp.subcommand(\"foo\", FooApp)\n", "colour": "black", "author": "tomerfiliba@gmail.com"}, {"error": "none", "line": "169", "code": "\n", "colour": "black", "author": "tomer.filiba@emc.com"}, {"error": "none", "line": "170", "code": "        .. versionadded:: 1.1\n", "colour": "black", "author": "tomerfiliba@gmail.com"}, {"error": "none", "line": "171", "code": "\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "172", "code": "        .. versionadded:: 1.3\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "C", "line": "173", "code": "            The subcommand can also be a string, in which case it is treated as a\n", "colour": "blue", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "174", "code": "            fully-qualified class name and is imported on demand. For examples,\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "175", "code": "\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "176", "code": "            MyApp.subcommand(\"foo\", \"fully.qualified.package.FooApp\")\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "177", "code": "\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "178", "code": "        \"\"\"\n", "colour": "black", "author": "tomerfiliba@gmail.com"}, {"error": "C", "line": "179", "code": "        def wrapper(subapp):\n", "colour": "blue", "author": "tomerfiliba@gmail.com"}, {"error": "C", "line": "180", "code": "            attrname = \"_subcommand_%s\" % (subapp if isinstance(subapp, str) else subapp.__name__,)\n", "colour": "blue", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "181", "code": "            setattr(cls, attrname, Subcommand(name, subapp))\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "182", "code": "            return subapp\n", "colour": "black", "author": "tomerfiliba@gmail.com"}, {"error": "none", "line": "183", "code": "        return wrapper(subapp) if subapp else wrapper\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "184", "code": "\n", "colour": "black", "author": "tomer.filiba@emc.com"}, {"error": "R", "line": "185", "code": "    def _parse_args(self, argv):\n", "colour": "green", "author": "tomerfiliba@gmail.com"}, {"error": "none", "line": "186", "code": "        tailargs = []\n", "colour": "black", "author": "tomerfiliba@gmail.com"}, {"error": "none", "line": "187", "code": "        swfuncs = {}\n", "colour": "black", "author": "tomerfiliba@gmail.com"}, {"error": "none", "line": "188", "code": "        index = 0\n", "colour": "black", "author": "tomerfiliba@gmail.com"}, {"error": "none", "line": "189", "code": "        while argv:\n", "colour": "black", "author": "tomerfiliba@gmail.com"}, {"error": "none", "line": "190", "code": "            index += 1\n", "colour": "black", "author": "tomerfiliba@gmail.com"}, {"error": "C", "line": "191", "code": "            a = argv.pop(0)\n", "colour": "blue", "author": "tomerfiliba@gmail.com"}, {"error": "none", "line": "192", "code": "            if a == \"--\":\n", "colour": "black", "author": "tomerfiliba@gmail.com"}, {"error": "none", "line": "193", "code": "                # end of options, treat the rest as tailargs\n", "colour": "black", "author": "tomerfiliba@gmail.com"}, {"error": "none", "line": "194", "code": "                tailargs.extend(argv)\n", "colour": "black", "author": "tomerfiliba@gmail.com"}, {"error": "none", "line": "195", "code": "                break\n", "colour": "black", "author": "tomerfiliba@gmail.com"}, {"error": "none", "line": "196", "code": "\n", "colour": "black", "author": "tomer.filiba@emc.com"}, {"error": "none", "line": "197", "code": "            if a in self._subcommands:\n", "colour": "black", "author": "tomerfiliba@gmail.com"}, {"error": "none", "line": "198", "code": "                subcmd = self._subcommands[a].get()\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "199", "code": "                self.nested_command = (subcmd, [self.PROGNAME + \" \" + a] + argv)\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "200", "code": "                break\n", "colour": "black", "author": "tomerfiliba@gmail.com"}, {"error": "none", "line": "201", "code": "\n", "colour": "black", "author": "tomer.filiba@emc.com"}, {"error": "none", "line": "202", "code": "            elif a.startswith(\"--\") and len(a) >= 3:\n", "colour": "black", "author": "tomerfiliba@gmail.com"}, {"error": "none", "line": "203", "code": "                # [--name], [--name=XXX], [--name, XXX], [--name, ==, XXX],\n", "colour": "black", "author": "tanzer@swing.co.at"}, {"error": "none", "line": "204", "code": "                # [--name=, XXX], [--name, =XXX]\n", "colour": "black", "author": "tomerfiliba@gmail.com"}, {"error": "none", "line": "205", "code": "                eqsign = a.find(\"=\")\n", "colour": "black", "author": "tomerfiliba@gmail.com"}, {"error": "none", "line": "206", "code": "                if eqsign >= 0:\n", "colour": "black", "author": "tomerfiliba@gmail.com"}, {"error": "none", "line": "207", "code": "                    name = a[2:eqsign]\n", "colour": "black", "author": "tomerfiliba@gmail.com"}, {"error": "none", "line": "208", "code": "                    argv.insert(0, a[eqsign:])\n", "colour": "black", "author": "tomerfiliba@gmail.com"}, {"error": "none", "line": "209", "code": "                else:\n", "colour": "black", "author": "tomerfiliba@gmail.com"}, {"error": "none", "line": "210", "code": "                    name = a[2:]\n", "colour": "black", "author": "tomerfiliba@gmail.com"}, {"error": "none", "line": "211", "code": "                swname = \"--\" + name\n", "colour": "black", "author": "tomerfiliba@gmail.com"}, {"error": "none", "line": "212", "code": "                if name not in self._switches_by_name:\n", "colour": "black", "author": "tomerfiliba@gmail.com"}, {"error": "none", "line": "213", "code": "                    raise UnknownSwitch(\"Unknown switch %s\" % (swname,))\n", "colour": "black", "author": "tomerfiliba@gmail.com"}, {"error": "none", "line": "214", "code": "                swinfo = self._switches_by_name[name]\n", "colour": "black", "author": "tomerfiliba@gmail.com"}, {"error": "none", "line": "215", "code": "                if swinfo.argtype:\n", "colour": "black", "author": "tomerfiliba@gmail.com"}, {"error": "none", "line": "216", "code": "                    if not argv:\n", "colour": "black", "author": "tomerfiliba@gmail.com"}, {"error": "C", "line": "217", "code": "                        raise MissingArgument(\"Switch %s requires an argument\" % (swname,))\n", "colour": "blue", "author": "tomerfiliba@gmail.com"}, {"error": "C", "line": "218", "code": "                    a = argv.pop(0)\n", "colour": "blue", "author": "tomerfiliba@gmail.com"}, {"error": "none", "line": "219", "code": "                    if a and a[0] == \"=\":\n", "colour": "black", "author": "tomerfiliba@gmail.com"}, {"error": "none", "line": "220", "code": "                        if len(a) >= 2:\n", "colour": "black", "author": "tomerfiliba@gmail.com"}, {"error": "none", "line": "221", "code": "                            val = a[1:]\n", "colour": "black", "author": "tomerfiliba@gmail.com"}, {"error": "none", "line": "222", "code": "                        else:\n", "colour": "black", "author": "tomerfiliba@gmail.com"}, {"error": "none", "line": "223", "code": "                            if not argv:\n", "colour": "black", "author": "tomerfiliba@gmail.com"}, {"error": "C", "line": "224", "code": "                                raise MissingArgument(\"Switch %s requires an argument\" % (swname))\n", "colour": "blue", "author": "tomerfiliba@gmail.com"}, {"error": "none", "line": "225", "code": "                            val = argv.pop(0)\n", "colour": "black", "author": "tomerfiliba@gmail.com"}, {"error": "none", "line": "226", "code": "                    else:\n", "colour": "black", "author": "tomerfiliba@gmail.com"}, {"error": "none", "line": "227", "code": "                        val = a\n", "colour": "black", "author": "tomerfiliba@gmail.com"}, {"error": "none", "line": "228", "code": "\n", "colour": "black", "author": "tanzer@swing.co.at"}, {"error": "none", "line": "229", "code": "            elif a.startswith(\"-\") and len(a) >= 2:\n", "colour": "black", "author": "tomerfiliba@gmail.com"}, {"error": "none", "line": "230", "code": "                # [-a], [-a, XXX], [-aXXX], [-abc]\n", "colour": "black", "author": "tomerfiliba@gmail.com"}, {"error": "none", "line": "231", "code": "                name = a[1]\n", "colour": "black", "author": "tomerfiliba@gmail.com"}, {"error": "none", "line": "232", "code": "                swname = \"-\" + name\n", "colour": "black", "author": "tomerfiliba@gmail.com"}, {"error": "none", "line": "233", "code": "                if name not in self._switches_by_name:\n", "colour": "black", "author": "tomerfiliba@gmail.com"}, {"error": "none", "line": "234", "code": "                    raise UnknownSwitch(\"Unknown switch %s\" % (swname,))\n", "colour": "black", "author": "tomerfiliba@gmail.com"}, {"error": "none", "line": "235", "code": "                swinfo = self._switches_by_name[name]\n", "colour": "black", "author": "tomerfiliba@gmail.com"}, {"error": "none", "line": "236", "code": "                if swinfo.argtype:\n", "colour": "black", "author": "tomerfiliba@gmail.com"}, {"error": "none", "line": "237", "code": "                    if len(a) >= 3:\n", "colour": "black", "author": "tomerfiliba@gmail.com"}, {"error": "none", "line": "238", "code": "                        val = a[2:]\n", "colour": "black", "author": "tomerfiliba@gmail.com"}, {"error": "none", "line": "239", "code": "                    else:\n", "colour": "black", "author": "tomerfiliba@gmail.com"}, {"error": "none", "line": "240", "code": "                        if not argv:\n", "colour": "black", "author": "tomerfiliba@gmail.com"}, {"error": "C", "line": "241", "code": "                            raise MissingArgument(\"Switch %s requires an argument\" % (swname,))\n", "colour": "blue", "author": "tomerfiliba@gmail.com"}, {"error": "none", "line": "242", "code": "                        val = argv.pop(0)\n", "colour": "black", "author": "tomerfiliba@gmail.com"}, {"error": "none", "line": "243", "code": "                elif len(a) >= 3:\n", "colour": "black", "author": "tomerfiliba@gmail.com"}, {"error": "none", "line": "244", "code": "                    argv.insert(0, \"-\" + a[2:])\n", "colour": "black", "author": "tomerfiliba@gmail.com"}, {"error": "none", "line": "245", "code": "\n", "colour": "black", "author": "tanzer@swing.co.at"}, {"error": "none", "line": "246", "code": "            else:\n", "colour": "black", "author": "tomerfiliba@gmail.com"}, {"error": "none", "line": "247", "code": "                if a.startswith(\"-\"):\n", "colour": "black", "author": "tomerfiliba@gmail.com"}, {"error": "none", "line": "248", "code": "                    raise UnknownSwitch(\"Unknown switch %s\" % (a,))\n", "colour": "black", "author": "tomerfiliba@gmail.com"}, {"error": "none", "line": "249", "code": "                tailargs.append(a)\n", "colour": "black", "author": "tomerfiliba@gmail.com"}, {"error": "none", "line": "250", "code": "                continue\n", "colour": "black", "author": "tomerfiliba@gmail.com"}, {"error": "none", "line": "251", "code": "\n", "colour": "black", "author": "tomerfiliba@gmail.com"}, {"error": "none", "line": "252", "code": "            # handle argument\n", "colour": "black", "author": "tomerfiliba@gmail.com"}, {"error": "none", "line": "253", "code": "            if swinfo.argtype:\n", "colour": "black", "author": "tomerfiliba@gmail.com"}, {"error": "none", "line": "254", "code": "                try:\n", "colour": "black", "author": "tomerfiliba@gmail.com"}, {"error": "none", "line": "255", "code": "                    val = swinfo.argtype(val)\n", "colour": "black", "author": "tomerfiliba@gmail.com"}, {"error": "none", "line": "256", "code": "                except (TypeError, ValueError):\n", "colour": "black", "author": "tomerfiliba@gmail.com"}, {"error": "none", "line": "257", "code": "                    ex = sys.exc_info()[1]  # compat\n", "colour": "black", "author": "tomer.filiba@emc.com"}, {"error": "C", "line": "258", "code": "                    raise WrongArgumentType(\"Argument of %s expected to be %r, not %r:\\n    %r\" % (\n", "colour": "blue", "author": "tomerfiliba@gmail.com"}, {"error": "none", "line": "259", "code": "                        swname, swinfo.argtype, val, ex))\n", "colour": "black", "author": "tomerfiliba@gmail.com"}, {"error": "none", "line": "260", "code": "            else:\n", "colour": "black", "author": "tomerfiliba@gmail.com"}, {"error": "none", "line": "261", "code": "                val = NotImplemented\n", "colour": "black", "author": "tomerf@il.ibm.com"}, {"error": "none", "line": "262", "code": "\n", "colour": "black", "author": "tanzer@swing.co.at"}, {"error": "none", "line": "263", "code": "            if swinfo.func in swfuncs:\n", "colour": "black", "author": "tomerfiliba@gmail.com"}, {"error": "none", "line": "264", "code": "                if swinfo.list:\n", "colour": "black", "author": "tomerfiliba@gmail.com"}, {"error": "none", "line": "265", "code": "                    swfuncs[swinfo.func].val[0].append(val)\n", "colour": "black", "author": "tomerf@il.ibm.com"}, {"error": "none", "line": "266", "code": "                else:\n", "colour": "black", "author": "tomerfiliba@gmail.com"}, {"error": "none", "line": "267", "code": "                    if swfuncs[swinfo.func].swname == swname:\n", "colour": "black", "author": "tomerf@il.ibm.com"}, {"error": "none", "line": "268", "code": "                        raise SwitchError(\"Switch %r already given\" % (swname,))\n", "colour": "black", "author": "tomerf@il.ibm.com"}, {"error": "none", "line": "269", "code": "                    else:\n", "colour": "black", "author": "tomerf@il.ibm.com"}, {"error": "C", "line": "270", "code": "                        raise SwitchError(\"Switch %r already given (%r is equivalent)\" % (\n", "colour": "blue", "author": "tomerf@il.ibm.com"}, {"error": "none", "line": "271", "code": "                            swfuncs[swinfo.func].swname, swname))\n", "colour": "black", "author": "tomerf@il.ibm.com"}, {"error": "none", "line": "272", "code": "            else:\n", "colour": "black", "author": "tomerfiliba@gmail.com"}, {"error": "none", "line": "273", "code": "                if swinfo.list:\n", "colour": "black", "author": "tomerfiliba@gmail.com"}, {"error": "C", "line": "274", "code": "                    swfuncs[swinfo.func] = SwitchParseInfo(swname, ([val],), index)\n", "colour": "blue", "author": "tomerf@il.ibm.com"}, {"error": "none", "line": "275", "code": "                elif val is NotImplemented:\n", "colour": "black", "author": "tomerf@il.ibm.com"}, {"error": "none", "line": "276", "code": "                    swfuncs[swinfo.func] = SwitchParseInfo(swname, (), index)\n", "colour": "black", "author": "tomerf@il.ibm.com"}, {"error": "none", "line": "277", "code": "                else:\n", "colour": "black", "author": "tomerfiliba@gmail.com"}, {"error": "C", "line": "278", "code": "                    swfuncs[swinfo.func] = SwitchParseInfo(swname, (val,), index)\n", "colour": "blue", "author": "tomerf@il.ibm.com"}, {"error": "none", "line": "279", "code": "\n", "colour": "black", "author": "tanzer@swing.co.at"}, {"error": "none", "line": "280", "code": "        return swfuncs, tailargs\n", "colour": "black", "author": "tomerf@il.ibm.com"}, {"error": "none", "line": "281", "code": "\n", "colour": "black", "author": "tanzer@swing.co.at"}, {"error": "R", "line": "282", "code": "    def _validate_args(self, swfuncs, tailargs):\n", "colour": "green", "author": "tomerf@il.ibm.com"}, {"error": "none", "line": "283", "code": "        if six.get_method_function(self.help) in swfuncs:\n", "colour": "black", "author": "tomerfiliba@gmail.com"}, {"error": "none", "line": "284", "code": "            raise ShowHelp()\n", "colour": "black", "author": "tomerfiliba@gmail.com"}, {"error": "none", "line": "285", "code": "        if six.get_method_function(self.helpall) in swfuncs:\n", "colour": "black", "author": "jonas@chaoflow.net"}, {"error": "none", "line": "286", "code": "            raise ShowHelpAll()\n", "colour": "black", "author": "jonas@chaoflow.net"}, {"error": "none", "line": "287", "code": "        if six.get_method_function(self.version) in swfuncs:\n", "colour": "black", "author": "tomerfiliba@gmail.com"}, {"error": "none", "line": "288", "code": "            raise ShowVersion()\n", "colour": "black", "author": "tomerfiliba@gmail.com"}, {"error": "none", "line": "289", "code": "\n", "colour": "black", "author": "tanzer@swing.co.at"}, {"error": "none", "line": "290", "code": "        requirements = {}\n", "colour": "black", "author": "tomerfiliba@gmail.com"}, {"error": "none", "line": "291", "code": "        exclusions = {}\n", "colour": "black", "author": "tomerfiliba@gmail.com"}, {"error": "none", "line": "292", "code": "        for swinfo in self._switches_by_func.values():\n", "colour": "black", "author": "tomerfiliba@gmail.com"}, {"error": "none", "line": "293", "code": "            if swinfo.mandatory and not swinfo.func in swfuncs:\n", "colour": "black", "author": "tomerfiliba@gmail.com"}, {"error": "none", "line": "294", "code": "                raise MissingMandatorySwitch(\"Switch %s is mandatory\" %\n", "colour": "black", "author": "tanzer@swing.co.at"}, {"error": "C", "line": "295", "code": "                    (\"/\".join((\"-\" if len(n) == 1 else \"--\") + n for n in swinfo.names),))\n", "colour": "blue", "author": "tomerfiliba@gmail.com"}, {"error": "C", "line": "296", "code": "            requirements[swinfo.func] = set(self._switches_by_name[req] for req in swinfo.requires)\n", "colour": "blue", "author": "tomerfiliba@gmail.com"}, {"error": "C", "line": "297", "code": "            exclusions[swinfo.func] = set(self._switches_by_name[exc] for exc in swinfo.excludes)\n", "colour": "blue", "author": "tomerfiliba@gmail.com"}, {"error": "none", "line": "298", "code": "\n", "colour": "black", "author": "tanzer@swing.co.at"}, {"error": "W", "line": "299", "code": "        # TODO: compute topological order\n", "colour": "purple", "author": "tomerfiliba@gmail.com"}, {"error": "none", "line": "300", "code": "\n", "colour": "black", "author": "tanzer@swing.co.at"}, {"error": "none", "line": "301", "code": "        gotten = set(swfuncs.keys())\n", "colour": "black", "author": "tomerfiliba@gmail.com"}, {"error": "none", "line": "302", "code": "        for func in gotten:\n", "colour": "black", "author": "tomerfiliba@gmail.com"}, {"error": "none", "line": "303", "code": "            missing = set(f.func for f in requirements[func]) - gotten\n", "colour": "black", "author": "tomerfiliba@gmail.com"}, {"error": "none", "line": "304", "code": "            if missing:\n", "colour": "black", "author": "tomerfiliba@gmail.com"}, {"error": "C", "line": "305", "code": "                raise SwitchCombinationError(\"Given %s, the following are missing %r\" %\n", "colour": "blue", "author": "tanzer@swing.co.at"}, {"error": "C", "line": "306", "code": "                    (swfuncs[func].swname, [self._switches_by_func[f].names[0] for f in missing]))\n", "colour": "blue", "author": "tomerf@il.ibm.com"}, {"error": "none", "line": "307", "code": "            invalid = set(f.func for f in exclusions[func]) & gotten\n", "colour": "black", "author": "tomerfiliba@gmail.com"}, {"error": "none", "line": "308", "code": "            if invalid:\n", "colour": "black", "author": "tomerfiliba@gmail.com"}, {"error": "C", "line": "309", "code": "                raise SwitchCombinationError(\"Given %s, the following are invalid %r\" %\n", "colour": "blue", "author": "tanzer@swing.co.at"}, {"error": "C", "line": "310", "code": "                    (swfuncs[func].swname, [swfuncs[f].swname for f in invalid]))\n", "colour": "blue", "author": "tomerf@il.ibm.com"}, {"error": "none", "line": "311", "code": "\n", "colour": "black", "author": "tanzer@swing.co.at"}, {"error": "none", "line": "312", "code": "        m_args, m_varargs, _, m_defaults = inspect.getargspec(self.main)\n", "colour": "black", "author": "tomerfiliba@gmail.com"}, {"error": "none", "line": "313", "code": "        max_args = six.MAXSIZE if m_varargs else len(m_args) - 1\n", "colour": "black", "author": "tomerfiliba@gmail.com"}, {"error": "none", "line": "314", "code": "        min_args = len(m_args) - 1 - (len(m_defaults) if m_defaults else 0)\n", "colour": "black", "author": "tomerfiliba@gmail.com"}, {"error": "none", "line": "315", "code": "        if len(tailargs) < min_args:\n", "colour": "black", "author": "tomerfiliba@gmail.com"}, {"error": "C", "line": "316", "code": "            raise PositionalArgumentsError(\"Expected at least %d positional arguments, got %r\" %\n", "colour": "blue", "author": "tanzer@swing.co.at"}, {"error": "C", "line": "317", "code": "                (min_args, tailargs))\n", "colour": "blue", "author": "tomerfiliba@gmail.com"}, {"error": "none", "line": "318", "code": "        elif len(tailargs) > max_args:\n", "colour": "black", "author": "tomerfiliba@gmail.com"}, {"error": "C", "line": "319", "code": "            raise PositionalArgumentsError(\"Expected at most %d positional arguments, got %r\" %\n", "colour": "blue", "author": "tanzer@swing.co.at"}, {"error": "C", "line": "320", "code": "                (max_args, tailargs))\n", "colour": "blue", "author": "tomerfiliba@gmail.com"}, {"error": "none", "line": "321", "code": "\n", "colour": "black", "author": "tanzer@swing.co.at"}, {"error": "none", "line": "322", "code": "        ordered = [(f, a) for _, f, a in\n", "colour": "black", "author": "tanzer@swing.co.at"}, {"error": "C", "line": "323", "code": "            sorted([(sf.index, f, sf.val) for f, sf in swfuncs.items()])]\n", "colour": "blue", "author": "tomerf@il.ibm.com"}, {"error": "none", "line": "324", "code": "        return ordered, tailargs\n", "colour": "black", "author": "tomerfiliba@gmail.com"}, {"error": "none", "line": "325", "code": "\n", "colour": "black", "author": "tanzer@swing.co.at"}, {"error": "none", "line": "326", "code": "    @classmethod\n", "colour": "black", "author": "tomerfiliba@gmail.com"}, {"error": "W", "line": "327", "code": "    def run(cls, argv = sys.argv, exit = True):  # @ReservedAssignment\n", "colour": "purple", "author": "tomer.filiba@emc.com"}, {"error": "none", "line": "328", "code": "        \"\"\"\n", "colour": "black", "author": "tomerfiliba@gmail.com"}, {"error": "C", "line": "329", "code": "        Runs the application, taking the arguments from ``sys.argv`` by default. If ``exit`` is\n", "colour": "blue", "author": "tanzer@swing.co.at"}, {"error": "C", "line": "330", "code": "        ``True`` (the default), the function will exit with the appropriate return code;\n", "colour": "blue", "author": "tanzer@swing.co.at"}, {"error": "C", "line": "331", "code": "        otherwise it will return a tuple of ``(inst, retcode)``, where ``inst`` is the\n", "colour": "blue", "author": "tanzer@swing.co.at"}, {"error": "C", "line": "332", "code": "        application instance created internally by this function and ``retcode`` is the\n", "colour": "blue", "author": "tanzer@swing.co.at"}, {"error": "none", "line": "333", "code": "        exit code of the application.\n", "colour": "black", "author": "tanzer@swing.co.at"}, {"error": "none", "line": "334", "code": "\n", "colour": "black", "author": "tanzer@swing.co.at"}, {"error": "none", "line": "335", "code": "        .. note::\n", "colour": "black", "author": "tomerfiliba@gmail.com"}, {"error": "C", "line": "336", "code": "           Setting ``exit`` to ``False`` is intendend for testing/debugging purposes only -- do\n", "colour": "blue", "author": "tanzer@swing.co.at"}, {"error": "none", "line": "337", "code": "           not override it other situations.\n", "colour": "black", "author": "tomerfiliba@gmail.com"}, {"error": "none", "line": "338", "code": "        \"\"\"\n", "colour": "black", "author": "tomerfiliba@gmail.com"}, {"error": "none", "line": "339", "code": "        argv = list(argv)\n", "colour": "black", "author": "tomerfiliba@gmail.com"}, {"error": "none", "line": "340", "code": "        inst = cls(argv.pop(0))\n", "colour": "black", "author": "tomerfiliba@gmail.com"}, {"error": "none", "line": "341", "code": "        retcode = 0\n", "colour": "black", "author": "tomerfiliba@gmail.com"}, {"error": "none", "line": "342", "code": "        try:\n", "colour": "black", "author": "tomerfiliba@gmail.com"}, {"error": "W", "line": "343", "code": "            swfuncs, tailargs = inst._parse_args(argv)\n", "colour": "purple", "author": "tomerf@il.ibm.com"}, {"error": "W", "line": "344", "code": "            ordered, tailargs = inst._validate_args(swfuncs, tailargs)\n", "colour": "purple", "author": "tomerf@il.ibm.com"}, {"error": "none", "line": "345", "code": "        except ShowHelp:\n", "colour": "black", "author": "tomerfiliba@gmail.com"}, {"error": "none", "line": "346", "code": "            inst.help()\n", "colour": "black", "author": "tomerfiliba@gmail.com"}, {"error": "none", "line": "347", "code": "        except ShowHelpAll:\n", "colour": "black", "author": "jonas@chaoflow.net"}, {"error": "none", "line": "348", "code": "            inst.helpall()\n", "colour": "black", "author": "jonas@chaoflow.net"}, {"error": "none", "line": "349", "code": "        except ShowVersion:\n", "colour": "black", "author": "tomerfiliba@gmail.com"}, {"error": "none", "line": "350", "code": "            inst.version()\n", "colour": "black", "author": "tomerfiliba@gmail.com"}, {"error": "none", "line": "351", "code": "        except SwitchError:\n", "colour": "black", "author": "tomerfiliba@gmail.com"}, {"error": "none", "line": "352", "code": "            ex = sys.exc_info()[1]  # compatibility with python 2.5\n", "colour": "black", "author": "tomer.filiba@emc.com"}, {"error": "C", "line": "353", "code": "            print(\"Error: %s\" % (ex,))\n", "colour": "blue", "author": "tomerfiliba@gmail.com"}, {"error": "C", "line": "354", "code": "            print(\"------\")\n", "colour": "blue", "author": "tomerfiliba@gmail.com"}, {"error": "none", "line": "355", "code": "            inst.help()\n", "colour": "black", "author": "tomerfiliba@gmail.com"}, {"error": "none", "line": "356", "code": "            retcode = 2\n", "colour": "black", "author": "tomerfiliba@gmail.com"}, {"error": "none", "line": "357", "code": "        else:\n", "colour": "black", "author": "tomerfiliba@gmail.com"}, {"error": "C", "line": "358", "code": "            for f, a in ordered:\n", "colour": "blue", "author": "tomerfiliba@gmail.com"}, {"error": "W", "line": "359", "code": "                f(inst, *a)\n", "colour": "purple", "author": "tomerfiliba@gmail.com"}, {"error": "none", "line": "360", "code": "\n", "colour": "black", "author": "koreno@gmail.com"}, {"error": "none", "line": "361", "code": "            cleanup = None\n", "colour": "black", "author": "koreno@gmail.com"}, {"error": "none", "line": "362", "code": "            if not inst.nested_command or inst.CALL_MAIN_IF_NESTED_COMMAND:\n", "colour": "black", "author": "flo@chaoflow.net"}, {"error": "W", "line": "363", "code": "                retcode = inst.main(*tailargs)\n", "colour": "purple", "author": "flo@chaoflow.net"}, {"error": "none", "line": "364", "code": "                cleanup = functools.partial(inst.cleanup, retcode)\n", "colour": "black", "author": "koreno@gmail.com"}, {"error": "none", "line": "365", "code": "            if not retcode and inst.nested_command:\n", "colour": "black", "author": "tomerfiliba@gmail.com"}, {"error": "none", "line": "366", "code": "                subapp, argv = inst.nested_command\n", "colour": "black", "author": "tomerfiliba@gmail.com"}, {"error": "none", "line": "367", "code": "                subapp.parent = inst\n", "colour": "black", "author": "tomerfiliba@gmail.com"}, {"error": "C", "line": "368", "code": "                inst, retcode = subapp.run(argv, exit = False)\n", "colour": "blue", "author": "tomerfiliba@gmail.com"}, {"error": "none", "line": "369", "code": "\n", "colour": "black", "author": "koreno@gmail.com"}, {"error": "none", "line": "370", "code": "            if cleanup:\n", "colour": "black", "author": "koreno@gmail.com"}, {"error": "none", "line": "371", "code": "                cleanup()\n", "colour": "black", "author": "koreno@gmail.com"}, {"error": "none", "line": "372", "code": "\n", "colour": "black", "author": "tomer.filiba@emc.com"}, {"error": "none", "line": "373", "code": "            if retcode is None:\n", "colour": "black", "author": "tomerfiliba@gmail.com"}, {"error": "none", "line": "374", "code": "                retcode = 0\n", "colour": "black", "author": "tomerfiliba@gmail.com"}, {"error": "none", "line": "375", "code": "\n", "colour": "black", "author": "tomerfiliba@gmail.com"}, {"error": "none", "line": "376", "code": "        if exit:\n", "colour": "black", "author": "tomerfiliba@gmail.com"}, {"error": "none", "line": "377", "code": "            sys.exit(retcode)\n", "colour": "black", "author": "tomerfiliba@gmail.com"}, {"error": "none", "line": "378", "code": "        else:\n", "colour": "black", "author": "tomerfiliba@gmail.com"}, {"error": "none", "line": "379", "code": "            return inst, retcode\n", "colour": "black", "author": "tomerfiliba@gmail.com"}, {"error": "none", "line": "380", "code": "\n", "colour": "black", "author": "tanzer@swing.co.at"}, {"error": "none", "line": "381", "code": "    @classmethod\n", "colour": "black", "author": "ofer@weka.io"}, {"error": "R", "line": "382", "code": "    def invoke(cls, *args, **switches):\n", "colour": "green", "author": "ofer@weka.io"}, {"error": "C", "line": "383", "code": "        \"\"\"Invoke this application programmatically (as a function), in the same way ``run()``\n", "colour": "blue", "author": "tomerfiliba@gmail.com"}, {"error": "C", "line": "384", "code": "        would. There are two key differences: the return value of ``main()`` is not converted to\n", "colour": "blue", "author": "tomerfiliba@gmail.com"}, {"error": "none", "line": "385", "code": "        an integer (returned as-is), and exceptions are not swallowed either.\n", "colour": "black", "author": "tomerfiliba@gmail.com"}, {"error": "none", "line": "386", "code": "\n", "colour": "black", "author": "tomerfiliba@gmail.com"}, {"error": "none", "line": "387", "code": "        :param args: any positional arguments for ``main()``\n", "colour": "black", "author": "tomerfiliba@gmail.com"}, {"error": "none", "line": "388", "code": "        :param switches: command-line switches are passed as keyword arguments,\n", "colour": "black", "author": "tomerfiliba@gmail.com"}, {"error": "none", "line": "389", "code": "                         e.g., ``foo=5`` for ``--foo=5``\n", "colour": "black", "author": "tomerfiliba@gmail.com"}, {"error": "none", "line": "390", "code": "        \"\"\"\n", "colour": "black", "author": "tomerfiliba@gmail.com"}, {"error": "none", "line": "391", "code": "\n", "colour": "black", "author": "ofer@weka.io"}, {"error": "none", "line": "392", "code": "        inst = cls(\"\")\n", "colour": "black", "author": "ofer@weka.io"}, {"error": "none", "line": "393", "code": "        swfuncs = {}\n", "colour": "black", "author": "ofer@weka.io"}, {"error": "none", "line": "394", "code": "        for index, (swname, val) in enumerate(switches.items(), 1):\n", "colour": "black", "author": "ofer@weka.io"}, {"error": "W", "line": "395", "code": "            switch = getattr(cls, swname)\n", "colour": "purple", "author": "ofer@weka.io"}, {"error": "W", "line": "396", "code": "            swinfo = inst._switches_by_func[switch._switch_info.func]\n", "colour": "purple", "author": "ofer@weka.io"}, {"error": "none", "line": "397", "code": "            if isinstance(switch, CountOf):\n", "colour": "black", "author": "ofer@weka.io"}, {"error": "C", "line": "398", "code": "                p = (range(val),)\n", "colour": "blue", "author": "ofer@weka.io"}, {"error": "none", "line": "399", "code": "            elif swinfo.list and not hasattr(val, \"__iter__\"):\n", "colour": "black", "author": "ofer@weka.io"}, {"error": "C", "line": "400", "code": "                raise SwitchError(\"Switch %r must be a sequence (iterable)\" % (swname,))\n", "colour": "blue", "author": "tomerfiliba@gmail.com"}, {"error": "none", "line": "401", "code": "            elif not swinfo.argtype:\n", "colour": "black", "author": "ofer@weka.io"}, {"error": "none", "line": "402", "code": "                # a flag\n", "colour": "black", "author": "tomerfiliba@gmail.com"}, {"error": "none", "line": "403", "code": "                if val not in (True, False, None, Flag):\n", "colour": "black", "author": "tomerfiliba@gmail.com"}, {"error": "none", "line": "404", "code": "                    raise SwitchError(\"Switch %r is a boolean flag\" % (swname,))\n", "colour": "black", "author": "tomerfiliba@gmail.com"}, {"error": "C", "line": "405", "code": "                p = ()\n", "colour": "blue", "author": "ofer@weka.io"}, {"error": "none", "line": "406", "code": "            else:\n", "colour": "black", "author": "ofer@weka.io"}, {"error": "C", "line": "407", "code": "                p = (val,)\n", "colour": "blue", "author": "ofer@weka.io"}, {"error": "none", "line": "408", "code": "            swfuncs[swinfo.func] = SwitchParseInfo(swname, p, index)\n", "colour": "black", "author": "ofer@weka.io"}, {"error": "none", "line": "409", "code": "\n", "colour": "black", "author": "ofer@weka.io"}, {"error": "W", "line": "410", "code": "        ordered, tailargs = inst._validate_args(swfuncs, args)\n", "colour": "purple", "author": "ofer@weka.io"}, {"error": "C", "line": "411", "code": "        for f, a in ordered:\n", "colour": "blue", "author": "ofer@weka.io"}, {"error": "W", "line": "412", "code": "            f(inst, *a)\n", "colour": "purple", "author": "ofer@weka.io"}, {"error": "none", "line": "413", "code": "\n", "colour": "black", "author": "ofer@weka.io"}, {"error": "none", "line": "414", "code": "        cleanup = None\n", "colour": "black", "author": "ofer@weka.io"}, {"error": "none", "line": "415", "code": "        if not inst.nested_command or inst.CALL_MAIN_IF_NESTED_COMMAND:\n", "colour": "black", "author": "ofer@weka.io"}, {"error": "W", "line": "416", "code": "            retcode = inst.main(*tailargs)\n", "colour": "purple", "author": "ofer@weka.io"}, {"error": "none", "line": "417", "code": "            cleanup = functools.partial(inst.cleanup, retcode)\n", "colour": "black", "author": "ofer@weka.io"}, {"error": "none", "line": "418", "code": "        if not retcode and inst.nested_command:\n", "colour": "black", "author": "ofer@weka.io"}, {"error": "none", "line": "419", "code": "            subapp, argv = inst.nested_command\n", "colour": "black", "author": "ofer@weka.io"}, {"error": "none", "line": "420", "code": "            subapp.parent = inst\n", "colour": "black", "author": "ofer@weka.io"}, {"error": "C", "line": "421", "code": "            inst, retcode = subapp.run(argv, exit = False)\n", "colour": "blue", "author": "ofer@weka.io"}, {"error": "none", "line": "422", "code": "\n", "colour": "black", "author": "ofer@weka.io"}, {"error": "none", "line": "423", "code": "        if cleanup:\n", "colour": "black", "author": "ofer@weka.io"}, {"error": "none", "line": "424", "code": "            cleanup()\n", "colour": "black", "author": "ofer@weka.io"}, {"error": "none", "line": "425", "code": "\n", "colour": "black", "author": "ofer@weka.io"}, {"error": "none", "line": "426", "code": "        return inst, retcode\n", "colour": "black", "author": "ofer@weka.io"}, {"error": "none", "line": "427", "code": "\n", "colour": "black", "author": "ofer@weka.io"}, {"error": "none", "line": "428", "code": "    def main(self, *args):\n", "colour": "black", "author": "tomerfiliba@gmail.com"}, {"error": "none", "line": "429", "code": "        \"\"\"Implement me (no need to call super)\"\"\"\n", "colour": "black", "author": "tomerfiliba@gmail.com"}, {"error": "none", "line": "430", "code": "        if self._subcommands:\n", "colour": "black", "author": "tomerfiliba@gmail.com"}, {"error": "none", "line": "431", "code": "            if args:\n", "colour": "black", "author": "tomerfiliba@gmail.com"}, {"error": "C", "line": "432", "code": "                print(\"Unknown sub-command %r\" % (args[0],))\n", "colour": "blue", "author": "tomerfiliba@gmail.com"}, {"error": "C", "line": "433", "code": "                print(\"------\")\n", "colour": "blue", "author": "tomerfiliba@gmail.com"}, {"error": "none", "line": "434", "code": "                self.help()\n", "colour": "black", "author": "tomerfiliba@gmail.com"}, {"error": "none", "line": "435", "code": "                return 1\n", "colour": "black", "author": "tomerfiliba@gmail.com"}, {"error": "none", "line": "436", "code": "            if not self.nested_command:\n", "colour": "black", "author": "tomerfiliba@gmail.com"}, {"error": "C", "line": "437", "code": "                print(\"No sub-command given\")\n", "colour": "blue", "author": "tomerfiliba@gmail.com"}, {"error": "C", "line": "438", "code": "                print(\"------\")\n", "colour": "blue", "author": "tomerfiliba@gmail.com"}, {"error": "none", "line": "439", "code": "                self.help()\n", "colour": "black", "author": "tomerfiliba@gmail.com"}, {"error": "none", "line": "440", "code": "                return 1\n", "colour": "black", "author": "tomerfiliba@gmail.com"}, {"error": "none", "line": "441", "code": "        else:\n", "colour": "black", "author": "tomerfiliba@gmail.com"}, {"error": "C", "line": "442", "code": "            print(\"main() not implemented\")\n", "colour": "blue", "author": "tomerfiliba@gmail.com"}, {"error": "none", "line": "443", "code": "            return 1\n", "colour": "black", "author": "tomerfiliba@gmail.com"}, {"error": "none", "line": "444", "code": "\n", "colour": "black", "author": "tanzer@swing.co.at"}, {"error": "none", "line": "445", "code": "    def cleanup(self, retcode):\n", "colour": "black", "author": "tomer@weka.io"}, {"error": "C", "line": "446", "code": "        \"\"\"Called after ``main()`` and all subapplications have executed, to perform any necessary cleanup.\n", "colour": "blue", "author": "tomer@weka.io"}, {"error": "none", "line": "447", "code": "\n", "colour": "black", "author": "tomerfiliba@gmail.com"}, {"error": "none", "line": "448", "code": "        :param retcode: the return code of ``main()``\n", "colour": "black", "author": "tomer@weka.io"}, {"error": "none", "line": "449", "code": "        \"\"\"\n", "colour": "black", "author": "tomer@weka.io"}, {"error": "none", "line": "450", "code": "\n", "colour": "black", "author": "flo@chaoflow.net"}, {"error": "C", "line": "451", "code": "    @switch([\"--help-all\"], overridable = True, group = \"Meta-switches\")\n", "colour": "blue", "author": "jonas@chaoflow.net"}, {"error": "none", "line": "452", "code": "    def helpall(self):\n", "colour": "black", "author": "jonas@chaoflow.net"}, {"error": "none", "line": "453", "code": "        \"\"\"Print help messages of all subcommands and quit\"\"\"\n", "colour": "black", "author": "flo@chaoflow.net"}, {"error": "none", "line": "454", "code": "        self.help()\n", "colour": "black", "author": "jonas@chaoflow.net"}, {"error": "C", "line": "455", "code": "        print(\"\")\n", "colour": "blue", "author": "flo@chaoflow.net"}, {"error": "none", "line": "456", "code": "\n", "colour": "black", "author": "jonas@chaoflow.net"}, {"error": "none", "line": "457", "code": "        if self._subcommands:\n", "colour": "black", "author": "jonas@chaoflow.net"}, {"error": "none", "line": "458", "code": "            for name, subcls in sorted(self._subcommands.items()):\n", "colour": "black", "author": "jonas@chaoflow.net"}, {"error": "none", "line": "459", "code": "                subapp = (subcls.get())(\"%s %s\" % (self.PROGNAME, name))\n", "colour": "black", "author": "jonas@chaoflow.net"}, {"error": "none", "line": "460", "code": "                subapp.parent = self\n", "colour": "black", "author": "jonas@chaoflow.net"}, {"error": "W", "line": "461", "code": "                for si in subapp._switches_by_func.values():\n", "colour": "purple", "author": "jonas@chaoflow.net"}, {"error": "none", "line": "462", "code": "                    if si.group == \"Meta-switches\":\n", "colour": "black", "author": "jonas@chaoflow.net"}, {"error": "none", "line": "463", "code": "                        si.group = \"Hidden-switches\"\n", "colour": "black", "author": "jonas@chaoflow.net"}, {"error": "none", "line": "464", "code": "                subapp.helpall()\n", "colour": "black", "author": "jonas@chaoflow.net"}, {"error": "none", "line": "465", "code": "\n", "colour": "black", "author": "tomer@weka.io"}, {"error": "C", "line": "466", "code": "    @switch([\"-h\", \"--help\"], overridable = True, group = \"Meta-switches\")\n", "colour": "blue", "author": "tomerfiliba@gmail.com"}, {"error": "R", "line": "467", "code": "    def help(self):  # @ReservedAssignment\n", "colour": "green", "author": "tomer.filiba@emc.com"}, {"error": "none", "line": "468", "code": "        \"\"\"Prints this help message and quits\"\"\"\n", "colour": "black", "author": "tomerfiliba@gmail.com"}, {"error": "none", "line": "469", "code": "        if self._get_prog_version():\n", "colour": "black", "author": "tomerfiliba@gmail.com"}, {"error": "none", "line": "470", "code": "            self.version()\n", "colour": "black", "author": "tomerfiliba@gmail.com"}, {"error": "C", "line": "471", "code": "            print(\"\")\n", "colour": "blue", "author": "tomerfiliba@gmail.com"}, {"error": "none", "line": "472", "code": "        if self.DESCRIPTION:\n", "colour": "black", "author": "tomerfiliba@gmail.com"}, {"error": "C", "line": "473", "code": "            print(self.DESCRIPTION.strip())\n", "colour": "blue", "author": "tomerfiliba@gmail.com"}, {"error": "none", "line": "474", "code": "\n", "colour": "black", "author": "tomerfiliba@gmail.com"}, {"error": "none", "line": "475", "code": "        m_args, m_varargs, _, m_defaults = inspect.getargspec(self.main)\n", "colour": "black", "author": "tomerfiliba@gmail.com"}, {"error": "none", "line": "476", "code": "        tailargs = m_args[1:]  # skip self\n", "colour": "black", "author": "tomer.filiba@emc.com"}, {"error": "none", "line": "477", "code": "        if m_defaults:\n", "colour": "black", "author": "tomerfiliba@gmail.com"}, {"error": "C", "line": "478", "code": "            for i, d in enumerate(reversed(m_defaults)):\n", "colour": "blue", "author": "tomerfiliba@gmail.com"}, {"error": "none", "line": "479", "code": "                tailargs[-i - 1] = \"[%s=%r]\" % (tailargs[-i - 1], d)\n", "colour": "black", "author": "tomerfiliba@gmail.com"}, {"error": "none", "line": "480", "code": "        if m_varargs:\n", "colour": "black", "author": "tomerfiliba@gmail.com"}, {"error": "none", "line": "481", "code": "            tailargs.append(\"%s...\" % (m_varargs,))\n", "colour": "black", "author": "tomerfiliba@gmail.com"}, {"error": "none", "line": "482", "code": "        tailargs = \" \".join(tailargs)\n", "colour": "black", "author": "tomerfiliba@gmail.com"}, {"error": "none", "line": "483", "code": "\n", "colour": "black", "author": "tanzer@swing.co.at"}, {"error": "C", "line": "484", "code": "        print(\"Usage:\")\n", "colour": "blue", "author": "tomerfiliba@gmail.com"}, {"error": "none", "line": "485", "code": "        if not self.USAGE:\n", "colour": "black", "author": "tomerfiliba@gmail.com"}, {"error": "none", "line": "486", "code": "            if self._subcommands:\n", "colour": "black", "author": "tomerfiliba@gmail.com"}, {"error": "C", "line": "487", "code": "                self.USAGE = \"    %(progname)s [SWITCHES] [SUBCOMMAND [SWITCHES]] %(tailargs)s\\n\"\n", "colour": "blue", "author": "tomerfiliba@gmail.com"}, {"error": "none", "line": "488", "code": "            else:\n", "colour": "black", "author": "tomerfiliba@gmail.com"}, {"error": "none", "line": "489", "code": "                self.USAGE = \"    %(progname)s [SWITCHES] %(tailargs)s\\n\"\n", "colour": "black", "author": "tomerfiliba@gmail.com"}, {"error": "none", "line": "490", "code": "        print(self.USAGE % {\"progname\": self.PROGNAME, \"tailargs\": tailargs})\n", "colour": "black", "author": "boolegue@gmail.com"}, {"error": "none", "line": "491", "code": "\n", "colour": "black", "author": "tanzer@swing.co.at"}, {"error": "none", "line": "492", "code": "        by_groups = {}\n", "colour": "black", "author": "tomerfiliba@gmail.com"}, {"error": "C", "line": "493", "code": "        for si in self._switches_by_func.values():\n", "colour": "blue", "author": "tomerfiliba@gmail.com"}, {"error": "none", "line": "494", "code": "            if si.group not in by_groups:\n", "colour": "black", "author": "tomerfiliba@gmail.com"}, {"error": "none", "line": "495", "code": "                by_groups[si.group] = []\n", "colour": "black", "author": "tomerfiliba@gmail.com"}, {"error": "none", "line": "496", "code": "            by_groups[si.group].append(si)\n", "colour": "black", "author": "tomerfiliba@gmail.com"}, {"error": "none", "line": "497", "code": "\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "C", "line": "498", "code": "        def switchs(by_groups, show_groups):\n", "colour": "blue", "author": "flo@iMac-de-Antoine.local"}, {"error": "C", "line": "499", "code": "            for grp, swinfos in sorted(by_groups.items(), key = lambda item: item[0]):\n", "colour": "blue", "author": "flo@iMac-de-Antoine.local"}, {"error": "none", "line": "500", "code": "                if show_groups:\n", "colour": "black", "author": "flo@iMac-de-Antoine.local"}, {"error": "C", "line": "501", "code": "                    print(\"%s:\" % (grp,))\n", "colour": "blue", "author": "flo@iMac-de-Antoine.local"}, {"error": "none", "line": "502", "code": "\n", "colour": "black", "author": "flo@iMac-de-Antoine.local"}, {"error": "C", "line": "503", "code": "                for si in sorted(swinfos, key = lambda si: si.names):\n", "colour": "blue", "author": "flo@iMac-de-Antoine.local"}, {"error": "C", "line": "504", "code": "                    swnames = \", \".join((\"-\" if len(n) == 1 else \"--\") + n for n in si.names\n", "colour": "blue", "author": "flo@iMac-de-Antoine.local"}, {"error": "C", "line": "505", "code": "                        if n in self._switches_by_name and self._switches_by_name[n] == si)\n", "colour": "blue", "author": "tomerfiliba@gmail.com"}, {"error": "none", "line": "506", "code": "                    if si.argtype:\n", "colour": "black", "author": "flo@iMac-de-Antoine.local"}, {"error": "none", "line": "507", "code": "                        if isinstance(si.argtype, type):\n", "colour": "black", "author": "flo@iMac-de-Antoine.local"}, {"error": "none", "line": "508", "code": "                            typename = si.argtype.__name__\n", "colour": "black", "author": "flo@iMac-de-Antoine.local"}, {"error": "none", "line": "509", "code": "                        else:\n", "colour": "black", "author": "flo@iMac-de-Antoine.local"}, {"error": "none", "line": "510", "code": "                            typename = str(si.argtype)\n", "colour": "black", "author": "flo@iMac-de-Antoine.local"}, {"error": "none", "line": "511", "code": "                        argtype = \" %s:%s\" % (si.argname.upper(), typename)\n", "colour": "black", "author": "flo@iMac-de-Antoine.local"}, {"error": "none", "line": "512", "code": "                    else:\n", "colour": "black", "author": "tomerfiliba@gmail.com"}, {"error": "none", "line": "513", "code": "                        argtype = \"\"\n", "colour": "black", "author": "flo@iMac-de-Antoine.local"}, {"error": "none", "line": "514", "code": "                    prefix = swnames + argtype\n", "colour": "black", "author": "flo@iMac-de-Antoine.local"}, {"error": "none", "line": "515", "code": "                    yield si, prefix\n", "colour": "black", "author": "flo@iMac-de-Antoine.local"}, {"error": "none", "line": "516", "code": "\n", "colour": "black", "author": "flo@iMac-de-Antoine.local"}, {"error": "none", "line": "517", "code": "                if show_groups:\n", "colour": "black", "author": "flo@iMac-de-Antoine.local"}, {"error": "C", "line": "518", "code": "                    print(\"\")\n", "colour": "blue", "author": "flo@iMac-de-Antoine.local"}, {"error": "none", "line": "519", "code": "\n", "colour": "black", "author": "flo@iMac-de-Antoine.local"}, {"error": "C", "line": "520", "code": "        sw_width = max(len(prefix) for si, prefix in switchs(by_groups, False)) + 4\n", "colour": "blue", "author": "tomerfiliba@gmail.com"}, {"error": "W", "line": "521", "code": "        cols, _ = get_terminal_size()\n", "colour": "purple", "author": "tomerfiliba@gmail.com"}, {"error": "none", "line": "522", "code": "        description_indent = \"    %s%s%s\"\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "C", "line": "523", "code": "        wrapper = TextWrapper(width = max(cols - min(sw_width, 60), 50) - 6)\n", "colour": "blue", "author": "jonas@chaoflow.net"}, {"error": "none", "line": "524", "code": "        indentation = \"\\n\" + \" \" * (cols - wrapper.width)\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "525", "code": "\n", "colour": "black", "author": "flo@iMac-de-Antoine.local"}, {"error": "C", "line": "526", "code": "        for si, prefix in switchs(by_groups, True):\n", "colour": "blue", "author": "flo@iMac-de-Antoine.local"}, {"error": "W", "line": "527", "code": "            help = si.help  # @ReservedAssignment\n", "colour": "purple", "author": "flo@iMac-de-Antoine.local"}, {"error": "none", "line": "528", "code": "            if si.list:\n", "colour": "black", "author": "flo@iMac-de-Antoine.local"}, {"error": "none", "line": "529", "code": "                help += \"; may be given multiple times\"\n", "colour": "black", "author": "flo@iMac-de-Antoine.local"}, {"error": "none", "line": "530", "code": "            if si.mandatory:\n", "colour": "black", "author": "flo@iMac-de-Antoine.local"}, {"error": "none", "line": "531", "code": "                help += \"; required\"\n", "colour": "black", "author": "flo@iMac-de-Antoine.local"}, {"error": "none", "line": "532", "code": "            if si.requires:\n", "colour": "black", "author": "flo@iMac-de-Antoine.local"}, {"error": "C", "line": "533", "code": "                help += \"; requires %s\" % (\", \".join(((\"-\" if len(s) == 1 else \"--\") + s) for s in si.requires))\n", "colour": "blue", "author": "tomer.filiba@emc.com"}, {"error": "none", "line": "534", "code": "            if si.excludes:\n", "colour": "black", "author": "flo@iMac-de-Antoine.local"}, {"error": "C", "line": "535", "code": "                help += \"; excludes %s\" % (\", \".join(((\"-\" if len(s) == 1 else \"--\") + s) for s in si.excludes))\n", "colour": "blue", "author": "tomer.filiba@emc.com"}, {"error": "none", "line": "536", "code": "\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "C", "line": "537", "code": "            msg = indentation.join(wrapper.wrap(\" \".join(l.strip() for l in help.splitlines())))\n", "colour": "blue", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "538", "code": "\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "539", "code": "            if len(prefix) + wrapper.width >= cols:\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "540", "code": "                padding = indentation\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "541", "code": "            else:\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "542", "code": "                padding = \" \" * max(cols - wrapper.width - len(prefix) - 4, 1)\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "C", "line": "543", "code": "            print(description_indent % (prefix, padding, msg))\n", "colour": "blue", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "544", "code": "\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "545", "code": "        if self._subcommands:\n", "colour": "black", "author": "tomerfiliba@gmail.com"}, {"error": "C", "line": "546", "code": "            print(\"Subcommands:\")\n", "colour": "blue", "author": "tomerfiliba@gmail.com"}, {"error": "none", "line": "547", "code": "            for name, subcls in sorted(self._subcommands.items()):\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "548", "code": "                subapp = subcls.get()\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "C", "line": "549", "code": "                doc = subapp.DESCRIPTION if subapp.DESCRIPTION else inspect.getdoc(subapp)\n", "colour": "blue", "author": "tomerfiliba@gmail.com"}, {"error": "none", "line": "550", "code": "                help = doc + \"; \" if doc else \"\"  # @ReservedAssignment\n", "colour": "black", "author": "tomer.filiba@emc.com"}, {"error": "C", "line": "551", "code": "                help += \"see '%s %s --help' for more info\" % (self.PROGNAME, name)\n", "colour": "blue", "author": "tomerfiliba@gmail.com"}, {"error": "none", "line": "552", "code": "\n", "colour": "black", "author": "tomerfiliba@gmail.com"}, {"error": "C", "line": "553", "code": "                msg = indentation.join(wrapper.wrap(\" \".join(l.strip() for l in help.splitlines())))\n", "colour": "blue", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "554", "code": "\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "555", "code": "                if len(name) + wrapper.width >= cols:\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "556", "code": "                    padding = indentation\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "557", "code": "                else:\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "558", "code": "                    padding = \" \" * max(cols - wrapper.width - len(name) - 4, 1)\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "C", "line": "559", "code": "                print(description_indent % (name, padding, msg))\n", "colour": "blue", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "560", "code": "\n", "colour": "black", "author": "tomerfiliba@gmail.com"}, {"error": "C", "line": "561", "code": "    def _get_prog_version(self):\n", "colour": "blue", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "562", "code": "        ver = None\n", "colour": "black", "author": "tomerfiliba@gmail.com"}, {"error": "none", "line": "563", "code": "        curr = self\n", "colour": "black", "author": "tomerfiliba@gmail.com"}, {"error": "none", "line": "564", "code": "        while curr is not None:\n", "colour": "black", "author": "flo@chaoflow.net"}, {"error": "none", "line": "565", "code": "            ver = getattr(curr, \"VERSION\", None)\n", "colour": "black", "author": "tomerfiliba@gmail.com"}, {"error": "none", "line": "566", "code": "            if ver is not None:\n", "colour": "black", "author": "flo@chaoflow.net"}, {"error": "none", "line": "567", "code": "                return ver\n", "colour": "black", "author": "flo@chaoflow.net"}, {"error": "none", "line": "568", "code": "            curr = curr.parent\n", "colour": "black", "author": "tomerfiliba@gmail.com"}, {"error": "none", "line": "569", "code": "        return ver\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "570", "code": "\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "C", "line": "571", "code": "    @switch([\"-v\", \"--version\"], overridable = True, group = \"Meta-switches\")\n", "colour": "blue", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "572", "code": "    def version(self):\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "573", "code": "        \"\"\"Prints the program's version and quits\"\"\"\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "574", "code": "        ver = self._get_prog_version()\n", "colour": "black", "author": "Tomer.Filiba@emc.com"}, {"error": "none", "line": "575", "code": "        if sys.stdout.isatty() and os.name == \"posix\":\n", "colour": "black", "author": "flo@chaoflow.net"}, {"error": "none", "line": "576", "code": "            fmt = \"\\033[0;36m%s\\033[0m %s\"\n", "colour": "black", "author": "flo@chaoflow.net"}, {"error": "none", "line": "577", "code": "        else:\n", "colour": "black", "author": "flo@chaoflow.net"}, {"error": "none", "line": "578", "code": "            fmt = \"%s %s\"\n", "colour": "black", "author": "flo@chaoflow.net"}, {"error": "C", "line": "579", "code": "        print (fmt % (self.PROGNAME, ver if ver is not None else \"(version not set)\"))\n", "colour": "blue", "author": "flo@chaoflow.net"}]]}