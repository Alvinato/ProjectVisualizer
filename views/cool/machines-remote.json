{
    "path": "/home/asumal/git/cs410/plumbum/plumbum/machines/remote.py",
    "lines":
        [
            {
                "error": "C",
                "index": "1",
                "code": "from __future__ import with_statement\n",
                "colour": "blue",
                "author": "tomerf@il.ibm.com"
            },
            {
                "error": "none",
                "index": "2",
                "code": "import re\n",
                "colour": "orange",
                "author": "Tomer.Filiba@emc.com"
            },
            {
                "error": "none",
                "index": "3",
                "code": "from contextlib import contextmanager\n",
                "colour": "orange",
                "author": "tomerf@il.ibm.com"
            },
            {
                "error": "none",
                "index": "4",
                "code": "from plumbum.commands import CommandNotFound, shquote, ConcreteCommand\n",
                "colour": "orange",
                "author": "Tomer.Filiba@emc.com"
            },
            {
                "error": "none",
                "index": "5",
                "code": "from plumbum.lib import _setdoc, ProcInfo, six\n",
                "colour": "orange",
                "author": "tomerfiliba@gmail.com"
            },
            {
                "error": "none",
                "index": "6",
                "code": "from plumbum.machines.local import LocalPath\n",
                "colour": "orange",
                "author": "Tomer.Filiba@emc.com"
            },
            {
                "error": "none",
                "index": "7",
                "code": "from tempfile import NamedTemporaryFile\n",
                "colour": "orange",
                "author": "tomerfiliba@gmail.com"
            },
            {
                "error": "none",
                "index": "8",
                "code": "from plumbum.machines.env import BaseEnv\n",
                "colour": "orange",
                "author": "Tomer.Filiba@emc.com"
            },
            {
                "error": "none",
                "index": "9",
                "code": "from plumbum.path.remote import RemotePath, RemoteWorkdir, StatRes\n",
                "colour": "orange",
                "author": "Tomer.Filiba@emc.com"
            },
            {
                "error": "none",
                "index": "10",
                "code": "\n",
                "colour": "orange",
                "author": "tomerf@il.ibm.com"
            },
            {
                "error": "none",
                "index": "11",
                "code": "\n",
                "colour": "orange",
                "author": "tomerfiliba@gmail.com"
            },
            {
                "error": "none",
                "index": "12",
                "code": "class RemoteEnv(BaseEnv):\n",
                "colour": "orange",
                "author": "tomerf@il.ibm.com"
            },
            {
                "error": "none",
                "index": "13",
                "code": "    \"\"\"The remote machine's environment; exposes a dict-like interface\"\"\"\n",
                "colour": "orange",
                "author": "tomerf@il.ibm.com"
            },
            {
                "error": "none",
                "index": "14",
                "code": "\n",
                "colour": "orange",
                "author": "tomerf@il.ibm.com"
            },
            {
                "error": "none",
                "index": "15",
                "code": "    __slots__ = [\"_orig\", \"remote\"]\n",
                "colour": "orange",
                "author": "tomerf@il.ibm.com"
            },
            {
                "error": "none",
                "index": "16",
                "code": "    def __init__(self, remote):\n",
                "colour": "orange",
                "author": "tomerf@il.ibm.com"
            },
            {
                "error": "none",
                "index": "17",
                "code": "        self.remote = remote\n",
                "colour": "orange",
                "author": "tomerf@il.ibm.com"
            },
            {
                "error": "W",
                "index": "18",
                "code": "        self._curr = dict(index.split(\"=\", 1) for index in self.remote._session.run(\"env\")[1].splitindexs())\n",
                "colour": "purple",
                "author": "tomer.filiba@emc.com"
            },
            {
                "error": "none",
                "index": "19",
                "code": "        self._orig = self._curr.copy()\n",
                "colour": "orange",
                "author": "tomerf@il.ibm.com"
            },
            {
                "error": "none",
                "index": "20",
                "code": "        BaseEnv.__init__(self, self.remote.path, \":\")\n",
                "colour": "orange",
                "author": "Tomer.Filiba@emc.com"
            },
            {
                "error": "none",
                "index": "21",
                "code": "\n",
                "colour": "orange",
                "author": "tomerf@il.ibm.com"
            },
            {
                "error": "none",
                "index": "22",
                "code": "    @_setdoc(BaseEnv)\n",
                "colour": "orange",
                "author": "tomerfiliba@gmail.com"
            },
            {
                "error": "none",
                "index": "23",
                "code": "    def __delitem__(self, name):\n",
                "colour": "orange",
                "author": "tomerf@il.ibm.com"
            },
            {
                "error": "none",
                "index": "24",
                "code": "        BaseEnv.__delitem__(self, name)\n",
                "colour": "orange",
                "author": "tomerf@il.ibm.com"
            },
            {
                "error": "W",
                "index": "25",
                "code": "        self.remote._session.run(\"unset %s\" % (name,))\n",
                "colour": "purple",
                "author": "tomerf@il.ibm.com"
            },
            {
                "error": "none",
                "index": "26",
                "code": "    @_setdoc(BaseEnv)\n",
                "colour": "orange",
                "author": "tomerfiliba@gmail.com"
            },
            {
                "error": "none",
                "index": "27",
                "code": "    def __setitem__(self, name, value):\n",
                "colour": "orange",
                "author": "tomerf@il.ibm.com"
            },
            {
                "error": "none",
                "index": "28",
                "code": "        BaseEnv.__setitem__(self, name, value)\n",
                "colour": "orange",
                "author": "tomerf@il.ibm.com"
            },
            {
                "error": "W",
                "index": "29",
                "code": "        self.remote._session.run(\"export %s=%s\" % (name, shquote(value)))\n",
                "colour": "purple",
                "author": "tomerf@il.ibm.com"
            },
            {
                "error": "none",
                "index": "30",
                "code": "    @_setdoc(BaseEnv)\n",
                "colour": "orange",
                "author": "tomerfiliba@gmail.com"
            },
            {
                "error": "none",
                "index": "31",
                "code": "    def pop(self, name, *default):\n",
                "colour": "orange",
                "author": "tomerf@il.ibm.com"
            },
            {
                "error": "none",
                "index": "32",
                "code": "        BaseEnv.pop(self, name, *default)\n",
                "colour": "orange",
                "author": "tomerf@il.ibm.com"
            },
            {
                "error": "W",
                "index": "33",
                "code": "        self.remote._session.run(\"unset %s\" % (name,))\n",
                "colour": "purple",
                "author": "tomerf@il.ibm.com"
            },
            {
                "error": "none",
                "index": "34",
                "code": "    @_setdoc(BaseEnv)\n",
                "colour": "orange",
                "author": "tomerfiliba@gmail.com"
            },
            {
                "error": "none",
                "index": "35",
                "code": "    def update(self, *args, **kwargs):\n",
                "colour": "orange",
                "author": "tomerf@il.ibm.com"
            },
            {
                "error": "none",
                "index": "36",
                "code": "        BaseEnv.update(self, *args, **kwargs)\n",
                "colour": "orange",
                "author": "tomerf@il.ibm.com"
            },
            {
                "error": "W",
                "index": "37",
                "code": "        self.remote._session.run(\"export \" +\n",
                "colour": "purple",
                "author": "tanzer@swing.co.at"
            },
            {
                "error": "C",
                "index": "38",
                "code": "            \" \".join(\"%s=%s\" % (k, shquote(v)) for k, v in self.getdict().items()))\n",
                "colour": "blue",
                "author": "tomerf@il.ibm.com"
            },
            {
                "error": "none",
                "index": "39",
                "code": "\n",
                "colour": "orange",
                "author": "tanzer@swing.co.at"
            },
            {
                "error": "none",
                "index": "40",
                "code": "    def expand(self, expr):\n",
                "colour": "orange",
                "author": "tomerfiliba@gmail.com"
            },
            {
                "error": "C",
                "index": "41",
                "code": "        \"\"\"Expands any environment variables and home shortcuts found in ``expr``\n",
                "colour": "blue",
                "author": "tomerfiliba@gmail.com"
            },
            {
                "error": "none",
                "index": "42",
                "code": "        (like ``os.path.expanduser`` combined with ``os.path.expandvars``)\n",
                "colour": "orange",
                "author": "tomerfiliba@gmail.com"
            },
            {
                "error": "none",
                "index": "43",
                "code": "\n",
                "colour": "orange",
                "author": "tomerfiliba@gmail.com"
            },
            {
                "error": "C",
                "index": "44",
                "code": "        :param expr: An expression containing environment variables (as ``$FOO``) or\n",
                "colour": "blue",
                "author": "tomerfiliba@gmail.com"
            },
            {
                "error": "none",
                "index": "45",
                "code": "                     home shortcuts (as ``~/.bashrc``)\n",
                "colour": "orange",
                "author": "tomerfiliba@gmail.com"
            },
            {
                "error": "none",
                "index": "46",
                "code": "\n",
                "colour": "orange",
                "author": "tomerfiliba@gmail.com"
            },
            {
                "error": "none",
                "index": "47",
                "code": "        :returns: The expanded string\"\"\"\n",
                "colour": "orange",
                "author": "tomerfiliba@gmail.com"
            },
            {
                "error": "W",
                "index": "48",
                "code": "        return self.remote._session.run(\"echo %s\" % (expr,))[1].strip()\n",
                "colour": "purple",
                "author": "chrisprinos@gmail.com"
            },
            {
                "error": "none",
                "index": "49",
                "code": "\n",
                "colour": "orange",
                "author": "tanzer@swing.co.at"
            },
            {
                "error": "none",
                "index": "50",
                "code": "    def expanduser(self, expr):\n",
                "colour": "orange",
                "author": "tomerfiliba@gmail.com"
            },
            {
                "error": "none",
                "index": "51",
                "code": "        \"\"\"Expand home shortcuts (e.g., ``~/foo/bar`` or ``~john/foo/bar``)\n",
                "colour": "orange",
                "author": "tomerfiliba@gmail.com"
            },
            {
                "error": "none",
                "index": "52",
                "code": "\n",
                "colour": "orange",
                "author": "tomerfiliba@gmail.com"
            },
            {
                "error": "none",
                "index": "53",
                "code": "        :param expr: An expression containing home shortcuts\n",
                "colour": "orange",
                "author": "tomerfiliba@gmail.com"
            },
            {
                "error": "none",
                "index": "54",
                "code": "\n",
                "colour": "orange",
                "author": "tomerfiliba@gmail.com"
            },
            {
                "error": "none",
                "index": "55",
                "code": "        :returns: The expanded string\"\"\"\n",
                "colour": "orange",
                "author": "tomerfiliba@gmail.com"
            },
            {
                "error": "none",
                "index": "56",
                "code": "        if not any(part.startswith(\"~\") for part in expr.split(\"/\")):\n",
                "colour": "orange",
                "author": "AndydeCleyre@gmail.com"
            },
            {
                "error": "none",
                "index": "57",
                "code": "            return expr\n",
                "colour": "orange",
                "author": "tomerfiliba@gmail.com"
            },
            {
                "error": "none",
                "index": "58",
                "code": "        # we escape all $ signs to avoid expanding env-vars\n",
                "colour": "orange",
                "author": "tomerfiliba@gmail.com"
            },
            {
                "error": "W",
                "index": "59",
                "code": "        return self.remote._session.run(\"echo %s\" % (expr.replace(\"$\", \"\\\\$\"),))[1].strip()\n",
                "colour": "purple",
                "author": "chrisprinos@gmail.com"
            },
            {
                "error": "none",
                "index": "60",
                "code": "\n",
                "colour": "orange",
                "author": "tomerf@il.ibm.com"
            },
            {
                "error": "none",
                "index": "61",
                "code": "    # def clear(self):\n",
                "colour": "orange",
                "author": "tomer.filiba@emc.com"
            },
            {
                "error": "none",
                "index": "62",
                "code": "    #    BaseEnv.clear(self, *args, **kwargs)\n",
                "colour": "orange",
                "author": "tomerf@il.ibm.com"
            },
            {
                "error": "C",
                "index": "63",
                "code": "    #    self.remote._session.run(\"export %s\" % \" \".join(\"%s=%s\" % (k, v) for k, v in self.getdict()))\n",
                "colour": "blue",
                "author": "tomerf@il.ibm.com"
            },
            {
                "error": "none",
                "index": "64",
                "code": "\n",
                "colour": "orange",
                "author": "tomerf@il.ibm.com"
            },
            {
                "error": "none",
                "index": "65",
                "code": "    def getdelta(self):\n",
                "colour": "orange",
                "author": "tomerf@il.ibm.com"
            },
            {
                "error": "C",
                "index": "66",
                "code": "        \"\"\"Returns the difference between the this environment and the original environment of\n",
                "colour": "blue",
                "author": "tomerf@il.ibm.com"
            },
            {
                "error": "none",
                "index": "67",
                "code": "        the remote machine\"\"\"\n",
                "colour": "orange",
                "author": "tomerf@il.ibm.com"
            },
            {
                "error": "none",
                "index": "68",
                "code": "        self._curr[\"PATH\"] = self.path.join()\n",
                "colour": "orange",
                "author": "tomerf@il.ibm.com"
            },
            {
                "error": "none",
                "index": "69",
                "code": "\n",
                "colour": "orange",
                "author": "drennalls@gmail.com"
            },
            {
                "error": "none",
                "index": "70",
                "code": "        delta = {}\n",
                "colour": "orange",
                "author": "tomerf@il.ibm.com"
            },
            {
                "error": "C",
                "index": "71",
                "code": "        for k, v in self._curr.items():\n",
                "colour": "blue",
                "author": "tomerf@il.ibm.com"
            },
            {
                "error": "none",
                "index": "72",
                "code": "            if k not in self._orig:\n",
                "colour": "orange",
                "author": "tomerf@il.ibm.com"
            },
            {
                "error": "none",
                "index": "73",
                "code": "                delta[k] = str(v)\n",
                "colour": "orange",
                "author": "tomerf@il.ibm.com"
            },
            {
                "error": "C",
                "index": "74",
                "code": "        for k, v in self._orig.items():\n",
                "colour": "blue",
                "author": "tomerf@il.ibm.com"
            },
            {
                "error": "none",
                "index": "75",
                "code": "            if k not in self._curr:\n",
                "colour": "orange",
                "author": "tomerf@il.ibm.com"
            },
            {
                "error": "none",
                "index": "76",
                "code": "                delta[k] = \"\"\n",
                "colour": "orange",
                "author": "tomerf@il.ibm.com"
            },
            {
                "error": "none",
                "index": "77",
                "code": "            else:\n",
                "colour": "orange",
                "author": "drennalls@gmail.com"
            },
            {
                "error": "none",
                "index": "78",
                "code": "                if v != self._curr[k]:\n",
                "colour": "orange",
                "author": "drennalls@gmail.com"
            },
            {
                "error": "none",
                "index": "79",
                "code": "                    delta[k] = self._curr[k]\n",
                "colour": "orange",
                "author": "drennalls@gmail.com"
            },
            {
                "error": "none",
                "index": "80",
                "code": "\n",
                "colour": "orange",
                "author": "drennalls@gmail.com"
            },
            {
                "error": "none",
                "index": "81",
                "code": "        return delta\n",
                "colour": "orange",
                "author": "tomerf@il.ibm.com"
            },
            {
                "error": "none",
                "index": "82",
                "code": "\n",
                "colour": "orange",
                "author": "tomerf@il.ibm.com"
            },
            {
                "error": "none",
                "index": "83",
                "code": "\n",
                "colour": "orange",
                "author": "tomerfiliba@gmail.com"
            },
            {
                "error": "C",
                "index": "84",
                "code": "class RemoteCommand(ConcreteCommand):\n",
                "colour": "blue",
                "author": "tomerf@il.ibm.com"
            },
            {
                "error": "none",
                "index": "85",
                "code": "    __slots__ = [\"remote\", \"executable\"]\n",
                "colour": "orange",
                "author": "tomerfiliba@gmail.com"
            },
            {
                "error": "none",
                "index": "86",
                "code": "    QUOTE_LEVEL = 1\n",
                "colour": "orange",
                "author": "tomerfiliba@gmail.com"
            },
            {
                "error": "none",
                "index": "87",
                "code": "\n",
                "colour": "orange",
                "author": "tanzer@swing.co.at"
            },
            {
                "error": "C",
                "index": "88",
                "code": "    def __init__(self, remote, executable, encoding = \"auto\"):\n",
                "colour": "blue",
                "author": "tomerfiliba@gmail.com"
            },
            {
                "error": "none",
                "index": "89",
                "code": "        self.remote = remote\n",
                "colour": "orange",
                "author": "tomerfiliba@gmail.com"
            },
            {
                "error": "none",
                "index": "90",
                "code": "        ConcreteCommand.__init__(self, executable,\n",
                "colour": "orange",
                "author": "tanzer@swing.co.at"
            },
            {
                "error": "C",
                "index": "91",
                "code": "            remote.encoding if encoding == \"auto\" else encoding)\n",
                "colour": "blue",
                "author": "tomerfiliba@gmail.com"
            },
            {
                "error": "none",
                "index": "92",
                "code": "    @property\n",
                "colour": "orange",
                "author": "Tomer.Filiba@emc.com"
            },
            {
                "error": "none",
                "index": "93",
                "code": "    def machine(self):\n",
                "colour": "orange",
                "author": "Tomer.Filiba@emc.com"
            },
            {
                "error": "none",
                "index": "94",
                "code": "        return self.remote\n",
                "colour": "orange",
                "author": "Tomer.Filiba@emc.com"
            },
            {
                "error": "none",
                "index": "95",
                "code": "    def __repr__(self):\n",
                "colour": "orange",
                "author": "tomerf@il.ibm.com"
            },
            {
                "error": "none",
                "index": "96",
                "code": "        return \"RemoteCommand(%r, %r)\" % (self.remote, self.executable)\n",
                "colour": "orange",
                "author": "tomerf@il.ibm.com"
            },
            {
                "error": "C",
                "index": "97",
                "code": "    def popen(self, args = (), **kwargs):\n",
                "colour": "blue",
                "author": "tomerfiliba@gmail.com"
            },
            {
                "error": "none",
                "index": "98",
                "code": "        return self.remote.popen(self[args], **kwargs)\n",
                "colour": "orange",
                "author": "tomerf@il.ibm.com"
            },
            {
                "error": "none",
                "index": "99",
                "code": "\n",
                "colour": "orange",
                "author": "tomerf@il.ibm.com"
            },
            {
                "error": "C",
                "index": "100",
                "code": "class ClosedRemoteMachine(Exception):\n",
                "colour": "blue",
                "author": "tomerf@il.ibm.com"
            },
            {
                "error": "none",
                "index": "101",
                "code": "    pass\n",
                "colour": "orange",
                "author": "tomerf@il.ibm.com"
            },
            {
                "error": "none",
                "index": "102",
                "code": "\n",
                "colour": "orange",
                "author": "tomerf@il.ibm.com"
            },
            {
                "error": "R",
                "index": "103",
                "code": "class ClosedRemote(object):\n",
                "colour": "green",
                "author": "tomerf@il.ibm.com"
            },
            {
                "error": "none",
                "index": "104",
                "code": "    __slots__ = [\"_obj\"]\n",
                "colour": "orange",
                "author": "tomerf@il.ibm.com"
            },
            {
                "error": "none",
                "index": "105",
                "code": "    def __init__(self, obj):\n",
                "colour": "orange",
                "author": "tomerf@il.ibm.com"
            },
            {
                "error": "none",
                "index": "106",
                "code": "        self._obj = obj\n",
                "colour": "orange",
                "author": "tomerf@il.ibm.com"
            },
            {
                "error": "C",
                "index": "107",
                "code": "    def close(self):\n",
                "colour": "blue",
                "author": "tomerf@il.ibm.com"
            },
            {
                "error": "none",
                "index": "108",
                "code": "        pass\n",
                "colour": "orange",
                "author": "tomerf@il.ibm.com"
            },
            {
                "error": "none",
                "index": "109",
                "code": "    def __getattr__(self, name):\n",
                "colour": "orange",
                "author": "tomerf@il.ibm.com"
            },
            {
                "error": "none",
                "index": "110",
                "code": "        raise ClosedRemoteMachine(\"%r has been closed\" % (self._obj,))\n",
                "colour": "orange",
                "author": "tomerf@il.ibm.com"
            },
            {
                "error": "none",
                "index": "111",
                "code": "\n",
                "colour": "orange",
                "author": "tomerf@il.ibm.com"
            },
            {
                "error": "none",
                "index": "112",
                "code": "\n",
                "colour": "orange",
                "author": "tomerf@il.ibm.com"
            },
            {
                "error": "R",
                "index": "113",
                "code": "class BaseRemoteMachine(object):\n",
                "colour": "green",
                "author": "tomerfiliba@gmail.com"
            },
            {
                "error": "C",
                "index": "114",
                "code": "    \"\"\"Represents a *remote machine*; serves as an entry point to everything related to that\n",
                "colour": "blue",
                "author": "tanzer@swing.co.at"
            },
            {
                "error": "C",
                "index": "115",
                "code": "    remote machine, such as working directory and environment manipulation, command creation,\n",
                "colour": "blue",
                "author": "tanzer@swing.co.at"
            },
            {
                "error": "none",
                "index": "116",
                "code": "    etc.\n",
                "colour": "orange",
                "author": "tomerf@il.ibm.com"
            },
            {
                "error": "none",
                "index": "117",
                "code": "\n",
                "colour": "orange",
                "author": "tanzer@swing.co.at"
            },
            {
                "error": "none",
                "index": "118",
                "code": "    Attributes:\n",
                "colour": "orange",
                "author": "tomerf@il.ibm.com"
            },
            {
                "error": "none",
                "index": "119",
                "code": "\n",
                "colour": "orange",
                "author": "tanzer@swing.co.at"
            },
            {
                "error": "none",
                "index": "120",
                "code": "    * ``cwd`` - the remote working directory\n",
                "colour": "orange",
                "author": "tomerf@il.ibm.com"
            },
            {
                "error": "none",
                "index": "121",
                "code": "    * ``env`` - the remote environment\n",
                "colour": "orange",
                "author": "tomerf@il.ibm.com"
            },
            {
                "error": "none",
                "index": "122",
                "code": "    * ``encoding`` - the remote machine's default encoding (assumed to be UTF8)\n",
                "colour": "orange",
                "author": "tanzer@swing.co.at"
            },
            {
                "error": "none",
                "index": "123",
                "code": "    * ``connect_timeout`` - the connection timeout\n",
                "colour": "orange",
                "author": "tomerfiliba@gmail.com"
            },
            {
                "error": "none",
                "index": "124",
                "code": "    \"\"\"\n",
                "colour": "orange",
                "author": "tomerf@il.ibm.com"
            },
            {
                "error": "none",
                "index": "125",
                "code": "\n",
                "colour": "orange",
                "author": "tomerf@il.ibm.com"
            },
            {
                "error": "C",
                "index": "126",
                "code": "    def __init__(self, encoding = \"utf8\", connect_timeout = 10, new_session = False):\n",
                "colour": "blue",
                "author": "Tomer.Filiba@emc.com"
            },
            {
                "error": "none",
                "index": "127",
                "code": "        self.encoding = encoding\n",
                "colour": "orange",
                "author": "tomerfiliba@gmail.com"
            },
            {
                "error": "none",
                "index": "128",
                "code": "        self.connect_timeout = connect_timeout\n",
                "colour": "orange",
                "author": "tomerfiliba@gmail.com"
            },
            {
                "error": "C",
                "index": "129",
                "code": "        self._session = self.session(new_session = new_session)\n",
                "colour": "blue",
                "author": "Tomer.Filiba@emc.com"
            },
            {
                "error": "none",
                "index": "130",
                "code": "        self.uname = self._get_uname()\n",
                "colour": "orange",
                "author": "tomerfiliba@gmail.com"
            },
            {
                "error": "none",
                "index": "131",
                "code": "        self.cwd = RemoteWorkdir(self)\n",
                "colour": "orange",
                "author": "Tomer.Filiba@emc.com"
            },
            {
                "error": "none",
                "index": "132",
                "code": "        self.env = RemoteEnv(self)\n",
                "colour": "orange",
                "author": "tomerf@il.ibm.com"
            },
            {
                "error": "none",
                "index": "133",
                "code": "        self._python = None\n",
                "colour": "orange",
                "author": "tomerf@il.ibm.com"
            },
            {
                "error": "none",
                "index": "134",
                "code": "\n",
                "colour": "orange",
                "author": "tomerf@il.ibm.com"
            },
            {
                "error": "C",
                "index": "135",
                "code": "    def _get_uname(self):\n",
                "colour": "blue",
                "author": "tomerfiliba@gmail.com"
            },
            {
                "error": "C",
                "index": "136",
                "code": "        rc, out, _ = self._session.run(\"uname\", retcode = None)\n",
                "colour": "blue",
                "author": "tomerfiliba@gmail.com"
            },
            {
                "error": "none",
                "index": "137",
                "code": "        if rc == 0:\n",
                "colour": "orange",
                "author": "tomerfiliba@gmail.com"
            },
            {
                "error": "none",
                "index": "138",
                "code": "            return out.strip()\n",
                "colour": "orange",
                "author": "tomerfiliba@gmail.com"
            },
            {
                "error": "none",
                "index": "139",
                "code": "        else:\n",
                "colour": "orange",
                "author": "tomerfiliba@gmail.com"
            },
            {
                "error": "C",
                "index": "140",
                "code": "            rc, out, _ = self._session.run(\"python -c 'import platform;print(platform.uname()[0])'\", retcode = None)\n",
                "colour": "blue",
                "author": "tomerfiliba@gmail.com"
            },
            {
                "error": "none",
                "index": "141",
                "code": "            if rc == 0:\n",
                "colour": "orange",
                "author": "tomerfiliba@gmail.com"
            },
            {
                "error": "none",
                "index": "142",
                "code": "                return out.strip()\n",
                "colour": "orange",
                "author": "tomerfiliba@gmail.com"
            },
            {
                "error": "none",
                "index": "143",
                "code": "            else:\n",
                "colour": "orange",
                "author": "tomerfiliba@gmail.com"
            },
            {
                "error": "C",
                "index": "144",
                "code": "                # all POSIX systems should have uname. make an educated guess it's Windows\n",
                "colour": "blue",
                "author": "tomerfiliba@gmail.com"
            },
            {
                "error": "none",
                "index": "145",
                "code": "                return \"Windows\"\n",
                "colour": "orange",
                "author": "tomerfiliba@gmail.com"
            },
            {
                "error": "none",
                "index": "146",
                "code": "\n",
                "colour": "orange",
                "author": "tomerfiliba@gmail.com"
            },
            {
                "error": "none",
                "index": "147",
                "code": "    def __repr__(self):\n",
                "colour": "orange",
                "author": "tomerf@il.ibm.com"
            },
            {
                "error": "none",
                "index": "148",
                "code": "        return \"<%s %s>\" % (self.__class__.__name__, self)\n",
                "colour": "orange",
                "author": "tomerf@il.ibm.com"
            },
            {
                "error": "none",
                "index": "149",
                "code": "\n",
                "colour": "orange",
                "author": "tomerfiliba@gmail.com"
            },
            {
                "error": "none",
                "index": "150",
                "code": "    def __enter__(self):\n",
                "colour": "orange",
                "author": "tomerf@il.ibm.com"
            },
            {
                "error": "none",
                "index": "151",
                "code": "        return self\n",
                "colour": "orange",
                "author": "tomerf@il.ibm.com"
            },
            {
                "error": "C",
                "index": "152",
                "code": "    def __exit__(self, t, v, tb):\n",
                "colour": "blue",
                "author": "tomerf@il.ibm.com"
            },
            {
                "error": "none",
                "index": "153",
                "code": "        self.close()\n",
                "colour": "orange",
                "author": "tomerf@il.ibm.com"
            },
            {
                "error": "none",
                "index": "154",
                "code": "    def close(self):\n",
                "colour": "orange",
                "author": "tomerf@il.ibm.com"
            },
            {
                "error": "C",
                "index": "155",
                "code": "        \"\"\"closes the connection to the remote machine; all paths and programs will\n",
                "colour": "blue",
                "author": "tanzer@swing.co.at"
            },
            {
                "error": "none",
                "index": "156",
                "code": "        become defunct\"\"\"\n",
                "colour": "orange",
                "author": "tomerf@il.ibm.com"
            },
            {
                "error": "none",
                "index": "157",
                "code": "        self._session.close()\n",
                "colour": "orange",
                "author": "tomerfiliba@gmail.com"
            },
            {
                "error": "none",
                "index": "158",
                "code": "        self._session = ClosedRemote(self)\n",
                "colour": "orange",
                "author": "tomerf@il.ibm.com"
            },
            {
                "error": "none",
                "index": "159",
                "code": "\n",
                "colour": "orange",
                "author": "tanzer@swing.co.at"
            },
            {
                "error": "none",
                "index": "160",
                "code": "    def path(self, *parts):\n",
                "colour": "orange",
                "author": "tomerf@il.ibm.com"
            },
            {
                "error": "none",
                "index": "161",
                "code": "        \"\"\"A factory for :class:`RemotePaths <plumbum.path.remote.RemotePath>`.\n",
                "colour": "orange",
                "author": "Tomer.Filiba@emc.com"
            },
            {
                "error": "none",
                "index": "162",
                "code": "        Usage: ``p = rem.path(\"/usr\", \"lib\", \"python2.7\")``\n",
                "colour": "orange",
                "author": "tomerfiliba@gmail.com"
            },
            {
                "error": "none",
                "index": "163",
                "code": "        \"\"\"\n",
                "colour": "orange",
                "author": "tomerf@il.ibm.com"
            },
            {
                "error": "none",
                "index": "164",
                "code": "        parts2 = [str(self.cwd)]\n",
                "colour": "orange",
                "author": "tomerf@il.ibm.com"
            },
            {
                "error": "C",
                "index": "165",
                "code": "        for p in parts:\n",
                "colour": "blue",
                "author": "tomerf@il.ibm.com"
            },
            {
                "error": "none",
                "index": "166",
                "code": "            if isinstance(p, LocalPath):\n",
                "colour": "orange",
                "author": "tomerf@il.ibm.com"
            },
            {
                "error": "none",
                "index": "167",
                "code": "                raise TypeError(\"Cannot construct RemotePath from %r\" % (p,))\n",
                "colour": "orange",
                "author": "tomerf@il.ibm.com"
            },
            {
                "error": "C",
                "index": "168",
                "code": "            p = str(p)\n",
                "colour": "blue",
                "author": "tomerfiliba@gmail.com"
            },
            {
                "error": "none",
                "index": "169",
                "code": "            if \"~\" in p:\n",
                "colour": "orange",
                "author": "tomerfiliba@gmail.com"
            },
            {
                "error": "C",
                "index": "170",
                "code": "                p = self.env.expanduser(p)\n",
                "colour": "blue",
                "author": "tomerfiliba@gmail.com"
            },
            {
                "error": "none",
                "index": "171",
                "code": "            parts2.append(p)\n",
                "colour": "orange",
                "author": "tomerfiliba@gmail.com"
            },
            {
                "error": "W",
                "index": "172",
                "code": "        return RemotePath(self, *parts2)\n",
                "colour": "purple",
                "author": "tomerf@il.ibm.com"
            },
            {
                "error": "none",
                "index": "173",
                "code": "\n",
                "colour": "orange",
                "author": "tanzer@swing.co.at"
            },
            {
                "error": "none",
                "index": "174",
                "code": "    def which(self, progname):\n",
                "colour": "orange",
                "author": "tomerf@il.ibm.com"
            },
            {
                "error": "C",
                "index": "175",
                "code": "        \"\"\"Looks up a program in the ``PATH``. If the program is not found, raises\n",
                "colour": "blue",
                "author": "tomerf@il.ibm.com"
            },
            {
                "error": "none",
                "index": "176",
                "code": "        :class:`CommandNotFound <plumbum.commands.CommandNotFound>`\n",
                "colour": "orange",
                "author": "tomerf@il.ibm.com"
            },
            {
                "error": "none",
                "index": "177",
                "code": "\n",
                "colour": "orange",
                "author": "tanzer@swing.co.at"
            },
            {
                "error": "C",
                "index": "178",
                "code": "        :param progname: The program's name. Note that if underscores (``_``) are present\n",
                "colour": "blue",
                "author": "tomerf@il.ibm.com"
            },
            {
                "error": "C",
                "index": "179",
                "code": "                         in the name, and the exact name is not found, they will be replaced\n",
                "colour": "blue",
                "author": "tanzer@swing.co.at"
            },
            {
                "error": "C",
                "index": "180",
                "code": "                         in turn by hyphens (``-``) then periods (``.``), and the name will \n",
                "colour": "blue",
                "author": "andy@9mmedia.com"
            },
            {
                "error": "none",
                "index": "181",
                "code": "                         be looked up again for each alternative\n",
                "colour": "orange",
                "author": "andy@9mmedia.com"
            },
            {
                "error": "none",
                "index": "182",
                "code": "\n",
                "colour": "orange",
                "author": "tanzer@swing.co.at"
            },
            {
                "error": "none",
                "index": "183",
                "code": "        :returns: A :class:`RemotePath <plumbum.path.local.RemotePath>`\n",
                "colour": "orange",
                "author": "Tomer.Filiba@emc.com"
            },
            {
                "error": "none",
                "index": "184",
                "code": "        \"\"\"\n",
                "colour": "orange",
                "author": "tomerf@il.ibm.com"
            },
            {
                "error": "none",
                "index": "185",
                "code": "        alternatives = [progname]\n",
                "colour": "orange",
                "author": "tomerf@il.ibm.com"
            },
            {
                "error": "none",
                "index": "186",
                "code": "        if \"_\" in progname:\n",
                "colour": "orange",
                "author": "tomerf@il.ibm.com"
            },
            {
                "error": "none",
                "index": "187",
                "code": "            alternatives.append(progname.replace(\"_\", \"-\"))\n",
                "colour": "orange",
                "author": "tomerf@il.ibm.com"
            },
            {
                "error": "none",
                "index": "188",
                "code": "            alternatives.append(progname.replace(\"_\", \".\"))\n",
                "colour": "orange",
                "author": "andy@9mmedia.com"
            },
            {
                "error": "none",
                "index": "189",
                "code": "        for name in alternatives:\n",
                "colour": "orange",
                "author": "tomerf@il.ibm.com"
            },
            {
                "error": "C",
                "index": "190",
                "code": "            for p in self.env.path:\n",
                "colour": "blue",
                "author": "drennalls@gmail.com"
            },
            {
                "error": "C",
                "index": "191",
                "code": "                fn = p / name\n",
                "colour": "blue",
                "author": "tomerfiliba@gmail.com"
            },
            {
                "error": "none",
                "index": "192",
                "code": "                if fn.access(\"x\"):\n",
                "colour": "orange",
                "author": "drennalls@gmail.com"
            },
            {
                "error": "none",
                "index": "193",
                "code": "                    return fn\n",
                "colour": "orange",
                "author": "drennalls@gmail.com"
            },
            {
                "error": "none",
                "index": "194",
                "code": "\n",
                "colour": "orange",
                "author": "tanzer@swing.co.at"
            },
            {
                "error": "none",
                "index": "195",
                "code": "        raise CommandNotFound(progname, self.env.path)\n",
                "colour": "orange",
                "author": "tomerf@il.ibm.com"
            },
            {
                "error": "none",
                "index": "196",
                "code": "\n",
                "colour": "orange",
                "author": "tanzer@swing.co.at"
            },
            {
                "error": "none",
                "index": "197",
                "code": "    def __getitem__(self, cmd):\n",
                "colour": "orange",
                "author": "tomerf@il.ibm.com"
            },
            {
                "error": "C",
                "index": "198",
                "code": "        \"\"\"Returns a `Command` object representing the given program. ``cmd`` can be a string or\n",
                "colour": "blue",
                "author": "tomerf@il.ibm.com"
            },
            {
                "error": "C",
                "index": "199",
                "code": "        a :class:`RemotePath <plumbum.path.remote.RemotePath>`; if it is a path, a command\n",
                "colour": "blue",
                "author": "Tomer.Filiba@emc.com"
            },
            {
                "error": "C",
                "index": "200",
                "code": "        representing this path will be returned; otherwise, the program name will be looked up in\n",
                "colour": "blue",
                "author": "tanzer@swing.co.at"
            },
            {
                "error": "none",
                "index": "201",
                "code": "        the system's ``PATH`` (using ``which``). Usage::\n",
                "colour": "orange",
                "author": "tomerf@il.ibm.com"
            },
            {
                "error": "none",
                "index": "202",
                "code": "\n",
                "colour": "orange",
                "author": "tanzer@swing.co.at"
            },
            {
                "error": "none",
                "index": "203",
                "code": "            r_ls = rem[\"ls\"]\n",
                "colour": "orange",
                "author": "tomerf@il.ibm.com"
            },
            {
                "error": "none",
                "index": "204",
                "code": "        \"\"\"\n",
                "colour": "orange",
                "author": "tomerf@il.ibm.com"
            },
            {
                "error": "none",
                "index": "205",
                "code": "        if isinstance(cmd, RemotePath):\n",
                "colour": "orange",
                "author": "tomerf@il.ibm.com"
            },
            {
                "error": "none",
                "index": "206",
                "code": "            if cmd.remote is self:\n",
                "colour": "orange",
                "author": "tomerf@il.ibm.com"
            },
            {
                "error": "none",
                "index": "207",
                "code": "                return RemoteCommand(self, cmd)\n",
                "colour": "orange",
                "author": "tomerf@il.ibm.com"
            },
            {
                "error": "none",
                "index": "208",
                "code": "            else:\n",
                "colour": "orange",
                "author": "tomerf@il.ibm.com"
            },
            {
                "error": "C",
                "index": "209",
                "code": "                raise TypeError(\"Given path does not belong to this remote machine: %r\" % (cmd,))\n",
                "colour": "blue",
                "author": "tomerfiliba@gmail.com"
            },
            {
                "error": "none",
                "index": "210",
                "code": "        elif not isinstance(cmd, LocalPath):\n",
                "colour": "orange",
                "author": "tanzer@swing.co.at"
            },
            {
                "error": "none",
                "index": "211",
                "code": "            if \"/\" in cmd or \"\\\\\" in cmd:\n",
                "colour": "orange",
                "author": "tomerf@il.ibm.com"
            },
            {
                "error": "none",
                "index": "212",
                "code": "                return RemoteCommand(self, self.path(cmd))\n",
                "colour": "orange",
                "author": "tomerf@il.ibm.com"
            },
            {
                "error": "none",
                "index": "213",
                "code": "            else:\n",
                "colour": "orange",
                "author": "tomerf@il.ibm.com"
            },
            {
                "error": "none",
                "index": "214",
                "code": "                return RemoteCommand(self, self.which(cmd))\n",
                "colour": "orange",
                "author": "tomerf@il.ibm.com"
            },
            {
                "error": "none",
                "index": "215",
                "code": "        else:\n",
                "colour": "orange",
                "author": "tomerfiliba@gmail.com"
            },
            {
                "error": "none",
                "index": "216",
                "code": "            raise TypeError(\"cmd must not be a LocalPath: %r\" % (cmd,))\n",
                "colour": "orange",
                "author": "tanzer@swing.co.at"
            },
            {
                "error": "none",
                "index": "217",
                "code": "\n",
                "colour": "orange",
                "author": "tomerfiliba@gmail.com"
            },
            {
                "error": "none",
                "index": "218",
                "code": "    def __contains__(self, cmd):\n",
                "colour": "orange",
                "author": "tomerfiliba@gmail.com"
            },
            {
                "error": "C",
                "index": "219",
                "code": "        \"\"\"Tests for the existance of the command, e.g., ``\"ls\" in remote_machine``.\n",
                "colour": "blue",
                "author": "tomerfiliba@gmail.com"
            },
            {
                "error": "none",
                "index": "220",
                "code": "        ``cmd`` can be anything acceptable by ``__getitem__``.\n",
                "colour": "orange",
                "author": "tomerfiliba@gmail.com"
            },
            {
                "error": "none",
                "index": "221",
                "code": "        \"\"\"\n",
                "colour": "orange",
                "author": "tomerfiliba@gmail.com"
            },
            {
                "error": "none",
                "index": "222",
                "code": "        try:\n",
                "colour": "orange",
                "author": "tomerfiliba@gmail.com"
            },
            {
                "error": "none",
                "index": "223",
                "code": "            self[cmd]\n",
                "colour": "orange",
                "author": "tomerfiliba@gmail.com"
            },
            {
                "error": "none",
                "index": "224",
                "code": "        except CommandNotFound:\n",
                "colour": "orange",
                "author": "tomerfiliba@gmail.com"
            },
            {
                "error": "none",
                "index": "225",
                "code": "            return False\n",
                "colour": "orange",
                "author": "tomerfiliba@gmail.com"
            },
            {
                "error": "none",
                "index": "226",
                "code": "        else:\n",
                "colour": "orange",
                "author": "tomerfiliba@gmail.com"
            },
            {
                "error": "none",
                "index": "227",
                "code": "            return True\n",
                "colour": "orange",
                "author": "tomerfiliba@gmail.com"
            },
            {
                "error": "none",
                "index": "228",
                "code": "\n",
                "colour": "orange",
                "author": "tomerfiliba@gmail.com"
            },
            {
                "error": "none",
                "index": "229",
                "code": "    @property\n",
                "colour": "orange",
                "author": "tomerf@il.ibm.com"
            },
            {
                "error": "none",
                "index": "230",
                "code": "    def python(self):\n",
                "colour": "orange",
                "author": "tomerf@il.ibm.com"
            },
            {
                "error": "none",
                "index": "231",
                "code": "        \"\"\"A command that represents the default remote python interpreter\"\"\"\n",
                "colour": "orange",
                "author": "tomerf@il.ibm.com"
            },
            {
                "error": "none",
                "index": "232",
                "code": "        if not self._python:\n",
                "colour": "orange",
                "author": "tomerf@il.ibm.com"
            },
            {
                "error": "none",
                "index": "233",
                "code": "            self._python = self[\"python\"]\n",
                "colour": "orange",
                "author": "tomerf@il.ibm.com"
            },
            {
                "error": "none",
                "index": "234",
                "code": "        return self._python\n",
                "colour": "orange",
                "author": "tomerf@il.ibm.com"
            },
            {
                "error": "none",
                "index": "235",
                "code": "\n",
                "colour": "orange",
                "author": "tomerf@il.ibm.com"
            },
            {
                "error": "C",
                "index": "236",
                "code": "    def session(self, isatty = False, new_session = False):\n",
                "colour": "blue",
                "author": "Tomer.Filiba@emc.com"
            },
            {
                "error": "C",
                "index": "237",
                "code": "        \"\"\"Creates a new :class:`ShellSession <plumbum.session.ShellSession>` object; this invokes the user's\n",
                "colour": "blue",
                "author": "tomerf@il.ibm.com"
            },
            {
                "error": "C",
                "index": "238",
                "code": "        shell on the remote machine and executes commands on it over stdin/stdout/stderr\"\"\"\n",
                "colour": "blue",
                "author": "tomerf@il.ibm.com"
            },
            {
                "error": "none",
                "index": "239",
                "code": "        raise NotImplementedError()\n",
                "colour": "orange",
                "author": "tomerfiliba@gmail.com"
            },
            {
                "error": "none",
                "index": "240",
                "code": "\n",
                "colour": "orange",
                "author": "tanzer@swing.co.at"
            },
            {
                "error": "none",
                "index": "241",
                "code": "    def download(self, src, dst):\n",
                "colour": "orange",
                "author": "tomerfiliba@gmail.com"
            },
            {
                "error": "C",
                "index": "242",
                "code": "        \"\"\"Downloads a remote file/directory (``src``) to a local destination (``dst``).\n",
                "colour": "blue",
                "author": "tomerf@il.ibm.com"
            },
            {
                "error": "C",
                "index": "243",
                "code": "        ``src`` must be a string or a :class:`RemotePath <plumbum.path.remote.RemotePath>`\n",
                "colour": "blue",
                "author": "Tomer.Filiba@emc.com"
            },
            {
                "error": "none",
                "index": "244",
                "code": "        pointing to this remote machine, and ``dst`` must be a string or a\n",
                "colour": "orange",
                "author": "tomerf@il.ibm.com"
            },
            {
                "error": "none",
                "index": "245",
                "code": "        :class:`LocalPath <plumbum.machines.local.LocalPath>`\"\"\"\n",
                "colour": "orange",
                "author": "Tomer.Filiba@emc.com"
            },
            {
                "error": "none",
                "index": "246",
                "code": "        raise NotImplementedError()\n",
                "colour": "orange",
                "author": "tomerfiliba@gmail.com"
            },
            {
                "error": "none",
                "index": "247",
                "code": "\n",
                "colour": "orange",
                "author": "tanzer@swing.co.at"
            },
            {
                "error": "none",
                "index": "248",
                "code": "    def upload(self, src, dst):\n",
                "colour": "orange",
                "author": "tomerfiliba@gmail.com"
            },
            {
                "error": "C",
                "index": "249",
                "code": "        \"\"\"Uploads a local file/directory (``src``) to a remote destination (``dst``).\n",
                "colour": "blue",
                "author": "tomerf@il.ibm.com"
            },
            {
                "error": "C",
                "index": "250",
                "code": "        ``src`` must be a string or a :class:`LocalPath <plumbum.machines.local.LocalPath>`,\n",
                "colour": "blue",
                "author": "Tomer.Filiba@emc.com"
            },
            {
                "error": "C",
                "index": "251",
                "code": "        and ``dst`` must be a string or a :class:`RemotePath <plumbum.path.remote.RemotePath>`\n",
                "colour": "blue",
                "author": "Tomer.Filiba@emc.com"
            },
            {
                "error": "none",
                "index": "252",
                "code": "        pointing to this remote machine\"\"\"\n",
                "colour": "orange",
                "author": "tomerf@il.ibm.com"
            },
            {
                "error": "none",
                "index": "253",
                "code": "        raise NotImplementedError()\n",
                "colour": "orange",
                "author": "tomerf@il.ibm.com"
            },
            {
                "error": "none",
                "index": "254",
                "code": "\n",
                "colour": "orange",
                "author": "tanzer@swing.co.at"
            },
            {
                "error": "none",
                "index": "255",
                "code": "    def popen(self, args, **kwargs):\n",
                "colour": "orange",
                "author": "tomerf@il.ibm.com"
            },
            {
                "error": "C",
                "index": "256",
                "code": "        \"\"\"Spawns the given command on the remote machine, returning a ``Popen``-like object;\n",
                "colour": "blue",
                "author": "tanzer@swing.co.at"
            },
            {
                "error": "C",
                "index": "257",
                "code": "        do not use this method directly, unless you need \"low-level\" control on the remote\n",
                "colour": "blue",
                "author": "tanzer@swing.co.at"
            },
            {
                "error": "none",
                "index": "258",
                "code": "        process\"\"\"\n",
                "colour": "orange",
                "author": "tomerf@il.ibm.com"
            },
            {
                "error": "none",
                "index": "259",
                "code": "        raise NotImplementedError()\n",
                "colour": "orange",
                "author": "tomerfiliba@gmail.com"
            },
            {
                "error": "none",
                "index": "260",
                "code": "\n",
                "colour": "orange",
                "author": "tomerfiliba@gmail.com"
            },
            {
                "error": "none",
                "index": "261",
                "code": "    def list_processes(self):\n",
                "colour": "orange",
                "author": "tomerfiliba@gmail.com"
            },
            {
                "error": "none",
                "index": "262",
                "code": "        \"\"\"\n",
                "colour": "orange",
                "author": "tomerfiliba@gmail.com"
            },
            {
                "error": "C",
                "index": "263",
                "code": "        Returns information about all running processes (on POSIX systems: using ``ps``)\n",
                "colour": "blue",
                "author": "tomerfiliba@gmail.com"
            },
            {
                "error": "none",
                "index": "264",
                "code": "\n",
                "colour": "orange",
                "author": "Tomer.Filiba@emc.com"
            },
            {
                "error": "none",
                "index": "265",
                "code": "        .. versionadded:: 1.3\n",
                "colour": "orange",
                "author": "Tomer.Filiba@emc.com"
            },
            {
                "error": "none",
                "index": "266",
                "code": "        \"\"\"\n",
                "colour": "orange",
                "author": "tomerfiliba@gmail.com"
            },
            {
                "error": "C",
                "index": "267",
                "code": "        ps = self[\"ps\"]\n",
                "colour": "blue",
                "author": "tomerfiliba@gmail.com"
            },
            {
                "error": "none",
                "index": "268",
                "code": "        indexs = ps(\"-e\", \"-o\", \"pid,uid,stat,args\").splitindexs()\n",
                "colour": "orange",
                "author": "tomerfiliba@gmail.com"
            },
            {
                "error": "none",
                "index": "269",
                "code": "        indexs.pop(0) # header\n",
                "colour": "orange",
                "author": "tomerfiliba@gmail.com"
            },
            {
                "error": "none",
                "index": "270",
                "code": "        for index in indexs:\n",
                "colour": "orange",
                "author": "tomerfiliba@gmail.com"
            },
            {
                "error": "none",
                "index": "271",
                "code": "            parts = index.strip().split()\n",
                "colour": "orange",
                "author": "tomerfiliba@gmail.com"
            },
            {
                "error": "C",
                "index": "272",
                "code": "            yield ProcInfo(int(parts[0]), int(parts[1]), parts[2], \" \".join(parts[3:]))\n",
                "colour": "blue",
                "author": "tomerfiliba@gmail.com"
            },
            {
                "error": "C",
                "index": "273",
                "code": "    \n",
                "colour": "blue",
                "author": "tomerfiliba@gmail.com"
            },
            {
                "error": "none",
                "index": "274",
                "code": "    def pgrep(self, pattern):\n",
                "colour": "orange",
                "author": "tomerfiliba@gmail.com"
            },
            {
                "error": "none",
                "index": "275",
                "code": "        \"\"\"\n",
                "colour": "orange",
                "author": "tomerfiliba@gmail.com"
            },
            {
                "error": "C",
                "index": "276",
                "code": "        Process grep: return information about all processes whose command-index args match the given regex pattern\n",
                "colour": "blue",
                "author": "tomerfiliba@gmail.com"
            },
            {
                "error": "none",
                "index": "277",
                "code": "        \"\"\"\n",
                "colour": "orange",
                "author": "tomerfiliba@gmail.com"
            },
            {
                "error": "none",
                "index": "278",
                "code": "        pat = re.compile(pattern)\n",
                "colour": "orange",
                "author": "tomerfiliba@gmail.com"
            },
            {
                "error": "none",
                "index": "279",
                "code": "        for procinfo in self.list_processes():\n",
                "colour": "orange",
                "author": "tomerfiliba@gmail.com"
            },
            {
                "error": "none",
                "index": "280",
                "code": "            if pat.search(procinfo.args):\n",
                "colour": "orange",
                "author": "tomerfiliba@gmail.com"
            },
            {
                "error": "C",
                "index": "281",
                "code": "                yield procinfo \n",
                "colour": "blue",
                "author": "tomerfiliba@gmail.com"
            },
            {
                "error": "none",
                "index": "282",
                "code": "\n",
                "colour": "orange",
                "author": "tomerfiliba@gmail.com"
            },
            {
                "error": "none",
                "index": "283",
                "code": "    @contextmanager\n",
                "colour": "orange",
                "author": "tomerf@il.ibm.com"
            },
            {
                "error": "none",
                "index": "284",
                "code": "    def tempdir(self):\n",
                "colour": "orange",
                "author": "tomerf@il.ibm.com"
            },
            {
                "error": "C",
                "index": "285",
                "code": "        \"\"\"A context manager that creates a remote temporary directory, which is removed when\n",
                "colour": "blue",
                "author": "tanzer@swing.co.at"
            },
            {
                "error": "none",
                "index": "286",
                "code": "        the context exits\"\"\"\n",
                "colour": "orange",
                "author": "tomerf@il.ibm.com"
            },
            {
                "error": "none",
                "index": "287",
                "code": "        _, out, _ = self._session.run(\"mktemp -d\")\n",
                "colour": "orange",
                "author": "tomerf@il.ibm.com"
            },
            {
                "error": "W",
                "index": "288",
                "code": "        dir = self.path(out.strip())  # @ReservedAssignment\n",
                "colour": "purple",
                "author": "tomer.filiba@emc.com"
            },
            {
                "error": "none",
                "index": "289",
                "code": "        try:\n",
                "colour": "orange",
                "author": "tomerf@il.ibm.com"
            },
            {
                "error": "none",
                "index": "290",
                "code": "            yield dir\n",
                "colour": "orange",
                "author": "tomerf@il.ibm.com"
            },
            {
                "error": "none",
                "index": "291",
                "code": "        finally:\n",
                "colour": "orange",
                "author": "tomerf@il.ibm.com"
            },
            {
                "error": "none",
                "index": "292",
                "code": "            dir.delete()\n",
                "colour": "orange",
                "author": "tomerf@il.ibm.com"
            },
            {
                "error": "none",
                "index": "293",
                "code": "\n",
                "colour": "orange",
                "author": "tomerf@il.ibm.com"
            },
            {
                "error": "none",
                "index": "294",
                "code": "    #\n",
                "colour": "orange",
                "author": "tomerfiliba@gmail.com"
            },
            {
                "error": "none",
                "index": "295",
                "code": "    # Path implementation\n",
                "colour": "orange",
                "author": "tomerfiliba@gmail.com"
            },
            {
                "error": "none",
                "index": "296",
                "code": "    #\n",
                "colour": "orange",
                "author": "tomerfiliba@gmail.com"
            },
            {
                "error": "C",
                "index": "297",
                "code": "    def _path_listdir(self, fn):\n",
                "colour": "blue",
                "author": "tomerfiliba@gmail.com"
            },
            {
                "error": "none",
                "index": "298",
                "code": "        files = self._session.run(\"ls -a %s\" % (shquote(fn),))[1].splitindexs()\n",
                "colour": "orange",
                "author": "tomerfiliba@gmail.com"
            },
            {
                "error": "none",
                "index": "299",
                "code": "        files.remove(\".\")\n",
                "colour": "orange",
                "author": "tomerfiliba@gmail.com"
            },
            {
                "error": "none",
                "index": "300",
                "code": "        files.remove(\"..\")\n",
                "colour": "orange",
                "author": "tomerfiliba@gmail.com"
            },
            {
                "error": "none",
                "index": "301",
                "code": "        return files\n",
                "colour": "orange",
                "author": "tomerfiliba@gmail.com"
            },
            {
                "error": "C",
                "index": "302",
                "code": "    def _path_glob(self, fn, pattern):\n",
                "colour": "blue",
                "author": "tomerfiliba@gmail.com"
            },
            {
                "error": "C",
                "index": "303",
                "code": "        matches = self._session.run(\"for fn in %s/%s; do echo $fn; done\" % (fn, pattern))[1].splitindexs()\n",
                "colour": "blue",
                "author": "tomerfiliba@gmail.com"
            },
            {
                "error": "none",
                "index": "304",
                "code": "        if len(matches) == 1 and not self._path_stat(matches[0]):\n",
                "colour": "orange",
                "author": "tomerfiliba@gmail.com"
            },
            {
                "error": "none",
                "index": "305",
                "code": "            return []  # pattern expansion failed\n",
                "colour": "orange",
                "author": "tomer.filiba@emc.com"
            },
            {
                "error": "none",
                "index": "306",
                "code": "        return matches\n",
                "colour": "orange",
                "author": "tomerfiliba@gmail.com"
            },
            {
                "error": "none",
                "index": "307",
                "code": "\n",
                "colour": "orange",
                "author": "tomerfiliba@gmail.com"
            },
            {
                "error": "C",
                "index": "308",
                "code": "    def _path_getuid(self, fn):\n",
                "colour": "blue",
                "author": "tomerfiliba@gmail.com"
            },
            {
                "error": "C",
                "index": "309",
                "code": "        return self._session.run(\"stat -c '%u,%U' \" + shquote(fn))[1].strip().split(\",\")\n",
                "colour": "blue",
                "author": "tomerfiliba@gmail.com"
            },
            {
                "error": "C",
                "index": "310",
                "code": "    def _path_getgid(self, fn):\n",
                "colour": "blue",
                "author": "tomerfiliba@gmail.com"
            },
            {
                "error": "C",
                "index": "311",
                "code": "        return self._session.run(\"stat -c '%g,%G' \" + shquote(fn))[1].strip().split(\",\")\n",
                "colour": "blue",
                "author": "tomerfiliba@gmail.com"
            },
            {
                "error": "C",
                "index": "312",
                "code": "    def _path_stat(self, fn):\n",
                "colour": "blue",
                "author": "tomerfiliba@gmail.com"
            },
            {
                "error": "C",
                "index": "313",
                "code": "        rc, out, _ = self._session.run(\"stat -c '%F,%f,%i,%d,%h,%u,%g,%s,%X,%Y,%Z' \" + shquote(fn),\n",
                "colour": "blue",
                "author": "tomer.filiba@emc.com"
            },
            {
                "error": "C",
                "index": "314",
                "code": "            retcode = None)\n",
                "colour": "blue",
                "author": "tomerfiliba@gmail.com"
            },
            {
                "error": "none",
                "index": "315",
                "code": "        if rc != 0:\n",
                "colour": "orange",
                "author": "tomerfiliba@gmail.com"
            },
            {
                "error": "none",
                "index": "316",
                "code": "            return None\n",
                "colour": "orange",
                "author": "tomerfiliba@gmail.com"
            },
            {
                "error": "none",
                "index": "317",
                "code": "        statres = out.strip().split(\",\")\n",
                "colour": "orange",
                "author": "tomerfiliba@gmail.com"
            },
            {
                "error": "none",
                "index": "318",
                "code": "        text_mode = statres.pop(0).lower()\n",
                "colour": "orange",
                "author": "tomerfiliba@gmail.com"
            },
            {
                "error": "C",
                "index": "319",
                "code": "        res = StatRes((int(statres[0], 16),) + tuple(int(sr) for sr in statres[1:]))\n",
                "colour": "blue",
                "author": "Tomer.Filiba@emc.com"
            },
            {
                "error": "none",
                "index": "320",
                "code": "        res.text_mode = text_mode\n",
                "colour": "orange",
                "author": "tomerfiliba@gmail.com"
            },
            {
                "error": "none",
                "index": "321",
                "code": "        return res\n",
                "colour": "orange",
                "author": "tomerfiliba@gmail.com"
            },
            {
                "error": "none",
                "index": "322",
                "code": "\n",
                "colour": "orange",
                "author": "tomer.filiba@emc.com"
            },
            {
                "error": "C",
                "index": "323",
                "code": "    def _path_delete(self, fn):\n",
                "colour": "blue",
                "author": "tomerfiliba@gmail.com"
            },
            {
                "error": "none",
                "index": "324",
                "code": "        self._session.run(\"rm -rf %s\" % (shquote(fn),))\n",
                "colour": "orange",
                "author": "tomerfiliba@gmail.com"
            },
            {
                "error": "C",
                "index": "325",
                "code": "    def _path_move(self, src, dst):\n",
                "colour": "blue",
                "author": "tomerfiliba@gmail.com"
            },
            {
                "error": "none",
                "index": "326",
                "code": "        self._session.run(\"mv %s %s\" % (shquote(src), shquote(dst)))\n",
                "colour": "orange",
                "author": "tomerfiliba@gmail.com"
            },
            {
                "error": "C",
                "index": "327",
                "code": "    def _path_copy(self, src, dst):\n",
                "colour": "blue",
                "author": "tomerfiliba@gmail.com"
            },
            {
                "error": "none",
                "index": "328",
                "code": "        self._session.run(\"cp -r %s %s\" % (shquote(src), shquote(dst)))\n",
                "colour": "orange",
                "author": "tomerfiliba@gmail.com"
            },
            {
                "error": "C",
                "index": "329",
                "code": "    def _path_mkdir(self, fn):\n",
                "colour": "blue",
                "author": "tomerfiliba@gmail.com"
            },
            {
                "error": "none",
                "index": "330",
                "code": "        self._session.run(\"mkdir -p %s\" % (shquote(fn),))\n",
                "colour": "orange",
                "author": "tomerfiliba@gmail.com"
            },
            {
                "error": "C",
                "index": "331",
                "code": "    def _path_chmod(self, mode, fn):\n",
                "colour": "blue",
                "author": "tomerfiliba@gmail.com"
            },
            {
                "error": "none",
                "index": "332",
                "code": "        self._session.run(\"chmod %o %s\" % (mode, shquote(fn)))\n",
                "colour": "orange",
                "author": "tomerfiliba@gmail.com"
            },
            {
                "error": "C",
                "index": "333",
                "code": "    def _path_chown(self, fn, owner, group, recursive):\n",
                "colour": "blue",
                "author": "tomerfiliba@gmail.com"
            },
            {
                "error": "none",
                "index": "334",
                "code": "        args = [\"chown\"]\n",
                "colour": "orange",
                "author": "tomerfiliba@gmail.com"
            },
            {
                "error": "none",
                "index": "335",
                "code": "        if recursive:\n",
                "colour": "orange",
                "author": "tomerfiliba@gmail.com"
            },
            {
                "error": "none",
                "index": "336",
                "code": "            args.append(\"-R\")\n",
                "colour": "orange",
                "author": "tomerfiliba@gmail.com"
            },
            {
                "error": "none",
                "index": "337",
                "code": "        if owner is not None and group is not None:\n",
                "colour": "orange",
                "author": "tomerfiliba@gmail.com"
            },
            {
                "error": "none",
                "index": "338",
                "code": "            args.append(\"%s:%s\" % (owner, group))\n",
                "colour": "orange",
                "author": "tomerfiliba@gmail.com"
            },
            {
                "error": "none",
                "index": "339",
                "code": "        elif owner is not None:\n",
                "colour": "orange",
                "author": "tomerfiliba@gmail.com"
            },
            {
                "error": "none",
                "index": "340",
                "code": "            args.append(str(owner))\n",
                "colour": "orange",
                "author": "tomerfiliba@gmail.com"
            },
            {
                "error": "none",
                "index": "341",
                "code": "        elif group is not None:\n",
                "colour": "orange",
                "author": "tomerfiliba@gmail.com"
            },
            {
                "error": "none",
                "index": "342",
                "code": "            args.append(\":%s\" % (group,))\n",
                "colour": "orange",
                "author": "tomerfiliba@gmail.com"
            },
            {
                "error": "none",
                "index": "343",
                "code": "        args.append(shquote(fn))\n",
                "colour": "orange",
                "author": "tomerfiliba@gmail.com"
            },
            {
                "error": "none",
                "index": "344",
                "code": "        self._session.run(\" \".join(args))\n",
                "colour": "orange",
                "author": "tomerfiliba@gmail.com"
            },
            {
                "error": "none",
                "index": "345",
                "code": "\n",
                "colour": "orange",
                "author": "tomerfiliba@gmail.com"
            },
            {
                "error": "C",
                "index": "346",
                "code": "    def _path_read(self, fn):\n",
                "colour": "blue",
                "author": "tomerfiliba@gmail.com"
            },
            {
                "error": "none",
                "index": "347",
                "code": "        data = self[\"cat\"](fn)\n",
                "colour": "orange",
                "author": "tomerfiliba@gmail.com"
            },
            {
                "error": "none",
                "index": "348",
                "code": "        if self.encoding and isinstance(data, six.unicode_type):\n",
                "colour": "orange",
                "author": "tomerfiliba@gmail.com"
            },
            {
                "error": "none",
                "index": "349",
                "code": "            data = data.encode(self.encoding)\n",
                "colour": "orange",
                "author": "tomerfiliba@gmail.com"
            },
            {
                "error": "none",
                "index": "350",
                "code": "        return data\n",
                "colour": "orange",
                "author": "tomerfiliba@gmail.com"
            },
            {
                "error": "C",
                "index": "351",
                "code": "    def _path_write(self, fn, data):\n",
                "colour": "blue",
                "author": "tomerfiliba@gmail.com"
            },
            {
                "error": "none",
                "index": "352",
                "code": "        if self.encoding and isinstance(data, six.unicode_type):\n",
                "colour": "orange",
                "author": "tomerfiliba@gmail.com"
            },
            {
                "error": "none",
                "index": "353",
                "code": "            data = data.encode(self.encoding)\n",
                "colour": "orange",
                "author": "tomerfiliba@gmail.com"
            },
            {
                "error": "C",
                "index": "354",
                "code": "        with NamedTemporaryFile() as f:\n",
                "colour": "blue",
                "author": "tomerfiliba@gmail.com"
            },
            {
                "error": "none",
                "index": "355",
                "code": "            f.write(data)\n",
                "colour": "orange",
                "author": "tomerfiliba@gmail.com"
            },
            {
                "error": "none",
                "index": "356",
                "code": "            f.flush()\n",
                "colour": "orange",
                "author": "tomerfiliba@gmail.com"
            },
            {
                "error": "none",
                "index": "357",
                "code": "            f.seek(0)\n",
                "colour": "orange",
                "author": "tomerfiliba@gmail.com"
            },
            {
                "error": "none",
                "index": "358",
                "code": "            self.upload(f.name, fn)\n",
                "colour": "orange",
                "author": "tomerfiliba@gmail.com"
            },
            {
                "error": "none",
                "index": "359",
                "code": "\n",
                "colour": "orange",
                "author": "tomer.filiba@emc.com"
            },
            {
                "error": "C",
                "index": "360",
                "code": "    def _path_link(self, src, dst, symlink):\n",
                "colour": "blue",
                "author": "tomerfiliba@gmail.com"
            },
            {
                "error": "E",
                "index": "361",
                "code": "        self._session.run(\"ln -s %s %s\" % (\"-s\" if symlink else \"\", shquote(src), shquote(dst)))\n",
                "colour": "yellow",
                "author": "tomerfiliba@gmail.com"
            },
            {
                "error": "none",
                "index": "362",
                "code": "\n",
                "colour": "orange",
                "author": "tomerfiliba@gmail.com"
            },
            {
                "error": "none",
                "index": "363",
                "code": "\n",
                "colour": "orange",
                "author": "tomerf@il.ibm.com"
            }

    ]
}