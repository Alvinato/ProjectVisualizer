{"path": "/home/asumal/git/cs410/plumbum/plumbum/commands/base.py", "lines": [{"index": "1", "colour": "orange", "code": "from __future__ import with_statement\n", "error": "none", "author": "Tomer.Filiba@emc.com"}, {"index": "2", "colour": "orange", "code": "import subprocess\n", "error": "none", "author": "tomerfiliba@gmail.com"}, {"index": "3", "colour": "orange", "code": "import functools\n", "error": "none", "author": "tomerfiliba@gmail.com"}, {"index": "4", "colour": "orange", "code": "from contextlib import contextmanager\n", "error": "none", "author": "tomerfiliba@gmail.com"}, {"index": "5", "colour": "orange", "code": "from plumbum.commands.processes import run_proc\n", "error": "none", "author": "Tomer.Filiba@emc.com"}, {"index": "6", "colour": "orange", "code": "from plumbum.lib import six\n", "error": "none", "author": "tomerfiliba@gmail.com"}, {"index": "7", "colour": "orange", "code": "from tempfile import TemporaryFile\n", "error": "none", "author": "Tomer.Filiba@emc.com"}, {"index": "8", "colour": "orange", "code": "from subprocess import PIPE, Popen\n", "error": "none", "author": "tomerfiliba@gmail.com"}, {"index": "9", "colour": "orange", "code": "\n", "error": "none", "author": "tomerfiliba@gmail.com"}, {"index": "10", "colour": "orange", "code": "\n", "error": "none", "author": "tomerfiliba@gmail.com"}, {"index": "11", "colour": "orange", "code": "class RedirectionError(Exception):\n", "error": "none", "author": "tomerfiliba@gmail.com"}, {"index": "12", "colour": "orange", "code": "    \"\"\"Raised when an attempt is made to redirect an process' standard handle,\n", "error": "none", "author": "tomerf@il.ibm.com"}, {"index": "13", "colour": "orange", "code": "    which was already redirected to/from a file\"\"\"\n", "error": "none", "author": "tanzer@swing.co.at"}, {"index": "14", "colour": "orange", "code": "\n", "error": "none", "author": "tomerfiliba@gmail.com"}, {"index": "15", "colour": "orange", "code": "\n", "error": "none", "author": "tomerfiliba@gmail.com"}, {"index": "16", "colour": "orange", "code": "#===================================================================================================\n", "error": "none", "author": "tomerfiliba@gmail.com"}, {"index": "17", "colour": "orange", "code": "# Utilities\n", "error": "none", "author": "tomerfiliba@gmail.com"}, {"index": "18", "colour": "orange", "code": "#===================================================================================================\n", "error": "none", "author": "tomerfiliba@gmail.com"}, {"index": "19", "colour": "orange", "code": "# modified from the stdlib pipes module for windows\n", "error": "none", "author": "tomerfiliba@gmail.com"}, {"index": "20", "colour": "orange", "code": "_safechars = 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!@%_-+=:,./'\n", "error": "none", "author": "tomerfiliba@gmail.com"}, {"index": "21", "colour": "orange", "code": "_funnychars = '\"`$\\\\'\n", "error": "none", "author": "tomerfiliba@gmail.com"}, {"index": "22", "colour": "orange", "code": "def shquote(text):\n", "error": "none", "author": "tomerfiliba@gmail.com"}, {"index": "23", "colour": "orange", "code": "    \"\"\"Quotes the given text with shell escaping (assumes as syntax similar to ``sh``)\"\"\"\n", "error": "none", "author": "tomerf@il.ibm.com"}, {"index": "24", "colour": "orange", "code": "    if not text:\n", "error": "none", "author": "tomerfiliba@gmail.com"}, {"index": "25", "colour": "orange", "code": "        return \"''\"\n", "error": "none", "author": "tomerfiliba@gmail.com"}, {"index": "26", "colour": "orange", "code": "    text = str(text)\n", "error": "none", "author": "tomerf@il.ibm.com"}, {"index": "27", "colour": "orange", "code": "    if not text:\n", "error": "none", "author": "tomerfiliba@gmail.com"}, {"index": "28", "colour": "orange", "code": "        return \"''\"\n", "error": "none", "author": "tomerfiliba@gmail.com"}, {"index": "29", "colour": "orange", "code": "    for c in text:\n", "error": "none", "author": "tomerfiliba@gmail.com"}, {"index": "30", "colour": "orange", "code": "        if c not in _safechars:\n", "error": "none", "author": "tomerfiliba@gmail.com"}, {"index": "31", "colour": "orange", "code": "            break\n", "error": "none", "author": "tomerfiliba@gmail.com"}, {"index": "32", "colour": "orange", "code": "    else:\n", "error": "none", "author": "tomerfiliba@gmail.com"}, {"index": "33", "colour": "orange", "code": "        return text\n", "error": "none", "author": "tomerfiliba@gmail.com"}, {"index": "34", "colour": "orange", "code": "    if \"'\" not in text:\n", "error": "none", "author": "tomerfiliba@gmail.com"}, {"index": "35", "colour": "orange", "code": "        return \"'\" + text + \"'\"\n", "error": "none", "author": "tomerfiliba@gmail.com"}, {"index": "36", "colour": "orange", "code": "    res = \"\".join(('\\\\' + c if c in _funnychars else c) for c in text)\n", "error": "none", "author": "tomerfiliba@gmail.com"}, {"index": "37", "colour": "orange", "code": "    return '\"' + res + '\"'\n", "error": "none", "author": "tomerfiliba@gmail.com"}, {"index": "38", "colour": "orange", "code": "\n", "error": "none", "author": "tomerfiliba@gmail.com"}, {"index": "39", "colour": "orange", "code": "def shquote_list(seq):\n", "error": "none", "author": "tomerfiliba@gmail.com"}, {"index": "40", "colour": "orange", "code": "    return [shquote(item) for item in seq]\n", "error": "none", "author": "tomerfiliba@gmail.com"}, {"index": "41", "colour": "orange", "code": "\n", "error": "none", "author": "tomerf@il.ibm.com"}, {"index": "42", "colour": "orange", "code": "\n", "error": "none", "author": "Tomer.Filiba@emc.com"}, {"index": "43", "colour": "orange", "code": "#===================================================================================================\n", "error": "none", "author": "tomerfiliba@gmail.com"}, {"index": "44", "colour": "orange", "code": "# Commands\n", "error": "none", "author": "tomerfiliba@gmail.com"}, {"index": "45", "colour": "orange", "code": "#===================================================================================================\n", "error": "none", "author": "tomerfiliba@gmail.com"}, {"index": "46", "colour": "orange", "code": "class BaseCommand(object):\n", "error": "none", "author": "tomerfiliba@gmail.com"}, {"index": "47", "colour": "orange", "code": "    \"\"\"Base of all command objects\"\"\"\n", "error": "none", "author": "tomerf@il.ibm.com"}, {"index": "48", "colour": "orange", "code": "\n", "error": "none", "author": "tanzer@swing.co.at"}, {"index": "49", "colour": "orange", "code": "    __slots__ = [\"cwd\", \"env\", \"encoding\"]\n", "error": "none", "author": "tomerfiliba@gmail.com"}, {"index": "50", "colour": "orange", "code": "\n", "error": "none", "author": "tanzer@swing.co.at"}, {"index": "51", "colour": "orange", "code": "    def __str__(self):\n", "error": "none", "author": "tomerfiliba@gmail.com"}, {"index": "52", "colour": "orange", "code": "        return \" \".join(self.formulate())\n", "error": "none", "author": "tomerfiliba@gmail.com"}, {"index": "53", "colour": "orange", "code": "\n", "error": "none", "author": "tanzer@swing.co.at"}, {"index": "54", "colour": "orange", "code": "    def __or__(self, other):\n", "error": "none", "author": "tomerfiliba@gmail.com"}, {"index": "55", "colour": "orange", "code": "        \"\"\"Creates a pipe with the other command\"\"\"\n", "error": "none", "author": "tomerf@il.ibm.com"}, {"index": "56", "colour": "orange", "code": "        return Pipeline(self, other)\n", "error": "none", "author": "tomerfiliba@gmail.com"}, {"index": "57", "colour": "orange", "code": "\n", "error": "none", "author": "tanzer@swing.co.at"}, {"index": "58", "colour": "green", "code": "    def __gt__(self, file):\n", "error": "W", "author": "tomerfiliba@gmail.com"}, {"index": "59", "colour": "orange", "code": "        \"\"\"Redirects the process' stdout to the given file\"\"\"\n", "error": "none", "author": "tomerf@il.ibm.com"}, {"index": "60", "colour": "orange", "code": "        return StdoutRedirection(self, file)\n", "error": "none", "author": "tomerfiliba@gmail.com"}, {"index": "61", "colour": "orange", "code": "\n", "error": "none", "author": "tanzer@swing.co.at"}, {"index": "62", "colour": "green", "code": "    def __rshift__(self, file):\n", "error": "W", "author": "bawan03@gmeail.com"}, {"index": "63", "colour": "orange", "code": "        \"\"\"Redirects the process' stdout to the given file (appending)\"\"\"\n", "error": "none", "author": "bawan03@gmeail.com"}, {"index": "64", "colour": "orange", "code": "        return AppendingStdoutRedirection(self, file)\n", "error": "none", "author": "bawan03@gmeail.com"}, {"index": "65", "colour": "orange", "code": "\n", "error": "none", "author": "bawan03@gmeail.com"}, {"index": "66", "colour": "green", "code": "    def __ge__(self, file):\n", "error": "W", "author": "tomerfiliba@gmail.com"}, {"index": "67", "colour": "orange", "code": "        \"\"\"Redirects the process' stderr to the given file\"\"\"\n", "error": "none", "author": "tomerf@il.ibm.com"}, {"index": "68", "colour": "orange", "code": "        return StderrRedirection(self, file)\n", "error": "none", "author": "tomerfiliba@gmail.com"}, {"index": "69", "colour": "orange", "code": "\n", "error": "none", "author": "tanzer@swing.co.at"}, {"index": "70", "colour": "green", "code": "    def __lt__(self, file):\n", "error": "W", "author": "tomerfiliba@gmail.com"}, {"index": "71", "colour": "orange", "code": "        \"\"\"Redirects the given file into the process' stdin\"\"\"\n", "error": "none", "author": "tomerf@il.ibm.com"}, {"index": "72", "colour": "orange", "code": "        return StdinRedirection(self, file)\n", "error": "none", "author": "tomerfiliba@gmail.com"}, {"index": "73", "colour": "orange", "code": "    def __lshift__(self, data):\n", "error": "none", "author": "tomerfiliba@gmail.com"}, {"index": "74", "colour": "orange", "code": "        \"\"\"Redirects the given data into the process' stdin\"\"\"\n", "error": "none", "author": "tomerf@il.ibm.com"}, {"index": "75", "colour": "orange", "code": "        return StdinDataRedirection(self, data)\n", "error": "none", "author": "tomerfiliba@gmail.com"}, {"index": "76", "colour": "orange", "code": "\n", "error": "none", "author": "tanzer@swing.co.at"}, {"index": "77", "colour": "orange", "code": "    def __getitem__(self, args):\n", "error": "none", "author": "tomerfiliba@gmail.com"}, {"index": "78", "colour": "orange", "code": "        \"\"\"Creates a bound-command with the given arguments\"\"\"\n", "error": "none", "author": "tomerf@il.ibm.com"}, {"index": "79", "colour": "orange", "code": "        if not isinstance(args, (tuple, list)):\n", "error": "none", "author": "tomerfiliba@gmail.com"}, {"index": "80", "colour": "orange", "code": "            args = [args, ]\n", "error": "none", "author": "Tomer.Filiba@emc.com"}, {"index": "81", "colour": "orange", "code": "        if not args:\n", "error": "none", "author": "tomerf@il.ibm.com"}, {"index": "82", "colour": "orange", "code": "            return self\n", "error": "none", "author": "tomerf@il.ibm.com"}, {"index": "83", "colour": "orange", "code": "        if isinstance(self, BoundCommand):\n", "error": "none", "author": "tomerf@il.ibm.com"}, {"index": "84", "colour": "red", "code": "            return BoundCommand(self.cmd, self.args + list(args))\n", "error": "E", "author": "kurt.neufeld@calgaryscientific.com"}, {"index": "85", "colour": "orange", "code": "        else:\n", "error": "none", "author": "tomerf@il.ibm.com"}, {"index": "86", "colour": "orange", "code": "            return BoundCommand(self, args)\n", "error": "none", "author": "tomerf@il.ibm.com"}, {"index": "87", "colour": "orange", "code": "\n", "error": "none", "author": "tanzer@swing.co.at"}, {"index": "88", "colour": "orange", "code": "    def __call__(self, *args, **kwargs):\n", "error": "none", "author": "tomerfiliba@gmail.com"}, {"index": "89", "colour": "orange", "code": "        \"\"\"A shortcut for `run(args)`, returning only the process' stdout\"\"\"\n", "error": "none", "author": "tomerf@il.ibm.com"}, {"index": "90", "colour": "orange", "code": "        return self.run(args, **kwargs)[1]\n", "error": "none", "author": "tomerfiliba@gmail.com"}, {"index": "91", "colour": "orange", "code": "\n", "error": "none", "author": "tomerfiliba@gmail.com"}, {"index": "92", "colour": "orange", "code": "    def _get_encoding(self):\n", "error": "none", "author": "tomerfiliba@gmail.com"}, {"index": "93", "colour": "orange", "code": "        raise NotImplementedError()\n", "error": "none", "author": "tomerfiliba@gmail.com"}, {"index": "94", "colour": "orange", "code": "\n", "error": "none", "author": "tomerf@il.ibm.com"}, {"index": "95", "colour": "orange", "code": "    def with_env(self, **envvars):\n", "error": "none", "author": "boolegue@yahoo.com"}, {"index": "96", "colour": "orange", "code": "        \"\"\"Returns a BoundEnvCommand with the given environment variables\"\"\"\n", "error": "none", "author": "boolegue@yahoo.com"}, {"index": "97", "colour": "orange", "code": "        if not envvars:\n", "error": "none", "author": "Tomer.Filiba@emc.com"}, {"index": "98", "colour": "orange", "code": "            return self\n", "error": "none", "author": "Tomer.Filiba@emc.com"}, {"index": "99", "colour": "orange", "code": "        return BoundEnvCommand(self, envvars)\n", "error": "none", "author": "Tomer.Filiba@emc.com"}, {"index": "100", "colour": "orange", "code": "\n", "error": "none", "author": "Tomer.Filiba@emc.com"}, {"index": "101", "colour": "orange", "code": "    setenv = with_env\n", "error": "none", "author": "boolegue@yahoo.com"}, {"index": "102", "colour": "orange", "code": "\n", "error": "none", "author": "boolegue@yahoo.com"}, {"index": "103", "colour": "orange", "code": "    @property\n", "error": "none", "author": "Tomer.Filiba@emc.com"}, {"index": "104", "colour": "orange", "code": "    def machine(self):\n", "error": "none", "author": "Tomer.Filiba@emc.com"}, {"index": "105", "colour": "orange", "code": "        raise NotImplementedError()\n", "error": "none", "author": "Tomer.Filiba@emc.com"}, {"index": "106", "colour": "orange", "code": "\n", "error": "none", "author": "Tomer.Filiba@emc.com"}, {"index": "107", "colour": "orange", "code": "    def formulate(self, level = 0, args = ()):\n", "error": "none", "author": "tomerfiliba@gmail.com"}, {"index": "108", "colour": "orange", "code": "        \"\"\"Formulates the command into a command-line, i.e., a list of shell-quoted strings\n", "error": "none", "author": "tomerf@il.ibm.com"}, {"index": "109", "colour": "orange", "code": "        that can be executed by ``Popen`` or shells.\n", "error": "none", "author": "tanzer@swing.co.at"}, {"index": "110", "colour": "orange", "code": "\n", "error": "none", "author": "tanzer@swing.co.at"}, {"index": "111", "colour": "orange", "code": "        :param level: The nesting level of the formulation; it dictates how much shell-quoting\n", "error": "none", "author": "tomerf@il.ibm.com"}, {"index": "112", "colour": "orange", "code": "                      (if any) should be performed\n", "error": "none", "author": "tomerf@il.ibm.com"}, {"index": "113", "colour": "orange", "code": "\n", "error": "none", "author": "tanzer@swing.co.at"}, {"index": "114", "colour": "orange", "code": "        :param args: The arguments passed to this command (a tuple)\n", "error": "none", "author": "tomerf@il.ibm.com"}, {"index": "115", "colour": "orange", "code": "\n", "error": "none", "author": "tanzer@swing.co.at"}, {"index": "116", "colour": "orange", "code": "        :returns: A list of strings\n", "error": "none", "author": "tomerf@il.ibm.com"}, {"index": "117", "colour": "orange", "code": "        \"\"\"\n", "error": "none", "author": "tomerf@il.ibm.com"}, {"index": "118", "colour": "orange", "code": "        raise NotImplementedError()\n", "error": "none", "author": "tomerfiliba@gmail.com"}, {"index": "119", "colour": "orange", "code": "\n", "error": "none", "author": "tomerf@il.ibm.com"}, {"index": "120", "colour": "orange", "code": "    def popen(self, args = (), **kwargs):\n", "error": "none", "author": "tomerfiliba@gmail.com"}, {"index": "121", "colour": "orange", "code": "        \"\"\"Spawns the given command, returning a ``Popen``-like object.\n", "error": "none", "author": "tomerf@il.ibm.com"}, {"index": "122", "colour": "orange", "code": "\n", "error": "none", "author": "tanzer@swing.co.at"}, {"index": "123", "colour": "orange", "code": "        .. note::\n", "error": "none", "author": "tomerfiliba@gmail.com"}, {"index": "124", "colour": "orange", "code": "\n", "error": "none", "author": "tomer.filiba@emc.com"}, {"index": "125", "colour": "orange", "code": "           When processes run in the **background** (either via ``popen`` or\n", "error": "none", "author": "tomer.filiba@emc.com"}, {"index": "126", "colour": "orange", "code": "           :class:`& BG <plumbum.commands.BG>`), their stdout/stderr pipes might fill up,\n", "error": "none", "author": "tomerfiliba@gmail.com"}, {"index": "127", "colour": "orange", "code": "           causing them to hang. If you know a process produces output, be sure to consume it\n", "error": "none", "author": "tomer.filiba@emc.com"}, {"index": "128", "colour": "orange", "code": "           every once in a while, using a monitoring thread/reactor in the background.\n", "error": "none", "author": "tomerfiliba@gmail.com"}, {"index": "129", "colour": "orange", "code": "           For more info, see `#48 <https://github.com/tomerfiliba/plumbum/issues/48>`_\n", "error": "none", "author": "tomerfiliba@gmail.com"}, {"index": "130", "colour": "orange", "code": "\n", "error": "none", "author": "tomerfiliba@gmail.com"}, {"index": "131", "colour": "orange", "code": "        :param args: Any arguments to be passed to the process (a tuple)\n", "error": "none", "author": "tomerf@il.ibm.com"}, {"index": "132", "colour": "orange", "code": "\n", "error": "none", "author": "tanzer@swing.co.at"}, {"index": "133", "colour": "orange", "code": "        :param kwargs: Any keyword-arguments to be passed to the ``Popen`` constructor\n", "error": "none", "author": "tomerf@il.ibm.com"}, {"index": "134", "colour": "orange", "code": "\n", "error": "none", "author": "tanzer@swing.co.at"}, {"index": "135", "colour": "orange", "code": "        :returns: A ``Popen``-like object\n", "error": "none", "author": "tomerf@il.ibm.com"}, {"index": "136", "colour": "orange", "code": "        \"\"\"\n", "error": "none", "author": "tomerf@il.ibm.com"}, {"index": "137", "colour": "orange", "code": "        raise NotImplementedError()\n", "error": "none", "author": "tomerfiliba@gmail.com"}, {"index": "138", "colour": "orange", "code": "\n", "error": "none", "author": "tanzer@swing.co.at"}, {"index": "139", "colour": "orange", "code": "    @contextmanager\n", "error": "none", "author": "tomerfiliba@gmail.com"}, {"index": "140", "colour": "orange", "code": "    def bgrun(self, args = (), **kwargs):\n", "error": "none", "author": "tomerfiliba@gmail.com"}, {"index": "141", "colour": "orange", "code": "        \"\"\"Runs the given command as a context manager, allowing you to create a\n", "error": "none", "author": "tomerfiliba@gmail.com"}, {"index": "142", "colour": "orange", "code": "        `pipeline <http://en.wikipedia.org/wiki/Pipeline_(computing)>`_ (not in the UNIX sense)\n", "error": "none", "author": "tomerfiliba@gmail.com"}, {"index": "143", "colour": "orange", "code": "        of programs, parallelizing their work. In other words, instead of running programs\n", "error": "none", "author": "tomerfiliba@gmail.com"}, {"index": "144", "colour": "orange", "code": "        one after the other, you can start all of them at the same time and wait for them to\n", "error": "none", "author": "tomerfiliba@gmail.com"}, {"index": "145", "colour": "orange", "code": "        finish. For a more thorough review, see\n", "error": "none", "author": "tomerfiliba@gmail.com"}, {"index": "146", "colour": "orange", "code": "        `Lightweight Asynchronism <http://tomerfiliba.com/blog/Toying-with-Context-Managers/>`_.\n", "error": "none", "author": "tomerfiliba@gmail.com"}, {"index": "147", "colour": "orange", "code": "\n", "error": "none", "author": "tomer.filiba@emc.com"}, {"index": "148", "colour": "orange", "code": "        Example::\n", "error": "none", "author": "tomerfiliba@gmail.com"}, {"index": "149", "colour": "orange", "code": "\n", "error": "none", "author": "tomer.filiba@emc.com"}, {"index": "150", "colour": "orange", "code": "            from plumbum.cmd import mkfs\n", "error": "none", "author": "tomerfiliba@gmail.com"}, {"index": "151", "colour": "orange", "code": "\n", "error": "none", "author": "tomer.filiba@emc.com"}, {"index": "152", "colour": "orange", "code": "            with mkfs[\"-t\", \"ext3\", \"/dev/sda1\"] as p1:\n", "error": "none", "author": "tomerfiliba@gmail.com"}, {"index": "153", "colour": "orange", "code": "                with mkfs[\"-t\", \"ext3\", \"/dev/sdb1\"] as p2:\n", "error": "none", "author": "tomerfiliba@gmail.com"}, {"index": "154", "colour": "orange", "code": "                    pass\n", "error": "none", "author": "tomerfiliba@gmail.com"}, {"index": "155", "colour": "orange", "code": "\n", "error": "none", "author": "tomerfiliba@gmail.com"}, {"index": "156", "colour": "orange", "code": "        .. note::\n", "error": "none", "author": "tomerfiliba@gmail.com"}, {"index": "157", "colour": "orange", "code": "\n", "error": "none", "author": "tomer.filiba@emc.com"}, {"index": "158", "colour": "orange", "code": "           When processes run in the **background** (either via ``popen`` or\n", "error": "none", "author": "tomer.filiba@emc.com"}, {"index": "159", "colour": "orange", "code": "           :class:`& BG <plumbum.commands.BG>`), their stdout/stderr pipes might fill up,\n", "error": "none", "author": "tomerfiliba@gmail.com"}, {"index": "160", "colour": "orange", "code": "           causing them to hang. If you know a process produces output, be sure to consume it\n", "error": "none", "author": "tomer.filiba@emc.com"}, {"index": "161", "colour": "orange", "code": "           every once in a while, using a monitoring thread/reactor in the background.\n", "error": "none", "author": "tomerfiliba@gmail.com"}, {"index": "162", "colour": "orange", "code": "           For more info, see `#48 <https://github.com/tomerfiliba/plumbum/issues/48>`_\n", "error": "none", "author": "tomerfiliba@gmail.com"}, {"index": "163", "colour": "orange", "code": "\n", "error": "none", "author": "tomerfiliba@gmail.com"}, {"index": "164", "colour": "orange", "code": "        For the arguments, see :func:`run <BaseCommand.run>`.\n", "error": "none", "author": "tomerfiliba@gmail.com"}, {"index": "165", "colour": "orange", "code": "\n", "error": "none", "author": "tomerfiliba@gmail.com"}, {"index": "166", "colour": "orange", "code": "        :returns: A Popen object, augmented with a ``.run()`` method, which returns a tuple of\n", "error": "none", "author": "tomerfiliba@gmail.com"}, {"index": "167", "colour": "orange", "code": "                  (return code, stdout, stderr)\n", "error": "none", "author": "tomerfiliba@gmail.com"}, {"index": "168", "colour": "orange", "code": "        \"\"\"\n", "error": "none", "author": "tomerfiliba@gmail.com"}, {"index": "169", "colour": "orange", "code": "        retcode = kwargs.pop(\"retcode\", 0)\n", "error": "none", "author": "tomerfiliba@gmail.com"}, {"index": "170", "colour": "orange", "code": "        timeout = kwargs.pop(\"timeout\", None)\n", "error": "none", "author": "tomerfiliba@gmail.com"}, {"index": "171", "colour": "orange", "code": "        p = self.popen(args, **kwargs)\n", "error": "none", "author": "tomerfiliba@gmail.com"}, {"index": "172", "colour": "orange", "code": "        was_run = [False]\n", "error": "none", "author": "tomerfiliba@gmail.com"}, {"index": "173", "colour": "orange", "code": "        def runner():\n", "error": "none", "author": "tomerfiliba@gmail.com"}, {"index": "174", "colour": "orange", "code": "            if was_run[0]:\n", "error": "none", "author": "tomerfiliba@gmail.com"}, {"index": "175", "colour": "orange", "code": "                return  # already done\n", "error": "none", "author": "tomer.filiba@emc.com"}, {"index": "176", "colour": "orange", "code": "            was_run[0] = True\n", "error": "none", "author": "tomerfiliba@gmail.com"}, {"index": "177", "colour": "orange", "code": "            try:\n", "error": "none", "author": "tomerfiliba@gmail.com"}, {"index": "178", "colour": "orange", "code": "                return run_proc(p, retcode, timeout)\n", "error": "none", "author": "tomerfiliba@gmail.com"}, {"index": "179", "colour": "orange", "code": "            finally:\n", "error": "none", "author": "tomerfiliba@gmail.com"}, {"index": "180", "colour": "orange", "code": "                for f in [p.stdin, p.stdout, p.stderr]:\n", "error": "none", "author": "tomerfiliba@gmail.com"}, {"index": "181", "colour": "orange", "code": "                    try:\n", "error": "none", "author": "tomerfiliba@gmail.com"}, {"index": "182", "colour": "orange", "code": "                        f.close()\n", "error": "none", "author": "tomerfiliba@gmail.com"}, {"index": "183", "colour": "green", "code": "                    except Exception:\n", "error": "W", "author": "tomerfiliba@gmail.com"}, {"index": "184", "colour": "orange", "code": "                        pass\n", "error": "none", "author": "tomerfiliba@gmail.com"}, {"index": "185", "colour": "orange", "code": "        p.run = runner\n", "error": "none", "author": "tomerfiliba@gmail.com"}, {"index": "186", "colour": "orange", "code": "        yield p\n", "error": "none", "author": "tomerfiliba@gmail.com"}, {"index": "187", "colour": "orange", "code": "        runner()\n", "error": "none", "author": "tomerfiliba@gmail.com"}, {"index": "188", "colour": "orange", "code": "\n", "error": "none", "author": "tomerfiliba@gmail.com"}, {"index": "189", "colour": "orange", "code": "    def run(self, args = (), **kwargs):\n", "error": "none", "author": "tomerfiliba@gmail.com"}, {"index": "190", "colour": "orange", "code": "        \"\"\"Runs the given command (equivalent to popen() followed by\n", "error": "none", "author": "tanzer@swing.co.at"}, {"index": "191", "colour": "orange", "code": "        :func:`run_proc <plumbum.commands.run_proc>`). If the exit code of the process does\n", "error": "none", "author": "tomerf@il.ibm.com"}, {"index": "192", "colour": "orange", "code": "        not match the expected one, :class:`ProcessExecutionError\n", "error": "none", "author": "tanzer@swing.co.at"}, {"index": "193", "colour": "orange", "code": "        <plumbum.commands.ProcessExecutionError>` is raised.\n", "error": "none", "author": "tomerf@il.ibm.com"}, {"index": "194", "colour": "orange", "code": "\n", "error": "none", "author": "tanzer@swing.co.at"}, {"index": "195", "colour": "orange", "code": "        :param args: Any arguments to be passed to the process (a tuple)\n", "error": "none", "author": "tomerf@il.ibm.com"}, {"index": "196", "colour": "orange", "code": "\n", "error": "none", "author": "tanzer@swing.co.at"}, {"index": "197", "colour": "orange", "code": "        :param retcode: The expected return code of this process (defaults to 0).\n", "error": "none", "author": "tomerf@il.ibm.com"}, {"index": "198", "colour": "orange", "code": "                        In order to disable exit-code validation, pass ``None``. It may also\n", "error": "none", "author": "tomerf@il.ibm.com"}, {"index": "199", "colour": "orange", "code": "                        be a tuple (or any iterable) of expected exit codes.\n", "error": "none", "author": "tomerf@il.ibm.com"}, {"index": "200", "colour": "orange", "code": "\n", "error": "none", "author": "tanzer@swing.co.at"}, {"index": "201", "colour": "orange", "code": "                        .. note:: this argument must be passed as a keyword argument.\n", "error": "none", "author": "tomerf@il.ibm.com"}, {"index": "202", "colour": "orange", "code": "\n", "error": "none", "author": "tanzer@swing.co.at"}, {"index": "203", "colour": "orange", "code": "        :param timeout: The maximal amount of time (in seconds) to allow the process to run.\n", "error": "none", "author": "tomerfiliba@gmail.com"}, {"index": "204", "colour": "orange", "code": "                        ``None`` means no timeout is imposed; otherwise, if the process hasn't\n", "error": "none", "author": "tomerfiliba@gmail.com"}, {"index": "205", "colour": "orange", "code": "                        terminated after that many seconds, the process will be forcefully\n", "error": "none", "author": "tomerfiliba@gmail.com"}, {"index": "206", "colour": "orange", "code": "                        terminated an exception will be raised\n", "error": "none", "author": "tomerfiliba@gmail.com"}, {"index": "207", "colour": "orange", "code": "\n", "error": "none", "author": "tomerfiliba@gmail.com"}, {"index": "208", "colour": "orange", "code": "                        .. note:: this argument must be passed as a keyword argument.\n", "error": "none", "author": "tomerfiliba@gmail.com"}, {"index": "209", "colour": "orange", "code": "\n", "error": "none", "author": "tanzer@swing.co.at"}, {"index": "210", "colour": "orange", "code": "        :param kwargs: Any keyword-arguments to be passed to the ``Popen`` constructor\n", "error": "none", "author": "tomerf@il.ibm.com"}, {"index": "211", "colour": "orange", "code": "\n", "error": "none", "author": "tanzer@swing.co.at"}, {"index": "212", "colour": "orange", "code": "        :returns: A tuple of (return code, stdout, stderr)\n", "error": "none", "author": "tomerf@il.ibm.com"}, {"index": "213", "colour": "orange", "code": "        \"\"\"\n", "error": "none", "author": "tomerf@il.ibm.com"}, {"index": "214", "colour": "orange", "code": "        with self.bgrun(args, **kwargs) as p:\n", "error": "none", "author": "tomerfiliba@gmail.com"}, {"index": "215", "colour": "orange", "code": "            return p.run()\n", "error": "none", "author": "tomerfiliba@gmail.com"}, {"index": "216", "colour": "orange", "code": "\n", "error": "none", "author": "tomerfiliba@gmail.com"}, {"index": "217", "colour": "orange", "code": "\n", "error": "none", "author": "tomerfiliba@gmail.com"}, {"index": "218", "colour": "orange", "code": "class BoundCommand(BaseCommand):\n", "error": "none", "author": "tomerfiliba@gmail.com"}, {"index": "219", "colour": "orange", "code": "    __slots__ = [\"cmd\", \"args\"]\n", "error": "none", "author": "tomerfiliba@gmail.com"}, {"index": "220", "colour": "orange", "code": "    def __init__(self, cmd, args):\n", "error": "none", "author": "tomerfiliba@gmail.com"}, {"index": "221", "colour": "orange", "code": "        self.cmd = cmd\n", "error": "none", "author": "tomerfiliba@gmail.com"}, {"index": "222", "colour": "orange", "code": "        self.args = list(args)\n", "error": "none", "author": "kurt.neufeld@calgaryscientific.com"}, {"index": "223", "colour": "orange", "code": "    def __repr__(self):\n", "error": "none", "author": "tomerf@il.ibm.com"}, {"index": "224", "colour": "orange", "code": "        return \"BoundCommand(%r, %r)\" % (self.cmd, self.args)\n", "error": "none", "author": "tomerf@il.ibm.com"}, {"index": "225", "colour": "orange", "code": "    def _get_encoding(self):\n", "error": "none", "author": "tomerfiliba@gmail.com"}, {"index": "226", "colour": "green", "code": "        return self.cmd._get_encoding()\n", "error": "W", "author": "tomerfiliba@gmail.com"}, {"index": "227", "colour": "orange", "code": "    def formulate(self, level = 0, args = ()):\n", "error": "none", "author": "tomerfiliba@gmail.com"}, {"index": "228", "colour": "orange", "code": "        return self.cmd.formulate(level + 1, self.args + list(args))\n", "error": "none", "author": "kurt.neufeld@calgaryscientific.com"}, {"index": "229", "colour": "orange", "code": "    @property\n", "error": "none", "author": "Tomer.Filiba@emc.com"}, {"index": "230", "colour": "orange", "code": "    def machine(self):\n", "error": "none", "author": "Tomer.Filiba@emc.com"}, {"index": "231", "colour": "orange", "code": "        return self.cmd.machine\n", "error": "none", "author": "Tomer.Filiba@emc.com"}, {"index": "232", "colour": "orange", "code": "    def popen(self, args = (), **kwargs):\n", "error": "none", "author": "tomerfiliba@gmail.com"}, {"index": "233", "colour": "orange", "code": "        if isinstance(args, six.string_types):\n", "error": "none", "author": "tomerfiliba@gmail.com"}, {"index": "234", "colour": "orange", "code": "            args = [args, ]\n", "error": "none", "author": "Tomer.Filiba@emc.com"}, {"index": "235", "colour": "orange", "code": "        return self.cmd.popen(self.args + list(args), **kwargs)\n", "error": "none", "author": "kurt.neufeld@calgaryscientific.com"}, {"index": "236", "colour": "orange", "code": "\n", "error": "none", "author": "tomerfiliba@gmail.com"}, {"index": "237", "colour": "orange", "code": "class BoundEnvCommand(BaseCommand):\n", "error": "none", "author": "Tomer.Filiba@emc.com"}, {"index": "238", "colour": "orange", "code": "    __slots__ = [\"cmd\", \"envvars\"]\n", "error": "none", "author": "Tomer.Filiba@emc.com"}, {"index": "239", "colour": "orange", "code": "    def __init__(self, cmd, envvars):\n", "error": "none", "author": "Tomer.Filiba@emc.com"}, {"index": "240", "colour": "orange", "code": "        self.cmd = cmd\n", "error": "none", "author": "Tomer.Filiba@emc.com"}, {"index": "241", "colour": "orange", "code": "        self.envvars = envvars\n", "error": "none", "author": "Tomer.Filiba@emc.com"}, {"index": "242", "colour": "orange", "code": "    def __repr__(self):\n", "error": "none", "author": "Tomer.Filiba@emc.com"}, {"index": "243", "colour": "orange", "code": "        return \"BoundEnvCommand(%r, %r)\" % (self.cmd, self.envvars)\n", "error": "none", "author": "Tomer.Filiba@emc.com"}, {"index": "244", "colour": "orange", "code": "    def _get_encoding(self):\n", "error": "none", "author": "Tomer.Filiba@emc.com"}, {"index": "245", "colour": "green", "code": "        return self.cmd._get_encoding()\n", "error": "W", "author": "Tomer.Filiba@emc.com"}, {"index": "246", "colour": "orange", "code": "    def formulate(self, level = 0, args = ()):\n", "error": "none", "author": "Tomer.Filiba@emc.com"}, {"index": "247", "colour": "orange", "code": "        return self.cmd.formulate(level, args)\n", "error": "none", "author": "Tomer.Filiba@emc.com"}, {"index": "248", "colour": "orange", "code": "    @property\n", "error": "none", "author": "Tomer.Filiba@emc.com"}, {"index": "249", "colour": "orange", "code": "    def machine(self):\n", "error": "none", "author": "Tomer.Filiba@emc.com"}, {"index": "250", "colour": "orange", "code": "        return self.cmd.machine\n", "error": "none", "author": "Tomer.Filiba@emc.com"}, {"index": "251", "colour": "orange", "code": "    def popen(self, args = (), **kwargs):\n", "error": "none", "author": "Tomer.Filiba@emc.com"}, {"index": "252", "colour": "green", "code": "        with self.machine.env(**self.envvars):\n", "error": "W", "author": "Tomer.Filiba@emc.com"}, {"index": "253", "colour": "orange", "code": "            return self.cmd.popen(args, **kwargs)\n", "error": "none", "author": "Tomer.Filiba@emc.com"}, {"index": "254", "colour": "orange", "code": "\n", "error": "none", "author": "Tomer.Filiba@emc.com"}, {"index": "255", "colour": "orange", "code": "class Pipeline(BaseCommand):\n", "error": "none", "author": "tomerfiliba@gmail.com"}, {"index": "256", "colour": "orange", "code": "    __slots__ = [\"srccmd\", \"dstcmd\"]\n", "error": "none", "author": "tomerfiliba@gmail.com"}, {"index": "257", "colour": "orange", "code": "    def __init__(self, srccmd, dstcmd):\n", "error": "none", "author": "tomerfiliba@gmail.com"}, {"index": "258", "colour": "orange", "code": "        self.srccmd = srccmd\n", "error": "none", "author": "tomerfiliba@gmail.com"}, {"index": "259", "colour": "orange", "code": "        self.dstcmd = dstcmd\n", "error": "none", "author": "tomerfiliba@gmail.com"}, {"index": "260", "colour": "orange", "code": "    def __repr__(self):\n", "error": "none", "author": "tomerf@il.ibm.com"}, {"index": "261", "colour": "orange", "code": "        return \"Pipeline(%r, %r)\" % (self.srccmd, self.dstcmd)\n", "error": "none", "author": "tomerf@il.ibm.com"}, {"index": "262", "colour": "orange", "code": "    def _get_encoding(self):\n", "error": "none", "author": "tomerfiliba@gmail.com"}, {"index": "263", "colour": "green", "code": "        return self.srccmd._get_encoding() or self.dstcmd._get_encoding()\n", "error": "W", "author": "tomerfiliba@gmail.com"}, {"index": "264", "colour": "orange", "code": "    def formulate(self, level = 0, args = ()):\n", "error": "none", "author": "tomerfiliba@gmail.com"}, {"index": "265", "colour": "orange", "code": "        return self.srccmd.formulate(level + 1) + [\"|\"] + self.dstcmd.formulate(level + 1, args)\n", "error": "none", "author": "tomerfiliba@gmail.com"}, {"index": "266", "colour": "orange", "code": "\n", "error": "none", "author": "tomerfiliba@gmail.com"}, {"index": "267", "colour": "orange", "code": "    @property\n", "error": "none", "author": "Tomer.Filiba@emc.com"}, {"index": "268", "colour": "orange", "code": "    def machine(self):\n", "error": "none", "author": "Tomer.Filiba@emc.com"}, {"index": "269", "colour": "orange", "code": "        return self.srccmd.machine\n", "error": "none", "author": "Tomer.Filiba@emc.com"}, {"index": "270", "colour": "orange", "code": "\n", "error": "none", "author": "Tomer.Filiba@emc.com"}, {"index": "271", "colour": "orange", "code": "    def popen(self, args = (), **kwargs):\n", "error": "none", "author": "tomerfiliba@gmail.com"}, {"index": "272", "colour": "orange", "code": "        src_kwargs = kwargs.copy()\n", "error": "none", "author": "tomerfiliba@gmail.com"}, {"index": "273", "colour": "orange", "code": "        src_kwargs[\"stdout\"] = PIPE\n", "error": "none", "author": "tomerfiliba@gmail.com"}, {"index": "274", "colour": "orange", "code": "        src_kwargs[\"stderr\"] = PIPE\n", "error": "none", "author": "tomerfiliba@gmail.com"}, {"index": "275", "colour": "orange", "code": "\n", "error": "none", "author": "tanzer@swing.co.at"}, {"index": "276", "colour": "green", "code": "        srcproc = self.srccmd.popen(args, **src_kwargs)\n", "error": "W", "author": "tomerfiliba@gmail.com"}, {"index": "277", "colour": "orange", "code": "        kwargs[\"stdin\"] = srcproc.stdout\n", "error": "none", "author": "tomerfiliba@gmail.com"}, {"index": "278", "colour": "orange", "code": "        dstproc = self.dstcmd.popen(**kwargs)\n", "error": "none", "author": "tomerfiliba@gmail.com"}, {"index": "279", "colour": "orange", "code": "        # allow p1 to receive a SIGPIPE if p2 exits\n", "error": "none", "author": "tomerfiliba@gmail.com"}, {"index": "280", "colour": "orange", "code": "        srcproc.stdout.close()\n", "error": "none", "author": "tomerfiliba@gmail.com"}, {"index": "281", "colour": "orange", "code": "        srcproc.stderr.close()\n", "error": "none", "author": "tomerfiliba@gmail.com"}, {"index": "282", "colour": "orange", "code": "        if srcproc.stdin:\n", "error": "none", "author": "tomerfiliba@gmail.com"}, {"index": "283", "colour": "orange", "code": "            srcproc.stdin.close()\n", "error": "none", "author": "tomerfiliba@gmail.com"}, {"index": "284", "colour": "orange", "code": "        dstproc.srcproc = srcproc\n", "error": "none", "author": "tomerfiliba@gmail.com"}, {"index": "285", "colour": "orange", "code": "\n", "error": "none", "author": "tomerfiliba@gmail.com"}, {"index": "286", "colour": "orange", "code": "        # monkey-patch .wait() to wait on srcproc as well (it's expected to die when dstproc dies)\n", "error": "none", "author": "tomerfiliba@gmail.com"}, {"index": "287", "colour": "orange", "code": "        dstproc_wait = dstproc.wait\n", "error": "none", "author": "tomerfiliba@gmail.com"}, {"index": "288", "colour": "orange", "code": "        @functools.wraps(Popen.wait)\n", "error": "none", "author": "tomerfiliba@gmail.com"}, {"index": "289", "colour": "orange", "code": "        def wait2(*args, **kwargs):\n", "error": "none", "author": "tomerfiliba@gmail.com"}, {"index": "290", "colour": "orange", "code": "            rc_dst = dstproc_wait(*args, **kwargs)\n", "error": "none", "author": "tomerfiliba@gmail.com"}, {"index": "291", "colour": "orange", "code": "            rc_src = srcproc.wait(*args, **kwargs)\n", "error": "none", "author": "tomerfiliba@gmail.com"}, {"index": "292", "colour": "orange", "code": "            dstproc.returncode = rc_src or rc_dst\n", "error": "none", "author": "tomerfiliba@gmail.com"}, {"index": "293", "colour": "orange", "code": "            return dstproc.returncode\n", "error": "none", "author": "tomerfiliba@gmail.com"}, {"index": "294", "colour": "orange", "code": "        dstproc.wait = wait2\n", "error": "none", "author": "tomerfiliba@gmail.com"}, {"index": "295", "colour": "orange", "code": "        return dstproc\n", "error": "none", "author": "tomerfiliba@gmail.com"}, {"index": "296", "colour": "orange", "code": "\n", "error": "none", "author": "tomerfiliba@gmail.com"}, {"index": "297", "colour": "orange", "code": "class BaseRedirection(BaseCommand):\n", "error": "none", "author": "tomerfiliba@gmail.com"}, {"index": "298", "colour": "orange", "code": "    __slots__ = [\"cmd\", \"file\"]\n", "error": "none", "author": "tomerfiliba@gmail.com"}, {"index": "299", "colour": "orange", "code": "    SYM = None\n", "error": "none", "author": "tomerfiliba@gmail.com"}, {"index": "300", "colour": "orange", "code": "    KWARG = None\n", "error": "none", "author": "tomerfiliba@gmail.com"}, {"index": "301", "colour": "orange", "code": "    MODE = None\n", "error": "none", "author": "tomerfiliba@gmail.com"}, {"index": "302", "colour": "orange", "code": "\n", "error": "none", "author": "tanzer@swing.co.at"}, {"index": "303", "colour": "green", "code": "    def __init__(self, cmd, file):\n", "error": "W", "author": "tomerfiliba@gmail.com"}, {"index": "304", "colour": "orange", "code": "        self.cmd = cmd\n", "error": "none", "author": "tomerfiliba@gmail.com"}, {"index": "305", "colour": "orange", "code": "        self.file = file\n", "error": "none", "author": "tomerfiliba@gmail.com"}, {"index": "306", "colour": "orange", "code": "    def _get_encoding(self):\n", "error": "none", "author": "tomerfiliba@gmail.com"}, {"index": "307", "colour": "green", "code": "        return self.cmd._get_encoding()\n", "error": "W", "author": "tomerfiliba@gmail.com"}, {"index": "308", "colour": "orange", "code": "    def __repr__(self):\n", "error": "none", "author": "tomerf@il.ibm.com"}, {"index": "309", "colour": "orange", "code": "        return \"%s(%r, %r)\" % (self.__class__.__name__, self.cmd, self.file)\n", "error": "none", "author": "tomerf@il.ibm.com"}, {"index": "310", "colour": "orange", "code": "    def formulate(self, level = 0, args = ()):\n", "error": "none", "author": "tomerfiliba@gmail.com"}, {"index": "311", "colour": "orange", "code": "        return self.cmd.formulate(level + 1, args) + [self.SYM, shquote(getattr(self.file, \"name\", self.file))]\n", "error": "none", "author": "tomerfiliba@gmail.com"}, {"index": "312", "colour": "orange", "code": "    @property\n", "error": "none", "author": "Tomer.Filiba@emc.com"}, {"index": "313", "colour": "orange", "code": "    def machine(self):\n", "error": "none", "author": "Tomer.Filiba@emc.com"}, {"index": "314", "colour": "orange", "code": "        return self.cmd.machine\n", "error": "none", "author": "Tomer.Filiba@emc.com"}, {"index": "315", "colour": "orange", "code": "    def popen(self, args = (), **kwargs):\n", "error": "none", "author": "tomerfiliba@gmail.com"}, {"index": "316", "colour": "orange", "code": "        from plumbum.machines.local import LocalPath\n", "error": "none", "author": "Tomer.Filiba@emc.com"}, {"index": "317", "colour": "orange", "code": "        from plumbum.machines.remote import RemotePath\n", "error": "none", "author": "Tomer.Filiba@emc.com"}, {"index": "318", "colour": "orange", "code": "\n", "error": "none", "author": "tanzer@swing.co.at"}, {"index": "319", "colour": "orange", "code": "        if self.KWARG in kwargs and kwargs[self.KWARG] not in (PIPE, None):\n", "error": "none", "author": "tomerfiliba@gmail.com"}, {"index": "320", "colour": "orange", "code": "            raise RedirectionError(\"%s is already redirected\" % (self.KWARG,))\n", "error": "none", "author": "tomerfiliba@gmail.com"}, {"index": "321", "colour": "orange", "code": "        if isinstance(self.file, six.string_types + (LocalPath,)):\n", "error": "none", "author": "tomerfiliba@gmail.com"}, {"index": "322", "colour": "orange", "code": "            f = kwargs[self.KWARG] = open(str(self.file), self.MODE)\n", "error": "none", "author": "tomerf@il.ibm.com"}, {"index": "323", "colour": "orange", "code": "        elif isinstance(self.file, RemotePath):\n", "error": "none", "author": "tomerf@il.ibm.com"}, {"index": "324", "colour": "orange", "code": "            raise TypeError(\"Cannot redirect to/from remote paths\")\n", "error": "none", "author": "tomerf@il.ibm.com"}, {"index": "325", "colour": "orange", "code": "        else:\n", "error": "none", "author": "tomerfiliba@gmail.com"}, {"index": "326", "colour": "orange", "code": "            kwargs[self.KWARG] = self.file\n", "error": "none", "author": "tomerfiliba@gmail.com"}, {"index": "327", "colour": "orange", "code": "            f = None\n", "error": "none", "author": "tomerfiliba@gmail.com"}, {"index": "328", "colour": "orange", "code": "        try:\n", "error": "none", "author": "tomerfiliba@gmail.com"}, {"index": "329", "colour": "orange", "code": "            return self.cmd.popen(args, **kwargs)\n", "error": "none", "author": "tomerfiliba@gmail.com"}, {"index": "330", "colour": "orange", "code": "        finally:\n", "error": "none", "author": "tomerfiliba@gmail.com"}, {"index": "331", "colour": "orange", "code": "            if f:\n", "error": "none", "author": "tomerfiliba@gmail.com"}, {"index": "332", "colour": "orange", "code": "                f.close()\n", "error": "none", "author": "tomerfiliba@gmail.com"}, {"index": "333", "colour": "orange", "code": "\n", "error": "none", "author": "tomerfiliba@gmail.com"}, {"index": "334", "colour": "orange", "code": "class StdinRedirection(BaseRedirection):\n", "error": "none", "author": "tomerfiliba@gmail.com"}, {"index": "335", "colour": "orange", "code": "    __slots__ = []\n", "error": "none", "author": "tomerfiliba@gmail.com"}, {"index": "336", "colour": "orange", "code": "    SYM = \"<\"\n", "error": "none", "author": "tomerfiliba@gmail.com"}, {"index": "337", "colour": "orange", "code": "    KWARG = \"stdin\"\n", "error": "none", "author": "tomerfiliba@gmail.com"}, {"index": "338", "colour": "orange", "code": "    MODE = \"r\"\n", "error": "none", "author": "tomerfiliba@gmail.com"}, {"index": "339", "colour": "orange", "code": "\n", "error": "none", "author": "tomerfiliba@gmail.com"}, {"index": "340", "colour": "orange", "code": "class StdoutRedirection(BaseRedirection):\n", "error": "none", "author": "tomerfiliba@gmail.com"}, {"index": "341", "colour": "orange", "code": "    __slots__ = []\n", "error": "none", "author": "tomerfiliba@gmail.com"}, {"index": "342", "colour": "orange", "code": "    SYM = \">\"\n", "error": "none", "author": "tomerfiliba@gmail.com"}, {"index": "343", "colour": "orange", "code": "    KWARG = \"stdout\"\n", "error": "none", "author": "tomerfiliba@gmail.com"}, {"index": "344", "colour": "orange", "code": "    MODE = \"w\"\n", "error": "none", "author": "tomerfiliba@gmail.com"}, {"index": "345", "colour": "orange", "code": "\n", "error": "none", "author": "tomerfiliba@gmail.com"}, {"index": "346", "colour": "orange", "code": "class AppendingStdoutRedirection(BaseRedirection):\n", "error": "none", "author": "bawan03@gmeail.com"}, {"index": "347", "colour": "orange", "code": "    __slots__ = []\n", "error": "none", "author": "bawan03@gmeail.com"}, {"index": "348", "colour": "orange", "code": "    SYM = \">>\"\n", "error": "none", "author": "bawan03@gmeail.com"}, {"index": "349", "colour": "orange", "code": "    KWARG = \"stdout\"\n", "error": "none", "author": "bawan03@gmeail.com"}, {"index": "350", "colour": "orange", "code": "    MODE = \"a\"\n", "error": "none", "author": "bawan03@gmeail.com"}, {"index": "351", "colour": "orange", "code": "\n", "error": "none", "author": "bawan03@gmeail.com"}, {"index": "352", "colour": "orange", "code": "class StderrRedirection(BaseRedirection):\n", "error": "none", "author": "tomerfiliba@gmail.com"}, {"index": "353", "colour": "orange", "code": "    __slots__ = []\n", "error": "none", "author": "tomerfiliba@gmail.com"}, {"index": "354", "colour": "orange", "code": "    SYM = \"2>\"\n", "error": "none", "author": "tomerfiliba@gmail.com"}, {"index": "355", "colour": "orange", "code": "    KWARG = \"stderr\"\n", "error": "none", "author": "tomerfiliba@gmail.com"}, {"index": "356", "colour": "orange", "code": "    MODE = \"w\"\n", "error": "none", "author": "tomerfiliba@gmail.com"}, {"index": "357", "colour": "orange", "code": "\n", "error": "none", "author": "tomerfiliba@gmail.com"}, {"index": "358", "colour": "orange", "code": "class ERROUT(int):\n", "error": "none", "author": "tomerfiliba@gmail.com"}, {"index": "359", "colour": "orange", "code": "    def __repr__(self):\n", "error": "none", "author": "tomerfiliba@gmail.com"}, {"index": "360", "colour": "orange", "code": "        return \"ERROUT\"\n", "error": "none", "author": "tomerfiliba@gmail.com"}, {"index": "361", "colour": "orange", "code": "    def __str__(self):\n", "error": "none", "author": "tomerfiliba@gmail.com"}, {"index": "362", "colour": "orange", "code": "        return \"&1\"\n", "error": "none", "author": "tomerfiliba@gmail.com"}, {"index": "363", "colour": "orange", "code": "ERROUT = ERROUT(subprocess.STDOUT)\n", "error": "none", "author": "tomerfiliba@gmail.com"}, {"index": "364", "colour": "orange", "code": "\n", "error": "none", "author": "tomerfiliba@gmail.com"}, {"index": "365", "colour": "orange", "code": "class StdinDataRedirection(BaseCommand):\n", "error": "none", "author": "tomerfiliba@gmail.com"}, {"index": "366", "colour": "orange", "code": "    __slots__ = [\"cmd\", \"data\"]\n", "error": "none", "author": "tomerfiliba@gmail.com"}, {"index": "367", "colour": "orange", "code": "    CHUNK_SIZE = 16000\n", "error": "none", "author": "tomerfiliba@gmail.com"}, {"index": "368", "colour": "orange", "code": "\n", "error": "none", "author": "tanzer@swing.co.at"}, {"index": "369", "colour": "orange", "code": "    def __init__(self, cmd, data):\n", "error": "none", "author": "tomerfiliba@gmail.com"}, {"index": "370", "colour": "orange", "code": "        self.cmd = cmd\n", "error": "none", "author": "tomerfiliba@gmail.com"}, {"index": "371", "colour": "orange", "code": "        self.data = data\n", "error": "none", "author": "tomerfiliba@gmail.com"}, {"index": "372", "colour": "orange", "code": "    def _get_encoding(self):\n", "error": "none", "author": "tomerfiliba@gmail.com"}, {"index": "373", "colour": "green", "code": "        return self.cmd._get_encoding()\n", "error": "W", "author": "tomerfiliba@gmail.com"}, {"index": "374", "colour": "orange", "code": "\n", "error": "none", "author": "tanzer@swing.co.at"}, {"index": "375", "colour": "orange", "code": "    def formulate(self, level = 0, args = ()):\n", "error": "none", "author": "tomerfiliba@gmail.com"}, {"index": "376", "colour": "orange", "code": "        return [\"echo %s\" % (shquote(self.data),), \"|\", self.cmd.formulate(level + 1, args)]\n", "error": "none", "author": "tomerfiliba@gmail.com"}, {"index": "377", "colour": "orange", "code": "    @property\n", "error": "none", "author": "Tomer.Filiba@emc.com"}, {"index": "378", "colour": "orange", "code": "    def machine(self):\n", "error": "none", "author": "Tomer.Filiba@emc.com"}, {"index": "379", "colour": "orange", "code": "        return self.cmd.machine\n", "error": "none", "author": "Tomer.Filiba@emc.com"}, {"index": "380", "colour": "orange", "code": "    def popen(self, args = (), **kwargs):\n", "error": "none", "author": "tomerfiliba@gmail.com"}, {"index": "381", "colour": "orange", "code": "        if \"stdin\" in kwargs and kwargs[\"stdin\"] != PIPE:\n", "error": "none", "author": "tomerfiliba@gmail.com"}, {"index": "382", "colour": "orange", "code": "            raise RedirectionError(\"stdin is already redirected\")\n", "error": "none", "author": "tomerfiliba@gmail.com"}, {"index": "383", "colour": "orange", "code": "        data = self.data\n", "error": "none", "author": "tomerfiliba@gmail.com"}, {"index": "384", "colour": "orange", "code": "        if isinstance(data, six.unicode_type) and self._get_encoding() is not None:\n", "error": "none", "author": "tomerfiliba@gmail.com"}, {"index": "385", "colour": "orange", "code": "            data = data.encode(self._get_encoding())\n", "error": "none", "author": "tomerfiliba@gmail.com"}, {"index": "386", "colour": "orange", "code": "        f = TemporaryFile()\n", "error": "none", "author": "tomerfiliba@gmail.com"}, {"index": "387", "colour": "orange", "code": "        while data:\n", "error": "none", "author": "tomerfiliba@gmail.com"}, {"index": "388", "colour": "orange", "code": "            chunk = data[:self.CHUNK_SIZE]\n", "error": "none", "author": "tomerfiliba@gmail.com"}, {"index": "389", "colour": "orange", "code": "            f.write(chunk)\n", "error": "none", "author": "tomerfiliba@gmail.com"}, {"index": "390", "colour": "orange", "code": "            data = data[self.CHUNK_SIZE:]\n", "error": "none", "author": "tomerfiliba@gmail.com"}, {"index": "391", "colour": "orange", "code": "        f.seek(0)\n", "error": "none", "author": "tomerfiliba@gmail.com"}, {"index": "392", "colour": "orange", "code": "        # try:\n", "error": "none", "author": "tomer.filiba@emc.com"}, {"index": "393", "colour": "orange", "code": "        return self.cmd.popen(args, stdin = f, **kwargs)\n", "error": "none", "author": "tomerfiliba@gmail.com"}, {"index": "394", "colour": "orange", "code": "        # finally:\n", "error": "none", "author": "tomer.filiba@emc.com"}, {"index": "395", "colour": "orange", "code": "        #    f.close()\n", "error": "none", "author": "tomerfiliba@gmail.com"}, {"index": "396", "colour": "orange", "code": "\n", "error": "none", "author": "tomerfiliba@gmail.com"}, {"index": "397", "colour": "green", "code": "class ConcreteCommand(BaseCommand):\n", "error": "W", "author": "tomerfiliba@gmail.com"}, {"index": "398", "colour": "orange", "code": "    QUOTE_LEVEL = None\n", "error": "none", "author": "tomerfiliba@gmail.com"}, {"index": "399", "colour": "orange", "code": "    __slots__ = [\"executable\", \"encoding\"]\n", "error": "none", "author": "tomerfiliba@gmail.com"}, {"index": "400", "colour": "orange", "code": "    def __init__(self, executable, encoding):\n", "error": "none", "author": "tomerfiliba@gmail.com"}, {"index": "401", "colour": "orange", "code": "        self.executable = executable\n", "error": "none", "author": "tomerfiliba@gmail.com"}, {"index": "402", "colour": "orange", "code": "        self.encoding = encoding\n", "error": "none", "author": "tomerfiliba@gmail.com"}, {"index": "403", "colour": "orange", "code": "        self.cwd = None\n", "error": "none", "author": "tomerfiliba@gmail.com"}, {"index": "404", "colour": "orange", "code": "        self.env = None\n", "error": "none", "author": "tomerfiliba@gmail.com"}, {"index": "405", "colour": "orange", "code": "    def __str__(self):\n", "error": "none", "author": "tomerfiliba@gmail.com"}, {"index": "406", "colour": "orange", "code": "        return str(self.executable)\n", "error": "none", "author": "tomerfiliba@gmail.com"}, {"index": "407", "colour": "orange", "code": "    def _get_encoding(self):\n", "error": "none", "author": "tomerfiliba@gmail.com"}, {"index": "408", "colour": "orange", "code": "        return self.encoding\n", "error": "none", "author": "tomerfiliba@gmail.com"}, {"index": "409", "colour": "orange", "code": "\n", "error": "none", "author": "tomerfiliba@gmail.com"}, {"index": "410", "colour": "orange", "code": "    def formulate(self, level = 0, args = ()):\n", "error": "none", "author": "tomerfiliba@gmail.com"}, {"index": "411", "colour": "orange", "code": "        argv = [str(self.executable)]\n", "error": "none", "author": "tomerfiliba@gmail.com"}, {"index": "412", "colour": "orange", "code": "        for a in args:\n", "error": "none", "author": "tomerfiliba@gmail.com"}, {"index": "413", "colour": "orange", "code": "            if not a and a != \"\":\n", "error": "none", "author": "tomerfiliba@gmail.com"}, {"index": "414", "colour": "orange", "code": "                continue\n", "error": "none", "author": "tomerfiliba@gmail.com"}, {"index": "415", "colour": "orange", "code": "            if isinstance(a, BaseCommand):\n", "error": "none", "author": "tomerfiliba@gmail.com"}, {"index": "416", "colour": "orange", "code": "                if level >= self.QUOTE_LEVEL:\n", "error": "none", "author": "tomerfiliba@gmail.com"}, {"index": "417", "colour": "orange", "code": "                    argv.extend(shquote_list(a.formulate(level + 1)))\n", "error": "none", "author": "tomerfiliba@gmail.com"}, {"index": "418", "colour": "orange", "code": "                else:\n", "error": "none", "author": "tomerfiliba@gmail.com"}, {"index": "419", "colour": "orange", "code": "                    argv.extend(a.formulate(level + 1))\n", "error": "none", "author": "tomerfiliba@gmail.com"}, {"index": "420", "colour": "orange", "code": "            elif isinstance(a, (list, tuple)):\n", "error": "none", "author": "tomerfiliba@gmail.com"}, {"index": "421", "colour": "orange", "code": "                argv.extend(shquote(b) if level >= self.QUOTE_LEVEL else str(b) for b in a)\n", "error": "none", "author": "tomerfiliba@gmail.com"}, {"index": "422", "colour": "orange", "code": "            else:\n", "error": "none", "author": "tomerfiliba@gmail.com"}, {"index": "423", "colour": "orange", "code": "                argv.append(shquote(a) if level >= self.QUOTE_LEVEL else str(a))\n", "error": "none", "author": "tomerfiliba@gmail.com"}, {"index": "424", "colour": "orange", "code": "        # if self.encoding:\n", "error": "none", "author": "tomer.filiba@emc.com"}, {"index": "425", "colour": "orange", "code": "        #    argv = [a.encode(self.encoding) for a in argv if isinstance(a, six.string_types)]\n", "error": "none", "author": "tomerfiliba@gmail.com"}, {"index": "426", "colour": "orange", "code": "        return argv\n", "error": "none", "author": "tomerfiliba@gmail.com"}, {"index": "427", "colour": "orange", "code": "\n", "error": "none", "author": "tomerfiliba@gmail.com"}, {"index": "428", "colour": "orange", "code": "\n", "error": "none", "author": "tomerfiliba@gmail.com"}, {"index": "429", "colour": "orange", "code": "\n", "error": "none", "author": "tomerfiliba@gmail.com"}, {"index": "430", "colour": "orange", "code": "\n", "error": "none", "author": "tomerfiliba@gmail.com"}, {"index": "431", "colour": "orange", "code": "\n", "error": "none", "author": "tomerfiliba@gmail.com"}, {"index": "432", "colour": "orange", "code": "\n", "error": "none", "author": "tomerfiliba@gmail.com"}, {"index": "433", "colour": "orange", "code": "\n", "error": "none", "author": "tomerfiliba@gmail.com"}, {"index": "434", "colour": "orange", "code": "\n", "error": "none", "author": "tomerfiliba@gmail.com"}]}