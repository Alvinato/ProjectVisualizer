{"path": "/home/asumal/git/cs410/pattern/pattern/server/cherrypy/cherrypy/lib/reprconf.py", "lines": [{"index": "1", "colour": "orange", "code": "\"\"\"Generic configuration system using unrepr.\n", "error": "none", "author": "tom@organisms.be"}, {"index": "2", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "3", "colour": "orange", "code": "Configuration data may be supplied as a Python dictionary, as a filename,\n", "error": "none", "author": "tom@organisms.be"}, {"index": "4", "colour": "orange", "code": "or as an open file object. When you supply a filename or file, Python's\n", "error": "none", "author": "tom@organisms.be"}, {"index": "5", "colour": "orange", "code": "builtin ConfigParser is used (with some extensions).\n", "error": "none", "author": "tom@organisms.be"}, {"index": "6", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "7", "colour": "orange", "code": "Namespaces\n", "error": "none", "author": "tom@organisms.be"}, {"index": "8", "colour": "orange", "code": "----------\n", "error": "none", "author": "tom@organisms.be"}, {"index": "9", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "10", "colour": "orange", "code": "Configuration keys are separated into namespaces by the first \".\" in the key.\n", "error": "none", "author": "tom@organisms.be"}, {"index": "11", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "12", "colour": "orange", "code": "The only key that cannot exist in a namespace is the \"environment\" entry.\n", "error": "none", "author": "tom@organisms.be"}, {"index": "13", "colour": "orange", "code": "This special entry 'imports' other config entries from a template stored in\n", "error": "none", "author": "tom@organisms.be"}, {"index": "14", "colour": "orange", "code": "the Config.environments dict.\n", "error": "none", "author": "tom@organisms.be"}, {"index": "15", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "16", "colour": "orange", "code": "You can define your own namespaces to be called when new config is merged\n", "error": "none", "author": "tom@organisms.be"}, {"index": "17", "colour": "orange", "code": "by adding a named handler to Config.namespaces. The name can be any string,\n", "error": "none", "author": "tom@organisms.be"}, {"index": "18", "colour": "orange", "code": "and the handler must be either a callable or a context manager.\n", "error": "none", "author": "tom@organisms.be"}, {"index": "19", "colour": "orange", "code": "\"\"\"\n", "error": "none", "author": "tom@organisms.be"}, {"index": "20", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "21", "colour": "orange", "code": "try:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "22", "colour": "orange", "code": "    # Python 3.0+\n", "error": "none", "author": "tom@organisms.be"}, {"index": "23", "colour": "orange", "code": "    from configparser import ConfigParser\n", "error": "none", "author": "tom@organisms.be"}, {"index": "24", "colour": "orange", "code": "except ImportError:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "25", "colour": "orange", "code": "    from ConfigParser import ConfigParser\n", "error": "none", "author": "tom@organisms.be"}, {"index": "26", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "27", "colour": "orange", "code": "try:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "28", "colour": "orange", "code": "    set\n", "error": "none", "author": "tom@organisms.be"}, {"index": "29", "colour": "orange", "code": "except NameError:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "30", "colour": "green", "code": "    from sets import Set as set\n", "error": "W", "author": "tom@organisms.be"}, {"index": "31", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "32", "colour": "orange", "code": "try:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "33", "colour": "orange", "code": "    basestring\n", "error": "none", "author": "tom@organisms.be"}, {"index": "34", "colour": "orange", "code": "except NameError:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "35", "colour": "green", "code": "    basestring = str\n", "error": "W", "author": "tom@organisms.be"}, {"index": "36", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "37", "colour": "orange", "code": "try:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "38", "colour": "orange", "code": "    # Python 3\n", "error": "none", "author": "tom@organisms.be"}, {"index": "39", "colour": "orange", "code": "    import builtins\n", "error": "none", "author": "tom@organisms.be"}, {"index": "40", "colour": "orange", "code": "except ImportError:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "41", "colour": "orange", "code": "    # Python 2\n", "error": "none", "author": "tom@organisms.be"}, {"index": "42", "colour": "orange", "code": "    import __builtin__ as builtins\n", "error": "none", "author": "tom@organisms.be"}, {"index": "43", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "44", "colour": "orange", "code": "import operator as _operator\n", "error": "none", "author": "tom@organisms.be"}, {"index": "45", "colour": "orange", "code": "import sys\n", "error": "none", "author": "tom@organisms.be"}, {"index": "46", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "47", "colour": "orange", "code": "def as_dict(config):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "48", "colour": "orange", "code": "    \"\"\"Return a dict from 'config' whether it is a dict, file, or filename.\"\"\"\n", "error": "none", "author": "tom@organisms.be"}, {"index": "49", "colour": "orange", "code": "    if isinstance(config, basestring):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "50", "colour": "orange", "code": "        config = Parser().dict_from_file(config)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "51", "colour": "orange", "code": "    elif hasattr(config, 'read'):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "52", "colour": "orange", "code": "        config = Parser().dict_from_file(config)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "53", "colour": "orange", "code": "    return config\n", "error": "none", "author": "tom@organisms.be"}, {"index": "54", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "55", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "56", "colour": "orange", "code": "class NamespaceSet(dict):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "57", "colour": "orange", "code": "    \"\"\"A dict of config namespace names and handlers.\n", "error": "none", "author": "tom@organisms.be"}, {"index": "58", "colour": "orange", "code": "    \n", "error": "none", "author": "tom@organisms.be"}, {"index": "59", "colour": "orange", "code": "    Each config entry should begin with a namespace name; the corresponding\n", "error": "none", "author": "tom@organisms.be"}, {"index": "60", "colour": "orange", "code": "    namespace handler will be called once for each config entry in that\n", "error": "none", "author": "tom@organisms.be"}, {"index": "61", "colour": "orange", "code": "    namespace, and will be passed two arguments: the config key (with the\n", "error": "none", "author": "tom@organisms.be"}, {"index": "62", "colour": "orange", "code": "    namespace removed) and the config value.\n", "error": "none", "author": "tom@organisms.be"}, {"index": "63", "colour": "orange", "code": "    \n", "error": "none", "author": "tom@organisms.be"}, {"index": "64", "colour": "orange", "code": "    Namespace handlers may be any Python callable; they may also be\n", "error": "none", "author": "tom@organisms.be"}, {"index": "65", "colour": "orange", "code": "    Python 2.5-style 'context managers', in which case their __enter__\n", "error": "none", "author": "tom@organisms.be"}, {"index": "66", "colour": "orange", "code": "    method should return a callable to be used as the handler.\n", "error": "none", "author": "tom@organisms.be"}, {"index": "67", "colour": "orange", "code": "    See cherrypy.tools (the Toolbox class) for an example.\n", "error": "none", "author": "tom@organisms.be"}, {"index": "68", "colour": "orange", "code": "    \"\"\"\n", "error": "none", "author": "tom@organisms.be"}, {"index": "69", "colour": "orange", "code": "    \n", "error": "none", "author": "tom@organisms.be"}, {"index": "70", "colour": "blue", "code": "    def __call__(self, config):\n", "error": "R", "author": "tom@organisms.be"}, {"index": "71", "colour": "orange", "code": "        \"\"\"Iterate through config and pass it to each namespace handler.\n", "error": "none", "author": "tom@organisms.be"}, {"index": "72", "colour": "orange", "code": "        \n", "error": "none", "author": "tom@organisms.be"}, {"index": "73", "colour": "orange", "code": "        config\n", "error": "none", "author": "tom@organisms.be"}, {"index": "74", "colour": "orange", "code": "            A flat dict, where keys use dots to separate\n", "error": "none", "author": "tom@organisms.be"}, {"index": "75", "colour": "orange", "code": "            namespaces, and values are arbitrary.\n", "error": "none", "author": "tom@organisms.be"}, {"index": "76", "colour": "orange", "code": "        \n", "error": "none", "author": "tom@organisms.be"}, {"index": "77", "colour": "orange", "code": "        The first name in each config key is used to look up the corresponding\n", "error": "none", "author": "tom@organisms.be"}, {"index": "78", "colour": "orange", "code": "        namespace handler. For example, a config entry of {'tools.gzip.on': v}\n", "error": "none", "author": "tom@organisms.be"}, {"index": "79", "colour": "orange", "code": "        will call the 'tools' namespace handler with the args: ('gzip.on', v)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "80", "colour": "orange", "code": "        \"\"\"\n", "error": "none", "author": "tom@organisms.be"}, {"index": "81", "colour": "orange", "code": "        # Separate the given config into namespaces\n", "error": "none", "author": "tom@organisms.be"}, {"index": "82", "colour": "orange", "code": "        ns_confs = {}\n", "error": "none", "author": "tom@organisms.be"}, {"index": "83", "colour": "orange", "code": "        for k in config:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "84", "colour": "orange", "code": "            if \".\" in k:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "85", "colour": "orange", "code": "                ns, name = k.split(\".\", 1)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "86", "colour": "orange", "code": "                bucket = ns_confs.setdefault(ns, {})\n", "error": "none", "author": "tom@organisms.be"}, {"index": "87", "colour": "orange", "code": "                bucket[name] = config[k]\n", "error": "none", "author": "tom@organisms.be"}, {"index": "88", "colour": "orange", "code": "        \n", "error": "none", "author": "tom@organisms.be"}, {"index": "89", "colour": "orange", "code": "        # I chose __enter__ and __exit__ so someday this could be\n", "error": "none", "author": "tom@organisms.be"}, {"index": "90", "colour": "orange", "code": "        # rewritten using Python 2.5's 'with' statement:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "91", "colour": "orange", "code": "        # for ns, handler in self.iteritems():\n", "error": "none", "author": "tom@organisms.be"}, {"index": "92", "colour": "orange", "code": "        #     with handler as callable:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "93", "colour": "orange", "code": "        #         for k, v in ns_confs.get(ns, {}).iteritems():\n", "error": "none", "author": "tom@organisms.be"}, {"index": "94", "colour": "orange", "code": "        #             callable(k, v)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "95", "colour": "orange", "code": "        for ns, handler in self.items():\n", "error": "none", "author": "tom@organisms.be"}, {"index": "96", "colour": "green", "code": "            exit = getattr(handler, \"__exit__\", None)\n", "error": "W", "author": "tom@organisms.be"}, {"index": "97", "colour": "orange", "code": "            if exit:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "98", "colour": "green", "code": "                callable = handler.__enter__()\n", "error": "W", "author": "tom@organisms.be"}, {"index": "99", "colour": "orange", "code": "                no_exc = True\n", "error": "none", "author": "tom@organisms.be"}, {"index": "100", "colour": "orange", "code": "                try:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "101", "colour": "orange", "code": "                    try:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "102", "colour": "orange", "code": "                        for k, v in ns_confs.get(ns, {}).items():\n", "error": "none", "author": "tom@organisms.be"}, {"index": "103", "colour": "orange", "code": "                            callable(k, v)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "104", "colour": "green", "code": "                    except:\n", "error": "W", "author": "tom@organisms.be"}, {"index": "105", "colour": "orange", "code": "                        # The exceptional case is handled here\n", "error": "none", "author": "tom@organisms.be"}, {"index": "106", "colour": "orange", "code": "                        no_exc = False\n", "error": "none", "author": "tom@organisms.be"}, {"index": "107", "colour": "orange", "code": "                        if exit is None:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "108", "colour": "orange", "code": "                            raise\n", "error": "none", "author": "tom@organisms.be"}, {"index": "109", "colour": "orange", "code": "                        if not exit(*sys.exc_info()):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "110", "colour": "orange", "code": "                            raise\n", "error": "none", "author": "tom@organisms.be"}, {"index": "111", "colour": "orange", "code": "                        # The exception is swallowed if exit() returns true\n", "error": "none", "author": "tom@organisms.be"}, {"index": "112", "colour": "orange", "code": "                finally:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "113", "colour": "orange", "code": "                    # The normal and non-local-goto cases are handled here\n", "error": "none", "author": "tom@organisms.be"}, {"index": "114", "colour": "orange", "code": "                    if no_exc and exit:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "115", "colour": "orange", "code": "                        exit(None, None, None)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "116", "colour": "orange", "code": "            else:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "117", "colour": "orange", "code": "                for k, v in ns_confs.get(ns, {}).items():\n", "error": "none", "author": "tom@organisms.be"}, {"index": "118", "colour": "orange", "code": "                    handler(k, v)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "119", "colour": "orange", "code": "    \n", "error": "none", "author": "tom@organisms.be"}, {"index": "120", "colour": "orange", "code": "    def __repr__(self):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "121", "colour": "orange", "code": "        return \"%s.%s(%s)\" % (self.__module__, self.__class__.__name__,\n", "error": "none", "author": "tom@organisms.be"}, {"index": "122", "colour": "orange", "code": "                              dict.__repr__(self))\n", "error": "none", "author": "tom@organisms.be"}, {"index": "123", "colour": "orange", "code": "    \n", "error": "none", "author": "tom@organisms.be"}, {"index": "124", "colour": "orange", "code": "    def __copy__(self):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "125", "colour": "orange", "code": "        newobj = self.__class__()\n", "error": "none", "author": "tom@organisms.be"}, {"index": "126", "colour": "orange", "code": "        newobj.update(self)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "127", "colour": "orange", "code": "        return newobj\n", "error": "none", "author": "tom@organisms.be"}, {"index": "128", "colour": "orange", "code": "    copy = __copy__\n", "error": "none", "author": "tom@organisms.be"}, {"index": "129", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "130", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "131", "colour": "orange", "code": "class Config(dict):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "132", "colour": "orange", "code": "    \"\"\"A dict-like set of configuration data, with defaults and namespaces.\n", "error": "none", "author": "tom@organisms.be"}, {"index": "133", "colour": "orange", "code": "    \n", "error": "none", "author": "tom@organisms.be"}, {"index": "134", "colour": "orange", "code": "    May take a file, filename, or dict.\n", "error": "none", "author": "tom@organisms.be"}, {"index": "135", "colour": "orange", "code": "    \"\"\"\n", "error": "none", "author": "tom@organisms.be"}, {"index": "136", "colour": "orange", "code": "    \n", "error": "none", "author": "tom@organisms.be"}, {"index": "137", "colour": "orange", "code": "    defaults = {}\n", "error": "none", "author": "tom@organisms.be"}, {"index": "138", "colour": "orange", "code": "    environments = {}\n", "error": "none", "author": "tom@organisms.be"}, {"index": "139", "colour": "orange", "code": "    namespaces = NamespaceSet()\n", "error": "none", "author": "tom@organisms.be"}, {"index": "140", "colour": "orange", "code": "    \n", "error": "none", "author": "tom@organisms.be"}, {"index": "141", "colour": "green", "code": "    def __init__(self, file=None, **kwargs):\n", "error": "W", "author": "tom@organisms.be"}, {"index": "142", "colour": "orange", "code": "        self.reset()\n", "error": "none", "author": "tom@organisms.be"}, {"index": "143", "colour": "orange", "code": "        if file is not None:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "144", "colour": "orange", "code": "            self.update(file)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "145", "colour": "orange", "code": "        if kwargs:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "146", "colour": "orange", "code": "            self.update(kwargs)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "147", "colour": "orange", "code": "    \n", "error": "none", "author": "tom@organisms.be"}, {"index": "148", "colour": "orange", "code": "    def reset(self):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "149", "colour": "orange", "code": "        \"\"\"Reset self to default values.\"\"\"\n", "error": "none", "author": "tom@organisms.be"}, {"index": "150", "colour": "orange", "code": "        self.clear()\n", "error": "none", "author": "tom@organisms.be"}, {"index": "151", "colour": "orange", "code": "        dict.update(self, self.defaults)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "152", "colour": "orange", "code": "    \n", "error": "none", "author": "tom@organisms.be"}, {"index": "153", "colour": "orange", "code": "    def update(self, config):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "154", "colour": "orange", "code": "        \"\"\"Update self from a dict, file or filename.\"\"\"\n", "error": "none", "author": "tom@organisms.be"}, {"index": "155", "colour": "orange", "code": "        if isinstance(config, basestring):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "156", "colour": "orange", "code": "            # Filename\n", "error": "none", "author": "tom@organisms.be"}, {"index": "157", "colour": "orange", "code": "            config = Parser().dict_from_file(config)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "158", "colour": "orange", "code": "        elif hasattr(config, 'read'):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "159", "colour": "orange", "code": "            # Open file object\n", "error": "none", "author": "tom@organisms.be"}, {"index": "160", "colour": "orange", "code": "            config = Parser().dict_from_file(config)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "161", "colour": "orange", "code": "        else:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "162", "colour": "orange", "code": "            config = config.copy()\n", "error": "none", "author": "tom@organisms.be"}, {"index": "163", "colour": "orange", "code": "        self._apply(config)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "164", "colour": "orange", "code": "    \n", "error": "none", "author": "tom@organisms.be"}, {"index": "165", "colour": "orange", "code": "    def _apply(self, config):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "166", "colour": "orange", "code": "        \"\"\"Update self from a dict.\"\"\"\n", "error": "none", "author": "tom@organisms.be"}, {"index": "167", "colour": "orange", "code": "        which_env = config.get('environment')\n", "error": "none", "author": "tom@organisms.be"}, {"index": "168", "colour": "orange", "code": "        if which_env:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "169", "colour": "orange", "code": "            env = self.environments[which_env]\n", "error": "none", "author": "tom@organisms.be"}, {"index": "170", "colour": "orange", "code": "            for k in env:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "171", "colour": "orange", "code": "                if k not in config:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "172", "colour": "orange", "code": "                    config[k] = env[k]\n", "error": "none", "author": "tom@organisms.be"}, {"index": "173", "colour": "orange", "code": "        \n", "error": "none", "author": "tom@organisms.be"}, {"index": "174", "colour": "orange", "code": "        dict.update(self, config)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "175", "colour": "orange", "code": "        self.namespaces(config)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "176", "colour": "orange", "code": "    \n", "error": "none", "author": "tom@organisms.be"}, {"index": "177", "colour": "orange", "code": "    def __setitem__(self, k, v):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "178", "colour": "orange", "code": "        dict.__setitem__(self, k, v)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "179", "colour": "orange", "code": "        self.namespaces({k: v})\n", "error": "none", "author": "tom@organisms.be"}, {"index": "180", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "181", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "182", "colour": "orange", "code": "class Parser(ConfigParser):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "183", "colour": "orange", "code": "    \"\"\"Sub-class of ConfigParser that keeps the case of options and that \n", "error": "none", "author": "tom@organisms.be"}, {"index": "184", "colour": "orange", "code": "    raises an exception if the file cannot be read.\n", "error": "none", "author": "tom@organisms.be"}, {"index": "185", "colour": "orange", "code": "    \"\"\"\n", "error": "none", "author": "tom@organisms.be"}, {"index": "186", "colour": "orange", "code": "    \n", "error": "none", "author": "tom@organisms.be"}, {"index": "187", "colour": "orange", "code": "    def optionxform(self, optionstr):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "188", "colour": "orange", "code": "        return optionstr\n", "error": "none", "author": "tom@organisms.be"}, {"index": "189", "colour": "orange", "code": "    \n", "error": "none", "author": "tom@organisms.be"}, {"index": "190", "colour": "orange", "code": "    def read(self, filenames):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "191", "colour": "orange", "code": "        if isinstance(filenames, basestring):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "192", "colour": "orange", "code": "            filenames = [filenames]\n", "error": "none", "author": "tom@organisms.be"}, {"index": "193", "colour": "orange", "code": "        for filename in filenames:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "194", "colour": "orange", "code": "            # try:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "195", "colour": "orange", "code": "            #     fp = open(filename)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "196", "colour": "orange", "code": "            # except IOError:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "197", "colour": "orange", "code": "            #     continue\n", "error": "none", "author": "tom@organisms.be"}, {"index": "198", "colour": "orange", "code": "            fp = open(filename)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "199", "colour": "orange", "code": "            try:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "200", "colour": "orange", "code": "                self._read(fp, filename)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "201", "colour": "orange", "code": "            finally:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "202", "colour": "orange", "code": "                fp.close()\n", "error": "none", "author": "tom@organisms.be"}, {"index": "203", "colour": "orange", "code": "    \n", "error": "none", "author": "tom@organisms.be"}, {"index": "204", "colour": "green", "code": "    def as_dict(self, raw=False, vars=None):\n", "error": "W", "author": "tom@organisms.be"}, {"index": "205", "colour": "orange", "code": "        \"\"\"Convert an INI file to a dictionary\"\"\"\n", "error": "none", "author": "tom@organisms.be"}, {"index": "206", "colour": "orange", "code": "        # Load INI file into a dict\n", "error": "none", "author": "tom@organisms.be"}, {"index": "207", "colour": "orange", "code": "        result = {}\n", "error": "none", "author": "tom@organisms.be"}, {"index": "208", "colour": "orange", "code": "        for section in self.sections():\n", "error": "none", "author": "tom@organisms.be"}, {"index": "209", "colour": "orange", "code": "            if section not in result:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "210", "colour": "orange", "code": "                result[section] = {}\n", "error": "none", "author": "tom@organisms.be"}, {"index": "211", "colour": "orange", "code": "            for option in self.options(section):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "212", "colour": "orange", "code": "                value = self.get(section, option, raw=raw, vars=vars)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "213", "colour": "orange", "code": "                try:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "214", "colour": "orange", "code": "                    value = unrepr(value)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "215", "colour": "orange", "code": "                except Exception:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "216", "colour": "orange", "code": "                    x = sys.exc_info()[1]\n", "error": "none", "author": "tom@organisms.be"}, {"index": "217", "colour": "orange", "code": "                    msg = (\"Config error in section: %r, option: %r, \"\n", "error": "none", "author": "tom@organisms.be"}, {"index": "218", "colour": "orange", "code": "                           \"value: %r. Config values must be valid Python.\" %\n", "error": "none", "author": "tom@organisms.be"}, {"index": "219", "colour": "orange", "code": "                           (section, option, value))\n", "error": "none", "author": "tom@organisms.be"}, {"index": "220", "colour": "orange", "code": "                    raise ValueError(msg, x.__class__.__name__, x.args)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "221", "colour": "orange", "code": "                result[section][option] = value\n", "error": "none", "author": "tom@organisms.be"}, {"index": "222", "colour": "orange", "code": "        return result\n", "error": "none", "author": "tom@organisms.be"}, {"index": "223", "colour": "orange", "code": "    \n", "error": "none", "author": "tom@organisms.be"}, {"index": "224", "colour": "green", "code": "    def dict_from_file(self, file):\n", "error": "W", "author": "tom@organisms.be"}, {"index": "225", "colour": "orange", "code": "        if hasattr(file, 'read'):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "226", "colour": "orange", "code": "            self.readfp(file)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "227", "colour": "orange", "code": "        else:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "228", "colour": "orange", "code": "            self.read(file)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "229", "colour": "orange", "code": "        return self.as_dict()\n", "error": "none", "author": "tom@organisms.be"}, {"index": "230", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "231", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "232", "colour": "orange", "code": "# public domain \"unrepr\" implementation, found on the web and then improved.\n", "error": "none", "author": "tom@organisms.be"}, {"index": "233", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "234", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "235", "colour": "green", "code": "class _Builder2:\n", "error": "W", "author": "tom@organisms.be"}, {"index": "236", "colour": "orange", "code": "    \n", "error": "none", "author": "tom@organisms.be"}, {"index": "237", "colour": "orange", "code": "    def build(self, o):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "238", "colour": "orange", "code": "        m = getattr(self, 'build_' + o.__class__.__name__, None)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "239", "colour": "orange", "code": "        if m is None:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "240", "colour": "orange", "code": "            raise TypeError(\"unrepr does not recognize %s\" %\n", "error": "none", "author": "tom@organisms.be"}, {"index": "241", "colour": "orange", "code": "                            repr(o.__class__.__name__))\n", "error": "none", "author": "tom@organisms.be"}, {"index": "242", "colour": "orange", "code": "        return m(o)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "243", "colour": "orange", "code": "    \n", "error": "none", "author": "tom@organisms.be"}, {"index": "244", "colour": "blue", "code": "    def astnode(self, s):\n", "error": "R", "author": "tom@organisms.be"}, {"index": "245", "colour": "orange", "code": "        \"\"\"Return a Python2 ast Node compiled from a string.\"\"\"\n", "error": "none", "author": "tom@organisms.be"}, {"index": "246", "colour": "orange", "code": "        try:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "247", "colour": "orange", "code": "            import compiler\n", "error": "none", "author": "tom@organisms.be"}, {"index": "248", "colour": "orange", "code": "        except ImportError:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "249", "colour": "orange", "code": "            # Fallback to eval when compiler package is not available,\n", "error": "none", "author": "tom@organisms.be"}, {"index": "250", "colour": "orange", "code": "            # e.g. IronPython 1.0.\n", "error": "none", "author": "tom@organisms.be"}, {"index": "251", "colour": "green", "code": "            return eval(s)\n", "error": "W", "author": "tom@organisms.be"}, {"index": "252", "colour": "orange", "code": "        \n", "error": "none", "author": "tom@organisms.be"}, {"index": "253", "colour": "orange", "code": "        p = compiler.parse(\"__tempvalue__ = \" + s)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "254", "colour": "orange", "code": "        return p.getChildren()[1].getChildren()[0].getChildren()[1]\n", "error": "none", "author": "tom@organisms.be"}, {"index": "255", "colour": "orange", "code": "    \n", "error": "none", "author": "tom@organisms.be"}, {"index": "256", "colour": "orange", "code": "    def build_Subscript(self, o):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "257", "colour": "green", "code": "        expr, flags, subs = o.getChildren()\n", "error": "W", "author": "tom@organisms.be"}, {"index": "258", "colour": "orange", "code": "        expr = self.build(expr)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "259", "colour": "orange", "code": "        subs = self.build(subs)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "260", "colour": "orange", "code": "        return expr[subs]\n", "error": "none", "author": "tom@organisms.be"}, {"index": "261", "colour": "orange", "code": "    \n", "error": "none", "author": "tom@organisms.be"}, {"index": "262", "colour": "orange", "code": "    def build_CallFunc(self, o):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "263", "colour": "green", "code": "        children = map(self.build, o.getChildren())\n", "error": "W", "author": "tom@organisms.be"}, {"index": "264", "colour": "orange", "code": "        callee = children.pop(0)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "265", "colour": "orange", "code": "        kwargs = children.pop() or {}\n", "error": "none", "author": "tom@organisms.be"}, {"index": "266", "colour": "orange", "code": "        starargs = children.pop() or ()\n", "error": "none", "author": "tom@organisms.be"}, {"index": "267", "colour": "orange", "code": "        args = tuple(children) + tuple(starargs)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "268", "colour": "green", "code": "        return callee(*args, **kwargs)\n", "error": "W", "author": "tom@organisms.be"}, {"index": "269", "colour": "orange", "code": "    \n", "error": "none", "author": "tom@organisms.be"}, {"index": "270", "colour": "orange", "code": "    def build_List(self, o):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "271", "colour": "green", "code": "        return map(self.build, o.getChildren())\n", "error": "W", "author": "tom@organisms.be"}, {"index": "272", "colour": "orange", "code": "    \n", "error": "none", "author": "tom@organisms.be"}, {"index": "273", "colour": "blue", "code": "    def build_Const(self, o):\n", "error": "R", "author": "tom@organisms.be"}, {"index": "274", "colour": "orange", "code": "        return o.value\n", "error": "none", "author": "tom@organisms.be"}, {"index": "275", "colour": "orange", "code": "    \n", "error": "none", "author": "tom@organisms.be"}, {"index": "276", "colour": "orange", "code": "    def build_Dict(self, o):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "277", "colour": "orange", "code": "        d = {}\n", "error": "none", "author": "tom@organisms.be"}, {"index": "278", "colour": "green", "code": "        i = iter(map(self.build, o.getChildren()))\n", "error": "W", "author": "tom@organisms.be"}, {"index": "279", "colour": "orange", "code": "        for el in i:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "280", "colour": "orange", "code": "            d[el] = i.next()\n", "error": "none", "author": "tom@organisms.be"}, {"index": "281", "colour": "orange", "code": "        return d\n", "error": "none", "author": "tom@organisms.be"}, {"index": "282", "colour": "orange", "code": "    \n", "error": "none", "author": "tom@organisms.be"}, {"index": "283", "colour": "orange", "code": "    def build_Tuple(self, o):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "284", "colour": "orange", "code": "        return tuple(self.build_List(o))\n", "error": "none", "author": "tom@organisms.be"}, {"index": "285", "colour": "orange", "code": "    \n", "error": "none", "author": "tom@organisms.be"}, {"index": "286", "colour": "blue", "code": "    def build_Name(self, o):\n", "error": "R", "author": "tom@organisms.be"}, {"index": "287", "colour": "orange", "code": "        name = o.name\n", "error": "none", "author": "tom@organisms.be"}, {"index": "288", "colour": "orange", "code": "        if name == 'None':\n", "error": "none", "author": "tom@organisms.be"}, {"index": "289", "colour": "orange", "code": "            return None\n", "error": "none", "author": "tom@organisms.be"}, {"index": "290", "colour": "orange", "code": "        if name == 'True':\n", "error": "none", "author": "tom@organisms.be"}, {"index": "291", "colour": "orange", "code": "            return True\n", "error": "none", "author": "tom@organisms.be"}, {"index": "292", "colour": "orange", "code": "        if name == 'False':\n", "error": "none", "author": "tom@organisms.be"}, {"index": "293", "colour": "orange", "code": "            return False\n", "error": "none", "author": "tom@organisms.be"}, {"index": "294", "colour": "orange", "code": "        \n", "error": "none", "author": "tom@organisms.be"}, {"index": "295", "colour": "orange", "code": "        # See if the Name is a package or module. If it is, import it.\n", "error": "none", "author": "tom@organisms.be"}, {"index": "296", "colour": "orange", "code": "        try:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "297", "colour": "orange", "code": "            return modules(name)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "298", "colour": "orange", "code": "        except ImportError:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "299", "colour": "orange", "code": "            pass\n", "error": "none", "author": "tom@organisms.be"}, {"index": "300", "colour": "orange", "code": "        \n", "error": "none", "author": "tom@organisms.be"}, {"index": "301", "colour": "orange", "code": "        # See if the Name is in builtins.\n", "error": "none", "author": "tom@organisms.be"}, {"index": "302", "colour": "orange", "code": "        try:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "303", "colour": "orange", "code": "            return getattr(builtins, name)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "304", "colour": "orange", "code": "        except AttributeError:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "305", "colour": "orange", "code": "            pass\n", "error": "none", "author": "tom@organisms.be"}, {"index": "306", "colour": "orange", "code": "        \n", "error": "none", "author": "tom@organisms.be"}, {"index": "307", "colour": "orange", "code": "        raise TypeError(\"unrepr could not resolve the name %s\" % repr(name))\n", "error": "none", "author": "tom@organisms.be"}, {"index": "308", "colour": "orange", "code": "    \n", "error": "none", "author": "tom@organisms.be"}, {"index": "309", "colour": "orange", "code": "    def build_Add(self, o):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "310", "colour": "green", "code": "        left, right = map(self.build, o.getChildren())\n", "error": "W", "author": "tom@organisms.be"}, {"index": "311", "colour": "orange", "code": "        return left + right\n", "error": "none", "author": "tom@organisms.be"}, {"index": "312", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "313", "colour": "orange", "code": "    def build_Mul(self, o):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "314", "colour": "green", "code": "        left, right = map(self.build, o.getChildren())\n", "error": "W", "author": "tom@organisms.be"}, {"index": "315", "colour": "orange", "code": "        return left * right\n", "error": "none", "author": "tom@organisms.be"}, {"index": "316", "colour": "orange", "code": "    \n", "error": "none", "author": "tom@organisms.be"}, {"index": "317", "colour": "orange", "code": "    def build_Getattr(self, o):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "318", "colour": "orange", "code": "        parent = self.build(o.expr)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "319", "colour": "orange", "code": "        return getattr(parent, o.attrname)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "320", "colour": "orange", "code": "    \n", "error": "none", "author": "tom@organisms.be"}, {"index": "321", "colour": "blue", "code": "    def build_NoneType(self, o):\n", "error": "R", "author": "tom@organisms.be"}, {"index": "322", "colour": "orange", "code": "        return None\n", "error": "none", "author": "tom@organisms.be"}, {"index": "323", "colour": "orange", "code": "    \n", "error": "none", "author": "tom@organisms.be"}, {"index": "324", "colour": "orange", "code": "    def build_UnarySub(self, o):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "325", "colour": "orange", "code": "        return -self.build(o.getChildren()[0])\n", "error": "none", "author": "tom@organisms.be"}, {"index": "326", "colour": "orange", "code": "    \n", "error": "none", "author": "tom@organisms.be"}, {"index": "327", "colour": "orange", "code": "    def build_UnaryAdd(self, o):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "328", "colour": "orange", "code": "        return self.build(o.getChildren()[0])\n", "error": "none", "author": "tom@organisms.be"}, {"index": "329", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "330", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "331", "colour": "green", "code": "class _Builder3:\n", "error": "W", "author": "tom@organisms.be"}, {"index": "332", "colour": "orange", "code": "    \n", "error": "none", "author": "tom@organisms.be"}, {"index": "333", "colour": "orange", "code": "    def build(self, o):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "334", "colour": "orange", "code": "        m = getattr(self, 'build_' + o.__class__.__name__, None)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "335", "colour": "orange", "code": "        if m is None:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "336", "colour": "orange", "code": "            raise TypeError(\"unrepr does not recognize %s\" %\n", "error": "none", "author": "tom@organisms.be"}, {"index": "337", "colour": "orange", "code": "                            repr(o.__class__.__name__))\n", "error": "none", "author": "tom@organisms.be"}, {"index": "338", "colour": "orange", "code": "        return m(o)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "339", "colour": "orange", "code": "    \n", "error": "none", "author": "tom@organisms.be"}, {"index": "340", "colour": "blue", "code": "    def astnode(self, s):\n", "error": "R", "author": "tom@organisms.be"}, {"index": "341", "colour": "orange", "code": "        \"\"\"Return a Python3 ast Node compiled from a string.\"\"\"\n", "error": "none", "author": "tom@organisms.be"}, {"index": "342", "colour": "orange", "code": "        try:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "343", "colour": "orange", "code": "            import ast\n", "error": "none", "author": "tom@organisms.be"}, {"index": "344", "colour": "orange", "code": "        except ImportError:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "345", "colour": "orange", "code": "            # Fallback to eval when ast package is not available,\n", "error": "none", "author": "tom@organisms.be"}, {"index": "346", "colour": "orange", "code": "            # e.g. IronPython 1.0.\n", "error": "none", "author": "tom@organisms.be"}, {"index": "347", "colour": "green", "code": "            return eval(s)\n", "error": "W", "author": "tom@organisms.be"}, {"index": "348", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "349", "colour": "orange", "code": "        p = ast.parse(\"__tempvalue__ = \" + s)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "350", "colour": "orange", "code": "        return p.body[0].value\n", "error": "none", "author": "tom@organisms.be"}, {"index": "351", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "352", "colour": "orange", "code": "    def build_Subscript(self, o):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "353", "colour": "orange", "code": "        return self.build(o.value)[self.build(o.slice)]\n", "error": "none", "author": "tom@organisms.be"}, {"index": "354", "colour": "orange", "code": "    \n", "error": "none", "author": "tom@organisms.be"}, {"index": "355", "colour": "orange", "code": "    def build_Index(self, o):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "356", "colour": "orange", "code": "        return self.build(o.value)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "357", "colour": "orange", "code": "    \n", "error": "none", "author": "tom@organisms.be"}, {"index": "358", "colour": "orange", "code": "    def build_Call(self, o):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "359", "colour": "orange", "code": "        callee = self.build(o.func)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "360", "colour": "orange", "code": "        \n", "error": "none", "author": "tom@organisms.be"}, {"index": "361", "colour": "orange", "code": "        if o.args is None:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "362", "colour": "orange", "code": "            args = ()\n", "error": "none", "author": "tom@organisms.be"}, {"index": "363", "colour": "orange", "code": "        else: \n", "error": "none", "author": "tom@organisms.be"}, {"index": "364", "colour": "orange", "code": "            args = tuple([self.build(a) for a in o.args]) \n", "error": "none", "author": "tom@organisms.be"}, {"index": "365", "colour": "orange", "code": "        \n", "error": "none", "author": "tom@organisms.be"}, {"index": "366", "colour": "orange", "code": "        if o.starargs is None:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "367", "colour": "orange", "code": "            starargs = ()\n", "error": "none", "author": "tom@organisms.be"}, {"index": "368", "colour": "orange", "code": "        else:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "369", "colour": "orange", "code": "            starargs = self.build(o.starargs)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "370", "colour": "orange", "code": "        \n", "error": "none", "author": "tom@organisms.be"}, {"index": "371", "colour": "orange", "code": "        if o.kwargs is None:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "372", "colour": "orange", "code": "            kwargs = {}\n", "error": "none", "author": "tom@organisms.be"}, {"index": "373", "colour": "orange", "code": "        else:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "374", "colour": "orange", "code": "            kwargs = self.build(o.kwargs)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "375", "colour": "orange", "code": "        \n", "error": "none", "author": "tom@organisms.be"}, {"index": "376", "colour": "green", "code": "        return callee(*(args + starargs), **kwargs)\n", "error": "W", "author": "tom@organisms.be"}, {"index": "377", "colour": "orange", "code": "    \n", "error": "none", "author": "tom@organisms.be"}, {"index": "378", "colour": "orange", "code": "    def build_List(self, o):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "379", "colour": "green", "code": "        return list(map(self.build, o.elts))\n", "error": "W", "author": "tom@organisms.be"}, {"index": "380", "colour": "orange", "code": "    \n", "error": "none", "author": "tom@organisms.be"}, {"index": "381", "colour": "blue", "code": "    def build_Str(self, o):\n", "error": "R", "author": "tom@organisms.be"}, {"index": "382", "colour": "orange", "code": "        return o.s\n", "error": "none", "author": "tom@organisms.be"}, {"index": "383", "colour": "orange", "code": "    \n", "error": "none", "author": "tom@organisms.be"}, {"index": "384", "colour": "blue", "code": "    def build_Num(self, o):\n", "error": "R", "author": "tom@organisms.be"}, {"index": "385", "colour": "orange", "code": "        return o.n\n", "error": "none", "author": "tom@organisms.be"}, {"index": "386", "colour": "orange", "code": "    \n", "error": "none", "author": "tom@organisms.be"}, {"index": "387", "colour": "orange", "code": "    def build_Dict(self, o):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "388", "colour": "orange", "code": "        return dict([(self.build(k), self.build(v))\n", "error": "none", "author": "tom@organisms.be"}, {"index": "389", "colour": "orange", "code": "                     for k, v in zip(o.keys, o.values)])\n", "error": "none", "author": "tom@organisms.be"}, {"index": "390", "colour": "orange", "code": "    \n", "error": "none", "author": "tom@organisms.be"}, {"index": "391", "colour": "orange", "code": "    def build_Tuple(self, o):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "392", "colour": "orange", "code": "        return tuple(self.build_List(o))\n", "error": "none", "author": "tom@organisms.be"}, {"index": "393", "colour": "orange", "code": "    \n", "error": "none", "author": "tom@organisms.be"}, {"index": "394", "colour": "blue", "code": "    def build_Name(self, o):\n", "error": "R", "author": "tom@organisms.be"}, {"index": "395", "colour": "orange", "code": "        name = o.id\n", "error": "none", "author": "tom@organisms.be"}, {"index": "396", "colour": "orange", "code": "        if name == 'None':\n", "error": "none", "author": "tom@organisms.be"}, {"index": "397", "colour": "orange", "code": "            return None\n", "error": "none", "author": "tom@organisms.be"}, {"index": "398", "colour": "orange", "code": "        if name == 'True':\n", "error": "none", "author": "tom@organisms.be"}, {"index": "399", "colour": "orange", "code": "            return True\n", "error": "none", "author": "tom@organisms.be"}, {"index": "400", "colour": "orange", "code": "        if name == 'False':\n", "error": "none", "author": "tom@organisms.be"}, {"index": "401", "colour": "orange", "code": "            return False\n", "error": "none", "author": "tom@organisms.be"}, {"index": "402", "colour": "orange", "code": "        \n", "error": "none", "author": "tom@organisms.be"}, {"index": "403", "colour": "orange", "code": "        # See if the Name is a package or module. If it is, import it.\n", "error": "none", "author": "tom@organisms.be"}, {"index": "404", "colour": "orange", "code": "        try:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "405", "colour": "orange", "code": "            return modules(name)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "406", "colour": "orange", "code": "        except ImportError:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "407", "colour": "orange", "code": "            pass\n", "error": "none", "author": "tom@organisms.be"}, {"index": "408", "colour": "orange", "code": "        \n", "error": "none", "author": "tom@organisms.be"}, {"index": "409", "colour": "orange", "code": "        # See if the Name is in builtins.\n", "error": "none", "author": "tom@organisms.be"}, {"index": "410", "colour": "orange", "code": "        try:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "411", "colour": "green", "code": "            import builtins\n", "error": "W", "author": "tom@organisms.be"}, {"index": "412", "colour": "orange", "code": "            return getattr(builtins, name)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "413", "colour": "orange", "code": "        except AttributeError:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "414", "colour": "orange", "code": "            pass\n", "error": "none", "author": "tom@organisms.be"}, {"index": "415", "colour": "orange", "code": "        \n", "error": "none", "author": "tom@organisms.be"}, {"index": "416", "colour": "orange", "code": "        raise TypeError(\"unrepr could not resolve the name %s\" % repr(name))\n", "error": "none", "author": "tom@organisms.be"}, {"index": "417", "colour": "orange", "code": "        \n", "error": "none", "author": "tom@organisms.be"}, {"index": "418", "colour": "orange", "code": "    def build_UnaryOp(self, o):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "419", "colour": "green", "code": "        op, operand = map(self.build, [o.op, o.operand])\n", "error": "W", "author": "tom@organisms.be"}, {"index": "420", "colour": "orange", "code": "        return op(operand)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "421", "colour": "orange", "code": "    \n", "error": "none", "author": "tom@organisms.be"}, {"index": "422", "colour": "orange", "code": "    def build_BinOp(self, o):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "423", "colour": "green", "code": "        left, op, right = map(self.build, [o.left, o.op, o.right]) \n", "error": "W", "author": "tom@organisms.be"}, {"index": "424", "colour": "orange", "code": "        return op(left, right)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "425", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "426", "colour": "blue", "code": "    def build_Add(self, o):\n", "error": "R", "author": "tom@organisms.be"}, {"index": "427", "colour": "orange", "code": "        return _operator.add\n", "error": "none", "author": "tom@organisms.be"}, {"index": "428", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "429", "colour": "blue", "code": "    def build_Mult(self, o):\n", "error": "R", "author": "tom@organisms.be"}, {"index": "430", "colour": "orange", "code": "        return _operator.mul\n", "error": "none", "author": "tom@organisms.be"}, {"index": "431", "colour": "orange", "code": "        \n", "error": "none", "author": "tom@organisms.be"}, {"index": "432", "colour": "blue", "code": "    def build_USub(self, o):\n", "error": "R", "author": "tom@organisms.be"}, {"index": "433", "colour": "orange", "code": "        return _operator.neg\n", "error": "none", "author": "tom@organisms.be"}, {"index": "434", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "435", "colour": "orange", "code": "    def build_Attribute(self, o):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "436", "colour": "orange", "code": "        parent = self.build(o.value)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "437", "colour": "orange", "code": "        return getattr(parent, o.attr)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "438", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "439", "colour": "blue", "code": "    def build_NoneType(self, o):\n", "error": "R", "author": "tom@organisms.be"}, {"index": "440", "colour": "orange", "code": "        return None\n", "error": "none", "author": "tom@organisms.be"}, {"index": "441", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "442", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "443", "colour": "orange", "code": "def unrepr(s):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "444", "colour": "orange", "code": "    \"\"\"Return a Python object compiled from a string.\"\"\"\n", "error": "none", "author": "tom@organisms.be"}, {"index": "445", "colour": "orange", "code": "    if not s:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "446", "colour": "orange", "code": "        return s\n", "error": "none", "author": "tom@organisms.be"}, {"index": "447", "colour": "orange", "code": "    if sys.version_info < (3, 0):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "448", "colour": "orange", "code": "        b = _Builder2()\n", "error": "none", "author": "tom@organisms.be"}, {"index": "449", "colour": "orange", "code": "    else:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "450", "colour": "orange", "code": "        b = _Builder3()\n", "error": "none", "author": "tom@organisms.be"}, {"index": "451", "colour": "orange", "code": "    obj = b.astnode(s)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "452", "colour": "orange", "code": "    return b.build(obj)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "453", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "454", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "455", "colour": "orange", "code": "def modules(modulePath):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "456", "colour": "orange", "code": "    \"\"\"Load a module and retrieve a reference to that module.\"\"\"\n", "error": "none", "author": "tom@organisms.be"}, {"index": "457", "colour": "orange", "code": "    try:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "458", "colour": "orange", "code": "        mod = sys.modules[modulePath]\n", "error": "none", "author": "tom@organisms.be"}, {"index": "459", "colour": "orange", "code": "        if mod is None:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "460", "colour": "orange", "code": "            raise KeyError()\n", "error": "none", "author": "tom@organisms.be"}, {"index": "461", "colour": "orange", "code": "    except KeyError:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "462", "colour": "orange", "code": "        __import__(modulePath)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "463", "colour": "orange", "code": "        mod = sys.modules[modulePath]   \n", "error": "none", "author": "tom@organisms.be"}, {"index": "464", "colour": "orange", "code": "    return mod\n", "error": "none", "author": "tom@organisms.be"}, {"index": "465", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "466", "colour": "orange", "code": "def attributes(full_attribute_name):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "467", "colour": "orange", "code": "    \"\"\"Load a module and retrieve an attribute of that module.\"\"\"\n", "error": "none", "author": "tom@organisms.be"}, {"index": "468", "colour": "orange", "code": "    \n", "error": "none", "author": "tom@organisms.be"}, {"index": "469", "colour": "orange", "code": "    # Parse out the path, module, and attribute\n", "error": "none", "author": "tom@organisms.be"}, {"index": "470", "colour": "orange", "code": "    last_dot = full_attribute_name.rfind(\".\")\n", "error": "none", "author": "tom@organisms.be"}, {"index": "471", "colour": "orange", "code": "    attr_name = full_attribute_name[last_dot + 1:]\n", "error": "none", "author": "tom@organisms.be"}, {"index": "472", "colour": "orange", "code": "    mod_path = full_attribute_name[:last_dot]\n", "error": "none", "author": "tom@organisms.be"}, {"index": "473", "colour": "orange", "code": "    \n", "error": "none", "author": "tom@organisms.be"}, {"index": "474", "colour": "orange", "code": "    mod = modules(mod_path)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "475", "colour": "orange", "code": "    # Let an AttributeError propagate outward.\n", "error": "none", "author": "tom@organisms.be"}, {"index": "476", "colour": "orange", "code": "    try:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "477", "colour": "orange", "code": "        attr = getattr(mod, attr_name)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "478", "colour": "orange", "code": "    except AttributeError:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "479", "colour": "orange", "code": "        raise AttributeError(\"'%s' object has no attribute '%s'\"\n", "error": "none", "author": "tom@organisms.be"}, {"index": "480", "colour": "orange", "code": "                             % (mod_path, attr_name))\n", "error": "none", "author": "tom@organisms.be"}, {"index": "481", "colour": "orange", "code": "    \n", "error": "none", "author": "tom@organisms.be"}, {"index": "482", "colour": "orange", "code": "    # Return a reference to the attribute.\n", "error": "none", "author": "tom@organisms.be"}, {"index": "483", "colour": "orange", "code": "    return attr\n", "error": "none", "author": "tom@organisms.be"}, {"index": "484", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "485", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}]}