{"path": "/home/asumal/git/cs410/pattern/pattern/text/en/wordnet/pywordnet/concordance.py", "lines": [{"index": "1", "colour": "orange", "code": "# some accessing of the semantic concordance data for wordnet 1.6\r# by Des Berry, berry@ais.it\r\rimport string, os\rfrom wordnet import binarySearchFile\r\r# Sample entries in the 'taglist' file\r#   ordinary%1:18:01:: 1 br-a01:78,1;86,1;88,4\r#   ordered%5:00:00:organized:01 2 br-j23:6,14;13,32;66,12\r# where the general form is:\r#   lemma%ss_type:lex_filenum:lex_id:head_word:head_id sense_number\r[location_list]\r#   location_list: filename:sent_num,word_num[;sent_num,word_num...]\r\rss_type = (\"NOUN\", \"VERB\", \"ADJECTIVE\", \"ADVERB\", \"ADJECTIVE SATELLITE\")\r\r# given a sentence number (and the contents of a semantic concordance file)\r# return a string of words as the sentence\rdef find_sentence(snum, msg):\r  str = \"<s snum=%s>\" % snum\r  s = string.find(msg, str)\r  if s < 0:\r    return \"<Unknown>\"\r  s = s + len(str)\r  sentence = \"\"\r  tag = \"\"\r  while 1:\r    if msg[s] == '\\n':\r      s = s + 1\r    n = string.find(msg, '<', s)\r    if n < 0:\r      break\r    if n - s != 0:\r      if tag == \"w\" and msg[s] != \"'\" and len(sentence) > 0: # word form\r        sentence = sentence + \" \"\r      sentence = sentence + msg[s:n]\r    e = string.find(msg, '>', n)\r    if e < 0:\r      break\r    tag = msg[n+1]\r    if tag == \"/\": #check for ending sentence\r      if msg[n+2] == 's':\r        #end of sentence\r        break\r    s = e + 1\r  return sentence\r\r# given a taglist sense (one line of the tagfile) and where to find the tagfile (root)\r# return a tuple of\r#  symset type ('1' .. '5')\r#  sense (numeric character string)\r#  list of sentences (constructed from the taglist)\rdef tagsentence(tag, root):\r  s = string.find(tag, '%')\r  sentence = []\r  type = tag[s+1]\r  c = s\r  for i in range(0,4):\r    c = string.find(tag, ':', c + 1)\r  c = string.find(tag, ' ', c + 1)\r  sense = tag[c+1]\r  c = c + 3\r  while 1:\r    d = string.find(tag, ' ', c) # file separator\r    if d < 0:\r      loclist = tag[c:]\r    else:\r      loclist = tag[c:d]\r      c = d + 1\r\r    e = string.find(loclist, ':')\r    filename = loclist[:e]\r    fh = open(root + filename, \"rb\")\r    msg = fh.read()\r    fh.close()\r\r    while 1:\r      e = e + 1\r      f = string.find(loclist, ';', e)\r      if f < 0:\r        sent_word = loclist[e:]\r      else:\r        sent_word = loclist[e:f]\r        e = f\r\r      g = string.find(sent_word, ',')\r      sent = sent_word[:g]\r\r      sentence.append(find_sentence(sent, msg))\r\r      if f < 0:\r        break\r\r    if d < 0:\r      break\r  return (type, sense, sentence)\r\r# given a word to search for and where to find the files (root)\r# displays the information\r# This could be changed to display in different ways!\rdef sentences(word, root):\r  cache = {}\r  file = open(root + \"taglist\", \"rb\")\r  key = word + \"%\"\r  keylen = len(key)\r  binarySearchFile(file, key + \" \", cache, 10)\r  print \"Word '%s'\" % word\r  while 1:\r    line = file.readline()\r    if line[:keylen] != key:\r      break\r    type, sense, sentence = tagsentence(line, root + \"tagfiles/\")\r    print ss_type[string.atoi(type) - 1], sense\r    for sent in sentence:\r      print sent\r\r\rdef _test(word, corpus, base):\r  print corpus\r  sentences(\"ordinary\", base + corpus + \"/\")\r\rif __name__ == '__main__':\r  base = \"C:/win16/dict/semcor/\"\r  word = \"ordinary\"\r  _test(word, \"brown1\", base)\r  _test(word, \"brown2\", base)\r  _test(word, \"brownv\", base)\r", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}]}