{"path": "/home/asumal/git/cs410/pattern/pattern/server/cherrypy/cherrypy/process/servers.py", "lines": [[{"index": "1", "colour": "green", "code": "\"\"\"\n", "error": "W", "author": "tom@organisms.be"}, {"index": "2", "colour": "orange", "code": "Starting in CherryPy 3.1, cherrypy.server is implemented as an\n", "error": "none", "author": "tom@organisms.be"}, {"index": "3", "colour": "orange", "code": ":ref:`Engine Plugin<plugins>`. It's an instance of\n", "error": "none", "author": "tom@organisms.be"}, {"index": "4", "colour": "orange", "code": ":class:`cherrypy._cpserver.Server`, which is a subclass of\n", "error": "none", "author": "tom@organisms.be"}, {"index": "5", "colour": "orange", "code": ":class:`cherrypy.process.servers.ServerAdapter`. The ``ServerAdapter`` class\n", "error": "none", "author": "tom@organisms.be"}, {"index": "6", "colour": "orange", "code": "is designed to control other servers, as well.\n", "error": "none", "author": "tom@organisms.be"}, {"index": "7", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "8", "colour": "orange", "code": "Multiple servers/ports\n", "error": "none", "author": "tom@organisms.be"}, {"index": "9", "colour": "orange", "code": "======================\n", "error": "none", "author": "tom@organisms.be"}, {"index": "10", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "11", "colour": "orange", "code": "If you need to start more than one HTTP server (to serve on multiple ports, or\n", "error": "none", "author": "tom@organisms.be"}, {"index": "12", "colour": "orange", "code": "protocols, etc.), you can manually register each one and then start them all\n", "error": "none", "author": "tom@organisms.be"}, {"index": "13", "colour": "orange", "code": "with engine.start::\n", "error": "none", "author": "tom@organisms.be"}, {"index": "14", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "15", "colour": "orange", "code": "    s1 = ServerAdapter(cherrypy.engine, MyWSGIServer(host='0.0.0.0', port=80))\n", "error": "none", "author": "tom@organisms.be"}, {"index": "16", "colour": "orange", "code": "    s2 = ServerAdapter(cherrypy.engine, another.HTTPServer(host='127.0.0.1', SSL=True))\n", "error": "none", "author": "tom@organisms.be"}, {"index": "17", "colour": "orange", "code": "    s1.subscribe()\n", "error": "none", "author": "tom@organisms.be"}, {"index": "18", "colour": "orange", "code": "    s2.subscribe()\n", "error": "none", "author": "tom@organisms.be"}, {"index": "19", "colour": "orange", "code": "    cherrypy.engine.start()\n", "error": "none", "author": "tom@organisms.be"}, {"index": "20", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "21", "colour": "orange", "code": ".. index:: SCGI\n", "error": "none", "author": "tom@organisms.be"}, {"index": "22", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "23", "colour": "orange", "code": "FastCGI/SCGI\n", "error": "none", "author": "tom@organisms.be"}, {"index": "24", "colour": "orange", "code": "============\n", "error": "none", "author": "tom@organisms.be"}, {"index": "25", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "26", "colour": "orange", "code": "There are also Flup\\ **F**\\ CGIServer and Flup\\ **S**\\ CGIServer classes in\n", "error": "none", "author": "tom@organisms.be"}, {"index": "27", "colour": "orange", "code": ":mod:`cherrypy.process.servers`. To start an fcgi server, for example,\n", "error": "none", "author": "tom@organisms.be"}, {"index": "28", "colour": "orange", "code": "wrap an instance of it in a ServerAdapter::\n", "error": "none", "author": "tom@organisms.be"}, {"index": "29", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "30", "colour": "orange", "code": "    addr = ('0.0.0.0', 4000)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "31", "colour": "orange", "code": "    f = servers.FlupFCGIServer(application=cherrypy.tree, bindAddress=addr)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "32", "colour": "orange", "code": "    s = servers.ServerAdapter(cherrypy.engine, httpserver=f, bind_addr=addr)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "33", "colour": "orange", "code": "    s.subscribe()\n", "error": "none", "author": "tom@organisms.be"}, {"index": "34", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "35", "colour": "orange", "code": "The :doc:`cherryd</deployguide/cherryd>` startup script will do the above for\n", "error": "none", "author": "tom@organisms.be"}, {"index": "36", "colour": "orange", "code": "you via its `-f` flag.\n", "error": "none", "author": "tom@organisms.be"}, {"index": "37", "colour": "orange", "code": "Note that you need to download and install `flup <http://trac.saddi.com/flup>`_\n", "error": "none", "author": "tom@organisms.be"}, {"index": "38", "colour": "orange", "code": "yourself, whether you use ``cherryd`` or not.\n", "error": "none", "author": "tom@organisms.be"}, {"index": "39", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "40", "colour": "orange", "code": ".. _fastcgi:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "41", "colour": "orange", "code": ".. index:: FastCGI\n", "error": "none", "author": "tom@organisms.be"}, {"index": "42", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "43", "colour": "orange", "code": "FastCGI\n", "error": "none", "author": "tom@organisms.be"}, {"index": "44", "colour": "orange", "code": "-------\n", "error": "none", "author": "tom@organisms.be"}, {"index": "45", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "46", "colour": "orange", "code": "A very simple setup lets your cherry run with FastCGI.\n", "error": "none", "author": "tom@organisms.be"}, {"index": "47", "colour": "orange", "code": "You just need the flup library,\n", "error": "none", "author": "tom@organisms.be"}, {"index": "48", "colour": "orange", "code": "plus a running Apache server (with ``mod_fastcgi``) or lighttpd server.\n", "error": "none", "author": "tom@organisms.be"}, {"index": "49", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "50", "colour": "orange", "code": "CherryPy code\n", "error": "none", "author": "tom@organisms.be"}, {"index": "51", "colour": "orange", "code": "^^^^^^^^^^^^^\n", "error": "none", "author": "tom@organisms.be"}, {"index": "52", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "53", "colour": "orange", "code": "hello.py::\n", "error": "none", "author": "tom@organisms.be"}, {"index": "54", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "55", "colour": "orange", "code": "    #!/usr/bin/python\n", "error": "none", "author": "tom@organisms.be"}, {"index": "56", "colour": "orange", "code": "    import cherrypy\n", "error": "none", "author": "tom@organisms.be"}, {"index": "57", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "58", "colour": "orange", "code": "    class HelloWorld:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "59", "colour": "orange", "code": "        \\\"\"\"Sample request handler class.\\\"\"\"\n", "error": "none", "author": "tom@organisms.be"}, {"index": "60", "colour": "orange", "code": "        def index(self):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "61", "colour": "orange", "code": "            return \"Hello world!\"\n", "error": "none", "author": "tom@organisms.be"}, {"index": "62", "colour": "orange", "code": "        index.exposed = True\n", "error": "none", "author": "tom@organisms.be"}, {"index": "63", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "64", "colour": "orange", "code": "    cherrypy.tree.mount(HelloWorld())\n", "error": "none", "author": "tom@organisms.be"}, {"index": "65", "colour": "orange", "code": "    # CherryPy autoreload must be disabled for the flup server to work\n", "error": "none", "author": "tom@organisms.be"}, {"index": "66", "colour": "orange", "code": "    cherrypy.config.update({'engine.autoreload_on':False})\n", "error": "none", "author": "tom@organisms.be"}, {"index": "67", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "68", "colour": "orange", "code": "Then run :doc:`/deployguide/cherryd` with the '-f' arg::\n", "error": "none", "author": "tom@organisms.be"}, {"index": "69", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "70", "colour": "orange", "code": "    cherryd -c <myconfig> -d -f -i hello.py\n", "error": "none", "author": "tom@organisms.be"}, {"index": "71", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "72", "colour": "orange", "code": "Apache\n", "error": "none", "author": "tom@organisms.be"}, {"index": "73", "colour": "orange", "code": "^^^^^^\n", "error": "none", "author": "tom@organisms.be"}, {"index": "74", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "75", "colour": "orange", "code": "At the top level in httpd.conf::\n", "error": "none", "author": "tom@organisms.be"}, {"index": "76", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "77", "colour": "orange", "code": "    FastCgiIpcDir /tmp\n", "error": "none", "author": "tom@organisms.be"}, {"index": "78", "colour": "orange", "code": "    FastCgiServer /path/to/cherry.fcgi -idle-timeout 120 -processes 4\n", "error": "none", "author": "tom@organisms.be"}, {"index": "79", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "80", "colour": "orange", "code": "And inside the relevant VirtualHost section::\n", "error": "none", "author": "tom@organisms.be"}, {"index": "81", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "82", "colour": "orange", "code": "    # FastCGI config\n", "error": "none", "author": "tom@organisms.be"}, {"index": "83", "colour": "orange", "code": "    AddHandler fastcgi-script .fcgi\n", "error": "none", "author": "tom@organisms.be"}, {"index": "84", "colour": "orange", "code": "    ScriptAliasMatch (.*$) /path/to/cherry.fcgi$1\n", "error": "none", "author": "tom@organisms.be"}, {"index": "85", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "86", "colour": "orange", "code": "Lighttpd\n", "error": "none", "author": "tom@organisms.be"}, {"index": "87", "colour": "orange", "code": "^^^^^^^^\n", "error": "none", "author": "tom@organisms.be"}, {"index": "88", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "89", "colour": "orange", "code": "For `Lighttpd <http://www.lighttpd.net/>`_ you can follow these\n", "error": "none", "author": "tom@organisms.be"}, {"index": "90", "colour": "orange", "code": "instructions. Within ``lighttpd.conf`` make sure ``mod_fastcgi`` is\n", "error": "none", "author": "tom@organisms.be"}, {"index": "91", "colour": "orange", "code": "active within ``server.modules``. Then, within your ``$HTTP[\"host\"]``\n", "error": "none", "author": "tom@organisms.be"}, {"index": "92", "colour": "orange", "code": "directive, configure your fastcgi script like the following::\n", "error": "none", "author": "tom@organisms.be"}, {"index": "93", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "94", "colour": "orange", "code": "    $HTTP[\"url\"] =~ \"\" {\n", "error": "none", "author": "tom@organisms.be"}, {"index": "95", "colour": "orange", "code": "      fastcgi.server = (\n", "error": "none", "author": "tom@organisms.be"}, {"index": "96", "colour": "orange", "code": "        \"/\" => (\n", "error": "none", "author": "tom@organisms.be"}, {"index": "97", "colour": "orange", "code": "          \"script.fcgi\" => (\n", "error": "none", "author": "tom@organisms.be"}, {"index": "98", "colour": "orange", "code": "            \"bin-path\" => \"/path/to/your/script.fcgi\",\n", "error": "none", "author": "tom@organisms.be"}, {"index": "99", "colour": "orange", "code": "            \"socket\"          => \"/tmp/script.sock\",\n", "error": "none", "author": "tom@organisms.be"}, {"index": "100", "colour": "orange", "code": "            \"check-local\"     => \"disable\",\n", "error": "none", "author": "tom@organisms.be"}, {"index": "101", "colour": "orange", "code": "            \"disable-time\"    => 1,\n", "error": "none", "author": "tom@organisms.be"}, {"index": "102", "colour": "orange", "code": "            \"min-procs\"       => 1,\n", "error": "none", "author": "tom@organisms.be"}, {"index": "103", "colour": "orange", "code": "            \"max-procs\"       => 1, # adjust as needed\n", "error": "none", "author": "tom@organisms.be"}, {"index": "104", "colour": "orange", "code": "          ),\n", "error": "none", "author": "tom@organisms.be"}, {"index": "105", "colour": "orange", "code": "        ),\n", "error": "none", "author": "tom@organisms.be"}, {"index": "106", "colour": "orange", "code": "      )\n", "error": "none", "author": "tom@organisms.be"}, {"index": "107", "colour": "orange", "code": "    } # end of $HTTP[\"url\"] =~ \"^/\"\n", "error": "none", "author": "tom@organisms.be"}, {"index": "108", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "109", "colour": "orange", "code": "Please see `Lighttpd FastCGI Docs\n", "error": "none", "author": "tom@organisms.be"}, {"index": "110", "colour": "orange", "code": "<http://redmine.lighttpd.net/wiki/lighttpd/Docs:ModFastCGI>`_ for an explanation\n", "error": "none", "author": "tom@organisms.be"}, {"index": "111", "colour": "orange", "code": "of the possible configuration options.\n", "error": "none", "author": "tom@organisms.be"}, {"index": "112", "colour": "orange", "code": "\"\"\"\n", "error": "none", "author": "tom@organisms.be"}, {"index": "113", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "114", "colour": "orange", "code": "import sys\n", "error": "none", "author": "tom@organisms.be"}, {"index": "115", "colour": "orange", "code": "import time\n", "error": "none", "author": "tom@organisms.be"}, {"index": "116", "colour": "orange", "code": "import warnings\n", "error": "none", "author": "tom@organisms.be"}, {"index": "117", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "118", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "119", "colour": "orange", "code": "class ServerAdapter(object):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "120", "colour": "orange", "code": "    \"\"\"Adapter for an HTTP server.\n", "error": "none", "author": "tom@organisms.be"}, {"index": "121", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "122", "colour": "orange", "code": "    If you need to start more than one HTTP server (to serve on multiple\n", "error": "none", "author": "tom@organisms.be"}, {"index": "123", "colour": "orange", "code": "    ports, or protocols, etc.), you can manually register each one and then\n", "error": "none", "author": "tom@organisms.be"}, {"index": "124", "colour": "orange", "code": "    start them all with bus.start:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "125", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "126", "colour": "orange", "code": "        s1 = ServerAdapter(bus, MyWSGIServer(host='0.0.0.0', port=80))\n", "error": "none", "author": "tom@organisms.be"}, {"index": "127", "colour": "orange", "code": "        s2 = ServerAdapter(bus, another.HTTPServer(host='127.0.0.1', SSL=True))\n", "error": "none", "author": "tom@organisms.be"}, {"index": "128", "colour": "orange", "code": "        s1.subscribe()\n", "error": "none", "author": "tom@organisms.be"}, {"index": "129", "colour": "orange", "code": "        s2.subscribe()\n", "error": "none", "author": "tom@organisms.be"}, {"index": "130", "colour": "orange", "code": "        bus.start()\n", "error": "none", "author": "tom@organisms.be"}, {"index": "131", "colour": "orange", "code": "    \"\"\"\n", "error": "none", "author": "tom@organisms.be"}, {"index": "132", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "133", "colour": "orange", "code": "    def __init__(self, bus, httpserver=None, bind_addr=None):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "134", "colour": "orange", "code": "        self.bus = bus\n", "error": "none", "author": "tom@organisms.be"}, {"index": "135", "colour": "orange", "code": "        self.httpserver = httpserver\n", "error": "none", "author": "tom@organisms.be"}, {"index": "136", "colour": "orange", "code": "        self.bind_addr = bind_addr\n", "error": "none", "author": "tom@organisms.be"}, {"index": "137", "colour": "orange", "code": "        self.interrupt = None\n", "error": "none", "author": "tom@organisms.be"}, {"index": "138", "colour": "orange", "code": "        self.running = False\n", "error": "none", "author": "tom@organisms.be"}, {"index": "139", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "140", "colour": "orange", "code": "    def subscribe(self):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "141", "colour": "orange", "code": "        self.bus.subscribe('start', self.start)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "142", "colour": "orange", "code": "        self.bus.subscribe('stop', self.stop)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "143", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "144", "colour": "orange", "code": "    def unsubscribe(self):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "145", "colour": "orange", "code": "        self.bus.unsubscribe('start', self.start)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "146", "colour": "orange", "code": "        self.bus.unsubscribe('stop', self.stop)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "147", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "148", "colour": "orange", "code": "    def start(self):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "149", "colour": "orange", "code": "        \"\"\"Start the HTTP server.\"\"\"\n", "error": "none", "author": "tom@organisms.be"}, {"index": "150", "colour": "orange", "code": "        if self.bind_addr is None:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "151", "colour": "orange", "code": "            on_what = \"unknown interface (dynamic?)\"\n", "error": "none", "author": "tom@organisms.be"}, {"index": "152", "colour": "orange", "code": "        elif isinstance(self.bind_addr, tuple):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "153", "colour": "green", "code": "            host, port = self.bind_addr\n", "error": "W", "author": "tom@organisms.be"}, {"index": "154", "colour": "orange", "code": "            on_what = \"%s:%s\" % (host, port)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "155", "colour": "orange", "code": "        else:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "156", "colour": "orange", "code": "            on_what = \"socket file: %s\" % self.bind_addr\n", "error": "none", "author": "tom@organisms.be"}, {"index": "157", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "158", "colour": "orange", "code": "        if self.running:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "159", "colour": "orange", "code": "            self.bus.log(\"Already serving on %s\" % on_what)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "160", "colour": "orange", "code": "            return\n", "error": "none", "author": "tom@organisms.be"}, {"index": "161", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "162", "colour": "orange", "code": "        self.interrupt = None\n", "error": "none", "author": "tom@organisms.be"}, {"index": "163", "colour": "orange", "code": "        if not self.httpserver:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "164", "colour": "orange", "code": "            raise ValueError(\"No HTTP server has been created.\")\n", "error": "none", "author": "tom@organisms.be"}, {"index": "165", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "166", "colour": "orange", "code": "        # Start the httpserver in a new thread.\n", "error": "none", "author": "tom@organisms.be"}, {"index": "167", "colour": "orange", "code": "        if isinstance(self.bind_addr, tuple):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "168", "colour": "orange", "code": "            wait_for_free_port(*self.bind_addr)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "169", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "170", "colour": "orange", "code": "        import threading\n", "error": "none", "author": "tom@organisms.be"}, {"index": "171", "colour": "orange", "code": "        t = threading.Thread(target=self._start_http_thread)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "172", "colour": "orange", "code": "        t.setName(\"HTTPServer \" + t.getName())\n", "error": "none", "author": "tom@organisms.be"}, {"index": "173", "colour": "orange", "code": "        t.start()\n", "error": "none", "author": "tom@organisms.be"}, {"index": "174", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "175", "colour": "orange", "code": "        self.wait()\n", "error": "none", "author": "tom@organisms.be"}, {"index": "176", "colour": "orange", "code": "        self.running = True\n", "error": "none", "author": "tom@organisms.be"}, {"index": "177", "colour": "orange", "code": "        self.bus.log(\"Serving on %s\" % on_what)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "178", "colour": "orange", "code": "    start.priority = 75\n", "error": "none", "author": "tom@organisms.be"}, {"index": "179", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "180", "colour": "orange", "code": "    def _start_http_thread(self):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "181", "colour": "orange", "code": "        \"\"\"HTTP servers MUST be running in new threads, so that the\n", "error": "none", "author": "tom@organisms.be"}, {"index": "182", "colour": "orange", "code": "        main thread persists to receive KeyboardInterrupt's. If an\n", "error": "none", "author": "tom@organisms.be"}, {"index": "183", "colour": "orange", "code": "        exception is raised in the httpserver's thread then it's\n", "error": "none", "author": "tom@organisms.be"}, {"index": "184", "colour": "orange", "code": "        trapped here, and the bus (and therefore our httpserver)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "185", "colour": "orange", "code": "        are shut down.\n", "error": "none", "author": "tom@organisms.be"}, {"index": "186", "colour": "orange", "code": "        \"\"\"\n", "error": "none", "author": "tom@organisms.be"}, {"index": "187", "colour": "orange", "code": "        try:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "188", "colour": "orange", "code": "            self.httpserver.start()\n", "error": "none", "author": "tom@organisms.be"}, {"index": "189", "colour": "orange", "code": "        except KeyboardInterrupt:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "190", "colour": "orange", "code": "            self.bus.log(\"<Ctrl-C> hit: shutting down HTTP server\")\n", "error": "none", "author": "tom@organisms.be"}, {"index": "191", "colour": "orange", "code": "            self.interrupt = sys.exc_info()[1]\n", "error": "none", "author": "tom@organisms.be"}, {"index": "192", "colour": "orange", "code": "            self.bus.exit()\n", "error": "none", "author": "tom@organisms.be"}, {"index": "193", "colour": "orange", "code": "        except SystemExit:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "194", "colour": "orange", "code": "            self.bus.log(\"SystemExit raised: shutting down HTTP server\")\n", "error": "none", "author": "tom@organisms.be"}, {"index": "195", "colour": "orange", "code": "            self.interrupt = sys.exc_info()[1]\n", "error": "none", "author": "tom@organisms.be"}, {"index": "196", "colour": "orange", "code": "            self.bus.exit()\n", "error": "none", "author": "tom@organisms.be"}, {"index": "197", "colour": "orange", "code": "            raise\n", "error": "none", "author": "tom@organisms.be"}, {"index": "198", "colour": "orange", "code": "        except:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "199", "colour": "orange", "code": "            self.interrupt = sys.exc_info()[1]\n", "error": "none", "author": "tom@organisms.be"}, {"index": "200", "colour": "orange", "code": "            self.bus.log(\"Error in HTTP server: shutting down\",\n", "error": "none", "author": "tom@organisms.be"}, {"index": "201", "colour": "orange", "code": "                         traceback=True, level=40)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "202", "colour": "orange", "code": "            self.bus.exit()\n", "error": "none", "author": "tom@organisms.be"}, {"index": "203", "colour": "orange", "code": "            raise\n", "error": "none", "author": "tom@organisms.be"}, {"index": "204", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "205", "colour": "orange", "code": "    def wait(self):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "206", "colour": "orange", "code": "        \"\"\"Wait until the HTTP server is ready to receive requests.\"\"\"\n", "error": "none", "author": "tom@organisms.be"}, {"index": "207", "colour": "orange", "code": "        while not getattr(self.httpserver, \"ready\", False):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "208", "colour": "orange", "code": "            if self.interrupt:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "209", "colour": "red", "code": "                raise self.interrupt\n", "error": "E", "author": "tom@organisms.be"}, {"index": "210", "colour": "orange", "code": "            time.sleep(.1)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "211", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "212", "colour": "orange", "code": "        # Wait for port to be occupied\n", "error": "none", "author": "tom@organisms.be"}, {"index": "213", "colour": "orange", "code": "        if isinstance(self.bind_addr, tuple):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "214", "colour": "green", "code": "            host, port = self.bind_addr\n", "error": "W", "author": "tom@organisms.be"}, {"index": "215", "colour": "orange", "code": "            wait_for_occupied_port(host, port)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "216", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "217", "colour": "orange", "code": "    def stop(self):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "218", "colour": "orange", "code": "        \"\"\"Stop the HTTP server.\"\"\"\n", "error": "none", "author": "tom@organisms.be"}, {"index": "219", "colour": "orange", "code": "        if self.running:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "220", "colour": "orange", "code": "            # stop() MUST block until the server is *truly* stopped.\n", "error": "none", "author": "tom@organisms.be"}, {"index": "221", "colour": "orange", "code": "            self.httpserver.stop()\n", "error": "none", "author": "tom@organisms.be"}, {"index": "222", "colour": "orange", "code": "            # Wait for the socket to be truly freed.\n", "error": "none", "author": "tom@organisms.be"}, {"index": "223", "colour": "orange", "code": "            if isinstance(self.bind_addr, tuple):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "224", "colour": "orange", "code": "                wait_for_free_port(*self.bind_addr)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "225", "colour": "orange", "code": "            self.running = False\n", "error": "none", "author": "tom@organisms.be"}, {"index": "226", "colour": "orange", "code": "            self.bus.log(\"HTTP Server %s shut down\" % self.httpserver)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "227", "colour": "orange", "code": "        else:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "228", "colour": "orange", "code": "            self.bus.log(\"HTTP Server %s already shut down\" % self.httpserver)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "229", "colour": "orange", "code": "    stop.priority = 25\n", "error": "none", "author": "tom@organisms.be"}, {"index": "230", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "231", "colour": "orange", "code": "    def restart(self):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "232", "colour": "orange", "code": "        \"\"\"Restart the HTTP server.\"\"\"\n", "error": "none", "author": "tom@organisms.be"}, {"index": "233", "colour": "orange", "code": "        self.stop()\n", "error": "none", "author": "tom@organisms.be"}, {"index": "234", "colour": "orange", "code": "        self.start()\n", "error": "none", "author": "tom@organisms.be"}, {"index": "235", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "236", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "237", "colour": "orange", "code": "class FlupCGIServer(object):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "238", "colour": "orange", "code": "    \"\"\"Adapter for a flup.server.cgi.WSGIServer.\"\"\"\n", "error": "none", "author": "tom@organisms.be"}, {"index": "239", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "240", "colour": "orange", "code": "    def __init__(self, *args, **kwargs):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "241", "colour": "orange", "code": "        self.args = args\n", "error": "none", "author": "tom@organisms.be"}, {"index": "242", "colour": "orange", "code": "        self.kwargs = kwargs\n", "error": "none", "author": "tom@organisms.be"}, {"index": "243", "colour": "orange", "code": "        self.ready = False\n", "error": "none", "author": "tom@organisms.be"}, {"index": "244", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "245", "colour": "orange", "code": "    def start(self):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "246", "colour": "orange", "code": "        \"\"\"Start the CGI server.\"\"\"\n", "error": "none", "author": "tom@organisms.be"}, {"index": "247", "colour": "orange", "code": "        # We have to instantiate the server class here because its __init__\n", "error": "none", "author": "tom@organisms.be"}, {"index": "248", "colour": "orange", "code": "        # starts a threadpool. If we do it too early, daemonize won't work.\n", "error": "none", "author": "tom@organisms.be"}, {"index": "249", "colour": "orange", "code": "        from flup.server.cgi import WSGIServer\n", "error": "none", "author": "tom@organisms.be"}, {"index": "250", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "251", "colour": "green", "code": "        self.cgiserver = WSGIServer(*self.args, **self.kwargs)\n", "error": "W", "author": "tom@organisms.be"}, {"index": "252", "colour": "orange", "code": "        self.ready = True\n", "error": "none", "author": "tom@organisms.be"}, {"index": "253", "colour": "orange", "code": "        self.cgiserver.run()\n", "error": "none", "author": "tom@organisms.be"}, {"index": "254", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "255", "colour": "orange", "code": "    def stop(self):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "256", "colour": "orange", "code": "        \"\"\"Stop the HTTP server.\"\"\"\n", "error": "none", "author": "tom@organisms.be"}, {"index": "257", "colour": "orange", "code": "        self.ready = False\n", "error": "none", "author": "tom@organisms.be"}, {"index": "258", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "259", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "260", "colour": "orange", "code": "class FlupFCGIServer(object):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "261", "colour": "orange", "code": "    \"\"\"Adapter for a flup.server.fcgi.WSGIServer.\"\"\"\n", "error": "none", "author": "tom@organisms.be"}, {"index": "262", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "263", "colour": "orange", "code": "    def __init__(self, *args, **kwargs):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "264", "colour": "orange", "code": "        if kwargs.get('bindAddress', None) is None:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "265", "colour": "orange", "code": "            import socket\n", "error": "none", "author": "tom@organisms.be"}, {"index": "266", "colour": "orange", "code": "            if not hasattr(socket, 'fromfd'):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "267", "colour": "orange", "code": "                raise ValueError(\n", "error": "none", "author": "tom@organisms.be"}, {"index": "268", "colour": "orange", "code": "                    'Dynamic FCGI server not available on this platform. '\n", "error": "none", "author": "tom@organisms.be"}, {"index": "269", "colour": "orange", "code": "                    'You must use a static or external one by providing a '\n", "error": "none", "author": "tom@organisms.be"}, {"index": "270", "colour": "orange", "code": "                    'legal bindAddress.')\n", "error": "none", "author": "tom@organisms.be"}, {"index": "271", "colour": "orange", "code": "        self.args = args\n", "error": "none", "author": "tom@organisms.be"}, {"index": "272", "colour": "orange", "code": "        self.kwargs = kwargs\n", "error": "none", "author": "tom@organisms.be"}, {"index": "273", "colour": "orange", "code": "        self.ready = False\n", "error": "none", "author": "tom@organisms.be"}, {"index": "274", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "275", "colour": "orange", "code": "    def start(self):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "276", "colour": "orange", "code": "        \"\"\"Start the FCGI server.\"\"\"\n", "error": "none", "author": "tom@organisms.be"}, {"index": "277", "colour": "orange", "code": "        # We have to instantiate the server class here because its __init__\n", "error": "none", "author": "tom@organisms.be"}, {"index": "278", "colour": "orange", "code": "        # starts a threadpool. If we do it too early, daemonize won't work.\n", "error": "none", "author": "tom@organisms.be"}, {"index": "279", "colour": "orange", "code": "        from flup.server.fcgi import WSGIServer\n", "error": "none", "author": "tom@organisms.be"}, {"index": "280", "colour": "green", "code": "        self.fcgiserver = WSGIServer(*self.args, **self.kwargs)\n", "error": "W", "author": "tom@organisms.be"}, {"index": "281", "colour": "green", "code": "        # TODO: report this bug upstream to flup.\n", "error": "W", "author": "tom@organisms.be"}, {"index": "282", "colour": "orange", "code": "        # If we don't set _oldSIGs on Windows, we get:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "283", "colour": "orange", "code": "        #   File \"C:\\Python24\\Lib\\site-packages\\flup\\server\\threadedserver.py\",\n", "error": "none", "author": "tom@organisms.be"}, {"index": "284", "colour": "orange", "code": "        #   line 108, in run\n", "error": "none", "author": "tom@organisms.be"}, {"index": "285", "colour": "orange", "code": "        #     self._restoreSignalHandlers()\n", "error": "none", "author": "tom@organisms.be"}, {"index": "286", "colour": "orange", "code": "        #   File \"C:\\Python24\\Lib\\site-packages\\flup\\server\\threadedserver.py\",\n", "error": "none", "author": "tom@organisms.be"}, {"index": "287", "colour": "orange", "code": "        #   line 156, in _restoreSignalHandlers\n", "error": "none", "author": "tom@organisms.be"}, {"index": "288", "colour": "orange", "code": "        #     for signum,handler in self._oldSIGs:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "289", "colour": "orange", "code": "        #   AttributeError: 'WSGIServer' object has no attribute '_oldSIGs'\n", "error": "none", "author": "tom@organisms.be"}, {"index": "290", "colour": "green", "code": "        self.fcgiserver._installSignalHandlers = lambda: None\n", "error": "W", "author": "tom@organisms.be"}, {"index": "291", "colour": "green", "code": "        self.fcgiserver._oldSIGs = []\n", "error": "W", "author": "tom@organisms.be"}, {"index": "292", "colour": "orange", "code": "        self.ready = True\n", "error": "none", "author": "tom@organisms.be"}, {"index": "293", "colour": "orange", "code": "        self.fcgiserver.run()\n", "error": "none", "author": "tom@organisms.be"}, {"index": "294", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "295", "colour": "orange", "code": "    def stop(self):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "296", "colour": "orange", "code": "        \"\"\"Stop the HTTP server.\"\"\"\n", "error": "none", "author": "tom@organisms.be"}, {"index": "297", "colour": "orange", "code": "        # Forcibly stop the fcgi server main event loop.\n", "error": "none", "author": "tom@organisms.be"}, {"index": "298", "colour": "green", "code": "        self.fcgiserver._keepGoing = False\n", "error": "W", "author": "tom@organisms.be"}, {"index": "299", "colour": "orange", "code": "        # Force all worker threads to die off.\n", "error": "none", "author": "tom@organisms.be"}, {"index": "300", "colour": "green", "code": "        self.fcgiserver._threadPool.maxSpare = self.fcgiserver._threadPool._idleCount\n", "error": "W", "author": "tom@organisms.be"}, {"index": "301", "colour": "orange", "code": "        self.ready = False\n", "error": "none", "author": "tom@organisms.be"}, {"index": "302", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "303", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "304", "colour": "orange", "code": "class FlupSCGIServer(object):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "305", "colour": "orange", "code": "    \"\"\"Adapter for a flup.server.scgi.WSGIServer.\"\"\"\n", "error": "none", "author": "tom@organisms.be"}, {"index": "306", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "307", "colour": "orange", "code": "    def __init__(self, *args, **kwargs):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "308", "colour": "orange", "code": "        self.args = args\n", "error": "none", "author": "tom@organisms.be"}, {"index": "309", "colour": "orange", "code": "        self.kwargs = kwargs\n", "error": "none", "author": "tom@organisms.be"}, {"index": "310", "colour": "orange", "code": "        self.ready = False\n", "error": "none", "author": "tom@organisms.be"}, {"index": "311", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "312", "colour": "orange", "code": "    def start(self):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "313", "colour": "orange", "code": "        \"\"\"Start the SCGI server.\"\"\"\n", "error": "none", "author": "tom@organisms.be"}, {"index": "314", "colour": "orange", "code": "        # We have to instantiate the server class here because its __init__\n", "error": "none", "author": "tom@organisms.be"}, {"index": "315", "colour": "orange", "code": "        # starts a threadpool. If we do it too early, daemonize won't work.\n", "error": "none", "author": "tom@organisms.be"}, {"index": "316", "colour": "orange", "code": "        from flup.server.scgi import WSGIServer\n", "error": "none", "author": "tom@organisms.be"}, {"index": "317", "colour": "green", "code": "        self.scgiserver = WSGIServer(*self.args, **self.kwargs)\n", "error": "W", "author": "tom@organisms.be"}, {"index": "318", "colour": "green", "code": "        # TODO: report this bug upstream to flup.\n", "error": "W", "author": "tom@organisms.be"}, {"index": "319", "colour": "orange", "code": "        # If we don't set _oldSIGs on Windows, we get:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "320", "colour": "orange", "code": "        #   File \"C:\\Python24\\Lib\\site-packages\\flup\\server\\threadedserver.py\",\n", "error": "none", "author": "tom@organisms.be"}, {"index": "321", "colour": "orange", "code": "        #   line 108, in run\n", "error": "none", "author": "tom@organisms.be"}, {"index": "322", "colour": "orange", "code": "        #     self._restoreSignalHandlers()\n", "error": "none", "author": "tom@organisms.be"}, {"index": "323", "colour": "orange", "code": "        #   File \"C:\\Python24\\Lib\\site-packages\\flup\\server\\threadedserver.py\",\n", "error": "none", "author": "tom@organisms.be"}, {"index": "324", "colour": "orange", "code": "        #   line 156, in _restoreSignalHandlers\n", "error": "none", "author": "tom@organisms.be"}, {"index": "325", "colour": "orange", "code": "        #     for signum,handler in self._oldSIGs:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "326", "colour": "orange", "code": "        #   AttributeError: 'WSGIServer' object has no attribute '_oldSIGs'\n", "error": "none", "author": "tom@organisms.be"}, {"index": "327", "colour": "green", "code": "        self.scgiserver._installSignalHandlers = lambda: None\n", "error": "W", "author": "tom@organisms.be"}, {"index": "328", "colour": "green", "code": "        self.scgiserver._oldSIGs = []\n", "error": "W", "author": "tom@organisms.be"}, {"index": "329", "colour": "orange", "code": "        self.ready = True\n", "error": "none", "author": "tom@organisms.be"}, {"index": "330", "colour": "orange", "code": "        self.scgiserver.run()\n", "error": "none", "author": "tom@organisms.be"}, {"index": "331", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "332", "colour": "orange", "code": "    def stop(self):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "333", "colour": "orange", "code": "        \"\"\"Stop the HTTP server.\"\"\"\n", "error": "none", "author": "tom@organisms.be"}, {"index": "334", "colour": "orange", "code": "        self.ready = False\n", "error": "none", "author": "tom@organisms.be"}, {"index": "335", "colour": "orange", "code": "        # Forcibly stop the scgi server main event loop.\n", "error": "none", "author": "tom@organisms.be"}, {"index": "336", "colour": "green", "code": "        self.scgiserver._keepGoing = False\n", "error": "W", "author": "tom@organisms.be"}, {"index": "337", "colour": "orange", "code": "        # Force all worker threads to die off.\n", "error": "none", "author": "tom@organisms.be"}, {"index": "338", "colour": "green", "code": "        self.scgiserver._threadPool.maxSpare = 0\n", "error": "W", "author": "tom@organisms.be"}, {"index": "339", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "340", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "341", "colour": "orange", "code": "def client_host(server_host):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "342", "colour": "orange", "code": "    \"\"\"Return the host on which a client can connect to the given listener.\"\"\"\n", "error": "none", "author": "tom@organisms.be"}, {"index": "343", "colour": "orange", "code": "    if server_host == '0.0.0.0':\n", "error": "none", "author": "tom@organisms.be"}, {"index": "344", "colour": "orange", "code": "        # 0.0.0.0 is INADDR_ANY, which should answer on localhost.\n", "error": "none", "author": "tom@organisms.be"}, {"index": "345", "colour": "orange", "code": "        return '127.0.0.1'\n", "error": "none", "author": "tom@organisms.be"}, {"index": "346", "colour": "orange", "code": "    if server_host in ('::', '::0', '::0.0.0.0'):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "347", "colour": "orange", "code": "        # :: is IN6ADDR_ANY, which should answer on localhost.\n", "error": "none", "author": "tom@organisms.be"}, {"index": "348", "colour": "orange", "code": "        # ::0 and ::0.0.0.0 are non-canonical but common ways to write IN6ADDR_ANY.\n", "error": "none", "author": "tom@organisms.be"}, {"index": "349", "colour": "orange", "code": "        return '::1'\n", "error": "none", "author": "tom@organisms.be"}, {"index": "350", "colour": "orange", "code": "    return server_host\n", "error": "none", "author": "tom@organisms.be"}, {"index": "351", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "352", "colour": "orange", "code": "def check_port(host, port, timeout=1.0):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "353", "colour": "orange", "code": "    \"\"\"Raise an error if the given port is not free on the given host.\"\"\"\n", "error": "none", "author": "tom@organisms.be"}, {"index": "354", "colour": "orange", "code": "    if not host:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "355", "colour": "orange", "code": "        raise ValueError(\"Host values of '' or None are not allowed.\")\n", "error": "none", "author": "tom@organisms.be"}, {"index": "356", "colour": "orange", "code": "    host = client_host(host)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "357", "colour": "orange", "code": "    port = int(port)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "358", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "359", "colour": "orange", "code": "    import socket\n", "error": "none", "author": "tom@organisms.be"}, {"index": "360", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "361", "colour": "orange", "code": "    # AF_INET or AF_INET6 socket\n", "error": "none", "author": "tom@organisms.be"}, {"index": "362", "colour": "orange", "code": "    # Get the correct address family for our host (allows IPv6 addresses)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "363", "colour": "orange", "code": "    try:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "364", "colour": "orange", "code": "        info = socket.getaddrinfo(host, port, socket.AF_UNSPEC,\n", "error": "none", "author": "tom@organisms.be"}, {"index": "365", "colour": "orange", "code": "                                  socket.SOCK_STREAM)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "366", "colour": "orange", "code": "    except socket.gaierror:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "367", "colour": "orange", "code": "        if ':' in host:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "368", "colour": "orange", "code": "            info = [(socket.AF_INET6, socket.SOCK_STREAM, 0, \"\", (host, port, 0, 0))]\n", "error": "none", "author": "tom@organisms.be"}, {"index": "369", "colour": "orange", "code": "        else:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "370", "colour": "orange", "code": "            info = [(socket.AF_INET, socket.SOCK_STREAM, 0, \"\", (host, port))]\n", "error": "none", "author": "tom@organisms.be"}, {"index": "371", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "372", "colour": "orange", "code": "    for res in info:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "373", "colour": "green", "code": "        af, socktype, proto, canonname, sa = res\n", "error": "W", "author": "tom@organisms.be"}, {"index": "374", "colour": "orange", "code": "        s = None\n", "error": "none", "author": "tom@organisms.be"}, {"index": "375", "colour": "orange", "code": "        try:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "376", "colour": "orange", "code": "            s = socket.socket(af, socktype, proto)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "377", "colour": "orange", "code": "            # See http://groups.google.com/group/cherrypy-users/\n", "error": "none", "author": "tom@organisms.be"}, {"index": "378", "colour": "orange", "code": "            #        browse_frm/thread/bbfe5eb39c904fe0\n", "error": "none", "author": "tom@organisms.be"}, {"index": "379", "colour": "orange", "code": "            s.settimeout(timeout)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "380", "colour": "orange", "code": "            s.connect((host, port))\n", "error": "none", "author": "tom@organisms.be"}, {"index": "381", "colour": "orange", "code": "            s.close()\n", "error": "none", "author": "tom@organisms.be"}, {"index": "382", "colour": "orange", "code": "        except socket.error:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "383", "colour": "orange", "code": "            if s:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "384", "colour": "orange", "code": "                s.close()\n", "error": "none", "author": "tom@organisms.be"}, {"index": "385", "colour": "orange", "code": "        else:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "386", "colour": "orange", "code": "            raise IOError(\"Port %s is in use on %s; perhaps the previous \"\n", "error": "none", "author": "tom@organisms.be"}, {"index": "387", "colour": "orange", "code": "                          \"httpserver did not shut down properly.\" %\n", "error": "none", "author": "tom@organisms.be"}, {"index": "388", "colour": "orange", "code": "                          (repr(port), repr(host)))\n", "error": "none", "author": "tom@organisms.be"}, {"index": "389", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "390", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "391", "colour": "orange", "code": "# Feel free to increase these defaults on slow systems:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "392", "colour": "orange", "code": "free_port_timeout = 0.1\n", "error": "none", "author": "tom@organisms.be"}, {"index": "393", "colour": "orange", "code": "occupied_port_timeout = 1.0\n", "error": "none", "author": "tom@organisms.be"}, {"index": "394", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "395", "colour": "orange", "code": "def wait_for_free_port(host, port, timeout=None):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "396", "colour": "orange", "code": "    \"\"\"Wait for the specified port to become free (drop requests).\"\"\"\n", "error": "none", "author": "tom@organisms.be"}, {"index": "397", "colour": "orange", "code": "    if not host:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "398", "colour": "orange", "code": "        raise ValueError(\"Host values of '' or None are not allowed.\")\n", "error": "none", "author": "tom@organisms.be"}, {"index": "399", "colour": "orange", "code": "    if timeout is None:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "400", "colour": "orange", "code": "        timeout = free_port_timeout\n", "error": "none", "author": "tom@organisms.be"}, {"index": "401", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "402", "colour": "green", "code": "    for trial in range(50):\n", "error": "W", "author": "tom@organisms.be"}, {"index": "403", "colour": "orange", "code": "        try:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "404", "colour": "orange", "code": "            # we are expecting a free port, so reduce the timeout\n", "error": "none", "author": "tom@organisms.be"}, {"index": "405", "colour": "orange", "code": "            check_port(host, port, timeout=timeout)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "406", "colour": "orange", "code": "        except IOError:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "407", "colour": "orange", "code": "            # Give the old server thread time to free the port.\n", "error": "none", "author": "tom@organisms.be"}, {"index": "408", "colour": "orange", "code": "            time.sleep(timeout)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "409", "colour": "orange", "code": "        else:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "410", "colour": "orange", "code": "            return\n", "error": "none", "author": "tom@organisms.be"}, {"index": "411", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "412", "colour": "orange", "code": "    raise IOError(\"Port %r not free on %r\" % (port, host))\n", "error": "none", "author": "tom@organisms.be"}, {"index": "413", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "414", "colour": "orange", "code": "def wait_for_occupied_port(host, port, timeout=None):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "415", "colour": "orange", "code": "    \"\"\"Wait for the specified port to become active (receive requests).\"\"\"\n", "error": "none", "author": "tom@organisms.be"}, {"index": "416", "colour": "orange", "code": "    if not host:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "417", "colour": "orange", "code": "        raise ValueError(\"Host values of '' or None are not allowed.\")\n", "error": "none", "author": "tom@organisms.be"}, {"index": "418", "colour": "orange", "code": "    if timeout is None:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "419", "colour": "orange", "code": "        timeout = occupied_port_timeout\n", "error": "none", "author": "tom@organisms.be"}, {"index": "420", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "421", "colour": "green", "code": "    for trial in range(50):\n", "error": "W", "author": "tom@organisms.be"}, {"index": "422", "colour": "orange", "code": "        try:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "423", "colour": "orange", "code": "            check_port(host, port, timeout=timeout)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "424", "colour": "orange", "code": "        except IOError:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "425", "colour": "orange", "code": "            # port is occupied\n", "error": "none", "author": "tom@organisms.be"}, {"index": "426", "colour": "orange", "code": "            return\n", "error": "none", "author": "tom@organisms.be"}, {"index": "427", "colour": "orange", "code": "        else:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "428", "colour": "orange", "code": "            time.sleep(timeout)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "429", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "430", "colour": "orange", "code": "    if host == client_host(host):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "431", "colour": "orange", "code": "        raise IOError(\"Port %r not bound on %r\" % (port, host))\n", "error": "none", "author": "tom@organisms.be"}, {"index": "432", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "433", "colour": "orange", "code": "    # On systems where a loopback interface is not available and the\n", "error": "none", "author": "tom@organisms.be"}, {"index": "434", "colour": "orange", "code": "    #  server is bound to all interfaces, it's difficult to determine\n", "error": "none", "author": "tom@organisms.be"}, {"index": "435", "colour": "orange", "code": "    #  whether the server is in fact occupying the port. In this case,\n", "error": "none", "author": "tom@organisms.be"}, {"index": "436", "colour": "orange", "code": "    #  just issue a warning and move on. See issue #1100.\n", "error": "none", "author": "tom@organisms.be"}, {"index": "437", "colour": "orange", "code": "    msg = \"Unable to verify that the server is bound on %r\" % port\n", "error": "none", "author": "tom@organisms.be"}, {"index": "438", "colour": "orange", "code": "    warnings.warn(msg)\n", "error": "none", "author": "tom@organisms.be"}]]}