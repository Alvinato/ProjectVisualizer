{"path": "/home/asumal/git/cs410/pattern/pattern/server/cherrypy/cherrypy/process/servers.py", "lines": [[{"error": "W", "line": "1", "code": "\"\"\"\n", "colour": "purple", "author": "tom@organisms.be"}, {"error": "none", "line": "2", "code": "Starting in CherryPy 3.1, cherrypy.server is implemented as an\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "3", "code": ":ref:`Engine Plugin<plugins>`. It's an instance of\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "4", "code": ":class:`cherrypy._cpserver.Server`, which is a subclass of\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "5", "code": ":class:`cherrypy.process.servers.ServerAdapter`. The ``ServerAdapter`` class\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "6", "code": "is designed to control other servers, as well.\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "7", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "8", "code": "Multiple servers/ports\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "9", "code": "======================\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "10", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "11", "code": "If you need to start more than one HTTP server (to serve on multiple ports, or\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "12", "code": "protocols, etc.), you can manually register each one and then start them all\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "13", "code": "with engine.start::\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "14", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "15", "code": "    s1 = ServerAdapter(cherrypy.engine, MyWSGIServer(host='0.0.0.0', port=80))\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "16", "code": "    s2 = ServerAdapter(cherrypy.engine, another.HTTPServer(host='127.0.0.1', SSL=True))\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "17", "code": "    s1.subscribe()\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "18", "code": "    s2.subscribe()\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "19", "code": "    cherrypy.engine.start()\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "20", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "21", "code": ".. index:: SCGI\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "22", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "23", "code": "FastCGI/SCGI\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "24", "code": "============\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "25", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "26", "code": "There are also Flup\\ **F**\\ CGIServer and Flup\\ **S**\\ CGIServer classes in\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "27", "code": ":mod:`cherrypy.process.servers`. To start an fcgi server, for example,\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "28", "code": "wrap an instance of it in a ServerAdapter::\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "29", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "30", "code": "    addr = ('0.0.0.0', 4000)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "31", "code": "    f = servers.FlupFCGIServer(application=cherrypy.tree, bindAddress=addr)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "32", "code": "    s = servers.ServerAdapter(cherrypy.engine, httpserver=f, bind_addr=addr)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "33", "code": "    s.subscribe()\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "34", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "35", "code": "The :doc:`cherryd</deployguide/cherryd>` startup script will do the above for\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "36", "code": "you via its `-f` flag.\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "37", "code": "Note that you need to download and install `flup <http://trac.saddi.com/flup>`_\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "38", "code": "yourself, whether you use ``cherryd`` or not.\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "39", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "40", "code": ".. _fastcgi:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "41", "code": ".. index:: FastCGI\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "42", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "43", "code": "FastCGI\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "44", "code": "-------\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "45", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "46", "code": "A very simple setup lets your cherry run with FastCGI.\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "47", "code": "You just need the flup library,\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "48", "code": "plus a running Apache server (with ``mod_fastcgi``) or lighttpd server.\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "49", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "50", "code": "CherryPy code\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "51", "code": "^^^^^^^^^^^^^\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "52", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "53", "code": "hello.py::\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "54", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "55", "code": "    #!/usr/bin/python\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "56", "code": "    import cherrypy\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "57", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "58", "code": "    class HelloWorld:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "59", "code": "        \\\"\"\"Sample request handler class.\\\"\"\"\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "60", "code": "        def index(self):\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "61", "code": "            return \"Hello world!\"\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "62", "code": "        index.exposed = True\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "63", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "64", "code": "    cherrypy.tree.mount(HelloWorld())\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "65", "code": "    # CherryPy autoreload must be disabled for the flup server to work\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "66", "code": "    cherrypy.config.update({'engine.autoreload_on':False})\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "67", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "68", "code": "Then run :doc:`/deployguide/cherryd` with the '-f' arg::\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "69", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "70", "code": "    cherryd -c <myconfig> -d -f -i hello.py\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "71", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "72", "code": "Apache\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "73", "code": "^^^^^^\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "74", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "75", "code": "At the top level in httpd.conf::\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "76", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "77", "code": "    FastCgiIpcDir /tmp\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "78", "code": "    FastCgiServer /path/to/cherry.fcgi -idle-timeout 120 -processes 4\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "79", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "80", "code": "And inside the relevant VirtualHost section::\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "81", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "82", "code": "    # FastCGI config\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "83", "code": "    AddHandler fastcgi-script .fcgi\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "84", "code": "    ScriptAliasMatch (.*$) /path/to/cherry.fcgi$1\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "85", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "86", "code": "Lighttpd\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "87", "code": "^^^^^^^^\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "88", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "89", "code": "For `Lighttpd <http://www.lighttpd.net/>`_ you can follow these\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "90", "code": "instructions. Within ``lighttpd.conf`` make sure ``mod_fastcgi`` is\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "91", "code": "active within ``server.modules``. Then, within your ``$HTTP[\"host\"]``\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "92", "code": "directive, configure your fastcgi script like the following::\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "93", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "94", "code": "    $HTTP[\"url\"] =~ \"\" {\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "95", "code": "      fastcgi.server = (\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "96", "code": "        \"/\" => (\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "97", "code": "          \"script.fcgi\" => (\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "98", "code": "            \"bin-path\" => \"/path/to/your/script.fcgi\",\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "99", "code": "            \"socket\"          => \"/tmp/script.sock\",\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "100", "code": "            \"check-local\"     => \"disable\",\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "101", "code": "            \"disable-time\"    => 1,\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "102", "code": "            \"min-procs\"       => 1,\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "103", "code": "            \"max-procs\"       => 1, # adjust as needed\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "104", "code": "          ),\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "105", "code": "        ),\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "106", "code": "      )\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "107", "code": "    } # end of $HTTP[\"url\"] =~ \"^/\"\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "108", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "109", "code": "Please see `Lighttpd FastCGI Docs\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "110", "code": "<http://redmine.lighttpd.net/wiki/lighttpd/Docs:ModFastCGI>`_ for an explanation\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "111", "code": "of the possible configuration options.\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "112", "code": "\"\"\"\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "113", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "114", "code": "import sys\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "115", "code": "import time\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "116", "code": "import warnings\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "117", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "118", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "119", "code": "class ServerAdapter(object):\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "120", "code": "    \"\"\"Adapter for an HTTP server.\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "121", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "122", "code": "    If you need to start more than one HTTP server (to serve on multiple\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "123", "code": "    ports, or protocols, etc.), you can manually register each one and then\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "124", "code": "    start them all with bus.start:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "125", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "126", "code": "        s1 = ServerAdapter(bus, MyWSGIServer(host='0.0.0.0', port=80))\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "127", "code": "        s2 = ServerAdapter(bus, another.HTTPServer(host='127.0.0.1', SSL=True))\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "128", "code": "        s1.subscribe()\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "129", "code": "        s2.subscribe()\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "130", "code": "        bus.start()\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "131", "code": "    \"\"\"\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "132", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "133", "code": "    def __init__(self, bus, httpserver=None, bind_addr=None):\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "134", "code": "        self.bus = bus\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "135", "code": "        self.httpserver = httpserver\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "136", "code": "        self.bind_addr = bind_addr\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "137", "code": "        self.interrupt = None\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "138", "code": "        self.running = False\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "139", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "140", "code": "    def subscribe(self):\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "141", "code": "        self.bus.subscribe('start', self.start)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "142", "code": "        self.bus.subscribe('stop', self.stop)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "143", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "144", "code": "    def unsubscribe(self):\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "145", "code": "        self.bus.unsubscribe('start', self.start)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "146", "code": "        self.bus.unsubscribe('stop', self.stop)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "147", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "148", "code": "    def start(self):\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "149", "code": "        \"\"\"Start the HTTP server.\"\"\"\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "150", "code": "        if self.bind_addr is None:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "151", "code": "            on_what = \"unknown interface (dynamic?)\"\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "152", "code": "        elif isinstance(self.bind_addr, tuple):\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "W", "line": "153", "code": "            host, port = self.bind_addr\n", "colour": "purple", "author": "tom@organisms.be"}, {"error": "none", "line": "154", "code": "            on_what = \"%s:%s\" % (host, port)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "155", "code": "        else:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "156", "code": "            on_what = \"socket file: %s\" % self.bind_addr\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "157", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "158", "code": "        if self.running:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "159", "code": "            self.bus.log(\"Already serving on %s\" % on_what)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "160", "code": "            return\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "161", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "162", "code": "        self.interrupt = None\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "163", "code": "        if not self.httpserver:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "164", "code": "            raise ValueError(\"No HTTP server has been created.\")\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "165", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "166", "code": "        # Start the httpserver in a new thread.\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "167", "code": "        if isinstance(self.bind_addr, tuple):\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "168", "code": "            wait_for_free_port(*self.bind_addr)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "169", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "170", "code": "        import threading\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "171", "code": "        t = threading.Thread(target=self._start_http_thread)\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "172", "code": "        t.setName(\"HTTPServer \" + t.getName())\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "173", "code": "        t.start()\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "174", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "175", "code": "        self.wait()\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "176", "code": "        self.running = True\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "177", "code": "        self.bus.log(\"Serving on %s\" % on_what)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "178", "code": "    start.priority = 75\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "179", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "180", "code": "    def _start_http_thread(self):\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "181", "code": "        \"\"\"HTTP servers MUST be running in new threads, so that the\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "182", "code": "        main thread persists to receive KeyboardInterrupt's. If an\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "183", "code": "        exception is raised in the httpserver's thread then it's\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "184", "code": "        trapped here, and the bus (and therefore our httpserver)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "185", "code": "        are shut down.\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "186", "code": "        \"\"\"\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "187", "code": "        try:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "188", "code": "            self.httpserver.start()\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "189", "code": "        except KeyboardInterrupt:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "190", "code": "            self.bus.log(\"<Ctrl-C> hit: shutting down HTTP server\")\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "191", "code": "            self.interrupt = sys.exc_info()[1]\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "192", "code": "            self.bus.exit()\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "193", "code": "        except SystemExit:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "194", "code": "            self.bus.log(\"SystemExit raised: shutting down HTTP server\")\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "195", "code": "            self.interrupt = sys.exc_info()[1]\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "196", "code": "            self.bus.exit()\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "197", "code": "            raise\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "198", "code": "        except:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "199", "code": "            self.interrupt = sys.exc_info()[1]\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "200", "code": "            self.bus.log(\"Error in HTTP server: shutting down\",\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "201", "code": "                         traceback=True, level=40)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "202", "code": "            self.bus.exit()\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "203", "code": "            raise\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "204", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "205", "code": "    def wait(self):\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "206", "code": "        \"\"\"Wait until the HTTP server is ready to receive requests.\"\"\"\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "207", "code": "        while not getattr(self.httpserver, \"ready\", False):\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "208", "code": "            if self.interrupt:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "E", "line": "209", "code": "                raise self.interrupt\n", "colour": "yellow", "author": "tom@organisms.be"}, {"error": "none", "line": "210", "code": "            time.sleep(.1)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "211", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "212", "code": "        # Wait for port to be occupied\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "213", "code": "        if isinstance(self.bind_addr, tuple):\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "W", "line": "214", "code": "            host, port = self.bind_addr\n", "colour": "purple", "author": "tom@organisms.be"}, {"error": "none", "line": "215", "code": "            wait_for_occupied_port(host, port)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "216", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "217", "code": "    def stop(self):\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "218", "code": "        \"\"\"Stop the HTTP server.\"\"\"\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "219", "code": "        if self.running:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "220", "code": "            # stop() MUST block until the server is *truly* stopped.\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "221", "code": "            self.httpserver.stop()\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "222", "code": "            # Wait for the socket to be truly freed.\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "223", "code": "            if isinstance(self.bind_addr, tuple):\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "224", "code": "                wait_for_free_port(*self.bind_addr)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "225", "code": "            self.running = False\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "226", "code": "            self.bus.log(\"HTTP Server %s shut down\" % self.httpserver)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "227", "code": "        else:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "228", "code": "            self.bus.log(\"HTTP Server %s already shut down\" % self.httpserver)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "229", "code": "    stop.priority = 25\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "230", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "231", "code": "    def restart(self):\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "232", "code": "        \"\"\"Restart the HTTP server.\"\"\"\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "233", "code": "        self.stop()\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "234", "code": "        self.start()\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "235", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "236", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "237", "code": "class FlupCGIServer(object):\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "238", "code": "    \"\"\"Adapter for a flup.server.cgi.WSGIServer.\"\"\"\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "239", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "240", "code": "    def __init__(self, *args, **kwargs):\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "241", "code": "        self.args = args\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "242", "code": "        self.kwargs = kwargs\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "243", "code": "        self.ready = False\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "244", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "245", "code": "    def start(self):\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "246", "code": "        \"\"\"Start the CGI server.\"\"\"\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "247", "code": "        # We have to instantiate the server class here because its __init__\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "248", "code": "        # starts a threadpool. If we do it too early, daemonize won't work.\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "F", "line": "249", "code": "        from flup.server.cgi import WSGIServer\n", "colour": "red", "author": "tom@organisms.be"}, {"error": "none", "line": "250", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "W", "line": "251", "code": "        self.cgiserver = WSGIServer(*self.args, **self.kwargs)\n", "colour": "purple", "author": "tom@organisms.be"}, {"error": "none", "line": "252", "code": "        self.ready = True\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "253", "code": "        self.cgiserver.run()\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "254", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "255", "code": "    def stop(self):\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "256", "code": "        \"\"\"Stop the HTTP server.\"\"\"\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "257", "code": "        self.ready = False\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "258", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "259", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "260", "code": "class FlupFCGIServer(object):\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "261", "code": "    \"\"\"Adapter for a flup.server.fcgi.WSGIServer.\"\"\"\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "262", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "263", "code": "    def __init__(self, *args, **kwargs):\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "264", "code": "        if kwargs.get('bindAddress', None) is None:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "265", "code": "            import socket\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "266", "code": "            if not hasattr(socket, 'fromfd'):\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "267", "code": "                raise ValueError(\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "268", "code": "                    'Dynamic FCGI server not available on this platform. '\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "269", "code": "                    'You must use a static or external one by providing a '\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "270", "code": "                    'legal bindAddress.')\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "271", "code": "        self.args = args\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "272", "code": "        self.kwargs = kwargs\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "273", "code": "        self.ready = False\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "274", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "275", "code": "    def start(self):\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "276", "code": "        \"\"\"Start the FCGI server.\"\"\"\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "277", "code": "        # We have to instantiate the server class here because its __init__\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "278", "code": "        # starts a threadpool. If we do it too early, daemonize won't work.\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "F", "line": "279", "code": "        from flup.server.fcgi import WSGIServer\n", "colour": "red", "author": "tom@organisms.be"}, {"error": "W", "line": "280", "code": "        self.fcgiserver = WSGIServer(*self.args, **self.kwargs)\n", "colour": "purple", "author": "tom@organisms.be"}, {"error": "W", "line": "281", "code": "        # TODO: report this bug upstream to flup.\n", "colour": "purple", "author": "tom@organisms.be"}, {"error": "none", "line": "282", "code": "        # If we don't set _oldSIGs on Windows, we get:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "283", "code": "        #   File \"C:\\Python24\\Lib\\site-packages\\flup\\server\\threadedserver.py\",\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "284", "code": "        #   line 108, in run\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "285", "code": "        #     self._restoreSignalHandlers()\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "286", "code": "        #   File \"C:\\Python24\\Lib\\site-packages\\flup\\server\\threadedserver.py\",\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "287", "code": "        #   line 156, in _restoreSignalHandlers\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "288", "code": "        #     for signum,handler in self._oldSIGs:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "289", "code": "        #   AttributeError: 'WSGIServer' object has no attribute '_oldSIGs'\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "W", "line": "290", "code": "        self.fcgiserver._installSignalHandlers = lambda: None\n", "colour": "purple", "author": "tom@organisms.be"}, {"error": "W", "line": "291", "code": "        self.fcgiserver._oldSIGs = []\n", "colour": "purple", "author": "tom@organisms.be"}, {"error": "none", "line": "292", "code": "        self.ready = True\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "293", "code": "        self.fcgiserver.run()\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "294", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "295", "code": "    def stop(self):\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "296", "code": "        \"\"\"Stop the HTTP server.\"\"\"\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "297", "code": "        # Forcibly stop the fcgi server main event loop.\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "W", "line": "298", "code": "        self.fcgiserver._keepGoing = False\n", "colour": "purple", "author": "tom@organisms.be"}, {"error": "none", "line": "299", "code": "        # Force all worker threads to die off.\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "W", "line": "300", "code": "        self.fcgiserver._threadPool.maxSpare = self.fcgiserver._threadPool._idleCount\n", "colour": "purple", "author": "tom@organisms.be"}, {"error": "none", "line": "301", "code": "        self.ready = False\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "302", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "303", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "304", "code": "class FlupSCGIServer(object):\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "305", "code": "    \"\"\"Adapter for a flup.server.scgi.WSGIServer.\"\"\"\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "306", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "307", "code": "    def __init__(self, *args, **kwargs):\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "308", "code": "        self.args = args\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "309", "code": "        self.kwargs = kwargs\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "310", "code": "        self.ready = False\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "311", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "312", "code": "    def start(self):\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "313", "code": "        \"\"\"Start the SCGI server.\"\"\"\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "314", "code": "        # We have to instantiate the server class here because its __init__\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "315", "code": "        # starts a threadpool. If we do it too early, daemonize won't work.\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "F", "line": "316", "code": "        from flup.server.scgi import WSGIServer\n", "colour": "red", "author": "tom@organisms.be"}, {"error": "W", "line": "317", "code": "        self.scgiserver = WSGIServer(*self.args, **self.kwargs)\n", "colour": "purple", "author": "tom@organisms.be"}, {"error": "W", "line": "318", "code": "        # TODO: report this bug upstream to flup.\n", "colour": "purple", "author": "tom@organisms.be"}, {"error": "none", "line": "319", "code": "        # If we don't set _oldSIGs on Windows, we get:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "320", "code": "        #   File \"C:\\Python24\\Lib\\site-packages\\flup\\server\\threadedserver.py\",\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "321", "code": "        #   line 108, in run\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "322", "code": "        #     self._restoreSignalHandlers()\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "323", "code": "        #   File \"C:\\Python24\\Lib\\site-packages\\flup\\server\\threadedserver.py\",\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "324", "code": "        #   line 156, in _restoreSignalHandlers\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "325", "code": "        #     for signum,handler in self._oldSIGs:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "326", "code": "        #   AttributeError: 'WSGIServer' object has no attribute '_oldSIGs'\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "W", "line": "327", "code": "        self.scgiserver._installSignalHandlers = lambda: None\n", "colour": "purple", "author": "tom@organisms.be"}, {"error": "W", "line": "328", "code": "        self.scgiserver._oldSIGs = []\n", "colour": "purple", "author": "tom@organisms.be"}, {"error": "none", "line": "329", "code": "        self.ready = True\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "330", "code": "        self.scgiserver.run()\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "331", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "332", "code": "    def stop(self):\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "333", "code": "        \"\"\"Stop the HTTP server.\"\"\"\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "334", "code": "        self.ready = False\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "335", "code": "        # Forcibly stop the scgi server main event loop.\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "W", "line": "336", "code": "        self.scgiserver._keepGoing = False\n", "colour": "purple", "author": "tom@organisms.be"}, {"error": "none", "line": "337", "code": "        # Force all worker threads to die off.\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "W", "line": "338", "code": "        self.scgiserver._threadPool.maxSpare = 0\n", "colour": "purple", "author": "tom@organisms.be"}, {"error": "none", "line": "339", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "340", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "341", "code": "def client_host(server_host):\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "342", "code": "    \"\"\"Return the host on which a client can connect to the given listener.\"\"\"\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "343", "code": "    if server_host == '0.0.0.0':\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "344", "code": "        # 0.0.0.0 is INADDR_ANY, which should answer on localhost.\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "345", "code": "        return '127.0.0.1'\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "346", "code": "    if server_host in ('::', '::0', '::0.0.0.0'):\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "347", "code": "        # :: is IN6ADDR_ANY, which should answer on localhost.\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "348", "code": "        # ::0 and ::0.0.0.0 are non-canonical but common ways to write IN6ADDR_ANY.\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "349", "code": "        return '::1'\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "350", "code": "    return server_host\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "351", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "352", "code": "def check_port(host, port, timeout=1.0):\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "353", "code": "    \"\"\"Raise an error if the given port is not free on the given host.\"\"\"\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "354", "code": "    if not host:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "355", "code": "        raise ValueError(\"Host values of '' or None are not allowed.\")\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "356", "code": "    host = client_host(host)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "357", "code": "    port = int(port)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "358", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "359", "code": "    import socket\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "360", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "361", "code": "    # AF_INET or AF_INET6 socket\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "362", "code": "    # Get the correct address family for our host (allows IPv6 addresses)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "363", "code": "    try:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "364", "code": "        info = socket.getaddrinfo(host, port, socket.AF_UNSPEC,\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "365", "code": "                                  socket.SOCK_STREAM)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "366", "code": "    except socket.gaierror:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "367", "code": "        if ':' in host:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "368", "code": "            info = [(socket.AF_INET6, socket.SOCK_STREAM, 0, \"\", (host, port, 0, 0))]\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "369", "code": "        else:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "370", "code": "            info = [(socket.AF_INET, socket.SOCK_STREAM, 0, \"\", (host, port))]\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "371", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "372", "code": "    for res in info:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "W", "line": "373", "code": "        af, socktype, proto, canonname, sa = res\n", "colour": "purple", "author": "tom@organisms.be"}, {"error": "C", "line": "374", "code": "        s = None\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "375", "code": "        try:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "376", "code": "            s = socket.socket(af, socktype, proto)\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "377", "code": "            # See http://groups.google.com/group/cherrypy-users/\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "378", "code": "            #        browse_frm/thread/bbfe5eb39c904fe0\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "379", "code": "            s.settimeout(timeout)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "380", "code": "            s.connect((host, port))\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "381", "code": "            s.close()\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "382", "code": "        except socket.error:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "383", "code": "            if s:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "384", "code": "                s.close()\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "385", "code": "        else:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "386", "code": "            raise IOError(\"Port %s is in use on %s; perhaps the previous \"\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "387", "code": "                          \"httpserver did not shut down properly.\" %\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "388", "code": "                          (repr(port), repr(host)))\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "389", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "390", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "391", "code": "# Feel free to increase these defaults on slow systems:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "392", "code": "free_port_timeout = 0.1\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "C", "line": "393", "code": "occupied_port_timeout = 1.0\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "394", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "395", "code": "def wait_for_free_port(host, port, timeout=None):\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "396", "code": "    \"\"\"Wait for the specified port to become free (drop requests).\"\"\"\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "397", "code": "    if not host:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "398", "code": "        raise ValueError(\"Host values of '' or None are not allowed.\")\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "399", "code": "    if timeout is None:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "400", "code": "        timeout = free_port_timeout\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "401", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "W", "line": "402", "code": "    for trial in range(50):\n", "colour": "purple", "author": "tom@organisms.be"}, {"error": "none", "line": "403", "code": "        try:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "404", "code": "            # we are expecting a free port, so reduce the timeout\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "405", "code": "            check_port(host, port, timeout=timeout)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "406", "code": "        except IOError:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "407", "code": "            # Give the old server thread time to free the port.\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "408", "code": "            time.sleep(timeout)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "409", "code": "        else:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "410", "code": "            return\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "411", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "412", "code": "    raise IOError(\"Port %r not free on %r\" % (port, host))\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "413", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "414", "code": "def wait_for_occupied_port(host, port, timeout=None):\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "415", "code": "    \"\"\"Wait for the specified port to become active (receive requests).\"\"\"\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "416", "code": "    if not host:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "417", "code": "        raise ValueError(\"Host values of '' or None are not allowed.\")\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "418", "code": "    if timeout is None:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "419", "code": "        timeout = occupied_port_timeout\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "420", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "W", "line": "421", "code": "    for trial in range(50):\n", "colour": "purple", "author": "tom@organisms.be"}, {"error": "none", "line": "422", "code": "        try:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "423", "code": "            check_port(host, port, timeout=timeout)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "424", "code": "        except IOError:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "425", "code": "            # port is occupied\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "426", "code": "            return\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "427", "code": "        else:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "428", "code": "            time.sleep(timeout)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "429", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "430", "code": "    if host == client_host(host):\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "431", "code": "        raise IOError(\"Port %r not bound on %r\" % (port, host))\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "432", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "433", "code": "    # On systems where a loopback interface is not available and the\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "434", "code": "    #  server is bound to all interfaces, it's difficult to determine\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "435", "code": "    #  whether the server is in fact occupying the port. In this case,\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "436", "code": "    #  just issue a warning and move on. See issue #1100.\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "437", "code": "    msg = \"Unable to verify that the server is bound on %r\" % port\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "438", "code": "    warnings.warn(msg)\n", "colour": "black", "author": "tom@organisms.be"}]]}