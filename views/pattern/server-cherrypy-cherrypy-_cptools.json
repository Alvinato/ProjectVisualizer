{"path": "/home/asumal/git/cs410/pattern/pattern/server/cherrypy/cherrypy/_cptools.py", "lines": [{"index": "1", "colour": "orange", "code": "\"\"\"CherryPy tools. A \"tool\" is any helper, adapted to CP.\n", "error": "none", "author": "tom@organisms.be"}, {"index": "2", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "3", "colour": "orange", "code": "Tools are usually designed to be used in a variety of ways (although some\n", "error": "none", "author": "tom@organisms.be"}, {"index": "4", "colour": "orange", "code": "may only offer one if they choose):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "5", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "6", "colour": "orange", "code": "    Library calls\n", "error": "none", "author": "tom@organisms.be"}, {"index": "7", "colour": "orange", "code": "        All tools are callables that can be used wherever needed.\n", "error": "none", "author": "tom@organisms.be"}, {"index": "8", "colour": "orange", "code": "        The arguments are straightforward and should be detailed within the\n", "error": "none", "author": "tom@organisms.be"}, {"index": "9", "colour": "orange", "code": "        docstring.\n", "error": "none", "author": "tom@organisms.be"}, {"index": "10", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "11", "colour": "orange", "code": "    Function decorators\n", "error": "none", "author": "tom@organisms.be"}, {"index": "12", "colour": "orange", "code": "        All tools, when called, may be used as decorators which configure\n", "error": "none", "author": "tom@organisms.be"}, {"index": "13", "colour": "orange", "code": "        individual CherryPy page handlers (methods on the CherryPy tree).\n", "error": "none", "author": "tom@organisms.be"}, {"index": "14", "colour": "orange", "code": "        That is, \"@tools.anytool()\" should \"turn on\" the tool via the\n", "error": "none", "author": "tom@organisms.be"}, {"index": "15", "colour": "orange", "code": "        decorated function's _cp_config attribute.\n", "error": "none", "author": "tom@organisms.be"}, {"index": "16", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "17", "colour": "orange", "code": "    CherryPy config\n", "error": "none", "author": "tom@organisms.be"}, {"index": "18", "colour": "orange", "code": "        If a tool exposes a \"_setup\" callable, it will be called\n", "error": "none", "author": "tom@organisms.be"}, {"index": "19", "colour": "orange", "code": "        once per Request (if the feature is \"turned on\" via config).\n", "error": "none", "author": "tom@organisms.be"}, {"index": "20", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "21", "colour": "orange", "code": "Tools may be implemented as any object with a namespace. The builtins\n", "error": "none", "author": "tom@organisms.be"}, {"index": "22", "colour": "orange", "code": "are generally either modules or instances of the tools.Tool class.\n", "error": "none", "author": "tom@organisms.be"}, {"index": "23", "colour": "orange", "code": "\"\"\"\n", "error": "none", "author": "tom@organisms.be"}, {"index": "24", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "25", "colour": "orange", "code": "import sys\n", "error": "none", "author": "tom@organisms.be"}, {"index": "26", "colour": "orange", "code": "import warnings\n", "error": "none", "author": "tom@organisms.be"}, {"index": "27", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "28", "colour": "orange", "code": "import cherrypy\n", "error": "none", "author": "tom@organisms.be"}, {"index": "29", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "30", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "31", "colour": "orange", "code": "def _getargs(func):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "32", "colour": "orange", "code": "    \"\"\"Return the names of all static arguments to the given function.\"\"\"\n", "error": "none", "author": "tom@organisms.be"}, {"index": "33", "colour": "orange", "code": "    # Use this instead of importing inspect for less mem overhead.\n", "error": "none", "author": "tom@organisms.be"}, {"index": "34", "colour": "orange", "code": "    import types\n", "error": "none", "author": "tom@organisms.be"}, {"index": "35", "colour": "orange", "code": "    if sys.version_info >= (3, 0):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "36", "colour": "orange", "code": "        if isinstance(func, types.MethodType):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "37", "colour": "orange", "code": "            func = func.__func__\n", "error": "none", "author": "tom@organisms.be"}, {"index": "38", "colour": "orange", "code": "        co = func.__code__\n", "error": "none", "author": "tom@organisms.be"}, {"index": "39", "colour": "orange", "code": "    else:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "40", "colour": "orange", "code": "        if isinstance(func, types.MethodType):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "41", "colour": "orange", "code": "            func = func.im_func\n", "error": "none", "author": "tom@organisms.be"}, {"index": "42", "colour": "orange", "code": "        co = func.func_code\n", "error": "none", "author": "tom@organisms.be"}, {"index": "43", "colour": "orange", "code": "    return co.co_varnames[:co.co_argcount]\n", "error": "none", "author": "tom@organisms.be"}, {"index": "44", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "45", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "46", "colour": "orange", "code": "_attr_error = (\"CherryPy Tools cannot be turned on directly. Instead, turn them \"\n", "error": "none", "author": "tom@organisms.be"}, {"index": "47", "colour": "orange", "code": "               \"on via config, or use them as decorators on your page handlers.\")\n", "error": "none", "author": "tom@organisms.be"}, {"index": "48", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "49", "colour": "blue", "code": "class Tool(object):\n", "error": "R", "author": "tom@organisms.be"}, {"index": "50", "colour": "orange", "code": "    \"\"\"A registered function for use with CherryPy request-processing hooks.\n", "error": "none", "author": "tom@organisms.be"}, {"index": "51", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "52", "colour": "orange", "code": "    help(tool.callable) should give you more information about this Tool.\n", "error": "none", "author": "tom@organisms.be"}, {"index": "53", "colour": "orange", "code": "    \"\"\"\n", "error": "none", "author": "tom@organisms.be"}, {"index": "54", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "55", "colour": "orange", "code": "    namespace = \"tools\"\n", "error": "none", "author": "tom@organisms.be"}, {"index": "56", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "57", "colour": "green", "code": "    def __init__(self, point, callable, name=None, priority=50):\n", "error": "W", "author": "tom@organisms.be"}, {"index": "58", "colour": "orange", "code": "        self._point = point\n", "error": "none", "author": "tom@organisms.be"}, {"index": "59", "colour": "orange", "code": "        self.callable = callable\n", "error": "none", "author": "tom@organisms.be"}, {"index": "60", "colour": "orange", "code": "        self._name = name\n", "error": "none", "author": "tom@organisms.be"}, {"index": "61", "colour": "orange", "code": "        self._priority = priority\n", "error": "none", "author": "tom@organisms.be"}, {"index": "62", "colour": "orange", "code": "        self.__doc__ = self.callable.__doc__\n", "error": "none", "author": "tom@organisms.be"}, {"index": "63", "colour": "orange", "code": "        self._setargs()\n", "error": "none", "author": "tom@organisms.be"}, {"index": "64", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "65", "colour": "blue", "code": "    def _get_on(self):\n", "error": "R", "author": "tom@organisms.be"}, {"index": "66", "colour": "orange", "code": "        raise AttributeError(_attr_error)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "67", "colour": "blue", "code": "    def _set_on(self, value):\n", "error": "R", "author": "tom@organisms.be"}, {"index": "68", "colour": "orange", "code": "        raise AttributeError(_attr_error)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "69", "colour": "orange", "code": "    on = property(_get_on, _set_on)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "70", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "71", "colour": "orange", "code": "    def _setargs(self):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "72", "colour": "orange", "code": "        \"\"\"Copy func parameter names to obj attributes.\"\"\"\n", "error": "none", "author": "tom@organisms.be"}, {"index": "73", "colour": "orange", "code": "        try:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "74", "colour": "orange", "code": "            for arg in _getargs(self.callable):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "75", "colour": "orange", "code": "                setattr(self, arg, None)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "76", "colour": "orange", "code": "        except (TypeError, AttributeError):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "77", "colour": "orange", "code": "            if hasattr(self.callable, \"__call__\"):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "78", "colour": "orange", "code": "                for arg in _getargs(self.callable.__call__):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "79", "colour": "orange", "code": "                    setattr(self, arg, None)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "80", "colour": "orange", "code": "        # IronPython 1.0 raises NotImplementedError because\n", "error": "none", "author": "tom@organisms.be"}, {"index": "81", "colour": "orange", "code": "        # inspect.getargspec tries to access Python bytecode\n", "error": "none", "author": "tom@organisms.be"}, {"index": "82", "colour": "orange", "code": "        # in co_code attribute.\n", "error": "none", "author": "tom@organisms.be"}, {"index": "83", "colour": "orange", "code": "        except NotImplementedError:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "84", "colour": "orange", "code": "            pass\n", "error": "none", "author": "tom@organisms.be"}, {"index": "85", "colour": "orange", "code": "        # IronPython 1B1 may raise IndexError in some cases,\n", "error": "none", "author": "tom@organisms.be"}, {"index": "86", "colour": "orange", "code": "        # but if we trap it here it doesn't prevent CP from working.\n", "error": "none", "author": "tom@organisms.be"}, {"index": "87", "colour": "orange", "code": "        except IndexError:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "88", "colour": "orange", "code": "            pass\n", "error": "none", "author": "tom@organisms.be"}, {"index": "89", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "90", "colour": "orange", "code": "    def _merged_args(self, d=None):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "91", "colour": "orange", "code": "        \"\"\"Return a dict of configuration entries for this Tool.\"\"\"\n", "error": "none", "author": "tom@organisms.be"}, {"index": "92", "colour": "orange", "code": "        if d:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "93", "colour": "orange", "code": "            conf = d.copy()\n", "error": "none", "author": "tom@organisms.be"}, {"index": "94", "colour": "orange", "code": "        else:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "95", "colour": "orange", "code": "            conf = {}\n", "error": "none", "author": "tom@organisms.be"}, {"index": "96", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "97", "colour": "orange", "code": "        tm = cherrypy.serving.request.toolmaps[self.namespace]\n", "error": "none", "author": "tom@organisms.be"}, {"index": "98", "colour": "orange", "code": "        if self._name in tm:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "99", "colour": "orange", "code": "            conf.update(tm[self._name])\n", "error": "none", "author": "tom@organisms.be"}, {"index": "100", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "101", "colour": "orange", "code": "        if \"on\" in conf:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "102", "colour": "orange", "code": "            del conf[\"on\"]\n", "error": "none", "author": "tom@organisms.be"}, {"index": "103", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "104", "colour": "orange", "code": "        return conf\n", "error": "none", "author": "tom@organisms.be"}, {"index": "105", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "106", "colour": "orange", "code": "    def __call__(self, *args, **kwargs):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "107", "colour": "orange", "code": "        \"\"\"Compile-time decorator (turn on the tool in config).\n", "error": "none", "author": "tom@organisms.be"}, {"index": "108", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "109", "colour": "orange", "code": "        For example::\n", "error": "none", "author": "tom@organisms.be"}, {"index": "110", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "111", "colour": "orange", "code": "            @tools.proxy()\n", "error": "none", "author": "tom@organisms.be"}, {"index": "112", "colour": "orange", "code": "            def whats_my_base(self):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "113", "colour": "orange", "code": "                return cherrypy.request.base\n", "error": "none", "author": "tom@organisms.be"}, {"index": "114", "colour": "orange", "code": "            whats_my_base.exposed = True\n", "error": "none", "author": "tom@organisms.be"}, {"index": "115", "colour": "orange", "code": "        \"\"\"\n", "error": "none", "author": "tom@organisms.be"}, {"index": "116", "colour": "orange", "code": "        if args:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "117", "colour": "orange", "code": "            raise TypeError(\"The %r Tool does not accept positional \"\n", "error": "none", "author": "tom@organisms.be"}, {"index": "118", "colour": "orange", "code": "                            \"arguments; you must use keyword arguments.\"\n", "error": "none", "author": "tom@organisms.be"}, {"index": "119", "colour": "orange", "code": "                            % self._name)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "120", "colour": "orange", "code": "        def tool_decorator(f):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "121", "colour": "orange", "code": "            if not hasattr(f, \"_cp_config\"):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "122", "colour": "green", "code": "                f._cp_config = {}\n", "error": "W", "author": "tom@organisms.be"}, {"index": "123", "colour": "orange", "code": "            subspace = self.namespace + \".\" + self._name + \".\"\n", "error": "none", "author": "tom@organisms.be"}, {"index": "124", "colour": "green", "code": "            f._cp_config[subspace + \"on\"] = True\n", "error": "W", "author": "tom@organisms.be"}, {"index": "125", "colour": "orange", "code": "            for k, v in kwargs.items():\n", "error": "none", "author": "tom@organisms.be"}, {"index": "126", "colour": "green", "code": "                f._cp_config[subspace + k] = v\n", "error": "W", "author": "tom@organisms.be"}, {"index": "127", "colour": "orange", "code": "            return f\n", "error": "none", "author": "tom@organisms.be"}, {"index": "128", "colour": "orange", "code": "        return tool_decorator\n", "error": "none", "author": "tom@organisms.be"}, {"index": "129", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "130", "colour": "orange", "code": "    def _setup(self):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "131", "colour": "orange", "code": "        \"\"\"Hook this tool into cherrypy.request.\n", "error": "none", "author": "tom@organisms.be"}, {"index": "132", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "133", "colour": "orange", "code": "        The standard CherryPy request object will automatically call this\n", "error": "none", "author": "tom@organisms.be"}, {"index": "134", "colour": "orange", "code": "        method when the tool is \"turned on\" in config.\n", "error": "none", "author": "tom@organisms.be"}, {"index": "135", "colour": "orange", "code": "        \"\"\"\n", "error": "none", "author": "tom@organisms.be"}, {"index": "136", "colour": "orange", "code": "        conf = self._merged_args()\n", "error": "none", "author": "tom@organisms.be"}, {"index": "137", "colour": "orange", "code": "        p = conf.pop(\"priority\", None)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "138", "colour": "orange", "code": "        if p is None:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "139", "colour": "orange", "code": "            p = getattr(self.callable, \"priority\", self._priority)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "140", "colour": "green", "code": "        cherrypy.serving.request.hooks.attach(self._point, self.callable,\n", "error": "W", "author": "tom@organisms.be"}, {"index": "141", "colour": "orange", "code": "                                              priority=p, **conf)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "142", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "143", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "144", "colour": "blue", "code": "class HandlerTool(Tool):\n", "error": "R", "author": "tom@organisms.be"}, {"index": "145", "colour": "orange", "code": "    \"\"\"Tool which is called 'before main', that may skip normal handlers.\n", "error": "none", "author": "tom@organisms.be"}, {"index": "146", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "147", "colour": "orange", "code": "    If the tool successfully handles the request (by setting response.body),\n", "error": "none", "author": "tom@organisms.be"}, {"index": "148", "colour": "orange", "code": "    if should return True. This will cause CherryPy to skip any 'normal' page\n", "error": "none", "author": "tom@organisms.be"}, {"index": "149", "colour": "orange", "code": "    handler. If the tool did not handle the request, it should return False\n", "error": "none", "author": "tom@organisms.be"}, {"index": "150", "colour": "orange", "code": "    to tell CherryPy to continue on and call the normal page handler. If the\n", "error": "none", "author": "tom@organisms.be"}, {"index": "151", "colour": "orange", "code": "    tool is declared AS a page handler (see the 'handler' method), returning\n", "error": "none", "author": "tom@organisms.be"}, {"index": "152", "colour": "orange", "code": "    False will raise NotFound.\n", "error": "none", "author": "tom@organisms.be"}, {"index": "153", "colour": "orange", "code": "    \"\"\"\n", "error": "none", "author": "tom@organisms.be"}, {"index": "154", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "155", "colour": "green", "code": "    def __init__(self, callable, name=None):\n", "error": "W", "author": "tom@organisms.be"}, {"index": "156", "colour": "orange", "code": "        Tool.__init__(self, 'before_handler', callable, name)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "157", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "158", "colour": "orange", "code": "    def handler(self, *args, **kwargs):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "159", "colour": "orange", "code": "        \"\"\"Use this tool as a CherryPy page handler.\n", "error": "none", "author": "tom@organisms.be"}, {"index": "160", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "161", "colour": "orange", "code": "        For example::\n", "error": "none", "author": "tom@organisms.be"}, {"index": "162", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "163", "colour": "orange", "code": "            class Root:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "164", "colour": "orange", "code": "                nav = tools.staticdir.handler(section=\"/nav\", dir=\"nav\",\n", "error": "none", "author": "tom@organisms.be"}, {"index": "165", "colour": "orange", "code": "                                              root=absDir)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "166", "colour": "orange", "code": "        \"\"\"\n", "error": "none", "author": "tom@organisms.be"}, {"index": "167", "colour": "green", "code": "        def handle_func(*a, **kw):\n", "error": "W", "author": "tom@organisms.be"}, {"index": "168", "colour": "green", "code": "            handled = self.callable(*args, **self._merged_args(kwargs))\n", "error": "W", "author": "tom@organisms.be"}, {"index": "169", "colour": "orange", "code": "            if not handled:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "170", "colour": "orange", "code": "                raise cherrypy.NotFound()\n", "error": "none", "author": "tom@organisms.be"}, {"index": "171", "colour": "orange", "code": "            return cherrypy.serving.response.body\n", "error": "none", "author": "tom@organisms.be"}, {"index": "172", "colour": "orange", "code": "        handle_func.exposed = True\n", "error": "none", "author": "tom@organisms.be"}, {"index": "173", "colour": "orange", "code": "        return handle_func\n", "error": "none", "author": "tom@organisms.be"}, {"index": "174", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "175", "colour": "orange", "code": "    def _wrapper(self, **kwargs):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "176", "colour": "orange", "code": "        if self.callable(**kwargs):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "177", "colour": "orange", "code": "            cherrypy.serving.request.handler = None\n", "error": "none", "author": "tom@organisms.be"}, {"index": "178", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "179", "colour": "orange", "code": "    def _setup(self):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "180", "colour": "orange", "code": "        \"\"\"Hook this tool into cherrypy.request.\n", "error": "none", "author": "tom@organisms.be"}, {"index": "181", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "182", "colour": "orange", "code": "        The standard CherryPy request object will automatically call this\n", "error": "none", "author": "tom@organisms.be"}, {"index": "183", "colour": "orange", "code": "        method when the tool is \"turned on\" in config.\n", "error": "none", "author": "tom@organisms.be"}, {"index": "184", "colour": "orange", "code": "        \"\"\"\n", "error": "none", "author": "tom@organisms.be"}, {"index": "185", "colour": "orange", "code": "        conf = self._merged_args()\n", "error": "none", "author": "tom@organisms.be"}, {"index": "186", "colour": "orange", "code": "        p = conf.pop(\"priority\", None)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "187", "colour": "orange", "code": "        if p is None:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "188", "colour": "orange", "code": "            p = getattr(self.callable, \"priority\", self._priority)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "189", "colour": "green", "code": "        cherrypy.serving.request.hooks.attach(self._point, self._wrapper,\n", "error": "W", "author": "tom@organisms.be"}, {"index": "190", "colour": "orange", "code": "                                              priority=p, **conf)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "191", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "192", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "193", "colour": "blue", "code": "class HandlerWrapperTool(Tool):\n", "error": "R", "author": "tom@organisms.be"}, {"index": "194", "colour": "orange", "code": "    \"\"\"Tool which wraps request.handler in a provided wrapper function.\n", "error": "none", "author": "tom@organisms.be"}, {"index": "195", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "196", "colour": "orange", "code": "    The 'newhandler' arg must be a handler wrapper function that takes a\n", "error": "none", "author": "tom@organisms.be"}, {"index": "197", "colour": "orange", "code": "    'next_handler' argument, plus ``*args`` and ``**kwargs``. Like all\n", "error": "none", "author": "tom@organisms.be"}, {"index": "198", "colour": "orange", "code": "    page handler\n", "error": "none", "author": "tom@organisms.be"}, {"index": "199", "colour": "orange", "code": "    functions, it must return an iterable for use as cherrypy.response.body.\n", "error": "none", "author": "tom@organisms.be"}, {"index": "200", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "201", "colour": "orange", "code": "    For example, to allow your 'inner' page handlers to return dicts\n", "error": "none", "author": "tom@organisms.be"}, {"index": "202", "colour": "orange", "code": "    which then get interpolated into a template::\n", "error": "none", "author": "tom@organisms.be"}, {"index": "203", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "204", "colour": "orange", "code": "        def interpolator(next_handler, *args, **kwargs):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "205", "colour": "orange", "code": "            filename = cherrypy.request.config.get('template')\n", "error": "none", "author": "tom@organisms.be"}, {"index": "206", "colour": "orange", "code": "            cherrypy.response.template = env.get_template(filename)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "207", "colour": "orange", "code": "            response_dict = next_handler(*args, **kwargs)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "208", "colour": "orange", "code": "            return cherrypy.response.template.render(**response_dict)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "209", "colour": "orange", "code": "        cherrypy.tools.jinja = HandlerWrapperTool(interpolator)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "210", "colour": "orange", "code": "    \"\"\"\n", "error": "none", "author": "tom@organisms.be"}, {"index": "211", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "212", "colour": "green", "code": "    def __init__(self, newhandler, point='before_handler', name=None, priority=50):\n", "error": "W", "author": "tom@organisms.be"}, {"index": "213", "colour": "orange", "code": "        self.newhandler = newhandler\n", "error": "none", "author": "tom@organisms.be"}, {"index": "214", "colour": "orange", "code": "        self._point = point\n", "error": "none", "author": "tom@organisms.be"}, {"index": "215", "colour": "orange", "code": "        self._name = name\n", "error": "none", "author": "tom@organisms.be"}, {"index": "216", "colour": "orange", "code": "        self._priority = priority\n", "error": "none", "author": "tom@organisms.be"}, {"index": "217", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "218", "colour": "green", "code": "    def callable(self, debug=False):\n", "error": "W", "author": "tom@organisms.be"}, {"index": "219", "colour": "orange", "code": "        innerfunc = cherrypy.serving.request.handler\n", "error": "none", "author": "tom@organisms.be"}, {"index": "220", "colour": "orange", "code": "        def wrap(*args, **kwargs):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "221", "colour": "orange", "code": "            return self.newhandler(innerfunc, *args, **kwargs)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "222", "colour": "orange", "code": "        cherrypy.serving.request.handler = wrap\n", "error": "none", "author": "tom@organisms.be"}, {"index": "223", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "224", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "225", "colour": "blue", "code": "class ErrorTool(Tool):\n", "error": "R", "author": "tom@organisms.be"}, {"index": "226", "colour": "orange", "code": "    \"\"\"Tool which is used to replace the default request.error_response.\"\"\"\n", "error": "none", "author": "tom@organisms.be"}, {"index": "227", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "228", "colour": "green", "code": "    def __init__(self, callable, name=None):\n", "error": "W", "author": "tom@organisms.be"}, {"index": "229", "colour": "orange", "code": "        Tool.__init__(self, None, callable, name)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "230", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "231", "colour": "orange", "code": "    def _wrapper(self):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "232", "colour": "orange", "code": "        self.callable(**self._merged_args())\n", "error": "none", "author": "tom@organisms.be"}, {"index": "233", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "234", "colour": "orange", "code": "    def _setup(self):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "235", "colour": "orange", "code": "        \"\"\"Hook this tool into cherrypy.request.\n", "error": "none", "author": "tom@organisms.be"}, {"index": "236", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "237", "colour": "orange", "code": "        The standard CherryPy request object will automatically call this\n", "error": "none", "author": "tom@organisms.be"}, {"index": "238", "colour": "orange", "code": "        method when the tool is \"turned on\" in config.\n", "error": "none", "author": "tom@organisms.be"}, {"index": "239", "colour": "orange", "code": "        \"\"\"\n", "error": "none", "author": "tom@organisms.be"}, {"index": "240", "colour": "orange", "code": "        cherrypy.serving.request.error_response = self._wrapper\n", "error": "none", "author": "tom@organisms.be"}, {"index": "241", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "242", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "243", "colour": "orange", "code": "#                              Builtin tools                              #\n", "error": "none", "author": "tom@organisms.be"}, {"index": "244", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "245", "colour": "orange", "code": "from cherrypy.lib import cptools, encoding, auth, static, jsontools\n", "error": "none", "author": "tom@organisms.be"}, {"index": "246", "colour": "orange", "code": "from cherrypy.lib import sessions as _sessions, xmlrpcutil as _xmlrpc\n", "error": "none", "author": "tom@organisms.be"}, {"index": "247", "colour": "orange", "code": "from cherrypy.lib import caching as _caching\n", "error": "none", "author": "tom@organisms.be"}, {"index": "248", "colour": "orange", "code": "from cherrypy.lib import auth_basic, auth_digest\n", "error": "none", "author": "tom@organisms.be"}, {"index": "249", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "250", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "251", "colour": "blue", "code": "class SessionTool(Tool):\n", "error": "R", "author": "tom@organisms.be"}, {"index": "252", "colour": "orange", "code": "    \"\"\"Session Tool for CherryPy.\n", "error": "none", "author": "tom@organisms.be"}, {"index": "253", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "254", "colour": "orange", "code": "    sessions.locking\n", "error": "none", "author": "tom@organisms.be"}, {"index": "255", "colour": "orange", "code": "        When 'implicit' (the default), the session will be locked for you,\n", "error": "none", "author": "tom@organisms.be"}, {"index": "256", "colour": "orange", "code": "        just before running the page handler.\n", "error": "none", "author": "tom@organisms.be"}, {"index": "257", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "258", "colour": "orange", "code": "        When 'early', the session will be locked before reading the request\n", "error": "none", "author": "tom@organisms.be"}, {"index": "259", "colour": "orange", "code": "        body. This is off by default for safety reasons; for example,\n", "error": "none", "author": "tom@organisms.be"}, {"index": "260", "colour": "orange", "code": "        a large upload would block the session, denying an AJAX\n", "error": "none", "author": "tom@organisms.be"}, {"index": "261", "colour": "orange", "code": "        progress meter (see http://www.cherrypy.org/ticket/630).\n", "error": "none", "author": "tom@organisms.be"}, {"index": "262", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "263", "colour": "orange", "code": "        When 'explicit' (or any other value), you need to call\n", "error": "none", "author": "tom@organisms.be"}, {"index": "264", "colour": "orange", "code": "        cherrypy.session.acquire_lock() yourself before using\n", "error": "none", "author": "tom@organisms.be"}, {"index": "265", "colour": "orange", "code": "        session data.\n", "error": "none", "author": "tom@organisms.be"}, {"index": "266", "colour": "orange", "code": "    \"\"\"\n", "error": "none", "author": "tom@organisms.be"}, {"index": "267", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "268", "colour": "orange", "code": "    def __init__(self):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "269", "colour": "orange", "code": "        # _sessions.init must be bound after headers are read\n", "error": "none", "author": "tom@organisms.be"}, {"index": "270", "colour": "orange", "code": "        Tool.__init__(self, 'before_request_body', _sessions.init)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "271", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "272", "colour": "blue", "code": "    def _lock_session(self):\n", "error": "R", "author": "tom@organisms.be"}, {"index": "273", "colour": "orange", "code": "        cherrypy.serving.session.acquire_lock()\n", "error": "none", "author": "tom@organisms.be"}, {"index": "274", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "275", "colour": "orange", "code": "    def _setup(self):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "276", "colour": "orange", "code": "        \"\"\"Hook this tool into cherrypy.request.\n", "error": "none", "author": "tom@organisms.be"}, {"index": "277", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "278", "colour": "orange", "code": "        The standard CherryPy request object will automatically call this\n", "error": "none", "author": "tom@organisms.be"}, {"index": "279", "colour": "orange", "code": "        method when the tool is \"turned on\" in config.\n", "error": "none", "author": "tom@organisms.be"}, {"index": "280", "colour": "orange", "code": "        \"\"\"\n", "error": "none", "author": "tom@organisms.be"}, {"index": "281", "colour": "orange", "code": "        hooks = cherrypy.serving.request.hooks\n", "error": "none", "author": "tom@organisms.be"}, {"index": "282", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "283", "colour": "orange", "code": "        conf = self._merged_args()\n", "error": "none", "author": "tom@organisms.be"}, {"index": "284", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "285", "colour": "orange", "code": "        p = conf.pop(\"priority\", None)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "286", "colour": "orange", "code": "        if p is None:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "287", "colour": "orange", "code": "            p = getattr(self.callable, \"priority\", self._priority)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "288", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "289", "colour": "green", "code": "        hooks.attach(self._point, self.callable, priority=p, **conf)\n", "error": "W", "author": "tom@organisms.be"}, {"index": "290", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "291", "colour": "orange", "code": "        locking = conf.pop('locking', 'implicit')\n", "error": "none", "author": "tom@organisms.be"}, {"index": "292", "colour": "orange", "code": "        if locking == 'implicit':\n", "error": "none", "author": "tom@organisms.be"}, {"index": "293", "colour": "orange", "code": "            hooks.attach('before_handler', self._lock_session)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "294", "colour": "orange", "code": "        elif locking == 'early':\n", "error": "none", "author": "tom@organisms.be"}, {"index": "295", "colour": "orange", "code": "            # Lock before the request body (but after _sessions.init runs!)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "296", "colour": "orange", "code": "            hooks.attach('before_request_body', self._lock_session,\n", "error": "none", "author": "tom@organisms.be"}, {"index": "297", "colour": "orange", "code": "                         priority=60)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "298", "colour": "orange", "code": "        else:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "299", "colour": "orange", "code": "            # Don't lock\n", "error": "none", "author": "tom@organisms.be"}, {"index": "300", "colour": "orange", "code": "            pass\n", "error": "none", "author": "tom@organisms.be"}, {"index": "301", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "302", "colour": "orange", "code": "        hooks.attach('before_finalize', _sessions.save)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "303", "colour": "orange", "code": "        hooks.attach('on_end_request', _sessions.close)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "304", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "305", "colour": "orange", "code": "    def regenerate(self):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "306", "colour": "orange", "code": "        \"\"\"Drop the current session and make a new one (with a new id).\"\"\"\n", "error": "none", "author": "tom@organisms.be"}, {"index": "307", "colour": "orange", "code": "        sess = cherrypy.serving.session\n", "error": "none", "author": "tom@organisms.be"}, {"index": "308", "colour": "orange", "code": "        sess.regenerate()\n", "error": "none", "author": "tom@organisms.be"}, {"index": "309", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "310", "colour": "orange", "code": "        # Grab cookie-relevant tool args\n", "error": "none", "author": "tom@organisms.be"}, {"index": "311", "colour": "orange", "code": "        conf = dict([(k, v) for k, v in self._merged_args().items()\n", "error": "none", "author": "tom@organisms.be"}, {"index": "312", "colour": "orange", "code": "                     if k in ('path', 'path_header', 'name', 'timeout',\n", "error": "none", "author": "tom@organisms.be"}, {"index": "313", "colour": "orange", "code": "                              'domain', 'secure')])\n", "error": "none", "author": "tom@organisms.be"}, {"index": "314", "colour": "green", "code": "        _sessions.set_response_cookie(**conf)\n", "error": "W", "author": "tom@organisms.be"}, {"index": "315", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "316", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "317", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "318", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "319", "colour": "blue", "code": "class XMLRPCController(object):\n", "error": "R", "author": "tom@organisms.be"}, {"index": "320", "colour": "orange", "code": "    \"\"\"A Controller (page handler collection) for XML-RPC.\n", "error": "none", "author": "tom@organisms.be"}, {"index": "321", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "322", "colour": "orange", "code": "    To use it, have your controllers subclass this base class (it will\n", "error": "none", "author": "tom@organisms.be"}, {"index": "323", "colour": "orange", "code": "    turn on the tool for you).\n", "error": "none", "author": "tom@organisms.be"}, {"index": "324", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "325", "colour": "orange", "code": "    You can also supply the following optional config entries::\n", "error": "none", "author": "tom@organisms.be"}, {"index": "326", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "327", "colour": "orange", "code": "        tools.xmlrpc.encoding: 'utf-8'\n", "error": "none", "author": "tom@organisms.be"}, {"index": "328", "colour": "orange", "code": "        tools.xmlrpc.allow_none: 0\n", "error": "none", "author": "tom@organisms.be"}, {"index": "329", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "330", "colour": "orange", "code": "    XML-RPC is a rather discontinuous layer over HTTP; dispatching to the\n", "error": "none", "author": "tom@organisms.be"}, {"index": "331", "colour": "orange", "code": "    appropriate handler must first be performed according to the URL, and\n", "error": "none", "author": "tom@organisms.be"}, {"index": "332", "colour": "orange", "code": "    then a second dispatch step must take place according to the RPC method\n", "error": "none", "author": "tom@organisms.be"}, {"index": "333", "colour": "orange", "code": "    specified in the request body. It also allows a superfluous \"/RPC2\"\n", "error": "none", "author": "tom@organisms.be"}, {"index": "334", "colour": "orange", "code": "    prefix in the URL, supplies its own handler args in the body, and\n", "error": "none", "author": "tom@organisms.be"}, {"index": "335", "colour": "orange", "code": "    requires a 200 OK \"Fault\" response instead of 404 when the desired\n", "error": "none", "author": "tom@organisms.be"}, {"index": "336", "colour": "orange", "code": "    method is not found.\n", "error": "none", "author": "tom@organisms.be"}, {"index": "337", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "338", "colour": "orange", "code": "    Therefore, XML-RPC cannot be implemented for CherryPy via a Tool alone.\n", "error": "none", "author": "tom@organisms.be"}, {"index": "339", "colour": "orange", "code": "    This Controller acts as the dispatch target for the first half (based\n", "error": "none", "author": "tom@organisms.be"}, {"index": "340", "colour": "orange", "code": "    on the URL); it then reads the RPC method from the request body and\n", "error": "none", "author": "tom@organisms.be"}, {"index": "341", "colour": "orange", "code": "    does its own second dispatch step based on that method. It also reads\n", "error": "none", "author": "tom@organisms.be"}, {"index": "342", "colour": "orange", "code": "    body params, and returns a Fault on error.\n", "error": "none", "author": "tom@organisms.be"}, {"index": "343", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "344", "colour": "orange", "code": "    The XMLRPCDispatcher strips any /RPC2 prefix; if you aren't using /RPC2\n", "error": "none", "author": "tom@organisms.be"}, {"index": "345", "colour": "orange", "code": "    in your URL's, you can safely skip turning on the XMLRPCDispatcher.\n", "error": "none", "author": "tom@organisms.be"}, {"index": "346", "colour": "orange", "code": "    Otherwise, you need to use declare it in config::\n", "error": "none", "author": "tom@organisms.be"}, {"index": "347", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "348", "colour": "orange", "code": "        request.dispatch: cherrypy.dispatch.XMLRPCDispatcher()\n", "error": "none", "author": "tom@organisms.be"}, {"index": "349", "colour": "orange", "code": "    \"\"\"\n", "error": "none", "author": "tom@organisms.be"}, {"index": "350", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "351", "colour": "orange", "code": "    # Note we're hard-coding this into the 'tools' namespace. We could do\n", "error": "none", "author": "tom@organisms.be"}, {"index": "352", "colour": "orange", "code": "    # a huge amount of work to make it relocatable, but the only reason why\n", "error": "none", "author": "tom@organisms.be"}, {"index": "353", "colour": "orange", "code": "    # would be if someone actually disabled the default_toolbox. Meh.\n", "error": "none", "author": "tom@organisms.be"}, {"index": "354", "colour": "orange", "code": "    _cp_config = {'tools.xmlrpc.on': True}\n", "error": "none", "author": "tom@organisms.be"}, {"index": "355", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "356", "colour": "orange", "code": "    def default(self, *vpath, **params):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "357", "colour": "orange", "code": "        rpcparams, rpcmethod = _xmlrpc.process_body()\n", "error": "none", "author": "tom@organisms.be"}, {"index": "358", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "359", "colour": "orange", "code": "        subhandler = self\n", "error": "none", "author": "tom@organisms.be"}, {"index": "360", "colour": "orange", "code": "        for attr in str(rpcmethod).split('.'):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "361", "colour": "orange", "code": "            subhandler = getattr(subhandler, attr, None)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "362", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "363", "colour": "orange", "code": "        if subhandler and getattr(subhandler, \"exposed\", False):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "364", "colour": "green", "code": "            body = subhandler(*(vpath + rpcparams), **params)\n", "error": "W", "author": "tom@organisms.be"}, {"index": "365", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "366", "colour": "orange", "code": "        else:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "367", "colour": "orange", "code": "            # http://www.cherrypy.org/ticket/533\n", "error": "none", "author": "tom@organisms.be"}, {"index": "368", "colour": "orange", "code": "            # if a method is not found, an xmlrpclib.Fault should be returned\n", "error": "none", "author": "tom@organisms.be"}, {"index": "369", "colour": "orange", "code": "            # raising an exception here will do that; see\n", "error": "none", "author": "tom@organisms.be"}, {"index": "370", "colour": "orange", "code": "            # cherrypy.lib.xmlrpcutil.on_error\n", "error": "none", "author": "tom@organisms.be"}, {"index": "371", "colour": "green", "code": "            raise Exception('method \"%s\" is not supported' % attr)\n", "error": "W", "author": "tom@organisms.be"}, {"index": "372", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "373", "colour": "orange", "code": "        conf = cherrypy.serving.request.toolmaps['tools'].get(\"xmlrpc\", {})\n", "error": "none", "author": "tom@organisms.be"}, {"index": "374", "colour": "orange", "code": "        _xmlrpc.respond(body,\n", "error": "none", "author": "tom@organisms.be"}, {"index": "375", "colour": "orange", "code": "                        conf.get('encoding', 'utf-8'),\n", "error": "none", "author": "tom@organisms.be"}, {"index": "376", "colour": "orange", "code": "                        conf.get('allow_none', 0))\n", "error": "none", "author": "tom@organisms.be"}, {"index": "377", "colour": "orange", "code": "        return cherrypy.serving.response.body\n", "error": "none", "author": "tom@organisms.be"}, {"index": "378", "colour": "orange", "code": "    default.exposed = True\n", "error": "none", "author": "tom@organisms.be"}, {"index": "379", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "380", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "381", "colour": "blue", "code": "class SessionAuthTool(HandlerTool):\n", "error": "R", "author": "tom@organisms.be"}, {"index": "382", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "383", "colour": "orange", "code": "    def _setargs(self):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "384", "colour": "orange", "code": "        for name in dir(cptools.SessionAuth):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "385", "colour": "orange", "code": "            if not name.startswith(\"__\"):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "386", "colour": "orange", "code": "                setattr(self, name, None)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "387", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "388", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "389", "colour": "blue", "code": "class CachingTool(Tool):\n", "error": "R", "author": "tom@organisms.be"}, {"index": "390", "colour": "orange", "code": "    \"\"\"Caching Tool for CherryPy.\"\"\"\n", "error": "none", "author": "tom@organisms.be"}, {"index": "391", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "392", "colour": "blue", "code": "    def _wrapper(self, **kwargs):\n", "error": "R", "author": "tom@organisms.be"}, {"index": "393", "colour": "orange", "code": "        request = cherrypy.serving.request\n", "error": "none", "author": "tom@organisms.be"}, {"index": "394", "colour": "orange", "code": "        if _caching.get(**kwargs):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "395", "colour": "orange", "code": "            request.handler = None\n", "error": "none", "author": "tom@organisms.be"}, {"index": "396", "colour": "orange", "code": "        else:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "397", "colour": "orange", "code": "            if request.cacheable:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "398", "colour": "orange", "code": "                # Note the devious technique here of adding hooks on the fly\n", "error": "none", "author": "tom@organisms.be"}, {"index": "399", "colour": "orange", "code": "                request.hooks.attach('before_finalize', _caching.tee_output,\n", "error": "none", "author": "tom@organisms.be"}, {"index": "400", "colour": "orange", "code": "                                     priority = 90)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "401", "colour": "orange", "code": "    _wrapper.priority = 20\n", "error": "none", "author": "tom@organisms.be"}, {"index": "402", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "403", "colour": "orange", "code": "    def _setup(self):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "404", "colour": "orange", "code": "        \"\"\"Hook caching into cherrypy.request.\"\"\"\n", "error": "none", "author": "tom@organisms.be"}, {"index": "405", "colour": "orange", "code": "        conf = self._merged_args()\n", "error": "none", "author": "tom@organisms.be"}, {"index": "406", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "407", "colour": "orange", "code": "        p = conf.pop(\"priority\", None)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "408", "colour": "green", "code": "        cherrypy.serving.request.hooks.attach('before_handler', self._wrapper,\n", "error": "W", "author": "tom@organisms.be"}, {"index": "409", "colour": "orange", "code": "                                              priority=p, **conf)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "410", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "411", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "412", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "413", "colour": "blue", "code": "class Toolbox(object):\n", "error": "R", "author": "tom@organisms.be"}, {"index": "414", "colour": "orange", "code": "    \"\"\"A collection of Tools.\n", "error": "none", "author": "tom@organisms.be"}, {"index": "415", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "416", "colour": "orange", "code": "    This object also functions as a config namespace handler for itself.\n", "error": "none", "author": "tom@organisms.be"}, {"index": "417", "colour": "orange", "code": "    Custom toolboxes should be added to each Application's toolboxes dict.\n", "error": "none", "author": "tom@organisms.be"}, {"index": "418", "colour": "orange", "code": "    \"\"\"\n", "error": "none", "author": "tom@organisms.be"}, {"index": "419", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "420", "colour": "orange", "code": "    def __init__(self, namespace):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "421", "colour": "orange", "code": "        self.namespace = namespace\n", "error": "none", "author": "tom@organisms.be"}, {"index": "422", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "423", "colour": "orange", "code": "    def __setattr__(self, name, value):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "424", "colour": "orange", "code": "        # If the Tool._name is None, supply it from the attribute name.\n", "error": "none", "author": "tom@organisms.be"}, {"index": "425", "colour": "orange", "code": "        if isinstance(value, Tool):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "426", "colour": "green", "code": "            if value._name is None:\n", "error": "W", "author": "tom@organisms.be"}, {"index": "427", "colour": "green", "code": "                value._name = name\n", "error": "W", "author": "tom@organisms.be"}, {"index": "428", "colour": "orange", "code": "            value.namespace = self.namespace\n", "error": "none", "author": "tom@organisms.be"}, {"index": "429", "colour": "orange", "code": "        object.__setattr__(self, name, value)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "430", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "431", "colour": "orange", "code": "    def __enter__(self):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "432", "colour": "orange", "code": "        \"\"\"Populate request.toolmaps from tools specified in config.\"\"\"\n", "error": "none", "author": "tom@organisms.be"}, {"index": "433", "colour": "green", "code": "        cherrypy.serving.request.toolmaps[self.namespace] = map = {}\n", "error": "W", "author": "tom@organisms.be"}, {"index": "434", "colour": "orange", "code": "        def populate(k, v):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "435", "colour": "orange", "code": "            toolname, arg = k.split(\".\", 1)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "436", "colour": "orange", "code": "            bucket = map.setdefault(toolname, {})\n", "error": "none", "author": "tom@organisms.be"}, {"index": "437", "colour": "orange", "code": "            bucket[arg] = v\n", "error": "none", "author": "tom@organisms.be"}, {"index": "438", "colour": "orange", "code": "        return populate\n", "error": "none", "author": "tom@organisms.be"}, {"index": "439", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "440", "colour": "orange", "code": "    def __exit__(self, exc_type, exc_val, exc_tb):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "441", "colour": "orange", "code": "        \"\"\"Run tool._setup() for each tool in our toolmap.\"\"\"\n", "error": "none", "author": "tom@organisms.be"}, {"index": "442", "colour": "green", "code": "        map = cherrypy.serving.request.toolmaps.get(self.namespace)\n", "error": "W", "author": "tom@organisms.be"}, {"index": "443", "colour": "orange", "code": "        if map:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "444", "colour": "orange", "code": "            for name, settings in map.items():\n", "error": "none", "author": "tom@organisms.be"}, {"index": "445", "colour": "orange", "code": "                if settings.get(\"on\", False):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "446", "colour": "orange", "code": "                    tool = getattr(self, name)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "447", "colour": "green", "code": "                    tool._setup()\n", "error": "W", "author": "tom@organisms.be"}, {"index": "448", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "449", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "450", "colour": "blue", "code": "class DeprecatedTool(Tool):\n", "error": "R", "author": "tom@organisms.be"}, {"index": "451", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "452", "colour": "orange", "code": "    _name = None\n", "error": "none", "author": "tom@organisms.be"}, {"index": "453", "colour": "orange", "code": "    warnmsg = \"This Tool is deprecated.\"\n", "error": "none", "author": "tom@organisms.be"}, {"index": "454", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "455", "colour": "green", "code": "    def __init__(self, point, warnmsg=None):\n", "error": "W", "author": "tom@organisms.be"}, {"index": "456", "colour": "orange", "code": "        self.point = point\n", "error": "none", "author": "tom@organisms.be"}, {"index": "457", "colour": "orange", "code": "        if warnmsg is not None:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "458", "colour": "orange", "code": "            self.warnmsg = warnmsg\n", "error": "none", "author": "tom@organisms.be"}, {"index": "459", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "460", "colour": "orange", "code": "    def __call__(self, *args, **kwargs):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "461", "colour": "orange", "code": "        warnings.warn(self.warnmsg)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "462", "colour": "orange", "code": "        def tool_decorator(f):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "463", "colour": "orange", "code": "            return f\n", "error": "none", "author": "tom@organisms.be"}, {"index": "464", "colour": "orange", "code": "        return tool_decorator\n", "error": "none", "author": "tom@organisms.be"}, {"index": "465", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "466", "colour": "orange", "code": "    def _setup(self):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "467", "colour": "orange", "code": "        warnings.warn(self.warnmsg)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "468", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "469", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "470", "colour": "orange", "code": "default_toolbox = _d = Toolbox(\"tools\")\n", "error": "none", "author": "tom@organisms.be"}, {"index": "471", "colour": "green", "code": "_d.session_auth = SessionAuthTool(cptools.session_auth)\n", "error": "W", "author": "tom@organisms.be"}, {"index": "472", "colour": "green", "code": "_d.allow = Tool('on_start_resource', cptools.allow)\n", "error": "W", "author": "tom@organisms.be"}, {"index": "473", "colour": "green", "code": "_d.proxy = Tool('before_request_body', cptools.proxy, priority=30)\n", "error": "W", "author": "tom@organisms.be"}, {"index": "474", "colour": "green", "code": "_d.response_headers = Tool('on_start_resource', cptools.response_headers)\n", "error": "W", "author": "tom@organisms.be"}, {"index": "475", "colour": "green", "code": "_d.log_tracebacks = Tool('before_error_response', cptools.log_traceback)\n", "error": "W", "author": "tom@organisms.be"}, {"index": "476", "colour": "green", "code": "_d.log_headers = Tool('before_error_response', cptools.log_request_headers)\n", "error": "W", "author": "tom@organisms.be"}, {"index": "477", "colour": "green", "code": "_d.log_hooks = Tool('on_end_request', cptools.log_hooks, priority=100)\n", "error": "W", "author": "tom@organisms.be"}, {"index": "478", "colour": "green", "code": "_d.err_redirect = ErrorTool(cptools.redirect)\n", "error": "W", "author": "tom@organisms.be"}, {"index": "479", "colour": "green", "code": "_d.etags = Tool('before_finalize', cptools.validate_etags, priority=75)\n", "error": "W", "author": "tom@organisms.be"}, {"index": "480", "colour": "green", "code": "_d.decode = Tool('before_request_body', encoding.decode)\n", "error": "W", "author": "tom@organisms.be"}, {"index": "481", "colour": "orange", "code": "# the order of encoding, gzip, caching is important\n", "error": "none", "author": "tom@organisms.be"}, {"index": "482", "colour": "green", "code": "_d.encode = Tool('before_handler', encoding.ResponseEncoder, priority=70)\n", "error": "W", "author": "tom@organisms.be"}, {"index": "483", "colour": "green", "code": "_d.gzip = Tool('before_finalize', encoding.gzip, priority=80)\n", "error": "W", "author": "tom@organisms.be"}, {"index": "484", "colour": "green", "code": "_d.staticdir = HandlerTool(static.staticdir)\n", "error": "W", "author": "tom@organisms.be"}, {"index": "485", "colour": "green", "code": "_d.staticfile = HandlerTool(static.staticfile)\n", "error": "W", "author": "tom@organisms.be"}, {"index": "486", "colour": "green", "code": "_d.sessions = SessionTool()\n", "error": "W", "author": "tom@organisms.be"}, {"index": "487", "colour": "green", "code": "_d.xmlrpc = ErrorTool(_xmlrpc.on_error)\n", "error": "W", "author": "tom@organisms.be"}, {"index": "488", "colour": "green", "code": "_d.caching = CachingTool('before_handler', _caching.get, 'caching')\n", "error": "W", "author": "tom@organisms.be"}, {"index": "489", "colour": "green", "code": "_d.expires = Tool('before_finalize', _caching.expires)\n", "error": "W", "author": "tom@organisms.be"}, {"index": "490", "colour": "green", "code": "_d.tidy = DeprecatedTool('before_finalize',\n", "error": "W", "author": "tom@organisms.be"}, {"index": "491", "colour": "orange", "code": "    \"The tidy tool has been removed from the standard distribution of CherryPy. \"\n", "error": "none", "author": "tom@organisms.be"}, {"index": "492", "colour": "orange", "code": "    \"The most recent version can be found at http://tools.cherrypy.org/browser.\")\n", "error": "none", "author": "tom@organisms.be"}, {"index": "493", "colour": "green", "code": "_d.nsgmls = DeprecatedTool('before_finalize',\n", "error": "W", "author": "tom@organisms.be"}, {"index": "494", "colour": "orange", "code": "    \"The nsgmls tool has been removed from the standard distribution of CherryPy. \"\n", "error": "none", "author": "tom@organisms.be"}, {"index": "495", "colour": "orange", "code": "    \"The most recent version can be found at http://tools.cherrypy.org/browser.\")\n", "error": "none", "author": "tom@organisms.be"}, {"index": "496", "colour": "green", "code": "_d.ignore_headers = Tool('before_request_body', cptools.ignore_headers)\n", "error": "W", "author": "tom@organisms.be"}, {"index": "497", "colour": "green", "code": "_d.referer = Tool('before_request_body', cptools.referer)\n", "error": "W", "author": "tom@organisms.be"}, {"index": "498", "colour": "green", "code": "_d.basic_auth = Tool('on_start_resource', auth.basic_auth)\n", "error": "W", "author": "tom@organisms.be"}, {"index": "499", "colour": "green", "code": "_d.digest_auth = Tool('on_start_resource', auth.digest_auth)\n", "error": "W", "author": "tom@organisms.be"}, {"index": "500", "colour": "green", "code": "_d.trailing_slash = Tool('before_handler', cptools.trailing_slash, priority=60)\n", "error": "W", "author": "tom@organisms.be"}, {"index": "501", "colour": "green", "code": "_d.flatten = Tool('before_finalize', cptools.flatten)\n", "error": "W", "author": "tom@organisms.be"}, {"index": "502", "colour": "green", "code": "_d.accept = Tool('on_start_resource', cptools.accept)\n", "error": "W", "author": "tom@organisms.be"}, {"index": "503", "colour": "green", "code": "_d.redirect = Tool('on_start_resource', cptools.redirect)\n", "error": "W", "author": "tom@organisms.be"}, {"index": "504", "colour": "green", "code": "_d.autovary = Tool('on_start_resource', cptools.autovary, priority=0)\n", "error": "W", "author": "tom@organisms.be"}, {"index": "505", "colour": "green", "code": "_d.json_in = Tool('before_request_body', jsontools.json_in, priority=30)\n", "error": "W", "author": "tom@organisms.be"}, {"index": "506", "colour": "green", "code": "_d.json_out = Tool('before_handler', jsontools.json_out, priority=30)\n", "error": "W", "author": "tom@organisms.be"}, {"index": "507", "colour": "green", "code": "_d.auth_basic = Tool('before_handler', auth_basic.basic_auth, priority=1)\n", "error": "W", "author": "tom@organisms.be"}, {"index": "508", "colour": "green", "code": "_d.auth_digest = Tool('before_handler', auth_digest.digest_auth, priority=1)\n", "error": "W", "author": "tom@organisms.be"}, {"index": "509", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "510", "colour": "orange", "code": "del _d, cptools, encoding, auth, static\n", "error": "none", "author": "tom@organisms.be"}]}