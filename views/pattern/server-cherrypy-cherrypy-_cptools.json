{"path": "/home/asumal/git/cs410/pattern/pattern/server/cherrypy/cherrypy/_cptools.py", "lines": [[{"error": "none", "line": "1", "code": "\"\"\"CherryPy tools. A \"tool\" is any helper, adapted to CP.\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "2", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "3", "code": "Tools are usually designed to be used in a variety of ways (although some\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "4", "code": "may only offer one if they choose):\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "5", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "6", "code": "    Library calls\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "7", "code": "        All tools are callables that can be used wherever needed.\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "8", "code": "        The arguments are straightforward and should be detailed within the\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "9", "code": "        docstring.\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "10", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "11", "code": "    Function decorators\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "12", "code": "        All tools, when called, may be used as decorators which configure\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "13", "code": "        individual CherryPy page handlers (methods on the CherryPy tree).\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "14", "code": "        That is, \"@tools.anytool()\" should \"turn on\" the tool via the\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "15", "code": "        decorated function's _cp_config attribute.\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "16", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "17", "code": "    CherryPy config\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "18", "code": "        If a tool exposes a \"_setup\" callable, it will be called\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "19", "code": "        once per Request (if the feature is \"turned on\" via config).\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "20", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "21", "code": "Tools may be implemented as any object with a namespace. The builtins\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "22", "code": "are generally either modules or instances of the tools.Tool class.\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "23", "code": "\"\"\"\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "24", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "25", "code": "import sys\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "26", "code": "import warnings\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "27", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "28", "code": "import cherrypy\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "29", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "30", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "31", "code": "def _getargs(func):\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "32", "code": "    \"\"\"Return the names of all static arguments to the given function.\"\"\"\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "33", "code": "    # Use this instead of importing inspect for less mem overhead.\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "34", "code": "    import types\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "35", "code": "    if sys.version_info >= (3, 0):\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "36", "code": "        if isinstance(func, types.MethodType):\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "37", "code": "            func = func.__func__\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "38", "code": "        co = func.__code__\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "39", "code": "    else:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "40", "code": "        if isinstance(func, types.MethodType):\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "41", "code": "            func = func.im_func\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "42", "code": "        co = func.func_code\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "43", "code": "    return co.co_varnames[:co.co_argcount]\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "44", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "45", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "46", "code": "_attr_error = (\"CherryPy Tools cannot be turned on directly. Instead, turn them \"\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "C", "line": "47", "code": "               \"on via config, or use them as decorators on your page handlers.\")\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "48", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "R", "line": "49", "code": "class Tool(object):\n", "colour": "green", "author": "tom@organisms.be"}, {"error": "none", "line": "50", "code": "    \"\"\"A registered function for use with CherryPy request-processing hooks.\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "51", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "52", "code": "    help(tool.callable) should give you more information about this Tool.\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "53", "code": "    \"\"\"\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "54", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "55", "code": "    namespace = \"tools\"\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "56", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "W", "line": "57", "code": "    def __init__(self, point, callable, name=None, priority=50):\n", "colour": "purple", "author": "tom@organisms.be"}, {"error": "none", "line": "58", "code": "        self._point = point\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "59", "code": "        self.callable = callable\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "60", "code": "        self._name = name\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "61", "code": "        self._priority = priority\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "62", "code": "        self.__doc__ = self.callable.__doc__\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "63", "code": "        self._setargs()\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "64", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "R", "line": "65", "code": "    def _get_on(self):\n", "colour": "green", "author": "tom@organisms.be"}, {"error": "none", "line": "66", "code": "        raise AttributeError(_attr_error)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "R", "line": "67", "code": "    def _set_on(self, value):\n", "colour": "green", "author": "tom@organisms.be"}, {"error": "none", "line": "68", "code": "        raise AttributeError(_attr_error)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "69", "code": "    on = property(_get_on, _set_on)\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "70", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "71", "code": "    def _setargs(self):\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "72", "code": "        \"\"\"Copy func parameter names to obj attributes.\"\"\"\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "73", "code": "        try:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "74", "code": "            for arg in _getargs(self.callable):\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "75", "code": "                setattr(self, arg, None)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "76", "code": "        except (TypeError, AttributeError):\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "77", "code": "            if hasattr(self.callable, \"__call__\"):\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "78", "code": "                for arg in _getargs(self.callable.__call__):\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "79", "code": "                    setattr(self, arg, None)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "80", "code": "        # IronPython 1.0 raises NotImplementedError because\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "81", "code": "        # inspect.getargspec tries to access Python bytecode\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "82", "code": "        # in co_code attribute.\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "83", "code": "        except NotImplementedError:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "84", "code": "            pass\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "85", "code": "        # IronPython 1B1 may raise IndexError in some cases,\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "86", "code": "        # but if we trap it here it doesn't prevent CP from working.\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "87", "code": "        except IndexError:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "88", "code": "            pass\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "89", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "90", "code": "    def _merged_args(self, d=None):\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "91", "code": "        \"\"\"Return a dict of configuration entries for this Tool.\"\"\"\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "92", "code": "        if d:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "93", "code": "            conf = d.copy()\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "94", "code": "        else:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "95", "code": "            conf = {}\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "96", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "97", "code": "        tm = cherrypy.serving.request.toolmaps[self.namespace]\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "98", "code": "        if self._name in tm:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "99", "code": "            conf.update(tm[self._name])\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "100", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "101", "code": "        if \"on\" in conf:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "102", "code": "            del conf[\"on\"]\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "103", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "104", "code": "        return conf\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "105", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "106", "code": "    def __call__(self, *args, **kwargs):\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "107", "code": "        \"\"\"Compile-time decorator (turn on the tool in config).\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "108", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "109", "code": "        For example::\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "110", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "111", "code": "            @tools.proxy()\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "112", "code": "            def whats_my_base(self):\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "113", "code": "                return cherrypy.request.base\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "114", "code": "            whats_my_base.exposed = True\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "115", "code": "        \"\"\"\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "116", "code": "        if args:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "117", "code": "            raise TypeError(\"The %r Tool does not accept positional \"\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "118", "code": "                            \"arguments; you must use keyword arguments.\"\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "119", "code": "                            % self._name)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "120", "code": "        def tool_decorator(f):\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "121", "code": "            if not hasattr(f, \"_cp_config\"):\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "W", "line": "122", "code": "                f._cp_config = {}\n", "colour": "purple", "author": "tom@organisms.be"}, {"error": "none", "line": "123", "code": "            subspace = self.namespace + \".\" + self._name + \".\"\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "W", "line": "124", "code": "            f._cp_config[subspace + \"on\"] = True\n", "colour": "purple", "author": "tom@organisms.be"}, {"error": "C", "line": "125", "code": "            for k, v in kwargs.items():\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "W", "line": "126", "code": "                f._cp_config[subspace + k] = v\n", "colour": "purple", "author": "tom@organisms.be"}, {"error": "none", "line": "127", "code": "            return f\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "128", "code": "        return tool_decorator\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "129", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "130", "code": "    def _setup(self):\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "131", "code": "        \"\"\"Hook this tool into cherrypy.request.\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "132", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "133", "code": "        The standard CherryPy request object will automatically call this\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "134", "code": "        method when the tool is \"turned on\" in config.\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "135", "code": "        \"\"\"\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "136", "code": "        conf = self._merged_args()\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "137", "code": "        p = conf.pop(\"priority\", None)\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "138", "code": "        if p is None:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "139", "code": "            p = getattr(self.callable, \"priority\", self._priority)\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "W", "line": "140", "code": "        cherrypy.serving.request.hooks.attach(self._point, self.callable,\n", "colour": "purple", "author": "tom@organisms.be"}, {"error": "none", "line": "141", "code": "                                              priority=p, **conf)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "142", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "143", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "R", "line": "144", "code": "class HandlerTool(Tool):\n", "colour": "green", "author": "tom@organisms.be"}, {"error": "none", "line": "145", "code": "    \"\"\"Tool which is called 'before main', that may skip normal handlers.\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "146", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "147", "code": "    If the tool successfully handles the request (by setting response.body),\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "148", "code": "    if should return True. This will cause CherryPy to skip any 'normal' page\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "149", "code": "    handler. If the tool did not handle the request, it should return False\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "150", "code": "    to tell CherryPy to continue on and call the normal page handler. If the\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "151", "code": "    tool is declared AS a page handler (see the 'handler' method), returning\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "152", "code": "    False will raise NotFound.\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "153", "code": "    \"\"\"\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "154", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "W", "line": "155", "code": "    def __init__(self, callable, name=None):\n", "colour": "purple", "author": "tom@organisms.be"}, {"error": "none", "line": "156", "code": "        Tool.__init__(self, 'before_handler', callable, name)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "157", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "158", "code": "    def handler(self, *args, **kwargs):\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "159", "code": "        \"\"\"Use this tool as a CherryPy page handler.\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "160", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "161", "code": "        For example::\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "162", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "163", "code": "            class Root:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "164", "code": "                nav = tools.staticdir.handler(section=\"/nav\", dir=\"nav\",\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "165", "code": "                                              root=absDir)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "166", "code": "        \"\"\"\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "W", "line": "167", "code": "        def handle_func(*a, **kw):\n", "colour": "purple", "author": "tom@organisms.be"}, {"error": "W", "line": "168", "code": "            handled = self.callable(*args, **self._merged_args(kwargs))\n", "colour": "purple", "author": "tom@organisms.be"}, {"error": "none", "line": "169", "code": "            if not handled:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "170", "code": "                raise cherrypy.NotFound()\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "171", "code": "            return cherrypy.serving.response.body\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "172", "code": "        handle_func.exposed = True\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "173", "code": "        return handle_func\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "174", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "175", "code": "    def _wrapper(self, **kwargs):\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "176", "code": "        if self.callable(**kwargs):\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "177", "code": "            cherrypy.serving.request.handler = None\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "178", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "179", "code": "    def _setup(self):\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "180", "code": "        \"\"\"Hook this tool into cherrypy.request.\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "181", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "182", "code": "        The standard CherryPy request object will automatically call this\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "183", "code": "        method when the tool is \"turned on\" in config.\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "184", "code": "        \"\"\"\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "185", "code": "        conf = self._merged_args()\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "186", "code": "        p = conf.pop(\"priority\", None)\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "187", "code": "        if p is None:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "188", "code": "            p = getattr(self.callable, \"priority\", self._priority)\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "W", "line": "189", "code": "        cherrypy.serving.request.hooks.attach(self._point, self._wrapper,\n", "colour": "purple", "author": "tom@organisms.be"}, {"error": "none", "line": "190", "code": "                                              priority=p, **conf)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "191", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "192", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "R", "line": "193", "code": "class HandlerWrapperTool(Tool):\n", "colour": "green", "author": "tom@organisms.be"}, {"error": "none", "line": "194", "code": "    \"\"\"Tool which wraps request.handler in a provided wrapper function.\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "195", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "196", "code": "    The 'newhandler' arg must be a handler wrapper function that takes a\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "197", "code": "    'next_handler' argument, plus ``*args`` and ``**kwargs``. Like all\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "198", "code": "    page handler\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "199", "code": "    functions, it must return an iterable for use as cherrypy.response.body.\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "200", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "201", "code": "    For example, to allow your 'inner' page handlers to return dicts\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "202", "code": "    which then get interpolated into a template::\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "203", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "204", "code": "        def interpolator(next_handler, *args, **kwargs):\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "205", "code": "            filename = cherrypy.request.config.get('template')\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "206", "code": "            cherrypy.response.template = env.get_template(filename)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "207", "code": "            response_dict = next_handler(*args, **kwargs)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "208", "code": "            return cherrypy.response.template.render(**response_dict)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "209", "code": "        cherrypy.tools.jinja = HandlerWrapperTool(interpolator)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "210", "code": "    \"\"\"\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "211", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "W", "line": "212", "code": "    def __init__(self, newhandler, point='before_handler', name=None, priority=50):\n", "colour": "purple", "author": "tom@organisms.be"}, {"error": "none", "line": "213", "code": "        self.newhandler = newhandler\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "214", "code": "        self._point = point\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "215", "code": "        self._name = name\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "216", "code": "        self._priority = priority\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "217", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "W", "line": "218", "code": "    def callable(self, debug=False):\n", "colour": "purple", "author": "tom@organisms.be"}, {"error": "none", "line": "219", "code": "        innerfunc = cherrypy.serving.request.handler\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "220", "code": "        def wrap(*args, **kwargs):\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "221", "code": "            return self.newhandler(innerfunc, *args, **kwargs)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "222", "code": "        cherrypy.serving.request.handler = wrap\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "223", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "224", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "R", "line": "225", "code": "class ErrorTool(Tool):\n", "colour": "green", "author": "tom@organisms.be"}, {"error": "none", "line": "226", "code": "    \"\"\"Tool which is used to replace the default request.error_response.\"\"\"\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "227", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "W", "line": "228", "code": "    def __init__(self, callable, name=None):\n", "colour": "purple", "author": "tom@organisms.be"}, {"error": "none", "line": "229", "code": "        Tool.__init__(self, None, callable, name)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "230", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "231", "code": "    def _wrapper(self):\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "232", "code": "        self.callable(**self._merged_args())\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "233", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "234", "code": "    def _setup(self):\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "235", "code": "        \"\"\"Hook this tool into cherrypy.request.\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "236", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "237", "code": "        The standard CherryPy request object will automatically call this\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "238", "code": "        method when the tool is \"turned on\" in config.\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "239", "code": "        \"\"\"\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "240", "code": "        cherrypy.serving.request.error_response = self._wrapper\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "241", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "242", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "243", "code": "#                              Builtin tools                              #\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "244", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "245", "code": "from cherrypy.lib import cptools, encoding, auth, static, jsontools\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "246", "code": "from cherrypy.lib import sessions as _sessions, xmlrpcutil as _xmlrpc\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "247", "code": "from cherrypy.lib import caching as _caching\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "248", "code": "from cherrypy.lib import auth_basic, auth_digest\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "249", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "250", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "R", "line": "251", "code": "class SessionTool(Tool):\n", "colour": "green", "author": "tom@organisms.be"}, {"error": "none", "line": "252", "code": "    \"\"\"Session Tool for CherryPy.\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "253", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "254", "code": "    sessions.locking\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "255", "code": "        When 'implicit' (the default), the session will be locked for you,\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "256", "code": "        just before running the page handler.\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "257", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "258", "code": "        When 'early', the session will be locked before reading the request\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "259", "code": "        body. This is off by default for safety reasons; for example,\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "260", "code": "        a large upload would block the session, denying an AJAX\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "261", "code": "        progress meter (see http://www.cherrypy.org/ticket/630).\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "262", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "263", "code": "        When 'explicit' (or any other value), you need to call\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "264", "code": "        cherrypy.session.acquire_lock() yourself before using\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "265", "code": "        session data.\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "266", "code": "    \"\"\"\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "267", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "268", "code": "    def __init__(self):\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "269", "code": "        # _sessions.init must be bound after headers are read\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "270", "code": "        Tool.__init__(self, 'before_request_body', _sessions.init)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "271", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "R", "line": "272", "code": "    def _lock_session(self):\n", "colour": "green", "author": "tom@organisms.be"}, {"error": "none", "line": "273", "code": "        cherrypy.serving.session.acquire_lock()\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "274", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "275", "code": "    def _setup(self):\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "276", "code": "        \"\"\"Hook this tool into cherrypy.request.\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "277", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "278", "code": "        The standard CherryPy request object will automatically call this\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "279", "code": "        method when the tool is \"turned on\" in config.\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "280", "code": "        \"\"\"\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "281", "code": "        hooks = cherrypy.serving.request.hooks\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "282", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "283", "code": "        conf = self._merged_args()\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "284", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "285", "code": "        p = conf.pop(\"priority\", None)\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "286", "code": "        if p is None:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "287", "code": "            p = getattr(self.callable, \"priority\", self._priority)\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "288", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "W", "line": "289", "code": "        hooks.attach(self._point, self.callable, priority=p, **conf)\n", "colour": "purple", "author": "tom@organisms.be"}, {"error": "none", "line": "290", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "291", "code": "        locking = conf.pop('locking', 'implicit')\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "292", "code": "        if locking == 'implicit':\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "293", "code": "            hooks.attach('before_handler', self._lock_session)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "294", "code": "        elif locking == 'early':\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "295", "code": "            # Lock before the request body (but after _sessions.init runs!)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "296", "code": "            hooks.attach('before_request_body', self._lock_session,\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "297", "code": "                         priority=60)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "298", "code": "        else:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "299", "code": "            # Don't lock\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "300", "code": "            pass\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "301", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "302", "code": "        hooks.attach('before_finalize', _sessions.save)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "303", "code": "        hooks.attach('on_end_request', _sessions.close)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "304", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "305", "code": "    def regenerate(self):\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "306", "code": "        \"\"\"Drop the current session and make a new one (with a new id).\"\"\"\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "307", "code": "        sess = cherrypy.serving.session\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "308", "code": "        sess.regenerate()\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "309", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "310", "code": "        # Grab cookie-relevant tool args\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "311", "code": "        conf = dict([(k, v) for k, v in self._merged_args().items()\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "312", "code": "                     if k in ('path', 'path_header', 'name', 'timeout',\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "313", "code": "                              'domain', 'secure')])\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "W", "line": "314", "code": "        _sessions.set_response_cookie(**conf)\n", "colour": "purple", "author": "tom@organisms.be"}, {"error": "none", "line": "315", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "316", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "317", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "318", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "R", "line": "319", "code": "class XMLRPCController(object):\n", "colour": "green", "author": "tom@organisms.be"}, {"error": "none", "line": "320", "code": "    \"\"\"A Controller (page handler collection) for XML-RPC.\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "321", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "322", "code": "    To use it, have your controllers subclass this base class (it will\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "323", "code": "    turn on the tool for you).\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "324", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "325", "code": "    You can also supply the following optional config entries::\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "326", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "327", "code": "        tools.xmlrpc.encoding: 'utf-8'\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "328", "code": "        tools.xmlrpc.allow_none: 0\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "329", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "330", "code": "    XML-RPC is a rather discontinuous layer over HTTP; dispatching to the\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "331", "code": "    appropriate handler must first be performed according to the URL, and\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "332", "code": "    then a second dispatch step must take place according to the RPC method\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "333", "code": "    specified in the request body. It also allows a superfluous \"/RPC2\"\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "334", "code": "    prefix in the URL, supplies its own handler args in the body, and\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "335", "code": "    requires a 200 OK \"Fault\" response instead of 404 when the desired\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "336", "code": "    method is not found.\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "337", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "338", "code": "    Therefore, XML-RPC cannot be implemented for CherryPy via a Tool alone.\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "339", "code": "    This Controller acts as the dispatch target for the first half (based\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "340", "code": "    on the URL); it then reads the RPC method from the request body and\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "341", "code": "    does its own second dispatch step based on that method. It also reads\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "342", "code": "    body params, and returns a Fault on error.\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "343", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "344", "code": "    The XMLRPCDispatcher strips any /RPC2 prefix; if you aren't using /RPC2\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "345", "code": "    in your URL's, you can safely skip turning on the XMLRPCDispatcher.\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "346", "code": "    Otherwise, you need to use declare it in config::\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "347", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "348", "code": "        request.dispatch: cherrypy.dispatch.XMLRPCDispatcher()\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "349", "code": "    \"\"\"\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "350", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "351", "code": "    # Note we're hard-coding this into the 'tools' namespace. We could do\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "352", "code": "    # a huge amount of work to make it relocatable, but the only reason why\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "353", "code": "    # would be if someone actually disabled the default_toolbox. Meh.\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "354", "code": "    _cp_config = {'tools.xmlrpc.on': True}\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "355", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "356", "code": "    def default(self, *vpath, **params):\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "357", "code": "        rpcparams, rpcmethod = _xmlrpc.process_body()\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "358", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "359", "code": "        subhandler = self\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "360", "code": "        for attr in str(rpcmethod).split('.'):\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "361", "code": "            subhandler = getattr(subhandler, attr, None)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "362", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "363", "code": "        if subhandler and getattr(subhandler, \"exposed\", False):\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "W", "line": "364", "code": "            body = subhandler(*(vpath + rpcparams), **params)\n", "colour": "purple", "author": "tom@organisms.be"}, {"error": "none", "line": "365", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "366", "code": "        else:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "367", "code": "            # http://www.cherrypy.org/ticket/533\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "368", "code": "            # if a method is not found, an xmlrpclib.Fault should be returned\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "369", "code": "            # raising an exception here will do that; see\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "370", "code": "            # cherrypy.lib.xmlrpcutil.on_error\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "W", "line": "371", "code": "            raise Exception('method \"%s\" is not supported' % attr)\n", "colour": "purple", "author": "tom@organisms.be"}, {"error": "none", "line": "372", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "373", "code": "        conf = cherrypy.serving.request.toolmaps['tools'].get(\"xmlrpc\", {})\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "374", "code": "        _xmlrpc.respond(body,\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "375", "code": "                        conf.get('encoding', 'utf-8'),\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "376", "code": "                        conf.get('allow_none', 0))\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "377", "code": "        return cherrypy.serving.response.body\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "378", "code": "    default.exposed = True\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "379", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "380", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "R", "line": "381", "code": "class SessionAuthTool(HandlerTool):\n", "colour": "green", "author": "tom@organisms.be"}, {"error": "none", "line": "382", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "383", "code": "    def _setargs(self):\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "384", "code": "        for name in dir(cptools.SessionAuth):\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "385", "code": "            if not name.startswith(\"__\"):\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "386", "code": "                setattr(self, name, None)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "387", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "388", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "R", "line": "389", "code": "class CachingTool(Tool):\n", "colour": "green", "author": "tom@organisms.be"}, {"error": "none", "line": "390", "code": "    \"\"\"Caching Tool for CherryPy.\"\"\"\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "391", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "R", "line": "392", "code": "    def _wrapper(self, **kwargs):\n", "colour": "green", "author": "tom@organisms.be"}, {"error": "none", "line": "393", "code": "        request = cherrypy.serving.request\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "394", "code": "        if _caching.get(**kwargs):\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "395", "code": "            request.handler = None\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "396", "code": "        else:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "397", "code": "            if request.cacheable:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "398", "code": "                # Note the devious technique here of adding hooks on the fly\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "399", "code": "                request.hooks.attach('before_finalize', _caching.tee_output,\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "400", "code": "                                     priority = 90)\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "401", "code": "    _wrapper.priority = 20\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "402", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "403", "code": "    def _setup(self):\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "404", "code": "        \"\"\"Hook caching into cherrypy.request.\"\"\"\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "405", "code": "        conf = self._merged_args()\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "406", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "407", "code": "        p = conf.pop(\"priority\", None)\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "W", "line": "408", "code": "        cherrypy.serving.request.hooks.attach('before_handler', self._wrapper,\n", "colour": "purple", "author": "tom@organisms.be"}, {"error": "none", "line": "409", "code": "                                              priority=p, **conf)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "410", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "411", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "412", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "R", "line": "413", "code": "class Toolbox(object):\n", "colour": "green", "author": "tom@organisms.be"}, {"error": "none", "line": "414", "code": "    \"\"\"A collection of Tools.\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "415", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "416", "code": "    This object also functions as a config namespace handler for itself.\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "417", "code": "    Custom toolboxes should be added to each Application's toolboxes dict.\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "418", "code": "    \"\"\"\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "419", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "420", "code": "    def __init__(self, namespace):\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "421", "code": "        self.namespace = namespace\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "422", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "423", "code": "    def __setattr__(self, name, value):\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "424", "code": "        # If the Tool._name is None, supply it from the attribute name.\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "425", "code": "        if isinstance(value, Tool):\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "W", "line": "426", "code": "            if value._name is None:\n", "colour": "purple", "author": "tom@organisms.be"}, {"error": "W", "line": "427", "code": "                value._name = name\n", "colour": "purple", "author": "tom@organisms.be"}, {"error": "none", "line": "428", "code": "            value.namespace = self.namespace\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "429", "code": "        object.__setattr__(self, name, value)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "430", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "431", "code": "    def __enter__(self):\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "432", "code": "        \"\"\"Populate request.toolmaps from tools specified in config.\"\"\"\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "W", "line": "433", "code": "        cherrypy.serving.request.toolmaps[self.namespace] = map = {}\n", "colour": "purple", "author": "tom@organisms.be"}, {"error": "C", "line": "434", "code": "        def populate(k, v):\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "435", "code": "            toolname, arg = k.split(\".\", 1)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "436", "code": "            bucket = map.setdefault(toolname, {})\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "437", "code": "            bucket[arg] = v\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "438", "code": "        return populate\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "439", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "440", "code": "    def __exit__(self, exc_type, exc_val, exc_tb):\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "441", "code": "        \"\"\"Run tool._setup() for each tool in our toolmap.\"\"\"\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "W", "line": "442", "code": "        map = cherrypy.serving.request.toolmaps.get(self.namespace)\n", "colour": "purple", "author": "tom@organisms.be"}, {"error": "none", "line": "443", "code": "        if map:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "444", "code": "            for name, settings in map.items():\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "445", "code": "                if settings.get(\"on\", False):\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "446", "code": "                    tool = getattr(self, name)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "W", "line": "447", "code": "                    tool._setup()\n", "colour": "purple", "author": "tom@organisms.be"}, {"error": "none", "line": "448", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "449", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "R", "line": "450", "code": "class DeprecatedTool(Tool):\n", "colour": "green", "author": "tom@organisms.be"}, {"error": "none", "line": "451", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "452", "code": "    _name = None\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "453", "code": "    warnmsg = \"This Tool is deprecated.\"\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "454", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "W", "line": "455", "code": "    def __init__(self, point, warnmsg=None):\n", "colour": "purple", "author": "tom@organisms.be"}, {"error": "none", "line": "456", "code": "        self.point = point\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "457", "code": "        if warnmsg is not None:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "458", "code": "            self.warnmsg = warnmsg\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "459", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "460", "code": "    def __call__(self, *args, **kwargs):\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "461", "code": "        warnings.warn(self.warnmsg)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "462", "code": "        def tool_decorator(f):\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "463", "code": "            return f\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "464", "code": "        return tool_decorator\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "465", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "466", "code": "    def _setup(self):\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "467", "code": "        warnings.warn(self.warnmsg)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "468", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "469", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "470", "code": "default_toolbox = _d = Toolbox(\"tools\")\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "W", "line": "471", "code": "_d.session_auth = SessionAuthTool(cptools.session_auth)\n", "colour": "purple", "author": "tom@organisms.be"}, {"error": "W", "line": "472", "code": "_d.allow = Tool('on_start_resource', cptools.allow)\n", "colour": "purple", "author": "tom@organisms.be"}, {"error": "W", "line": "473", "code": "_d.proxy = Tool('before_request_body', cptools.proxy, priority=30)\n", "colour": "purple", "author": "tom@organisms.be"}, {"error": "W", "line": "474", "code": "_d.response_headers = Tool('on_start_resource', cptools.response_headers)\n", "colour": "purple", "author": "tom@organisms.be"}, {"error": "W", "line": "475", "code": "_d.log_tracebacks = Tool('before_error_response', cptools.log_traceback)\n", "colour": "purple", "author": "tom@organisms.be"}, {"error": "W", "line": "476", "code": "_d.log_headers = Tool('before_error_response', cptools.log_request_headers)\n", "colour": "purple", "author": "tom@organisms.be"}, {"error": "W", "line": "477", "code": "_d.log_hooks = Tool('on_end_request', cptools.log_hooks, priority=100)\n", "colour": "purple", "author": "tom@organisms.be"}, {"error": "W", "line": "478", "code": "_d.err_redirect = ErrorTool(cptools.redirect)\n", "colour": "purple", "author": "tom@organisms.be"}, {"error": "W", "line": "479", "code": "_d.etags = Tool('before_finalize', cptools.validate_etags, priority=75)\n", "colour": "purple", "author": "tom@organisms.be"}, {"error": "W", "line": "480", "code": "_d.decode = Tool('before_request_body', encoding.decode)\n", "colour": "purple", "author": "tom@organisms.be"}, {"error": "none", "line": "481", "code": "# the order of encoding, gzip, caching is important\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "W", "line": "482", "code": "_d.encode = Tool('before_handler', encoding.ResponseEncoder, priority=70)\n", "colour": "purple", "author": "tom@organisms.be"}, {"error": "W", "line": "483", "code": "_d.gzip = Tool('before_finalize', encoding.gzip, priority=80)\n", "colour": "purple", "author": "tom@organisms.be"}, {"error": "W", "line": "484", "code": "_d.staticdir = HandlerTool(static.staticdir)\n", "colour": "purple", "author": "tom@organisms.be"}, {"error": "W", "line": "485", "code": "_d.staticfile = HandlerTool(static.staticfile)\n", "colour": "purple", "author": "tom@organisms.be"}, {"error": "W", "line": "486", "code": "_d.sessions = SessionTool()\n", "colour": "purple", "author": "tom@organisms.be"}, {"error": "W", "line": "487", "code": "_d.xmlrpc = ErrorTool(_xmlrpc.on_error)\n", "colour": "purple", "author": "tom@organisms.be"}, {"error": "W", "line": "488", "code": "_d.caching = CachingTool('before_handler', _caching.get, 'caching')\n", "colour": "purple", "author": "tom@organisms.be"}, {"error": "W", "line": "489", "code": "_d.expires = Tool('before_finalize', _caching.expires)\n", "colour": "purple", "author": "tom@organisms.be"}, {"error": "W", "line": "490", "code": "_d.tidy = DeprecatedTool('before_finalize',\n", "colour": "purple", "author": "tom@organisms.be"}, {"error": "C", "line": "491", "code": "    \"The tidy tool has been removed from the standard distribution of CherryPy. \"\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "C", "line": "492", "code": "    \"The most recent version can be found at http://tools.cherrypy.org/browser.\")\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "W", "line": "493", "code": "_d.nsgmls = DeprecatedTool('before_finalize',\n", "colour": "purple", "author": "tom@organisms.be"}, {"error": "C", "line": "494", "code": "    \"The nsgmls tool has been removed from the standard distribution of CherryPy. \"\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "C", "line": "495", "code": "    \"The most recent version can be found at http://tools.cherrypy.org/browser.\")\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "W", "line": "496", "code": "_d.ignore_headers = Tool('before_request_body', cptools.ignore_headers)\n", "colour": "purple", "author": "tom@organisms.be"}, {"error": "W", "line": "497", "code": "_d.referer = Tool('before_request_body', cptools.referer)\n", "colour": "purple", "author": "tom@organisms.be"}, {"error": "W", "line": "498", "code": "_d.basic_auth = Tool('on_start_resource', auth.basic_auth)\n", "colour": "purple", "author": "tom@organisms.be"}, {"error": "W", "line": "499", "code": "_d.digest_auth = Tool('on_start_resource', auth.digest_auth)\n", "colour": "purple", "author": "tom@organisms.be"}, {"error": "W", "line": "500", "code": "_d.trailing_slash = Tool('before_handler', cptools.trailing_slash, priority=60)\n", "colour": "purple", "author": "tom@organisms.be"}, {"error": "W", "line": "501", "code": "_d.flatten = Tool('before_finalize', cptools.flatten)\n", "colour": "purple", "author": "tom@organisms.be"}, {"error": "W", "line": "502", "code": "_d.accept = Tool('on_start_resource', cptools.accept)\n", "colour": "purple", "author": "tom@organisms.be"}, {"error": "W", "line": "503", "code": "_d.redirect = Tool('on_start_resource', cptools.redirect)\n", "colour": "purple", "author": "tom@organisms.be"}, {"error": "W", "line": "504", "code": "_d.autovary = Tool('on_start_resource', cptools.autovary, priority=0)\n", "colour": "purple", "author": "tom@organisms.be"}, {"error": "W", "line": "505", "code": "_d.json_in = Tool('before_request_body', jsontools.json_in, priority=30)\n", "colour": "purple", "author": "tom@organisms.be"}, {"error": "W", "line": "506", "code": "_d.json_out = Tool('before_handler', jsontools.json_out, priority=30)\n", "colour": "purple", "author": "tom@organisms.be"}, {"error": "W", "line": "507", "code": "_d.auth_basic = Tool('before_handler', auth_basic.basic_auth, priority=1)\n", "colour": "purple", "author": "tom@organisms.be"}, {"error": "W", "line": "508", "code": "_d.auth_digest = Tool('before_handler', auth_digest.digest_auth, priority=1)\n", "colour": "purple", "author": "tom@organisms.be"}, {"error": "none", "line": "509", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "510", "code": "del _d, cptools, encoding, auth, static\n", "colour": "black", "author": "tom@organisms.be"}]]}