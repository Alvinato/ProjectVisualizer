{"path": "/home/asumal/git/cs410/pattern/pattern/web/pdf/utils.py", "lines": [[{"error": "none", "line": "1", "code": "#!/usr/bin/env python2\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "2", "code": "\"\"\"\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "3", "code": "Miscellaneous Routines.\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "4", "code": "\"\"\"\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "5", "code": "import struct\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "6", "code": "from sys import maxint as INF\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "7", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "8", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "9", "code": "##  Matrix operations\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "10", "code": "##\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "11", "code": "MATRIX_IDENTITY = (1, 0, 0, 1, 0, 0)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "12", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "13", "code": "def mult_matrix((a1,b1,c1,d1,e1,f1), (a0,b0,c0,d0,e0,f0)):\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "14", "code": "    \"\"\"Returns the multiplication of two matrices.\"\"\"\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "15", "code": "    return (a0*a1+c0*b1,    b0*a1+d0*b1,\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "C", "line": "16", "code": "            a0*c1+c0*d1,    b0*c1+d0*d1,\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "17", "code": "            a0*e1+c0*f1+e0, b0*e1+d0*f1+f0)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "18", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "19", "code": "def translate_matrix((a,b,c,d,e,f), (x,y)):\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "20", "code": "    \"\"\"Translates a matrix by (x,y).\"\"\"\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "21", "code": "    return (a,b,c,d,x*a+y*c+e,x*b+y*d+f)\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "22", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "23", "code": "def apply_matrix_pt((a,b,c,d,e,f), (x,y)):\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "24", "code": "    \"\"\"Applies a matrix to a point.\"\"\"\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "25", "code": "    return (a*x+c*y+e, b*x+d*y+f)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "26", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "W", "line": "27", "code": "def apply_matrix_norm((a,b,c,d,e,f), (p,q)):\n", "colour": "purple", "author": "tom@organisms.be"}, {"error": "none", "line": "28", "code": "    \"\"\"Equivalent to apply_matrix_pt(M, (p,q)) - apply_matrix_pt(M, (0,0))\"\"\"\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "29", "code": "    return (a*p+c*q, b*p+d*q)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "30", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "31", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "32", "code": "##  Utility functions\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "33", "code": "##\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "34", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "35", "code": "# uniq\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "36", "code": "def uniq(objs):\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "37", "code": "    \"\"\"Eliminates duplicated elements.\"\"\"\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "38", "code": "    done = set()\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "39", "code": "    for obj in objs:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "40", "code": "        if obj in done: continue\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "41", "code": "        done.add(obj)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "42", "code": "        yield obj\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "43", "code": "    return\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "44", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "45", "code": "# csort\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "46", "code": "def csort(objs, key=lambda x:x):\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "47", "code": "    \"\"\"Order-preserving sorting function.\"\"\"\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "48", "code": "    idxs = dict( (obj,i) for (i,obj) in enumerate(objs) )\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "49", "code": "    return sorted(objs, key=lambda obj: (key(obj), idxs[obj]))\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "50", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "51", "code": "# fsplit\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "52", "code": "def fsplit(pred, objs):\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "53", "code": "    \"\"\"Split a list into two classes according to the predicate.\"\"\"\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "54", "code": "    t = []\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "C", "line": "55", "code": "    f = []\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "56", "code": "    for obj in objs:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "57", "code": "        if pred(obj):\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "58", "code": "            t.append(obj)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "59", "code": "        else:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "60", "code": "            f.append(obj)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "61", "code": "    return (t,f)\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "62", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "63", "code": "# drange\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "64", "code": "def drange(v0, v1, d):\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "65", "code": "    \"\"\"Returns a discrete range.\"\"\"\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "66", "code": "    assert v0 < v1\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "67", "code": "    return xrange(int(v0)/d, int(v1+d-1)/d)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "68", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "69", "code": "# get_bound\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "70", "code": "def get_bound(pts):\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "71", "code": "    \"\"\"Compute a minimal rectangle that covers all the points.\"\"\"\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "72", "code": "    (x0, y0, x1, y1) = (INF, INF, -INF, -INF)\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "C", "line": "73", "code": "    for (x,y) in pts:\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "C", "line": "74", "code": "        x0 = min(x0, x)\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "C", "line": "75", "code": "        y0 = min(y0, y)\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "C", "line": "76", "code": "        x1 = max(x1, x)\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "C", "line": "77", "code": "        y1 = max(y1, y)\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "C", "line": "78", "code": "    return (x0,y0,x1,y1)\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "79", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "80", "code": "# pick\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "81", "code": "def pick(seq, func, maxobj=None):\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "82", "code": "    \"\"\"Picks the object obj where func(obj) has the highest value.\"\"\"\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "83", "code": "    maxscore = None\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "84", "code": "    for obj in seq:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "85", "code": "        score = func(obj)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "86", "code": "        if maxscore is None or maxscore < score:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "87", "code": "            (maxscore,maxobj) = (score,obj)\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "88", "code": "    return maxobj\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "89", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "90", "code": "# choplist\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "91", "code": "def choplist(n, seq):\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "92", "code": "    \"\"\"Groups every n elements of the list.\"\"\"\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "93", "code": "    r = []\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "C", "line": "94", "code": "    for x in seq:\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "95", "code": "        r.append(x)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "96", "code": "        if len(r) == n:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "97", "code": "            yield tuple(r)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "98", "code": "            r = []\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "99", "code": "    return\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "100", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "101", "code": "# nunpack\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "102", "code": "def nunpack(s, default=0):\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "103", "code": "    \"\"\"Unpacks 1 to 4 byte integers (big endian).\"\"\"\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "104", "code": "    l = len(s)\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "105", "code": "    if not l:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "106", "code": "        return default\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "107", "code": "    elif l == 1:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "108", "code": "        return ord(s)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "109", "code": "    elif l == 2:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "110", "code": "        return struct.unpack('>H', s)[0]\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "111", "code": "    elif l == 3:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "112", "code": "        return struct.unpack('>L', '\\x00'+s)[0]\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "113", "code": "    elif l == 4:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "114", "code": "        return struct.unpack('>L', s)[0]\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "115", "code": "    else:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "116", "code": "        raise TypeError('invalid length: %d' % l)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "117", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "118", "code": "# decode_text\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "119", "code": "PDFDocEncoding = ''.join( unichr(x) for x in (\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "C", "line": "120", "code": "  0x0000, 0x0001, 0x0002, 0x0003, 0x0004, 0x0005, 0x0006, 0x0007,\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "C", "line": "121", "code": "  0x0008, 0x0009, 0x000a, 0x000b, 0x000c, 0x000d, 0x000e, 0x000f,\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "C", "line": "122", "code": "  0x0010, 0x0011, 0x0012, 0x0013, 0x0014, 0x0015, 0x0017, 0x0017,\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "C", "line": "123", "code": "  0x02d8, 0x02c7, 0x02c6, 0x02d9, 0x02dd, 0x02db, 0x02da, 0x02dc,\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "C", "line": "124", "code": "  0x0020, 0x0021, 0x0022, 0x0023, 0x0024, 0x0025, 0x0026, 0x0027,\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "C", "line": "125", "code": "  0x0028, 0x0029, 0x002a, 0x002b, 0x002c, 0x002d, 0x002e, 0x002f,\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "C", "line": "126", "code": "  0x0030, 0x0031, 0x0032, 0x0033, 0x0034, 0x0035, 0x0036, 0x0037,\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "C", "line": "127", "code": "  0x0038, 0x0039, 0x003a, 0x003b, 0x003c, 0x003d, 0x003e, 0x003f,\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "C", "line": "128", "code": "  0x0040, 0x0041, 0x0042, 0x0043, 0x0044, 0x0045, 0x0046, 0x0047,\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "C", "line": "129", "code": "  0x0048, 0x0049, 0x004a, 0x004b, 0x004c, 0x004d, 0x004e, 0x004f,\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "C", "line": "130", "code": "  0x0050, 0x0051, 0x0052, 0x0053, 0x0054, 0x0055, 0x0056, 0x0057,\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "C", "line": "131", "code": "  0x0058, 0x0059, 0x005a, 0x005b, 0x005c, 0x005d, 0x005e, 0x005f,\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "C", "line": "132", "code": "  0x0060, 0x0061, 0x0062, 0x0063, 0x0064, 0x0065, 0x0066, 0x0067,\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "C", "line": "133", "code": "  0x0068, 0x0069, 0x006a, 0x006b, 0x006c, 0x006d, 0x006e, 0x006f,\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "C", "line": "134", "code": "  0x0070, 0x0071, 0x0072, 0x0073, 0x0074, 0x0075, 0x0076, 0x0077,\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "C", "line": "135", "code": "  0x0078, 0x0079, 0x007a, 0x007b, 0x007c, 0x007d, 0x007e, 0x0000,\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "C", "line": "136", "code": "  0x2022, 0x2020, 0x2021, 0x2026, 0x2014, 0x2013, 0x0192, 0x2044,\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "C", "line": "137", "code": "  0x2039, 0x203a, 0x2212, 0x2030, 0x201e, 0x201c, 0x201d, 0x2018,\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "C", "line": "138", "code": "  0x2019, 0x201a, 0x2122, 0xfb01, 0xfb02, 0x0141, 0x0152, 0x0160,\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "C", "line": "139", "code": "  0x0178, 0x017d, 0x0131, 0x0142, 0x0153, 0x0161, 0x017e, 0x0000,\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "C", "line": "140", "code": "  0x20ac, 0x00a1, 0x00a2, 0x00a3, 0x00a4, 0x00a5, 0x00a6, 0x00a7,\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "C", "line": "141", "code": "  0x00a8, 0x00a9, 0x00aa, 0x00ab, 0x00ac, 0x0000, 0x00ae, 0x00af,\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "C", "line": "142", "code": "  0x00b0, 0x00b1, 0x00b2, 0x00b3, 0x00b4, 0x00b5, 0x00b6, 0x00b7,\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "C", "line": "143", "code": "  0x00b8, 0x00b9, 0x00ba, 0x00bb, 0x00bc, 0x00bd, 0x00be, 0x00bf,\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "C", "line": "144", "code": "  0x00c0, 0x00c1, 0x00c2, 0x00c3, 0x00c4, 0x00c5, 0x00c6, 0x00c7,\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "C", "line": "145", "code": "  0x00c8, 0x00c9, 0x00ca, 0x00cb, 0x00cc, 0x00cd, 0x00ce, 0x00cf,\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "C", "line": "146", "code": "  0x00d0, 0x00d1, 0x00d2, 0x00d3, 0x00d4, 0x00d5, 0x00d6, 0x00d7,\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "C", "line": "147", "code": "  0x00d8, 0x00d9, 0x00da, 0x00db, 0x00dc, 0x00dd, 0x00de, 0x00df,\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "C", "line": "148", "code": "  0x00e0, 0x00e1, 0x00e2, 0x00e3, 0x00e4, 0x00e5, 0x00e6, 0x00e7,\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "C", "line": "149", "code": "  0x00e8, 0x00e9, 0x00ea, 0x00eb, 0x00ec, 0x00ed, 0x00ee, 0x00ef,\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "C", "line": "150", "code": "  0x00f0, 0x00f1, 0x00f2, 0x00f3, 0x00f4, 0x00f5, 0x00f6, 0x00f7,\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "C", "line": "151", "code": "  0x00f8, 0x00f9, 0x00fa, 0x00fb, 0x00fc, 0x00fd, 0x00fe, 0x00ff,\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "152", "code": "))\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "153", "code": "def decode_text(s):\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "154", "code": "    \"\"\"Decodes a PDFDocEncoding string to Unicode.\"\"\"\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "155", "code": "    if s.startswith('\\xfe\\xff'):\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "156", "code": "        return unicode(s[2:], 'utf-16be', 'ignore')\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "157", "code": "    else:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "158", "code": "        return ''.join( PDFDocEncoding[ord(c)] for c in s )\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "159", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "160", "code": "# enc\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "161", "code": "def enc(x, codec='ascii'):\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "162", "code": "    \"\"\"Encodes a string for SGML/XML/HTML\"\"\"\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "163", "code": "    x = x.replace('&','&amp;').replace('>','&gt;').replace('<','&lt;').replace('\"','&quot;')\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "164", "code": "    return x.encode(codec, 'xmlcharrefreplace')\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "165", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "166", "code": "def bbox2str((x0,y0,x1,y1)):\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "167", "code": "    return '%.3f,%.3f,%.3f,%.3f' % (x0, y0, x1, y1)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "168", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "169", "code": "def matrix2str((a,b,c,d,e,f)):\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "C", "line": "170", "code": "    return '[%.2f,%.2f,%.2f,%.2f, (%.2f,%.2f)]' % (a,b,c,d,e,f)\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "171", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "172", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "173", "code": "##  ObjIdRange\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "174", "code": "##\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "175", "code": "class ObjIdRange(object):\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "176", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "177", "code": "    \"A utility class to represent a range of object IDs.\"\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "178", "code": "    \n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "179", "code": "    def __init__(self, start, nobjs):\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "180", "code": "        self.start = start\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "181", "code": "        self.nobjs = nobjs\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "182", "code": "        return\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "183", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "184", "code": "    def __repr__(self):\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "185", "code": "        return '<ObjIdRange: %d-%d>' % (self.get_start_id(), self.get_end_id())\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "186", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "187", "code": "    def get_start_id(self):\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "188", "code": "        return self.start\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "189", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "190", "code": "    def get_end_id(self):\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "191", "code": "        return self.start + self.nobjs - 1\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "192", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "193", "code": "    def get_nobjs(self):\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "194", "code": "        return self.nobjs\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "195", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "196", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "197", "code": "##  Plane\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "198", "code": "##\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "199", "code": "##  A set-like data structure for objects placed on a plane.\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "200", "code": "##  Can efficiently find objects in a certain rectangular area.\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "201", "code": "##  It maintains two parallel lists of objects, each of\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "202", "code": "##  which is sorted by its x or y coordinate.\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "203", "code": "##\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "204", "code": "class Plane(object):\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "205", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "206", "code": "    def __init__(self, objs=None, gridsize=50):\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "207", "code": "        self._objs = []\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "208", "code": "        self._grid = {}\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "209", "code": "        self.gridsize = gridsize\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "210", "code": "        if objs is not None:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "211", "code": "            for obj in objs:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "212", "code": "                self.add(obj)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "213", "code": "        return\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "214", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "215", "code": "    def __repr__(self):\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "216", "code": "        return ('<Plane objs=%r>' % list(self))\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "217", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "218", "code": "    def __iter__(self):\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "219", "code": "        return iter(self._objs)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "220", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "221", "code": "    def __len__(self):\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "222", "code": "        return len(self._objs)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "223", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "224", "code": "    def __contains__(self, obj):\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "225", "code": "        return obj in self._objs\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "226", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "227", "code": "    def _getrange(self, (x0,y0,x1,y1)):\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "C", "line": "228", "code": "        for y in drange(y0, y1, self.gridsize):\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "C", "line": "229", "code": "            for x in drange(x0, x1, self.gridsize):\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "C", "line": "230", "code": "                yield (x,y)\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "231", "code": "        return\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "232", "code": "    \n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "233", "code": "    # add(obj): place an object.\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "234", "code": "    def add(self, obj):\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "235", "code": "        for k in self._getrange((obj.x0, obj.y0, obj.x1, obj.y1)):\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "236", "code": "            if k not in self._grid:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "237", "code": "                r = []\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "238", "code": "                self._grid[k] = r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "239", "code": "            else:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "240", "code": "                r = self._grid[k]\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "241", "code": "            r.append(obj)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "242", "code": "        self._objs.append(obj)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "243", "code": "        return\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "244", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "245", "code": "    # remove(obj): displace an object.\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "246", "code": "    def remove(self, obj):\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "247", "code": "        for k in self._getrange((obj.x0, obj.y0, obj.x1, obj.y1)):\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "248", "code": "            try:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "249", "code": "                self._grid[k].remove(obj)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "250", "code": "            except (KeyError, ValueError):\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "251", "code": "                pass\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "252", "code": "        self._objs.remove(obj)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "253", "code": "        return\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "254", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "255", "code": "    # find(): finds objects that are in a certain area.\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "256", "code": "    def find(self, (x0,y0,x1,y1)):\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "257", "code": "        done = set()\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "258", "code": "        for k in self._getrange((x0,y0,x1,y1)):\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "C", "line": "259", "code": "            if k not in self._grid: continue\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "260", "code": "            for obj in self._grid[k]:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "261", "code": "                if obj in done: continue\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "262", "code": "                done.add(obj)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "263", "code": "                if (obj.x1 <= x0 or x1 <= obj.x0 or\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "264", "code": "                    obj.y1 <= y0 or y1 <= obj.y0): continue\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "265", "code": "                yield obj\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "266", "code": "        return\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "267", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "268", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "269", "code": "# create_bmp\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "270", "code": "def create_bmp(data, bits, width, height):\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "C", "line": "271", "code": "    info = struct.pack('<IiiHHIIIIII', 40, width, height, 1, bits, 0, len(data), 0, 0, 0, 0)\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "272", "code": "    assert len(info) == 40, len(info)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "273", "code": "    header = struct.pack('<ccIHHI', 'B', 'M', 14+40+len(data), 0, 0, 14+40)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "274", "code": "    assert len(header) == 14, len(header)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "W", "line": "275", "code": "    # XXX re-rasterize every line\n", "colour": "purple", "author": "tom@organisms.be"}, {"error": "none", "line": "276", "code": "    return header+info+data\n", "colour": "black", "author": "tom@organisms.be"}]]}