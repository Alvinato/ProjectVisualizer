{"path": "/home/asumal/git/cs410/pattern/pattern/server/cherrypy/cherrypy/_cpserver.py", "lines": [[{"index": "1", "colour": "orange", "code": "\"\"\"Manage HTTP servers with CherryPy.\"\"\"\n", "error": "none", "author": "tom@organisms.be"}, {"index": "2", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "3", "colour": "green", "code": "import warnings\n", "error": "W", "author": "tom@organisms.be"}, {"index": "4", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "5", "colour": "orange", "code": "import cherrypy\n", "error": "none", "author": "tom@organisms.be"}, {"index": "6", "colour": "orange", "code": "from cherrypy.lib import attributes\n", "error": "none", "author": "tom@organisms.be"}, {"index": "7", "colour": "green", "code": "from cherrypy._cpcompat import basestring, py3k\n", "error": "W", "author": "tom@organisms.be"}, {"index": "8", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "9", "colour": "orange", "code": "# We import * because we want to export check_port\n", "error": "none", "author": "tom@organisms.be"}, {"index": "10", "colour": "orange", "code": "# et al as attributes of this module.\n", "error": "none", "author": "tom@organisms.be"}, {"index": "11", "colour": "green", "code": "from cherrypy.process.servers import *\n", "error": "W", "author": "tom@organisms.be"}, {"index": "12", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "13", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "14", "colour": "blue", "code": "class Server(ServerAdapter):\n", "error": "R", "author": "tom@organisms.be"}, {"index": "15", "colour": "orange", "code": "    \"\"\"An adapter for an HTTP server.\n", "error": "none", "author": "tom@organisms.be"}, {"index": "16", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "17", "colour": "orange", "code": "    You can set attributes (like socket_host and socket_port)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "18", "colour": "orange", "code": "    on *this* object (which is probably cherrypy.server), and call\n", "error": "none", "author": "tom@organisms.be"}, {"index": "19", "colour": "orange", "code": "    quickstart. For example::\n", "error": "none", "author": "tom@organisms.be"}, {"index": "20", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "21", "colour": "orange", "code": "        cherrypy.server.socket_port = 80\n", "error": "none", "author": "tom@organisms.be"}, {"index": "22", "colour": "orange", "code": "        cherrypy.quickstart()\n", "error": "none", "author": "tom@organisms.be"}, {"index": "23", "colour": "orange", "code": "    \"\"\"\n", "error": "none", "author": "tom@organisms.be"}, {"index": "24", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "25", "colour": "orange", "code": "    socket_port = 8080\n", "error": "none", "author": "tom@organisms.be"}, {"index": "26", "colour": "orange", "code": "    \"\"\"The TCP port on which to listen for connections.\"\"\"\n", "error": "none", "author": "tom@organisms.be"}, {"index": "27", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "28", "colour": "orange", "code": "    _socket_host = '127.0.0.1'\n", "error": "none", "author": "tom@organisms.be"}, {"index": "29", "colour": "orange", "code": "    def _get_socket_host(self):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "30", "colour": "orange", "code": "        return self._socket_host\n", "error": "none", "author": "tom@organisms.be"}, {"index": "31", "colour": "orange", "code": "    def _set_socket_host(self, value):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "32", "colour": "orange", "code": "        if value == '':\n", "error": "none", "author": "tom@organisms.be"}, {"index": "33", "colour": "orange", "code": "            raise ValueError(\"The empty string ('') is not an allowed value. \"\n", "error": "none", "author": "tom@organisms.be"}, {"index": "34", "colour": "orange", "code": "                             \"Use '0.0.0.0' instead to listen on all active \"\n", "error": "none", "author": "tom@organisms.be"}, {"index": "35", "colour": "orange", "code": "                             \"interfaces (INADDR_ANY).\")\n", "error": "none", "author": "tom@organisms.be"}, {"index": "36", "colour": "orange", "code": "        self._socket_host = value\n", "error": "none", "author": "tom@organisms.be"}, {"index": "37", "colour": "orange", "code": "    socket_host = property(_get_socket_host, _set_socket_host,\n", "error": "none", "author": "tom@organisms.be"}, {"index": "38", "colour": "orange", "code": "        doc=\"\"\"The hostname or IP address on which to listen for connections.\n", "error": "none", "author": "tom@organisms.be"}, {"index": "39", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "40", "colour": "orange", "code": "        Host values may be any IPv4 or IPv6 address, or any valid hostname.\n", "error": "none", "author": "tom@organisms.be"}, {"index": "41", "colour": "orange", "code": "        The string 'localhost' is a synonym for '127.0.0.1' (or '::1', if\n", "error": "none", "author": "tom@organisms.be"}, {"index": "42", "colour": "orange", "code": "        your hosts file prefers IPv6). The string '0.0.0.0' is a special\n", "error": "none", "author": "tom@organisms.be"}, {"index": "43", "colour": "orange", "code": "        IPv4 entry meaning \"any active interface\" (INADDR_ANY), and '::'\n", "error": "none", "author": "tom@organisms.be"}, {"index": "44", "colour": "orange", "code": "        is the similar IN6ADDR_ANY for IPv6. The empty string or None are\n", "error": "none", "author": "tom@organisms.be"}, {"index": "45", "colour": "orange", "code": "        not allowed.\"\"\")\n", "error": "none", "author": "tom@organisms.be"}, {"index": "46", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "47", "colour": "orange", "code": "    socket_file = None\n", "error": "none", "author": "tom@organisms.be"}, {"index": "48", "colour": "orange", "code": "    \"\"\"If given, the name of the UNIX socket to use instead of TCP/IP.\n", "error": "none", "author": "tom@organisms.be"}, {"index": "49", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "50", "colour": "orange", "code": "    When this option is not None, the `socket_host` and `socket_port` options\n", "error": "none", "author": "tom@organisms.be"}, {"index": "51", "colour": "orange", "code": "    are ignored.\"\"\"\n", "error": "none", "author": "tom@organisms.be"}, {"index": "52", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "53", "colour": "orange", "code": "    socket_queue_size = 5\n", "error": "none", "author": "tom@organisms.be"}, {"index": "54", "colour": "orange", "code": "    \"\"\"The 'backlog' argument to socket.listen(); specifies the maximum number\n", "error": "none", "author": "tom@organisms.be"}, {"index": "55", "colour": "orange", "code": "    of queued connections (default 5).\"\"\"\n", "error": "none", "author": "tom@organisms.be"}, {"index": "56", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "57", "colour": "orange", "code": "    socket_timeout = 10\n", "error": "none", "author": "tom@organisms.be"}, {"index": "58", "colour": "orange", "code": "    \"\"\"The timeout in seconds for accepted connections (default 10).\"\"\"\n", "error": "none", "author": "tom@organisms.be"}, {"index": "59", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "60", "colour": "orange", "code": "    shutdown_timeout = 5\n", "error": "none", "author": "tom@organisms.be"}, {"index": "61", "colour": "orange", "code": "    \"\"\"The time to wait for HTTP worker threads to clean up.\"\"\"\n", "error": "none", "author": "tom@organisms.be"}, {"index": "62", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "63", "colour": "orange", "code": "    protocol_version = 'HTTP/1.1'\n", "error": "none", "author": "tom@organisms.be"}, {"index": "64", "colour": "orange", "code": "    \"\"\"The version string to write in the Status-Line of all HTTP responses,\n", "error": "none", "author": "tom@organisms.be"}, {"index": "65", "colour": "orange", "code": "    for example, \"HTTP/1.1\" (the default). Depending on the HTTP server used,\n", "error": "none", "author": "tom@organisms.be"}, {"index": "66", "colour": "orange", "code": "    this should also limit the supported features used in the response.\"\"\"\n", "error": "none", "author": "tom@organisms.be"}, {"index": "67", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "68", "colour": "orange", "code": "    thread_pool = 10\n", "error": "none", "author": "tom@organisms.be"}, {"index": "69", "colour": "orange", "code": "    \"\"\"The number of worker threads to start up in the pool.\"\"\"\n", "error": "none", "author": "tom@organisms.be"}, {"index": "70", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "71", "colour": "orange", "code": "    thread_pool_max = -1\n", "error": "none", "author": "tom@organisms.be"}, {"index": "72", "colour": "orange", "code": "    \"\"\"The maximum size of the worker-thread pool. Use -1 to indicate no limit.\"\"\"\n", "error": "none", "author": "tom@organisms.be"}, {"index": "73", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "74", "colour": "orange", "code": "    max_request_header_size = 500 * 1024\n", "error": "none", "author": "tom@organisms.be"}, {"index": "75", "colour": "orange", "code": "    \"\"\"The maximum number of bytes allowable in the request headers. If exceeded,\n", "error": "none", "author": "tom@organisms.be"}, {"index": "76", "colour": "orange", "code": "    the HTTP server should return \"413 Request Entity Too Large\".\"\"\"\n", "error": "none", "author": "tom@organisms.be"}, {"index": "77", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "78", "colour": "orange", "code": "    max_request_body_size = 100 * 1024 * 1024\n", "error": "none", "author": "tom@organisms.be"}, {"index": "79", "colour": "orange", "code": "    \"\"\"The maximum number of bytes allowable in the request body. If exceeded,\n", "error": "none", "author": "tom@organisms.be"}, {"index": "80", "colour": "orange", "code": "    the HTTP server should return \"413 Request Entity Too Large\".\"\"\"\n", "error": "none", "author": "tom@organisms.be"}, {"index": "81", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "82", "colour": "orange", "code": "    instance = None\n", "error": "none", "author": "tom@organisms.be"}, {"index": "83", "colour": "orange", "code": "    \"\"\"If not None, this should be an HTTP server instance (such as\n", "error": "none", "author": "tom@organisms.be"}, {"index": "84", "colour": "orange", "code": "    CPWSGIServer) which cherrypy.server will control. Use this when you need\n", "error": "none", "author": "tom@organisms.be"}, {"index": "85", "colour": "orange", "code": "    more control over object instantiation than is available in the various\n", "error": "none", "author": "tom@organisms.be"}, {"index": "86", "colour": "orange", "code": "    configuration options.\"\"\"\n", "error": "none", "author": "tom@organisms.be"}, {"index": "87", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "88", "colour": "orange", "code": "    ssl_context = None\n", "error": "none", "author": "tom@organisms.be"}, {"index": "89", "colour": "orange", "code": "    \"\"\"When using PyOpenSSL, an instance of SSL.Context.\"\"\"\n", "error": "none", "author": "tom@organisms.be"}, {"index": "90", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "91", "colour": "orange", "code": "    ssl_certificate = None\n", "error": "none", "author": "tom@organisms.be"}, {"index": "92", "colour": "orange", "code": "    \"\"\"The filename of the SSL certificate to use.\"\"\"\n", "error": "none", "author": "tom@organisms.be"}, {"index": "93", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "94", "colour": "orange", "code": "    ssl_certificate_chain = None\n", "error": "none", "author": "tom@organisms.be"}, {"index": "95", "colour": "orange", "code": "    \"\"\"When using PyOpenSSL, the certificate chain to pass to\n", "error": "none", "author": "tom@organisms.be"}, {"index": "96", "colour": "orange", "code": "    Context.load_verify_locations.\"\"\"\n", "error": "none", "author": "tom@organisms.be"}, {"index": "97", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "98", "colour": "orange", "code": "    ssl_private_key = None\n", "error": "none", "author": "tom@organisms.be"}, {"index": "99", "colour": "orange", "code": "    \"\"\"The filename of the private key to use with SSL.\"\"\"\n", "error": "none", "author": "tom@organisms.be"}, {"index": "100", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "101", "colour": "orange", "code": "    if py3k:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "102", "colour": "orange", "code": "        ssl_module = 'builtin'\n", "error": "none", "author": "tom@organisms.be"}, {"index": "103", "colour": "orange", "code": "        \"\"\"The name of a registered SSL adaptation module to use with the builtin\n", "error": "none", "author": "tom@organisms.be"}, {"index": "104", "colour": "orange", "code": "        WSGI server. Builtin options are: 'builtin' (to use the SSL library built\n", "error": "none", "author": "tom@organisms.be"}, {"index": "105", "colour": "orange", "code": "        into recent versions of Python). You may also register your\n", "error": "none", "author": "tom@organisms.be"}, {"index": "106", "colour": "orange", "code": "        own classes in the wsgiserver.ssl_adapters dict.\"\"\"\n", "error": "none", "author": "tom@organisms.be"}, {"index": "107", "colour": "orange", "code": "    else:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "108", "colour": "orange", "code": "        ssl_module = 'pyopenssl'\n", "error": "none", "author": "tom@organisms.be"}, {"index": "109", "colour": "orange", "code": "        \"\"\"The name of a registered SSL adaptation module to use with the builtin\n", "error": "none", "author": "tom@organisms.be"}, {"index": "110", "colour": "orange", "code": "        WSGI server. Builtin options are 'builtin' (to use the SSL library built\n", "error": "none", "author": "tom@organisms.be"}, {"index": "111", "colour": "orange", "code": "        into recent versions of Python) and 'pyopenssl' (to use the PyOpenSSL\n", "error": "none", "author": "tom@organisms.be"}, {"index": "112", "colour": "orange", "code": "        project, which you must install separately). You may also register your\n", "error": "none", "author": "tom@organisms.be"}, {"index": "113", "colour": "orange", "code": "        own classes in the wsgiserver.ssl_adapters dict.\"\"\"\n", "error": "none", "author": "tom@organisms.be"}, {"index": "114", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "115", "colour": "orange", "code": "    statistics = False\n", "error": "none", "author": "tom@organisms.be"}, {"index": "116", "colour": "orange", "code": "    \"\"\"Turns statistics-gathering on or off for aware HTTP servers.\"\"\"\n", "error": "none", "author": "tom@organisms.be"}, {"index": "117", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "118", "colour": "orange", "code": "    nodelay = True\n", "error": "none", "author": "tom@organisms.be"}, {"index": "119", "colour": "orange", "code": "    \"\"\"If True (the default since 3.1), sets the TCP_NODELAY socket option.\"\"\"\n", "error": "none", "author": "tom@organisms.be"}, {"index": "120", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "121", "colour": "orange", "code": "    wsgi_version = (1, 0)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "122", "colour": "orange", "code": "    \"\"\"The WSGI version tuple to use with the builtin WSGI server.\n", "error": "none", "author": "tom@organisms.be"}, {"index": "123", "colour": "orange", "code": "    The provided options are (1, 0) [which includes support for PEP 3333,\n", "error": "none", "author": "tom@organisms.be"}, {"index": "124", "colour": "orange", "code": "    which declares it covers WSGI version 1.0.1 but still mandates the\n", "error": "none", "author": "tom@organisms.be"}, {"index": "125", "colour": "orange", "code": "    wsgi.version (1, 0)] and ('u', 0), an experimental unicode version.\n", "error": "none", "author": "tom@organisms.be"}, {"index": "126", "colour": "orange", "code": "    You may create and register your own experimental versions of the WSGI\n", "error": "none", "author": "tom@organisms.be"}, {"index": "127", "colour": "orange", "code": "    protocol by adding custom classes to the wsgiserver.wsgi_gateways dict.\"\"\"\n", "error": "none", "author": "tom@organisms.be"}, {"index": "128", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "129", "colour": "green", "code": "    def __init__(self):\n", "error": "W", "author": "tom@organisms.be"}, {"index": "130", "colour": "orange", "code": "        self.bus = cherrypy.engine\n", "error": "none", "author": "tom@organisms.be"}, {"index": "131", "colour": "orange", "code": "        self.httpserver = None\n", "error": "none", "author": "tom@organisms.be"}, {"index": "132", "colour": "orange", "code": "        self.interrupt = None\n", "error": "none", "author": "tom@organisms.be"}, {"index": "133", "colour": "orange", "code": "        self.running = False\n", "error": "none", "author": "tom@organisms.be"}, {"index": "134", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "135", "colour": "orange", "code": "    def httpserver_from_self(self, httpserver=None):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "136", "colour": "orange", "code": "        \"\"\"Return a (httpserver, bind_addr) pair based on self attributes.\"\"\"\n", "error": "none", "author": "tom@organisms.be"}, {"index": "137", "colour": "orange", "code": "        if httpserver is None:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "138", "colour": "orange", "code": "            httpserver = self.instance\n", "error": "none", "author": "tom@organisms.be"}, {"index": "139", "colour": "orange", "code": "        if httpserver is None:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "140", "colour": "orange", "code": "            from cherrypy import _cpwsgi_server\n", "error": "none", "author": "tom@organisms.be"}, {"index": "141", "colour": "orange", "code": "            httpserver = _cpwsgi_server.CPWSGIServer(self)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "142", "colour": "orange", "code": "        if isinstance(httpserver, basestring):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "143", "colour": "orange", "code": "            # Is anyone using this? Can I add an arg?\n", "error": "none", "author": "tom@organisms.be"}, {"index": "144", "colour": "orange", "code": "            httpserver = attributes(httpserver)(self)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "145", "colour": "orange", "code": "        return httpserver, self.bind_addr\n", "error": "none", "author": "tom@organisms.be"}, {"index": "146", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "147", "colour": "orange", "code": "    def start(self):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "148", "colour": "orange", "code": "        \"\"\"Start the HTTP server.\"\"\"\n", "error": "none", "author": "tom@organisms.be"}, {"index": "149", "colour": "orange", "code": "        if not self.httpserver:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "150", "colour": "orange", "code": "            self.httpserver, self.bind_addr = self.httpserver_from_self()\n", "error": "none", "author": "tom@organisms.be"}, {"index": "151", "colour": "orange", "code": "        ServerAdapter.start(self)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "152", "colour": "orange", "code": "    start.priority = 75\n", "error": "none", "author": "tom@organisms.be"}, {"index": "153", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "154", "colour": "orange", "code": "    def _get_bind_addr(self):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "155", "colour": "orange", "code": "        if self.socket_file:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "156", "colour": "orange", "code": "            return self.socket_file\n", "error": "none", "author": "tom@organisms.be"}, {"index": "157", "colour": "orange", "code": "        if self.socket_host is None and self.socket_port is None:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "158", "colour": "orange", "code": "            return None\n", "error": "none", "author": "tom@organisms.be"}, {"index": "159", "colour": "orange", "code": "        return (self.socket_host, self.socket_port)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "160", "colour": "orange", "code": "    def _set_bind_addr(self, value):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "161", "colour": "orange", "code": "        if value is None:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "162", "colour": "orange", "code": "            self.socket_file = None\n", "error": "none", "author": "tom@organisms.be"}, {"index": "163", "colour": "orange", "code": "            self.socket_host = None\n", "error": "none", "author": "tom@organisms.be"}, {"index": "164", "colour": "orange", "code": "            self.socket_port = None\n", "error": "none", "author": "tom@organisms.be"}, {"index": "165", "colour": "orange", "code": "        elif isinstance(value, basestring):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "166", "colour": "orange", "code": "            self.socket_file = value\n", "error": "none", "author": "tom@organisms.be"}, {"index": "167", "colour": "orange", "code": "            self.socket_host = None\n", "error": "none", "author": "tom@organisms.be"}, {"index": "168", "colour": "orange", "code": "            self.socket_port = None\n", "error": "none", "author": "tom@organisms.be"}, {"index": "169", "colour": "orange", "code": "        else:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "170", "colour": "orange", "code": "            try:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "171", "colour": "orange", "code": "                self.socket_host, self.socket_port = value\n", "error": "none", "author": "tom@organisms.be"}, {"index": "172", "colour": "orange", "code": "                self.socket_file = None\n", "error": "none", "author": "tom@organisms.be"}, {"index": "173", "colour": "orange", "code": "            except ValueError:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "174", "colour": "orange", "code": "                raise ValueError(\"bind_addr must be a (host, port) tuple \"\n", "error": "none", "author": "tom@organisms.be"}, {"index": "175", "colour": "orange", "code": "                                 \"(for TCP sockets) or a string (for Unix \"\n", "error": "none", "author": "tom@organisms.be"}, {"index": "176", "colour": "orange", "code": "                                 \"domain sockets), not %r\" % value)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "177", "colour": "orange", "code": "    bind_addr = property(_get_bind_addr, _set_bind_addr,\n", "error": "none", "author": "tom@organisms.be"}, {"index": "178", "colour": "orange", "code": "        doc='A (host, port) tuple for TCP sockets or a str for Unix domain sockets.')\n", "error": "none", "author": "tom@organisms.be"}, {"index": "179", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "180", "colour": "orange", "code": "    def base(self):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "181", "colour": "orange", "code": "        \"\"\"Return the base (scheme://host[:port] or sock file) for this server.\"\"\"\n", "error": "none", "author": "tom@organisms.be"}, {"index": "182", "colour": "orange", "code": "        if self.socket_file:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "183", "colour": "orange", "code": "            return self.socket_file\n", "error": "none", "author": "tom@organisms.be"}, {"index": "184", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "185", "colour": "orange", "code": "        host = self.socket_host\n", "error": "none", "author": "tom@organisms.be"}, {"index": "186", "colour": "orange", "code": "        if host in ('0.0.0.0', '::'):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "187", "colour": "orange", "code": "            # 0.0.0.0 is INADDR_ANY and :: is IN6ADDR_ANY.\n", "error": "none", "author": "tom@organisms.be"}, {"index": "188", "colour": "orange", "code": "            # Look up the host name, which should be the\n", "error": "none", "author": "tom@organisms.be"}, {"index": "189", "colour": "orange", "code": "            # safest thing to spit out in a URL.\n", "error": "none", "author": "tom@organisms.be"}, {"index": "190", "colour": "orange", "code": "            import socket\n", "error": "none", "author": "tom@organisms.be"}, {"index": "191", "colour": "orange", "code": "            host = socket.gethostname()\n", "error": "none", "author": "tom@organisms.be"}, {"index": "192", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "193", "colour": "orange", "code": "        port = self.socket_port\n", "error": "none", "author": "tom@organisms.be"}, {"index": "194", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "195", "colour": "orange", "code": "        if self.ssl_certificate:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "196", "colour": "orange", "code": "            scheme = \"https\"\n", "error": "none", "author": "tom@organisms.be"}, {"index": "197", "colour": "orange", "code": "            if port != 443:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "198", "colour": "orange", "code": "                host += \":%s\" % port\n", "error": "none", "author": "tom@organisms.be"}, {"index": "199", "colour": "orange", "code": "        else:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "200", "colour": "orange", "code": "            scheme = \"http\"\n", "error": "none", "author": "tom@organisms.be"}, {"index": "201", "colour": "orange", "code": "            if port != 80:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "202", "colour": "orange", "code": "                host += \":%s\" % port\n", "error": "none", "author": "tom@organisms.be"}, {"index": "203", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "204", "colour": "orange", "code": "        return \"%s://%s\" % (scheme, host)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "205", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}]]}