{"path": "/home/asumal/git/cs410/pattern/pattern/server/cherrypy/cherrypy/_cpserver.py", "lines": [[{"error": "none", "line": "1", "code": "\"\"\"Manage HTTP servers with CherryPy.\"\"\"\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "2", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "W", "line": "3", "code": "import warnings\n", "colour": "purple", "author": "tom@organisms.be"}, {"error": "none", "line": "4", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "5", "code": "import cherrypy\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "6", "code": "from cherrypy.lib import attributes\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "W", "line": "7", "code": "from cherrypy._cpcompat import basestring, py3k\n", "colour": "purple", "author": "tom@organisms.be"}, {"error": "none", "line": "8", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "9", "code": "# We import * because we want to export check_port\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "10", "code": "# et al as attributes of this module.\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "W", "line": "11", "code": "from cherrypy.process.servers import *\n", "colour": "purple", "author": "tom@organisms.be"}, {"error": "none", "line": "12", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "13", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "R", "line": "14", "code": "class Server(ServerAdapter):\n", "colour": "green", "author": "tom@organisms.be"}, {"error": "none", "line": "15", "code": "    \"\"\"An adapter for an HTTP server.\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "16", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "17", "code": "    You can set attributes (like socket_host and socket_port)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "18", "code": "    on *this* object (which is probably cherrypy.server), and call\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "19", "code": "    quickstart. For example::\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "20", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "21", "code": "        cherrypy.server.socket_port = 80\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "22", "code": "        cherrypy.quickstart()\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "23", "code": "    \"\"\"\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "24", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "25", "code": "    socket_port = 8080\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "26", "code": "    \"\"\"The TCP port on which to listen for connections.\"\"\"\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "27", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "28", "code": "    _socket_host = '127.0.0.1'\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "29", "code": "    def _get_socket_host(self):\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "30", "code": "        return self._socket_host\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "31", "code": "    def _set_socket_host(self, value):\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "32", "code": "        if value == '':\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "33", "code": "            raise ValueError(\"The empty string ('') is not an allowed value. \"\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "34", "code": "                             \"Use '0.0.0.0' instead to listen on all active \"\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "35", "code": "                             \"interfaces (INADDR_ANY).\")\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "36", "code": "        self._socket_host = value\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "37", "code": "    socket_host = property(_get_socket_host, _set_socket_host,\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "38", "code": "        doc=\"\"\"The hostname or IP address on which to listen for connections.\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "39", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "40", "code": "        Host values may be any IPv4 or IPv6 address, or any valid hostname.\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "41", "code": "        The string 'localhost' is a synonym for '127.0.0.1' (or '::1', if\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "42", "code": "        your hosts file prefers IPv6). The string '0.0.0.0' is a special\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "43", "code": "        IPv4 entry meaning \"any active interface\" (INADDR_ANY), and '::'\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "44", "code": "        is the similar IN6ADDR_ANY for IPv6. The empty string or None are\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "45", "code": "        not allowed.\"\"\")\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "46", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "47", "code": "    socket_file = None\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "48", "code": "    \"\"\"If given, the name of the UNIX socket to use instead of TCP/IP.\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "49", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "50", "code": "    When this option is not None, the `socket_host` and `socket_port` options\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "51", "code": "    are ignored.\"\"\"\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "52", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "53", "code": "    socket_queue_size = 5\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "54", "code": "    \"\"\"The 'backlog' argument to socket.listen(); specifies the maximum number\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "55", "code": "    of queued connections (default 5).\"\"\"\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "56", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "57", "code": "    socket_timeout = 10\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "58", "code": "    \"\"\"The timeout in seconds for accepted connections (default 10).\"\"\"\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "59", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "60", "code": "    shutdown_timeout = 5\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "61", "code": "    \"\"\"The time to wait for HTTP worker threads to clean up.\"\"\"\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "62", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "63", "code": "    protocol_version = 'HTTP/1.1'\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "64", "code": "    \"\"\"The version string to write in the Status-Line of all HTTP responses,\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "65", "code": "    for example, \"HTTP/1.1\" (the default). Depending on the HTTP server used,\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "66", "code": "    this should also limit the supported features used in the response.\"\"\"\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "67", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "68", "code": "    thread_pool = 10\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "69", "code": "    \"\"\"The number of worker threads to start up in the pool.\"\"\"\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "70", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "71", "code": "    thread_pool_max = -1\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "72", "code": "    \"\"\"The maximum size of the worker-thread pool. Use -1 to indicate no limit.\"\"\"\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "73", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "74", "code": "    max_request_header_size = 500 * 1024\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "75", "code": "    \"\"\"The maximum number of bytes allowable in the request headers. If exceeded,\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "76", "code": "    the HTTP server should return \"413 Request Entity Too Large\".\"\"\"\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "77", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "78", "code": "    max_request_body_size = 100 * 1024 * 1024\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "79", "code": "    \"\"\"The maximum number of bytes allowable in the request body. If exceeded,\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "80", "code": "    the HTTP server should return \"413 Request Entity Too Large\".\"\"\"\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "81", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "82", "code": "    instance = None\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "83", "code": "    \"\"\"If not None, this should be an HTTP server instance (such as\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "84", "code": "    CPWSGIServer) which cherrypy.server will control. Use this when you need\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "85", "code": "    more control over object instantiation than is available in the various\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "86", "code": "    configuration options.\"\"\"\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "87", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "88", "code": "    ssl_context = None\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "89", "code": "    \"\"\"When using PyOpenSSL, an instance of SSL.Context.\"\"\"\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "90", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "91", "code": "    ssl_certificate = None\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "92", "code": "    \"\"\"The filename of the SSL certificate to use.\"\"\"\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "93", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "94", "code": "    ssl_certificate_chain = None\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "95", "code": "    \"\"\"When using PyOpenSSL, the certificate chain to pass to\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "96", "code": "    Context.load_verify_locations.\"\"\"\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "97", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "98", "code": "    ssl_private_key = None\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "99", "code": "    \"\"\"The filename of the private key to use with SSL.\"\"\"\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "100", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "101", "code": "    if py3k:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "102", "code": "        ssl_module = 'builtin'\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "103", "code": "        \"\"\"The name of a registered SSL adaptation module to use with the builtin\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "C", "line": "104", "code": "        WSGI server. Builtin options are: 'builtin' (to use the SSL library built\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "105", "code": "        into recent versions of Python). You may also register your\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "106", "code": "        own classes in the wsgiserver.ssl_adapters dict.\"\"\"\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "107", "code": "    else:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "108", "code": "        ssl_module = 'pyopenssl'\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "109", "code": "        \"\"\"The name of a registered SSL adaptation module to use with the builtin\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "110", "code": "        WSGI server. Builtin options are 'builtin' (to use the SSL library built\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "111", "code": "        into recent versions of Python) and 'pyopenssl' (to use the PyOpenSSL\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "112", "code": "        project, which you must install separately). You may also register your\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "113", "code": "        own classes in the wsgiserver.ssl_adapters dict.\"\"\"\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "114", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "115", "code": "    statistics = False\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "116", "code": "    \"\"\"Turns statistics-gathering on or off for aware HTTP servers.\"\"\"\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "117", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "118", "code": "    nodelay = True\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "119", "code": "    \"\"\"If True (the default since 3.1), sets the TCP_NODELAY socket option.\"\"\"\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "120", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "121", "code": "    wsgi_version = (1, 0)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "122", "code": "    \"\"\"The WSGI version tuple to use with the builtin WSGI server.\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "123", "code": "    The provided options are (1, 0) [which includes support for PEP 3333,\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "124", "code": "    which declares it covers WSGI version 1.0.1 but still mandates the\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "125", "code": "    wsgi.version (1, 0)] and ('u', 0), an experimental unicode version.\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "126", "code": "    You may create and register your own experimental versions of the WSGI\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "127", "code": "    protocol by adding custom classes to the wsgiserver.wsgi_gateways dict.\"\"\"\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "128", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "W", "line": "129", "code": "    def __init__(self):\n", "colour": "purple", "author": "tom@organisms.be"}, {"error": "none", "line": "130", "code": "        self.bus = cherrypy.engine\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "131", "code": "        self.httpserver = None\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "132", "code": "        self.interrupt = None\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "133", "code": "        self.running = False\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "134", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "135", "code": "    def httpserver_from_self(self, httpserver=None):\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "136", "code": "        \"\"\"Return a (httpserver, bind_addr) pair based on self attributes.\"\"\"\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "137", "code": "        if httpserver is None:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "138", "code": "            httpserver = self.instance\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "139", "code": "        if httpserver is None:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "140", "code": "            from cherrypy import _cpwsgi_server\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "141", "code": "            httpserver = _cpwsgi_server.CPWSGIServer(self)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "142", "code": "        if isinstance(httpserver, basestring):\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "143", "code": "            # Is anyone using this? Can I add an arg?\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "144", "code": "            httpserver = attributes(httpserver)(self)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "145", "code": "        return httpserver, self.bind_addr\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "146", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "147", "code": "    def start(self):\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "148", "code": "        \"\"\"Start the HTTP server.\"\"\"\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "149", "code": "        if not self.httpserver:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "150", "code": "            self.httpserver, self.bind_addr = self.httpserver_from_self()\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "151", "code": "        ServerAdapter.start(self)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "152", "code": "    start.priority = 75\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "153", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "154", "code": "    def _get_bind_addr(self):\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "155", "code": "        if self.socket_file:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "156", "code": "            return self.socket_file\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "157", "code": "        if self.socket_host is None and self.socket_port is None:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "158", "code": "            return None\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "159", "code": "        return (self.socket_host, self.socket_port)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "160", "code": "    def _set_bind_addr(self, value):\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "161", "code": "        if value is None:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "162", "code": "            self.socket_file = None\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "163", "code": "            self.socket_host = None\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "164", "code": "            self.socket_port = None\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "165", "code": "        elif isinstance(value, basestring):\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "166", "code": "            self.socket_file = value\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "167", "code": "            self.socket_host = None\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "168", "code": "            self.socket_port = None\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "169", "code": "        else:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "170", "code": "            try:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "171", "code": "                self.socket_host, self.socket_port = value\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "172", "code": "                self.socket_file = None\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "173", "code": "            except ValueError:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "174", "code": "                raise ValueError(\"bind_addr must be a (host, port) tuple \"\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "175", "code": "                                 \"(for TCP sockets) or a string (for Unix \"\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "176", "code": "                                 \"domain sockets), not %r\" % value)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "177", "code": "    bind_addr = property(_get_bind_addr, _set_bind_addr,\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "178", "code": "        doc='A (host, port) tuple for TCP sockets or a str for Unix domain sockets.')\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "179", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "180", "code": "    def base(self):\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "181", "code": "        \"\"\"Return the base (scheme://host[:port] or sock file) for this server.\"\"\"\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "182", "code": "        if self.socket_file:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "183", "code": "            return self.socket_file\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "184", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "185", "code": "        host = self.socket_host\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "186", "code": "        if host in ('0.0.0.0', '::'):\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "187", "code": "            # 0.0.0.0 is INADDR_ANY and :: is IN6ADDR_ANY.\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "188", "code": "            # Look up the host name, which should be the\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "189", "code": "            # safest thing to spit out in a URL.\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "190", "code": "            import socket\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "191", "code": "            host = socket.gethostname()\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "192", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "193", "code": "        port = self.socket_port\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "194", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "195", "code": "        if self.ssl_certificate:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "196", "code": "            scheme = \"https\"\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "197", "code": "            if port != 443:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "198", "code": "                host += \":%s\" % port\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "199", "code": "        else:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "200", "code": "            scheme = \"http\"\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "201", "code": "            if port != 80:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "202", "code": "                host += \":%s\" % port\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "203", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "204", "code": "        return \"%s://%s\" % (scheme, host)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "205", "code": "\n", "colour": "black", "author": "tom@organisms.be"}]]}