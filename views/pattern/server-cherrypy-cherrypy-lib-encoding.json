{"path": "/home/asumal/git/cs410/pattern/pattern/server/cherrypy/cherrypy/lib/encoding.py", "lines": [[{"error": "C", "line": "1", "code": "import struct\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "2", "code": "import time\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "3", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "4", "code": "import cherrypy\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "W", "line": "5", "code": "from cherrypy._cpcompat import basestring, BytesIO, ntob, set, unicodestr\n", "colour": "purple", "author": "tom@organisms.be"}, {"error": "none", "line": "6", "code": "from cherrypy.lib import file_generator\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "7", "code": "from cherrypy.lib import set_vary_header\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "8", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "9", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "10", "code": "def decode(encoding=None, default_encoding='utf-8'):\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "11", "code": "    \"\"\"Replace or extend the list of charsets used to decode a request entity.\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "12", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "13", "code": "    Either argument may be a single string or a list of strings.\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "14", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "15", "code": "    encoding\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "16", "code": "        If not None, restricts the set of charsets attempted while decoding\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "17", "code": "        a request entity to the given set (even if a different charset is given in\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "18", "code": "        the Content-Type request header).\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "19", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "20", "code": "    default_encoding\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "21", "code": "        Only in effect if the 'encoding' argument is not given.\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "22", "code": "        If given, the set of charsets attempted while decoding a request entity is\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "23", "code": "        *extended* with the given value(s).\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "24", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "25", "code": "    \"\"\"\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "26", "code": "    body = cherrypy.request.body\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "27", "code": "    if encoding is not None:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "28", "code": "        if not isinstance(encoding, list):\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "29", "code": "            encoding = [encoding]\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "30", "code": "        body.attempt_charsets = encoding\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "31", "code": "    elif default_encoding:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "32", "code": "        if not isinstance(default_encoding, list):\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "33", "code": "            default_encoding = [default_encoding]\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "34", "code": "        body.attempt_charsets = body.attempt_charsets + default_encoding\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "35", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "36", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "37", "code": "class ResponseEncoder:\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "38", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "39", "code": "    default_encoding = 'utf-8'\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "40", "code": "    failmsg = \"Response body could not be encoded with %r.\"\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "41", "code": "    encoding = None\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "42", "code": "    errors = 'strict'\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "43", "code": "    text_only = True\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "44", "code": "    add_charset = True\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "45", "code": "    debug = False\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "46", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "47", "code": "    def __init__(self, **kwargs):\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "48", "code": "        for k, v in kwargs.items():\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "49", "code": "            setattr(self, k, v)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "50", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "51", "code": "        self.attempted_charsets = set()\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "52", "code": "        request = cherrypy.serving.request\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "53", "code": "        if request.handler is not None:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "54", "code": "            # Replace request.handler with self\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "55", "code": "            if self.debug:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "56", "code": "                cherrypy.log('Replacing request.handler', 'TOOLS.ENCODE')\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "57", "code": "            self.oldhandler = request.handler\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "58", "code": "            request.handler = self\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "59", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "60", "code": "    def encode_stream(self, encoding):\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "61", "code": "        \"\"\"Encode a streaming response body.\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "62", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "63", "code": "        Use a generator wrapper, and just pray it works as the stream is\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "64", "code": "        being written out.\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "65", "code": "        \"\"\"\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "66", "code": "        if encoding in self.attempted_charsets:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "67", "code": "            return False\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "68", "code": "        self.attempted_charsets.add(encoding)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "69", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "70", "code": "        def encoder(body):\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "71", "code": "            for chunk in body:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "72", "code": "                if isinstance(chunk, unicodestr):\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "73", "code": "                    chunk = chunk.encode(encoding, self.errors)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "74", "code": "                yield chunk\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "W", "line": "75", "code": "        self.body = encoder(self.body)\n", "colour": "purple", "author": "tom@organisms.be"}, {"error": "none", "line": "76", "code": "        return True\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "77", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "78", "code": "    def encode_string(self, encoding):\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "79", "code": "        \"\"\"Encode a buffered response body.\"\"\"\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "80", "code": "        if encoding in self.attempted_charsets:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "81", "code": "            return False\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "82", "code": "        self.attempted_charsets.add(encoding)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "83", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "84", "code": "        try:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "85", "code": "            body = []\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "86", "code": "            for chunk in self.body:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "87", "code": "                if isinstance(chunk, unicodestr):\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "88", "code": "                    chunk = chunk.encode(encoding, self.errors)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "89", "code": "                body.append(chunk)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "W", "line": "90", "code": "            self.body = body\n", "colour": "purple", "author": "tom@organisms.be"}, {"error": "none", "line": "91", "code": "        except (LookupError, UnicodeError):\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "92", "code": "            return False\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "93", "code": "        else:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "94", "code": "            return True\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "95", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "R", "line": "96", "code": "    def find_acceptable_charset(self):\n", "colour": "green", "author": "tom@organisms.be"}, {"error": "none", "line": "97", "code": "        request = cherrypy.serving.request\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "98", "code": "        response = cherrypy.serving.response\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "99", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "100", "code": "        if self.debug:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "101", "code": "            cherrypy.log('response.stream %r' % response.stream, 'TOOLS.ENCODE')\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "102", "code": "        if response.stream:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "103", "code": "            encoder = self.encode_stream\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "104", "code": "        else:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "105", "code": "            encoder = self.encode_string\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "106", "code": "            if \"Content-Length\" in response.headers:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "107", "code": "                # Delete Content-Length header so finalize() recalcs it.\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "108", "code": "                # Encoded strings may be of different lengths from their\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "109", "code": "                # unicode equivalents, and even from each other. For example:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "110", "code": "                # >>> t = u\"\\u7007\\u3040\"\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "111", "code": "                # >>> len(t)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "112", "code": "                # 2\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "113", "code": "                # >>> len(t.encode(\"UTF-8\"))\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "114", "code": "                # 6\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "115", "code": "                # >>> len(t.encode(\"utf7\"))\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "116", "code": "                # 8\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "117", "code": "                del response.headers[\"Content-Length\"]\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "118", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "119", "code": "        # Parse the Accept-Charset request header, and try to provide one\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "120", "code": "        # of the requested charsets (in order of user preference).\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "121", "code": "        encs = request.headers.elements('Accept-Charset')\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "122", "code": "        charsets = [enc.value.lower() for enc in encs]\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "123", "code": "        if self.debug:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "124", "code": "            cherrypy.log('charsets %s' % repr(charsets), 'TOOLS.ENCODE')\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "125", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "126", "code": "        if self.encoding is not None:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "127", "code": "            # If specified, force this encoding to be used, or fail.\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "128", "code": "            encoding = self.encoding.lower()\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "129", "code": "            if self.debug:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "130", "code": "                cherrypy.log('Specified encoding %r' % encoding, 'TOOLS.ENCODE')\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "131", "code": "            if (not charsets) or \"*\" in charsets or encoding in charsets:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "132", "code": "                if self.debug:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "133", "code": "                    cherrypy.log('Attempting encoding %r' % encoding, 'TOOLS.ENCODE')\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "134", "code": "                if encoder(encoding):\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "135", "code": "                    return encoding\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "136", "code": "        else:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "137", "code": "            if not encs:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "138", "code": "                if self.debug:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "139", "code": "                    cherrypy.log('Attempting default encoding %r' %\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "140", "code": "                                 self.default_encoding, 'TOOLS.ENCODE')\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "141", "code": "                # Any character-set is acceptable.\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "142", "code": "                if encoder(self.default_encoding):\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "143", "code": "                    return self.default_encoding\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "144", "code": "                else:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "145", "code": "                    raise cherrypy.HTTPError(500, self.failmsg % self.default_encoding)\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "146", "code": "            else:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "147", "code": "                for element in encs:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "148", "code": "                    if element.qvalue > 0:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "149", "code": "                        if element.value == \"*\":\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "150", "code": "                            # Matches any charset. Try our default.\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "151", "code": "                            if self.debug:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "152", "code": "                                cherrypy.log('Attempting default encoding due '\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "153", "code": "                                             'to %r' % element, 'TOOLS.ENCODE')\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "154", "code": "                            if encoder(self.default_encoding):\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "155", "code": "                                return self.default_encoding\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "156", "code": "                        else:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "157", "code": "                            encoding = element.value\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "158", "code": "                            if self.debug:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "159", "code": "                                cherrypy.log('Attempting encoding %s (qvalue >'\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "160", "code": "                                             '0)' % element, 'TOOLS.ENCODE')\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "161", "code": "                            if encoder(encoding):\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "162", "code": "                                return encoding\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "163", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "164", "code": "                if \"*\" not in charsets:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "165", "code": "                    # If no \"*\" is present in an Accept-Charset field, then all\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "166", "code": "                    # character sets not explicitly mentioned get a quality\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "167", "code": "                    # value of 0, except for ISO-8859-1, which gets a quality\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "168", "code": "                    # value of 1 if not explicitly mentioned.\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "169", "code": "                    iso = 'iso-8859-1'\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "170", "code": "                    if iso not in charsets:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "171", "code": "                        if self.debug:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "172", "code": "                            cherrypy.log('Attempting ISO-8859-1 encoding',\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "173", "code": "                                         'TOOLS.ENCODE')\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "174", "code": "                        if encoder(iso):\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "175", "code": "                            return iso\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "176", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "177", "code": "        # No suitable encoding found.\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "178", "code": "        ac = request.headers.get('Accept-Charset')\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "179", "code": "        if ac is None:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "180", "code": "            msg = \"Your client did not send an Accept-Charset header.\"\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "181", "code": "        else:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "182", "code": "            msg = \"Your client sent this Accept-Charset header: %s.\" % ac\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "183", "code": "        msg += \" We tried these charsets: %s.\" % \", \".join(self.attempted_charsets)\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "184", "code": "        raise cherrypy.HTTPError(406, msg)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "185", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "R", "line": "186", "code": "    def __call__(self, *args, **kwargs):\n", "colour": "green", "author": "tom@organisms.be"}, {"error": "none", "line": "187", "code": "        response = cherrypy.serving.response\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "W", "line": "188", "code": "        self.body = self.oldhandler(*args, **kwargs)\n", "colour": "purple", "author": "tom@organisms.be"}, {"error": "none", "line": "189", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "190", "code": "        if isinstance(self.body, basestring):\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "191", "code": "            # strings get wrapped in a list because iterating over a single\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "192", "code": "            # item list is much faster than iterating over every character\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "193", "code": "            # in a long string.\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "194", "code": "            if self.body:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "W", "line": "195", "code": "                self.body = [self.body]\n", "colour": "purple", "author": "tom@organisms.be"}, {"error": "none", "line": "196", "code": "            else:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "197", "code": "                # [''] doesn't evaluate to False, so replace it with [].\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "W", "line": "198", "code": "                self.body = []\n", "colour": "purple", "author": "tom@organisms.be"}, {"error": "none", "line": "199", "code": "        elif hasattr(self.body, 'read'):\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "W", "line": "200", "code": "            self.body = file_generator(self.body)\n", "colour": "purple", "author": "tom@organisms.be"}, {"error": "none", "line": "201", "code": "        elif self.body is None:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "W", "line": "202", "code": "            self.body = []\n", "colour": "purple", "author": "tom@organisms.be"}, {"error": "none", "line": "203", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "204", "code": "        ct = response.headers.elements(\"Content-Type\")\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "205", "code": "        if self.debug:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "206", "code": "            cherrypy.log('Content-Type: %r' % [str(h) for h in ct], 'TOOLS.ENCODE')\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "207", "code": "        if ct:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "208", "code": "            ct = ct[0]\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "209", "code": "            if self.text_only:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "210", "code": "                if ct.value.lower().startswith(\"text/\"):\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "211", "code": "                    if self.debug:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "212", "code": "                        cherrypy.log('Content-Type %s starts with \"text/\"' % ct,\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "213", "code": "                                     'TOOLS.ENCODE')\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "214", "code": "                    do_find = True\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "215", "code": "                else:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "216", "code": "                    if self.debug:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "217", "code": "                        cherrypy.log('Not finding because Content-Type %s does '\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "218", "code": "                                     'not start with \"text/\"' % ct,\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "219", "code": "                                     'TOOLS.ENCODE')\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "220", "code": "                    do_find = False\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "221", "code": "            else:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "222", "code": "                if self.debug:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "223", "code": "                    cherrypy.log('Finding because not text_only', 'TOOLS.ENCODE')\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "224", "code": "                do_find = True\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "225", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "226", "code": "            if do_find:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "227", "code": "                # Set \"charset=...\" param on response Content-Type header\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "228", "code": "                ct.params['charset'] = self.find_acceptable_charset()\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "229", "code": "                if self.add_charset:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "230", "code": "                    if self.debug:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "231", "code": "                        cherrypy.log('Setting Content-Type %s' % ct,\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "232", "code": "                                     'TOOLS.ENCODE')\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "233", "code": "                    response.headers[\"Content-Type\"] = str(ct)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "234", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "235", "code": "        return self.body\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "236", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "237", "code": "# GZIP\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "238", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "239", "code": "def compress(body, compress_level):\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "240", "code": "    \"\"\"Compress 'body' at the given compress_level.\"\"\"\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "241", "code": "    import zlib\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "242", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "243", "code": "    # See http://www.gzip.org/zlib/rfc-gzip.html\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "244", "code": "    yield ntob('\\x1f\\x8b')       # ID1 and ID2: gzip marker\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "245", "code": "    yield ntob('\\x08')           # CM: compression method\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "246", "code": "    yield ntob('\\x00')           # FLG: none set\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "247", "code": "    # MTIME: 4 bytes\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "248", "code": "    yield struct.pack(\"<L\", int(time.time()) & int('FFFFFFFF', 16))\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "249", "code": "    yield ntob('\\x02')           # XFL: max compression, slowest algo\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "250", "code": "    yield ntob('\\xff')           # OS: unknown\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "251", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "252", "code": "    crc = zlib.crc32(ntob(\"\"))\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "253", "code": "    size = 0\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "254", "code": "    zobj = zlib.compressobj(compress_level,\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "255", "code": "                            zlib.DEFLATED, -zlib.MAX_WBITS,\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "256", "code": "                            zlib.DEF_MEM_LEVEL, 0)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "257", "code": "    for line in body:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "258", "code": "        size += len(line)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "259", "code": "        crc = zlib.crc32(line, crc)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "260", "code": "        yield zobj.compress(line)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "261", "code": "    yield zobj.flush()\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "262", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "263", "code": "    # CRC32: 4 bytes\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "264", "code": "    yield struct.pack(\"<L\", crc & int('FFFFFFFF', 16))\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "265", "code": "    # ISIZE: 4 bytes\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "266", "code": "    yield struct.pack(\"<L\", size & int('FFFFFFFF', 16))\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "267", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "268", "code": "def decompress(body):\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "W", "line": "269", "code": "    import gzip\n", "colour": "purple", "author": "tom@organisms.be"}, {"error": "none", "line": "270", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "271", "code": "    zbuf = BytesIO()\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "272", "code": "    zbuf.write(body)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "273", "code": "    zbuf.seek(0)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "274", "code": "    zfile = gzip.GzipFile(mode='rb', fileobj=zbuf)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "275", "code": "    data = zfile.read()\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "276", "code": "    zfile.close()\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "277", "code": "    return data\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "278", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "279", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "R", "line": "280", "code": "def gzip(compress_level=5, mime_types=['text/html', 'text/plain'], debug=False):\n", "colour": "green", "author": "tom@organisms.be"}, {"error": "none", "line": "281", "code": "    \"\"\"Try to gzip the response body if Content-Type in mime_types.\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "282", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "283", "code": "    cherrypy.response.headers['Content-Type'] must be set to one of the\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "284", "code": "    values in the mime_types arg before calling this function.\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "285", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "286", "code": "    The provided list of mime-types must be of one of the following form:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "287", "code": "        * type/subtype\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "288", "code": "        * type/*\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "289", "code": "        * type/*+subtype\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "290", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "291", "code": "    No compression is performed if any of the following hold:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "292", "code": "        * The client sends no Accept-Encoding request header\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "293", "code": "        * No 'gzip' or 'x-gzip' is present in the Accept-Encoding header\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "294", "code": "        * No 'gzip' or 'x-gzip' with a qvalue > 0 is present\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "295", "code": "        * The 'identity' value is given with a qvalue > 0.\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "296", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "297", "code": "    \"\"\"\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "298", "code": "    request = cherrypy.serving.request\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "299", "code": "    response = cherrypy.serving.response\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "300", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "301", "code": "    set_vary_header(response, \"Accept-Encoding\")\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "302", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "303", "code": "    if not response.body:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "304", "code": "        # Response body is empty (might be a 304 for instance)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "305", "code": "        if debug:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "306", "code": "            cherrypy.log('No response body', context='TOOLS.GZIP')\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "307", "code": "        return\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "308", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "309", "code": "    # If returning cached content (which should already have been gzipped),\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "310", "code": "    # don't re-zip.\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "311", "code": "    if getattr(request, \"cached\", False):\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "312", "code": "        if debug:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "313", "code": "            cherrypy.log('Not gzipping cached response', context='TOOLS.GZIP')\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "314", "code": "        return\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "315", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "316", "code": "    acceptable = request.headers.elements('Accept-Encoding')\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "317", "code": "    if not acceptable:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "318", "code": "        # If no Accept-Encoding field is present in a request,\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "319", "code": "        # the server MAY assume that the client will accept any\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "320", "code": "        # content coding. In this case, if \"identity\" is one of\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "321", "code": "        # the available content-codings, then the server SHOULD use\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "322", "code": "        # the \"identity\" content-coding, unless it has additional\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "323", "code": "        # information that a different content-coding is meaningful\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "324", "code": "        # to the client.\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "325", "code": "        if debug:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "326", "code": "            cherrypy.log('No Accept-Encoding', context='TOOLS.GZIP')\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "327", "code": "        return\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "328", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "329", "code": "    ct = response.headers.get('Content-Type', '').split(';')[0]\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "330", "code": "    for coding in acceptable:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "331", "code": "        if coding.value == 'identity' and coding.qvalue != 0:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "332", "code": "            if debug:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "333", "code": "                cherrypy.log('Non-zero identity qvalue: %s' % coding,\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "334", "code": "                             context='TOOLS.GZIP')\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "335", "code": "            return\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "336", "code": "        if coding.value in ('gzip', 'x-gzip'):\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "337", "code": "            if coding.qvalue == 0:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "338", "code": "                if debug:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "339", "code": "                    cherrypy.log('Zero gzip qvalue: %s' % coding,\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "340", "code": "                                 context='TOOLS.GZIP')\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "341", "code": "                return\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "342", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "343", "code": "            if ct not in mime_types:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "344", "code": "                # If the list of provided mime-types contains tokens\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "345", "code": "                # such as 'text/*' or 'application/*+xml',\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "346", "code": "                # we go through them and find the most appropriate one\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "347", "code": "                # based on the given content-type.\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "348", "code": "                # The pattern matching is only caring about the most\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "349", "code": "                # common cases, as stated above, and doesn't support\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "350", "code": "                # for extra parameters.\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "351", "code": "                found = False\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "352", "code": "                if '/' in ct:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "353", "code": "                    ct_media_type, ct_sub_type = ct.split('/')\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "354", "code": "                    for mime_type in mime_types:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "355", "code": "                        if '/' in mime_type:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "356", "code": "                            media_type, sub_type = mime_type.split('/')\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "357", "code": "                            if ct_media_type == media_type:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "358", "code": "                                if sub_type == '*':\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "359", "code": "                                    found = True\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "360", "code": "                                    break\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "361", "code": "                                elif '+' in sub_type and '+' in ct_sub_type:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "W", "line": "362", "code": "                                    ct_left, ct_right = ct_sub_type.split('+')\n", "colour": "purple", "author": "tom@organisms.be"}, {"error": "none", "line": "363", "code": "                                    left, right = sub_type.split('+')\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "364", "code": "                                    if left == '*' and ct_right == right:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "365", "code": "                                        found = True\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "366", "code": "                                        break\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "367", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "368", "code": "                if not found:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "369", "code": "                    if debug:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "370", "code": "                        cherrypy.log('Content-Type %s not in mime_types %r' %\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "371", "code": "                                     (ct, mime_types), context='TOOLS.GZIP')\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "372", "code": "                    return\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "373", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "374", "code": "            if debug:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "375", "code": "                cherrypy.log('Gzipping', context='TOOLS.GZIP')\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "376", "code": "            # Return a generator that compresses the page\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "377", "code": "            response.headers['Content-Encoding'] = 'gzip'\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "378", "code": "            response.body = compress(response.body, compress_level)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "379", "code": "            if \"Content-Length\" in response.headers:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "380", "code": "                # Delete Content-Length header so finalize() recalcs it.\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "381", "code": "                del response.headers[\"Content-Length\"]\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "382", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "383", "code": "            return\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "384", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "385", "code": "    if debug:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "386", "code": "        cherrypy.log('No acceptable encoding found.', context='GZIP')\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "387", "code": "    cherrypy.HTTPError(406, \"identity, gzip\").set_response()\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "388", "code": "\n", "colour": "black", "author": "tom@organisms.be"}]]}