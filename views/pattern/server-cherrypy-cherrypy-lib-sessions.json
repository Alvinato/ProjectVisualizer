{"path": "/home/asumal/git/cs410/pattern/pattern/server/cherrypy/cherrypy/lib/sessions.py", "lines": [[{"error": "none", "line": "1", "code": "\"\"\"Session implementation for CherryPy.\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "2", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "3", "code": "You need to edit your config file to use sessions. Here's an example::\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "4", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "5", "code": "    [/]\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "6", "code": "    tools.sessions.on = True\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "7", "code": "    tools.sessions.storage_type = \"file\"\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "8", "code": "    tools.sessions.storage_path = \"/home/site/sessions\"\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "9", "code": "    tools.sessions.timeout = 60\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "10", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "11", "code": "This sets the session to be stored in files in the directory /home/site/sessions,\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "12", "code": "and the session timeout to 60 minutes. If you omit ``storage_type`` the sessions\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "13", "code": "will be saved in RAM.  ``tools.sessions.on`` is the only required line for\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "14", "code": "working sessions, the rest are optional.\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "15", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "16", "code": "By default, the session ID is passed in a cookie, so the client's browser must\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "17", "code": "have cookies enabled for your site.\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "18", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "19", "code": "To set data for the current session, use\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "20", "code": "``cherrypy.session['fieldname'] = 'fieldvalue'``;\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "21", "code": "to get data use ``cherrypy.session.get('fieldname')``.\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "22", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "23", "code": "================\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "24", "code": "Locking sessions\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "25", "code": "================\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "26", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "27", "code": "By default, the ``'locking'`` mode of sessions is ``'implicit'``, which means\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "28", "code": "the session is locked early and unlocked late. If you want to control when the\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "29", "code": "session data is locked and unlocked, set ``tools.sessions.locking = 'explicit'``.\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "C", "line": "30", "code": "Then call ``cherrypy.session.acquire_lock()`` and ``cherrypy.session.release_lock()``.\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "31", "code": "Regardless of which mode you use, the session is guaranteed to be unlocked when\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "32", "code": "the request is complete.\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "33", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "34", "code": "=================\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "35", "code": "Expiring Sessions\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "36", "code": "=================\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "37", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "38", "code": "You can force a session to expire with :func:`cherrypy.lib.sessions.expire`.\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "39", "code": "Simply call that function at the point you want the session to expire, and it\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "40", "code": "will cause the session cookie to expire client-side.\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "41", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "42", "code": "===========================\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "43", "code": "Session Fixation Protection\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "44", "code": "===========================\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "45", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "46", "code": "If CherryPy receives, via a request cookie, a session id that it does not\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "47", "code": "recognize, it will reject that id and create a new one to return in the\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "48", "code": "response cookie. This `helps prevent session fixation attacks\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "49", "code": "<http://en.wikipedia.org/wiki/Session_fixation#Regenerate_SID_on_each_request>`_.\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "50", "code": "However, CherryPy \"recognizes\" a session id by looking up the saved session\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "51", "code": "data for that id. Therefore, if you never save any session data,\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "52", "code": "**you will get a new session id for every request**.\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "53", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "54", "code": "================\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "55", "code": "Sharing Sessions\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "56", "code": "================\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "57", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "58", "code": "If you run multiple instances of CherryPy (for example via mod_python behind\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "59", "code": "Apache prefork), you most likely cannot use the RAM session backend, since each\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "60", "code": "instance of CherryPy will have its own memory space. Use a different backend\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "61", "code": "instead, and verify that all instances are pointing at the same file or db\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "62", "code": "location. Alternately, you might try a load balancer which makes sessions\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "63", "code": "\"sticky\". Google is your friend, there.\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "64", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "65", "code": "================\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "66", "code": "Expiration Dates\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "67", "code": "================\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "68", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "69", "code": "The response cookie will possess an expiration date to inform the client at\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "70", "code": "which point to stop sending the cookie back in requests. If the server time\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "71", "code": "and client time differ, expect sessions to be unreliable. **Make sure the\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "72", "code": "system time of your server is accurate**.\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "73", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "74", "code": "CherryPy defaults to a 60-minute session timeout, which also applies to the\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "75", "code": "cookie which is sent to the client. Unfortunately, some versions of Safari\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "76", "code": "(\"4 public beta\" on Windows XP at least) appear to have a bug in their parsing\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "77", "code": "of the GMT expiration date--they appear to interpret the date as one hour in\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "78", "code": "the past. Sixty minutes minus one hour is pretty close to zero, so you may\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "79", "code": "experience this bug as a new session id for every request, unless the requests\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "80", "code": "are less than one second apart. To fix, try increasing the session.timeout.\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "81", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "82", "code": "On the other extreme, some users report Firefox sending cookies after their\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "83", "code": "expiration date, although this was on a system with an inaccurate system time.\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "84", "code": "Maybe FF doesn't trust system time.\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "85", "code": "\"\"\"\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "86", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "87", "code": "import datetime\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "88", "code": "import os\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "W", "line": "89", "code": "import random\n", "colour": "purple", "author": "tom@organisms.be"}, {"error": "none", "line": "90", "code": "import time\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "91", "code": "import threading\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "92", "code": "import types\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "93", "code": "from warnings import warn\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "94", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "95", "code": "import cherrypy\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "96", "code": "from cherrypy._cpcompat import copyitems, pickle, random20, unicodestr\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "97", "code": "from cherrypy.lib import httputil\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "98", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "99", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "100", "code": "missing = object()\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "101", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "R", "line": "102", "code": "class Session(object):\n", "colour": "green", "author": "tom@organisms.be"}, {"error": "none", "line": "103", "code": "    \"\"\"A CherryPy dict-like Session object (one per request).\"\"\"\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "104", "code": "    \n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "105", "code": "    _id = None\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "106", "code": "    \n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "107", "code": "    id_observers = None\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "108", "code": "    \"A list of callbacks to which to pass new id's.\"\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "109", "code": "    \n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "C", "line": "110", "code": "    def _get_id(self):\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "111", "code": "        return self._id\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "112", "code": "    def _set_id(self, value):\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "113", "code": "        self._id = value\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "114", "code": "        for o in self.id_observers:\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "115", "code": "            o(value)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "116", "code": "    id = property(_get_id, _set_id, doc=\"The current session ID.\")\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "C", "line": "117", "code": "    \n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "118", "code": "    timeout = 60\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "119", "code": "    \"Number of minutes after which to delete session data.\"\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "120", "code": "    \n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "121", "code": "    locked = False\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "122", "code": "    \"\"\"\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "123", "code": "    If True, this session instance has exclusive read/write access\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "124", "code": "    to session data.\"\"\"\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "125", "code": "    \n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "126", "code": "    loaded = False\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "127", "code": "    \"\"\"\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "128", "code": "    If True, data has been retrieved from storage. This should happen\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "129", "code": "    automatically on the first attempt to access session data.\"\"\"\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "130", "code": "    \n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "131", "code": "    clean_thread = None\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "132", "code": "    \"Class-level Monitor which calls self.clean_up.\"\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "133", "code": "    \n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "134", "code": "    clean_freq = 5\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "135", "code": "    \"The poll rate for expired session cleanup in minutes.\"\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "136", "code": "    \n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "137", "code": "    originalid = None\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "138", "code": "    \"The session id passed by the client. May be missing or unsafe.\"\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "139", "code": "    \n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "140", "code": "    missing = False\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "141", "code": "    \"True if the session requested by the client did not exist.\"\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "142", "code": "    \n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "143", "code": "    regenerated = False\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "144", "code": "    \"\"\"\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "145", "code": "    True if the application called session.regenerate(). This is not set by\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "146", "code": "    internal calls to regenerate the session id.\"\"\"\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "147", "code": "    \n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "C", "line": "148", "code": "    debug=False\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "C", "line": "149", "code": "    \n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "W", "line": "150", "code": "    def __init__(self, id=None, **kwargs):\n", "colour": "purple", "author": "tom@organisms.be"}, {"error": "none", "line": "151", "code": "        self.id_observers = []\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "152", "code": "        self._data = {}\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "153", "code": "        \n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "C", "line": "154", "code": "        for k, v in kwargs.items():\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "155", "code": "            setattr(self, k, v)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "156", "code": "        \n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "157", "code": "        self.originalid = id\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "158", "code": "        self.missing = False\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "159", "code": "        if id is None:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "160", "code": "            if self.debug:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "161", "code": "                cherrypy.log('No id given; making a new one', 'TOOLS.SESSIONS')\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "162", "code": "            self._regenerate()\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "163", "code": "        else:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "164", "code": "            self.id = id\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "E", "line": "165", "code": "            if not self._exists():\n", "colour": "yellow", "author": "tom@organisms.be"}, {"error": "none", "line": "166", "code": "                if self.debug:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "167", "code": "                    cherrypy.log('Expired or malicious session %r; '\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "168", "code": "                                 'making a new one' % id, 'TOOLS.SESSIONS')\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "169", "code": "                # Expired or malicious session. Make a new one.\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "170", "code": "                # See http://www.cherrypy.org/ticket/709.\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "171", "code": "                self.id = None\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "172", "code": "                self.missing = True\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "173", "code": "                self._regenerate()\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "174", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "R", "line": "175", "code": "    def now(self):\n", "colour": "green", "author": "tom@organisms.be"}, {"error": "none", "line": "176", "code": "        \"\"\"Generate the session specific concept of 'now'.\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "177", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "178", "code": "        Other session providers can override this to use alternative,\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "179", "code": "        possibly timezone aware, versions of 'now'.\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "180", "code": "        \"\"\"\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "181", "code": "        return datetime.datetime.now()\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "182", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "183", "code": "    def regenerate(self):\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "184", "code": "        \"\"\"Replace the current session (with a new id).\"\"\"\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "185", "code": "        self.regenerated = True\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "186", "code": "        self._regenerate()\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "187", "code": "    \n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "C", "line": "188", "code": "    def _regenerate(self):\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "189", "code": "        if self.id is not None:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "190", "code": "            self.delete()\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "191", "code": "        \n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "192", "code": "        old_session_was_locked = self.locked\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "193", "code": "        if old_session_was_locked:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "E", "line": "194", "code": "            self.release_lock()\n", "colour": "yellow", "author": "tom@organisms.be"}, {"error": "C", "line": "195", "code": "        \n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "196", "code": "        self.id = None\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "197", "code": "        while self.id is None:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "198", "code": "            self.id = self.generate_id()\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "199", "code": "            # Assert that the generated id is not already stored.\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "E", "line": "200", "code": "            if self._exists():\n", "colour": "yellow", "author": "tom@organisms.be"}, {"error": "none", "line": "201", "code": "                self.id = None\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "202", "code": "        \n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "203", "code": "        if old_session_was_locked:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "E", "line": "204", "code": "            self.acquire_lock()\n", "colour": "yellow", "author": "tom@organisms.be"}, {"error": "C", "line": "205", "code": "    \n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "206", "code": "    def clean_up(self):\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "207", "code": "        \"\"\"Clean up expired sessions.\"\"\"\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "208", "code": "        pass\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "209", "code": "    \n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "R", "line": "210", "code": "    def generate_id(self):\n", "colour": "green", "author": "tom@organisms.be"}, {"error": "none", "line": "211", "code": "        \"\"\"Return a new session id.\"\"\"\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "212", "code": "        return random20()\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "213", "code": "    \n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "214", "code": "    def save(self):\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "215", "code": "        \"\"\"Save session data.\"\"\"\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "216", "code": "        try:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "217", "code": "            # If session data has never been loaded then it's never been\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "218", "code": "            #   accessed: no need to save it\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "219", "code": "            if self.loaded:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "220", "code": "                t = datetime.timedelta(seconds = self.timeout * 60)\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "221", "code": "                expiration_time = self.now() + t\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "222", "code": "                if self.debug:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "223", "code": "                    cherrypy.log('Saving with expiry %s' % expiration_time,\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "224", "code": "                                 'TOOLS.SESSIONS')\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "E", "line": "225", "code": "                self._save(expiration_time)\n", "colour": "yellow", "author": "tom@organisms.be"}, {"error": "C", "line": "226", "code": "            \n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "227", "code": "        finally:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "228", "code": "            if self.locked:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "229", "code": "                # Always release the lock if the user didn't release it\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "E", "line": "230", "code": "                self.release_lock()\n", "colour": "yellow", "author": "tom@organisms.be"}, {"error": "C", "line": "231", "code": "    \n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "232", "code": "    def load(self):\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "233", "code": "        \"\"\"Copy stored session data into this session instance.\"\"\"\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "E", "line": "234", "code": "        data = self._load()\n", "colour": "yellow", "author": "tom@organisms.be"}, {"error": "none", "line": "235", "code": "        # data is either None or a tuple (session_data, expiration_time)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "236", "code": "        if data is None or data[1] < self.now():\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "237", "code": "            if self.debug:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "238", "code": "                cherrypy.log('Expired session, flushing data', 'TOOLS.SESSIONS')\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "239", "code": "            self._data = {}\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "240", "code": "        else:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "241", "code": "            self._data = data[0]\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "242", "code": "        self.loaded = True\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "243", "code": "        \n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "244", "code": "        # Stick the clean_thread in the class, not the instance.\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "245", "code": "        # The instances are created and destroyed per-request.\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "246", "code": "        cls = self.__class__\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "247", "code": "        if self.clean_freq and not cls.clean_thread:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "248", "code": "            # clean_up is in instancemethod and not a classmethod,\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "249", "code": "            # so that tool config can be accessed inside the method.\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "250", "code": "            t = cherrypy.process.plugins.Monitor(\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "251", "code": "                cherrypy.engine, self.clean_up, self.clean_freq * 60,\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "252", "code": "                name='Session cleanup')\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "253", "code": "            t.subscribe()\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "254", "code": "            cls.clean_thread = t\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "255", "code": "            t.start()\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "256", "code": "    \n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "257", "code": "    def delete(self):\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "258", "code": "        \"\"\"Delete stored session data.\"\"\"\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "E", "line": "259", "code": "        self._delete()\n", "colour": "yellow", "author": "tom@organisms.be"}, {"error": "C", "line": "260", "code": "    \n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "261", "code": "    def __getitem__(self, key):\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "262", "code": "        if not self.loaded: self.load()\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "263", "code": "        return self._data[key]\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "264", "code": "    \n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "265", "code": "    def __setitem__(self, key, value):\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "266", "code": "        if not self.loaded: self.load()\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "267", "code": "        self._data[key] = value\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "268", "code": "    \n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "269", "code": "    def __delitem__(self, key):\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "270", "code": "        if not self.loaded: self.load()\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "271", "code": "        del self._data[key]\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "272", "code": "    \n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "273", "code": "    def pop(self, key, default=missing):\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "274", "code": "        \"\"\"Remove the specified key and return the corresponding value.\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "275", "code": "        If key is not found, default is returned if given,\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "276", "code": "        otherwise KeyError is raised.\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "277", "code": "        \"\"\"\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "278", "code": "        if not self.loaded: self.load()\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "279", "code": "        if default is missing:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "280", "code": "            return self._data.pop(key)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "281", "code": "        else:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "282", "code": "            return self._data.pop(key, default)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "283", "code": "    \n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "284", "code": "    def __contains__(self, key):\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "285", "code": "        if not self.loaded: self.load()\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "286", "code": "        return key in self._data\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "287", "code": "    \n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "288", "code": "    if hasattr({}, 'has_key'):\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "289", "code": "        def has_key(self, key):\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "290", "code": "            \"\"\"D.has_key(k) -> True if D has a key k, else False.\"\"\"\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "291", "code": "            if not self.loaded: self.load()\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "292", "code": "            return key in self._data\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "293", "code": "    \n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "294", "code": "    def get(self, key, default=None):\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "295", "code": "        \"\"\"D.get(k[,d]) -> D[k] if k in D, else d.  d defaults to None.\"\"\"\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "296", "code": "        if not self.loaded: self.load()\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "297", "code": "        return self._data.get(key, default)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "298", "code": "    \n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "C", "line": "299", "code": "    def update(self, d):\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "300", "code": "        \"\"\"D.update(E) -> None.  Update D from E: for k in E: D[k] = E[k].\"\"\"\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "301", "code": "        if not self.loaded: self.load()\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "302", "code": "        self._data.update(d)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "303", "code": "    \n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "304", "code": "    def setdefault(self, key, default=None):\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "305", "code": "        \"\"\"D.setdefault(k[,d]) -> D.get(k,d), also set D[k]=d if k not in D.\"\"\"\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "306", "code": "        if not self.loaded: self.load()\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "307", "code": "        return self._data.setdefault(key, default)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "308", "code": "    \n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "309", "code": "    def clear(self):\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "310", "code": "        \"\"\"D.clear() -> None.  Remove all items from D.\"\"\"\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "311", "code": "        if not self.loaded: self.load()\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "312", "code": "        self._data.clear()\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "313", "code": "    \n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "314", "code": "    def keys(self):\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "315", "code": "        \"\"\"D.keys() -> list of D's keys.\"\"\"\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "316", "code": "        if not self.loaded: self.load()\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "317", "code": "        return self._data.keys()\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "318", "code": "    \n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "319", "code": "    def items(self):\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "320", "code": "        \"\"\"D.items() -> list of D's (key, value) pairs, as 2-tuples.\"\"\"\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "321", "code": "        if not self.loaded: self.load()\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "322", "code": "        return self._data.items()\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "323", "code": "    \n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "324", "code": "    def values(self):\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "325", "code": "        \"\"\"D.values() -> list of D's values.\"\"\"\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "326", "code": "        if not self.loaded: self.load()\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "327", "code": "        return self._data.values()\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "328", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "329", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "330", "code": "class RamSession(Session):\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "C", "line": "331", "code": "    \n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "332", "code": "    # Class-level objects. Don't rebind these!\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "333", "code": "    cache = {}\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "334", "code": "    locks = {}\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "335", "code": "    \n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "336", "code": "    def clean_up(self):\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "337", "code": "        \"\"\"Clean up expired sessions.\"\"\"\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "338", "code": "        now = self.now()\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "W", "line": "339", "code": "        for id, (data, expiration_time) in copyitems(self.cache):\n", "colour": "purple", "author": "tom@organisms.be"}, {"error": "none", "line": "340", "code": "            if expiration_time <= now:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "341", "code": "                try:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "342", "code": "                    del self.cache[id]\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "343", "code": "                except KeyError:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "344", "code": "                    pass\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "345", "code": "                try:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "346", "code": "                    del self.locks[id]\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "347", "code": "                except KeyError:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "348", "code": "                    pass\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "349", "code": "        \n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "350", "code": "        # added to remove obsolete lock objects\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "351", "code": "        for id in list(self.locks):\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "352", "code": "            if id not in self.cache:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "353", "code": "                self.locks.pop(id, None)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "354", "code": "    \n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "C", "line": "355", "code": "    def _exists(self):\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "356", "code": "        return self.id in self.cache\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "357", "code": "    \n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "C", "line": "358", "code": "    def _load(self):\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "359", "code": "        return self.cache.get(self.id)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "360", "code": "    \n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "C", "line": "361", "code": "    def _save(self, expiration_time):\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "362", "code": "        self.cache[self.id] = (self._data, expiration_time)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "363", "code": "    \n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "C", "line": "364", "code": "    def _delete(self):\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "365", "code": "        self.cache.pop(self.id, None)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "366", "code": "    \n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "367", "code": "    def acquire_lock(self):\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "368", "code": "        \"\"\"Acquire an exclusive lock on the currently-loaded session data.\"\"\"\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "369", "code": "        self.locked = True\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "370", "code": "        self.locks.setdefault(self.id, threading.RLock()).acquire()\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "371", "code": "    \n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "372", "code": "    def release_lock(self):\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "373", "code": "        \"\"\"Release the lock on the currently-loaded session data.\"\"\"\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "374", "code": "        self.locks[self.id].release()\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "375", "code": "        self.locked = False\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "376", "code": "    \n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "377", "code": "    def __len__(self):\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "378", "code": "        \"\"\"Return the number of active sessions.\"\"\"\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "379", "code": "        return len(self.cache)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "380", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "381", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "382", "code": "class FileSession(Session):\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "383", "code": "    \"\"\"Implementation of the File backend for sessions\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "384", "code": "    \n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "385", "code": "    storage_path\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "386", "code": "        The folder where session data will be saved. Each session\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "387", "code": "        will be saved as pickle.dump(data, expiration_time) in its own file;\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "388", "code": "        the filename will be self.SESSION_PREFIX + self.id.\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "389", "code": "    \n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "390", "code": "    \"\"\"\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "391", "code": "    \n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "392", "code": "    SESSION_PREFIX = 'session-'\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "393", "code": "    LOCK_SUFFIX = '.lock'\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "394", "code": "    pickle_protocol = pickle.HIGHEST_PROTOCOL\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "395", "code": "    \n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "W", "line": "396", "code": "    def __init__(self, id=None, **kwargs):\n", "colour": "purple", "author": "tom@organisms.be"}, {"error": "none", "line": "397", "code": "        # The 'storage_path' arg is required for file-based sessions.\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "398", "code": "        kwargs['storage_path'] = os.path.abspath(kwargs['storage_path'])\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "399", "code": "        Session.__init__(self, id=id, **kwargs)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "400", "code": "    \n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "401", "code": "    def setup(cls, **kwargs):\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "402", "code": "        \"\"\"Set up the storage system for file-based sessions.\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "403", "code": "        \n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "404", "code": "        This should only be called once per process; this will be done\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "405", "code": "        automatically when using sessions.init (as the built-in Tool does).\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "406", "code": "        \"\"\"\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "407", "code": "        # The 'storage_path' arg is required for file-based sessions.\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "408", "code": "        kwargs['storage_path'] = os.path.abspath(kwargs['storage_path'])\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "409", "code": "        \n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "C", "line": "410", "code": "        for k, v in kwargs.items():\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "411", "code": "            setattr(cls, k, v)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "412", "code": "        \n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "413", "code": "        # Warn if any lock files exist at startup.\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "E", "line": "414", "code": "        lockfiles = [fname for fname in os.listdir(cls.storage_path)\n", "colour": "yellow", "author": "tom@organisms.be"}, {"error": "none", "line": "415", "code": "                     if (fname.startswith(cls.SESSION_PREFIX)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "416", "code": "                         and fname.endswith(cls.LOCK_SUFFIX))]\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "417", "code": "        if lockfiles:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "418", "code": "            plural = ('', 's')[len(lockfiles) > 1]\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "419", "code": "            warn(\"%s session lockfile%s found at startup. If you are \"\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "420", "code": "                 \"only running one process, then you may need to \"\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "421", "code": "                 \"manually delete the lockfiles found at %r.\"\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "E", "line": "422", "code": "                 % (len(lockfiles), plural, cls.storage_path))\n", "colour": "yellow", "author": "tom@organisms.be"}, {"error": "none", "line": "423", "code": "    setup = classmethod(setup)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "424", "code": "    \n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "C", "line": "425", "code": "    def _get_file_path(self):\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "E", "line": "426", "code": "        f = os.path.join(self.storage_path, self.SESSION_PREFIX + self.id)\n", "colour": "yellow", "author": "tom@organisms.be"}, {"error": "E", "line": "427", "code": "        if not os.path.abspath(f).startswith(self.storage_path):\n", "colour": "yellow", "author": "tom@organisms.be"}, {"error": "none", "line": "428", "code": "            raise cherrypy.HTTPError(400, \"Invalid session id in cookie.\")\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "429", "code": "        return f\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "430", "code": "    \n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "C", "line": "431", "code": "    def _exists(self):\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "432", "code": "        path = self._get_file_path()\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "433", "code": "        return os.path.exists(path)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "434", "code": "    \n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "C", "line": "435", "code": "    def _load(self, path=None):\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "436", "code": "        if path is None:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "437", "code": "            path = self._get_file_path()\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "438", "code": "        try:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "439", "code": "            f = open(path, \"rb\")\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "440", "code": "            try:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "441", "code": "                return pickle.load(f)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "442", "code": "            finally:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "443", "code": "                f.close()\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "444", "code": "        except (IOError, EOFError):\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "445", "code": "            return None\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "446", "code": "    \n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "C", "line": "447", "code": "    def _save(self, expiration_time):\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "C", "line": "448", "code": "        f = open(self._get_file_path(), \"wb\")\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "449", "code": "        try:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "450", "code": "            pickle.dump((self._data, expiration_time), f, self.pickle_protocol)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "451", "code": "        finally:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "452", "code": "            f.close()\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "453", "code": "    \n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "C", "line": "454", "code": "    def _delete(self):\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "455", "code": "        try:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "456", "code": "            os.unlink(self._get_file_path())\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "457", "code": "        except OSError:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "458", "code": "            pass\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "459", "code": "    \n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "460", "code": "    def acquire_lock(self, path=None):\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "461", "code": "        \"\"\"Acquire an exclusive lock on the currently-loaded session data.\"\"\"\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "462", "code": "        if path is None:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "463", "code": "            path = self._get_file_path()\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "464", "code": "        path += self.LOCK_SUFFIX\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "465", "code": "        while True:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "466", "code": "            try:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "467", "code": "                lockfd = os.open(path, os.O_CREAT|os.O_WRONLY|os.O_EXCL)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "468", "code": "            except OSError:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "469", "code": "                time.sleep(0.1)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "470", "code": "            else:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "471", "code": "                os.close(lockfd) \n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "472", "code": "                break\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "473", "code": "        self.locked = True\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "474", "code": "    \n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "475", "code": "    def release_lock(self, path=None):\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "476", "code": "        \"\"\"Release the lock on the currently-loaded session data.\"\"\"\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "477", "code": "        if path is None:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "478", "code": "            path = self._get_file_path()\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "479", "code": "        os.unlink(path + self.LOCK_SUFFIX)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "480", "code": "        self.locked = False\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "481", "code": "    \n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "482", "code": "    def clean_up(self):\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "483", "code": "        \"\"\"Clean up expired sessions.\"\"\"\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "484", "code": "        now = self.now()\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "485", "code": "        # Iterate over all session files in self.storage_path\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "E", "line": "486", "code": "        for fname in os.listdir(self.storage_path):\n", "colour": "yellow", "author": "tom@organisms.be"}, {"error": "none", "line": "487", "code": "            if (fname.startswith(self.SESSION_PREFIX)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "488", "code": "                and not fname.endswith(self.LOCK_SUFFIX)):\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "489", "code": "                # We have a session file: lock and load it and check\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "490", "code": "                #   if it's expired. If it fails, nevermind.\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "E", "line": "491", "code": "                path = os.path.join(self.storage_path, fname)\n", "colour": "yellow", "author": "tom@organisms.be"}, {"error": "none", "line": "492", "code": "                self.acquire_lock(path)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "493", "code": "                try:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "494", "code": "                    contents = self._load(path)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "495", "code": "                    # _load returns None on IOError\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "496", "code": "                    if contents is not None:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "W", "line": "497", "code": "                        data, expiration_time = contents\n", "colour": "purple", "author": "tom@organisms.be"}, {"error": "none", "line": "498", "code": "                        if expiration_time < now:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "499", "code": "                            # Session expired: deleting it\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "500", "code": "                            os.unlink(path)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "501", "code": "                finally:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "502", "code": "                    self.release_lock(path)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "503", "code": "    \n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "504", "code": "    def __len__(self):\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "505", "code": "        \"\"\"Return the number of active sessions.\"\"\"\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "E", "line": "506", "code": "        return len([fname for fname in os.listdir(self.storage_path)\n", "colour": "yellow", "author": "tom@organisms.be"}, {"error": "none", "line": "507", "code": "                    if (fname.startswith(self.SESSION_PREFIX)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "508", "code": "                        and not fname.endswith(self.LOCK_SUFFIX))])\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "509", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "510", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "511", "code": "class PostgresqlSession(Session):\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "512", "code": "    \"\"\" Implementation of the PostgreSQL backend for sessions. It assumes\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "513", "code": "        a table like this::\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "514", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "515", "code": "            create table session (\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "516", "code": "                id varchar(40),\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "517", "code": "                data text,\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "518", "code": "                expiration_time timestamp\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "519", "code": "            )\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "520", "code": "    \n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "521", "code": "    You must provide your own get_db function.\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "522", "code": "    \"\"\"\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "523", "code": "    \n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "524", "code": "    pickle_protocol = pickle.HIGHEST_PROTOCOL\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "525", "code": "    \n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "W", "line": "526", "code": "    def __init__(self, id=None, **kwargs):\n", "colour": "purple", "author": "tom@organisms.be"}, {"error": "none", "line": "527", "code": "        Session.__init__(self, id, **kwargs)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "E", "line": "528", "code": "        self.cursor = self.db.cursor()\n", "colour": "yellow", "author": "tom@organisms.be"}, {"error": "C", "line": "529", "code": "    \n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "530", "code": "    def setup(cls, **kwargs):\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "531", "code": "        \"\"\"Set up the storage system for Postgres-based sessions.\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "532", "code": "        \n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "533", "code": "        This should only be called once per process; this will be done\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "534", "code": "        automatically when using sessions.init (as the built-in Tool does).\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "535", "code": "        \"\"\"\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "536", "code": "        for k, v in kwargs.items():\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "537", "code": "            setattr(cls, k, v)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "538", "code": "        \n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "E", "line": "539", "code": "        self.db = self.get_db()\n", "colour": "yellow", "author": "tom@organisms.be"}, {"error": "none", "line": "540", "code": "    setup = classmethod(setup)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "541", "code": "    \n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "542", "code": "    def __del__(self):\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "543", "code": "        if self.cursor:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "544", "code": "            self.cursor.close()\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "E", "line": "545", "code": "        self.db.commit()\n", "colour": "yellow", "author": "tom@organisms.be"}, {"error": "C", "line": "546", "code": "    \n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "C", "line": "547", "code": "    def _exists(self):\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "548", "code": "        # Select session data from table\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "549", "code": "        self.cursor.execute('select data, expiration_time from session '\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "550", "code": "                            'where id=%s', (self.id,))\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "551", "code": "        rows = self.cursor.fetchall()\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "552", "code": "        return bool(rows)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "553", "code": "    \n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "C", "line": "554", "code": "    def _load(self):\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "555", "code": "        # Select session data from table\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "556", "code": "        self.cursor.execute('select data, expiration_time from session '\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "557", "code": "                            'where id=%s', (self.id,))\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "558", "code": "        rows = self.cursor.fetchall()\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "559", "code": "        if not rows:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "560", "code": "            return None\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "561", "code": "        \n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "562", "code": "        pickled_data, expiration_time = rows[0]\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "563", "code": "        data = pickle.loads(pickled_data)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "564", "code": "        return data, expiration_time\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "565", "code": "    \n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "C", "line": "566", "code": "    def _save(self, expiration_time):\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "567", "code": "        pickled_data = pickle.dumps(self._data, self.pickle_protocol)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "568", "code": "        self.cursor.execute('update session set data = %s, '\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "569", "code": "                            'expiration_time = %s where id = %s',\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "570", "code": "                            (pickled_data, expiration_time, self.id))\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "571", "code": "    \n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "C", "line": "572", "code": "    def _delete(self):\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "573", "code": "        self.cursor.execute('delete from session where id=%s', (self.id,))\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "574", "code": "   \n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "575", "code": "    def acquire_lock(self):\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "576", "code": "        \"\"\"Acquire an exclusive lock on the currently-loaded session data.\"\"\"\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "577", "code": "        # We use the \"for update\" clause to lock the row\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "578", "code": "        self.locked = True\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "579", "code": "        self.cursor.execute('select id from session where id=%s for update',\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "580", "code": "                            (self.id,))\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "581", "code": "    \n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "582", "code": "    def release_lock(self):\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "583", "code": "        \"\"\"Release the lock on the currently-loaded session data.\"\"\"\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "584", "code": "        # We just close the cursor and that will remove the lock\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "585", "code": "        #   introduced by the \"for update\" clause\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "586", "code": "        self.cursor.close()\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "587", "code": "        self.locked = False\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "588", "code": "    \n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "589", "code": "    def clean_up(self):\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "590", "code": "        \"\"\"Clean up expired sessions.\"\"\"\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "591", "code": "        self.cursor.execute('delete from session where expiration_time < %s',\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "592", "code": "                            (self.now(),))\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "593", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "594", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "R", "line": "595", "code": "class MemcachedSession(Session):\n", "colour": "green", "author": "tom@organisms.be"}, {"error": "C", "line": "596", "code": "    \n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "597", "code": "    # The most popular memcached client for Python isn't thread-safe.\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "598", "code": "    # Wrap all .get and .set operations in a single lock.\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "599", "code": "    mc_lock = threading.RLock()\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "600", "code": "    \n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "601", "code": "    # This is a seperate set of locks per session id.\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "602", "code": "    locks = {}\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "603", "code": "    \n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "604", "code": "    servers = ['127.0.0.1:11211']\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "605", "code": "    \n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "606", "code": "    def setup(cls, **kwargs):\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "607", "code": "        \"\"\"Set up the storage system for memcached-based sessions.\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "608", "code": "        \n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "609", "code": "        This should only be called once per process; this will be done\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "610", "code": "        automatically when using sessions.init (as the built-in Tool does).\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "611", "code": "        \"\"\"\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "612", "code": "        for k, v in kwargs.items():\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "613", "code": "            setattr(cls, k, v)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "614", "code": "        \n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "F", "line": "615", "code": "        import memcache\n", "colour": "red", "author": "tom@organisms.be"}, {"error": "none", "line": "616", "code": "        cls.cache = memcache.Client(cls.servers)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "617", "code": "    setup = classmethod(setup)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "618", "code": "    \n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "619", "code": "    def _get_id(self):\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "620", "code": "        return self._id\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "621", "code": "    def _set_id(self, value):\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "622", "code": "        # This encode() call is where we differ from the superclass.\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "623", "code": "        # Memcache keys MUST be byte strings, not unicode.\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "624", "code": "        if isinstance(value, unicodestr):\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "625", "code": "            value = value.encode('utf-8')\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "626", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "627", "code": "        self._id = value\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "628", "code": "        for o in self.id_observers:\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "629", "code": "            o(value)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "630", "code": "    id = property(_get_id, _set_id, doc=\"The current session ID.\")\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "631", "code": "    \n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "C", "line": "632", "code": "    def _exists(self):\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "633", "code": "        self.mc_lock.acquire()\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "634", "code": "        try:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "635", "code": "            return bool(self.cache.get(self.id))\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "636", "code": "        finally:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "637", "code": "            self.mc_lock.release()\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "638", "code": "    \n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "C", "line": "639", "code": "    def _load(self):\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "640", "code": "        self.mc_lock.acquire()\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "641", "code": "        try:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "642", "code": "            return self.cache.get(self.id)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "643", "code": "        finally:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "644", "code": "            self.mc_lock.release()\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "645", "code": "    \n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "C", "line": "646", "code": "    def _save(self, expiration_time):\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "647", "code": "        # Send the expiration time as \"Unix time\" (seconds since 1/1/1970)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "648", "code": "        td = int(time.mktime(expiration_time.timetuple()))\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "649", "code": "        self.mc_lock.acquire()\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "650", "code": "        try:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "651", "code": "            if not self.cache.set(self.id, (self._data, expiration_time), td):\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "652", "code": "                raise AssertionError(\"Session data for id %r not set.\" % self.id)\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "653", "code": "        finally:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "654", "code": "            self.mc_lock.release()\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "655", "code": "    \n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "C", "line": "656", "code": "    def _delete(self):\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "657", "code": "        self.cache.delete(self.id)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "658", "code": "    \n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "659", "code": "    def acquire_lock(self):\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "660", "code": "        \"\"\"Acquire an exclusive lock on the currently-loaded session data.\"\"\"\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "661", "code": "        self.locked = True\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "662", "code": "        self.locks.setdefault(self.id, threading.RLock()).acquire()\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "663", "code": "    \n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "664", "code": "    def release_lock(self):\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "665", "code": "        \"\"\"Release the lock on the currently-loaded session data.\"\"\"\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "666", "code": "        self.locks[self.id].release()\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "667", "code": "        self.locked = False\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "668", "code": "    \n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "669", "code": "    def __len__(self):\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "670", "code": "        \"\"\"Return the number of active sessions.\"\"\"\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "671", "code": "        raise NotImplementedError\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "672", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "673", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "674", "code": "# Hook functions (for CherryPy tools)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "675", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "676", "code": "def save():\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "677", "code": "    \"\"\"Save any changed session data.\"\"\"\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "678", "code": "    \n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "679", "code": "    if not hasattr(cherrypy.serving, \"session\"):\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "680", "code": "        return\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "681", "code": "    request = cherrypy.serving.request\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "682", "code": "    response = cherrypy.serving.response\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "683", "code": "    \n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "684", "code": "    # Guard against running twice\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "685", "code": "    if hasattr(request, \"_sessionsaved\"):\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "686", "code": "        return\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "W", "line": "687", "code": "    request._sessionsaved = True\n", "colour": "purple", "author": "tom@organisms.be"}, {"error": "C", "line": "688", "code": "    \n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "689", "code": "    if response.stream:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "690", "code": "        # If the body is being streamed, we have to save the data\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "691", "code": "        #   *after* the response has been written out\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "692", "code": "        request.hooks.attach('on_end_request', cherrypy.session.save)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "693", "code": "    else:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "694", "code": "        # If the body is not being streamed, we save the data now\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "695", "code": "        # (so we can release the lock).\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "696", "code": "        if isinstance(response.body, types.GeneratorType):\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "697", "code": "            response.collapse_body()\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "698", "code": "        cherrypy.session.save()\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "699", "code": "save.failsafe = True\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "700", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "701", "code": "def close():\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "702", "code": "    \"\"\"Close the session object for this request.\"\"\"\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "703", "code": "    sess = getattr(cherrypy.serving, \"session\", None)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "704", "code": "    if getattr(sess, \"locked\", False):\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "705", "code": "        # If the session is still locked we release the lock\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "706", "code": "        sess.release_lock()\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "707", "code": "close.failsafe = True\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "708", "code": "close.priority = 90\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "709", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "710", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "R", "line": "711", "code": "def init(storage_type='ram', path=None, path_header=None, name='session_id',\n", "colour": "green", "author": "tom@organisms.be"}, {"error": "none", "line": "712", "code": "         timeout=60, domain=None, secure=False, clean_freq=5,\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "713", "code": "         persistent=True, httponly=False, debug=False, **kwargs):\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "714", "code": "    \"\"\"Initialize session object (using cookies).\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "715", "code": "    \n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "716", "code": "    storage_type\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "717", "code": "        One of 'ram', 'file', 'postgresql', 'memcached'. This will be\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "718", "code": "        used to look up the corresponding class in cherrypy.lib.sessions\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "719", "code": "        globals. For example, 'file' will use the FileSession class.\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "720", "code": "    \n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "721", "code": "    path\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "722", "code": "        The 'path' value to stick in the response cookie metadata.\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "723", "code": "    \n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "724", "code": "    path_header\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "725", "code": "        If 'path' is None (the default), then the response\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "726", "code": "        cookie 'path' will be pulled from request.headers[path_header].\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "727", "code": "    \n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "728", "code": "    name\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "729", "code": "        The name of the cookie.\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "730", "code": "    \n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "731", "code": "    timeout\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "732", "code": "        The expiration timeout (in minutes) for the stored session data.\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "733", "code": "        If 'persistent' is True (the default), this is also the timeout\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "734", "code": "        for the cookie.\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "735", "code": "    \n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "736", "code": "    domain\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "737", "code": "        The cookie domain.\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "738", "code": "    \n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "739", "code": "    secure\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "740", "code": "        If False (the default) the cookie 'secure' value will not\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "741", "code": "        be set. If True, the cookie 'secure' value will be set (to 1).\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "742", "code": "    \n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "743", "code": "    clean_freq (minutes)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "744", "code": "        The poll rate for expired session cleanup.\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "745", "code": "    \n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "746", "code": "    persistent\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "747", "code": "        If True (the default), the 'timeout' argument will be used\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "748", "code": "        to expire the cookie. If False, the cookie will not have an expiry,\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "749", "code": "        and the cookie will be a \"session cookie\" which expires when the\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "750", "code": "        browser is closed.\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "751", "code": "    \n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "752", "code": "    httponly\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "753", "code": "        If False (the default) the cookie 'httponly' value will not be set.\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "754", "code": "        If True, the cookie 'httponly' value will be set (to 1).\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "755", "code": "    \n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "756", "code": "    Any additional kwargs will be bound to the new Session instance,\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "757", "code": "    and may be specific to the storage type. See the subclass of Session\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "758", "code": "    you're using for more information.\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "759", "code": "    \"\"\"\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "760", "code": "    \n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "761", "code": "    request = cherrypy.serving.request\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "762", "code": "    \n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "763", "code": "    # Guard against running twice\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "764", "code": "    if hasattr(request, \"_session_init_flag\"):\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "765", "code": "        return\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "W", "line": "766", "code": "    request._session_init_flag = True\n", "colour": "purple", "author": "tom@organisms.be"}, {"error": "C", "line": "767", "code": "    \n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "768", "code": "    # Check if request came with a session ID\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "769", "code": "    id = None\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "770", "code": "    if name in request.cookie:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "771", "code": "        id = request.cookie[name].value\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "772", "code": "        if debug:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "773", "code": "            cherrypy.log('ID obtained from request.cookie: %r' % id,\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "774", "code": "                         'TOOLS.SESSIONS')\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "775", "code": "    \n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "776", "code": "    # Find the storage class and call setup (first time only).\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "777", "code": "    storage_class = storage_type.title() + 'Session'\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "778", "code": "    storage_class = globals()[storage_class]\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "779", "code": "    if not hasattr(cherrypy, \"session\"):\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "780", "code": "        if hasattr(storage_class, \"setup\"):\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "781", "code": "            storage_class.setup(**kwargs)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "782", "code": "    \n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "783", "code": "    # Create and attach a new Session instance to cherrypy.serving.\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "784", "code": "    # It will possess a reference to (and lock, and lazily load)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "785", "code": "    # the requested session data.\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "786", "code": "    kwargs['timeout'] = timeout\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "787", "code": "    kwargs['clean_freq'] = clean_freq\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "788", "code": "    cherrypy.serving.session = sess = storage_class(id, **kwargs)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "789", "code": "    sess.debug = debug\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "W", "line": "790", "code": "    def update_cookie(id):\n", "colour": "purple", "author": "tom@organisms.be"}, {"error": "none", "line": "791", "code": "        \"\"\"Update the cookie every time the session id changes.\"\"\"\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "792", "code": "        cherrypy.serving.response.cookie[name] = id\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "793", "code": "    sess.id_observers.append(update_cookie)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "794", "code": "    \n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "795", "code": "    # Create cherrypy.session which will proxy to cherrypy.serving.session\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "796", "code": "    if not hasattr(cherrypy, \"session\"):\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "W", "line": "797", "code": "        cherrypy.session = cherrypy._ThreadLocalProxy('session')\n", "colour": "purple", "author": "tom@organisms.be"}, {"error": "C", "line": "798", "code": "    \n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "799", "code": "    if persistent:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "800", "code": "        cookie_timeout = timeout\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "801", "code": "    else:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "802", "code": "        # See http://support.microsoft.com/kb/223799/EN-US/\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "803", "code": "        # and http://support.mozilla.com/en-US/kb/Cookies\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "804", "code": "        cookie_timeout = None\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "805", "code": "    set_response_cookie(path=path, path_header=path_header, name=name,\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "806", "code": "                        timeout=cookie_timeout, domain=domain, secure=secure,\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "807", "code": "                        httponly=httponly)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "808", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "809", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "R", "line": "810", "code": "def set_response_cookie(path=None, path_header=None, name='session_id',\n", "colour": "green", "author": "tom@organisms.be"}, {"error": "none", "line": "811", "code": "                        timeout=60, domain=None, secure=False, httponly=False):\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "812", "code": "    \"\"\"Set a response cookie for the client.\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "813", "code": "    \n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "814", "code": "    path\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "815", "code": "        the 'path' value to stick in the response cookie metadata.\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "816", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "817", "code": "    path_header\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "818", "code": "        if 'path' is None (the default), then the response\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "819", "code": "        cookie 'path' will be pulled from request.headers[path_header].\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "820", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "821", "code": "    name\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "822", "code": "        the name of the cookie.\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "823", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "824", "code": "    timeout\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "825", "code": "        the expiration timeout for the cookie. If 0 or other boolean\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "826", "code": "        False, no 'expires' param will be set, and the cookie will be a\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "827", "code": "        \"session cookie\" which expires when the browser is closed.\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "828", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "829", "code": "    domain\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "830", "code": "        the cookie domain.\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "831", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "832", "code": "    secure\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "833", "code": "        if False (the default) the cookie 'secure' value will not\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "834", "code": "        be set. If True, the cookie 'secure' value will be set (to 1).\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "835", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "836", "code": "    httponly\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "837", "code": "        If False (the default) the cookie 'httponly' value will not be set.\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "838", "code": "        If True, the cookie 'httponly' value will be set (to 1).\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "839", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "840", "code": "    \"\"\"\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "841", "code": "    # Set response cookie\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "842", "code": "    cookie = cherrypy.serving.response.cookie\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "843", "code": "    cookie[name] = cherrypy.serving.session.id\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "844", "code": "    cookie[name]['path'] = (path or cherrypy.serving.request.headers.get(path_header)\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "845", "code": "                            or '/')\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "846", "code": "    \n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "847", "code": "    # We'd like to use the \"max-age\" param as indicated in\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "848", "code": "    # http://www.faqs.org/rfcs/rfc2109.html but IE doesn't\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "849", "code": "    # save it to disk and the session is lost if people close\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "850", "code": "    # the browser. So we have to use the old \"expires\" ... sigh ...\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "851", "code": "##    cookie[name]['max-age'] = timeout * 60\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "852", "code": "    if timeout:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "853", "code": "        e = time.time() + (timeout * 60)\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "854", "code": "        cookie[name]['expires'] = httputil.HTTPDate(e)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "855", "code": "    if domain is not None:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "856", "code": "        cookie[name]['domain'] = domain\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "857", "code": "    if secure:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "858", "code": "        cookie[name]['secure'] = 1\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "859", "code": "    if httponly:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "860", "code": "        if not cookie[name].isReservedKey('httponly'):\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "861", "code": "            raise ValueError(\"The httponly cookie token is not supported.\")\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "862", "code": "        cookie[name]['httponly'] = 1\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "863", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "864", "code": "def expire():\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "865", "code": "    \"\"\"Expire the current session cookie.\"\"\"\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "866", "code": "    name = cherrypy.serving.request.config.get('tools.sessions.name', 'session_id')\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "867", "code": "    one_year = 60 * 60 * 24 * 365\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "868", "code": "    e = time.time() - one_year\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "869", "code": "    cherrypy.serving.response.cookie[name]['expires'] = httputil.HTTPDate(e)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "870", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "871", "code": "\n", "colour": "black", "author": "tom@organisms.be"}]]}