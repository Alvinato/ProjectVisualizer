{"path": "/home/asumal/git/cs410/pattern/pattern/server/cherrypy/cherrypy/lib/sessions.py", "lines": [{"index": "1", "colour": "orange", "code": "\"\"\"Session implementation for CherryPy.\n", "error": "none", "author": "tom@organisms.be"}, {"index": "2", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "3", "colour": "orange", "code": "You need to edit your config file to use sessions. Here's an example::\n", "error": "none", "author": "tom@organisms.be"}, {"index": "4", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "5", "colour": "orange", "code": "    [/]\n", "error": "none", "author": "tom@organisms.be"}, {"index": "6", "colour": "orange", "code": "    tools.sessions.on = True\n", "error": "none", "author": "tom@organisms.be"}, {"index": "7", "colour": "orange", "code": "    tools.sessions.storage_type = \"file\"\n", "error": "none", "author": "tom@organisms.be"}, {"index": "8", "colour": "orange", "code": "    tools.sessions.storage_path = \"/home/site/sessions\"\n", "error": "none", "author": "tom@organisms.be"}, {"index": "9", "colour": "orange", "code": "    tools.sessions.timeout = 60\n", "error": "none", "author": "tom@organisms.be"}, {"index": "10", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "11", "colour": "orange", "code": "This sets the session to be stored in files in the directory /home/site/sessions,\n", "error": "none", "author": "tom@organisms.be"}, {"index": "12", "colour": "orange", "code": "and the session timeout to 60 minutes. If you omit ``storage_type`` the sessions\n", "error": "none", "author": "tom@organisms.be"}, {"index": "13", "colour": "orange", "code": "will be saved in RAM.  ``tools.sessions.on`` is the only required line for\n", "error": "none", "author": "tom@organisms.be"}, {"index": "14", "colour": "orange", "code": "working sessions, the rest are optional.\n", "error": "none", "author": "tom@organisms.be"}, {"index": "15", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "16", "colour": "orange", "code": "By default, the session ID is passed in a cookie, so the client's browser must\n", "error": "none", "author": "tom@organisms.be"}, {"index": "17", "colour": "orange", "code": "have cookies enabled for your site.\n", "error": "none", "author": "tom@organisms.be"}, {"index": "18", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "19", "colour": "orange", "code": "To set data for the current session, use\n", "error": "none", "author": "tom@organisms.be"}, {"index": "20", "colour": "orange", "code": "``cherrypy.session['fieldname'] = 'fieldvalue'``;\n", "error": "none", "author": "tom@organisms.be"}, {"index": "21", "colour": "orange", "code": "to get data use ``cherrypy.session.get('fieldname')``.\n", "error": "none", "author": "tom@organisms.be"}, {"index": "22", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "23", "colour": "orange", "code": "================\n", "error": "none", "author": "tom@organisms.be"}, {"index": "24", "colour": "orange", "code": "Locking sessions\n", "error": "none", "author": "tom@organisms.be"}, {"index": "25", "colour": "orange", "code": "================\n", "error": "none", "author": "tom@organisms.be"}, {"index": "26", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "27", "colour": "orange", "code": "By default, the ``'locking'`` mode of sessions is ``'implicit'``, which means\n", "error": "none", "author": "tom@organisms.be"}, {"index": "28", "colour": "orange", "code": "the session is locked early and unlocked late. If you want to control when the\n", "error": "none", "author": "tom@organisms.be"}, {"index": "29", "colour": "orange", "code": "session data is locked and unlocked, set ``tools.sessions.locking = 'explicit'``.\n", "error": "none", "author": "tom@organisms.be"}, {"index": "30", "colour": "orange", "code": "Then call ``cherrypy.session.acquire_lock()`` and ``cherrypy.session.release_lock()``.\n", "error": "none", "author": "tom@organisms.be"}, {"index": "31", "colour": "orange", "code": "Regardless of which mode you use, the session is guaranteed to be unlocked when\n", "error": "none", "author": "tom@organisms.be"}, {"index": "32", "colour": "orange", "code": "the request is complete.\n", "error": "none", "author": "tom@organisms.be"}, {"index": "33", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "34", "colour": "orange", "code": "=================\n", "error": "none", "author": "tom@organisms.be"}, {"index": "35", "colour": "orange", "code": "Expiring Sessions\n", "error": "none", "author": "tom@organisms.be"}, {"index": "36", "colour": "orange", "code": "=================\n", "error": "none", "author": "tom@organisms.be"}, {"index": "37", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "38", "colour": "orange", "code": "You can force a session to expire with :func:`cherrypy.lib.sessions.expire`.\n", "error": "none", "author": "tom@organisms.be"}, {"index": "39", "colour": "orange", "code": "Simply call that function at the point you want the session to expire, and it\n", "error": "none", "author": "tom@organisms.be"}, {"index": "40", "colour": "orange", "code": "will cause the session cookie to expire client-side.\n", "error": "none", "author": "tom@organisms.be"}, {"index": "41", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "42", "colour": "orange", "code": "===========================\n", "error": "none", "author": "tom@organisms.be"}, {"index": "43", "colour": "orange", "code": "Session Fixation Protection\n", "error": "none", "author": "tom@organisms.be"}, {"index": "44", "colour": "orange", "code": "===========================\n", "error": "none", "author": "tom@organisms.be"}, {"index": "45", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "46", "colour": "orange", "code": "If CherryPy receives, via a request cookie, a session id that it does not\n", "error": "none", "author": "tom@organisms.be"}, {"index": "47", "colour": "orange", "code": "recognize, it will reject that id and create a new one to return in the\n", "error": "none", "author": "tom@organisms.be"}, {"index": "48", "colour": "orange", "code": "response cookie. This `helps prevent session fixation attacks\n", "error": "none", "author": "tom@organisms.be"}, {"index": "49", "colour": "orange", "code": "<http://en.wikipedia.org/wiki/Session_fixation#Regenerate_SID_on_each_request>`_.\n", "error": "none", "author": "tom@organisms.be"}, {"index": "50", "colour": "orange", "code": "However, CherryPy \"recognizes\" a session id by looking up the saved session\n", "error": "none", "author": "tom@organisms.be"}, {"index": "51", "colour": "orange", "code": "data for that id. Therefore, if you never save any session data,\n", "error": "none", "author": "tom@organisms.be"}, {"index": "52", "colour": "orange", "code": "**you will get a new session id for every request**.\n", "error": "none", "author": "tom@organisms.be"}, {"index": "53", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "54", "colour": "orange", "code": "================\n", "error": "none", "author": "tom@organisms.be"}, {"index": "55", "colour": "orange", "code": "Sharing Sessions\n", "error": "none", "author": "tom@organisms.be"}, {"index": "56", "colour": "orange", "code": "================\n", "error": "none", "author": "tom@organisms.be"}, {"index": "57", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "58", "colour": "orange", "code": "If you run multiple instances of CherryPy (for example via mod_python behind\n", "error": "none", "author": "tom@organisms.be"}, {"index": "59", "colour": "orange", "code": "Apache prefork), you most likely cannot use the RAM session backend, since each\n", "error": "none", "author": "tom@organisms.be"}, {"index": "60", "colour": "orange", "code": "instance of CherryPy will have its own memory space. Use a different backend\n", "error": "none", "author": "tom@organisms.be"}, {"index": "61", "colour": "orange", "code": "instead, and verify that all instances are pointing at the same file or db\n", "error": "none", "author": "tom@organisms.be"}, {"index": "62", "colour": "orange", "code": "location. Alternately, you might try a load balancer which makes sessions\n", "error": "none", "author": "tom@organisms.be"}, {"index": "63", "colour": "orange", "code": "\"sticky\". Google is your friend, there.\n", "error": "none", "author": "tom@organisms.be"}, {"index": "64", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "65", "colour": "orange", "code": "================\n", "error": "none", "author": "tom@organisms.be"}, {"index": "66", "colour": "orange", "code": "Expiration Dates\n", "error": "none", "author": "tom@organisms.be"}, {"index": "67", "colour": "orange", "code": "================\n", "error": "none", "author": "tom@organisms.be"}, {"index": "68", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "69", "colour": "orange", "code": "The response cookie will possess an expiration date to inform the client at\n", "error": "none", "author": "tom@organisms.be"}, {"index": "70", "colour": "orange", "code": "which point to stop sending the cookie back in requests. If the server time\n", "error": "none", "author": "tom@organisms.be"}, {"index": "71", "colour": "orange", "code": "and client time differ, expect sessions to be unreliable. **Make sure the\n", "error": "none", "author": "tom@organisms.be"}, {"index": "72", "colour": "orange", "code": "system time of your server is accurate**.\n", "error": "none", "author": "tom@organisms.be"}, {"index": "73", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "74", "colour": "orange", "code": "CherryPy defaults to a 60-minute session timeout, which also applies to the\n", "error": "none", "author": "tom@organisms.be"}, {"index": "75", "colour": "orange", "code": "cookie which is sent to the client. Unfortunately, some versions of Safari\n", "error": "none", "author": "tom@organisms.be"}, {"index": "76", "colour": "orange", "code": "(\"4 public beta\" on Windows XP at least) appear to have a bug in their parsing\n", "error": "none", "author": "tom@organisms.be"}, {"index": "77", "colour": "orange", "code": "of the GMT expiration date--they appear to interpret the date as one hour in\n", "error": "none", "author": "tom@organisms.be"}, {"index": "78", "colour": "orange", "code": "the past. Sixty minutes minus one hour is pretty close to zero, so you may\n", "error": "none", "author": "tom@organisms.be"}, {"index": "79", "colour": "orange", "code": "experience this bug as a new session id for every request, unless the requests\n", "error": "none", "author": "tom@organisms.be"}, {"index": "80", "colour": "orange", "code": "are less than one second apart. To fix, try increasing the session.timeout.\n", "error": "none", "author": "tom@organisms.be"}, {"index": "81", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "82", "colour": "orange", "code": "On the other extreme, some users report Firefox sending cookies after their\n", "error": "none", "author": "tom@organisms.be"}, {"index": "83", "colour": "orange", "code": "expiration date, although this was on a system with an inaccurate system time.\n", "error": "none", "author": "tom@organisms.be"}, {"index": "84", "colour": "orange", "code": "Maybe FF doesn't trust system time.\n", "error": "none", "author": "tom@organisms.be"}, {"index": "85", "colour": "orange", "code": "\"\"\"\n", "error": "none", "author": "tom@organisms.be"}, {"index": "86", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "87", "colour": "orange", "code": "import datetime\n", "error": "none", "author": "tom@organisms.be"}, {"index": "88", "colour": "orange", "code": "import os\n", "error": "none", "author": "tom@organisms.be"}, {"index": "89", "colour": "green", "code": "import random\n", "error": "W", "author": "tom@organisms.be"}, {"index": "90", "colour": "orange", "code": "import time\n", "error": "none", "author": "tom@organisms.be"}, {"index": "91", "colour": "orange", "code": "import threading\n", "error": "none", "author": "tom@organisms.be"}, {"index": "92", "colour": "orange", "code": "import types\n", "error": "none", "author": "tom@organisms.be"}, {"index": "93", "colour": "orange", "code": "from warnings import warn\n", "error": "none", "author": "tom@organisms.be"}, {"index": "94", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "95", "colour": "orange", "code": "import cherrypy\n", "error": "none", "author": "tom@organisms.be"}, {"index": "96", "colour": "orange", "code": "from cherrypy._cpcompat import copyitems, pickle, random20, unicodestr\n", "error": "none", "author": "tom@organisms.be"}, {"index": "97", "colour": "orange", "code": "from cherrypy.lib import httputil\n", "error": "none", "author": "tom@organisms.be"}, {"index": "98", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "99", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "100", "colour": "orange", "code": "missing = object()\n", "error": "none", "author": "tom@organisms.be"}, {"index": "101", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "102", "colour": "blue", "code": "class Session(object):\n", "error": "R", "author": "tom@organisms.be"}, {"index": "103", "colour": "orange", "code": "    \"\"\"A CherryPy dict-like Session object (one per request).\"\"\"\n", "error": "none", "author": "tom@organisms.be"}, {"index": "104", "colour": "orange", "code": "    \n", "error": "none", "author": "tom@organisms.be"}, {"index": "105", "colour": "orange", "code": "    _id = None\n", "error": "none", "author": "tom@organisms.be"}, {"index": "106", "colour": "orange", "code": "    \n", "error": "none", "author": "tom@organisms.be"}, {"index": "107", "colour": "orange", "code": "    id_observers = None\n", "error": "none", "author": "tom@organisms.be"}, {"index": "108", "colour": "orange", "code": "    \"A list of callbacks to which to pass new id's.\"\n", "error": "none", "author": "tom@organisms.be"}, {"index": "109", "colour": "orange", "code": "    \n", "error": "none", "author": "tom@organisms.be"}, {"index": "110", "colour": "orange", "code": "    def _get_id(self):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "111", "colour": "orange", "code": "        return self._id\n", "error": "none", "author": "tom@organisms.be"}, {"index": "112", "colour": "orange", "code": "    def _set_id(self, value):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "113", "colour": "orange", "code": "        self._id = value\n", "error": "none", "author": "tom@organisms.be"}, {"index": "114", "colour": "orange", "code": "        for o in self.id_observers:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "115", "colour": "orange", "code": "            o(value)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "116", "colour": "orange", "code": "    id = property(_get_id, _set_id, doc=\"The current session ID.\")\n", "error": "none", "author": "tom@organisms.be"}, {"index": "117", "colour": "orange", "code": "    \n", "error": "none", "author": "tom@organisms.be"}, {"index": "118", "colour": "orange", "code": "    timeout = 60\n", "error": "none", "author": "tom@organisms.be"}, {"index": "119", "colour": "orange", "code": "    \"Number of minutes after which to delete session data.\"\n", "error": "none", "author": "tom@organisms.be"}, {"index": "120", "colour": "orange", "code": "    \n", "error": "none", "author": "tom@organisms.be"}, {"index": "121", "colour": "orange", "code": "    locked = False\n", "error": "none", "author": "tom@organisms.be"}, {"index": "122", "colour": "orange", "code": "    \"\"\"\n", "error": "none", "author": "tom@organisms.be"}, {"index": "123", "colour": "orange", "code": "    If True, this session instance has exclusive read/write access\n", "error": "none", "author": "tom@organisms.be"}, {"index": "124", "colour": "orange", "code": "    to session data.\"\"\"\n", "error": "none", "author": "tom@organisms.be"}, {"index": "125", "colour": "orange", "code": "    \n", "error": "none", "author": "tom@organisms.be"}, {"index": "126", "colour": "orange", "code": "    loaded = False\n", "error": "none", "author": "tom@organisms.be"}, {"index": "127", "colour": "orange", "code": "    \"\"\"\n", "error": "none", "author": "tom@organisms.be"}, {"index": "128", "colour": "orange", "code": "    If True, data has been retrieved from storage. This should happen\n", "error": "none", "author": "tom@organisms.be"}, {"index": "129", "colour": "orange", "code": "    automatically on the first attempt to access session data.\"\"\"\n", "error": "none", "author": "tom@organisms.be"}, {"index": "130", "colour": "orange", "code": "    \n", "error": "none", "author": "tom@organisms.be"}, {"index": "131", "colour": "orange", "code": "    clean_thread = None\n", "error": "none", "author": "tom@organisms.be"}, {"index": "132", "colour": "orange", "code": "    \"Class-level Monitor which calls self.clean_up.\"\n", "error": "none", "author": "tom@organisms.be"}, {"index": "133", "colour": "orange", "code": "    \n", "error": "none", "author": "tom@organisms.be"}, {"index": "134", "colour": "orange", "code": "    clean_freq = 5\n", "error": "none", "author": "tom@organisms.be"}, {"index": "135", "colour": "orange", "code": "    \"The poll rate for expired session cleanup in minutes.\"\n", "error": "none", "author": "tom@organisms.be"}, {"index": "136", "colour": "orange", "code": "    \n", "error": "none", "author": "tom@organisms.be"}, {"index": "137", "colour": "orange", "code": "    originalid = None\n", "error": "none", "author": "tom@organisms.be"}, {"index": "138", "colour": "orange", "code": "    \"The session id passed by the client. May be missing or unsafe.\"\n", "error": "none", "author": "tom@organisms.be"}, {"index": "139", "colour": "orange", "code": "    \n", "error": "none", "author": "tom@organisms.be"}, {"index": "140", "colour": "orange", "code": "    missing = False\n", "error": "none", "author": "tom@organisms.be"}, {"index": "141", "colour": "orange", "code": "    \"True if the session requested by the client did not exist.\"\n", "error": "none", "author": "tom@organisms.be"}, {"index": "142", "colour": "orange", "code": "    \n", "error": "none", "author": "tom@organisms.be"}, {"index": "143", "colour": "orange", "code": "    regenerated = False\n", "error": "none", "author": "tom@organisms.be"}, {"index": "144", "colour": "orange", "code": "    \"\"\"\n", "error": "none", "author": "tom@organisms.be"}, {"index": "145", "colour": "orange", "code": "    True if the application called session.regenerate(). This is not set by\n", "error": "none", "author": "tom@organisms.be"}, {"index": "146", "colour": "orange", "code": "    internal calls to regenerate the session id.\"\"\"\n", "error": "none", "author": "tom@organisms.be"}, {"index": "147", "colour": "orange", "code": "    \n", "error": "none", "author": "tom@organisms.be"}, {"index": "148", "colour": "orange", "code": "    debug=False\n", "error": "none", "author": "tom@organisms.be"}, {"index": "149", "colour": "orange", "code": "    \n", "error": "none", "author": "tom@organisms.be"}, {"index": "150", "colour": "green", "code": "    def __init__(self, id=None, **kwargs):\n", "error": "W", "author": "tom@organisms.be"}, {"index": "151", "colour": "orange", "code": "        self.id_observers = []\n", "error": "none", "author": "tom@organisms.be"}, {"index": "152", "colour": "orange", "code": "        self._data = {}\n", "error": "none", "author": "tom@organisms.be"}, {"index": "153", "colour": "orange", "code": "        \n", "error": "none", "author": "tom@organisms.be"}, {"index": "154", "colour": "orange", "code": "        for k, v in kwargs.items():\n", "error": "none", "author": "tom@organisms.be"}, {"index": "155", "colour": "orange", "code": "            setattr(self, k, v)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "156", "colour": "orange", "code": "        \n", "error": "none", "author": "tom@organisms.be"}, {"index": "157", "colour": "orange", "code": "        self.originalid = id\n", "error": "none", "author": "tom@organisms.be"}, {"index": "158", "colour": "orange", "code": "        self.missing = False\n", "error": "none", "author": "tom@organisms.be"}, {"index": "159", "colour": "orange", "code": "        if id is None:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "160", "colour": "orange", "code": "            if self.debug:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "161", "colour": "orange", "code": "                cherrypy.log('No id given; making a new one', 'TOOLS.SESSIONS')\n", "error": "none", "author": "tom@organisms.be"}, {"index": "162", "colour": "orange", "code": "            self._regenerate()\n", "error": "none", "author": "tom@organisms.be"}, {"index": "163", "colour": "orange", "code": "        else:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "164", "colour": "orange", "code": "            self.id = id\n", "error": "none", "author": "tom@organisms.be"}, {"index": "165", "colour": "red", "code": "            if not self._exists():\n", "error": "E", "author": "tom@organisms.be"}, {"index": "166", "colour": "orange", "code": "                if self.debug:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "167", "colour": "orange", "code": "                    cherrypy.log('Expired or malicious session %r; '\n", "error": "none", "author": "tom@organisms.be"}, {"index": "168", "colour": "orange", "code": "                                 'making a new one' % id, 'TOOLS.SESSIONS')\n", "error": "none", "author": "tom@organisms.be"}, {"index": "169", "colour": "orange", "code": "                # Expired or malicious session. Make a new one.\n", "error": "none", "author": "tom@organisms.be"}, {"index": "170", "colour": "orange", "code": "                # See http://www.cherrypy.org/ticket/709.\n", "error": "none", "author": "tom@organisms.be"}, {"index": "171", "colour": "orange", "code": "                self.id = None\n", "error": "none", "author": "tom@organisms.be"}, {"index": "172", "colour": "orange", "code": "                self.missing = True\n", "error": "none", "author": "tom@organisms.be"}, {"index": "173", "colour": "orange", "code": "                self._regenerate()\n", "error": "none", "author": "tom@organisms.be"}, {"index": "174", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "175", "colour": "blue", "code": "    def now(self):\n", "error": "R", "author": "tom@organisms.be"}, {"index": "176", "colour": "orange", "code": "        \"\"\"Generate the session specific concept of 'now'.\n", "error": "none", "author": "tom@organisms.be"}, {"index": "177", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "178", "colour": "orange", "code": "        Other session providers can override this to use alternative,\n", "error": "none", "author": "tom@organisms.be"}, {"index": "179", "colour": "orange", "code": "        possibly timezone aware, versions of 'now'.\n", "error": "none", "author": "tom@organisms.be"}, {"index": "180", "colour": "orange", "code": "        \"\"\"\n", "error": "none", "author": "tom@organisms.be"}, {"index": "181", "colour": "orange", "code": "        return datetime.datetime.now()\n", "error": "none", "author": "tom@organisms.be"}, {"index": "182", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "183", "colour": "orange", "code": "    def regenerate(self):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "184", "colour": "orange", "code": "        \"\"\"Replace the current session (with a new id).\"\"\"\n", "error": "none", "author": "tom@organisms.be"}, {"index": "185", "colour": "orange", "code": "        self.regenerated = True\n", "error": "none", "author": "tom@organisms.be"}, {"index": "186", "colour": "orange", "code": "        self._regenerate()\n", "error": "none", "author": "tom@organisms.be"}, {"index": "187", "colour": "orange", "code": "    \n", "error": "none", "author": "tom@organisms.be"}, {"index": "188", "colour": "orange", "code": "    def _regenerate(self):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "189", "colour": "orange", "code": "        if self.id is not None:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "190", "colour": "orange", "code": "            self.delete()\n", "error": "none", "author": "tom@organisms.be"}, {"index": "191", "colour": "orange", "code": "        \n", "error": "none", "author": "tom@organisms.be"}, {"index": "192", "colour": "orange", "code": "        old_session_was_locked = self.locked\n", "error": "none", "author": "tom@organisms.be"}, {"index": "193", "colour": "orange", "code": "        if old_session_was_locked:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "194", "colour": "red", "code": "            self.release_lock()\n", "error": "E", "author": "tom@organisms.be"}, {"index": "195", "colour": "orange", "code": "        \n", "error": "none", "author": "tom@organisms.be"}, {"index": "196", "colour": "orange", "code": "        self.id = None\n", "error": "none", "author": "tom@organisms.be"}, {"index": "197", "colour": "orange", "code": "        while self.id is None:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "198", "colour": "orange", "code": "            self.id = self.generate_id()\n", "error": "none", "author": "tom@organisms.be"}, {"index": "199", "colour": "orange", "code": "            # Assert that the generated id is not already stored.\n", "error": "none", "author": "tom@organisms.be"}, {"index": "200", "colour": "red", "code": "            if self._exists():\n", "error": "E", "author": "tom@organisms.be"}, {"index": "201", "colour": "orange", "code": "                self.id = None\n", "error": "none", "author": "tom@organisms.be"}, {"index": "202", "colour": "orange", "code": "        \n", "error": "none", "author": "tom@organisms.be"}, {"index": "203", "colour": "orange", "code": "        if old_session_was_locked:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "204", "colour": "red", "code": "            self.acquire_lock()\n", "error": "E", "author": "tom@organisms.be"}, {"index": "205", "colour": "orange", "code": "    \n", "error": "none", "author": "tom@organisms.be"}, {"index": "206", "colour": "orange", "code": "    def clean_up(self):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "207", "colour": "orange", "code": "        \"\"\"Clean up expired sessions.\"\"\"\n", "error": "none", "author": "tom@organisms.be"}, {"index": "208", "colour": "orange", "code": "        pass\n", "error": "none", "author": "tom@organisms.be"}, {"index": "209", "colour": "orange", "code": "    \n", "error": "none", "author": "tom@organisms.be"}, {"index": "210", "colour": "blue", "code": "    def generate_id(self):\n", "error": "R", "author": "tom@organisms.be"}, {"index": "211", "colour": "orange", "code": "        \"\"\"Return a new session id.\"\"\"\n", "error": "none", "author": "tom@organisms.be"}, {"index": "212", "colour": "orange", "code": "        return random20()\n", "error": "none", "author": "tom@organisms.be"}, {"index": "213", "colour": "orange", "code": "    \n", "error": "none", "author": "tom@organisms.be"}, {"index": "214", "colour": "orange", "code": "    def save(self):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "215", "colour": "orange", "code": "        \"\"\"Save session data.\"\"\"\n", "error": "none", "author": "tom@organisms.be"}, {"index": "216", "colour": "orange", "code": "        try:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "217", "colour": "orange", "code": "            # If session data has never been loaded then it's never been\n", "error": "none", "author": "tom@organisms.be"}, {"index": "218", "colour": "orange", "code": "            #   accessed: no need to save it\n", "error": "none", "author": "tom@organisms.be"}, {"index": "219", "colour": "orange", "code": "            if self.loaded:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "220", "colour": "orange", "code": "                t = datetime.timedelta(seconds = self.timeout * 60)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "221", "colour": "orange", "code": "                expiration_time = self.now() + t\n", "error": "none", "author": "tom@organisms.be"}, {"index": "222", "colour": "orange", "code": "                if self.debug:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "223", "colour": "orange", "code": "                    cherrypy.log('Saving with expiry %s' % expiration_time,\n", "error": "none", "author": "tom@organisms.be"}, {"index": "224", "colour": "orange", "code": "                                 'TOOLS.SESSIONS')\n", "error": "none", "author": "tom@organisms.be"}, {"index": "225", "colour": "red", "code": "                self._save(expiration_time)\n", "error": "E", "author": "tom@organisms.be"}, {"index": "226", "colour": "orange", "code": "            \n", "error": "none", "author": "tom@organisms.be"}, {"index": "227", "colour": "orange", "code": "        finally:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "228", "colour": "orange", "code": "            if self.locked:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "229", "colour": "orange", "code": "                # Always release the lock if the user didn't release it\n", "error": "none", "author": "tom@organisms.be"}, {"index": "230", "colour": "red", "code": "                self.release_lock()\n", "error": "E", "author": "tom@organisms.be"}, {"index": "231", "colour": "orange", "code": "    \n", "error": "none", "author": "tom@organisms.be"}, {"index": "232", "colour": "orange", "code": "    def load(self):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "233", "colour": "orange", "code": "        \"\"\"Copy stored session data into this session instance.\"\"\"\n", "error": "none", "author": "tom@organisms.be"}, {"index": "234", "colour": "red", "code": "        data = self._load()\n", "error": "E", "author": "tom@organisms.be"}, {"index": "235", "colour": "orange", "code": "        # data is either None or a tuple (session_data, expiration_time)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "236", "colour": "orange", "code": "        if data is None or data[1] < self.now():\n", "error": "none", "author": "tom@organisms.be"}, {"index": "237", "colour": "orange", "code": "            if self.debug:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "238", "colour": "orange", "code": "                cherrypy.log('Expired session, flushing data', 'TOOLS.SESSIONS')\n", "error": "none", "author": "tom@organisms.be"}, {"index": "239", "colour": "orange", "code": "            self._data = {}\n", "error": "none", "author": "tom@organisms.be"}, {"index": "240", "colour": "orange", "code": "        else:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "241", "colour": "orange", "code": "            self._data = data[0]\n", "error": "none", "author": "tom@organisms.be"}, {"index": "242", "colour": "orange", "code": "        self.loaded = True\n", "error": "none", "author": "tom@organisms.be"}, {"index": "243", "colour": "orange", "code": "        \n", "error": "none", "author": "tom@organisms.be"}, {"index": "244", "colour": "orange", "code": "        # Stick the clean_thread in the class, not the instance.\n", "error": "none", "author": "tom@organisms.be"}, {"index": "245", "colour": "orange", "code": "        # The instances are created and destroyed per-request.\n", "error": "none", "author": "tom@organisms.be"}, {"index": "246", "colour": "orange", "code": "        cls = self.__class__\n", "error": "none", "author": "tom@organisms.be"}, {"index": "247", "colour": "orange", "code": "        if self.clean_freq and not cls.clean_thread:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "248", "colour": "orange", "code": "            # clean_up is in instancemethod and not a classmethod,\n", "error": "none", "author": "tom@organisms.be"}, {"index": "249", "colour": "orange", "code": "            # so that tool config can be accessed inside the method.\n", "error": "none", "author": "tom@organisms.be"}, {"index": "250", "colour": "orange", "code": "            t = cherrypy.process.plugins.Monitor(\n", "error": "none", "author": "tom@organisms.be"}, {"index": "251", "colour": "orange", "code": "                cherrypy.engine, self.clean_up, self.clean_freq * 60,\n", "error": "none", "author": "tom@organisms.be"}, {"index": "252", "colour": "orange", "code": "                name='Session cleanup')\n", "error": "none", "author": "tom@organisms.be"}, {"index": "253", "colour": "orange", "code": "            t.subscribe()\n", "error": "none", "author": "tom@organisms.be"}, {"index": "254", "colour": "orange", "code": "            cls.clean_thread = t\n", "error": "none", "author": "tom@organisms.be"}, {"index": "255", "colour": "orange", "code": "            t.start()\n", "error": "none", "author": "tom@organisms.be"}, {"index": "256", "colour": "orange", "code": "    \n", "error": "none", "author": "tom@organisms.be"}, {"index": "257", "colour": "orange", "code": "    def delete(self):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "258", "colour": "orange", "code": "        \"\"\"Delete stored session data.\"\"\"\n", "error": "none", "author": "tom@organisms.be"}, {"index": "259", "colour": "red", "code": "        self._delete()\n", "error": "E", "author": "tom@organisms.be"}, {"index": "260", "colour": "orange", "code": "    \n", "error": "none", "author": "tom@organisms.be"}, {"index": "261", "colour": "orange", "code": "    def __getitem__(self, key):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "262", "colour": "orange", "code": "        if not self.loaded: self.load()\n", "error": "none", "author": "tom@organisms.be"}, {"index": "263", "colour": "orange", "code": "        return self._data[key]\n", "error": "none", "author": "tom@organisms.be"}, {"index": "264", "colour": "orange", "code": "    \n", "error": "none", "author": "tom@organisms.be"}, {"index": "265", "colour": "orange", "code": "    def __setitem__(self, key, value):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "266", "colour": "orange", "code": "        if not self.loaded: self.load()\n", "error": "none", "author": "tom@organisms.be"}, {"index": "267", "colour": "orange", "code": "        self._data[key] = value\n", "error": "none", "author": "tom@organisms.be"}, {"index": "268", "colour": "orange", "code": "    \n", "error": "none", "author": "tom@organisms.be"}, {"index": "269", "colour": "orange", "code": "    def __delitem__(self, key):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "270", "colour": "orange", "code": "        if not self.loaded: self.load()\n", "error": "none", "author": "tom@organisms.be"}, {"index": "271", "colour": "orange", "code": "        del self._data[key]\n", "error": "none", "author": "tom@organisms.be"}, {"index": "272", "colour": "orange", "code": "    \n", "error": "none", "author": "tom@organisms.be"}, {"index": "273", "colour": "orange", "code": "    def pop(self, key, default=missing):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "274", "colour": "orange", "code": "        \"\"\"Remove the specified key and return the corresponding value.\n", "error": "none", "author": "tom@organisms.be"}, {"index": "275", "colour": "orange", "code": "        If key is not found, default is returned if given,\n", "error": "none", "author": "tom@organisms.be"}, {"index": "276", "colour": "orange", "code": "        otherwise KeyError is raised.\n", "error": "none", "author": "tom@organisms.be"}, {"index": "277", "colour": "orange", "code": "        \"\"\"\n", "error": "none", "author": "tom@organisms.be"}, {"index": "278", "colour": "orange", "code": "        if not self.loaded: self.load()\n", "error": "none", "author": "tom@organisms.be"}, {"index": "279", "colour": "orange", "code": "        if default is missing:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "280", "colour": "orange", "code": "            return self._data.pop(key)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "281", "colour": "orange", "code": "        else:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "282", "colour": "orange", "code": "            return self._data.pop(key, default)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "283", "colour": "orange", "code": "    \n", "error": "none", "author": "tom@organisms.be"}, {"index": "284", "colour": "orange", "code": "    def __contains__(self, key):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "285", "colour": "orange", "code": "        if not self.loaded: self.load()\n", "error": "none", "author": "tom@organisms.be"}, {"index": "286", "colour": "orange", "code": "        return key in self._data\n", "error": "none", "author": "tom@organisms.be"}, {"index": "287", "colour": "orange", "code": "    \n", "error": "none", "author": "tom@organisms.be"}, {"index": "288", "colour": "orange", "code": "    if hasattr({}, 'has_key'):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "289", "colour": "orange", "code": "        def has_key(self, key):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "290", "colour": "orange", "code": "            \"\"\"D.has_key(k) -> True if D has a key k, else False.\"\"\"\n", "error": "none", "author": "tom@organisms.be"}, {"index": "291", "colour": "orange", "code": "            if not self.loaded: self.load()\n", "error": "none", "author": "tom@organisms.be"}, {"index": "292", "colour": "orange", "code": "            return key in self._data\n", "error": "none", "author": "tom@organisms.be"}, {"index": "293", "colour": "orange", "code": "    \n", "error": "none", "author": "tom@organisms.be"}, {"index": "294", "colour": "orange", "code": "    def get(self, key, default=None):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "295", "colour": "orange", "code": "        \"\"\"D.get(k[,d]) -> D[k] if k in D, else d.  d defaults to None.\"\"\"\n", "error": "none", "author": "tom@organisms.be"}, {"index": "296", "colour": "orange", "code": "        if not self.loaded: self.load()\n", "error": "none", "author": "tom@organisms.be"}, {"index": "297", "colour": "orange", "code": "        return self._data.get(key, default)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "298", "colour": "orange", "code": "    \n", "error": "none", "author": "tom@organisms.be"}, {"index": "299", "colour": "orange", "code": "    def update(self, d):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "300", "colour": "orange", "code": "        \"\"\"D.update(E) -> None.  Update D from E: for k in E: D[k] = E[k].\"\"\"\n", "error": "none", "author": "tom@organisms.be"}, {"index": "301", "colour": "orange", "code": "        if not self.loaded: self.load()\n", "error": "none", "author": "tom@organisms.be"}, {"index": "302", "colour": "orange", "code": "        self._data.update(d)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "303", "colour": "orange", "code": "    \n", "error": "none", "author": "tom@organisms.be"}, {"index": "304", "colour": "orange", "code": "    def setdefault(self, key, default=None):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "305", "colour": "orange", "code": "        \"\"\"D.setdefault(k[,d]) -> D.get(k,d), also set D[k]=d if k not in D.\"\"\"\n", "error": "none", "author": "tom@organisms.be"}, {"index": "306", "colour": "orange", "code": "        if not self.loaded: self.load()\n", "error": "none", "author": "tom@organisms.be"}, {"index": "307", "colour": "orange", "code": "        return self._data.setdefault(key, default)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "308", "colour": "orange", "code": "    \n", "error": "none", "author": "tom@organisms.be"}, {"index": "309", "colour": "orange", "code": "    def clear(self):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "310", "colour": "orange", "code": "        \"\"\"D.clear() -> None.  Remove all items from D.\"\"\"\n", "error": "none", "author": "tom@organisms.be"}, {"index": "311", "colour": "orange", "code": "        if not self.loaded: self.load()\n", "error": "none", "author": "tom@organisms.be"}, {"index": "312", "colour": "orange", "code": "        self._data.clear()\n", "error": "none", "author": "tom@organisms.be"}, {"index": "313", "colour": "orange", "code": "    \n", "error": "none", "author": "tom@organisms.be"}, {"index": "314", "colour": "orange", "code": "    def keys(self):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "315", "colour": "orange", "code": "        \"\"\"D.keys() -> list of D's keys.\"\"\"\n", "error": "none", "author": "tom@organisms.be"}, {"index": "316", "colour": "orange", "code": "        if not self.loaded: self.load()\n", "error": "none", "author": "tom@organisms.be"}, {"index": "317", "colour": "orange", "code": "        return self._data.keys()\n", "error": "none", "author": "tom@organisms.be"}, {"index": "318", "colour": "orange", "code": "    \n", "error": "none", "author": "tom@organisms.be"}, {"index": "319", "colour": "orange", "code": "    def items(self):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "320", "colour": "orange", "code": "        \"\"\"D.items() -> list of D's (key, value) pairs, as 2-tuples.\"\"\"\n", "error": "none", "author": "tom@organisms.be"}, {"index": "321", "colour": "orange", "code": "        if not self.loaded: self.load()\n", "error": "none", "author": "tom@organisms.be"}, {"index": "322", "colour": "orange", "code": "        return self._data.items()\n", "error": "none", "author": "tom@organisms.be"}, {"index": "323", "colour": "orange", "code": "    \n", "error": "none", "author": "tom@organisms.be"}, {"index": "324", "colour": "orange", "code": "    def values(self):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "325", "colour": "orange", "code": "        \"\"\"D.values() -> list of D's values.\"\"\"\n", "error": "none", "author": "tom@organisms.be"}, {"index": "326", "colour": "orange", "code": "        if not self.loaded: self.load()\n", "error": "none", "author": "tom@organisms.be"}, {"index": "327", "colour": "orange", "code": "        return self._data.values()\n", "error": "none", "author": "tom@organisms.be"}, {"index": "328", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "329", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "330", "colour": "orange", "code": "class RamSession(Session):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "331", "colour": "orange", "code": "    \n", "error": "none", "author": "tom@organisms.be"}, {"index": "332", "colour": "orange", "code": "    # Class-level objects. Don't rebind these!\n", "error": "none", "author": "tom@organisms.be"}, {"index": "333", "colour": "orange", "code": "    cache = {}\n", "error": "none", "author": "tom@organisms.be"}, {"index": "334", "colour": "orange", "code": "    locks = {}\n", "error": "none", "author": "tom@organisms.be"}, {"index": "335", "colour": "orange", "code": "    \n", "error": "none", "author": "tom@organisms.be"}, {"index": "336", "colour": "orange", "code": "    def clean_up(self):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "337", "colour": "orange", "code": "        \"\"\"Clean up expired sessions.\"\"\"\n", "error": "none", "author": "tom@organisms.be"}, {"index": "338", "colour": "orange", "code": "        now = self.now()\n", "error": "none", "author": "tom@organisms.be"}, {"index": "339", "colour": "green", "code": "        for id, (data, expiration_time) in copyitems(self.cache):\n", "error": "W", "author": "tom@organisms.be"}, {"index": "340", "colour": "orange", "code": "            if expiration_time <= now:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "341", "colour": "orange", "code": "                try:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "342", "colour": "orange", "code": "                    del self.cache[id]\n", "error": "none", "author": "tom@organisms.be"}, {"index": "343", "colour": "orange", "code": "                except KeyError:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "344", "colour": "orange", "code": "                    pass\n", "error": "none", "author": "tom@organisms.be"}, {"index": "345", "colour": "orange", "code": "                try:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "346", "colour": "orange", "code": "                    del self.locks[id]\n", "error": "none", "author": "tom@organisms.be"}, {"index": "347", "colour": "orange", "code": "                except KeyError:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "348", "colour": "orange", "code": "                    pass\n", "error": "none", "author": "tom@organisms.be"}, {"index": "349", "colour": "orange", "code": "        \n", "error": "none", "author": "tom@organisms.be"}, {"index": "350", "colour": "orange", "code": "        # added to remove obsolete lock objects\n", "error": "none", "author": "tom@organisms.be"}, {"index": "351", "colour": "orange", "code": "        for id in list(self.locks):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "352", "colour": "orange", "code": "            if id not in self.cache:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "353", "colour": "orange", "code": "                self.locks.pop(id, None)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "354", "colour": "orange", "code": "    \n", "error": "none", "author": "tom@organisms.be"}, {"index": "355", "colour": "orange", "code": "    def _exists(self):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "356", "colour": "orange", "code": "        return self.id in self.cache\n", "error": "none", "author": "tom@organisms.be"}, {"index": "357", "colour": "orange", "code": "    \n", "error": "none", "author": "tom@organisms.be"}, {"index": "358", "colour": "orange", "code": "    def _load(self):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "359", "colour": "orange", "code": "        return self.cache.get(self.id)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "360", "colour": "orange", "code": "    \n", "error": "none", "author": "tom@organisms.be"}, {"index": "361", "colour": "orange", "code": "    def _save(self, expiration_time):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "362", "colour": "orange", "code": "        self.cache[self.id] = (self._data, expiration_time)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "363", "colour": "orange", "code": "    \n", "error": "none", "author": "tom@organisms.be"}, {"index": "364", "colour": "orange", "code": "    def _delete(self):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "365", "colour": "orange", "code": "        self.cache.pop(self.id, None)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "366", "colour": "orange", "code": "    \n", "error": "none", "author": "tom@organisms.be"}, {"index": "367", "colour": "orange", "code": "    def acquire_lock(self):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "368", "colour": "orange", "code": "        \"\"\"Acquire an exclusive lock on the currently-loaded session data.\"\"\"\n", "error": "none", "author": "tom@organisms.be"}, {"index": "369", "colour": "orange", "code": "        self.locked = True\n", "error": "none", "author": "tom@organisms.be"}, {"index": "370", "colour": "orange", "code": "        self.locks.setdefault(self.id, threading.RLock()).acquire()\n", "error": "none", "author": "tom@organisms.be"}, {"index": "371", "colour": "orange", "code": "    \n", "error": "none", "author": "tom@organisms.be"}, {"index": "372", "colour": "orange", "code": "    def release_lock(self):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "373", "colour": "orange", "code": "        \"\"\"Release the lock on the currently-loaded session data.\"\"\"\n", "error": "none", "author": "tom@organisms.be"}, {"index": "374", "colour": "orange", "code": "        self.locks[self.id].release()\n", "error": "none", "author": "tom@organisms.be"}, {"index": "375", "colour": "orange", "code": "        self.locked = False\n", "error": "none", "author": "tom@organisms.be"}, {"index": "376", "colour": "orange", "code": "    \n", "error": "none", "author": "tom@organisms.be"}, {"index": "377", "colour": "orange", "code": "    def __len__(self):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "378", "colour": "orange", "code": "        \"\"\"Return the number of active sessions.\"\"\"\n", "error": "none", "author": "tom@organisms.be"}, {"index": "379", "colour": "orange", "code": "        return len(self.cache)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "380", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "381", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "382", "colour": "orange", "code": "class FileSession(Session):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "383", "colour": "orange", "code": "    \"\"\"Implementation of the File backend for sessions\n", "error": "none", "author": "tom@organisms.be"}, {"index": "384", "colour": "orange", "code": "    \n", "error": "none", "author": "tom@organisms.be"}, {"index": "385", "colour": "orange", "code": "    storage_path\n", "error": "none", "author": "tom@organisms.be"}, {"index": "386", "colour": "orange", "code": "        The folder where session data will be saved. Each session\n", "error": "none", "author": "tom@organisms.be"}, {"index": "387", "colour": "orange", "code": "        will be saved as pickle.dump(data, expiration_time) in its own file;\n", "error": "none", "author": "tom@organisms.be"}, {"index": "388", "colour": "orange", "code": "        the filename will be self.SESSION_PREFIX + self.id.\n", "error": "none", "author": "tom@organisms.be"}, {"index": "389", "colour": "orange", "code": "    \n", "error": "none", "author": "tom@organisms.be"}, {"index": "390", "colour": "orange", "code": "    \"\"\"\n", "error": "none", "author": "tom@organisms.be"}, {"index": "391", "colour": "orange", "code": "    \n", "error": "none", "author": "tom@organisms.be"}, {"index": "392", "colour": "orange", "code": "    SESSION_PREFIX = 'session-'\n", "error": "none", "author": "tom@organisms.be"}, {"index": "393", "colour": "orange", "code": "    LOCK_SUFFIX = '.lock'\n", "error": "none", "author": "tom@organisms.be"}, {"index": "394", "colour": "orange", "code": "    pickle_protocol = pickle.HIGHEST_PROTOCOL\n", "error": "none", "author": "tom@organisms.be"}, {"index": "395", "colour": "orange", "code": "    \n", "error": "none", "author": "tom@organisms.be"}, {"index": "396", "colour": "green", "code": "    def __init__(self, id=None, **kwargs):\n", "error": "W", "author": "tom@organisms.be"}, {"index": "397", "colour": "orange", "code": "        # The 'storage_path' arg is required for file-based sessions.\n", "error": "none", "author": "tom@organisms.be"}, {"index": "398", "colour": "orange", "code": "        kwargs['storage_path'] = os.path.abspath(kwargs['storage_path'])\n", "error": "none", "author": "tom@organisms.be"}, {"index": "399", "colour": "orange", "code": "        Session.__init__(self, id=id, **kwargs)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "400", "colour": "orange", "code": "    \n", "error": "none", "author": "tom@organisms.be"}, {"index": "401", "colour": "orange", "code": "    def setup(cls, **kwargs):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "402", "colour": "orange", "code": "        \"\"\"Set up the storage system for file-based sessions.\n", "error": "none", "author": "tom@organisms.be"}, {"index": "403", "colour": "orange", "code": "        \n", "error": "none", "author": "tom@organisms.be"}, {"index": "404", "colour": "orange", "code": "        This should only be called once per process; this will be done\n", "error": "none", "author": "tom@organisms.be"}, {"index": "405", "colour": "orange", "code": "        automatically when using sessions.init (as the built-in Tool does).\n", "error": "none", "author": "tom@organisms.be"}, {"index": "406", "colour": "orange", "code": "        \"\"\"\n", "error": "none", "author": "tom@organisms.be"}, {"index": "407", "colour": "orange", "code": "        # The 'storage_path' arg is required for file-based sessions.\n", "error": "none", "author": "tom@organisms.be"}, {"index": "408", "colour": "orange", "code": "        kwargs['storage_path'] = os.path.abspath(kwargs['storage_path'])\n", "error": "none", "author": "tom@organisms.be"}, {"index": "409", "colour": "orange", "code": "        \n", "error": "none", "author": "tom@organisms.be"}, {"index": "410", "colour": "orange", "code": "        for k, v in kwargs.items():\n", "error": "none", "author": "tom@organisms.be"}, {"index": "411", "colour": "orange", "code": "            setattr(cls, k, v)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "412", "colour": "orange", "code": "        \n", "error": "none", "author": "tom@organisms.be"}, {"index": "413", "colour": "orange", "code": "        # Warn if any lock files exist at startup.\n", "error": "none", "author": "tom@organisms.be"}, {"index": "414", "colour": "red", "code": "        lockfiles = [fname for fname in os.listdir(cls.storage_path)\n", "error": "E", "author": "tom@organisms.be"}, {"index": "415", "colour": "orange", "code": "                     if (fname.startswith(cls.SESSION_PREFIX)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "416", "colour": "orange", "code": "                         and fname.endswith(cls.LOCK_SUFFIX))]\n", "error": "none", "author": "tom@organisms.be"}, {"index": "417", "colour": "orange", "code": "        if lockfiles:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "418", "colour": "orange", "code": "            plural = ('', 's')[len(lockfiles) > 1]\n", "error": "none", "author": "tom@organisms.be"}, {"index": "419", "colour": "orange", "code": "            warn(\"%s session lockfile%s found at startup. If you are \"\n", "error": "none", "author": "tom@organisms.be"}, {"index": "420", "colour": "orange", "code": "                 \"only running one process, then you may need to \"\n", "error": "none", "author": "tom@organisms.be"}, {"index": "421", "colour": "orange", "code": "                 \"manually delete the lockfiles found at %r.\"\n", "error": "none", "author": "tom@organisms.be"}, {"index": "422", "colour": "red", "code": "                 % (len(lockfiles), plural, cls.storage_path))\n", "error": "E", "author": "tom@organisms.be"}, {"index": "423", "colour": "orange", "code": "    setup = classmethod(setup)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "424", "colour": "orange", "code": "    \n", "error": "none", "author": "tom@organisms.be"}, {"index": "425", "colour": "orange", "code": "    def _get_file_path(self):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "426", "colour": "red", "code": "        f = os.path.join(self.storage_path, self.SESSION_PREFIX + self.id)\n", "error": "E", "author": "tom@organisms.be"}, {"index": "427", "colour": "red", "code": "        if not os.path.abspath(f).startswith(self.storage_path):\n", "error": "E", "author": "tom@organisms.be"}, {"index": "428", "colour": "orange", "code": "            raise cherrypy.HTTPError(400, \"Invalid session id in cookie.\")\n", "error": "none", "author": "tom@organisms.be"}, {"index": "429", "colour": "orange", "code": "        return f\n", "error": "none", "author": "tom@organisms.be"}, {"index": "430", "colour": "orange", "code": "    \n", "error": "none", "author": "tom@organisms.be"}, {"index": "431", "colour": "orange", "code": "    def _exists(self):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "432", "colour": "orange", "code": "        path = self._get_file_path()\n", "error": "none", "author": "tom@organisms.be"}, {"index": "433", "colour": "orange", "code": "        return os.path.exists(path)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "434", "colour": "orange", "code": "    \n", "error": "none", "author": "tom@organisms.be"}, {"index": "435", "colour": "orange", "code": "    def _load(self, path=None):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "436", "colour": "orange", "code": "        if path is None:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "437", "colour": "orange", "code": "            path = self._get_file_path()\n", "error": "none", "author": "tom@organisms.be"}, {"index": "438", "colour": "orange", "code": "        try:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "439", "colour": "orange", "code": "            f = open(path, \"rb\")\n", "error": "none", "author": "tom@organisms.be"}, {"index": "440", "colour": "orange", "code": "            try:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "441", "colour": "orange", "code": "                return pickle.load(f)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "442", "colour": "orange", "code": "            finally:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "443", "colour": "orange", "code": "                f.close()\n", "error": "none", "author": "tom@organisms.be"}, {"index": "444", "colour": "orange", "code": "        except (IOError, EOFError):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "445", "colour": "orange", "code": "            return None\n", "error": "none", "author": "tom@organisms.be"}, {"index": "446", "colour": "orange", "code": "    \n", "error": "none", "author": "tom@organisms.be"}, {"index": "447", "colour": "orange", "code": "    def _save(self, expiration_time):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "448", "colour": "orange", "code": "        f = open(self._get_file_path(), \"wb\")\n", "error": "none", "author": "tom@organisms.be"}, {"index": "449", "colour": "orange", "code": "        try:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "450", "colour": "orange", "code": "            pickle.dump((self._data, expiration_time), f, self.pickle_protocol)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "451", "colour": "orange", "code": "        finally:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "452", "colour": "orange", "code": "            f.close()\n", "error": "none", "author": "tom@organisms.be"}, {"index": "453", "colour": "orange", "code": "    \n", "error": "none", "author": "tom@organisms.be"}, {"index": "454", "colour": "orange", "code": "    def _delete(self):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "455", "colour": "orange", "code": "        try:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "456", "colour": "orange", "code": "            os.unlink(self._get_file_path())\n", "error": "none", "author": "tom@organisms.be"}, {"index": "457", "colour": "orange", "code": "        except OSError:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "458", "colour": "orange", "code": "            pass\n", "error": "none", "author": "tom@organisms.be"}, {"index": "459", "colour": "orange", "code": "    \n", "error": "none", "author": "tom@organisms.be"}, {"index": "460", "colour": "orange", "code": "    def acquire_lock(self, path=None):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "461", "colour": "orange", "code": "        \"\"\"Acquire an exclusive lock on the currently-loaded session data.\"\"\"\n", "error": "none", "author": "tom@organisms.be"}, {"index": "462", "colour": "orange", "code": "        if path is None:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "463", "colour": "orange", "code": "            path = self._get_file_path()\n", "error": "none", "author": "tom@organisms.be"}, {"index": "464", "colour": "orange", "code": "        path += self.LOCK_SUFFIX\n", "error": "none", "author": "tom@organisms.be"}, {"index": "465", "colour": "orange", "code": "        while True:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "466", "colour": "orange", "code": "            try:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "467", "colour": "orange", "code": "                lockfd = os.open(path, os.O_CREAT|os.O_WRONLY|os.O_EXCL)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "468", "colour": "orange", "code": "            except OSError:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "469", "colour": "orange", "code": "                time.sleep(0.1)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "470", "colour": "orange", "code": "            else:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "471", "colour": "orange", "code": "                os.close(lockfd) \n", "error": "none", "author": "tom@organisms.be"}, {"index": "472", "colour": "orange", "code": "                break\n", "error": "none", "author": "tom@organisms.be"}, {"index": "473", "colour": "orange", "code": "        self.locked = True\n", "error": "none", "author": "tom@organisms.be"}, {"index": "474", "colour": "orange", "code": "    \n", "error": "none", "author": "tom@organisms.be"}, {"index": "475", "colour": "orange", "code": "    def release_lock(self, path=None):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "476", "colour": "orange", "code": "        \"\"\"Release the lock on the currently-loaded session data.\"\"\"\n", "error": "none", "author": "tom@organisms.be"}, {"index": "477", "colour": "orange", "code": "        if path is None:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "478", "colour": "orange", "code": "            path = self._get_file_path()\n", "error": "none", "author": "tom@organisms.be"}, {"index": "479", "colour": "orange", "code": "        os.unlink(path + self.LOCK_SUFFIX)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "480", "colour": "orange", "code": "        self.locked = False\n", "error": "none", "author": "tom@organisms.be"}, {"index": "481", "colour": "orange", "code": "    \n", "error": "none", "author": "tom@organisms.be"}, {"index": "482", "colour": "orange", "code": "    def clean_up(self):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "483", "colour": "orange", "code": "        \"\"\"Clean up expired sessions.\"\"\"\n", "error": "none", "author": "tom@organisms.be"}, {"index": "484", "colour": "orange", "code": "        now = self.now()\n", "error": "none", "author": "tom@organisms.be"}, {"index": "485", "colour": "orange", "code": "        # Iterate over all session files in self.storage_path\n", "error": "none", "author": "tom@organisms.be"}, {"index": "486", "colour": "red", "code": "        for fname in os.listdir(self.storage_path):\n", "error": "E", "author": "tom@organisms.be"}, {"index": "487", "colour": "orange", "code": "            if (fname.startswith(self.SESSION_PREFIX)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "488", "colour": "orange", "code": "                and not fname.endswith(self.LOCK_SUFFIX)):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "489", "colour": "orange", "code": "                # We have a session file: lock and load it and check\n", "error": "none", "author": "tom@organisms.be"}, {"index": "490", "colour": "orange", "code": "                #   if it's expired. If it fails, nevermind.\n", "error": "none", "author": "tom@organisms.be"}, {"index": "491", "colour": "red", "code": "                path = os.path.join(self.storage_path, fname)\n", "error": "E", "author": "tom@organisms.be"}, {"index": "492", "colour": "orange", "code": "                self.acquire_lock(path)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "493", "colour": "orange", "code": "                try:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "494", "colour": "orange", "code": "                    contents = self._load(path)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "495", "colour": "orange", "code": "                    # _load returns None on IOError\n", "error": "none", "author": "tom@organisms.be"}, {"index": "496", "colour": "orange", "code": "                    if contents is not None:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "497", "colour": "green", "code": "                        data, expiration_time = contents\n", "error": "W", "author": "tom@organisms.be"}, {"index": "498", "colour": "orange", "code": "                        if expiration_time < now:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "499", "colour": "orange", "code": "                            # Session expired: deleting it\n", "error": "none", "author": "tom@organisms.be"}, {"index": "500", "colour": "orange", "code": "                            os.unlink(path)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "501", "colour": "orange", "code": "                finally:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "502", "colour": "orange", "code": "                    self.release_lock(path)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "503", "colour": "orange", "code": "    \n", "error": "none", "author": "tom@organisms.be"}, {"index": "504", "colour": "orange", "code": "    def __len__(self):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "505", "colour": "orange", "code": "        \"\"\"Return the number of active sessions.\"\"\"\n", "error": "none", "author": "tom@organisms.be"}, {"index": "506", "colour": "red", "code": "        return len([fname for fname in os.listdir(self.storage_path)\n", "error": "E", "author": "tom@organisms.be"}, {"index": "507", "colour": "orange", "code": "                    if (fname.startswith(self.SESSION_PREFIX)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "508", "colour": "orange", "code": "                        and not fname.endswith(self.LOCK_SUFFIX))])\n", "error": "none", "author": "tom@organisms.be"}, {"index": "509", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "510", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "511", "colour": "orange", "code": "class PostgresqlSession(Session):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "512", "colour": "orange", "code": "    \"\"\" Implementation of the PostgreSQL backend for sessions. It assumes\n", "error": "none", "author": "tom@organisms.be"}, {"index": "513", "colour": "orange", "code": "        a table like this::\n", "error": "none", "author": "tom@organisms.be"}, {"index": "514", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "515", "colour": "orange", "code": "            create table session (\n", "error": "none", "author": "tom@organisms.be"}, {"index": "516", "colour": "orange", "code": "                id varchar(40),\n", "error": "none", "author": "tom@organisms.be"}, {"index": "517", "colour": "orange", "code": "                data text,\n", "error": "none", "author": "tom@organisms.be"}, {"index": "518", "colour": "orange", "code": "                expiration_time timestamp\n", "error": "none", "author": "tom@organisms.be"}, {"index": "519", "colour": "orange", "code": "            )\n", "error": "none", "author": "tom@organisms.be"}, {"index": "520", "colour": "orange", "code": "    \n", "error": "none", "author": "tom@organisms.be"}, {"index": "521", "colour": "orange", "code": "    You must provide your own get_db function.\n", "error": "none", "author": "tom@organisms.be"}, {"index": "522", "colour": "orange", "code": "    \"\"\"\n", "error": "none", "author": "tom@organisms.be"}, {"index": "523", "colour": "orange", "code": "    \n", "error": "none", "author": "tom@organisms.be"}, {"index": "524", "colour": "orange", "code": "    pickle_protocol = pickle.HIGHEST_PROTOCOL\n", "error": "none", "author": "tom@organisms.be"}, {"index": "525", "colour": "orange", "code": "    \n", "error": "none", "author": "tom@organisms.be"}, {"index": "526", "colour": "green", "code": "    def __init__(self, id=None, **kwargs):\n", "error": "W", "author": "tom@organisms.be"}, {"index": "527", "colour": "orange", "code": "        Session.__init__(self, id, **kwargs)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "528", "colour": "red", "code": "        self.cursor = self.db.cursor()\n", "error": "E", "author": "tom@organisms.be"}, {"index": "529", "colour": "orange", "code": "    \n", "error": "none", "author": "tom@organisms.be"}, {"index": "530", "colour": "orange", "code": "    def setup(cls, **kwargs):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "531", "colour": "orange", "code": "        \"\"\"Set up the storage system for Postgres-based sessions.\n", "error": "none", "author": "tom@organisms.be"}, {"index": "532", "colour": "orange", "code": "        \n", "error": "none", "author": "tom@organisms.be"}, {"index": "533", "colour": "orange", "code": "        This should only be called once per process; this will be done\n", "error": "none", "author": "tom@organisms.be"}, {"index": "534", "colour": "orange", "code": "        automatically when using sessions.init (as the built-in Tool does).\n", "error": "none", "author": "tom@organisms.be"}, {"index": "535", "colour": "orange", "code": "        \"\"\"\n", "error": "none", "author": "tom@organisms.be"}, {"index": "536", "colour": "orange", "code": "        for k, v in kwargs.items():\n", "error": "none", "author": "tom@organisms.be"}, {"index": "537", "colour": "orange", "code": "            setattr(cls, k, v)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "538", "colour": "orange", "code": "        \n", "error": "none", "author": "tom@organisms.be"}, {"index": "539", "colour": "red", "code": "        self.db = self.get_db()\n", "error": "E", "author": "tom@organisms.be"}, {"index": "540", "colour": "orange", "code": "    setup = classmethod(setup)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "541", "colour": "orange", "code": "    \n", "error": "none", "author": "tom@organisms.be"}, {"index": "542", "colour": "orange", "code": "    def __del__(self):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "543", "colour": "orange", "code": "        if self.cursor:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "544", "colour": "orange", "code": "            self.cursor.close()\n", "error": "none", "author": "tom@organisms.be"}, {"index": "545", "colour": "red", "code": "        self.db.commit()\n", "error": "E", "author": "tom@organisms.be"}, {"index": "546", "colour": "orange", "code": "    \n", "error": "none", "author": "tom@organisms.be"}, {"index": "547", "colour": "orange", "code": "    def _exists(self):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "548", "colour": "orange", "code": "        # Select session data from table\n", "error": "none", "author": "tom@organisms.be"}, {"index": "549", "colour": "orange", "code": "        self.cursor.execute('select data, expiration_time from session '\n", "error": "none", "author": "tom@organisms.be"}, {"index": "550", "colour": "orange", "code": "                            'where id=%s', (self.id,))\n", "error": "none", "author": "tom@organisms.be"}, {"index": "551", "colour": "orange", "code": "        rows = self.cursor.fetchall()\n", "error": "none", "author": "tom@organisms.be"}, {"index": "552", "colour": "orange", "code": "        return bool(rows)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "553", "colour": "orange", "code": "    \n", "error": "none", "author": "tom@organisms.be"}, {"index": "554", "colour": "orange", "code": "    def _load(self):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "555", "colour": "orange", "code": "        # Select session data from table\n", "error": "none", "author": "tom@organisms.be"}, {"index": "556", "colour": "orange", "code": "        self.cursor.execute('select data, expiration_time from session '\n", "error": "none", "author": "tom@organisms.be"}, {"index": "557", "colour": "orange", "code": "                            'where id=%s', (self.id,))\n", "error": "none", "author": "tom@organisms.be"}, {"index": "558", "colour": "orange", "code": "        rows = self.cursor.fetchall()\n", "error": "none", "author": "tom@organisms.be"}, {"index": "559", "colour": "orange", "code": "        if not rows:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "560", "colour": "orange", "code": "            return None\n", "error": "none", "author": "tom@organisms.be"}, {"index": "561", "colour": "orange", "code": "        \n", "error": "none", "author": "tom@organisms.be"}, {"index": "562", "colour": "orange", "code": "        pickled_data, expiration_time = rows[0]\n", "error": "none", "author": "tom@organisms.be"}, {"index": "563", "colour": "orange", "code": "        data = pickle.loads(pickled_data)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "564", "colour": "orange", "code": "        return data, expiration_time\n", "error": "none", "author": "tom@organisms.be"}, {"index": "565", "colour": "orange", "code": "    \n", "error": "none", "author": "tom@organisms.be"}, {"index": "566", "colour": "orange", "code": "    def _save(self, expiration_time):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "567", "colour": "orange", "code": "        pickled_data = pickle.dumps(self._data, self.pickle_protocol)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "568", "colour": "orange", "code": "        self.cursor.execute('update session set data = %s, '\n", "error": "none", "author": "tom@organisms.be"}, {"index": "569", "colour": "orange", "code": "                            'expiration_time = %s where id = %s',\n", "error": "none", "author": "tom@organisms.be"}, {"index": "570", "colour": "orange", "code": "                            (pickled_data, expiration_time, self.id))\n", "error": "none", "author": "tom@organisms.be"}, {"index": "571", "colour": "orange", "code": "    \n", "error": "none", "author": "tom@organisms.be"}, {"index": "572", "colour": "orange", "code": "    def _delete(self):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "573", "colour": "orange", "code": "        self.cursor.execute('delete from session where id=%s', (self.id,))\n", "error": "none", "author": "tom@organisms.be"}, {"index": "574", "colour": "orange", "code": "   \n", "error": "none", "author": "tom@organisms.be"}, {"index": "575", "colour": "orange", "code": "    def acquire_lock(self):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "576", "colour": "orange", "code": "        \"\"\"Acquire an exclusive lock on the currently-loaded session data.\"\"\"\n", "error": "none", "author": "tom@organisms.be"}, {"index": "577", "colour": "orange", "code": "        # We use the \"for update\" clause to lock the row\n", "error": "none", "author": "tom@organisms.be"}, {"index": "578", "colour": "orange", "code": "        self.locked = True\n", "error": "none", "author": "tom@organisms.be"}, {"index": "579", "colour": "orange", "code": "        self.cursor.execute('select id from session where id=%s for update',\n", "error": "none", "author": "tom@organisms.be"}, {"index": "580", "colour": "orange", "code": "                            (self.id,))\n", "error": "none", "author": "tom@organisms.be"}, {"index": "581", "colour": "orange", "code": "    \n", "error": "none", "author": "tom@organisms.be"}, {"index": "582", "colour": "orange", "code": "    def release_lock(self):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "583", "colour": "orange", "code": "        \"\"\"Release the lock on the currently-loaded session data.\"\"\"\n", "error": "none", "author": "tom@organisms.be"}, {"index": "584", "colour": "orange", "code": "        # We just close the cursor and that will remove the lock\n", "error": "none", "author": "tom@organisms.be"}, {"index": "585", "colour": "orange", "code": "        #   introduced by the \"for update\" clause\n", "error": "none", "author": "tom@organisms.be"}, {"index": "586", "colour": "orange", "code": "        self.cursor.close()\n", "error": "none", "author": "tom@organisms.be"}, {"index": "587", "colour": "orange", "code": "        self.locked = False\n", "error": "none", "author": "tom@organisms.be"}, {"index": "588", "colour": "orange", "code": "    \n", "error": "none", "author": "tom@organisms.be"}, {"index": "589", "colour": "orange", "code": "    def clean_up(self):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "590", "colour": "orange", "code": "        \"\"\"Clean up expired sessions.\"\"\"\n", "error": "none", "author": "tom@organisms.be"}, {"index": "591", "colour": "orange", "code": "        self.cursor.execute('delete from session where expiration_time < %s',\n", "error": "none", "author": "tom@organisms.be"}, {"index": "592", "colour": "orange", "code": "                            (self.now(),))\n", "error": "none", "author": "tom@organisms.be"}, {"index": "593", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "594", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "595", "colour": "blue", "code": "class MemcachedSession(Session):\n", "error": "R", "author": "tom@organisms.be"}, {"index": "596", "colour": "orange", "code": "    \n", "error": "none", "author": "tom@organisms.be"}, {"index": "597", "colour": "orange", "code": "    # The most popular memcached client for Python isn't thread-safe.\n", "error": "none", "author": "tom@organisms.be"}, {"index": "598", "colour": "orange", "code": "    # Wrap all .get and .set operations in a single lock.\n", "error": "none", "author": "tom@organisms.be"}, {"index": "599", "colour": "orange", "code": "    mc_lock = threading.RLock()\n", "error": "none", "author": "tom@organisms.be"}, {"index": "600", "colour": "orange", "code": "    \n", "error": "none", "author": "tom@organisms.be"}, {"index": "601", "colour": "orange", "code": "    # This is a seperate set of locks per session id.\n", "error": "none", "author": "tom@organisms.be"}, {"index": "602", "colour": "orange", "code": "    locks = {}\n", "error": "none", "author": "tom@organisms.be"}, {"index": "603", "colour": "orange", "code": "    \n", "error": "none", "author": "tom@organisms.be"}, {"index": "604", "colour": "orange", "code": "    servers = ['127.0.0.1:11211']\n", "error": "none", "author": "tom@organisms.be"}, {"index": "605", "colour": "orange", "code": "    \n", "error": "none", "author": "tom@organisms.be"}, {"index": "606", "colour": "orange", "code": "    def setup(cls, **kwargs):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "607", "colour": "orange", "code": "        \"\"\"Set up the storage system for memcached-based sessions.\n", "error": "none", "author": "tom@organisms.be"}, {"index": "608", "colour": "orange", "code": "        \n", "error": "none", "author": "tom@organisms.be"}, {"index": "609", "colour": "orange", "code": "        This should only be called once per process; this will be done\n", "error": "none", "author": "tom@organisms.be"}, {"index": "610", "colour": "orange", "code": "        automatically when using sessions.init (as the built-in Tool does).\n", "error": "none", "author": "tom@organisms.be"}, {"index": "611", "colour": "orange", "code": "        \"\"\"\n", "error": "none", "author": "tom@organisms.be"}, {"index": "612", "colour": "orange", "code": "        for k, v in kwargs.items():\n", "error": "none", "author": "tom@organisms.be"}, {"index": "613", "colour": "orange", "code": "            setattr(cls, k, v)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "614", "colour": "orange", "code": "        \n", "error": "none", "author": "tom@organisms.be"}, {"index": "615", "colour": "orange", "code": "        import memcache\n", "error": "none", "author": "tom@organisms.be"}, {"index": "616", "colour": "orange", "code": "        cls.cache = memcache.Client(cls.servers)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "617", "colour": "orange", "code": "    setup = classmethod(setup)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "618", "colour": "orange", "code": "    \n", "error": "none", "author": "tom@organisms.be"}, {"index": "619", "colour": "orange", "code": "    def _get_id(self):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "620", "colour": "orange", "code": "        return self._id\n", "error": "none", "author": "tom@organisms.be"}, {"index": "621", "colour": "orange", "code": "    def _set_id(self, value):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "622", "colour": "orange", "code": "        # This encode() call is where we differ from the superclass.\n", "error": "none", "author": "tom@organisms.be"}, {"index": "623", "colour": "orange", "code": "        # Memcache keys MUST be byte strings, not unicode.\n", "error": "none", "author": "tom@organisms.be"}, {"index": "624", "colour": "orange", "code": "        if isinstance(value, unicodestr):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "625", "colour": "orange", "code": "            value = value.encode('utf-8')\n", "error": "none", "author": "tom@organisms.be"}, {"index": "626", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "627", "colour": "orange", "code": "        self._id = value\n", "error": "none", "author": "tom@organisms.be"}, {"index": "628", "colour": "orange", "code": "        for o in self.id_observers:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "629", "colour": "orange", "code": "            o(value)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "630", "colour": "orange", "code": "    id = property(_get_id, _set_id, doc=\"The current session ID.\")\n", "error": "none", "author": "tom@organisms.be"}, {"index": "631", "colour": "orange", "code": "    \n", "error": "none", "author": "tom@organisms.be"}, {"index": "632", "colour": "orange", "code": "    def _exists(self):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "633", "colour": "orange", "code": "        self.mc_lock.acquire()\n", "error": "none", "author": "tom@organisms.be"}, {"index": "634", "colour": "orange", "code": "        try:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "635", "colour": "orange", "code": "            return bool(self.cache.get(self.id))\n", "error": "none", "author": "tom@organisms.be"}, {"index": "636", "colour": "orange", "code": "        finally:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "637", "colour": "orange", "code": "            self.mc_lock.release()\n", "error": "none", "author": "tom@organisms.be"}, {"index": "638", "colour": "orange", "code": "    \n", "error": "none", "author": "tom@organisms.be"}, {"index": "639", "colour": "orange", "code": "    def _load(self):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "640", "colour": "orange", "code": "        self.mc_lock.acquire()\n", "error": "none", "author": "tom@organisms.be"}, {"index": "641", "colour": "orange", "code": "        try:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "642", "colour": "orange", "code": "            return self.cache.get(self.id)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "643", "colour": "orange", "code": "        finally:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "644", "colour": "orange", "code": "            self.mc_lock.release()\n", "error": "none", "author": "tom@organisms.be"}, {"index": "645", "colour": "orange", "code": "    \n", "error": "none", "author": "tom@organisms.be"}, {"index": "646", "colour": "orange", "code": "    def _save(self, expiration_time):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "647", "colour": "orange", "code": "        # Send the expiration time as \"Unix time\" (seconds since 1/1/1970)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "648", "colour": "orange", "code": "        td = int(time.mktime(expiration_time.timetuple()))\n", "error": "none", "author": "tom@organisms.be"}, {"index": "649", "colour": "orange", "code": "        self.mc_lock.acquire()\n", "error": "none", "author": "tom@organisms.be"}, {"index": "650", "colour": "orange", "code": "        try:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "651", "colour": "orange", "code": "            if not self.cache.set(self.id, (self._data, expiration_time), td):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "652", "colour": "orange", "code": "                raise AssertionError(\"Session data for id %r not set.\" % self.id)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "653", "colour": "orange", "code": "        finally:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "654", "colour": "orange", "code": "            self.mc_lock.release()\n", "error": "none", "author": "tom@organisms.be"}, {"index": "655", "colour": "orange", "code": "    \n", "error": "none", "author": "tom@organisms.be"}, {"index": "656", "colour": "orange", "code": "    def _delete(self):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "657", "colour": "orange", "code": "        self.cache.delete(self.id)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "658", "colour": "orange", "code": "    \n", "error": "none", "author": "tom@organisms.be"}, {"index": "659", "colour": "orange", "code": "    def acquire_lock(self):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "660", "colour": "orange", "code": "        \"\"\"Acquire an exclusive lock on the currently-loaded session data.\"\"\"\n", "error": "none", "author": "tom@organisms.be"}, {"index": "661", "colour": "orange", "code": "        self.locked = True\n", "error": "none", "author": "tom@organisms.be"}, {"index": "662", "colour": "orange", "code": "        self.locks.setdefault(self.id, threading.RLock()).acquire()\n", "error": "none", "author": "tom@organisms.be"}, {"index": "663", "colour": "orange", "code": "    \n", "error": "none", "author": "tom@organisms.be"}, {"index": "664", "colour": "orange", "code": "    def release_lock(self):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "665", "colour": "orange", "code": "        \"\"\"Release the lock on the currently-loaded session data.\"\"\"\n", "error": "none", "author": "tom@organisms.be"}, {"index": "666", "colour": "orange", "code": "        self.locks[self.id].release()\n", "error": "none", "author": "tom@organisms.be"}, {"index": "667", "colour": "orange", "code": "        self.locked = False\n", "error": "none", "author": "tom@organisms.be"}, {"index": "668", "colour": "orange", "code": "    \n", "error": "none", "author": "tom@organisms.be"}, {"index": "669", "colour": "orange", "code": "    def __len__(self):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "670", "colour": "orange", "code": "        \"\"\"Return the number of active sessions.\"\"\"\n", "error": "none", "author": "tom@organisms.be"}, {"index": "671", "colour": "orange", "code": "        raise NotImplementedError\n", "error": "none", "author": "tom@organisms.be"}, {"index": "672", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "673", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "674", "colour": "orange", "code": "# Hook functions (for CherryPy tools)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "675", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "676", "colour": "orange", "code": "def save():\n", "error": "none", "author": "tom@organisms.be"}, {"index": "677", "colour": "orange", "code": "    \"\"\"Save any changed session data.\"\"\"\n", "error": "none", "author": "tom@organisms.be"}, {"index": "678", "colour": "orange", "code": "    \n", "error": "none", "author": "tom@organisms.be"}, {"index": "679", "colour": "orange", "code": "    if not hasattr(cherrypy.serving, \"session\"):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "680", "colour": "orange", "code": "        return\n", "error": "none", "author": "tom@organisms.be"}, {"index": "681", "colour": "orange", "code": "    request = cherrypy.serving.request\n", "error": "none", "author": "tom@organisms.be"}, {"index": "682", "colour": "orange", "code": "    response = cherrypy.serving.response\n", "error": "none", "author": "tom@organisms.be"}, {"index": "683", "colour": "orange", "code": "    \n", "error": "none", "author": "tom@organisms.be"}, {"index": "684", "colour": "orange", "code": "    # Guard against running twice\n", "error": "none", "author": "tom@organisms.be"}, {"index": "685", "colour": "orange", "code": "    if hasattr(request, \"_sessionsaved\"):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "686", "colour": "orange", "code": "        return\n", "error": "none", "author": "tom@organisms.be"}, {"index": "687", "colour": "green", "code": "    request._sessionsaved = True\n", "error": "W", "author": "tom@organisms.be"}, {"index": "688", "colour": "orange", "code": "    \n", "error": "none", "author": "tom@organisms.be"}, {"index": "689", "colour": "orange", "code": "    if response.stream:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "690", "colour": "orange", "code": "        # If the body is being streamed, we have to save the data\n", "error": "none", "author": "tom@organisms.be"}, {"index": "691", "colour": "orange", "code": "        #   *after* the response has been written out\n", "error": "none", "author": "tom@organisms.be"}, {"index": "692", "colour": "orange", "code": "        request.hooks.attach('on_end_request', cherrypy.session.save)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "693", "colour": "orange", "code": "    else:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "694", "colour": "orange", "code": "        # If the body is not being streamed, we save the data now\n", "error": "none", "author": "tom@organisms.be"}, {"index": "695", "colour": "orange", "code": "        # (so we can release the lock).\n", "error": "none", "author": "tom@organisms.be"}, {"index": "696", "colour": "orange", "code": "        if isinstance(response.body, types.GeneratorType):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "697", "colour": "orange", "code": "            response.collapse_body()\n", "error": "none", "author": "tom@organisms.be"}, {"index": "698", "colour": "orange", "code": "        cherrypy.session.save()\n", "error": "none", "author": "tom@organisms.be"}, {"index": "699", "colour": "orange", "code": "save.failsafe = True\n", "error": "none", "author": "tom@organisms.be"}, {"index": "700", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "701", "colour": "orange", "code": "def close():\n", "error": "none", "author": "tom@organisms.be"}, {"index": "702", "colour": "orange", "code": "    \"\"\"Close the session object for this request.\"\"\"\n", "error": "none", "author": "tom@organisms.be"}, {"index": "703", "colour": "orange", "code": "    sess = getattr(cherrypy.serving, \"session\", None)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "704", "colour": "orange", "code": "    if getattr(sess, \"locked\", False):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "705", "colour": "orange", "code": "        # If the session is still locked we release the lock\n", "error": "none", "author": "tom@organisms.be"}, {"index": "706", "colour": "orange", "code": "        sess.release_lock()\n", "error": "none", "author": "tom@organisms.be"}, {"index": "707", "colour": "orange", "code": "close.failsafe = True\n", "error": "none", "author": "tom@organisms.be"}, {"index": "708", "colour": "orange", "code": "close.priority = 90\n", "error": "none", "author": "tom@organisms.be"}, {"index": "709", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "710", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "711", "colour": "blue", "code": "def init(storage_type='ram', path=None, path_header=None, name='session_id',\n", "error": "R", "author": "tom@organisms.be"}, {"index": "712", "colour": "orange", "code": "         timeout=60, domain=None, secure=False, clean_freq=5,\n", "error": "none", "author": "tom@organisms.be"}, {"index": "713", "colour": "orange", "code": "         persistent=True, httponly=False, debug=False, **kwargs):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "714", "colour": "orange", "code": "    \"\"\"Initialize session object (using cookies).\n", "error": "none", "author": "tom@organisms.be"}, {"index": "715", "colour": "orange", "code": "    \n", "error": "none", "author": "tom@organisms.be"}, {"index": "716", "colour": "orange", "code": "    storage_type\n", "error": "none", "author": "tom@organisms.be"}, {"index": "717", "colour": "orange", "code": "        One of 'ram', 'file', 'postgresql', 'memcached'. This will be\n", "error": "none", "author": "tom@organisms.be"}, {"index": "718", "colour": "orange", "code": "        used to look up the corresponding class in cherrypy.lib.sessions\n", "error": "none", "author": "tom@organisms.be"}, {"index": "719", "colour": "orange", "code": "        globals. For example, 'file' will use the FileSession class.\n", "error": "none", "author": "tom@organisms.be"}, {"index": "720", "colour": "orange", "code": "    \n", "error": "none", "author": "tom@organisms.be"}, {"index": "721", "colour": "orange", "code": "    path\n", "error": "none", "author": "tom@organisms.be"}, {"index": "722", "colour": "orange", "code": "        The 'path' value to stick in the response cookie metadata.\n", "error": "none", "author": "tom@organisms.be"}, {"index": "723", "colour": "orange", "code": "    \n", "error": "none", "author": "tom@organisms.be"}, {"index": "724", "colour": "orange", "code": "    path_header\n", "error": "none", "author": "tom@organisms.be"}, {"index": "725", "colour": "orange", "code": "        If 'path' is None (the default), then the response\n", "error": "none", "author": "tom@organisms.be"}, {"index": "726", "colour": "orange", "code": "        cookie 'path' will be pulled from request.headers[path_header].\n", "error": "none", "author": "tom@organisms.be"}, {"index": "727", "colour": "orange", "code": "    \n", "error": "none", "author": "tom@organisms.be"}, {"index": "728", "colour": "orange", "code": "    name\n", "error": "none", "author": "tom@organisms.be"}, {"index": "729", "colour": "orange", "code": "        The name of the cookie.\n", "error": "none", "author": "tom@organisms.be"}, {"index": "730", "colour": "orange", "code": "    \n", "error": "none", "author": "tom@organisms.be"}, {"index": "731", "colour": "orange", "code": "    timeout\n", "error": "none", "author": "tom@organisms.be"}, {"index": "732", "colour": "orange", "code": "        The expiration timeout (in minutes) for the stored session data.\n", "error": "none", "author": "tom@organisms.be"}, {"index": "733", "colour": "orange", "code": "        If 'persistent' is True (the default), this is also the timeout\n", "error": "none", "author": "tom@organisms.be"}, {"index": "734", "colour": "orange", "code": "        for the cookie.\n", "error": "none", "author": "tom@organisms.be"}, {"index": "735", "colour": "orange", "code": "    \n", "error": "none", "author": "tom@organisms.be"}, {"index": "736", "colour": "orange", "code": "    domain\n", "error": "none", "author": "tom@organisms.be"}, {"index": "737", "colour": "orange", "code": "        The cookie domain.\n", "error": "none", "author": "tom@organisms.be"}, {"index": "738", "colour": "orange", "code": "    \n", "error": "none", "author": "tom@organisms.be"}, {"index": "739", "colour": "orange", "code": "    secure\n", "error": "none", "author": "tom@organisms.be"}, {"index": "740", "colour": "orange", "code": "        If False (the default) the cookie 'secure' value will not\n", "error": "none", "author": "tom@organisms.be"}, {"index": "741", "colour": "orange", "code": "        be set. If True, the cookie 'secure' value will be set (to 1).\n", "error": "none", "author": "tom@organisms.be"}, {"index": "742", "colour": "orange", "code": "    \n", "error": "none", "author": "tom@organisms.be"}, {"index": "743", "colour": "orange", "code": "    clean_freq (minutes)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "744", "colour": "orange", "code": "        The poll rate for expired session cleanup.\n", "error": "none", "author": "tom@organisms.be"}, {"index": "745", "colour": "orange", "code": "    \n", "error": "none", "author": "tom@organisms.be"}, {"index": "746", "colour": "orange", "code": "    persistent\n", "error": "none", "author": "tom@organisms.be"}, {"index": "747", "colour": "orange", "code": "        If True (the default), the 'timeout' argument will be used\n", "error": "none", "author": "tom@organisms.be"}, {"index": "748", "colour": "orange", "code": "        to expire the cookie. If False, the cookie will not have an expiry,\n", "error": "none", "author": "tom@organisms.be"}, {"index": "749", "colour": "orange", "code": "        and the cookie will be a \"session cookie\" which expires when the\n", "error": "none", "author": "tom@organisms.be"}, {"index": "750", "colour": "orange", "code": "        browser is closed.\n", "error": "none", "author": "tom@organisms.be"}, {"index": "751", "colour": "orange", "code": "    \n", "error": "none", "author": "tom@organisms.be"}, {"index": "752", "colour": "orange", "code": "    httponly\n", "error": "none", "author": "tom@organisms.be"}, {"index": "753", "colour": "orange", "code": "        If False (the default) the cookie 'httponly' value will not be set.\n", "error": "none", "author": "tom@organisms.be"}, {"index": "754", "colour": "orange", "code": "        If True, the cookie 'httponly' value will be set (to 1).\n", "error": "none", "author": "tom@organisms.be"}, {"index": "755", "colour": "orange", "code": "    \n", "error": "none", "author": "tom@organisms.be"}, {"index": "756", "colour": "orange", "code": "    Any additional kwargs will be bound to the new Session instance,\n", "error": "none", "author": "tom@organisms.be"}, {"index": "757", "colour": "orange", "code": "    and may be specific to the storage type. See the subclass of Session\n", "error": "none", "author": "tom@organisms.be"}, {"index": "758", "colour": "orange", "code": "    you're using for more information.\n", "error": "none", "author": "tom@organisms.be"}, {"index": "759", "colour": "orange", "code": "    \"\"\"\n", "error": "none", "author": "tom@organisms.be"}, {"index": "760", "colour": "orange", "code": "    \n", "error": "none", "author": "tom@organisms.be"}, {"index": "761", "colour": "orange", "code": "    request = cherrypy.serving.request\n", "error": "none", "author": "tom@organisms.be"}, {"index": "762", "colour": "orange", "code": "    \n", "error": "none", "author": "tom@organisms.be"}, {"index": "763", "colour": "orange", "code": "    # Guard against running twice\n", "error": "none", "author": "tom@organisms.be"}, {"index": "764", "colour": "orange", "code": "    if hasattr(request, \"_session_init_flag\"):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "765", "colour": "orange", "code": "        return\n", "error": "none", "author": "tom@organisms.be"}, {"index": "766", "colour": "green", "code": "    request._session_init_flag = True\n", "error": "W", "author": "tom@organisms.be"}, {"index": "767", "colour": "orange", "code": "    \n", "error": "none", "author": "tom@organisms.be"}, {"index": "768", "colour": "orange", "code": "    # Check if request came with a session ID\n", "error": "none", "author": "tom@organisms.be"}, {"index": "769", "colour": "green", "code": "    id = None\n", "error": "W", "author": "tom@organisms.be"}, {"index": "770", "colour": "orange", "code": "    if name in request.cookie:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "771", "colour": "orange", "code": "        id = request.cookie[name].value\n", "error": "none", "author": "tom@organisms.be"}, {"index": "772", "colour": "orange", "code": "        if debug:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "773", "colour": "orange", "code": "            cherrypy.log('ID obtained from request.cookie: %r' % id,\n", "error": "none", "author": "tom@organisms.be"}, {"index": "774", "colour": "orange", "code": "                         'TOOLS.SESSIONS')\n", "error": "none", "author": "tom@organisms.be"}, {"index": "775", "colour": "orange", "code": "    \n", "error": "none", "author": "tom@organisms.be"}, {"index": "776", "colour": "orange", "code": "    # Find the storage class and call setup (first time only).\n", "error": "none", "author": "tom@organisms.be"}, {"index": "777", "colour": "orange", "code": "    storage_class = storage_type.title() + 'Session'\n", "error": "none", "author": "tom@organisms.be"}, {"index": "778", "colour": "orange", "code": "    storage_class = globals()[storage_class]\n", "error": "none", "author": "tom@organisms.be"}, {"index": "779", "colour": "orange", "code": "    if not hasattr(cherrypy, \"session\"):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "780", "colour": "orange", "code": "        if hasattr(storage_class, \"setup\"):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "781", "colour": "orange", "code": "            storage_class.setup(**kwargs)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "782", "colour": "orange", "code": "    \n", "error": "none", "author": "tom@organisms.be"}, {"index": "783", "colour": "orange", "code": "    # Create and attach a new Session instance to cherrypy.serving.\n", "error": "none", "author": "tom@organisms.be"}, {"index": "784", "colour": "orange", "code": "    # It will possess a reference to (and lock, and lazily load)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "785", "colour": "orange", "code": "    # the requested session data.\n", "error": "none", "author": "tom@organisms.be"}, {"index": "786", "colour": "orange", "code": "    kwargs['timeout'] = timeout\n", "error": "none", "author": "tom@organisms.be"}, {"index": "787", "colour": "orange", "code": "    kwargs['clean_freq'] = clean_freq\n", "error": "none", "author": "tom@organisms.be"}, {"index": "788", "colour": "orange", "code": "    cherrypy.serving.session = sess = storage_class(id, **kwargs)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "789", "colour": "orange", "code": "    sess.debug = debug\n", "error": "none", "author": "tom@organisms.be"}, {"index": "790", "colour": "green", "code": "    def update_cookie(id):\n", "error": "W", "author": "tom@organisms.be"}, {"index": "791", "colour": "orange", "code": "        \"\"\"Update the cookie every time the session id changes.\"\"\"\n", "error": "none", "author": "tom@organisms.be"}, {"index": "792", "colour": "orange", "code": "        cherrypy.serving.response.cookie[name] = id\n", "error": "none", "author": "tom@organisms.be"}, {"index": "793", "colour": "orange", "code": "    sess.id_observers.append(update_cookie)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "794", "colour": "orange", "code": "    \n", "error": "none", "author": "tom@organisms.be"}, {"index": "795", "colour": "orange", "code": "    # Create cherrypy.session which will proxy to cherrypy.serving.session\n", "error": "none", "author": "tom@organisms.be"}, {"index": "796", "colour": "orange", "code": "    if not hasattr(cherrypy, \"session\"):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "797", "colour": "green", "code": "        cherrypy.session = cherrypy._ThreadLocalProxy('session')\n", "error": "W", "author": "tom@organisms.be"}, {"index": "798", "colour": "orange", "code": "    \n", "error": "none", "author": "tom@organisms.be"}, {"index": "799", "colour": "orange", "code": "    if persistent:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "800", "colour": "orange", "code": "        cookie_timeout = timeout\n", "error": "none", "author": "tom@organisms.be"}, {"index": "801", "colour": "orange", "code": "    else:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "802", "colour": "orange", "code": "        # See http://support.microsoft.com/kb/223799/EN-US/\n", "error": "none", "author": "tom@organisms.be"}, {"index": "803", "colour": "orange", "code": "        # and http://support.mozilla.com/en-US/kb/Cookies\n", "error": "none", "author": "tom@organisms.be"}, {"index": "804", "colour": "orange", "code": "        cookie_timeout = None\n", "error": "none", "author": "tom@organisms.be"}, {"index": "805", "colour": "orange", "code": "    set_response_cookie(path=path, path_header=path_header, name=name,\n", "error": "none", "author": "tom@organisms.be"}, {"index": "806", "colour": "orange", "code": "                        timeout=cookie_timeout, domain=domain, secure=secure,\n", "error": "none", "author": "tom@organisms.be"}, {"index": "807", "colour": "orange", "code": "                        httponly=httponly)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "808", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "809", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "810", "colour": "blue", "code": "def set_response_cookie(path=None, path_header=None, name='session_id',\n", "error": "R", "author": "tom@organisms.be"}, {"index": "811", "colour": "orange", "code": "                        timeout=60, domain=None, secure=False, httponly=False):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "812", "colour": "orange", "code": "    \"\"\"Set a response cookie for the client.\n", "error": "none", "author": "tom@organisms.be"}, {"index": "813", "colour": "orange", "code": "    \n", "error": "none", "author": "tom@organisms.be"}, {"index": "814", "colour": "orange", "code": "    path\n", "error": "none", "author": "tom@organisms.be"}, {"index": "815", "colour": "orange", "code": "        the 'path' value to stick in the response cookie metadata.\n", "error": "none", "author": "tom@organisms.be"}, {"index": "816", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "817", "colour": "orange", "code": "    path_header\n", "error": "none", "author": "tom@organisms.be"}, {"index": "818", "colour": "orange", "code": "        if 'path' is None (the default), then the response\n", "error": "none", "author": "tom@organisms.be"}, {"index": "819", "colour": "orange", "code": "        cookie 'path' will be pulled from request.headers[path_header].\n", "error": "none", "author": "tom@organisms.be"}, {"index": "820", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "821", "colour": "orange", "code": "    name\n", "error": "none", "author": "tom@organisms.be"}, {"index": "822", "colour": "orange", "code": "        the name of the cookie.\n", "error": "none", "author": "tom@organisms.be"}, {"index": "823", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "824", "colour": "orange", "code": "    timeout\n", "error": "none", "author": "tom@organisms.be"}, {"index": "825", "colour": "orange", "code": "        the expiration timeout for the cookie. If 0 or other boolean\n", "error": "none", "author": "tom@organisms.be"}, {"index": "826", "colour": "orange", "code": "        False, no 'expires' param will be set, and the cookie will be a\n", "error": "none", "author": "tom@organisms.be"}, {"index": "827", "colour": "orange", "code": "        \"session cookie\" which expires when the browser is closed.\n", "error": "none", "author": "tom@organisms.be"}, {"index": "828", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "829", "colour": "orange", "code": "    domain\n", "error": "none", "author": "tom@organisms.be"}, {"index": "830", "colour": "orange", "code": "        the cookie domain.\n", "error": "none", "author": "tom@organisms.be"}, {"index": "831", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "832", "colour": "orange", "code": "    secure\n", "error": "none", "author": "tom@organisms.be"}, {"index": "833", "colour": "orange", "code": "        if False (the default) the cookie 'secure' value will not\n", "error": "none", "author": "tom@organisms.be"}, {"index": "834", "colour": "orange", "code": "        be set. If True, the cookie 'secure' value will be set (to 1).\n", "error": "none", "author": "tom@organisms.be"}, {"index": "835", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "836", "colour": "orange", "code": "    httponly\n", "error": "none", "author": "tom@organisms.be"}, {"index": "837", "colour": "orange", "code": "        If False (the default) the cookie 'httponly' value will not be set.\n", "error": "none", "author": "tom@organisms.be"}, {"index": "838", "colour": "orange", "code": "        If True, the cookie 'httponly' value will be set (to 1).\n", "error": "none", "author": "tom@organisms.be"}, {"index": "839", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "840", "colour": "orange", "code": "    \"\"\"\n", "error": "none", "author": "tom@organisms.be"}, {"index": "841", "colour": "orange", "code": "    # Set response cookie\n", "error": "none", "author": "tom@organisms.be"}, {"index": "842", "colour": "orange", "code": "    cookie = cherrypy.serving.response.cookie\n", "error": "none", "author": "tom@organisms.be"}, {"index": "843", "colour": "orange", "code": "    cookie[name] = cherrypy.serving.session.id\n", "error": "none", "author": "tom@organisms.be"}, {"index": "844", "colour": "orange", "code": "    cookie[name]['path'] = (path or cherrypy.serving.request.headers.get(path_header)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "845", "colour": "orange", "code": "                            or '/')\n", "error": "none", "author": "tom@organisms.be"}, {"index": "846", "colour": "orange", "code": "    \n", "error": "none", "author": "tom@organisms.be"}, {"index": "847", "colour": "orange", "code": "    # We'd like to use the \"max-age\" param as indicated in\n", "error": "none", "author": "tom@organisms.be"}, {"index": "848", "colour": "orange", "code": "    # http://www.faqs.org/rfcs/rfc2109.html but IE doesn't\n", "error": "none", "author": "tom@organisms.be"}, {"index": "849", "colour": "orange", "code": "    # save it to disk and the session is lost if people close\n", "error": "none", "author": "tom@organisms.be"}, {"index": "850", "colour": "orange", "code": "    # the browser. So we have to use the old \"expires\" ... sigh ...\n", "error": "none", "author": "tom@organisms.be"}, {"index": "851", "colour": "orange", "code": "##    cookie[name]['max-age'] = timeout * 60\n", "error": "none", "author": "tom@organisms.be"}, {"index": "852", "colour": "orange", "code": "    if timeout:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "853", "colour": "orange", "code": "        e = time.time() + (timeout * 60)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "854", "colour": "orange", "code": "        cookie[name]['expires'] = httputil.HTTPDate(e)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "855", "colour": "orange", "code": "    if domain is not None:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "856", "colour": "orange", "code": "        cookie[name]['domain'] = domain\n", "error": "none", "author": "tom@organisms.be"}, {"index": "857", "colour": "orange", "code": "    if secure:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "858", "colour": "orange", "code": "        cookie[name]['secure'] = 1\n", "error": "none", "author": "tom@organisms.be"}, {"index": "859", "colour": "orange", "code": "    if httponly:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "860", "colour": "orange", "code": "        if not cookie[name].isReservedKey('httponly'):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "861", "colour": "orange", "code": "            raise ValueError(\"The httponly cookie token is not supported.\")\n", "error": "none", "author": "tom@organisms.be"}, {"index": "862", "colour": "orange", "code": "        cookie[name]['httponly'] = 1\n", "error": "none", "author": "tom@organisms.be"}, {"index": "863", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "864", "colour": "orange", "code": "def expire():\n", "error": "none", "author": "tom@organisms.be"}, {"index": "865", "colour": "orange", "code": "    \"\"\"Expire the current session cookie.\"\"\"\n", "error": "none", "author": "tom@organisms.be"}, {"index": "866", "colour": "orange", "code": "    name = cherrypy.serving.request.config.get('tools.sessions.name', 'session_id')\n", "error": "none", "author": "tom@organisms.be"}, {"index": "867", "colour": "orange", "code": "    one_year = 60 * 60 * 24 * 365\n", "error": "none", "author": "tom@organisms.be"}, {"index": "868", "colour": "orange", "code": "    e = time.time() - one_year\n", "error": "none", "author": "tom@organisms.be"}, {"index": "869", "colour": "orange", "code": "    cherrypy.serving.response.cookie[name]['expires'] = httputil.HTTPDate(e)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "870", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "871", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}]}