{"path": "/home/asumal/git/cs410/pattern/pattern/text/search.py", "lines": [[{"error": "C", "line": "1", "code": "#### PATTERN | TEXT | PATTERN MATCHING #############################################################\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "2", "code": "# -*- coding: utf-8 -*-\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "3", "code": "# Copyright (c) 2010 University of Antwerp, Belgium\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "4", "code": "# Author: Tom De Smedt <tom@organisms.be>\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "5", "code": "# License: BSD (see LICENSE.txt for details).\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "6", "code": "# http://www.clips.ua.ac.be/pages/pattern\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "7", "code": "\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "C", "line": "8", "code": "####################################################################################################\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "9", "code": "\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "10", "code": "import re\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "11", "code": "import itertools\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "12", "code": "\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "C", "line": "13", "code": "#--- TEXT, SENTENCE AND WORD -----------------------------------------------------------------------\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "C", "line": "14", "code": "# The search() and match() functions work on Text, Sentence and Word objects (see pattern.text.tree),\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "15", "code": "# i.e., the parse tree including part-of-speech tags and phrase chunk tags.\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "16", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "17", "code": "# The pattern.text.search Match object will contain matched Word objects, \n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "18", "code": "# emulated with the following classes if the original input was a plain string:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "19", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "20", "code": "PUNCTUATION = \".,;:!?()[]{}`'\\\"@#$^&*+-|=~_\"\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "21", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "W", "line": "22", "code": "RE_PUNCTUATION = \"|\".join(map(re.escape, PUNCTUATION))\n", "colour": "purple", "author": "tom@organisms.be"}, {"error": "none", "line": "23", "code": "RE_PUNCTUATION = re.compile(\"(%s)\" % RE_PUNCTUATION)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "24", "code": "\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "C", "line": "25", "code": "class Text(list):\n", "colour": "blue", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "26", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "W", "line": "27", "code": "    def __init__(self, string=\"\", token=[\"word\"]):\n", "colour": "purple", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "28", "code": "        \"\"\" A list of sentences, where each sentence is separated by a period.\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "29", "code": "        \"\"\"\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "30", "code": "        list.__init__(self, (Sentence(s + \".\", token) for s in string.split(\".\")))\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "C", "line": "31", "code": "    \n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "32", "code": "    @property\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "C", "line": "33", "code": "    def sentences(self):\n", "colour": "blue", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "34", "code": "        return self\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "C", "line": "35", "code": "        \n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "36", "code": "    @property\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "37", "code": "    def words(self):\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "E", "line": "38", "code": "        return list(chain(*self))\n", "colour": "yellow", "author": "tom@organisms.be"}, {"error": "none", "line": "39", "code": "\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "C", "line": "40", "code": "class Sentence(list):\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "C", "line": "41", "code": "    \n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "W", "line": "42", "code": "    def __init__(self, string=\"\", token=[\"word\"]):\n", "colour": "purple", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "43", "code": "        \"\"\" A list of words, where punctuation marks are split from words.\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "44", "code": "        \"\"\"\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "45", "code": "        s = RE_PUNCTUATION.sub(\" \\\\1 \", string) # Naive tokenization.\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "C", "line": "46", "code": "        s = re.sub(r\"\\s+\", \" \", s)\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "C", "line": "47", "code": "        s = re.sub(r\" ' (d|m|s|ll|re|ve)\", \" '\\\\1\", s)\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "C", "line": "48", "code": "        s = s.replace(\"n ' t\", \" n't\")\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "C", "line": "49", "code": "        s = s.split(\" \")\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "50", "code": "        list.__init__(self, (Word(self, w, index=i) for i, w in enumerate(s)))\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "51", "code": "        \n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "52", "code": "    @property\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "53", "code": "    def string(self):\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "54", "code": "        return \" \".join(w.string for w in self)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "55", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "56", "code": "    @property\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "57", "code": "    def words(self):\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "58", "code": "        return self\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "59", "code": "    \n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "60", "code": "    @property\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "R", "line": "61", "code": "    def chunks(self):\n", "colour": "green", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "62", "code": "        return []\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "63", "code": "\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "C", "line": "64", "code": "class Word(object):\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "C", "line": "65", "code": "    \n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "66", "code": "    def __init__(self, sentence, string, tag=None, index=0):\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "67", "code": "        \"\"\" A word with a position in a sentence.\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "68", "code": "        \"\"\"\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "69", "code": "        self.sentence, self.string, self.tag, self.index = sentence, string, tag, index\n", "colour": "blue", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "C", "line": "70", "code": "    \n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "71", "code": "    def __repr__(self):\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "72", "code": "        return \"Word(%s)\" % repr(self.string)\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "C", "line": "73", "code": "    \n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "C", "line": "74", "code": "    def _get_type(self):\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "75", "code": "        return self.tag\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "76", "code": "    def _set_type(self, v):\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "77", "code": "        self.tag = v\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "78", "code": "        \n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "79", "code": "    type = property(_get_type, _set_type)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "80", "code": "    \n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "81", "code": "    @property\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "R", "line": "82", "code": "    def chunk(self): \n", "colour": "green", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "83", "code": "        return None\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "C", "line": "84", "code": "    \n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "85", "code": "    @property\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "R", "line": "86", "code": "    def lemma(self):\n", "colour": "green", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "87", "code": "        return None\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "88", "code": "\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "C", "line": "89", "code": "#--- STRING MATCHING -------------------------------------------------------------------------------\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "90", "code": "\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "91", "code": "WILDCARD = \"*\"\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "C", "line": "92", "code": "regexp = type(re.compile(r\".\"))\n", "colour": "blue", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "93", "code": "\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "94", "code": "def _match(string, pattern):\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "95", "code": "    \"\"\" Returns True if the pattern matches the given word string.\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "96", "code": "        The pattern can include a wildcard (*front, back*, *both*, in*side),\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "97", "code": "        or it can be a compiled regular expression.\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "98", "code": "    \"\"\"\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "C", "line": "99", "code": "    p = pattern\n", "colour": "blue", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "100", "code": "    try:\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "C", "line": "101", "code": "        if p[:1] == WILDCARD and (p[-1:] == WILDCARD and p[1:-1] in string or string.endswith(p[1:])):\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "102", "code": "            return True\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "C", "line": "103", "code": "        if p[-1:] == WILDCARD and not p[-2:-1] == \"\\\\\" and string.startswith(p[:-1]):\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "104", "code": "            return True\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "105", "code": "        if p == string:\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "106", "code": "            return True\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "107", "code": "        if WILDCARD in p[1:-1]:\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "C", "line": "108", "code": "            p = p.split(WILDCARD)\n", "colour": "blue", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "109", "code": "            return string.startswith(p[0]) and string.endswith(p[-1])\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "W", "line": "110", "code": "    except:\n", "colour": "purple", "author": "tom@organisms.be"}, {"error": "C", "line": "111", "code": "        # For performance, calling isinstance() last is 10% faster for plain strings.\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "112", "code": "        if isinstance(p, regexp):\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "113", "code": "            return p.search(string) is not None\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "114", "code": "    return False\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "115", "code": "\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "C", "line": "116", "code": "#--- LIST FUNCTIONS --------------------------------------------------------------------------------\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "C", "line": "117", "code": "# Search patterns can contain optional constraints, \n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "118", "code": "# so we need to find all possible variations of a pattern.\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "119", "code": "\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "120", "code": "def unique(iterable):\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "121", "code": "    \"\"\" Returns a list copy in which each item occurs only once (in-order).\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "122", "code": "    \"\"\"\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "123", "code": "    seen = set()\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "124", "code": "    return [x for x in iterable if x not in seen and not seen.add(x)]\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "125", "code": "\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "126", "code": "def find(function, iterable):\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "127", "code": "    \"\"\" Returns the first item in the list for which function(item) is True, None otherwise.\n", "colour": "blue", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "128", "code": "    \"\"\"\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "C", "line": "129", "code": "    for x in iterable:\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "130", "code": "        if function(x) is True:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "131", "code": "            return x\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "132", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "133", "code": "def combinations(iterable, n):\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "134", "code": "    # Backwards compatibility.\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "135", "code": "    return product(iterable, repeat=n)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "136", "code": "\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "137", "code": "def product(*args, **kwargs):\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "138", "code": "    \"\"\" Yields all permutations with replacement:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "139", "code": "        list(product(\"cat\", repeat=2)) => \n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "C", "line": "140", "code": "        [(\"c\", \"c\"), \n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "C", "line": "141", "code": "         (\"c\", \"a\"), \n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "C", "line": "142", "code": "         (\"c\", \"t\"), \n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "C", "line": "143", "code": "         (\"a\", \"c\"), \n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "C", "line": "144", "code": "         (\"a\", \"a\"), \n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "C", "line": "145", "code": "         (\"a\", \"t\"), \n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "C", "line": "146", "code": "         (\"t\", \"c\"), \n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "C", "line": "147", "code": "         (\"t\", \"a\"), \n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "148", "code": "         (\"t\", \"t\")]\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "149", "code": "    \"\"\"\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "C", "line": "150", "code": "    p = [[]]\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "W", "line": "151", "code": "    for iterable in map(tuple, args) * kwargs.get(\"repeat\", 1):\n", "colour": "purple", "author": "tom@organisms.be"}, {"error": "C", "line": "152", "code": "        p = [x + [y] for x in p for y in iterable]\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "C", "line": "153", "code": "    for p in p:\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "154", "code": "        yield tuple(p)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "155", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "156", "code": "try: from itertools import product\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "W", "line": "157", "code": "except:\n", "colour": "purple", "author": "tom@organisms.be"}, {"error": "none", "line": "158", "code": "    pass\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "159", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "160", "code": "def variations(iterable, optional=lambda x: False):\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "161", "code": "    \"\"\" Returns all possible variations of a sequence with optional items.\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "162", "code": "    \"\"\"\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "C", "line": "163", "code": "    # For example: variations([\"A?\", \"B?\", \"C\"], optional=lambda s: s.endswith(\"?\"))\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "164", "code": "    # defines a sequence where constraint A and B are optional:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "165", "code": "    # [(\"A?\", \"B?\", \"C\"), (\"B?\", \"C\"), (\"A?\", \"C\"), (\"C\")]\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "166", "code": "    iterable = tuple(iterable)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "167", "code": "    # Create a boolean sequence where True means optional:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "168", "code": "    # (\"A?\", \"B?\", \"C\") => [True, True, False]\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "169", "code": "    o = [optional(x) for x in iterable]\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "170", "code": "    # Find all permutations of the boolean sequence:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "171", "code": "    # [True, False, True], [True, False, False], [False, False, True], [False, False, False].\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "C", "line": "172", "code": "    # Map to sequences of constraints whose index in the boolean sequence yields True.\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "C", "line": "173", "code": "    a = set()\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "C", "line": "174", "code": "    for p in product([False, True], repeat=sum(o)):\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "C", "line": "175", "code": "        p = list(p)\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "C", "line": "176", "code": "        v = [b and (b and p.pop(0)) for b in o]\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "C", "line": "177", "code": "        v = tuple(iterable[i] for i in xrange(len(v)) if not v[i])\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "178", "code": "        a.add(v)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "179", "code": "    # Longest-first.\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "180", "code": "    return sorted(a, cmp=lambda x, y: len(y) - len(x))\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "181", "code": "\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "C", "line": "182", "code": "#### TAXONOMY ######################################################################################\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "183", "code": "\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "C", "line": "184", "code": "#--- ORDERED DICTIONARY ----------------------------------------------------------------------------\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "C", "line": "185", "code": "# A taxonomy is based on an ordered dictionary \n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "C", "line": "186", "code": "# (i.e., if a taxonomy term has multiple parents, the most recent parent is the default).\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "187", "code": "\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "C", "line": "188", "code": "class odict(dict):\n", "colour": "blue", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "189", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "W", "line": "190", "code": "    def __init__(self, items=[]):\n", "colour": "purple", "author": "tom@organisms.be"}, {"error": "none", "line": "191", "code": "        \"\"\" A dictionary with ordered keys (first-in last-out).\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "192", "code": "        \"\"\"\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "193", "code": "        dict.__init__(self)\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "C", "line": "194", "code": "        self._o = [] # List of ordered keys.\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "195", "code": "        if isinstance(items, dict):\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "E", "line": "196", "code": "            items = reversed(items.items())\n", "colour": "yellow", "author": "tom@organisms.be"}, {"error": "C", "line": "197", "code": "        for k, v in items:\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "198", "code": "            self.__setitem__(k, v)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "199", "code": "        \n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "200", "code": "    @classmethod\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "C", "line": "201", "code": "    def fromkeys(cls, keys=[], v=None):\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "202", "code": "        return cls((k, v) for k in keys)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "203", "code": "    \n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "C", "line": "204", "code": "    def push(self, kv):\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "205", "code": "        \"\"\" Adds a new item from the given (key, value)-tuple.\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "206", "code": "            If the key exists, pushes the updated item to the head of the dict.\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "207", "code": "        \"\"\"\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "C", "line": "208", "code": "        if kv[0] in self: \n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "209", "code": "            self.__delitem__(kv[0])\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "210", "code": "        self.__setitem__(kv[0], kv[1])\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "211", "code": "    append = push\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "212", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "213", "code": "    def __iter__(self):\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "214", "code": "        return reversed(self._o)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "215", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "216", "code": "    def __setitem__(self, k, v):\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "217", "code": "        if k not in self:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "218", "code": "            self._o.append(k)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "219", "code": "        dict.__setitem__(self, k, v)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "220", "code": "        \n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "221", "code": "    def __delitem__(self, k):\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "222", "code": "        self._o.remove(k)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "223", "code": "        dict.__delitem__(self, k)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "224", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "225", "code": "    def update(self, d):\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "C", "line": "226", "code": "        for k, v in reversed(d.items()): \n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "227", "code": "            self.__setitem__(k, v)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "228", "code": "        \n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "229", "code": "    def setdefault(self, k, v=None):\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "C", "line": "230", "code": "        if not k in self: \n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "231", "code": "            self.__setitem__(k, v)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "232", "code": "        return self[k]        \n", "colour": "blue", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "233", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "234", "code": "    def pop(self, k, *args, **kwargs):\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "235", "code": "        if k in self:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "236", "code": "            self._o.remove(k)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "237", "code": "        return dict.pop(self, k, *args, **kwargs)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "238", "code": "        \n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "239", "code": "    def popitem(self):\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "240", "code": "        k=self._o[-1] if self._o else None; return (k, self.pop(k))\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "C", "line": "241", "code": "        \n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "242", "code": "    def clear(self):\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "C", "line": "243", "code": "        self._o=[]; dict.clear(self)\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "244", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "245", "code": "    def iterkeys(self):\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "246", "code": "        return reversed(self._o)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "247", "code": "    def itervalues(self):\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "248", "code": "        return itertools.imap(self.__getitem__, reversed(self._o))\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "249", "code": "    def iteritems(self):\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "250", "code": "        return iter(zip(self.iterkeys(), self.itervalues()))\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "251", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "252", "code": "    def keys(self): \n", "colour": "blue", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "253", "code": "        return list(self.iterkeys())\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "254", "code": "    def values(self):\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "255", "code": "        return list(self.itervalues())\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "256", "code": "    def items(self): \n", "colour": "blue", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "257", "code": "        return list(self.iteritems())\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "258", "code": "    \n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "259", "code": "    def copy(self):\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "260", "code": "        return self.__class__(reversed(self.items()))\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "261", "code": "    \n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "262", "code": "    def __repr__(self):\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "C", "line": "263", "code": "        return \"{%s}\" % \", \".join(\"%s: %s\" % (repr(k), repr(v)) for k, v in self.items())\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "264", "code": "\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "C", "line": "265", "code": "#--- TAXONOMY --------------------------------------------------------------------------------------\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "266", "code": "\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "R", "line": "267", "code": "class Taxonomy(dict):\n", "colour": "green", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "C", "line": "268", "code": "    \n", "colour": "blue", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "W", "line": "269", "code": "    def __init__(self):\n", "colour": "purple", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "270", "code": "        \"\"\" Hierarchical tree of words classified by semantic type.\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "271", "code": "            For example: \"rose\" and \"daffodil\" can be classified as \"flower\":\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "272", "code": "            >>> taxonomy.append(\"rose\", type=\"flower\")\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "273", "code": "            >>> taxonomy.append(\"daffodil\", type=\"flower\")\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "274", "code": "            >>> print(taxonomy.children(\"flower\"))\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "275", "code": "            Taxonomy terms can be used in a Pattern:\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "276", "code": "            FLOWER will match \"flower\" as well as \"rose\" and \"daffodil\".\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "277", "code": "            The taxonomy is case insensitive by default.\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "278", "code": "        \"\"\"\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "279", "code": "        self.case_sensitive = False\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "280", "code": "        self._values = {}\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "281", "code": "        self.classifiers = []\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "C", "line": "282", "code": "        \n", "colour": "blue", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "C", "line": "283", "code": "    def _normalize(self, term):\n", "colour": "blue", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "C", "line": "284", "code": "        try: \n", "colour": "blue", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "285", "code": "            return not self.case_sensitive and term.lower() or term\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "W", "line": "286", "code": "        except: # Not a string.\n", "colour": "purple", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "287", "code": "            return term\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "288", "code": "\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "289", "code": "    def __contains__(self, term):\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "290", "code": "        # Check if the term is in the dictionary.\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "291", "code": "        # If the term is not in the dictionary, check the classifiers.\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "292", "code": "        term = self._normalize(term)\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "293", "code": "        if dict.__contains__(self, term):\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "294", "code": "            return True\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "295", "code": "        for classifier in self.classifiers:\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "296", "code": "            if classifier.parents(term) \\\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "297", "code": "            or classifier.children(term):\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "298", "code": "                return True\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "299", "code": "        return False\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "300", "code": "\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "W", "line": "301", "code": "    def append(self, term, type=None, value=None):\n", "colour": "purple", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "C", "line": "302", "code": "        \"\"\" Appends the given term to the taxonomy and tags it as the given type.\n", "colour": "blue", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "303", "code": "            Optionally, a disambiguation value can be supplied.\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "304", "code": "            For example: taxonomy.append(\"many\", \"quantity\", \"50-200\")\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "305", "code": "        \"\"\"\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "306", "code": "        term = self._normalize(term)\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "307", "code": "        type = self._normalize(type)\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "308", "code": "        self.setdefault(term, (odict(), odict()))[0].push((type, True))\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "309", "code": "        self.setdefault(type, (odict(), odict()))[1].push((term, True))\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "310", "code": "        self._values[term] = value\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "C", "line": "311", "code": "    \n", "colour": "blue", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "312", "code": "    def classify(self, term, **kwargs):\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "C", "line": "313", "code": "        \"\"\" Returns the (most recently added) semantic type for the given term (\"many\" => \"quantity\").\n", "colour": "blue", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "314", "code": "            If the term is not in the dictionary, try Taxonomy.classifiers.\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "315", "code": "        \"\"\"\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "316", "code": "        term = self._normalize(term)\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "317", "code": "        if dict.__contains__(self, term):\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "318", "code": "            return self[term][0].keys()[-1]\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "319", "code": "        # If the term is not in the dictionary, check the classifiers.\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "320", "code": "        # Returns the first term in the list returned by a classifier.\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "321", "code": "        for classifier in self.classifiers:\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "322", "code": "            # **kwargs are useful if the classifier requests extra information,\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "323", "code": "            # for example the part-of-speech tag.\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "C", "line": "324", "code": "            v = classifier.parents(term, **kwargs)\n", "colour": "blue", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "325", "code": "            if v:\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "326", "code": "                return v[0]\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "C", "line": "327", "code": "            \n", "colour": "blue", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "328", "code": "    def parents(self, term, recursive=False, **kwargs):\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "329", "code": "        \"\"\" Returns a list of all semantic types for the given term.\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "330", "code": "            If recursive=True, traverses parents up to the root.\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "331", "code": "        \"\"\"\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "C", "line": "332", "code": "        def dfs(term, recursive=False, visited={}, **kwargs):\n", "colour": "blue", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "333", "code": "            if term in visited: # Break on cyclic relations.\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "334", "code": "                return []\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "C", "line": "335", "code": "            visited[term], a = True, []\n", "colour": "blue", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "336", "code": "            if dict.__contains__(self, term):\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "C", "line": "337", "code": "                a = self[term][0].keys()\n", "colour": "blue", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "338", "code": "            for classifier in self.classifiers:\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "339", "code": "                a.extend(classifier.parents(term, **kwargs) or [])\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "340", "code": "            if recursive:\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "C", "line": "341", "code": "                for w in a: a += dfs(w, recursive, visited, **kwargs)\n", "colour": "blue", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "342", "code": "            return a\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "343", "code": "        return unique(dfs(self._normalize(term), recursive, {}, **kwargs))\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "344", "code": "    \n", "colour": "blue", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "345", "code": "    def children(self, term, recursive=False, **kwargs):\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "C", "line": "346", "code": "        \"\"\" Returns all terms of the given semantic type: \"quantity\" => [\"many\", \"lot\", \"few\", ...]\n", "colour": "blue", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "347", "code": "            If recursive=True, traverses children down to the leaves.\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "348", "code": "        \"\"\"\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "C", "line": "349", "code": "        def dfs(term, recursive=False, visited={}, **kwargs):\n", "colour": "blue", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "350", "code": "            if term in visited: # Break on cyclic relations.\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "351", "code": "                return []\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "C", "line": "352", "code": "            visited[term], a = True, []\n", "colour": "blue", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "353", "code": "            if dict.__contains__(self, term):\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "C", "line": "354", "code": "                a = self[term][1].keys()\n", "colour": "blue", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "355", "code": "            for classifier in self.classifiers:\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "356", "code": "                a.extend(classifier.children(term, **kwargs) or [])\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "357", "code": "            if recursive:\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "C", "line": "358", "code": "                for w in a: a += dfs(w, recursive, visited, **kwargs)\n", "colour": "blue", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "359", "code": "            return a\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "360", "code": "        return unique(dfs(self._normalize(term), recursive, {}, **kwargs))\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "361", "code": "    \n", "colour": "blue", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "362", "code": "    def value(self, term, **kwargs):\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "363", "code": "        \"\"\" Returns the value of the given term (\"many\" => \"50-200\")\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "364", "code": "        \"\"\"\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "365", "code": "        term = self._normalize(term)\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "366", "code": "        if term in self._values:\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "367", "code": "            return self._values[term]\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "368", "code": "        for classifier in self.classifiers:\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "C", "line": "369", "code": "            v = classifier.value(term, **kwargs)\n", "colour": "blue", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "370", "code": "            if v is not None:\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "371", "code": "                return v\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "C", "line": "372", "code": "        \n", "colour": "blue", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "C", "line": "373", "code": "    def remove(self, term):\n", "colour": "blue", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "374", "code": "        if dict.__contains__(self, term):\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "C", "line": "375", "code": "            for w in self.parents(term):\n", "colour": "blue", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "376", "code": "                self[w][1].pop(term)\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "C", "line": "377", "code": "            dict.pop(self, term) \n", "colour": "blue", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "378", "code": "\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "379", "code": "# Global taxonomy:\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "C", "line": "380", "code": "TAXONOMY = taxonomy = Taxonomy()\n", "colour": "blue", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "381", "code": "\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "382", "code": "#taxonomy.append(\"rose\", type=\"flower\")\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "383", "code": "#taxonomy.append(\"daffodil\", type=\"flower\")\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "384", "code": "#taxonomy.append(\"flower\", type=\"plant\")\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "385", "code": "#print(taxonomy.classify(\"rose\"))\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "386", "code": "#print(taxonomy.children(\"plant\", recursive=True))\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "387", "code": "\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "C", "line": "388", "code": "#c = Classifier(parents=lambda term: term.endswith(\"ness\") and [\"quality\"] or [])\n", "colour": "blue", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "389", "code": "#taxonomy.classifiers.append(c)\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "390", "code": "#print(taxonomy.classify(\"roughness\"))\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "391", "code": "\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "C", "line": "392", "code": "#--- TAXONOMY CLASSIFIER ---------------------------------------------------------------------------\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "393", "code": "\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "R", "line": "394", "code": "class Classifier(object):\n", "colour": "green", "author": "tom@organisms.be"}, {"error": "C", "line": "395", "code": "    \n", "colour": "blue", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "C", "line": "396", "code": "    def __init__(self, parents=lambda term: [], children=lambda term: [], value=lambda term: None):\n", "colour": "blue", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "C", "line": "397", "code": "        \"\"\" A classifier uses a rule-based approach to enrich the taxonomy, for example:\n", "colour": "blue", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "C", "line": "398", "code": "            c = Classifier(parents=lambda term: term.endswith(\"ness\") and [\"quality\"] or [])\n", "colour": "blue", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "399", "code": "            taxonomy.classifiers.append(c)\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "400", "code": "            This tags any word ending in -ness as \"quality\".\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "C", "line": "401", "code": "            This is much shorter than manually adding \"roughness\", \"sharpness\", ...\n", "colour": "blue", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "C", "line": "402", "code": "            Other examples of useful classifiers: calling en.wordnet.Synset.hyponyms() or en.number().\n", "colour": "blue", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "403", "code": "        \"\"\"\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "C", "line": "404", "code": "        self.parents  = parents\n", "colour": "blue", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "405", "code": "        self.children = children\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "C", "line": "406", "code": "        self.value    = value\n", "colour": "blue", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "407", "code": "\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "408", "code": "# Classifier(parents=lambda word: word.endswith(\"ness\") and [\"quality\"] or [])\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "409", "code": "# Classifier(parents=lambda word, chunk=None: chunk==\"VP\" and [ACTION] or [])\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "410", "code": "\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "R", "line": "411", "code": "class WordNetClassifier(Classifier):\n", "colour": "green", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "C", "line": "412", "code": "    \n", "colour": "blue", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "413", "code": "    def __init__(self, wordnet=None):\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "414", "code": "        if wordnet is None:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "F", "line": "415", "code": "            try: from pattern.en import wordnet\n", "colour": "red", "author": "tom@organisms.be"}, {"error": "W", "line": "416", "code": "            except:\n", "colour": "purple", "author": "tom@organisms.be"}, {"error": "W", "line": "417", "code": "                try: from en import wordnet\n", "colour": "purple", "author": "tom@organisms.be"}, {"error": "W", "line": "418", "code": "                except:\n", "colour": "purple", "author": "tom@organisms.be"}, {"error": "none", "line": "419", "code": "                    pass\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "420", "code": "        Classifier.__init__(self, self._parents, self._children)\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "421", "code": "        self.wordnet = wordnet\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "422", "code": "\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "C", "line": "423", "code": "    def _children(self, word, pos=\"NN\"):\n", "colour": "blue", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "C", "line": "424", "code": "        try: \n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "C", "line": "425", "code": "            return [w.synonyms[0] for w in self.wordnet.synsets(word, pos[:2])[0].hyponyms()]\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "W", "line": "426", "code": "        except:\n", "colour": "purple", "author": "tom@organisms.be"}, {"error": "none", "line": "427", "code": "            pass\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "C", "line": "428", "code": "        \n", "colour": "blue", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "C", "line": "429", "code": "    def _parents(self, word, pos=\"NN\"):\n", "colour": "blue", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "C", "line": "430", "code": "        try: \n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "C", "line": "431", "code": "            return [w.synonyms[0] for w in self.wordnet.synsets(word, pos[:2])[0].hypernyms()]\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "W", "line": "432", "code": "        except:\n", "colour": "purple", "author": "tom@organisms.be"}, {"error": "none", "line": "433", "code": "            pass\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "434", "code": "\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "435", "code": "#from en import wordnet\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "436", "code": "#taxonomy.classifiers.append(WordNetClassifier(wordnet))\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "437", "code": "#print(taxonomy.parents(\"ponder\", pos=\"VB\"))\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "438", "code": "#print(taxonomy.children(\"computer\"))\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "439", "code": "\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "C", "line": "440", "code": "#### PATTERN #######################################################################################\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "441", "code": "\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "C", "line": "442", "code": "#--- PATTERN CONSTRAINT ----------------------------------------------------------------------------\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "443", "code": "\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "444", "code": "# Allowed chunk, role and part-of-speech tags (Penn Treebank II):\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "C", "line": "445", "code": "CHUNKS = dict.fromkeys([\"NP\", \"PP\", \"VP\", \"ADVP\", \"ADJP\", \"SBAR\", \"PRT\", \"INTJ\"], True)\n", "colour": "blue", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "C", "line": "446", "code": "ROLES  = dict.fromkeys([\"SBJ\", \"OBJ\", \"PRD\", \"TMP\", \"CLR\", \"LOC\", \"DIR\", \"EXT\", \"PRP\"], True)\n", "colour": "blue", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "C", "line": "447", "code": "TAGS   = dict.fromkeys([\"CC\", \"CD\", \"CJ\", \"DT\", \"EX\", \"FW\", \"IN\", \"JJ\", \"JJR\", \"JJS\", \"JJ*\", \n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "C", "line": "448", "code": "                        \"LS\", \"MD\", \"NN\", \"NNS\", \"NNP\", \"NNPS\", \"NN*\", \"NO\", \"PDT\", \"PR\", \n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "C", "line": "449", "code": "                        \"PRP\", \"PRP$\", \"PR*\", \"PRP*\", \"PT\", \"RB\", \"RBR\", \"RBS\", \"RB*\", \"RP\", \n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "C", "line": "450", "code": "                        \"SYM\", \"TO\", \"UH\", \"VB\", \"VBZ\", \"VBP\", \"VBD\", \"VBN\", \"VBG\", \"VB*\", \n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "C", "line": "451", "code": "                        \"WDT\", \"WP*\", \"WRB\", \"X\", \".\", \",\", \":\", \"(\", \")\"], True)\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "452", "code": "\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "453", "code": "ALPHA = re.compile(\"[a-zA-Z]\")\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "C", "line": "454", "code": "has_alpha = lambda string: ALPHA.match(string) is not None\n", "colour": "blue", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "455", "code": "\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "R", "line": "456", "code": "class Constraint(object):\n", "colour": "green", "author": "tom@organisms.be"}, {"error": "C", "line": "457", "code": "    \n", "colour": "blue", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "R", "line": "458", "code": "    def __init__(self, words=[], tags=[], chunks=[], roles=[], taxa=[], optional=False, multiple=False, first=False, taxonomy=TAXONOMY, exclude=None, custom=None):\n", "colour": "green", "author": "anthony@renttherunway.com"}, {"error": "C", "line": "459", "code": "        \"\"\" A range of words, tags and taxonomy terms that matches certain words in a sentence.        \n", "colour": "blue", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "C", "line": "460", "code": "            For example: \n", "colour": "blue", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "461", "code": "            Constraint.fromstring(\"with|of\") matches either \"with\" or \"of\".\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "462", "code": "            Constraint.fromstring(\"(JJ)\") optionally matches an adjective.\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "463", "code": "            Constraint.fromstring(\"NP|SBJ\") matches subject noun phrases.\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "C", "line": "464", "code": "            Constraint.fromstring(\"QUANTITY|QUALITY\") matches quantity-type and quality-type taxa.\n", "colour": "blue", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "465", "code": "        \"\"\"\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "C", "line": "466", "code": "        self.index    = 0\n", "colour": "blue", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "C", "line": "467", "code": "        self.words    = list(words)  # Allowed words/lemmata (of, with, ...)\n", "colour": "blue", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "C", "line": "468", "code": "        self.tags     = list(tags)   # Allowed parts-of-speech (NN, JJ, ...)\n", "colour": "blue", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "C", "line": "469", "code": "        self.chunks   = list(chunks) # Allowed chunk types (NP, VP, ...)\n", "colour": "blue", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "C", "line": "470", "code": "        self.roles    = list(roles)  # Allowed chunk roles (SBJ, OBJ, ...)\n", "colour": "blue", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "C", "line": "471", "code": "        self.taxa     = list(taxa)   # Allowed word categories.\n", "colour": "blue", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "472", "code": "        self.taxonomy = taxonomy\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "473", "code": "        self.optional = optional\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "474", "code": "        self.multiple = multiple\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "C", "line": "475", "code": "        self.first    = first\n", "colour": "blue", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "C", "line": "476", "code": "        self.exclude  = exclude      # Constraint of words that are *not* allowed, or None.\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "C", "line": "477", "code": "        self.custom   = custom       # Custom function(Word) returns True if word matches constraint.\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "C", "line": "478", "code": "        \n", "colour": "blue", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "479", "code": "    @classmethod\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "C", "line": "480", "code": "    def fromstring(cls, s, **kwargs):\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "W", "line": "481", "code": "        \"\"\" Returns a new Constraint from the given string.\n", "colour": "purple", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "482", "code": "            Uppercase words indicate either a tag (\"NN\", \"JJ\", \"VP\")\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "483", "code": "            or a taxonomy term (e.g., \"PRODUCT\", \"PERSON\").\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "484", "code": "            Syntax:\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "485", "code": "            ( defines an optional constraint, e.g., \"(JJ)\".\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "486", "code": "            [ defines a constraint with spaces, e.g., \"[Mac OS X | Windows Vista]\".\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "487", "code": "            _ is converted to spaces, e.g., \"Windows_Vista\".\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "488", "code": "            | separates different options, e.g., \"ADJP|ADVP\".\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "489", "code": "            ! can be used as a word prefix to disallow it.\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "490", "code": "            * can be used as a wildcard character, e.g., \"soft*|JJ*\".\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "491", "code": "            ? as a suffix defines a constraint that is optional, e.g., \"JJ?\".\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "492", "code": "            + as a suffix defines a constraint that can span multiple words, e.g., \"JJ+\".\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "C", "line": "493", "code": "            ^ as a prefix defines a constraint that can only match the first word.\n", "colour": "blue", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "494", "code": "            These characters need to be escaped if used as content: \"\\(\".\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "495", "code": "        \"\"\"\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "C", "line": "496", "code": "        C = cls(**kwargs)\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "497", "code": "        s = s.strip()\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "498", "code": "        s = s.strip(\"{}\")\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "499", "code": "        s = s.strip()\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "W", "line": "500", "code": "        for i in range(3):\n", "colour": "purple", "author": "tom@organisms.be"}, {"error": "none", "line": "501", "code": "            # Wrapping order of control characters is ignored:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "502", "code": "            # (NN+) == (NN)+ == NN?+ == NN+? == [NN+?] == [NN]+?\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "503", "code": "            if s.startswith(\"^\"):\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "504", "code": "                s = s[1:  ]; C.first = True\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "W", "line": "505", "code": "            if s.endswith(\"+\") and not s.endswith(\"\\+\"):\n", "colour": "purple", "author": "tom@organisms.be"}, {"error": "C", "line": "506", "code": "                s = s[0:-1]; C.multiple = True\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "W", "line": "507", "code": "            if s.endswith(\"?\") and not s.endswith(\"\\?\"):\n", "colour": "purple", "author": "tom@organisms.be"}, {"error": "C", "line": "508", "code": "                s = s[0:-1]; C.optional = True\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "509", "code": "            if s.startswith(\"(\") and s.endswith(\")\"):\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "510", "code": "                s = s[1:-1]; C.optional = True\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "511", "code": "            if s.startswith(\"[\") and s.endswith(\"]\"):\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "512", "code": "                s = s[1:-1]\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "513", "code": "        s = re.sub(r\"^\\\\\\^\", \"^\", s)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "514", "code": "        s = re.sub(r\"\\\\\\+$\", \"+\", s)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "W", "line": "515", "code": "        s = s.replace(\"\\_\", \"&uscore;\")\n", "colour": "purple", "author": "tom@organisms.be"}, {"error": "C", "line": "516", "code": "        s = s.replace(\"_\",\" \")\n", "colour": "blue", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "517", "code": "        s = s.replace(\"&uscore;\", \"_\")\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "518", "code": "        s = s.replace(\"&lparen;\", \"(\")\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "519", "code": "        s = s.replace(\"&rparen;\", \")\")\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "520", "code": "        s = s.replace(\"&lbrack;\", \"[\")\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "521", "code": "        s = s.replace(\"&rbrack;\", \"]\")\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "522", "code": "        s = s.replace(\"&lcurly;\", \"{\")\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "523", "code": "        s = s.replace(\"&rcurly;\", \"}\")\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "W", "line": "524", "code": "        s = s.replace(\"\\(\", \"(\")\n", "colour": "purple", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "W", "line": "525", "code": "        s = s.replace(\"\\)\", \")\") \n", "colour": "purple", "author": "tom@organisms.be"}, {"error": "W", "line": "526", "code": "        s = s.replace(\"\\[\", \"[\")\n", "colour": "purple", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "W", "line": "527", "code": "        s = s.replace(\"\\]\", \"]\") \n", "colour": "purple", "author": "tom@organisms.be"}, {"error": "W", "line": "528", "code": "        s = s.replace(\"\\{\", \"{\")\n", "colour": "purple", "author": "tom@organisms.be"}, {"error": "W", "line": "529", "code": "        s = s.replace(\"\\}\", \"}\") \n", "colour": "purple", "author": "tom@organisms.be"}, {"error": "W", "line": "530", "code": "        s = s.replace(\"\\*\", \"*\")\n", "colour": "purple", "author": "tom@organisms.be"}, {"error": "W", "line": "531", "code": "        s = s.replace(\"\\?\", \"?\")    \n", "colour": "purple", "author": "tom@organisms.be"}, {"error": "W", "line": "532", "code": "        s = s.replace(\"\\+\", \"+\")\n", "colour": "purple", "author": "tom@organisms.be"}, {"error": "W", "line": "533", "code": "        s = s.replace(\"\\^\", \"^\")\n", "colour": "purple", "author": "tom@organisms.be"}, {"error": "W", "line": "534", "code": "        s = s.replace(\"\\|\", \"&vdash;\")\n", "colour": "purple", "author": "tom@organisms.be"}, {"error": "none", "line": "535", "code": "        s = s.split(\"|\")\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "536", "code": "        s = [v.replace(\"&vdash;\", \"|\").strip() for v in s]\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "537", "code": "        for v in s:\n", "colour": "blue", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "W", "line": "538", "code": "            C._append(v)\n", "colour": "purple", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "539", "code": "        return C\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "C", "line": "540", "code": "        \n", "colour": "blue", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "C", "line": "541", "code": "    def _append(self, v):\n", "colour": "blue", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "542", "code": "        if v.startswith(\"!\") and self.exclude is None:\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "543", "code": "            self.exclude = Constraint()\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "544", "code": "        if v.startswith(\"!\"):\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "C", "line": "545", "code": "            self.exclude._append(v[1:]); return\n", "colour": "blue", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "546", "code": "        if \"!\" in v:\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "W", "line": "547", "code": "            v = v.replace(\"\\!\", \"!\")\n", "colour": "purple", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "548", "code": "        if v != v.upper():\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "549", "code": "            self.words.append(v.lower())\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "550", "code": "        elif v in TAGS:\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "551", "code": "            self.tags.append(v)\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "552", "code": "        elif v in CHUNKS:\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "553", "code": "            self.chunks.append(v)\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "554", "code": "        elif v in ROLES:\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "555", "code": "            self.roles.append(v)\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "556", "code": "        elif v in self.taxonomy or has_alpha(v):\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "557", "code": "            self.taxa.append(v.lower())\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "558", "code": "        else:\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "559", "code": "            # Uppercase words indicate tags or taxonomy terms.\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "560", "code": "            # However, this also matches \"*\" or \"?\" or \"0.25\".\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "C", "line": "561", "code": "            # Unless such punctuation is defined in the taxonomy, it is added to Range.words.\n", "colour": "blue", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "562", "code": "            self.words.append(v.lower())\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "C", "line": "563", "code": "    \n", "colour": "blue", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "R", "line": "564", "code": "    def match(self, word):\n", "colour": "green", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "565", "code": "        \"\"\" Return True if the given Word is part of the constraint:\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "566", "code": "            - the word (or lemma) occurs in Constraint.words, OR\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "567", "code": "            - the word (or lemma) occurs in Constraint.taxa taxonomy tree, AND\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "568", "code": "            - the word and/or chunk tags match those defined in the constraint.\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "C", "line": "569", "code": "            Individual terms in Constraint.words or the taxonomy can contain wildcards (*).\n", "colour": "blue", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "C", "line": "570", "code": "            Some part-of-speech-tags can also contain wildcards: NN*, VB*, JJ*, RB*\n", "colour": "blue", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "571", "code": "            If the given word contains spaces (e.g., proper noun),\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "572", "code": "            the entire chunk will also be compared.\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "C", "line": "573", "code": "            For example: Constraint(words=[\"Mac OS X*\"]) \n", "colour": "blue", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "C", "line": "574", "code": "            matches the word \"Mac\" if the word occurs in a Chunk(\"Mac OS X 10.5\").\n", "colour": "blue", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "575", "code": "        \"\"\"\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "576", "code": "        # If the constraint has a custom function it must return True.\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "577", "code": "        if self.custom is not None and self.custom(word) is False:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "578", "code": "            return False\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "579", "code": "        # If the constraint can only match the first word, Word.index must be 0.\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "580", "code": "        if self.first and word.index > 0:\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "581", "code": "            return False\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "C", "line": "582", "code": "        # If the constraint defines excluded options, Word can not match any of these.\n", "colour": "blue", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "583", "code": "        if self.exclude and self.exclude.match(word):\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "584", "code": "            return False\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "C", "line": "585", "code": "        # If the constraint defines allowed tags, Word.tag needs to match one of these.\n", "colour": "blue", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "586", "code": "        if self.tags:\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "587", "code": "            if find(lambda w: _match(word.tag, w), self.tags) is None:\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "588", "code": "                return False\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "C", "line": "589", "code": "        # If the constraint defines allowed chunks, Word.chunk.tag needs to match one of these.\n", "colour": "blue", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "590", "code": "        if self.chunks:\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "C", "line": "591", "code": "            ch = word.chunk and word.chunk.tag or None\n", "colour": "blue", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "592", "code": "            if find(lambda w: _match(ch, w), self.chunks) is None:\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "593", "code": "                return False\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "C", "line": "594", "code": "        # If the constraint defines allowed role, Word.chunk.tag needs to match one of these.\n", "colour": "blue", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "595", "code": "        if self.roles:\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "W", "line": "596", "code": "            R = word.chunk and [r2 for r1, r2 in word.chunk.relations] or []\n", "colour": "purple", "author": "tom@organisms.be"}, {"error": "none", "line": "597", "code": "            if find(lambda w: w in R, self.roles) is None:\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "598", "code": "                return False\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "599", "code": "        # If the constraint defines allowed words,\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "600", "code": "        # Word.string.lower() OR Word.lemma needs to match one of these.\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "C", "line": "601", "code": "        b = True # b==True when word in constraint (or Constraints.words=[]).\n", "colour": "blue", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "602", "code": "        if len(self.words) + len(self.taxa) > 0:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "603", "code": "            s1 = word.string.lower()\n", "colour": "blue", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "C", "line": "604", "code": "            s2 = word.lemma\n", "colour": "blue", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "C", "line": "605", "code": "            b = False\n", "colour": "blue", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "C", "line": "606", "code": "            for w in itertools.chain(self.words, self.taxa):\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "C", "line": "607", "code": "                # If the constraint has a word with spaces (e.g., a proper noun),\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "608", "code": "                # compare it to the entire chunk.\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "609", "code": "                try:\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "610", "code": "                    if \" \" in w and (s1 in w or s2 and s2 in w or \"*\" in w):\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "C", "line": "611", "code": "                        s1 = word.chunk and word.chunk.string.lower() or s1\n", "colour": "blue", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "C", "line": "612", "code": "                        s2 = word.chunk and \" \".join([x or \"\" for x in word.chunk.lemmata]) or s2\n", "colour": "blue", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "W", "line": "613", "code": "                except:\n", "colour": "purple", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "C", "line": "614", "code": "                    s1 = s1\n", "colour": "blue", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "C", "line": "615", "code": "                    s2 = None\n", "colour": "blue", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "C", "line": "616", "code": "                # Compare the word to the allowed words (which can contain wildcards).\n", "colour": "blue", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "617", "code": "                if _match(s1, w):\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "C", "line": "618", "code": "                    b=True; break\n", "colour": "blue", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "619", "code": "                # Compare the word lemma to the allowed words, e.g.,\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "620", "code": "                # if \"was\" is not in the constraint, perhaps \"be\" is, which is a good match.\n", "colour": "blue", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "621", "code": "                if s2 and _match(s2, w):\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "C", "line": "622", "code": "                    b=True; break\n", "colour": "blue", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "623", "code": "        # If the constraint defines allowed taxonomy terms,\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "C", "line": "624", "code": "        # and the given word did not match an allowed word, traverse the taxonomy.\n", "colour": "blue", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "625", "code": "        # The search goes up from the given word to its parents in the taxonomy.\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "C", "line": "626", "code": "        # This is faster than traversing all the children of terms in Constraint.taxa.\n", "colour": "blue", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "627", "code": "        # The drawback is that:\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "C", "line": "628", "code": "        # 1) Wildcards in the taxonomy are not detected (use classifiers instead),\n", "colour": "blue", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "629", "code": "        # 2) Classifier.children() has no effect, only Classifier.parent().\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "630", "code": "        if self.taxa and (not self.words or (self.words and not b)):\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "C", "line": "631", "code": "            for s in (\n", "colour": "blue", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "C", "line": "632", "code": "              word.string, # \"ants\"\n", "colour": "blue", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "C", "line": "633", "code": "              word.lemma,  # \"ant\"\n", "colour": "blue", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "C", "line": "634", "code": "              word.chunk and word.chunk.string or None, # \"army ants\"\n", "colour": "blue", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "C", "line": "635", "code": "              word.chunk and \" \".join([x or \"\" for x in word.chunk.lemmata]) or None): # \"army ant\"\n", "colour": "blue", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "636", "code": "                if s is not None:\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "637", "code": "                    if self.taxonomy.case_sensitive is False:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "638", "code": "                        s = s.lower()\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "C", "line": "639", "code": "                    # Compare ancestors of the word to each term in Constraint.taxa.\n", "colour": "blue", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "C", "line": "640", "code": "                    for p in self.taxonomy.parents(s, recursive=True):\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "W", "line": "641", "code": "                        if find(lambda s: p==s, self.taxa): # No wildcards.\n", "colour": "purple", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "642", "code": "                            return True\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "643", "code": "        return b\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "C", "line": "644", "code": "    \n", "colour": "blue", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "645", "code": "    def __repr__(self):\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "C", "line": "646", "code": "        s = []\n", "colour": "blue", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "C", "line": "647", "code": "        for k,v in (\n", "colour": "blue", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "C", "line": "648", "code": "          ( \"words\", self.words),\n", "colour": "blue", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "C", "line": "649", "code": "          (  \"tags\", self.tags),\n", "colour": "blue", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "C", "line": "650", "code": "          (\"chunks\", self.chunks),\n", "colour": "blue", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "C", "line": "651", "code": "          ( \"roles\", self.roles),\n", "colour": "blue", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "C", "line": "652", "code": "          (  \"taxa\", self.taxa)):\n", "colour": "blue", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "C", "line": "653", "code": "            if v: s.append(\"%s=%s\" % (k, repr(v)))\n", "colour": "blue", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "654", "code": "        return \"Constraint(%s)\" % \", \".join(s)\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "C", "line": "655", "code": "            \n", "colour": "blue", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "656", "code": "    @property\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "C", "line": "657", "code": "    def string(self):\n", "colour": "blue", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "C", "line": "658", "code": "        a = self.words + self.tags + self.chunks + self.roles + [w.upper() for w in self.taxa]\n", "colour": "blue", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "C", "line": "659", "code": "        a = (escape(s) for s in a)\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "C", "line": "660", "code": "        a = (s.replace(\"\\\\*\", \"*\") for s in a)\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "C", "line": "661", "code": "        a = [s.replace(\" \", \"_\") for s in a]\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "662", "code": "        if self.exclude:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "663", "code": "            a.extend(\"!\"+s for s in self.exclude.string[1:-1].split(\"|\"))\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "664", "code": "        return (self.optional and \"%s(%s)%s\" or \"%s[%s]%s\") % (\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "665", "code": "            self.first and \"^\" or \"\", \"|\".join(a), self.multiple and \"+\" or \"\")\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "666", "code": "\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "C", "line": "667", "code": "#--- PATTERN ---------------------------------------------------------------------------------------\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "668", "code": "\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "669", "code": "STRICT = \"strict\"\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "670", "code": "GREEDY = \"greedy\"\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "671", "code": "\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "C", "line": "672", "code": "class Pattern(object):\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "C", "line": "673", "code": "    \n", "colour": "blue", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "W", "line": "674", "code": "    def __init__(self, sequence=[], *args, **kwargs):\n", "colour": "purple", "author": "tom@organisms.be"}, {"error": "C", "line": "675", "code": "        \"\"\" A sequence of constraints that matches certain phrases in a sentence.\n", "colour": "blue", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "C", "line": "676", "code": "            The given list of Constraint objects can contain nested lists (groups).\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "677", "code": "        \"\"\"\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "678", "code": "        # Parse nested lists and tuples from the sequence into groups.\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "679", "code": "        # [DT [JJ NN]] => Match.group(1) will yield the JJ NN sequences.\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "680", "code": "        def _ungroup(sequence, groups=None):\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "C", "line": "681", "code": "            for v in sequence:\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "682", "code": "                if isinstance(v, (list, tuple)):\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "683", "code": "                    if groups is not None:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "684", "code": "                        groups.append(list(_ungroup(v, groups=None)))\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "685", "code": "                    for v in _ungroup(v, groups):\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "686", "code": "                        yield v\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "687", "code": "                else: \n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "688", "code": "                    yield v\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "689", "code": "        self.groups = []\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "690", "code": "        self.sequence = list(_ungroup(sequence, groups=self.groups))\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "691", "code": "        # Assign Constraint.index:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "692", "code": "        i = 0\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "693", "code": "        for constraint in self.sequence:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "694", "code": "            constraint.index = i; i+=1\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "695", "code": "        # There are two search modes: STRICT and GREEDY.\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "696", "code": "        # - In STRICT, \"rabbit\" matches only the string \"rabbit\".\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "697", "code": "        # - In GREEDY, \"rabbit|NN\" matches the string \"rabbit\" tagged \"NN\".\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "698", "code": "        # - In GREEDY, \"rabbit\" matches \"the big white rabbit\" (the entire chunk is a match).\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "C", "line": "699", "code": "        # - Pattern.greedy(chunk, constraint) determines (True/False) if a chunk is a match.\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "C", "line": "700", "code": "        self.strict = kwargs.get(\"strict\", STRICT in args and not GREEDY in args)\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "701", "code": "        self.greedy = kwargs.get(\"greedy\", lambda chunk, constraint: True)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "702", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "703", "code": "    def __iter__(self):\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "704", "code": "        return iter(self.sequence)\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "705", "code": "    def __len__(self):\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "706", "code": "        return len(self.sequence)\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "707", "code": "    def __getitem__(self, i):\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "708", "code": "        return self.sequence[i]\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "C", "line": "709", "code": "        \n", "colour": "blue", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "710", "code": "    @classmethod\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "C", "line": "711", "code": "    def fromstring(cls, s, *args, **kwargs):\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "712", "code": "        \"\"\" Returns a new Pattern from the given string.\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "713", "code": "            Constraints are separated by a space.\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "714", "code": "            If a constraint contains a space, it must be wrapped in [].\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "715", "code": "        \"\"\"\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "W", "line": "716", "code": "        s = s.replace(\"\\(\", \"&lparen;\")\n", "colour": "purple", "author": "tom@organisms.be"}, {"error": "W", "line": "717", "code": "        s = s.replace(\"\\)\", \"&rparen;\")\n", "colour": "purple", "author": "tom@organisms.be"}, {"error": "W", "line": "718", "code": "        s = s.replace(\"\\[\", \"&lbrack;\")\n", "colour": "purple", "author": "tom@organisms.be"}, {"error": "W", "line": "719", "code": "        s = s.replace(\"\\]\", \"&rbrack;\")\n", "colour": "purple", "author": "tom@organisms.be"}, {"error": "W", "line": "720", "code": "        s = s.replace(\"\\{\", \"&lcurly;\")\n", "colour": "purple", "author": "tom@organisms.be"}, {"error": "W", "line": "721", "code": "        s = s.replace(\"\\}\", \"&rcurly;\")\n", "colour": "purple", "author": "tom@organisms.be"}, {"error": "C", "line": "722", "code": "        p = []\n", "colour": "blue", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "723", "code": "        i = 0\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "C", "line": "724", "code": "        for m in re.finditer(r\"\\[.*?\\]|\\(.*?\\)\", s):\n", "colour": "blue", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "725", "code": "            # Spaces in a range encapsulated in square brackets are encoded.\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "726", "code": "            # \"[Windows Vista]\" is one range, don't split on space.\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "727", "code": "            p.append(s[i:m.start()])\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "C", "line": "728", "code": "            p.append(s[m.start():m.end()].replace(\" \", \"&space;\")); i=m.end()\n", "colour": "blue", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "729", "code": "        p.append(s[i:])\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "C", "line": "730", "code": "        s = \"\".join(p) \n", "colour": "blue", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "731", "code": "        s = s.replace(\"][\", \"] [\")\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "732", "code": "        s = s.replace(\")(\", \") (\")\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "W", "line": "733", "code": "        s = s.replace(\"\\|\", \"&vdash;\")\n", "colour": "purple", "author": "tom@organisms.be"}, {"error": "C", "line": "734", "code": "        s = re.sub(r\"\\s+\\|\\s+\", \"|\", s)  \n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "735", "code": "        s = re.sub(r\"\\s+\", \" \", s)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "736", "code": "        s = re.sub(r\"\\{\\s+\", \"{\", s)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "737", "code": "        s = re.sub(r\"\\s+\\}\", \"}\", s)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "738", "code": "        s = s.split(\" \")\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "C", "line": "739", "code": "        s = [v.replace(\"&space;\",\" \") for v in s]\n", "colour": "blue", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "C", "line": "740", "code": "        P = cls([], *args, **kwargs)\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "C", "line": "741", "code": "        G, O, i = [], [], 0\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "742", "code": "        for s in s:\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "C", "line": "743", "code": "            constraint = Constraint.fromstring(s.strip(\"{}\"), taxonomy=kwargs.get(\"taxonomy\", TAXONOMY))\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "744", "code": "            constraint.index = len(P.sequence)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "745", "code": "            P.sequence.append(constraint)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "746", "code": "            # Push a new group on the stack if string starts with \"{\".\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "747", "code": "            # Parse constraint from string, add it to all open groups.\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "748", "code": "            # Pop latest group from stack if string ends with \"}\".\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "749", "code": "            # Insert groups in opened-first order (i).\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "750", "code": "            while s.startswith(\"{\"):\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "751", "code": "                s = s[1:]\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "752", "code": "                G.append((i, [])); i+=1\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "753", "code": "                O.append([])\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "754", "code": "            for g in G:\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "755", "code": "                g[1].append(constraint)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "756", "code": "            while s.endswith(\"}\"):\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "757", "code": "                s = s[:-1]\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "758", "code": "                if G: O[G[-1][0]] = G[-1][1]; G.pop()\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "759", "code": "        P.groups = [g for g in O if g]\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "760", "code": "        return P\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "C", "line": "761", "code": "        \n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "762", "code": "    def scan(self, string):\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "763", "code": "        \"\"\" Returns True if search(Sentence(string)) may yield matches.\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "764", "code": "            If is often faster to scan prior to creating a Sentence and searching it.\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "765", "code": "        \"\"\"\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "766", "code": "        # In the following example, first scan the string for \"good\" and \"bad\":\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "767", "code": "        # p = Pattern.fromstring(\"good|bad NN\")\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "768", "code": "        # for s in open(\"parsed.txt\"):\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "769", "code": "        #     if p.scan(s):\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "770", "code": "        #         s = Sentence(s)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "771", "code": "        #         m = p.search(s)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "772", "code": "        #         if m:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "773", "code": "        #             print(m)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "774", "code": "        w = (constraint.words for constraint in self.sequence if not constraint.optional)\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "W", "line": "775", "code": "        w = itertools.chain(*w)\n", "colour": "purple", "author": "tom@organisms.be"}, {"error": "C", "line": "776", "code": "        w = [w.strip(WILDCARD) for w in w if WILDCARD not in w[1:-1]]\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "777", "code": "        if w and not any(w in string.lower() for w in w):\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "778", "code": "            return False\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "779", "code": "        return True\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "780", "code": "\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "781", "code": "    def search(self, sentence):\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "782", "code": "        \"\"\" Returns a list of all matches found in the given sentence.\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "783", "code": "        \"\"\"\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "784", "code": "        if sentence.__class__.__name__ == \"Sentence\":\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "785", "code": "            pass\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "786", "code": "        elif isinstance(sentence, list) or sentence.__class__.__name__ == \"Text\":\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "W", "line": "787", "code": "            a=[]; [a.extend(self.search(s)) for s in sentence]; return a\n", "colour": "purple", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "788", "code": "        elif isinstance(sentence, basestring):\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "789", "code": "            sentence = Sentence(sentence)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "790", "code": "        elif isinstance(sentence, Match) and len(sentence) > 0:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "791", "code": "            sentence = sentence[0].sentence.slice(sentence[0].index, sentence[-1].index + 1)\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "C", "line": "792", "code": "        a = []\n", "colour": "blue", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "C", "line": "793", "code": "        v = self._variations()\n", "colour": "blue", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "C", "line": "794", "code": "        u = {}\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "C", "line": "795", "code": "        m = self.match(sentence, _v=v)\n", "colour": "blue", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "796", "code": "        while m:\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "797", "code": "            a.append(m)\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "C", "line": "798", "code": "            m = self.match(sentence, start=m.words[-1].index+1, _v=v, _u=u)\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "799", "code": "        return a\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "C", "line": "800", "code": "    \n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "C", "line": "801", "code": "    def match(self, sentence, start=0, _v=None, _u=None):\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "802", "code": "        \"\"\" Returns the first match found in the given sentence, or None.\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "803", "code": "        \"\"\"\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "804", "code": "        if sentence.__class__.__name__ == \"Sentence\":\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "805", "code": "            pass\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "806", "code": "        elif isinstance(sentence, list) or sentence.__class__.__name__ == \"Text\":\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "C", "line": "807", "code": "            return find(lambda m,s: m is not None, ((self.match(s, start, _v), s) for s in sentence))[0]\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "808", "code": "        elif isinstance(sentence, basestring):\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "809", "code": "            sentence = Sentence(sentence)\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "810", "code": "        elif isinstance(sentence, Match) and len(sentence) > 0:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "811", "code": "            sentence = sentence[0].sentence.slice(sentence[0].index, sentence[-1].index + 1)\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "C", "line": "812", "code": "        # Variations (_v) further down the list may match words more to the front.\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "C", "line": "813", "code": "        # We need to check all of them. Unmatched variations are blacklisted (_u).\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "C", "line": "814", "code": "        # Pattern.search() calls Pattern.match() with a persistent blacklist (1.5x faster).\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "C", "line": "815", "code": "        a = []\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "C", "line": "816", "code": "        for sequence in (_v is not None and _v or self._variations()):\n", "colour": "blue", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "817", "code": "            if _u is not None and id(sequence) in _u:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "818", "code": "                continue\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "819", "code": "            m = self._match(sequence, sentence, start)\n", "colour": "blue", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "820", "code": "            if m is not None:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "821", "code": "                a.append((m.words[0].index, len(m.words), m))\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "822", "code": "            if m is not None and m.words[0].index == start:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "823", "code": "                return m\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "824", "code": "            if m is None and _u is not None:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "825", "code": "                _u[id(sequence)] = False\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "826", "code": "        # Return the leftmost-longest.\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "827", "code": "        if len(a) > 0:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "828", "code": "            return sorted(a)[0][-1]\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "829", "code": "\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "C", "line": "830", "code": "    def _variations(self):\n", "colour": "blue", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "C", "line": "831", "code": "        v = variations(self.sequence, optional=lambda constraint: constraint.optional)\n", "colour": "blue", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "C", "line": "832", "code": "        v = sorted(v, key=len, reverse=True)\n", "colour": "blue", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "833", "code": "        return v\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "C", "line": "834", "code": "                \n", "colour": "blue", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "R", "line": "835", "code": "    def _match(self, sequence, sentence, start=0, i=0, w0=None, map=None, d=0):\n", "colour": "green", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "836", "code": "        # Backtracking tree search.\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "C", "line": "837", "code": "        # Finds the first match in the sentence of the given sequence of constraints.\n", "colour": "blue", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "838", "code": "        # start : the current word index.\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "839", "code": "        #     i : the current constraint index.\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "840", "code": "        #    w0 : the first word that matches a constraint.\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "841", "code": "        #   map : a dictionary of (Word index, Constraint) items.\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "842", "code": "        #     d : recursion depth.\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "C", "line": "843", "code": "        \n", "colour": "blue", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "C", "line": "844", "code": "        # XXX - We can probably rewrite all of this using (faster) regular expressions.\n", "colour": "blue", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "C", "line": "845", "code": "        \n", "colour": "blue", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "846", "code": "        if map is None:\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "847", "code": "            map = {}\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "C", "line": "848", "code": "        \n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "C", "line": "849", "code": "        n = len(sequence)\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "C", "line": "850", "code": "        \n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "851", "code": "        # --- MATCH ----------\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "852", "code": "        if i == n:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "853", "code": "            if w0 is not None:\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "C", "line": "854", "code": "                w1 = sentence.words[start-1]\n", "colour": "blue", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "C", "line": "855", "code": "                # Greedy algorithm: \n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "856", "code": "                # - \"cat\" matches \"the big cat\" if \"cat\" is head of the chunk.\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "857", "code": "                # - \"Tom\" matches \"Tom the cat\" if \"Tom\" is head of the chunk.\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "858", "code": "                # - This behavior is ignored with POS-tag constraints:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "859", "code": "                #   \"Tom|NN\" can only match single words, not chunks.\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "860", "code": "                # - This is also True for negated POS-tags (e.g., !NN).\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "861", "code": "                w01 = [w0, w1]\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "862", "code": "                for j in (0, -1):\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "863", "code": "                    constraint, w = sequence[j], w01[j]\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "864", "code": "                    if self.strict is False and w.chunk is not None:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "865", "code": "                        if not constraint.tags:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "866", "code": "                            if not constraint.exclude or not constraint.exclude.tags:\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "867", "code": "                                if constraint.match(w.chunk.head):\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "868", "code": "                                    w01[j] = w.chunk.words[j]\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "869", "code": "                                if constraint.exclude and constraint.exclude.match(w.chunk.head):\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "870", "code": "                                    return None\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "871", "code": "                                if self.greedy(w.chunk, constraint) is False: # User-defined.\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "872", "code": "                                    return None\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "873", "code": "                w0, w1 = w01\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "874", "code": "                # Update map for optional chunk words (see below).\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "875", "code": "                words = sentence.words[w0.index:w1.index+1]\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "C", "line": "876", "code": "                for w in words:\n", "colour": "blue", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "877", "code": "                    if w.index not in map and w.chunk:\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "C", "line": "878", "code": "                        wx = find(lambda w: w.index in map, reversed(w.chunk.words))\n", "colour": "blue", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "C", "line": "879", "code": "                        if wx: \n", "colour": "blue", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "880", "code": "                            map[w.index] = map[wx.index]\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "C", "line": "881", "code": "                # Return matched word range, we'll need the map to build Match.constituents().\n", "colour": "blue", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "882", "code": "                return Match(self, words, map)\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "883", "code": "            return None\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "884", "code": "\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "885", "code": "        # --- RECURSION --------\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "886", "code": "        constraint = sequence[i]\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "887", "code": "        for w in sentence.words[start:]:\n", "colour": "blue", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "888", "code": "            #print(\" \"*d, \"match?\", w, sequence[i].string) # DEBUG\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "889", "code": "            if i < n and constraint.match(w):\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "890", "code": "                #print(\" \"*d, \"match!\", w, sequence[i].string) # DEBUG\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "891", "code": "                map[w.index] = constraint\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "892", "code": "                if constraint.multiple:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "893", "code": "                    # Next word vs. same constraint if Constraint.multiple=True.\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "C", "line": "894", "code": "                    m = self._match(sequence, sentence, w.index+1, i, w0 or w, map, d+1)\n", "colour": "blue", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "C", "line": "895", "code": "                    if m: \n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "896", "code": "                        return m\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "897", "code": "                # Next word vs. next constraint.\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "C", "line": "898", "code": "                m = self._match(sequence, sentence, w.index+1, i+1, w0 or w, map, d+1)\n", "colour": "blue", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "C", "line": "899", "code": "                if m: \n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "900", "code": "                    return m\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "901", "code": "            # Chunk words other than the head are optional:\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "C", "line": "902", "code": "            # - Pattern.fromstring(\"cat\") matches \"cat\" but also \"the big cat\" (overspecification).\n", "colour": "blue", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "C", "line": "903", "code": "            # - Pattern.fromstring(\"cat|NN\") does not match \"the big cat\" (explicit POS-tag).\n", "colour": "blue", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "904", "code": "            if w0 and not constraint.tags:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "905", "code": "                if not constraint.exclude and not self.strict and w.chunk and w.chunk.head != w:\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "906", "code": "                    continue\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "907", "code": "                break\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "908", "code": "            # Part-of-speech tags match one single word.\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "909", "code": "            if w0 and constraint.tags:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "910", "code": "                break\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "911", "code": "            if w0 and constraint.exclude and constraint.exclude.tags:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "912", "code": "                break\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "913", "code": "                \n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "914", "code": "    @property\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "915", "code": "    def string(self):\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "916", "code": "        return \" \".join(constraint.string for constraint in self.sequence)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "917", "code": "\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "C", "line": "918", "code": "_cache = {}\n", "colour": "blue", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "919", "code": "_CACHE_SIZE = 100 # Number of dynamic Pattern objects to keep in cache.\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "W", "line": "920", "code": "def compile(pattern, *args, **kwargs):\n", "colour": "purple", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "921", "code": "    \"\"\" Returns a Pattern from the given string or regular expression.\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "922", "code": "        Recently compiled patterns are kept in cache\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "923", "code": "        (if they do not use taxonomies, which are mutable dicts).\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "924", "code": "    \"\"\"\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "925", "code": "    id, p = repr(pattern) + repr(args), pattern\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "926", "code": "    if id in _cache and not kwargs:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "927", "code": "        return _cache[id]\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "928", "code": "    if isinstance(pattern, basestring):\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "C", "line": "929", "code": "        p = Pattern.fromstring(pattern, *args, **kwargs)\n", "colour": "blue", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "930", "code": "    if isinstance(pattern, regexp):\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "C", "line": "931", "code": "        p = Pattern([Constraint(words=[pattern], taxonomy=kwargs.get(\"taxonomy\", TAXONOMY))], *args, **kwargs)\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "932", "code": "    if len(_cache) > _CACHE_SIZE:\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "933", "code": "        _cache.clear()\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "934", "code": "    if isinstance(p, Pattern) and not kwargs:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "935", "code": "        _cache[id] = p\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "936", "code": "    if isinstance(p, Pattern):\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "937", "code": "        return p\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "938", "code": "    else:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "939", "code": "        raise TypeError(\"can't compile '%s' object\" % pattern.__class__.__name__)\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "940", "code": "\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "941", "code": "def scan(pattern, string, *args, **kwargs):\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "942", "code": "    \"\"\" Returns True if pattern.search(Sentence(string)) may yield matches.\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "943", "code": "        If is often faster to scan prior to creating a Sentence and searching it.\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "944", "code": "    \"\"\"\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "945", "code": "    return compile(pattern, *args, **kwargs).scan(string) \n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "946", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "947", "code": "def match(pattern, sentence, *args, **kwargs):\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "948", "code": "    \"\"\" Returns the first match found in the given sentence, or None.\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "949", "code": "    \"\"\"\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "950", "code": "    return compile(pattern, *args, **kwargs).match(sentence) \n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "951", "code": "\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "952", "code": "def search(pattern, sentence, *args, **kwargs):\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "953", "code": "    \"\"\" Returns a list of all matches found in the given sentence.\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "954", "code": "    \"\"\"\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "955", "code": "    return compile(pattern, *args, **kwargs).search(sentence)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "956", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "957", "code": "def escape(string):\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "W", "line": "958", "code": "    \"\"\" Returns the string with control characters for Pattern syntax escaped.\n", "colour": "purple", "author": "tom@organisms.be"}, {"error": "none", "line": "959", "code": "        For example: \"hello!\" => \"hello\\!\".\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "960", "code": "    \"\"\"\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "961", "code": "    for ch in (\"{\",\"}\",\"[\",\"]\",\"(\",\")\",\"_\",\"|\",\"!\",\"*\",\"+\",\"^\"):\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "962", "code": "        string = string.replace(ch, \"\\\\\"+ch)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "963", "code": "    return string\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "964", "code": "\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "C", "line": "965", "code": "#--- PATTERN MATCH ---------------------------------------------------------------------------------\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "966", "code": "\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "C", "line": "967", "code": "class Match(object):\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "C", "line": "968", "code": "    \n", "colour": "blue", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "W", "line": "969", "code": "    def __init__(self, pattern, words=[], map={}):\n", "colour": "purple", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "970", "code": "        \"\"\" Search result returned from Pattern.match(sentence),\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "971", "code": "            containing a sequence of Word objects.\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "972", "code": "        \"\"\"\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "973", "code": "        self.pattern = pattern\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "974", "code": "        self.words = words\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "975", "code": "        self._map1 = dict() # Word index to Constraint.\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "976", "code": "        self._map2 = dict() # Constraint index to list of Word indices.\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "C", "line": "977", "code": "        for w in self.words:\n", "colour": "blue", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "978", "code": "            self._map1[w.index] = map[w.index]\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "C", "line": "979", "code": "        for k,v in self._map1.items():\n", "colour": "blue", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "C", "line": "980", "code": "            self._map2.setdefault(self.pattern.sequence.index(v),[]).append(k)\n", "colour": "blue", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "C", "line": "981", "code": "        for k,v in self._map2.items():\n", "colour": "blue", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "982", "code": "            v.sort()\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "983", "code": "\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "984", "code": "    def __len__(self):\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "985", "code": "        return len(self.words)\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "986", "code": "    def __iter__(self):\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "987", "code": "        return iter(self.words)\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "988", "code": "    def __getitem__(self, i):\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "989", "code": "        return self.words.__getitem__(i)\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "990", "code": "\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "991", "code": "    @property\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "C", "line": "992", "code": "    def start(self):\n", "colour": "blue", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "993", "code": "        return self.words and self.words[0].index or None\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "994", "code": "    @property\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "C", "line": "995", "code": "    def stop(self):\n", "colour": "blue", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "996", "code": "        return self.words and self.words[-1].index+1 or None\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "997", "code": "\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "998", "code": "    def constraint(self, word):\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "999", "code": "        \"\"\" Returns the constraint that matches the given Word, or None.\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "1000", "code": "        \"\"\"\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "1001", "code": "        if word.index in self._map1:\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "1002", "code": "            return self._map1[word.index]\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "C", "line": "1003", "code": "    \n", "colour": "blue", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "1004", "code": "    def constraints(self, chunk):\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "1005", "code": "        \"\"\" Returns a list of constraints that match the given Chunk.\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "1006", "code": "        \"\"\"\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "C", "line": "1007", "code": "        a = [self._map1[w.index] for w in chunk.words if w.index in self._map1]\n", "colour": "blue", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "W", "line": "1008", "code": "        b = []; [b.append(constraint) for constraint in a if constraint not in b]\n", "colour": "purple", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "1009", "code": "        return b\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "1010", "code": "\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "1011", "code": "    def constituents(self, constraint=None):\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "C", "line": "1012", "code": "        \"\"\" Returns a list of Word and Chunk objects, \n", "colour": "blue", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "1013", "code": "            where words have been grouped into their chunks whenever possible.\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "C", "line": "1014", "code": "            Optionally, returns only chunks/words that match given constraint(s), or constraint index.\n", "colour": "blue", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "1015", "code": "        \"\"\"\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "1016", "code": "        # Select only words that match the given constraint.\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "C", "line": "1017", "code": "        # Note: this will only work with constraints from Match.pattern.sequence.\n", "colour": "blue", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "C", "line": "1018", "code": "        W = self.words\n", "colour": "blue", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "C", "line": "1019", "code": "        n = len(self.pattern.sequence)\n", "colour": "blue", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "1020", "code": "        if isinstance(constraint, (int, Constraint)):\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "1021", "code": "            if isinstance(constraint, int):\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "C", "line": "1022", "code": "                i = constraint \n", "colour": "blue", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "C", "line": "1023", "code": "                i = i<0 and i%n or i\n", "colour": "blue", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "1024", "code": "            else:\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "1025", "code": "                i = self.pattern.sequence.index(constraint)\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "C", "line": "1026", "code": "            W = self._map2.get(i,[])\n", "colour": "blue", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "C", "line": "1027", "code": "            W = [self.words[i-self.words[0].index] for i in W]            \n", "colour": "blue", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "1028", "code": "        if isinstance(constraint, (list, tuple)):\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "W", "line": "1029", "code": "            W = []; [W.extend(self._map2.get(j<0 and j%n or j,[])) for j in constraint]\n", "colour": "purple", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "C", "line": "1030", "code": "            W = [self.words[i-self.words[0].index] for i in W]\n", "colour": "blue", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "C", "line": "1031", "code": "            W = unique(W)\n", "colour": "blue", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "C", "line": "1032", "code": "        a = []\n", "colour": "blue", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "1033", "code": "        i = 0\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "1034", "code": "        while i < len(W):\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "C", "line": "1035", "code": "            w = W[i]\n", "colour": "blue", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "1036", "code": "            if w.chunk and W[i:i+len(w.chunk)] == w.chunk.words:\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "1037", "code": "                i += len(w.chunk) - 1\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "1038", "code": "                a.append(w.chunk)\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "1039", "code": "            else:\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "1040", "code": "                a.append(w)\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "1041", "code": "            i += 1\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "1042", "code": "        return a\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "C", "line": "1043", "code": "        \n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "1044", "code": "    def group(self, index, chunked=False):\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1045", "code": "        \"\"\" Returns a list of Word objects that match the given group.\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "1046", "code": "            With chunked=True, returns a list of Word + Chunk objects - see Match.constituents().\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "1047", "code": "            A group consists of consecutive constraints wrapped in { }, e.g.,\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "1048", "code": "            search(\"{JJ JJ} NN\", Sentence(parse(\"big black cat\"))).group(1) => big black.\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "1049", "code": "        \"\"\"\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1050", "code": "        if index < 0 or index > len(self.pattern.groups):\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1051", "code": "            raise IndexError(\"no such group\")\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1052", "code": "        if index > 0 and index <= len(self.pattern.groups):\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "1053", "code": "            g = self.pattern.groups[index-1]\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "1054", "code": "        if index == 0:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "1055", "code": "            g = self.pattern.sequence\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "1056", "code": "        if chunked is True:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "1057", "code": "            return Group(self, self.constituents(constraint=[self.pattern.sequence.index(x) for x in g]))\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "1058", "code": "        return Group(self, [w for w in self.words if self.constraint(w) in g])\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "1059", "code": "    \n", "colour": "blue", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "1060", "code": "    @property\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "1061", "code": "    def string(self):\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "1062", "code": "        return \" \".join(w.string for w in self.words)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "1063", "code": "    \n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "1064", "code": "    def __repr__(self):\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "1065", "code": "        return \"Match(words=%s)\" % repr(self.words)\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "1066", "code": "\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "C", "line": "1067", "code": "#--- PATTERN MATCH GROUP ---------------------------------------------------------------------------\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "1068", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "1069", "code": "class Group(list):\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "1070", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "W", "line": "1071", "code": "    def __init__(self, match, words):\n", "colour": "purple", "author": "tom@organisms.be"}, {"error": "none", "line": "1072", "code": "        list.__init__(self, words)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1073", "code": "        self.match = match\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1074", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1075", "code": "    @property\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "1076", "code": "    def words(self):\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "1077", "code": "        return list(self)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1078", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1079", "code": "    @property\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "1080", "code": "    def start(self):\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "1081", "code": "        return self and self[0].index or None\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1082", "code": "    @property\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "1083", "code": "    def stop(self):\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "1084", "code": "        return self and self[-1].index+1 or None\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "1085", "code": "    \n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "1086", "code": "    @property\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "1087", "code": "    def string(self):\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "1088", "code": "        return \" \".join(w.string for w in self)\n", "colour": "black", "author": "tom@organisms.be"}]]}