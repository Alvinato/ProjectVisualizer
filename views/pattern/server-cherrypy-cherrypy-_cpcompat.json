{"path": "/home/asumal/git/cs410/pattern/pattern/server/cherrypy/cherrypy/_cpcompat.py", "lines": [[{"index": "1", "colour": "orange", "code": "\"\"\"Compatibility code for using CherryPy with various versions of Python.\n", "error": "none", "author": "tom@organisms.be"}, {"index": "2", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "3", "colour": "orange", "code": "CherryPy 3.2 is compatible with Python versions 2.3+. This module provides a\n", "error": "none", "author": "tom@organisms.be"}, {"index": "4", "colour": "orange", "code": "useful abstraction over the differences between Python versions, sometimes by\n", "error": "none", "author": "tom@organisms.be"}, {"index": "5", "colour": "orange", "code": "preferring a newer idiom, sometimes an older one, and sometimes a custom one.\n", "error": "none", "author": "tom@organisms.be"}, {"index": "6", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "7", "colour": "orange", "code": "In particular, Python 2 uses str and '' for byte strings, while Python 3\n", "error": "none", "author": "tom@organisms.be"}, {"index": "8", "colour": "orange", "code": "uses str and '' for unicode strings. We will call each of these the 'native\n", "error": "none", "author": "tom@organisms.be"}, {"index": "9", "colour": "orange", "code": "string' type for each version. Because of this major difference, this module\n", "error": "none", "author": "tom@organisms.be"}, {"index": "10", "colour": "orange", "code": "provides new 'bytestr', 'unicodestr', and 'nativestr' attributes, as well as\n", "error": "none", "author": "tom@organisms.be"}, {"index": "11", "colour": "orange", "code": "two functions: 'ntob', which translates native strings (of type 'str') into\n", "error": "none", "author": "tom@organisms.be"}, {"index": "12", "colour": "orange", "code": "byte strings regardless of Python version, and 'ntou', which translates native\n", "error": "none", "author": "tom@organisms.be"}, {"index": "13", "colour": "orange", "code": "strings to unicode strings. This also provides a 'BytesIO' name for dealing\n", "error": "none", "author": "tom@organisms.be"}, {"index": "14", "colour": "orange", "code": "specifically with bytes, and a 'StringIO' name for dealing with native strings.\n", "error": "none", "author": "tom@organisms.be"}, {"index": "15", "colour": "orange", "code": "It also provides a 'base64_decode' function with native strings as input and\n", "error": "none", "author": "tom@organisms.be"}, {"index": "16", "colour": "orange", "code": "output.\n", "error": "none", "author": "tom@organisms.be"}, {"index": "17", "colour": "orange", "code": "\"\"\"\n", "error": "none", "author": "tom@organisms.be"}, {"index": "18", "colour": "orange", "code": "import os\n", "error": "none", "author": "tom@organisms.be"}, {"index": "19", "colour": "orange", "code": "import re\n", "error": "none", "author": "tom@organisms.be"}, {"index": "20", "colour": "orange", "code": "import sys\n", "error": "none", "author": "tom@organisms.be"}, {"index": "21", "colour": "orange", "code": "import threading\n", "error": "none", "author": "tom@organisms.be"}, {"index": "22", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "23", "colour": "orange", "code": "if sys.version_info >= (3, 0):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "24", "colour": "orange", "code": "    py3k = True\n", "error": "none", "author": "tom@organisms.be"}, {"index": "25", "colour": "orange", "code": "    bytestr = bytes\n", "error": "none", "author": "tom@organisms.be"}, {"index": "26", "colour": "orange", "code": "    unicodestr = str\n", "error": "none", "author": "tom@organisms.be"}, {"index": "27", "colour": "orange", "code": "    nativestr = unicodestr\n", "error": "none", "author": "tom@organisms.be"}, {"index": "28", "colour": "green", "code": "    basestring = (bytes, str)\n", "error": "W", "author": "tom@organisms.be"}, {"index": "29", "colour": "orange", "code": "    def ntob(n, encoding='ISO-8859-1'):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "30", "colour": "orange", "code": "        \"\"\"Return the given native string as a byte string in the given encoding.\"\"\"\n", "error": "none", "author": "tom@organisms.be"}, {"index": "31", "colour": "orange", "code": "        assert_native(n)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "32", "colour": "orange", "code": "        # In Python 3, the native string type is unicode\n", "error": "none", "author": "tom@organisms.be"}, {"index": "33", "colour": "orange", "code": "        return n.encode(encoding)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "34", "colour": "green", "code": "    def ntou(n, encoding='ISO-8859-1'):\n", "error": "W", "author": "tom@organisms.be"}, {"index": "35", "colour": "orange", "code": "        \"\"\"Return the given native string as a unicode string with the given encoding.\"\"\"\n", "error": "none", "author": "tom@organisms.be"}, {"index": "36", "colour": "orange", "code": "        assert_native(n)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "37", "colour": "orange", "code": "        # In Python 3, the native string type is unicode\n", "error": "none", "author": "tom@organisms.be"}, {"index": "38", "colour": "orange", "code": "        return n\n", "error": "none", "author": "tom@organisms.be"}, {"index": "39", "colour": "orange", "code": "    def tonative(n, encoding='ISO-8859-1'):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "40", "colour": "orange", "code": "        \"\"\"Return the given string as a native string in the given encoding.\"\"\"\n", "error": "none", "author": "tom@organisms.be"}, {"index": "41", "colour": "orange", "code": "        # In Python 3, the native string type is unicode\n", "error": "none", "author": "tom@organisms.be"}, {"index": "42", "colour": "orange", "code": "        if isinstance(n, bytes):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "43", "colour": "orange", "code": "            return n.decode(encoding)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "44", "colour": "orange", "code": "        return n\n", "error": "none", "author": "tom@organisms.be"}, {"index": "45", "colour": "orange", "code": "    # type(\"\")\n", "error": "none", "author": "tom@organisms.be"}, {"index": "46", "colour": "orange", "code": "    from io import StringIO\n", "error": "none", "author": "tom@organisms.be"}, {"index": "47", "colour": "orange", "code": "    # bytes:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "48", "colour": "green", "code": "    from io import BytesIO as BytesIO\n", "error": "W", "author": "tom@organisms.be"}, {"index": "49", "colour": "orange", "code": "else:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "50", "colour": "orange", "code": "    # Python 2\n", "error": "none", "author": "tom@organisms.be"}, {"index": "51", "colour": "orange", "code": "    py3k = False\n", "error": "none", "author": "tom@organisms.be"}, {"index": "52", "colour": "orange", "code": "    bytestr = str\n", "error": "none", "author": "tom@organisms.be"}, {"index": "53", "colour": "orange", "code": "    unicodestr = unicode\n", "error": "none", "author": "tom@organisms.be"}, {"index": "54", "colour": "orange", "code": "    nativestr = bytestr\n", "error": "none", "author": "tom@organisms.be"}, {"index": "55", "colour": "orange", "code": "    basestring = basestring\n", "error": "none", "author": "tom@organisms.be"}, {"index": "56", "colour": "green", "code": "    def ntob(n, encoding='ISO-8859-1'):\n", "error": "W", "author": "tom@organisms.be"}, {"index": "57", "colour": "orange", "code": "        \"\"\"Return the given native string as a byte string in the given encoding.\"\"\"\n", "error": "none", "author": "tom@organisms.be"}, {"index": "58", "colour": "orange", "code": "        assert_native(n)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "59", "colour": "orange", "code": "        # In Python 2, the native string type is bytes. Assume it's already\n", "error": "none", "author": "tom@organisms.be"}, {"index": "60", "colour": "orange", "code": "        # in the given encoding, which for ISO-8859-1 is almost always what\n", "error": "none", "author": "tom@organisms.be"}, {"index": "61", "colour": "orange", "code": "        # was intended.\n", "error": "none", "author": "tom@organisms.be"}, {"index": "62", "colour": "orange", "code": "        return n\n", "error": "none", "author": "tom@organisms.be"}, {"index": "63", "colour": "orange", "code": "    def ntou(n, encoding='ISO-8859-1'):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "64", "colour": "orange", "code": "        \"\"\"Return the given native string as a unicode string with the given encoding.\"\"\"\n", "error": "none", "author": "tom@organisms.be"}, {"index": "65", "colour": "orange", "code": "        assert_native(n)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "66", "colour": "orange", "code": "        # In Python 2, the native string type is bytes.\n", "error": "none", "author": "tom@organisms.be"}, {"index": "67", "colour": "orange", "code": "        # First, check for the special encoding 'escape'. The test suite uses this\n", "error": "none", "author": "tom@organisms.be"}, {"index": "68", "colour": "orange", "code": "        # to signal that it wants to pass a string with embedded \\uXXXX escapes,\n", "error": "none", "author": "tom@organisms.be"}, {"index": "69", "colour": "orange", "code": "        # but without having to prefix it with u'' for Python 2, but no prefix\n", "error": "none", "author": "tom@organisms.be"}, {"index": "70", "colour": "orange", "code": "        # for Python 3.\n", "error": "none", "author": "tom@organisms.be"}, {"index": "71", "colour": "orange", "code": "        if encoding == 'escape':\n", "error": "none", "author": "tom@organisms.be"}, {"index": "72", "colour": "orange", "code": "            return unicode(\n", "error": "none", "author": "tom@organisms.be"}, {"index": "73", "colour": "orange", "code": "                re.sub(r'\\\\u([0-9a-zA-Z]{4})',\n", "error": "none", "author": "tom@organisms.be"}, {"index": "74", "colour": "orange", "code": "                       lambda m: unichr(int(m.group(1), 16)),\n", "error": "none", "author": "tom@organisms.be"}, {"index": "75", "colour": "orange", "code": "                       n.decode('ISO-8859-1')))\n", "error": "none", "author": "tom@organisms.be"}, {"index": "76", "colour": "orange", "code": "        # Assume it's already in the given encoding, which for ISO-8859-1 is almost\n", "error": "none", "author": "tom@organisms.be"}, {"index": "77", "colour": "orange", "code": "        # always what was intended.\n", "error": "none", "author": "tom@organisms.be"}, {"index": "78", "colour": "orange", "code": "        return n.decode(encoding)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "79", "colour": "orange", "code": "    def tonative(n, encoding='ISO-8859-1'):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "80", "colour": "orange", "code": "        \"\"\"Return the given string as a native string in the given encoding.\"\"\"\n", "error": "none", "author": "tom@organisms.be"}, {"index": "81", "colour": "orange", "code": "        # In Python 2, the native string type is bytes.\n", "error": "none", "author": "tom@organisms.be"}, {"index": "82", "colour": "orange", "code": "        if isinstance(n, unicode):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "83", "colour": "orange", "code": "            return n.encode(encoding)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "84", "colour": "orange", "code": "        return n\n", "error": "none", "author": "tom@organisms.be"}, {"index": "85", "colour": "orange", "code": "    try:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "86", "colour": "orange", "code": "        # type(\"\")\n", "error": "none", "author": "tom@organisms.be"}, {"index": "87", "colour": "orange", "code": "        from cStringIO import StringIO\n", "error": "none", "author": "tom@organisms.be"}, {"index": "88", "colour": "orange", "code": "    except ImportError:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "89", "colour": "orange", "code": "        # type(\"\")\n", "error": "none", "author": "tom@organisms.be"}, {"index": "90", "colour": "orange", "code": "        from StringIO import StringIO\n", "error": "none", "author": "tom@organisms.be"}, {"index": "91", "colour": "orange", "code": "    # bytes:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "92", "colour": "orange", "code": "    BytesIO = StringIO\n", "error": "none", "author": "tom@organisms.be"}, {"index": "93", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "94", "colour": "orange", "code": "def assert_native(n):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "95", "colour": "orange", "code": "    if not isinstance(n, nativestr):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "96", "colour": "orange", "code": "        raise TypeError(\"n must be a native str (got %s)\" % type(n).__name__)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "97", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "98", "colour": "orange", "code": "try:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "99", "colour": "green", "code": "    set = set\n", "error": "W", "author": "tom@organisms.be"}, {"index": "100", "colour": "orange", "code": "except NameError:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "101", "colour": "orange", "code": "    from sets import Set as set\n", "error": "none", "author": "tom@organisms.be"}, {"index": "102", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "103", "colour": "orange", "code": "try:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "104", "colour": "orange", "code": "    # Python 3.1+\n", "error": "none", "author": "tom@organisms.be"}, {"index": "105", "colour": "red", "code": "    from base64 import decodebytes as _base64_decodebytes\n", "error": "E", "author": "tom@organisms.be"}, {"index": "106", "colour": "orange", "code": "except ImportError:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "107", "colour": "orange", "code": "    # Python 3.0-\n", "error": "none", "author": "tom@organisms.be"}, {"index": "108", "colour": "orange", "code": "    # since CherryPy claims compability with Python 2.3, we must use\n", "error": "none", "author": "tom@organisms.be"}, {"index": "109", "colour": "orange", "code": "    # the legacy API of base64\n", "error": "none", "author": "tom@organisms.be"}, {"index": "110", "colour": "orange", "code": "    from base64 import decodestring as _base64_decodebytes\n", "error": "none", "author": "tom@organisms.be"}, {"index": "111", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "112", "colour": "orange", "code": "def base64_decode(n, encoding='ISO-8859-1'):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "113", "colour": "orange", "code": "    \"\"\"Return the native string base64-decoded (as a native string).\"\"\"\n", "error": "none", "author": "tom@organisms.be"}, {"index": "114", "colour": "orange", "code": "    if isinstance(n, unicodestr):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "115", "colour": "orange", "code": "        b = n.encode(encoding)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "116", "colour": "orange", "code": "    else:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "117", "colour": "orange", "code": "        b = n\n", "error": "none", "author": "tom@organisms.be"}, {"index": "118", "colour": "orange", "code": "    b = _base64_decodebytes(b)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "119", "colour": "orange", "code": "    if nativestr is unicodestr:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "120", "colour": "orange", "code": "        return b.decode(encoding)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "121", "colour": "orange", "code": "    else:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "122", "colour": "orange", "code": "        return b\n", "error": "none", "author": "tom@organisms.be"}, {"index": "123", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "124", "colour": "orange", "code": "try:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "125", "colour": "orange", "code": "    # Python 2.5+\n", "error": "none", "author": "tom@organisms.be"}, {"index": "126", "colour": "green", "code": "    from hashlib import md5\n", "error": "W", "author": "tom@organisms.be"}, {"index": "127", "colour": "orange", "code": "except ImportError:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "128", "colour": "orange", "code": "    from md5 import new as md5\n", "error": "none", "author": "tom@organisms.be"}, {"index": "129", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "130", "colour": "orange", "code": "try:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "131", "colour": "orange", "code": "    # Python 2.5+\n", "error": "none", "author": "tom@organisms.be"}, {"index": "132", "colour": "orange", "code": "    from hashlib import sha1 as sha\n", "error": "none", "author": "tom@organisms.be"}, {"index": "133", "colour": "orange", "code": "except ImportError:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "134", "colour": "orange", "code": "    from sha import new as sha\n", "error": "none", "author": "tom@organisms.be"}, {"index": "135", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "136", "colour": "orange", "code": "try:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "137", "colour": "green", "code": "    sorted = sorted\n", "error": "W", "author": "tom@organisms.be"}, {"index": "138", "colour": "orange", "code": "except NameError:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "139", "colour": "orange", "code": "    def sorted(i):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "140", "colour": "orange", "code": "        i = i[:]\n", "error": "none", "author": "tom@organisms.be"}, {"index": "141", "colour": "orange", "code": "        i.sort()\n", "error": "none", "author": "tom@organisms.be"}, {"index": "142", "colour": "orange", "code": "        return i\n", "error": "none", "author": "tom@organisms.be"}, {"index": "143", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "144", "colour": "orange", "code": "try:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "145", "colour": "green", "code": "    reversed = reversed\n", "error": "W", "author": "tom@organisms.be"}, {"index": "146", "colour": "orange", "code": "except NameError:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "147", "colour": "orange", "code": "    def reversed(x):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "148", "colour": "orange", "code": "        i = len(x)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "149", "colour": "orange", "code": "        while i > 0:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "150", "colour": "orange", "code": "            i -= 1\n", "error": "none", "author": "tom@organisms.be"}, {"index": "151", "colour": "orange", "code": "            yield x[i]\n", "error": "none", "author": "tom@organisms.be"}, {"index": "152", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "153", "colour": "orange", "code": "try:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "154", "colour": "orange", "code": "    # Python 3\n", "error": "none", "author": "tom@organisms.be"}, {"index": "155", "colour": "green", "code": "    from urllib.parse import urljoin, urlencode\n", "error": "W", "author": "tom@organisms.be"}, {"index": "156", "colour": "green", "code": "    from urllib.parse import quote, quote_plus\n", "error": "W", "author": "tom@organisms.be"}, {"index": "157", "colour": "green", "code": "    from urllib.request import unquote, urlopen\n", "error": "W", "author": "tom@organisms.be"}, {"index": "158", "colour": "green", "code": "    from urllib.request import parse_http_list, parse_keqv_list\n", "error": "W", "author": "tom@organisms.be"}, {"index": "159", "colour": "orange", "code": "except ImportError:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "160", "colour": "orange", "code": "    # Python 2\n", "error": "none", "author": "tom@organisms.be"}, {"index": "161", "colour": "orange", "code": "    from urlparse import urljoin\n", "error": "none", "author": "tom@organisms.be"}, {"index": "162", "colour": "orange", "code": "    from urllib import urlencode, urlopen\n", "error": "none", "author": "tom@organisms.be"}, {"index": "163", "colour": "orange", "code": "    from urllib import quote, quote_plus\n", "error": "none", "author": "tom@organisms.be"}, {"index": "164", "colour": "orange", "code": "    from urllib import unquote\n", "error": "none", "author": "tom@organisms.be"}, {"index": "165", "colour": "orange", "code": "    from urllib2 import parse_http_list, parse_keqv_list\n", "error": "none", "author": "tom@organisms.be"}, {"index": "166", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "167", "colour": "orange", "code": "try:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "168", "colour": "green", "code": "    from threading import local as threadlocal\n", "error": "W", "author": "tom@organisms.be"}, {"index": "169", "colour": "orange", "code": "except ImportError:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "170", "colour": "orange", "code": "    from cherrypy._cpthreadinglocal import local as threadlocal\n", "error": "none", "author": "tom@organisms.be"}, {"index": "171", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "172", "colour": "orange", "code": "try:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "173", "colour": "green", "code": "    dict.iteritems\n", "error": "W", "author": "tom@organisms.be"}, {"index": "174", "colour": "orange", "code": "    # Python 2\n", "error": "none", "author": "tom@organisms.be"}, {"index": "175", "colour": "orange", "code": "    iteritems = lambda d: d.iteritems()\n", "error": "none", "author": "tom@organisms.be"}, {"index": "176", "colour": "orange", "code": "    copyitems = lambda d: d.items()\n", "error": "none", "author": "tom@organisms.be"}, {"index": "177", "colour": "orange", "code": "except AttributeError:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "178", "colour": "orange", "code": "    # Python 3\n", "error": "none", "author": "tom@organisms.be"}, {"index": "179", "colour": "orange", "code": "    iteritems = lambda d: d.items()\n", "error": "none", "author": "tom@organisms.be"}, {"index": "180", "colour": "orange", "code": "    copyitems = lambda d: list(d.items())\n", "error": "none", "author": "tom@organisms.be"}, {"index": "181", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "182", "colour": "orange", "code": "try:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "183", "colour": "green", "code": "    dict.iterkeys\n", "error": "W", "author": "tom@organisms.be"}, {"index": "184", "colour": "orange", "code": "    # Python 2\n", "error": "none", "author": "tom@organisms.be"}, {"index": "185", "colour": "orange", "code": "    iterkeys = lambda d: d.iterkeys()\n", "error": "none", "author": "tom@organisms.be"}, {"index": "186", "colour": "orange", "code": "    copykeys = lambda d: d.keys()\n", "error": "none", "author": "tom@organisms.be"}, {"index": "187", "colour": "orange", "code": "except AttributeError:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "188", "colour": "orange", "code": "    # Python 3\n", "error": "none", "author": "tom@organisms.be"}, {"index": "189", "colour": "orange", "code": "    iterkeys = lambda d: d.keys()\n", "error": "none", "author": "tom@organisms.be"}, {"index": "190", "colour": "orange", "code": "    copykeys = lambda d: list(d.keys())\n", "error": "none", "author": "tom@organisms.be"}, {"index": "191", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "192", "colour": "orange", "code": "try:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "193", "colour": "green", "code": "    dict.itervalues\n", "error": "W", "author": "tom@organisms.be"}, {"index": "194", "colour": "orange", "code": "    # Python 2\n", "error": "none", "author": "tom@organisms.be"}, {"index": "195", "colour": "orange", "code": "    itervalues = lambda d: d.itervalues()\n", "error": "none", "author": "tom@organisms.be"}, {"index": "196", "colour": "orange", "code": "    copyvalues = lambda d: d.values()\n", "error": "none", "author": "tom@organisms.be"}, {"index": "197", "colour": "orange", "code": "except AttributeError:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "198", "colour": "orange", "code": "    # Python 3\n", "error": "none", "author": "tom@organisms.be"}, {"index": "199", "colour": "orange", "code": "    itervalues = lambda d: d.values()\n", "error": "none", "author": "tom@organisms.be"}, {"index": "200", "colour": "orange", "code": "    copyvalues = lambda d: list(d.values())\n", "error": "none", "author": "tom@organisms.be"}, {"index": "201", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "202", "colour": "orange", "code": "try:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "203", "colour": "orange", "code": "    # Python 3\n", "error": "none", "author": "tom@organisms.be"}, {"index": "204", "colour": "green", "code": "    import builtins\n", "error": "W", "author": "tom@organisms.be"}, {"index": "205", "colour": "orange", "code": "except ImportError:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "206", "colour": "orange", "code": "    # Python 2\n", "error": "none", "author": "tom@organisms.be"}, {"index": "207", "colour": "orange", "code": "    import __builtin__ as builtins\n", "error": "none", "author": "tom@organisms.be"}, {"index": "208", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "209", "colour": "orange", "code": "try:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "210", "colour": "orange", "code": "    # Python 2. We try Python 2 first clients on Python 2\n", "error": "none", "author": "tom@organisms.be"}, {"index": "211", "colour": "orange", "code": "    # don't try to import the 'http' module from cherrypy.lib\n", "error": "none", "author": "tom@organisms.be"}, {"index": "212", "colour": "green", "code": "    from Cookie import SimpleCookie, CookieError\n", "error": "W", "author": "tom@organisms.be"}, {"index": "213", "colour": "green", "code": "    from httplib import BadStatusLine, HTTPConnection, IncompleteRead, NotConnected\n", "error": "W", "author": "tom@organisms.be"}, {"index": "214", "colour": "green", "code": "    from BaseHTTPServer import BaseHTTPRequestHandler\n", "error": "W", "author": "tom@organisms.be"}, {"index": "215", "colour": "orange", "code": "except ImportError:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "216", "colour": "orange", "code": "    # Python 3\n", "error": "none", "author": "tom@organisms.be"}, {"index": "217", "colour": "orange", "code": "    from http.cookies import SimpleCookie, CookieError\n", "error": "none", "author": "tom@organisms.be"}, {"index": "218", "colour": "orange", "code": "    from http.client import BadStatusLine, HTTPConnection, IncompleteRead, NotConnected\n", "error": "none", "author": "tom@organisms.be"}, {"index": "219", "colour": "orange", "code": "    from http.server import BaseHTTPRequestHandler\n", "error": "none", "author": "tom@organisms.be"}, {"index": "220", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "221", "colour": "orange", "code": "# Some platforms don't expose HTTPSConnection, so handle it separately\n", "error": "none", "author": "tom@organisms.be"}, {"index": "222", "colour": "orange", "code": "if py3k:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "223", "colour": "orange", "code": "    try:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "224", "colour": "green", "code": "        from http.client import HTTPSConnection\n", "error": "W", "author": "tom@organisms.be"}, {"index": "225", "colour": "orange", "code": "    except ImportError:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "226", "colour": "orange", "code": "        # Some platforms which don't have SSL don't expose HTTPSConnection\n", "error": "none", "author": "tom@organisms.be"}, {"index": "227", "colour": "orange", "code": "        HTTPSConnection = None\n", "error": "none", "author": "tom@organisms.be"}, {"index": "228", "colour": "orange", "code": "else:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "229", "colour": "orange", "code": "    try:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "230", "colour": "orange", "code": "        from httplib import HTTPSConnection\n", "error": "none", "author": "tom@organisms.be"}, {"index": "231", "colour": "orange", "code": "    except ImportError:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "232", "colour": "orange", "code": "        HTTPSConnection = None\n", "error": "none", "author": "tom@organisms.be"}, {"index": "233", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "234", "colour": "orange", "code": "try:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "235", "colour": "orange", "code": "    # Python 2\n", "error": "none", "author": "tom@organisms.be"}, {"index": "236", "colour": "green", "code": "    xrange = xrange\n", "error": "W", "author": "tom@organisms.be"}, {"index": "237", "colour": "orange", "code": "except NameError:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "238", "colour": "orange", "code": "    # Python 3\n", "error": "none", "author": "tom@organisms.be"}, {"index": "239", "colour": "orange", "code": "    xrange = range\n", "error": "none", "author": "tom@organisms.be"}, {"index": "240", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "241", "colour": "green", "code": "import threading\n", "error": "W", "author": "tom@organisms.be"}, {"index": "242", "colour": "orange", "code": "if hasattr(threading.Thread, \"daemon\"):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "243", "colour": "orange", "code": "    # Python 2.6+\n", "error": "none", "author": "tom@organisms.be"}, {"index": "244", "colour": "orange", "code": "    def get_daemon(t):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "245", "colour": "orange", "code": "        return t.daemon\n", "error": "none", "author": "tom@organisms.be"}, {"index": "246", "colour": "orange", "code": "    def set_daemon(t, val):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "247", "colour": "orange", "code": "        t.daemon = val\n", "error": "none", "author": "tom@organisms.be"}, {"index": "248", "colour": "orange", "code": "else:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "249", "colour": "orange", "code": "    def get_daemon(t):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "250", "colour": "orange", "code": "        return t.isDaemon()\n", "error": "none", "author": "tom@organisms.be"}, {"index": "251", "colour": "orange", "code": "    def set_daemon(t, val):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "252", "colour": "orange", "code": "        t.setDaemon(val)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "253", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "254", "colour": "orange", "code": "try:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "255", "colour": "orange", "code": "    from email.utils import formatdate\n", "error": "none", "author": "tom@organisms.be"}, {"index": "256", "colour": "orange", "code": "    def HTTPDate(timeval=None):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "257", "colour": "orange", "code": "        return formatdate(timeval, usegmt=True)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "258", "colour": "orange", "code": "except ImportError:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "259", "colour": "orange", "code": "    from rfc822 import formatdate as HTTPDate\n", "error": "none", "author": "tom@organisms.be"}, {"index": "260", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "261", "colour": "orange", "code": "try:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "262", "colour": "orange", "code": "    # Python 3\n", "error": "none", "author": "tom@organisms.be"}, {"index": "263", "colour": "red", "code": "    from urllib.parse import unquote as parse_unquote\n", "error": "E", "author": "tom@organisms.be"}, {"index": "264", "colour": "orange", "code": "    def unquote_qs(atom, encoding, errors='strict'):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "265", "colour": "orange", "code": "        return parse_unquote(atom.replace('+', ' '), encoding=encoding, errors=errors)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "266", "colour": "orange", "code": "except ImportError:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "267", "colour": "orange", "code": "    # Python 2\n", "error": "none", "author": "tom@organisms.be"}, {"index": "268", "colour": "orange", "code": "    from urllib import unquote as parse_unquote\n", "error": "none", "author": "tom@organisms.be"}, {"index": "269", "colour": "orange", "code": "    def unquote_qs(atom, encoding, errors='strict'):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "270", "colour": "orange", "code": "        return parse_unquote(atom.replace('+', ' ')).decode(encoding, errors)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "271", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "272", "colour": "orange", "code": "try:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "273", "colour": "orange", "code": "    # Prefer simplejson, which is usually more advanced than the builtin module.\n", "error": "none", "author": "tom@organisms.be"}, {"index": "274", "colour": "orange", "code": "    import simplejson as json\n", "error": "none", "author": "tom@organisms.be"}, {"index": "275", "colour": "orange", "code": "    json_decode = json.JSONDecoder().decode\n", "error": "none", "author": "tom@organisms.be"}, {"index": "276", "colour": "orange", "code": "    json_encode = json.JSONEncoder().iterencode\n", "error": "none", "author": "tom@organisms.be"}, {"index": "277", "colour": "orange", "code": "except ImportError:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "278", "colour": "orange", "code": "    if py3k:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "279", "colour": "orange", "code": "        # Python 3.0: json is part of the standard library,\n", "error": "none", "author": "tom@organisms.be"}, {"index": "280", "colour": "orange", "code": "        # but outputs unicode. We need bytes.\n", "error": "none", "author": "tom@organisms.be"}, {"index": "281", "colour": "orange", "code": "        import json\n", "error": "none", "author": "tom@organisms.be"}, {"index": "282", "colour": "orange", "code": "        json_decode = json.JSONDecoder().decode\n", "error": "none", "author": "tom@organisms.be"}, {"index": "283", "colour": "orange", "code": "        _json_encode = json.JSONEncoder().iterencode\n", "error": "none", "author": "tom@organisms.be"}, {"index": "284", "colour": "orange", "code": "        def json_encode(value):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "285", "colour": "orange", "code": "            for chunk in _json_encode(value):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "286", "colour": "orange", "code": "                yield chunk.encode('utf8')\n", "error": "none", "author": "tom@organisms.be"}, {"index": "287", "colour": "orange", "code": "    elif sys.version_info >= (2, 6):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "288", "colour": "orange", "code": "        # Python 2.6: json is part of the standard library\n", "error": "none", "author": "tom@organisms.be"}, {"index": "289", "colour": "orange", "code": "        import json\n", "error": "none", "author": "tom@organisms.be"}, {"index": "290", "colour": "orange", "code": "        json_decode = json.JSONDecoder().decode\n", "error": "none", "author": "tom@organisms.be"}, {"index": "291", "colour": "orange", "code": "        json_encode = json.JSONEncoder().iterencode\n", "error": "none", "author": "tom@organisms.be"}, {"index": "292", "colour": "orange", "code": "    else:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "293", "colour": "orange", "code": "        json = None\n", "error": "none", "author": "tom@organisms.be"}, {"index": "294", "colour": "green", "code": "        def json_decode(s):\n", "error": "W", "author": "tom@organisms.be"}, {"index": "295", "colour": "orange", "code": "            raise ValueError('No JSON library is available')\n", "error": "none", "author": "tom@organisms.be"}, {"index": "296", "colour": "green", "code": "        def json_encode(s):\n", "error": "W", "author": "tom@organisms.be"}, {"index": "297", "colour": "orange", "code": "            raise ValueError('No JSON library is available')\n", "error": "none", "author": "tom@organisms.be"}, {"index": "298", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "299", "colour": "orange", "code": "try:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "300", "colour": "green", "code": "    import cPickle as pickle\n", "error": "W", "author": "tom@organisms.be"}, {"index": "301", "colour": "orange", "code": "except ImportError:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "302", "colour": "orange", "code": "    # In Python 2, pickle is a Python version.\n", "error": "none", "author": "tom@organisms.be"}, {"index": "303", "colour": "orange", "code": "    # In Python 3, pickle is the sped-up C version.\n", "error": "none", "author": "tom@organisms.be"}, {"index": "304", "colour": "orange", "code": "    import pickle\n", "error": "none", "author": "tom@organisms.be"}, {"index": "305", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "306", "colour": "orange", "code": "try:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "307", "colour": "orange", "code": "    os.urandom(20)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "308", "colour": "orange", "code": "    import binascii\n", "error": "none", "author": "tom@organisms.be"}, {"index": "309", "colour": "orange", "code": "    def random20():\n", "error": "none", "author": "tom@organisms.be"}, {"index": "310", "colour": "orange", "code": "        return binascii.hexlify(os.urandom(20)).decode('ascii')\n", "error": "none", "author": "tom@organisms.be"}, {"index": "311", "colour": "orange", "code": "except (AttributeError, NotImplementedError):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "312", "colour": "orange", "code": "    import random\n", "error": "none", "author": "tom@organisms.be"}, {"index": "313", "colour": "orange", "code": "    # os.urandom not available until Python 2.4. Fall back to random.random.\n", "error": "none", "author": "tom@organisms.be"}, {"index": "314", "colour": "orange", "code": "    def random20():\n", "error": "none", "author": "tom@organisms.be"}, {"index": "315", "colour": "orange", "code": "        return sha('%s' % random.random()).hexdigest()\n", "error": "none", "author": "tom@organisms.be"}, {"index": "316", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "317", "colour": "orange", "code": "try:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "318", "colour": "green", "code": "    from _thread import get_ident as get_thread_ident\n", "error": "W", "author": "tom@organisms.be"}, {"index": "319", "colour": "orange", "code": "except ImportError:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "320", "colour": "orange", "code": "    from thread import get_ident as get_thread_ident\n", "error": "none", "author": "tom@organisms.be"}, {"index": "321", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "322", "colour": "orange", "code": "try:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "323", "colour": "orange", "code": "    # Python 3\n", "error": "none", "author": "tom@organisms.be"}, {"index": "324", "colour": "green", "code": "    next = next\n", "error": "W", "author": "tom@organisms.be"}, {"index": "325", "colour": "orange", "code": "except NameError:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "326", "colour": "orange", "code": "    # Python 2\n", "error": "none", "author": "tom@organisms.be"}, {"index": "327", "colour": "orange", "code": "    def next(i):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "328", "colour": "orange", "code": "        return i.next()\n", "error": "none", "author": "tom@organisms.be"}, {"index": "329", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "330", "colour": "orange", "code": "if sys.version_info >= (3,3):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "331", "colour": "orange", "code": "    Timer = threading.Timer\n", "error": "none", "author": "tom@organisms.be"}, {"index": "332", "colour": "orange", "code": "    Event = threading.Event\n", "error": "none", "author": "tom@organisms.be"}, {"index": "333", "colour": "orange", "code": "else:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "334", "colour": "orange", "code": "    # Python 3.2 and earlier\n", "error": "none", "author": "tom@organisms.be"}, {"index": "335", "colour": "green", "code": "    Timer = threading._Timer\n", "error": "W", "author": "tom@organisms.be"}, {"index": "336", "colour": "green", "code": "    Event = threading._Event\n", "error": "W", "author": "tom@organisms.be"}, {"index": "337", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "338", "colour": "orange", "code": "# Prior to Python 2.6, the Thread class did not have a .daemon property.\n", "error": "none", "author": "tom@organisms.be"}, {"index": "339", "colour": "orange", "code": "# This mix-in adds that property.\n", "error": "none", "author": "tom@organisms.be"}, {"index": "340", "colour": "blue", "code": "class SetDaemonProperty:\n", "error": "R", "author": "tom@organisms.be"}, {"index": "341", "colour": "orange", "code": "    def __get_daemon(self):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "342", "colour": "red", "code": "        return self.isDaemon()\n", "error": "E", "author": "tom@organisms.be"}, {"index": "343", "colour": "orange", "code": "    def __set_daemon(self, daemon):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "344", "colour": "red", "code": "        self.setDaemon(daemon)\n", "error": "E", "author": "tom@organisms.be"}, {"index": "345", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "346", "colour": "orange", "code": "    if sys.version_info < (2,6):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "347", "colour": "green", "code": "        daemon = property(__get_daemon, __set_daemon)\n", "error": "W", "author": "tom@organisms.be"}, {"index": "348", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "349", "colour": "orange", "code": "# Use subprocess module from Python 2.7 on Python 2.3-2.6\n", "error": "none", "author": "tom@organisms.be"}, {"index": "350", "colour": "orange", "code": "if sys.version_info < (2,7):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "351", "colour": "green", "code": "    import cherrypy._cpcompat_subprocess as subprocess\n", "error": "W", "author": "tom@organisms.be"}, {"index": "352", "colour": "orange", "code": "else:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "353", "colour": "orange", "code": "    import subprocess\n", "error": "none", "author": "tom@organisms.be"}]]}