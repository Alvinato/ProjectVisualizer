{"path": "/home/asumal/git/cs410/pattern/pattern/server/cherrypy/cherrypy/_cpcompat.py", "lines": [[{"error": "none", "line": "1", "code": "\"\"\"Compatibility code for using CherryPy with various versions of Python.\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "2", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "3", "code": "CherryPy 3.2 is compatible with Python versions 2.3+. This module provides a\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "4", "code": "useful abstraction over the differences between Python versions, sometimes by\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "5", "code": "preferring a newer idiom, sometimes an older one, and sometimes a custom one.\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "6", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "7", "code": "In particular, Python 2 uses str and '' for byte strings, while Python 3\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "8", "code": "uses str and '' for unicode strings. We will call each of these the 'native\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "9", "code": "string' type for each version. Because of this major difference, this module\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "10", "code": "provides new 'bytestr', 'unicodestr', and 'nativestr' attributes, as well as\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "11", "code": "two functions: 'ntob', which translates native strings (of type 'str') into\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "12", "code": "byte strings regardless of Python version, and 'ntou', which translates native\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "13", "code": "strings to unicode strings. This also provides a 'BytesIO' name for dealing\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "14", "code": "specifically with bytes, and a 'StringIO' name for dealing with native strings.\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "15", "code": "It also provides a 'base64_decode' function with native strings as input and\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "16", "code": "output.\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "17", "code": "\"\"\"\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "18", "code": "import os\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "19", "code": "import re\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "20", "code": "import sys\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "21", "code": "import threading\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "22", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "23", "code": "if sys.version_info >= (3, 0):\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "24", "code": "    py3k = True\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "C", "line": "25", "code": "    bytestr = bytes\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "C", "line": "26", "code": "    unicodestr = str\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "C", "line": "27", "code": "    nativestr = unicodestr\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "C", "line": "28", "code": "    basestring = (bytes, str)\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "C", "line": "29", "code": "    def ntob(n, encoding='ISO-8859-1'):\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "C", "line": "30", "code": "        \"\"\"Return the given native string as a byte string in the given encoding.\"\"\"\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "31", "code": "        assert_native(n)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "32", "code": "        # In Python 3, the native string type is unicode\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "33", "code": "        return n.encode(encoding)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "W", "line": "34", "code": "    def ntou(n, encoding='ISO-8859-1'):\n", "colour": "purple", "author": "tom@organisms.be"}, {"error": "C", "line": "35", "code": "        \"\"\"Return the given native string as a unicode string with the given encoding.\"\"\"\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "36", "code": "        assert_native(n)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "37", "code": "        # In Python 3, the native string type is unicode\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "38", "code": "        return n\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "39", "code": "    def tonative(n, encoding='ISO-8859-1'):\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "40", "code": "        \"\"\"Return the given string as a native string in the given encoding.\"\"\"\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "41", "code": "        # In Python 3, the native string type is unicode\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "42", "code": "        if isinstance(n, bytes):\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "43", "code": "            return n.decode(encoding)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "44", "code": "        return n\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "45", "code": "    # type(\"\")\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "46", "code": "    from io import StringIO\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "47", "code": "    # bytes:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "W", "line": "48", "code": "    from io import BytesIO as BytesIO\n", "colour": "purple", "author": "tom@organisms.be"}, {"error": "none", "line": "49", "code": "else:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "50", "code": "    # Python 2\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "51", "code": "    py3k = False\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "C", "line": "52", "code": "    bytestr = str\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "C", "line": "53", "code": "    unicodestr = unicode\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "C", "line": "54", "code": "    nativestr = bytestr\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "C", "line": "55", "code": "    basestring = basestring\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "W", "line": "56", "code": "    def ntob(n, encoding='ISO-8859-1'):\n", "colour": "purple", "author": "tom@organisms.be"}, {"error": "C", "line": "57", "code": "        \"\"\"Return the given native string as a byte string in the given encoding.\"\"\"\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "58", "code": "        assert_native(n)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "59", "code": "        # In Python 2, the native string type is bytes. Assume it's already\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "60", "code": "        # in the given encoding, which for ISO-8859-1 is almost always what\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "61", "code": "        # was intended.\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "62", "code": "        return n\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "63", "code": "    def ntou(n, encoding='ISO-8859-1'):\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "C", "line": "64", "code": "        \"\"\"Return the given native string as a unicode string with the given encoding.\"\"\"\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "65", "code": "        assert_native(n)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "66", "code": "        # In Python 2, the native string type is bytes.\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "67", "code": "        # First, check for the special encoding 'escape'. The test suite uses this\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "68", "code": "        # to signal that it wants to pass a string with embedded \\uXXXX escapes,\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "69", "code": "        # but without having to prefix it with u'' for Python 2, but no prefix\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "70", "code": "        # for Python 3.\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "71", "code": "        if encoding == 'escape':\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "72", "code": "            return unicode(\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "73", "code": "                re.sub(r'\\\\u([0-9a-zA-Z]{4})',\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "74", "code": "                       lambda m: unichr(int(m.group(1), 16)),\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "75", "code": "                       n.decode('ISO-8859-1')))\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "76", "code": "        # Assume it's already in the given encoding, which for ISO-8859-1 is almost\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "77", "code": "        # always what was intended.\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "78", "code": "        return n.decode(encoding)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "79", "code": "    def tonative(n, encoding='ISO-8859-1'):\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "80", "code": "        \"\"\"Return the given string as a native string in the given encoding.\"\"\"\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "81", "code": "        # In Python 2, the native string type is bytes.\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "82", "code": "        if isinstance(n, unicode):\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "83", "code": "            return n.encode(encoding)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "84", "code": "        return n\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "85", "code": "    try:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "86", "code": "        # type(\"\")\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "87", "code": "        from cStringIO import StringIO\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "88", "code": "    except ImportError:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "89", "code": "        # type(\"\")\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "90", "code": "        from StringIO import StringIO\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "91", "code": "    # bytes:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "92", "code": "    BytesIO = StringIO\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "93", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "94", "code": "def assert_native(n):\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "95", "code": "    if not isinstance(n, nativestr):\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "96", "code": "        raise TypeError(\"n must be a native str (got %s)\" % type(n).__name__)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "97", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "98", "code": "try:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "99", "code": "    set = set\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "100", "code": "except NameError:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "101", "code": "    from sets import Set as set\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "102", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "103", "code": "try:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "104", "code": "    # Python 3.1+\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "E", "line": "105", "code": "    from base64 import decodebytes as _base64_decodebytes\n", "colour": "yellow", "author": "tom@organisms.be"}, {"error": "none", "line": "106", "code": "except ImportError:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "107", "code": "    # Python 3.0-\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "108", "code": "    # since CherryPy claims compability with Python 2.3, we must use\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "109", "code": "    # the legacy API of base64\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "110", "code": "    from base64 import decodestring as _base64_decodebytes\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "111", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "112", "code": "def base64_decode(n, encoding='ISO-8859-1'):\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "113", "code": "    \"\"\"Return the native string base64-decoded (as a native string).\"\"\"\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "114", "code": "    if isinstance(n, unicodestr):\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "115", "code": "        b = n.encode(encoding)\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "116", "code": "    else:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "117", "code": "        b = n\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "C", "line": "118", "code": "    b = _base64_decodebytes(b)\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "119", "code": "    if nativestr is unicodestr:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "120", "code": "        return b.decode(encoding)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "121", "code": "    else:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "122", "code": "        return b\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "123", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "124", "code": "try:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "125", "code": "    # Python 2.5+\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "W", "line": "126", "code": "    from hashlib import md5\n", "colour": "purple", "author": "tom@organisms.be"}, {"error": "none", "line": "127", "code": "except ImportError:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "128", "code": "    from md5 import new as md5\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "129", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "130", "code": "try:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "131", "code": "    # Python 2.5+\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "132", "code": "    from hashlib import sha1 as sha\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "133", "code": "except ImportError:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "134", "code": "    from sha import new as sha\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "135", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "136", "code": "try:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "137", "code": "    sorted = sorted\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "138", "code": "except NameError:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "139", "code": "    def sorted(i):\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "140", "code": "        i = i[:]\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "141", "code": "        i.sort()\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "142", "code": "        return i\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "143", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "144", "code": "try:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "145", "code": "    reversed = reversed\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "146", "code": "except NameError:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "147", "code": "    def reversed(x):\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "148", "code": "        i = len(x)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "149", "code": "        while i > 0:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "150", "code": "            i -= 1\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "151", "code": "            yield x[i]\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "152", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "153", "code": "try:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "154", "code": "    # Python 3\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "W", "line": "155", "code": "    from urllib.parse import urljoin, urlencode\n", "colour": "purple", "author": "tom@organisms.be"}, {"error": "W", "line": "156", "code": "    from urllib.parse import quote, quote_plus\n", "colour": "purple", "author": "tom@organisms.be"}, {"error": "W", "line": "157", "code": "    from urllib.request import unquote, urlopen\n", "colour": "purple", "author": "tom@organisms.be"}, {"error": "W", "line": "158", "code": "    from urllib.request import parse_http_list, parse_keqv_list\n", "colour": "purple", "author": "tom@organisms.be"}, {"error": "none", "line": "159", "code": "except ImportError:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "160", "code": "    # Python 2\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "161", "code": "    from urlparse import urljoin\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "162", "code": "    from urllib import urlencode, urlopen\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "163", "code": "    from urllib import quote, quote_plus\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "164", "code": "    from urllib import unquote\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "165", "code": "    from urllib2 import parse_http_list, parse_keqv_list\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "166", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "167", "code": "try:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "W", "line": "168", "code": "    from threading import local as threadlocal\n", "colour": "purple", "author": "tom@organisms.be"}, {"error": "none", "line": "169", "code": "except ImportError:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "170", "code": "    from cherrypy._cpthreadinglocal import local as threadlocal\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "171", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "172", "code": "try:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "W", "line": "173", "code": "    dict.iteritems\n", "colour": "purple", "author": "tom@organisms.be"}, {"error": "none", "line": "174", "code": "    # Python 2\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "175", "code": "    iteritems = lambda d: d.iteritems()\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "C", "line": "176", "code": "    copyitems = lambda d: d.items()\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "177", "code": "except AttributeError:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "178", "code": "    # Python 3\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "179", "code": "    iteritems = lambda d: d.items()\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "C", "line": "180", "code": "    copyitems = lambda d: list(d.items())\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "181", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "182", "code": "try:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "W", "line": "183", "code": "    dict.iterkeys\n", "colour": "purple", "author": "tom@organisms.be"}, {"error": "none", "line": "184", "code": "    # Python 2\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "185", "code": "    iterkeys = lambda d: d.iterkeys()\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "C", "line": "186", "code": "    copykeys = lambda d: d.keys()\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "187", "code": "except AttributeError:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "188", "code": "    # Python 3\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "189", "code": "    iterkeys = lambda d: d.keys()\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "C", "line": "190", "code": "    copykeys = lambda d: list(d.keys())\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "191", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "192", "code": "try:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "W", "line": "193", "code": "    dict.itervalues\n", "colour": "purple", "author": "tom@organisms.be"}, {"error": "none", "line": "194", "code": "    # Python 2\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "195", "code": "    itervalues = lambda d: d.itervalues()\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "C", "line": "196", "code": "    copyvalues = lambda d: d.values()\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "197", "code": "except AttributeError:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "198", "code": "    # Python 3\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "199", "code": "    itervalues = lambda d: d.values()\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "C", "line": "200", "code": "    copyvalues = lambda d: list(d.values())\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "201", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "202", "code": "try:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "203", "code": "    # Python 3\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "W", "line": "204", "code": "    import builtins\n", "colour": "purple", "author": "tom@organisms.be"}, {"error": "none", "line": "205", "code": "except ImportError:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "206", "code": "    # Python 2\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "207", "code": "    import __builtin__ as builtins\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "208", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "209", "code": "try:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "210", "code": "    # Python 2. We try Python 2 first clients on Python 2\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "211", "code": "    # don't try to import the 'http' module from cherrypy.lib\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "W", "line": "212", "code": "    from Cookie import SimpleCookie, CookieError\n", "colour": "purple", "author": "tom@organisms.be"}, {"error": "W", "line": "213", "code": "    from httplib import BadStatusLine, HTTPConnection, IncompleteRead, NotConnected\n", "colour": "purple", "author": "tom@organisms.be"}, {"error": "W", "line": "214", "code": "    from BaseHTTPServer import BaseHTTPRequestHandler\n", "colour": "purple", "author": "tom@organisms.be"}, {"error": "none", "line": "215", "code": "except ImportError:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "216", "code": "    # Python 3\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "F", "line": "217", "code": "    from http.cookies import SimpleCookie, CookieError\n", "colour": "red", "author": "tom@organisms.be"}, {"error": "F", "line": "218", "code": "    from http.client import BadStatusLine, HTTPConnection, IncompleteRead, NotConnected\n", "colour": "red", "author": "tom@organisms.be"}, {"error": "F", "line": "219", "code": "    from http.server import BaseHTTPRequestHandler\n", "colour": "red", "author": "tom@organisms.be"}, {"error": "none", "line": "220", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "221", "code": "# Some platforms don't expose HTTPSConnection, so handle it separately\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "222", "code": "if py3k:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "223", "code": "    try:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "W", "line": "224", "code": "        from http.client import HTTPSConnection\n", "colour": "purple", "author": "tom@organisms.be"}, {"error": "none", "line": "225", "code": "    except ImportError:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "226", "code": "        # Some platforms which don't have SSL don't expose HTTPSConnection\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "227", "code": "        HTTPSConnection = None\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "228", "code": "else:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "229", "code": "    try:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "230", "code": "        from httplib import HTTPSConnection\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "231", "code": "    except ImportError:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "232", "code": "        HTTPSConnection = None\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "233", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "234", "code": "try:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "235", "code": "    # Python 2\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "236", "code": "    xrange = xrange\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "237", "code": "except NameError:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "238", "code": "    # Python 3\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "239", "code": "    xrange = range\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "240", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "W", "line": "241", "code": "import threading\n", "colour": "purple", "author": "tom@organisms.be"}, {"error": "none", "line": "242", "code": "if hasattr(threading.Thread, \"daemon\"):\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "243", "code": "    # Python 2.6+\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "244", "code": "    def get_daemon(t):\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "245", "code": "        return t.daemon\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "246", "code": "    def set_daemon(t, val):\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "247", "code": "        t.daemon = val\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "248", "code": "else:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "249", "code": "    def get_daemon(t):\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "250", "code": "        return t.isDaemon()\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "251", "code": "    def set_daemon(t, val):\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "252", "code": "        t.setDaemon(val)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "253", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "254", "code": "try:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "255", "code": "    from email.utils import formatdate\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "256", "code": "    def HTTPDate(timeval=None):\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "257", "code": "        return formatdate(timeval, usegmt=True)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "258", "code": "except ImportError:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "259", "code": "    from rfc822 import formatdate as HTTPDate\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "260", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "261", "code": "try:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "262", "code": "    # Python 3\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "F", "line": "263", "code": "    from urllib.parse import unquote as parse_unquote\n", "colour": "red", "author": "tom@organisms.be"}, {"error": "C", "line": "264", "code": "    def unquote_qs(atom, encoding, errors='strict'):\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "C", "line": "265", "code": "        return parse_unquote(atom.replace('+', ' '), encoding=encoding, errors=errors)\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "266", "code": "except ImportError:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "267", "code": "    # Python 2\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "268", "code": "    from urllib import unquote as parse_unquote\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "269", "code": "    def unquote_qs(atom, encoding, errors='strict'):\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "270", "code": "        return parse_unquote(atom.replace('+', ' ')).decode(encoding, errors)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "271", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "272", "code": "try:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "273", "code": "    # Prefer simplejson, which is usually more advanced than the builtin module.\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "F", "line": "274", "code": "    import simplejson as json\n", "colour": "red", "author": "tom@organisms.be"}, {"error": "C", "line": "275", "code": "    json_decode = json.JSONDecoder().decode\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "C", "line": "276", "code": "    json_encode = json.JSONEncoder().iterencode\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "277", "code": "except ImportError:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "278", "code": "    if py3k:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "279", "code": "        # Python 3.0: json is part of the standard library,\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "280", "code": "        # but outputs unicode. We need bytes.\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "281", "code": "        import json\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "282", "code": "        json_decode = json.JSONDecoder().decode\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "C", "line": "283", "code": "        _json_encode = json.JSONEncoder().iterencode\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "C", "line": "284", "code": "        def json_encode(value):\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "285", "code": "            for chunk in _json_encode(value):\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "286", "code": "                yield chunk.encode('utf8')\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "287", "code": "    elif sys.version_info >= (2, 6):\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "288", "code": "        # Python 2.6: json is part of the standard library\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "289", "code": "        import json\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "290", "code": "        json_decode = json.JSONDecoder().decode\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "C", "line": "291", "code": "        json_encode = json.JSONEncoder().iterencode\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "292", "code": "    else:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "293", "code": "        json = None\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "W", "line": "294", "code": "        def json_decode(s):\n", "colour": "purple", "author": "tom@organisms.be"}, {"error": "none", "line": "295", "code": "            raise ValueError('No JSON library is available')\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "W", "line": "296", "code": "        def json_encode(s):\n", "colour": "purple", "author": "tom@organisms.be"}, {"error": "none", "line": "297", "code": "            raise ValueError('No JSON library is available')\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "298", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "299", "code": "try:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "W", "line": "300", "code": "    import cPickle as pickle\n", "colour": "purple", "author": "tom@organisms.be"}, {"error": "none", "line": "301", "code": "except ImportError:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "302", "code": "    # In Python 2, pickle is a Python version.\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "303", "code": "    # In Python 3, pickle is the sped-up C version.\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "304", "code": "    import pickle\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "305", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "306", "code": "try:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "307", "code": "    os.urandom(20)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "308", "code": "    import binascii\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "309", "code": "    def random20():\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "310", "code": "        return binascii.hexlify(os.urandom(20)).decode('ascii')\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "311", "code": "except (AttributeError, NotImplementedError):\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "312", "code": "    import random\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "313", "code": "    # os.urandom not available until Python 2.4. Fall back to random.random.\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "314", "code": "    def random20():\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "315", "code": "        return sha('%s' % random.random()).hexdigest()\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "316", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "317", "code": "try:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "W", "line": "318", "code": "    from _thread import get_ident as get_thread_ident\n", "colour": "purple", "author": "tom@organisms.be"}, {"error": "none", "line": "319", "code": "except ImportError:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "320", "code": "    from thread import get_ident as get_thread_ident\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "321", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "322", "code": "try:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "323", "code": "    # Python 3\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "324", "code": "    next = next\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "325", "code": "except NameError:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "326", "code": "    # Python 2\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "327", "code": "    def next(i):\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "328", "code": "        return i.next()\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "329", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "330", "code": "if sys.version_info >= (3,3):\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "C", "line": "331", "code": "    Timer = threading.Timer\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "C", "line": "332", "code": "    Event = threading.Event\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "333", "code": "else:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "334", "code": "    # Python 3.2 and earlier\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "W", "line": "335", "code": "    Timer = threading._Timer\n", "colour": "purple", "author": "tom@organisms.be"}, {"error": "W", "line": "336", "code": "    Event = threading._Event\n", "colour": "purple", "author": "tom@organisms.be"}, {"error": "none", "line": "337", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "338", "code": "# Prior to Python 2.6, the Thread class did not have a .daemon property.\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "339", "code": "# This mix-in adds that property.\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "R", "line": "340", "code": "class SetDaemonProperty:\n", "colour": "green", "author": "tom@organisms.be"}, {"error": "C", "line": "341", "code": "    def __get_daemon(self):\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "E", "line": "342", "code": "        return self.isDaemon()\n", "colour": "yellow", "author": "tom@organisms.be"}, {"error": "C", "line": "343", "code": "    def __set_daemon(self, daemon):\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "E", "line": "344", "code": "        self.setDaemon(daemon)\n", "colour": "yellow", "author": "tom@organisms.be"}, {"error": "none", "line": "345", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "346", "code": "    if sys.version_info < (2,6):\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "W", "line": "347", "code": "        daemon = property(__get_daemon, __set_daemon)\n", "colour": "purple", "author": "tom@organisms.be"}, {"error": "none", "line": "348", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "349", "code": "# Use subprocess module from Python 2.7 on Python 2.3-2.6\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "350", "code": "if sys.version_info < (2,7):\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "W", "line": "351", "code": "    import cherrypy._cpcompat_subprocess as subprocess\n", "colour": "purple", "author": "tom@organisms.be"}, {"error": "none", "line": "352", "code": "else:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "353", "code": "    import subprocess\n", "colour": "black", "author": "tom@organisms.be"}]]}