{"path": "/home/asumal/git/cs410/pattern/pattern/server/cherrypy/cherrypy/lib/reprconf.py", "lines": [[{"error": "none", "line": "1", "code": "\"\"\"Generic configuration system using unrepr.\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "2", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "3", "code": "Configuration data may be supplied as a Python dictionary, as a filename,\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "4", "code": "or as an open file object. When you supply a filename or file, Python's\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "5", "code": "builtin ConfigParser is used (with some extensions).\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "6", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "7", "code": "Namespaces\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "8", "code": "----------\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "9", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "10", "code": "Configuration keys are separated into namespaces by the first \".\" in the key.\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "11", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "12", "code": "The only key that cannot exist in a namespace is the \"environment\" entry.\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "13", "code": "This special entry 'imports' other config entries from a template stored in\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "14", "code": "the Config.environments dict.\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "15", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "16", "code": "You can define your own namespaces to be called when new config is merged\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "17", "code": "by adding a named handler to Config.namespaces. The name can be any string,\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "18", "code": "and the handler must be either a callable or a context manager.\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "19", "code": "\"\"\"\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "20", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "21", "code": "try:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "22", "code": "    # Python 3.0+\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "F", "line": "23", "code": "    from configparser import ConfigParser\n", "colour": "red", "author": "tom@organisms.be"}, {"error": "none", "line": "24", "code": "except ImportError:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "25", "code": "    from ConfigParser import ConfigParser\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "26", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "27", "code": "try:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "28", "code": "    set\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "29", "code": "except NameError:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "W", "line": "30", "code": "    from sets import Set as set\n", "colour": "purple", "author": "tom@organisms.be"}, {"error": "none", "line": "31", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "32", "code": "try:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "33", "code": "    basestring\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "34", "code": "except NameError:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "35", "code": "    basestring = str\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "36", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "37", "code": "try:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "38", "code": "    # Python 3\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "F", "line": "39", "code": "    import builtins\n", "colour": "red", "author": "tom@organisms.be"}, {"error": "none", "line": "40", "code": "except ImportError:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "41", "code": "    # Python 2\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "42", "code": "    import __builtin__ as builtins\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "43", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "44", "code": "import operator as _operator\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "45", "code": "import sys\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "46", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "47", "code": "def as_dict(config):\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "48", "code": "    \"\"\"Return a dict from 'config' whether it is a dict, file, or filename.\"\"\"\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "49", "code": "    if isinstance(config, basestring):\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "50", "code": "        config = Parser().dict_from_file(config)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "51", "code": "    elif hasattr(config, 'read'):\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "52", "code": "        config = Parser().dict_from_file(config)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "53", "code": "    return config\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "54", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "55", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "56", "code": "class NamespaceSet(dict):\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "57", "code": "    \"\"\"A dict of config namespace names and handlers.\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "58", "code": "    \n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "59", "code": "    Each config entry should begin with a namespace name; the corresponding\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "60", "code": "    namespace handler will be called once for each config entry in that\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "61", "code": "    namespace, and will be passed two arguments: the config key (with the\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "62", "code": "    namespace removed) and the config value.\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "63", "code": "    \n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "64", "code": "    Namespace handlers may be any Python callable; they may also be\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "65", "code": "    Python 2.5-style 'context managers', in which case their __enter__\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "66", "code": "    method should return a callable to be used as the handler.\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "67", "code": "    See cherrypy.tools (the Toolbox class) for an example.\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "68", "code": "    \"\"\"\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "69", "code": "    \n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "R", "line": "70", "code": "    def __call__(self, config):\n", "colour": "green", "author": "tom@organisms.be"}, {"error": "none", "line": "71", "code": "        \"\"\"Iterate through config and pass it to each namespace handler.\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "72", "code": "        \n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "73", "code": "        config\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "74", "code": "            A flat dict, where keys use dots to separate\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "75", "code": "            namespaces, and values are arbitrary.\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "76", "code": "        \n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "77", "code": "        The first name in each config key is used to look up the corresponding\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "78", "code": "        namespace handler. For example, a config entry of {'tools.gzip.on': v}\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "79", "code": "        will call the 'tools' namespace handler with the args: ('gzip.on', v)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "80", "code": "        \"\"\"\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "81", "code": "        # Separate the given config into namespaces\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "82", "code": "        ns_confs = {}\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "83", "code": "        for k in config:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "84", "code": "            if \".\" in k:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "85", "code": "                ns, name = k.split(\".\", 1)\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "86", "code": "                bucket = ns_confs.setdefault(ns, {})\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "87", "code": "                bucket[name] = config[k]\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "88", "code": "        \n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "89", "code": "        # I chose __enter__ and __exit__ so someday this could be\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "90", "code": "        # rewritten using Python 2.5's 'with' statement:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "91", "code": "        # for ns, handler in self.iteritems():\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "92", "code": "        #     with handler as callable:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "93", "code": "        #         for k, v in ns_confs.get(ns, {}).iteritems():\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "94", "code": "        #             callable(k, v)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "95", "code": "        for ns, handler in self.items():\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "W", "line": "96", "code": "            exit = getattr(handler, \"__exit__\", None)\n", "colour": "purple", "author": "tom@organisms.be"}, {"error": "none", "line": "97", "code": "            if exit:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "W", "line": "98", "code": "                callable = handler.__enter__()\n", "colour": "purple", "author": "tom@organisms.be"}, {"error": "none", "line": "99", "code": "                no_exc = True\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "100", "code": "                try:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "101", "code": "                    try:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "102", "code": "                        for k, v in ns_confs.get(ns, {}).items():\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "103", "code": "                            callable(k, v)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "W", "line": "104", "code": "                    except:\n", "colour": "purple", "author": "tom@organisms.be"}, {"error": "none", "line": "105", "code": "                        # The exceptional case is handled here\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "106", "code": "                        no_exc = False\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "107", "code": "                        if exit is None:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "108", "code": "                            raise\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "109", "code": "                        if not exit(*sys.exc_info()):\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "110", "code": "                            raise\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "111", "code": "                        # The exception is swallowed if exit() returns true\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "112", "code": "                finally:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "113", "code": "                    # The normal and non-local-goto cases are handled here\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "114", "code": "                    if no_exc and exit:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "115", "code": "                        exit(None, None, None)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "116", "code": "            else:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "117", "code": "                for k, v in ns_confs.get(ns, {}).items():\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "118", "code": "                    handler(k, v)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "119", "code": "    \n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "120", "code": "    def __repr__(self):\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "121", "code": "        return \"%s.%s(%s)\" % (self.__module__, self.__class__.__name__,\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "122", "code": "                              dict.__repr__(self))\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "123", "code": "    \n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "124", "code": "    def __copy__(self):\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "125", "code": "        newobj = self.__class__()\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "126", "code": "        newobj.update(self)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "127", "code": "        return newobj\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "128", "code": "    copy = __copy__\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "129", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "130", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "131", "code": "class Config(dict):\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "132", "code": "    \"\"\"A dict-like set of configuration data, with defaults and namespaces.\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "133", "code": "    \n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "134", "code": "    May take a file, filename, or dict.\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "135", "code": "    \"\"\"\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "136", "code": "    \n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "137", "code": "    defaults = {}\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "138", "code": "    environments = {}\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "139", "code": "    namespaces = NamespaceSet()\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "140", "code": "    \n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "W", "line": "141", "code": "    def __init__(self, file=None, **kwargs):\n", "colour": "purple", "author": "tom@organisms.be"}, {"error": "none", "line": "142", "code": "        self.reset()\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "143", "code": "        if file is not None:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "144", "code": "            self.update(file)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "145", "code": "        if kwargs:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "146", "code": "            self.update(kwargs)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "147", "code": "    \n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "148", "code": "    def reset(self):\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "149", "code": "        \"\"\"Reset self to default values.\"\"\"\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "150", "code": "        self.clear()\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "151", "code": "        dict.update(self, self.defaults)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "152", "code": "    \n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "153", "code": "    def update(self, config):\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "154", "code": "        \"\"\"Update self from a dict, file or filename.\"\"\"\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "155", "code": "        if isinstance(config, basestring):\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "156", "code": "            # Filename\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "157", "code": "            config = Parser().dict_from_file(config)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "158", "code": "        elif hasattr(config, 'read'):\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "159", "code": "            # Open file object\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "160", "code": "            config = Parser().dict_from_file(config)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "161", "code": "        else:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "162", "code": "            config = config.copy()\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "163", "code": "        self._apply(config)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "164", "code": "    \n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "165", "code": "    def _apply(self, config):\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "166", "code": "        \"\"\"Update self from a dict.\"\"\"\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "167", "code": "        which_env = config.get('environment')\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "168", "code": "        if which_env:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "169", "code": "            env = self.environments[which_env]\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "170", "code": "            for k in env:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "171", "code": "                if k not in config:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "172", "code": "                    config[k] = env[k]\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "173", "code": "        \n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "174", "code": "        dict.update(self, config)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "175", "code": "        self.namespaces(config)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "176", "code": "    \n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "177", "code": "    def __setitem__(self, k, v):\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "178", "code": "        dict.__setitem__(self, k, v)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "179", "code": "        self.namespaces({k: v})\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "180", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "181", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "182", "code": "class Parser(ConfigParser):\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "183", "code": "    \"\"\"Sub-class of ConfigParser that keeps the case of options and that \n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "184", "code": "    raises an exception if the file cannot be read.\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "185", "code": "    \"\"\"\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "186", "code": "    \n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "187", "code": "    def optionxform(self, optionstr):\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "188", "code": "        return optionstr\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "189", "code": "    \n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "190", "code": "    def read(self, filenames):\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "191", "code": "        if isinstance(filenames, basestring):\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "192", "code": "            filenames = [filenames]\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "193", "code": "        for filename in filenames:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "194", "code": "            # try:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "195", "code": "            #     fp = open(filename)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "196", "code": "            # except IOError:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "197", "code": "            #     continue\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "198", "code": "            fp = open(filename)\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "199", "code": "            try:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "200", "code": "                self._read(fp, filename)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "201", "code": "            finally:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "202", "code": "                fp.close()\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "203", "code": "    \n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "W", "line": "204", "code": "    def as_dict(self, raw=False, vars=None):\n", "colour": "purple", "author": "tom@organisms.be"}, {"error": "none", "line": "205", "code": "        \"\"\"Convert an INI file to a dictionary\"\"\"\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "206", "code": "        # Load INI file into a dict\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "207", "code": "        result = {}\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "208", "code": "        for section in self.sections():\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "209", "code": "            if section not in result:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "210", "code": "                result[section] = {}\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "211", "code": "            for option in self.options(section):\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "212", "code": "                value = self.get(section, option, raw=raw, vars=vars)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "213", "code": "                try:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "214", "code": "                    value = unrepr(value)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "215", "code": "                except Exception:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "216", "code": "                    x = sys.exc_info()[1]\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "217", "code": "                    msg = (\"Config error in section: %r, option: %r, \"\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "218", "code": "                           \"value: %r. Config values must be valid Python.\" %\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "219", "code": "                           (section, option, value))\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "220", "code": "                    raise ValueError(msg, x.__class__.__name__, x.args)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "221", "code": "                result[section][option] = value\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "222", "code": "        return result\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "223", "code": "    \n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "W", "line": "224", "code": "    def dict_from_file(self, file):\n", "colour": "purple", "author": "tom@organisms.be"}, {"error": "none", "line": "225", "code": "        if hasattr(file, 'read'):\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "226", "code": "            self.readfp(file)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "227", "code": "        else:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "228", "code": "            self.read(file)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "229", "code": "        return self.as_dict()\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "230", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "231", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "232", "code": "# public domain \"unrepr\" implementation, found on the web and then improved.\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "233", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "234", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "235", "code": "class _Builder2:\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "C", "line": "236", "code": "    \n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "C", "line": "237", "code": "    def build(self, o):\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "C", "line": "238", "code": "        m = getattr(self, 'build_' + o.__class__.__name__, None)\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "239", "code": "        if m is None:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "240", "code": "            raise TypeError(\"unrepr does not recognize %s\" %\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "241", "code": "                            repr(o.__class__.__name__))\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "242", "code": "        return m(o)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "243", "code": "    \n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "R", "line": "244", "code": "    def astnode(self, s):\n", "colour": "green", "author": "tom@organisms.be"}, {"error": "none", "line": "245", "code": "        \"\"\"Return a Python2 ast Node compiled from a string.\"\"\"\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "246", "code": "        try:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "247", "code": "            import compiler\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "248", "code": "        except ImportError:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "249", "code": "            # Fallback to eval when compiler package is not available,\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "250", "code": "            # e.g. IronPython 1.0.\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "W", "line": "251", "code": "            return eval(s)\n", "colour": "purple", "author": "tom@organisms.be"}, {"error": "C", "line": "252", "code": "        \n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "C", "line": "253", "code": "        p = compiler.parse(\"__tempvalue__ = \" + s)\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "254", "code": "        return p.getChildren()[1].getChildren()[0].getChildren()[1]\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "255", "code": "    \n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "C", "line": "256", "code": "    def build_Subscript(self, o):\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "W", "line": "257", "code": "        expr, flags, subs = o.getChildren()\n", "colour": "purple", "author": "tom@organisms.be"}, {"error": "none", "line": "258", "code": "        expr = self.build(expr)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "259", "code": "        subs = self.build(subs)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "260", "code": "        return expr[subs]\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "261", "code": "    \n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "C", "line": "262", "code": "    def build_CallFunc(self, o):\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "W", "line": "263", "code": "        children = map(self.build, o.getChildren())\n", "colour": "purple", "author": "tom@organisms.be"}, {"error": "none", "line": "264", "code": "        callee = children.pop(0)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "265", "code": "        kwargs = children.pop() or {}\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "266", "code": "        starargs = children.pop() or ()\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "267", "code": "        args = tuple(children) + tuple(starargs)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "W", "line": "268", "code": "        return callee(*args, **kwargs)\n", "colour": "purple", "author": "tom@organisms.be"}, {"error": "C", "line": "269", "code": "    \n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "C", "line": "270", "code": "    def build_List(self, o):\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "W", "line": "271", "code": "        return map(self.build, o.getChildren())\n", "colour": "purple", "author": "tom@organisms.be"}, {"error": "C", "line": "272", "code": "    \n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "R", "line": "273", "code": "    def build_Const(self, o):\n", "colour": "green", "author": "tom@organisms.be"}, {"error": "none", "line": "274", "code": "        return o.value\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "275", "code": "    \n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "C", "line": "276", "code": "    def build_Dict(self, o):\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "C", "line": "277", "code": "        d = {}\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "W", "line": "278", "code": "        i = iter(map(self.build, o.getChildren()))\n", "colour": "purple", "author": "tom@organisms.be"}, {"error": "C", "line": "279", "code": "        for el in i:\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "280", "code": "            d[el] = i.next()\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "281", "code": "        return d\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "282", "code": "    \n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "C", "line": "283", "code": "    def build_Tuple(self, o):\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "284", "code": "        return tuple(self.build_List(o))\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "285", "code": "    \n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "R", "line": "286", "code": "    def build_Name(self, o):\n", "colour": "green", "author": "tom@organisms.be"}, {"error": "none", "line": "287", "code": "        name = o.name\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "288", "code": "        if name == 'None':\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "289", "code": "            return None\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "290", "code": "        if name == 'True':\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "291", "code": "            return True\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "292", "code": "        if name == 'False':\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "293", "code": "            return False\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "294", "code": "        \n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "295", "code": "        # See if the Name is a package or module. If it is, import it.\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "296", "code": "        try:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "297", "code": "            return modules(name)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "298", "code": "        except ImportError:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "299", "code": "            pass\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "300", "code": "        \n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "301", "code": "        # See if the Name is in builtins.\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "302", "code": "        try:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "303", "code": "            return getattr(builtins, name)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "304", "code": "        except AttributeError:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "305", "code": "            pass\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "306", "code": "        \n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "307", "code": "        raise TypeError(\"unrepr could not resolve the name %s\" % repr(name))\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "308", "code": "    \n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "C", "line": "309", "code": "    def build_Add(self, o):\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "W", "line": "310", "code": "        left, right = map(self.build, o.getChildren())\n", "colour": "purple", "author": "tom@organisms.be"}, {"error": "none", "line": "311", "code": "        return left + right\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "312", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "313", "code": "    def build_Mul(self, o):\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "W", "line": "314", "code": "        left, right = map(self.build, o.getChildren())\n", "colour": "purple", "author": "tom@organisms.be"}, {"error": "none", "line": "315", "code": "        return left * right\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "316", "code": "    \n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "C", "line": "317", "code": "    def build_Getattr(self, o):\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "318", "code": "        parent = self.build(o.expr)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "319", "code": "        return getattr(parent, o.attrname)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "320", "code": "    \n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "R", "line": "321", "code": "    def build_NoneType(self, o):\n", "colour": "green", "author": "tom@organisms.be"}, {"error": "none", "line": "322", "code": "        return None\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "323", "code": "    \n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "C", "line": "324", "code": "    def build_UnarySub(self, o):\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "325", "code": "        return -self.build(o.getChildren()[0])\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "326", "code": "    \n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "C", "line": "327", "code": "    def build_UnaryAdd(self, o):\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "328", "code": "        return self.build(o.getChildren()[0])\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "329", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "330", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "331", "code": "class _Builder3:\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "C", "line": "332", "code": "    \n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "C", "line": "333", "code": "    def build(self, o):\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "C", "line": "334", "code": "        m = getattr(self, 'build_' + o.__class__.__name__, None)\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "335", "code": "        if m is None:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "336", "code": "            raise TypeError(\"unrepr does not recognize %s\" %\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "337", "code": "                            repr(o.__class__.__name__))\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "338", "code": "        return m(o)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "339", "code": "    \n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "R", "line": "340", "code": "    def astnode(self, s):\n", "colour": "green", "author": "tom@organisms.be"}, {"error": "none", "line": "341", "code": "        \"\"\"Return a Python3 ast Node compiled from a string.\"\"\"\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "342", "code": "        try:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "343", "code": "            import ast\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "344", "code": "        except ImportError:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "345", "code": "            # Fallback to eval when ast package is not available,\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "346", "code": "            # e.g. IronPython 1.0.\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "W", "line": "347", "code": "            return eval(s)\n", "colour": "purple", "author": "tom@organisms.be"}, {"error": "none", "line": "348", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "349", "code": "        p = ast.parse(\"__tempvalue__ = \" + s)\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "350", "code": "        return p.body[0].value\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "351", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "352", "code": "    def build_Subscript(self, o):\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "353", "code": "        return self.build(o.value)[self.build(o.slice)]\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "354", "code": "    \n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "C", "line": "355", "code": "    def build_Index(self, o):\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "356", "code": "        return self.build(o.value)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "357", "code": "    \n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "C", "line": "358", "code": "    def build_Call(self, o):\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "359", "code": "        callee = self.build(o.func)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "360", "code": "        \n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "361", "code": "        if o.args is None:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "362", "code": "            args = ()\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "363", "code": "        else: \n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "C", "line": "364", "code": "            args = tuple([self.build(a) for a in o.args]) \n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "C", "line": "365", "code": "        \n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "366", "code": "        if o.starargs is None:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "367", "code": "            starargs = ()\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "368", "code": "        else:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "369", "code": "            starargs = self.build(o.starargs)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "370", "code": "        \n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "371", "code": "        if o.kwargs is None:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "372", "code": "            kwargs = {}\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "373", "code": "        else:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "374", "code": "            kwargs = self.build(o.kwargs)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "375", "code": "        \n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "W", "line": "376", "code": "        return callee(*(args + starargs), **kwargs)\n", "colour": "purple", "author": "tom@organisms.be"}, {"error": "C", "line": "377", "code": "    \n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "C", "line": "378", "code": "    def build_List(self, o):\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "W", "line": "379", "code": "        return list(map(self.build, o.elts))\n", "colour": "purple", "author": "tom@organisms.be"}, {"error": "C", "line": "380", "code": "    \n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "R", "line": "381", "code": "    def build_Str(self, o):\n", "colour": "green", "author": "tom@organisms.be"}, {"error": "none", "line": "382", "code": "        return o.s\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "383", "code": "    \n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "R", "line": "384", "code": "    def build_Num(self, o):\n", "colour": "green", "author": "tom@organisms.be"}, {"error": "none", "line": "385", "code": "        return o.n\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "386", "code": "    \n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "C", "line": "387", "code": "    def build_Dict(self, o):\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "388", "code": "        return dict([(self.build(k), self.build(v))\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "389", "code": "                     for k, v in zip(o.keys, o.values)])\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "390", "code": "    \n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "C", "line": "391", "code": "    def build_Tuple(self, o):\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "392", "code": "        return tuple(self.build_List(o))\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "393", "code": "    \n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "R", "line": "394", "code": "    def build_Name(self, o):\n", "colour": "green", "author": "tom@organisms.be"}, {"error": "none", "line": "395", "code": "        name = o.id\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "396", "code": "        if name == 'None':\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "397", "code": "            return None\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "398", "code": "        if name == 'True':\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "399", "code": "            return True\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "400", "code": "        if name == 'False':\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "401", "code": "            return False\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "402", "code": "        \n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "403", "code": "        # See if the Name is a package or module. If it is, import it.\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "404", "code": "        try:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "405", "code": "            return modules(name)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "406", "code": "        except ImportError:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "407", "code": "            pass\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "408", "code": "        \n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "409", "code": "        # See if the Name is in builtins.\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "410", "code": "        try:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "F", "line": "411", "code": "            import builtins\n", "colour": "red", "author": "tom@organisms.be"}, {"error": "none", "line": "412", "code": "            return getattr(builtins, name)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "413", "code": "        except AttributeError:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "414", "code": "            pass\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "415", "code": "        \n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "416", "code": "        raise TypeError(\"unrepr could not resolve the name %s\" % repr(name))\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "417", "code": "        \n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "C", "line": "418", "code": "    def build_UnaryOp(self, o):\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "W", "line": "419", "code": "        op, operand = map(self.build, [o.op, o.operand])\n", "colour": "purple", "author": "tom@organisms.be"}, {"error": "none", "line": "420", "code": "        return op(operand)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "421", "code": "    \n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "C", "line": "422", "code": "    def build_BinOp(self, o):\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "W", "line": "423", "code": "        left, op, right = map(self.build, [o.left, o.op, o.right]) \n", "colour": "purple", "author": "tom@organisms.be"}, {"error": "none", "line": "424", "code": "        return op(left, right)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "425", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "R", "line": "426", "code": "    def build_Add(self, o):\n", "colour": "green", "author": "tom@organisms.be"}, {"error": "none", "line": "427", "code": "        return _operator.add\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "428", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "R", "line": "429", "code": "    def build_Mult(self, o):\n", "colour": "green", "author": "tom@organisms.be"}, {"error": "none", "line": "430", "code": "        return _operator.mul\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "431", "code": "        \n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "R", "line": "432", "code": "    def build_USub(self, o):\n", "colour": "green", "author": "tom@organisms.be"}, {"error": "none", "line": "433", "code": "        return _operator.neg\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "434", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "435", "code": "    def build_Attribute(self, o):\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "436", "code": "        parent = self.build(o.value)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "437", "code": "        return getattr(parent, o.attr)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "438", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "R", "line": "439", "code": "    def build_NoneType(self, o):\n", "colour": "green", "author": "tom@organisms.be"}, {"error": "none", "line": "440", "code": "        return None\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "441", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "442", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "443", "code": "def unrepr(s):\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "444", "code": "    \"\"\"Return a Python object compiled from a string.\"\"\"\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "445", "code": "    if not s:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "446", "code": "        return s\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "447", "code": "    if sys.version_info < (3, 0):\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "448", "code": "        b = _Builder2()\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "449", "code": "    else:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "450", "code": "        b = _Builder3()\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "451", "code": "    obj = b.astnode(s)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "452", "code": "    return b.build(obj)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "453", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "454", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "455", "code": "def modules(modulePath):\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "456", "code": "    \"\"\"Load a module and retrieve a reference to that module.\"\"\"\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "457", "code": "    try:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "458", "code": "        mod = sys.modules[modulePath]\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "459", "code": "        if mod is None:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "460", "code": "            raise KeyError()\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "461", "code": "    except KeyError:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "462", "code": "        __import__(modulePath)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "463", "code": "        mod = sys.modules[modulePath]   \n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "464", "code": "    return mod\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "465", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "466", "code": "def attributes(full_attribute_name):\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "467", "code": "    \"\"\"Load a module and retrieve an attribute of that module.\"\"\"\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "468", "code": "    \n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "469", "code": "    # Parse out the path, module, and attribute\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "470", "code": "    last_dot = full_attribute_name.rfind(\".\")\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "471", "code": "    attr_name = full_attribute_name[last_dot + 1:]\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "472", "code": "    mod_path = full_attribute_name[:last_dot]\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "473", "code": "    \n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "474", "code": "    mod = modules(mod_path)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "475", "code": "    # Let an AttributeError propagate outward.\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "476", "code": "    try:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "477", "code": "        attr = getattr(mod, attr_name)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "478", "code": "    except AttributeError:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "479", "code": "        raise AttributeError(\"'%s' object has no attribute '%s'\"\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "480", "code": "                             % (mod_path, attr_name))\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "481", "code": "    \n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "482", "code": "    # Return a reference to the attribute.\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "483", "code": "    return attr\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "484", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "485", "code": "\n", "colour": "black", "author": "tom@organisms.be"}]]}