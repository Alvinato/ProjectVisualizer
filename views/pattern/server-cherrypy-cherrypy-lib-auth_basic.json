{"path": "/home/asumal/git/cs410/pattern/pattern/server/cherrypy/cherrypy/lib/auth_basic.py", "lines": [[{"index": "1", "colour": "orange", "code": "# This file is part of CherryPy <http://www.cherrypy.org/>\n", "error": "none", "author": "tom@organisms.be"}, {"index": "2", "colour": "orange", "code": "# -*- coding: utf-8 -*-\n", "error": "none", "author": "tom@organisms.be"}, {"index": "3", "colour": "orange", "code": "# vim:ts=4:sw=4:expandtab:fileencoding=utf-8\n", "error": "none", "author": "tom@organisms.be"}, {"index": "4", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "5", "colour": "green", "code": "__doc__ = \"\"\"This module provides a CherryPy 3.x tool which implements\n", "error": "W", "author": "tom@organisms.be"}, {"index": "6", "colour": "orange", "code": "the server-side of HTTP Basic Access Authentication, as described in :rfc:`2617`.\n", "error": "none", "author": "tom@organisms.be"}, {"index": "7", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "8", "colour": "orange", "code": "Example usage, using the built-in checkpassword_dict function which uses a dict\n", "error": "none", "author": "tom@organisms.be"}, {"index": "9", "colour": "orange", "code": "as the credentials store::\n", "error": "none", "author": "tom@organisms.be"}, {"index": "10", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "11", "colour": "orange", "code": "    userpassdict = {'bird' : 'bebop', 'ornette' : 'wayout'}\n", "error": "none", "author": "tom@organisms.be"}, {"index": "12", "colour": "orange", "code": "    checkpassword = cherrypy.lib.auth_basic.checkpassword_dict(userpassdict)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "13", "colour": "orange", "code": "    basic_auth = {'tools.auth_basic.on': True,\n", "error": "none", "author": "tom@organisms.be"}, {"index": "14", "colour": "orange", "code": "                  'tools.auth_basic.realm': 'earth',\n", "error": "none", "author": "tom@organisms.be"}, {"index": "15", "colour": "orange", "code": "                  'tools.auth_basic.checkpassword': checkpassword,\n", "error": "none", "author": "tom@organisms.be"}, {"index": "16", "colour": "orange", "code": "    }\n", "error": "none", "author": "tom@organisms.be"}, {"index": "17", "colour": "orange", "code": "    app_config = { '/' : basic_auth }\n", "error": "none", "author": "tom@organisms.be"}, {"index": "18", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "19", "colour": "orange", "code": "\"\"\"\n", "error": "none", "author": "tom@organisms.be"}, {"index": "20", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "21", "colour": "orange", "code": "__author__ = 'visteya'\n", "error": "none", "author": "tom@organisms.be"}, {"index": "22", "colour": "orange", "code": "__date__ = 'April 2009'\n", "error": "none", "author": "tom@organisms.be"}, {"index": "23", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "24", "colour": "orange", "code": "import binascii\n", "error": "none", "author": "tom@organisms.be"}, {"index": "25", "colour": "orange", "code": "from cherrypy._cpcompat import base64_decode\n", "error": "none", "author": "tom@organisms.be"}, {"index": "26", "colour": "orange", "code": "import cherrypy\n", "error": "none", "author": "tom@organisms.be"}, {"index": "27", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "28", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "29", "colour": "orange", "code": "def checkpassword_dict(user_password_dict):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "30", "colour": "orange", "code": "    \"\"\"Returns a checkpassword function which checks credentials\n", "error": "none", "author": "tom@organisms.be"}, {"index": "31", "colour": "orange", "code": "    against a dictionary of the form: {username : password}.\n", "error": "none", "author": "tom@organisms.be"}, {"index": "32", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "33", "colour": "orange", "code": "    If you want a simple dictionary-based authentication scheme, use\n", "error": "none", "author": "tom@organisms.be"}, {"index": "34", "colour": "orange", "code": "    checkpassword_dict(my_credentials_dict) as the value for the\n", "error": "none", "author": "tom@organisms.be"}, {"index": "35", "colour": "orange", "code": "    checkpassword argument to basic_auth().\n", "error": "none", "author": "tom@organisms.be"}, {"index": "36", "colour": "orange", "code": "    \"\"\"\n", "error": "none", "author": "tom@organisms.be"}, {"index": "37", "colour": "green", "code": "    def checkpassword(realm, user, password):\n", "error": "W", "author": "tom@organisms.be"}, {"index": "38", "colour": "orange", "code": "        p = user_password_dict.get(user)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "39", "colour": "orange", "code": "        return p and p == password or False\n", "error": "none", "author": "tom@organisms.be"}, {"index": "40", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "41", "colour": "orange", "code": "    return checkpassword\n", "error": "none", "author": "tom@organisms.be"}, {"index": "42", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "43", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "44", "colour": "orange", "code": "def basic_auth(realm, checkpassword, debug=False):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "45", "colour": "orange", "code": "    \"\"\"A CherryPy tool which hooks at before_handler to perform\n", "error": "none", "author": "tom@organisms.be"}, {"index": "46", "colour": "orange", "code": "    HTTP Basic Access Authentication, as specified in :rfc:`2617`.\n", "error": "none", "author": "tom@organisms.be"}, {"index": "47", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "48", "colour": "orange", "code": "    If the request has an 'authorization' header with a 'Basic' scheme, this\n", "error": "none", "author": "tom@organisms.be"}, {"index": "49", "colour": "orange", "code": "    tool attempts to authenticate the credentials supplied in that header.  If\n", "error": "none", "author": "tom@organisms.be"}, {"index": "50", "colour": "orange", "code": "    the request has no 'authorization' header, or if it does but the scheme is\n", "error": "none", "author": "tom@organisms.be"}, {"index": "51", "colour": "orange", "code": "    not 'Basic', or if authentication fails, the tool sends a 401 response with\n", "error": "none", "author": "tom@organisms.be"}, {"index": "52", "colour": "orange", "code": "    a 'WWW-Authenticate' Basic header.\n", "error": "none", "author": "tom@organisms.be"}, {"index": "53", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "54", "colour": "orange", "code": "    realm\n", "error": "none", "author": "tom@organisms.be"}, {"index": "55", "colour": "orange", "code": "        A string containing the authentication realm.\n", "error": "none", "author": "tom@organisms.be"}, {"index": "56", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "57", "colour": "orange", "code": "    checkpassword\n", "error": "none", "author": "tom@organisms.be"}, {"index": "58", "colour": "orange", "code": "        A callable which checks the authentication credentials.\n", "error": "none", "author": "tom@organisms.be"}, {"index": "59", "colour": "orange", "code": "        Its signature is checkpassword(realm, username, password). where\n", "error": "none", "author": "tom@organisms.be"}, {"index": "60", "colour": "orange", "code": "        username and password are the values obtained from the request's\n", "error": "none", "author": "tom@organisms.be"}, {"index": "61", "colour": "orange", "code": "        'authorization' header.  If authentication succeeds, checkpassword\n", "error": "none", "author": "tom@organisms.be"}, {"index": "62", "colour": "orange", "code": "        returns True, else it returns False.\n", "error": "none", "author": "tom@organisms.be"}, {"index": "63", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "64", "colour": "orange", "code": "    \"\"\"\n", "error": "none", "author": "tom@organisms.be"}, {"index": "65", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "66", "colour": "orange", "code": "    if '\"' in realm:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "67", "colour": "orange", "code": "        raise ValueError('Realm cannot contain the \" (quote) character.')\n", "error": "none", "author": "tom@organisms.be"}, {"index": "68", "colour": "orange", "code": "    request = cherrypy.serving.request\n", "error": "none", "author": "tom@organisms.be"}, {"index": "69", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "70", "colour": "orange", "code": "    auth_header = request.headers.get('authorization')\n", "error": "none", "author": "tom@organisms.be"}, {"index": "71", "colour": "orange", "code": "    if auth_header is not None:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "72", "colour": "orange", "code": "        try:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "73", "colour": "orange", "code": "            scheme, params = auth_header.split(' ', 1)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "74", "colour": "orange", "code": "            if scheme.lower() == 'basic':\n", "error": "none", "author": "tom@organisms.be"}, {"index": "75", "colour": "orange", "code": "                username, password = base64_decode(params).split(':', 1)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "76", "colour": "orange", "code": "                if checkpassword(realm, username, password):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "77", "colour": "orange", "code": "                    if debug:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "78", "colour": "orange", "code": "                        cherrypy.log('Auth succeeded', 'TOOLS.AUTH_BASIC')\n", "error": "none", "author": "tom@organisms.be"}, {"index": "79", "colour": "orange", "code": "                    request.login = username\n", "error": "none", "author": "tom@organisms.be"}, {"index": "80", "colour": "orange", "code": "                    return # successful authentication\n", "error": "none", "author": "tom@organisms.be"}, {"index": "81", "colour": "orange", "code": "        except (ValueError, binascii.Error): # split() error, base64.decodestring() error\n", "error": "none", "author": "tom@organisms.be"}, {"index": "82", "colour": "orange", "code": "            raise cherrypy.HTTPError(400, 'Bad Request')\n", "error": "none", "author": "tom@organisms.be"}, {"index": "83", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "84", "colour": "orange", "code": "    # Respond with 401 status and a WWW-Authenticate header\n", "error": "none", "author": "tom@organisms.be"}, {"index": "85", "colour": "orange", "code": "    cherrypy.serving.response.headers['www-authenticate'] = 'Basic realm=\"%s\"' % realm\n", "error": "none", "author": "tom@organisms.be"}, {"index": "86", "colour": "orange", "code": "    raise cherrypy.HTTPError(401, \"You are not authorized to access that resource\")\n", "error": "none", "author": "tom@organisms.be"}, {"index": "87", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}]]}