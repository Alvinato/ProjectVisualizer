{"path": "/home/asumal/git/cs410/pattern/pattern/web/feed/feedparser.py", "lines": [[{"index": "1", "colour": "orange", "code": "\"\"\"Universal feed parser\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "2", "colour": "orange", "code": "\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "3", "colour": "orange", "code": "Handles RSS 0.9x, RSS 1.0, RSS 2.0, CDF, Atom 0.3, and Atom 1.0 feeds\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "4", "colour": "orange", "code": "\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "5", "colour": "orange", "code": "Visit https://code.google.com/p/feedparser/ for the latest version\n", "error": "none", "author": "tom@organisms.be"}, {"index": "6", "colour": "orange", "code": "Visit http://packages.python.org/feedparser/ for the latest documentation\n", "error": "none", "author": "tom@organisms.be"}, {"index": "7", "colour": "orange", "code": "\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "8", "colour": "orange", "code": "Required: Python 2.4 or later\n", "error": "none", "author": "tom@organisms.be"}, {"index": "9", "colour": "orange", "code": "Recommended: iconv_codec <http://cjkpython.i18n.org/>\n", "error": "none", "author": "tom@organisms.be"}, {"index": "10", "colour": "orange", "code": "\"\"\"\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "11", "colour": "orange", "code": "\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "12", "colour": "orange", "code": "__version__ = \"5.1.2\"\n", "error": "none", "author": "tom@organisms.be"}, {"index": "13", "colour": "orange", "code": "__license__ = \"\"\"\n", "error": "none", "author": "tom@organisms.be"}, {"index": "14", "colour": "orange", "code": "Copyright (c) 2010-2012 Kurt McKee <contactme@kurtmckee.org>\n", "error": "none", "author": "tom@organisms.be"}, {"index": "15", "colour": "orange", "code": "Copyright (c) 2002-2008 Mark Pilgrim\n", "error": "none", "author": "tom@organisms.be"}, {"index": "16", "colour": "orange", "code": "All rights reserved.\n", "error": "none", "author": "tom@organisms.be"}, {"index": "17", "colour": "orange", "code": "\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "18", "colour": "orange", "code": "Redistribution and use in source and binary forms, with or without modification,\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "19", "colour": "orange", "code": "are permitted provided that the following conditions are met:\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "20", "colour": "orange", "code": "\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "21", "colour": "orange", "code": "* Redistributions of source code must retain the above copyright notice,\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "22", "colour": "orange", "code": "  this list of conditions and the following disclaimer.\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "23", "colour": "orange", "code": "* Redistributions in binary form must reproduce the above copyright notice,\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "24", "colour": "orange", "code": "  this list of conditions and the following disclaimer in the documentation\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "25", "colour": "orange", "code": "  and/or other materials provided with the distribution.\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "26", "colour": "orange", "code": "\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "27", "colour": "orange", "code": "THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS 'AS IS'\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "28", "colour": "orange", "code": "AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "29", "colour": "orange", "code": "IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "30", "colour": "orange", "code": "ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "31", "colour": "orange", "code": "LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "32", "colour": "orange", "code": "CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "33", "colour": "orange", "code": "SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "34", "colour": "orange", "code": "INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "35", "colour": "orange", "code": "CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "36", "colour": "orange", "code": "ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "37", "colour": "orange", "code": "POSSIBILITY OF SUCH DAMAGE.\"\"\"\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "38", "colour": "orange", "code": "__author__ = \"Mark Pilgrim <http://diveintomark.org/>\"\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "39", "colour": "orange", "code": "__contributors__ = [\"Jason Diamond <http://injektilo.org/>\",\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "40", "colour": "orange", "code": "                    \"John Beimler <http://john.beimler.org/>\",\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "41", "colour": "orange", "code": "                    \"Fazal Majid <http://www.majid.info/mylos/weblog/>\",\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "42", "colour": "orange", "code": "                    \"Aaron Swartz <http://aaronsw.com/>\",\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "43", "colour": "orange", "code": "                    \"Kevin Marks <http://epeus.blogspot.com/>\",\n", "error": "none", "author": "tom@organisms.be"}, {"index": "44", "colour": "orange", "code": "                    \"Sam Ruby <http://intertwingly.net/>\",\n", "error": "none", "author": "tom@organisms.be"}, {"index": "45", "colour": "orange", "code": "                    \"Ade Oshineye <http://blog.oshineye.com/>\",\n", "error": "none", "author": "tom@organisms.be"}, {"index": "46", "colour": "orange", "code": "                    \"Martin Pool <http://sourcefrog.net/>\",\n", "error": "none", "author": "tom@organisms.be"}, {"index": "47", "colour": "orange", "code": "                    \"Kurt McKee <http://kurtmckee.org/>\"]\n", "error": "none", "author": "tom@organisms.be"}, {"index": "48", "colour": "orange", "code": "\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "49", "colour": "orange", "code": "# HTTP \"User-Agent\" header to send to servers when downloading feeds.\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "50", "colour": "orange", "code": "# If you are embedding feedparser in a larger application, you should\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "51", "colour": "orange", "code": "# change this to your application name and URL.\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "52", "colour": "orange", "code": "USER_AGENT = \"UniversalFeedParser/%s +https://code.google.com/p/feedparser/\" % __version__\n", "error": "none", "author": "tom@organisms.be"}, {"index": "53", "colour": "orange", "code": "\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "54", "colour": "orange", "code": "# HTTP \"Accept\" header to send to servers when downloading feeds.  If you don't\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "55", "colour": "orange", "code": "# want to send an Accept header, set this to None.\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "56", "colour": "orange", "code": "ACCEPT_HEADER = \"application/atom+xml,application/rdf+xml,application/rss+xml,application/x-netcdf,application/xml;q=0.9,text/xml;q=0.2,*/*;q=0.1\"\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "57", "colour": "orange", "code": "\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "58", "colour": "orange", "code": "# List of preferred XML parsers, by SAX driver name.  These will be tried first,\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "59", "colour": "orange", "code": "# but if they're not installed, Python will keep searching through its own list\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "60", "colour": "orange", "code": "# of pre-installed parsers until it finds one that supports everything we need.\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "61", "colour": "orange", "code": "PREFERRED_XML_PARSERS = [\"drv_libxml2\"]\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "62", "colour": "orange", "code": "\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "63", "colour": "orange", "code": "# If you want feedparser to automatically run HTML markup through HTML Tidy, set\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "64", "colour": "orange", "code": "# this to 1.  Requires mxTidy <http://www.egenix.com/files/python/mxTidy.html>\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "65", "colour": "orange", "code": "# or utidylib <http://utidylib.berlios.de/>.\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "66", "colour": "orange", "code": "TIDY_MARKUP = 0\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "67", "colour": "orange", "code": "\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "68", "colour": "orange", "code": "# List of Python interfaces for HTML Tidy, in order of preference.  Only useful\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "69", "colour": "orange", "code": "# if TIDY_MARKUP = 1\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "70", "colour": "orange", "code": "PREFERRED_TIDY_INTERFACES = [\"uTidy\", \"mxTidy\"]\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "71", "colour": "orange", "code": "\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "72", "colour": "orange", "code": "# If you want feedparser to automatically resolve all relative URIs, set this\n", "error": "none", "author": "tom@organisms.be"}, {"index": "73", "colour": "orange", "code": "# to 1.\n", "error": "none", "author": "tom@organisms.be"}, {"index": "74", "colour": "orange", "code": "RESOLVE_RELATIVE_URIS = 1\n", "error": "none", "author": "tom@organisms.be"}, {"index": "75", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "76", "colour": "orange", "code": "# If you want feedparser to automatically sanitize all potentially unsafe\n", "error": "none", "author": "tom@organisms.be"}, {"index": "77", "colour": "orange", "code": "# HTML content, set this to 1.\n", "error": "none", "author": "tom@organisms.be"}, {"index": "78", "colour": "orange", "code": "SANITIZE_HTML = 1\n", "error": "none", "author": "tom@organisms.be"}, {"index": "79", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "80", "colour": "orange", "code": "# If you want feedparser to automatically parse microformat content embedded\n", "error": "none", "author": "tom@organisms.be"}, {"index": "81", "colour": "orange", "code": "# in entry contents, set this to 1\n", "error": "none", "author": "tom@organisms.be"}, {"index": "82", "colour": "orange", "code": "PARSE_MICROFORMATS = 1\n", "error": "none", "author": "tom@organisms.be"}, {"index": "83", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "84", "colour": "orange", "code": "# ---------- Python 3 modules (make it work if possible) ----------\n", "error": "none", "author": "tom@organisms.be"}, {"index": "85", "colour": "orange", "code": "try:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "86", "colour": "orange", "code": "    import rfc822\n", "error": "none", "author": "tom@organisms.be"}, {"index": "87", "colour": "orange", "code": "except ImportError:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "88", "colour": "orange", "code": "    from email import _parseaddr as rfc822\n", "error": "none", "author": "tom@organisms.be"}, {"index": "89", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "90", "colour": "orange", "code": "try:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "91", "colour": "orange", "code": "    # Python 3.1 introduces bytes.maketrans and simultaneously\n", "error": "none", "author": "tom@organisms.be"}, {"index": "92", "colour": "orange", "code": "    # deprecates string.maketrans; use bytes.maketrans if possible\n", "error": "none", "author": "tom@organisms.be"}, {"index": "93", "colour": "red", "code": "    _maketrans = bytes.maketrans\n", "error": "E", "author": "tom@organisms.be"}, {"index": "94", "colour": "orange", "code": "except (NameError, AttributeError):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "95", "colour": "orange", "code": "    import string\n", "error": "none", "author": "tom@organisms.be"}, {"index": "96", "colour": "orange", "code": "    _maketrans = string.maketrans\n", "error": "none", "author": "tom@organisms.be"}, {"index": "97", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "98", "colour": "orange", "code": "# base64 support for Atom feeds that contain embedded binary data\n", "error": "none", "author": "tom@organisms.be"}, {"index": "99", "colour": "orange", "code": "try:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "100", "colour": "orange", "code": "    import base64, binascii\n", "error": "none", "author": "tom@organisms.be"}, {"index": "101", "colour": "orange", "code": "except ImportError:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "102", "colour": "orange", "code": "    base64 = binascii = None\n", "error": "none", "author": "tom@organisms.be"}, {"index": "103", "colour": "orange", "code": "else:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "104", "colour": "orange", "code": "    # Python 3.1 deprecates decodestring in favor of decodebytes\n", "error": "none", "author": "tom@organisms.be"}, {"index": "105", "colour": "orange", "code": "    _base64decode = getattr(base64, 'decodebytes', base64.decodestring)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "106", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "107", "colour": "orange", "code": "# _s2bytes: convert a UTF-8 str to bytes if the interpreter is Python 3\n", "error": "none", "author": "tom@organisms.be"}, {"index": "108", "colour": "orange", "code": "# _l2bytes: convert a list of ints to bytes if the interpreter is Python 3\n", "error": "none", "author": "tom@organisms.be"}, {"index": "109", "colour": "orange", "code": "try:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "110", "colour": "orange", "code": "    if bytes is str:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "111", "colour": "orange", "code": "        # In Python 2.5 and below, bytes doesn't exist (NameError)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "112", "colour": "orange", "code": "        # In Python 2.6 and above, bytes and str are the same type\n", "error": "none", "author": "tom@organisms.be"}, {"index": "113", "colour": "orange", "code": "        raise NameError\n", "error": "none", "author": "tom@organisms.be"}, {"index": "114", "colour": "orange", "code": "except NameError:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "115", "colour": "orange", "code": "    # Python 2\n", "error": "none", "author": "tom@organisms.be"}, {"index": "116", "colour": "orange", "code": "    def _s2bytes(s):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "117", "colour": "orange", "code": "        return s\n", "error": "none", "author": "tom@organisms.be"}, {"index": "118", "colour": "orange", "code": "    def _l2bytes(l):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "119", "colour": "green", "code": "        return ''.join(map(chr, l))\n", "error": "W", "author": "tom@organisms.be"}, {"index": "120", "colour": "orange", "code": "else:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "121", "colour": "orange", "code": "    # Python 3\n", "error": "none", "author": "tom@organisms.be"}, {"index": "122", "colour": "orange", "code": "    def _s2bytes(s):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "123", "colour": "orange", "code": "        return bytes(s, 'utf8')\n", "error": "none", "author": "tom@organisms.be"}, {"index": "124", "colour": "orange", "code": "    def _l2bytes(l):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "125", "colour": "orange", "code": "        return bytes(l)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "126", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "127", "colour": "orange", "code": "# If you want feedparser to allow all URL schemes, set this to ()\n", "error": "none", "author": "tom@organisms.be"}, {"index": "128", "colour": "orange", "code": "# List culled from Python's urlparse documentation at:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "129", "colour": "orange", "code": "#   http://docs.python.org/library/urlparse.html\n", "error": "none", "author": "tom@organisms.be"}, {"index": "130", "colour": "orange", "code": "# as well as from \"URI scheme\" at Wikipedia:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "131", "colour": "orange", "code": "#   https://secure.wikimedia.org/wikipedia/en/wiki/URI_scheme\n", "error": "none", "author": "tom@organisms.be"}, {"index": "132", "colour": "orange", "code": "# Many more will likely need to be added!\n", "error": "none", "author": "tom@organisms.be"}, {"index": "133", "colour": "orange", "code": "ACCEPTABLE_URI_SCHEMES = (\n", "error": "none", "author": "tom@organisms.be"}, {"index": "134", "colour": "orange", "code": "    'file', 'ftp', 'gopher', 'h323', 'hdl', 'http', 'https', 'imap', 'magnet',\n", "error": "none", "author": "tom@organisms.be"}, {"index": "135", "colour": "orange", "code": "    'mailto', 'mms', 'news', 'nntp', 'prospero', 'rsync', 'rtsp', 'rtspu',\n", "error": "none", "author": "tom@organisms.be"}, {"index": "136", "colour": "orange", "code": "    'sftp', 'shttp', 'sip', 'sips', 'snews', 'svn', 'svn+ssh', 'telnet',\n", "error": "none", "author": "tom@organisms.be"}, {"index": "137", "colour": "orange", "code": "    'wais',\n", "error": "none", "author": "tom@organisms.be"}, {"index": "138", "colour": "orange", "code": "    # Additional common-but-unofficial schemes\n", "error": "none", "author": "tom@organisms.be"}, {"index": "139", "colour": "orange", "code": "    'aim', 'callto', 'cvs', 'facetime', 'feed', 'git', 'gtalk', 'irc', 'ircs',\n", "error": "none", "author": "tom@organisms.be"}, {"index": "140", "colour": "orange", "code": "    'irc6', 'itms', 'mms', 'msnim', 'skype', 'ssh', 'smb', 'svn', 'ymsg',\n", "error": "none", "author": "tom@organisms.be"}, {"index": "141", "colour": "orange", "code": ")\n", "error": "none", "author": "tom@organisms.be"}, {"index": "142", "colour": "orange", "code": "#ACCEPTABLE_URI_SCHEMES = ()\n", "error": "none", "author": "tom@organisms.be"}, {"index": "143", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "144", "colour": "orange", "code": "# ---------- required modules (should come with any Python distribution) ----------\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "145", "colour": "orange", "code": "import cgi\n", "error": "none", "author": "tom@organisms.be"}, {"index": "146", "colour": "orange", "code": "import codecs\n", "error": "none", "author": "tom@organisms.be"}, {"index": "147", "colour": "orange", "code": "import copy\n", "error": "none", "author": "tom@organisms.be"}, {"index": "148", "colour": "orange", "code": "import datetime\n", "error": "none", "author": "tom@organisms.be"}, {"index": "149", "colour": "orange", "code": "import re\n", "error": "none", "author": "tom@organisms.be"}, {"index": "150", "colour": "orange", "code": "import struct\n", "error": "none", "author": "tom@organisms.be"}, {"index": "151", "colour": "orange", "code": "import time\n", "error": "none", "author": "tom@organisms.be"}, {"index": "152", "colour": "green", "code": "import types\n", "error": "W", "author": "tom@organisms.be"}, {"index": "153", "colour": "orange", "code": "import urllib\n", "error": "none", "author": "tom@organisms.be"}, {"index": "154", "colour": "orange", "code": "import urllib2\n", "error": "none", "author": "tom@organisms.be"}, {"index": "155", "colour": "orange", "code": "import urlparse\n", "error": "none", "author": "tom@organisms.be"}, {"index": "156", "colour": "green", "code": "import warnings\n", "error": "W", "author": "tom@organisms.be"}, {"index": "157", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "158", "colour": "green", "code": "from htmlentitydefs import name2codepoint, codepoint2name, entitydefs\n", "error": "W", "author": "tom@organisms.be"}, {"index": "159", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "160", "colour": "orange", "code": "try:\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "161", "colour": "orange", "code": "    from io import BytesIO as _StringIO\n", "error": "none", "author": "tom@organisms.be"}, {"index": "162", "colour": "orange", "code": "except ImportError:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "163", "colour": "orange", "code": "    try:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "164", "colour": "orange", "code": "        from cStringIO import StringIO as _StringIO\n", "error": "none", "author": "tom@organisms.be"}, {"index": "165", "colour": "orange", "code": "    except ImportError:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "166", "colour": "orange", "code": "        from StringIO import StringIO as _StringIO\n", "error": "none", "author": "tom@organisms.be"}, {"index": "167", "colour": "orange", "code": "\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "168", "colour": "orange", "code": "# ---------- optional modules (feedparser will work without these, but with reduced functionality) ----------\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "169", "colour": "orange", "code": "\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "170", "colour": "orange", "code": "# gzip is included with most Python distributions, but may not be available if you compiled your own\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "171", "colour": "orange", "code": "try:\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "172", "colour": "orange", "code": "    import gzip\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "173", "colour": "orange", "code": "except ImportError:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "174", "colour": "orange", "code": "    gzip = None\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "175", "colour": "orange", "code": "try:\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "176", "colour": "orange", "code": "    import zlib\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "177", "colour": "orange", "code": "except ImportError:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "178", "colour": "orange", "code": "    zlib = None\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "179", "colour": "orange", "code": "\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "180", "colour": "orange", "code": "# If a real XML parser is available, feedparser will attempt to use it.  feedparser has\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "181", "colour": "orange", "code": "# been tested with the built-in SAX parser and libxml2.  On platforms where the\n", "error": "none", "author": "tom@organisms.be"}, {"index": "182", "colour": "orange", "code": "# Python distribution does not come with an XML parser (such as Mac OS X 10.2 and some\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "183", "colour": "orange", "code": "# versions of FreeBSD), feedparser will quietly fall back on regex-based parsing.\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "184", "colour": "orange", "code": "try:\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "185", "colour": "orange", "code": "    import xml.sax\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "186", "colour": "orange", "code": "    from xml.sax.saxutils import escape as _xmlescape\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "187", "colour": "orange", "code": "except ImportError:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "188", "colour": "orange", "code": "    _XML_AVAILABLE = 0\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "189", "colour": "green", "code": "    def _xmlescape(data,entities={}):\n", "error": "W", "author": "tom@organisms.be"}, {"index": "190", "colour": "orange", "code": "        data = data.replace('&', '&amp;')\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "191", "colour": "orange", "code": "        data = data.replace('>', '&gt;')\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "192", "colour": "orange", "code": "        data = data.replace('<', '&lt;')\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "193", "colour": "orange", "code": "        for char, entity in entities:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "194", "colour": "orange", "code": "            data = data.replace(char, entity)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "195", "colour": "orange", "code": "        return data\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "196", "colour": "orange", "code": "else:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "197", "colour": "orange", "code": "    try:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "198", "colour": "orange", "code": "        xml.sax.make_parser(PREFERRED_XML_PARSERS) # test for valid parsers\n", "error": "none", "author": "tom@organisms.be"}, {"index": "199", "colour": "orange", "code": "    except xml.sax.SAXReaderNotAvailable:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "200", "colour": "orange", "code": "        _XML_AVAILABLE = 0\n", "error": "none", "author": "tom@organisms.be"}, {"index": "201", "colour": "orange", "code": "    else:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "202", "colour": "orange", "code": "        _XML_AVAILABLE = 1\n", "error": "none", "author": "tom@organisms.be"}, {"index": "203", "colour": "orange", "code": "\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "204", "colour": "orange", "code": "# sgmllib is not available by default in Python 3; if the end user doesn't have\n", "error": "none", "author": "tom@organisms.be"}, {"index": "205", "colour": "orange", "code": "# it available then we'll lose illformed XML parsing, content santizing, and\n", "error": "none", "author": "tom@organisms.be"}, {"index": "206", "colour": "orange", "code": "# microformat support (at least while feedparser depends on BeautifulSoup).\n", "error": "none", "author": "tom@organisms.be"}, {"index": "207", "colour": "orange", "code": "try:\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "208", "colour": "orange", "code": "    import sgmllib\n", "error": "none", "author": "tom@organisms.be"}, {"index": "209", "colour": "orange", "code": "except ImportError:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "210", "colour": "orange", "code": "    # This is probably Python 3, which doesn't include sgmllib anymore\n", "error": "none", "author": "tom@organisms.be"}, {"index": "211", "colour": "orange", "code": "    _SGML_AVAILABLE = 0\n", "error": "none", "author": "tom@organisms.be"}, {"index": "212", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "213", "colour": "orange", "code": "    # Mock sgmllib enough to allow subclassing later on\n", "error": "none", "author": "tom@organisms.be"}, {"index": "214", "colour": "blue", "code": "    class sgmllib(object):\n", "error": "R", "author": "tom@organisms.be"}, {"index": "215", "colour": "orange", "code": "        class SGMLParser(object):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "216", "colour": "orange", "code": "            def goahead(self, i):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "217", "colour": "orange", "code": "                pass\n", "error": "none", "author": "tom@organisms.be"}, {"index": "218", "colour": "orange", "code": "            def parse_starttag(self, i):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "219", "colour": "orange", "code": "                pass\n", "error": "none", "author": "tom@organisms.be"}, {"index": "220", "colour": "orange", "code": "else:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "221", "colour": "orange", "code": "    _SGML_AVAILABLE = 1\n", "error": "none", "author": "tom@organisms.be"}, {"index": "222", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "223", "colour": "orange", "code": "    # sgmllib defines a number of module-level regular expressions that are\n", "error": "none", "author": "tom@organisms.be"}, {"index": "224", "colour": "orange", "code": "    # insufficient for the XML parsing feedparser needs. Rather than modify\n", "error": "none", "author": "tom@organisms.be"}, {"index": "225", "colour": "orange", "code": "    # the variables directly in sgmllib, they're defined here using the same\n", "error": "none", "author": "tom@organisms.be"}, {"index": "226", "colour": "orange", "code": "    # names, and the compiled code objects of several sgmllib.SGMLParser\n", "error": "none", "author": "tom@organisms.be"}, {"index": "227", "colour": "orange", "code": "    # methods are copied into _BaseHTMLProcessor so that they execute in\n", "error": "none", "author": "tom@organisms.be"}, {"index": "228", "colour": "orange", "code": "    # feedparser's scope instead of sgmllib's scope.\n", "error": "none", "author": "tom@organisms.be"}, {"index": "229", "colour": "green", "code": "    charref = re.compile('&#(\\d+|[xX][0-9a-fA-F]+);')\n", "error": "W", "author": "tom@organisms.be"}, {"index": "230", "colour": "orange", "code": "    tagfind = re.compile('[a-zA-Z][-_.:a-zA-Z0-9]*')\n", "error": "none", "author": "tom@organisms.be"}, {"index": "231", "colour": "orange", "code": "    attrfind = re.compile(\n", "error": "none", "author": "tom@organisms.be"}, {"index": "232", "colour": "orange", "code": "        r'\\s*([a-zA-Z_][-:.a-zA-Z_0-9]*)[$]?(\\s*=\\s*'\n", "error": "none", "author": "tom@organisms.be"}, {"index": "233", "colour": "orange", "code": "        r'(\\'[^\\']*\\'|\"[^\"]*\"|[][\\-a-zA-Z0-9./,:;+*%?!&$\\(\\)_#=~\\'\"@]*))?'\n", "error": "none", "author": "tom@organisms.be"}, {"index": "234", "colour": "orange", "code": "    )\n", "error": "none", "author": "tom@organisms.be"}, {"index": "235", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "236", "colour": "orange", "code": "    # Unfortunately, these must be copied over to prevent NameError exceptions\n", "error": "none", "author": "tom@organisms.be"}, {"index": "237", "colour": "orange", "code": "    entityref = sgmllib.entityref\n", "error": "none", "author": "tom@organisms.be"}, {"index": "238", "colour": "orange", "code": "    incomplete = sgmllib.incomplete\n", "error": "none", "author": "tom@organisms.be"}, {"index": "239", "colour": "orange", "code": "    interesting = sgmllib.interesting\n", "error": "none", "author": "tom@organisms.be"}, {"index": "240", "colour": "orange", "code": "    shorttag = sgmllib.shorttag\n", "error": "none", "author": "tom@organisms.be"}, {"index": "241", "colour": "orange", "code": "    shorttagopen = sgmllib.shorttagopen\n", "error": "none", "author": "tom@organisms.be"}, {"index": "242", "colour": "orange", "code": "    starttagopen = sgmllib.starttagopen\n", "error": "none", "author": "tom@organisms.be"}, {"index": "243", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "244", "colour": "blue", "code": "    class _EndBracketRegEx:\n", "error": "R", "author": "tom@organisms.be"}, {"index": "245", "colour": "orange", "code": "        def __init__(self):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "246", "colour": "orange", "code": "            # Overriding the built-in sgmllib.endbracket regex allows the\n", "error": "none", "author": "tom@organisms.be"}, {"index": "247", "colour": "orange", "code": "            # parser to find angle brackets embedded in element attributes.\n", "error": "none", "author": "tom@organisms.be"}, {"index": "248", "colour": "green", "code": "            self.endbracket = re.compile('''([^'\"<>]|\"[^\"]*\"(?=>|/|\\s|\\w+=)|'[^']*'(?=>|/|\\s|\\w+=))*(?=[<>])|.*?(?=[<>])''')\n", "error": "W", "author": "tom@organisms.be"}, {"index": "249", "colour": "orange", "code": "        def search(self, target, index=0):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "250", "colour": "orange", "code": "            match = self.endbracket.match(target, index)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "251", "colour": "orange", "code": "            if match is not None:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "252", "colour": "orange", "code": "                # Returning a new object in the calling thread's context\n", "error": "none", "author": "tom@organisms.be"}, {"index": "253", "colour": "orange", "code": "                # resolves a thread-safety.\n", "error": "none", "author": "tom@organisms.be"}, {"index": "254", "colour": "orange", "code": "                return EndBracketMatch(match)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "255", "colour": "orange", "code": "            return None\n", "error": "none", "author": "tom@organisms.be"}, {"index": "256", "colour": "blue", "code": "    class EndBracketMatch:\n", "error": "R", "author": "tom@organisms.be"}, {"index": "257", "colour": "orange", "code": "        def __init__(self, match):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "258", "colour": "orange", "code": "            self.match = match\n", "error": "none", "author": "tom@organisms.be"}, {"index": "259", "colour": "orange", "code": "        def start(self, n):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "260", "colour": "orange", "code": "            return self.match.end(n)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "261", "colour": "orange", "code": "    endbracket = _EndBracketRegEx()\n", "error": "none", "author": "tom@organisms.be"}, {"index": "262", "colour": "orange", "code": "\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "263", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "264", "colour": "orange", "code": "# iconv_codec provides support for more character encodings.\n", "error": "none", "author": "tom@organisms.be"}, {"index": "265", "colour": "orange", "code": "# It's available from http://cjkpython.i18n.org/\n", "error": "none", "author": "tom@organisms.be"}, {"index": "266", "colour": "orange", "code": "try:\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "267", "colour": "green", "code": "    import iconv_codec\n", "error": "W", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "268", "colour": "orange", "code": "except ImportError:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "269", "colour": "orange", "code": "    pass\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "270", "colour": "orange", "code": "\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "271", "colour": "orange", "code": "# chardet library auto-detects character encodings\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "272", "colour": "orange", "code": "# Download from http://chardet.feedparser.org/\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "273", "colour": "orange", "code": "try:\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "274", "colour": "orange", "code": "    import chardet\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "275", "colour": "orange", "code": "except ImportError:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "276", "colour": "orange", "code": "    chardet = None\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "277", "colour": "orange", "code": "\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "278", "colour": "orange", "code": "# BeautifulSoup is used to extract microformat content from HTML\n", "error": "none", "author": "tom@organisms.be"}, {"index": "279", "colour": "orange", "code": "# feedparser is tested using BeautifulSoup 3.2.0\n", "error": "none", "author": "tom@organisms.be"}, {"index": "280", "colour": "orange", "code": "# http://www.crummy.com/software/BeautifulSoup/\n", "error": "none", "author": "tom@organisms.be"}, {"index": "281", "colour": "orange", "code": "try:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "282", "colour": "orange", "code": "    import BeautifulSoup\n", "error": "none", "author": "tom@organisms.be"}, {"index": "283", "colour": "orange", "code": "except ImportError:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "284", "colour": "orange", "code": "    BeautifulSoup = None\n", "error": "none", "author": "tom@organisms.be"}, {"index": "285", "colour": "orange", "code": "    PARSE_MICROFORMATS = False\n", "error": "none", "author": "tom@organisms.be"}, {"index": "286", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "287", "colour": "orange", "code": "try:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "288", "colour": "orange", "code": "    # the utf_32 codec was introduced in Python 2.6; it's necessary to\n", "error": "none", "author": "tom@organisms.be"}, {"index": "289", "colour": "orange", "code": "    # check this as long as feedparser supports Python 2.4 and 2.5\n", "error": "none", "author": "tom@organisms.be"}, {"index": "290", "colour": "orange", "code": "    codecs.lookup('utf_32')\n", "error": "none", "author": "tom@organisms.be"}, {"index": "291", "colour": "orange", "code": "except LookupError:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "292", "colour": "orange", "code": "    _UTF32_AVAILABLE = False\n", "error": "none", "author": "tom@organisms.be"}, {"index": "293", "colour": "orange", "code": "else:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "294", "colour": "orange", "code": "    _UTF32_AVAILABLE = True\n", "error": "none", "author": "tom@organisms.be"}, {"index": "295", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "296", "colour": "orange", "code": "# ---------- don't touch these ----------\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "297", "colour": "orange", "code": "class ThingsNobodyCaresAboutButMe(Exception): pass\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "298", "colour": "orange", "code": "class CharacterEncodingOverride(ThingsNobodyCaresAboutButMe): pass\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "299", "colour": "orange", "code": "class CharacterEncodingUnknown(ThingsNobodyCaresAboutButMe): pass\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "300", "colour": "orange", "code": "class NonXMLContentType(ThingsNobodyCaresAboutButMe): pass\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "301", "colour": "orange", "code": "class UndeclaredNamespace(Exception): pass\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "302", "colour": "orange", "code": "\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "303", "colour": "orange", "code": "SUPPORTED_VERSIONS = {'': u'unknown',\n", "error": "none", "author": "tom@organisms.be"}, {"index": "304", "colour": "orange", "code": "                      'rss090': u'RSS 0.90',\n", "error": "none", "author": "tom@organisms.be"}, {"index": "305", "colour": "orange", "code": "                      'rss091n': u'RSS 0.91 (Netscape)',\n", "error": "none", "author": "tom@organisms.be"}, {"index": "306", "colour": "orange", "code": "                      'rss091u': u'RSS 0.91 (Userland)',\n", "error": "none", "author": "tom@organisms.be"}, {"index": "307", "colour": "orange", "code": "                      'rss092': u'RSS 0.92',\n", "error": "none", "author": "tom@organisms.be"}, {"index": "308", "colour": "orange", "code": "                      'rss093': u'RSS 0.93',\n", "error": "none", "author": "tom@organisms.be"}, {"index": "309", "colour": "orange", "code": "                      'rss094': u'RSS 0.94',\n", "error": "none", "author": "tom@organisms.be"}, {"index": "310", "colour": "orange", "code": "                      'rss20': u'RSS 2.0',\n", "error": "none", "author": "tom@organisms.be"}, {"index": "311", "colour": "orange", "code": "                      'rss10': u'RSS 1.0',\n", "error": "none", "author": "tom@organisms.be"}, {"index": "312", "colour": "orange", "code": "                      'rss': u'RSS (unknown version)',\n", "error": "none", "author": "tom@organisms.be"}, {"index": "313", "colour": "orange", "code": "                      'atom01': u'Atom 0.1',\n", "error": "none", "author": "tom@organisms.be"}, {"index": "314", "colour": "orange", "code": "                      'atom02': u'Atom 0.2',\n", "error": "none", "author": "tom@organisms.be"}, {"index": "315", "colour": "orange", "code": "                      'atom03': u'Atom 0.3',\n", "error": "none", "author": "tom@organisms.be"}, {"index": "316", "colour": "orange", "code": "                      'atom10': u'Atom 1.0',\n", "error": "none", "author": "tom@organisms.be"}, {"index": "317", "colour": "orange", "code": "                      'atom': u'Atom (unknown version)',\n", "error": "none", "author": "tom@organisms.be"}, {"index": "318", "colour": "orange", "code": "                      'cdf': u'CDF',\n", "error": "none", "author": "tom@organisms.be"}, {"index": "319", "colour": "orange", "code": "                      }\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "320", "colour": "orange", "code": "\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "321", "colour": "orange", "code": "class FeedParserDict(dict):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "322", "colour": "orange", "code": "    keymap = {'channel': 'feed',\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "323", "colour": "orange", "code": "              'items': 'entries',\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "324", "colour": "orange", "code": "              'guid': 'id',\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "325", "colour": "orange", "code": "              'date': 'updated',\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "326", "colour": "orange", "code": "              'date_parsed': 'updated_parsed',\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "327", "colour": "orange", "code": "              'description': ['summary', 'subtitle'],\n", "error": "none", "author": "tom@organisms.be"}, {"index": "328", "colour": "orange", "code": "              'description_detail': ['summary_detail', 'subtitle_detail'],\n", "error": "none", "author": "tom@organisms.be"}, {"index": "329", "colour": "orange", "code": "              'url': ['href'],\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "330", "colour": "orange", "code": "              'modified': 'updated',\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "331", "colour": "orange", "code": "              'modified_parsed': 'updated_parsed',\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "332", "colour": "orange", "code": "              'issued': 'published',\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "333", "colour": "orange", "code": "              'issued_parsed': 'published_parsed',\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "334", "colour": "orange", "code": "              'copyright': 'rights',\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "335", "colour": "orange", "code": "              'copyright_detail': 'rights_detail',\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "336", "colour": "orange", "code": "              'tagline': 'subtitle',\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "337", "colour": "orange", "code": "              'tagline_detail': 'subtitle_detail'}\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "338", "colour": "blue", "code": "    def __getitem__(self, key):\n", "error": "R", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "339", "colour": "orange", "code": "        if key == 'category':\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "340", "colour": "orange", "code": "            try:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "341", "colour": "orange", "code": "                return dict.__getitem__(self, 'tags')[0]['term']\n", "error": "none", "author": "tom@organisms.be"}, {"index": "342", "colour": "orange", "code": "            except IndexError:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "343", "colour": "orange", "code": "                raise KeyError(\"object doesn't have key 'category'\")\n", "error": "none", "author": "tom@organisms.be"}, {"index": "344", "colour": "orange", "code": "        elif key == 'enclosures':\n", "error": "none", "author": "tom@organisms.be"}, {"index": "345", "colour": "orange", "code": "            norel = lambda link: FeedParserDict([(name,value) for (name,value) in link.items() if name!='rel'])\n", "error": "none", "author": "tom@organisms.be"}, {"index": "346", "colour": "orange", "code": "            return [norel(link) for link in dict.__getitem__(self, 'links') if link['rel']==u'enclosure']\n", "error": "none", "author": "tom@organisms.be"}, {"index": "347", "colour": "orange", "code": "        elif key == 'license':\n", "error": "none", "author": "tom@organisms.be"}, {"index": "348", "colour": "orange", "code": "            for link in dict.__getitem__(self, 'links'):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "349", "colour": "orange", "code": "                if link['rel']==u'license' and 'href' in link:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "350", "colour": "orange", "code": "                    return link['href']\n", "error": "none", "author": "tom@organisms.be"}, {"index": "351", "colour": "orange", "code": "        elif key == 'updated':\n", "error": "none", "author": "tom@organisms.be"}, {"index": "352", "colour": "orange", "code": "            # Temporarily help developers out by keeping the old\n", "error": "none", "author": "tom@organisms.be"}, {"index": "353", "colour": "orange", "code": "            # broken behavior that was reported in issue 310.\n", "error": "none", "author": "tom@organisms.be"}, {"index": "354", "colour": "orange", "code": "            # This fix was proposed in issue 328.\n", "error": "none", "author": "tom@organisms.be"}, {"index": "355", "colour": "orange", "code": "            if not dict.__contains__(self, 'updated') and \\\n", "error": "none", "author": "tom@organisms.be"}, {"index": "356", "colour": "orange", "code": "                dict.__contains__(self, 'published'):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "357", "colour": "orange", "code": "                #warnings.warn(\"To avoid breaking existing software while \"\n", "error": "none", "author": "tom@organisms.be"}, {"index": "358", "colour": "orange", "code": "                #    \"fixing issue 310, a temporary mapping has been created \"\n", "error": "none", "author": "tom@organisms.be"}, {"index": "359", "colour": "orange", "code": "                #    \"from `updated` to `published` if `updated` doesn't \"\n", "error": "none", "author": "tom@organisms.be"}, {"index": "360", "colour": "orange", "code": "                #    \"exist. This fallback will be removed in a future version \"\n", "error": "none", "author": "tom@organisms.be"}, {"index": "361", "colour": "orange", "code": "                #    \"of feedparser.\", DeprecationWarning)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "362", "colour": "orange", "code": "                return dict.__getitem__(self, 'published')\n", "error": "none", "author": "tom@organisms.be"}, {"index": "363", "colour": "orange", "code": "            return dict.__getitem__(self, 'updated')\n", "error": "none", "author": "tom@organisms.be"}, {"index": "364", "colour": "orange", "code": "        elif key == 'updated_parsed':\n", "error": "none", "author": "tom@organisms.be"}, {"index": "365", "colour": "orange", "code": "            if not dict.__contains__(self, 'updated_parsed') and \\\n", "error": "none", "author": "tom@organisms.be"}, {"index": "366", "colour": "orange", "code": "                dict.__contains__(self, 'published_parsed'):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "367", "colour": "orange", "code": "                #warnings.warn(\"To avoid breaking existing software while \"\n", "error": "none", "author": "tom@organisms.be"}, {"index": "368", "colour": "orange", "code": "                #    \"fixing issue 310, a temporary mapping has been created \"\n", "error": "none", "author": "tom@organisms.be"}, {"index": "369", "colour": "orange", "code": "                #    \"from `updated_parsed` to `published_parsed` if \"\n", "error": "none", "author": "tom@organisms.be"}, {"index": "370", "colour": "orange", "code": "                #    \"`updated_parsed` doesn't exist. This fallback will be \"\n", "error": "none", "author": "tom@organisms.be"}, {"index": "371", "colour": "orange", "code": "                #    \"removed in a future version of feedparser.\",\n", "error": "none", "author": "tom@organisms.be"}, {"index": "372", "colour": "orange", "code": "                #    DeprecationWarning)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "373", "colour": "orange", "code": "                return dict.__getitem__(self, 'published_parsed')\n", "error": "none", "author": "tom@organisms.be"}, {"index": "374", "colour": "orange", "code": "            return dict.__getitem__(self, 'updated_parsed')\n", "error": "none", "author": "tom@organisms.be"}, {"index": "375", "colour": "orange", "code": "        else:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "376", "colour": "orange", "code": "            realkey = self.keymap.get(key, key)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "377", "colour": "orange", "code": "            if isinstance(realkey, list):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "378", "colour": "orange", "code": "                for k in realkey:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "379", "colour": "orange", "code": "                    if dict.__contains__(self, k):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "380", "colour": "orange", "code": "                        return dict.__getitem__(self, k)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "381", "colour": "orange", "code": "            elif dict.__contains__(self, realkey):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "382", "colour": "orange", "code": "                return dict.__getitem__(self, realkey)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "383", "colour": "orange", "code": "        return dict.__getitem__(self, key)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "384", "colour": "orange", "code": "\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "385", "colour": "orange", "code": "    def __contains__(self, key):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "386", "colour": "orange", "code": "        if key in ('updated', 'updated_parsed'):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "387", "colour": "orange", "code": "            # Temporarily help developers out by keeping the old\n", "error": "none", "author": "tom@organisms.be"}, {"index": "388", "colour": "orange", "code": "            # broken behavior that was reported in issue 310.\n", "error": "none", "author": "tom@organisms.be"}, {"index": "389", "colour": "orange", "code": "            # This fix was proposed in issue 328.\n", "error": "none", "author": "tom@organisms.be"}, {"index": "390", "colour": "orange", "code": "            return dict.__contains__(self, key)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "391", "colour": "orange", "code": "        try:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "392", "colour": "orange", "code": "            self.__getitem__(key)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "393", "colour": "orange", "code": "        except KeyError:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "394", "colour": "orange", "code": "            return False\n", "error": "none", "author": "tom@organisms.be"}, {"index": "395", "colour": "orange", "code": "        else:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "396", "colour": "orange", "code": "            return True\n", "error": "none", "author": "tom@organisms.be"}, {"index": "397", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "398", "colour": "orange", "code": "    has_key = __contains__\n", "error": "none", "author": "tom@organisms.be"}, {"index": "399", "colour": "orange", "code": "\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "400", "colour": "orange", "code": "    def get(self, key, default=None):\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "401", "colour": "orange", "code": "        try:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "402", "colour": "orange", "code": "            return self.__getitem__(key)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "403", "colour": "orange", "code": "        except KeyError:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "404", "colour": "orange", "code": "            return default\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "405", "colour": "orange", "code": "\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "406", "colour": "orange", "code": "    def __setitem__(self, key, value):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "407", "colour": "orange", "code": "        key = self.keymap.get(key, key)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "408", "colour": "orange", "code": "        if isinstance(key, list):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "409", "colour": "orange", "code": "            key = key[0]\n", "error": "none", "author": "tom@organisms.be"}, {"index": "410", "colour": "orange", "code": "        return dict.__setitem__(self, key, value)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "411", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "412", "colour": "orange", "code": "    def setdefault(self, key, value):\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "413", "colour": "orange", "code": "        if key not in self:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "414", "colour": "orange", "code": "            self[key] = value\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "415", "colour": "orange", "code": "            return value\n", "error": "none", "author": "tom@organisms.be"}, {"index": "416", "colour": "orange", "code": "        return self[key]\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "417", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "418", "colour": "orange", "code": "    def __getattr__(self, key):\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "419", "colour": "orange", "code": "        # __getattribute__() is called first; this will be called\n", "error": "none", "author": "tom@organisms.be"}, {"index": "420", "colour": "orange", "code": "        # only if an attribute was not already found\n", "error": "none", "author": "tom@organisms.be"}, {"index": "421", "colour": "orange", "code": "        try:\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "422", "colour": "orange", "code": "            return self.__getitem__(key)\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "423", "colour": "orange", "code": "        except KeyError:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "424", "colour": "orange", "code": "            raise AttributeError(\"object has no attribute '%s'\" % key)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "425", "colour": "orange", "code": "\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "426", "colour": "orange", "code": "    def __hash__(self):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "427", "colour": "orange", "code": "        return id(self)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "428", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "429", "colour": "orange", "code": "_cp1252 = {\n", "error": "none", "author": "tom@organisms.be"}, {"index": "430", "colour": "orange", "code": "    128: unichr(8364), # euro sign\n", "error": "none", "author": "tom@organisms.be"}, {"index": "431", "colour": "orange", "code": "    130: unichr(8218), # single low-9 quotation mark\n", "error": "none", "author": "tom@organisms.be"}, {"index": "432", "colour": "orange", "code": "    131: unichr( 402), # latin small letter f with hook\n", "error": "none", "author": "tom@organisms.be"}, {"index": "433", "colour": "orange", "code": "    132: unichr(8222), # double low-9 quotation mark\n", "error": "none", "author": "tom@organisms.be"}, {"index": "434", "colour": "orange", "code": "    133: unichr(8230), # horizontal ellipsis\n", "error": "none", "author": "tom@organisms.be"}, {"index": "435", "colour": "orange", "code": "    134: unichr(8224), # dagger\n", "error": "none", "author": "tom@organisms.be"}, {"index": "436", "colour": "orange", "code": "    135: unichr(8225), # double dagger\n", "error": "none", "author": "tom@organisms.be"}, {"index": "437", "colour": "orange", "code": "    136: unichr( 710), # modifier letter circumflex accent\n", "error": "none", "author": "tom@organisms.be"}, {"index": "438", "colour": "orange", "code": "    137: unichr(8240), # per mille sign\n", "error": "none", "author": "tom@organisms.be"}, {"index": "439", "colour": "orange", "code": "    138: unichr( 352), # latin capital letter s with caron\n", "error": "none", "author": "tom@organisms.be"}, {"index": "440", "colour": "orange", "code": "    139: unichr(8249), # single left-pointing angle quotation mark\n", "error": "none", "author": "tom@organisms.be"}, {"index": "441", "colour": "orange", "code": "    140: unichr( 338), # latin capital ligature oe\n", "error": "none", "author": "tom@organisms.be"}, {"index": "442", "colour": "orange", "code": "    142: unichr( 381), # latin capital letter z with caron\n", "error": "none", "author": "tom@organisms.be"}, {"index": "443", "colour": "orange", "code": "    145: unichr(8216), # left single quotation mark\n", "error": "none", "author": "tom@organisms.be"}, {"index": "444", "colour": "orange", "code": "    146: unichr(8217), # right single quotation mark\n", "error": "none", "author": "tom@organisms.be"}, {"index": "445", "colour": "orange", "code": "    147: unichr(8220), # left double quotation mark\n", "error": "none", "author": "tom@organisms.be"}, {"index": "446", "colour": "orange", "code": "    148: unichr(8221), # right double quotation mark\n", "error": "none", "author": "tom@organisms.be"}, {"index": "447", "colour": "orange", "code": "    149: unichr(8226), # bullet\n", "error": "none", "author": "tom@organisms.be"}, {"index": "448", "colour": "orange", "code": "    150: unichr(8211), # en dash\n", "error": "none", "author": "tom@organisms.be"}, {"index": "449", "colour": "orange", "code": "    151: unichr(8212), # em dash\n", "error": "none", "author": "tom@organisms.be"}, {"index": "450", "colour": "orange", "code": "    152: unichr( 732), # small tilde\n", "error": "none", "author": "tom@organisms.be"}, {"index": "451", "colour": "orange", "code": "    153: unichr(8482), # trade mark sign\n", "error": "none", "author": "tom@organisms.be"}, {"index": "452", "colour": "orange", "code": "    154: unichr( 353), # latin small letter s with caron\n", "error": "none", "author": "tom@organisms.be"}, {"index": "453", "colour": "orange", "code": "    155: unichr(8250), # single right-pointing angle quotation mark\n", "error": "none", "author": "tom@organisms.be"}, {"index": "454", "colour": "orange", "code": "    156: unichr( 339), # latin small ligature oe\n", "error": "none", "author": "tom@organisms.be"}, {"index": "455", "colour": "orange", "code": "    158: unichr( 382), # latin small letter z with caron\n", "error": "none", "author": "tom@organisms.be"}, {"index": "456", "colour": "orange", "code": "    159: unichr( 376), # latin capital letter y with diaeresis\n", "error": "none", "author": "tom@organisms.be"}, {"index": "457", "colour": "orange", "code": "}\n", "error": "none", "author": "tom@organisms.be"}, {"index": "458", "colour": "orange", "code": "\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "459", "colour": "orange", "code": "_urifixer = re.compile('^([A-Za-z][A-Za-z0-9+-.]*://)(/*)(.*?)')\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "460", "colour": "orange", "code": "def _urljoin(base, uri):\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "461", "colour": "orange", "code": "    uri = _urifixer.sub(r'\\1\\3', uri)\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "462", "colour": "orange", "code": "    #try:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "463", "colour": "orange", "code": "    if not isinstance(uri, unicode):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "464", "colour": "orange", "code": "        uri = uri.decode('utf-8', 'ignore')\n", "error": "none", "author": "tom@organisms.be"}, {"index": "465", "colour": "orange", "code": "    uri = urlparse.urljoin(base, uri)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "466", "colour": "orange", "code": "    if not isinstance(uri, unicode):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "467", "colour": "orange", "code": "        return uri.decode('utf-8', 'ignore')\n", "error": "none", "author": "tom@organisms.be"}, {"index": "468", "colour": "orange", "code": "    return uri\n", "error": "none", "author": "tom@organisms.be"}, {"index": "469", "colour": "orange", "code": "    #except:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "470", "colour": "orange", "code": "    #    uri = urlparse.urlunparse([urllib.quote(part) for part in urlparse.urlparse(uri)])\n", "error": "none", "author": "tom@organisms.be"}, {"index": "471", "colour": "orange", "code": "    #    return urlparse.urljoin(base, uri)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "472", "colour": "orange", "code": "\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "473", "colour": "blue", "code": "class _FeedParserMixin:\n", "error": "R", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "474", "colour": "orange", "code": "    namespaces = {\n", "error": "none", "author": "tom@organisms.be"}, {"index": "475", "colour": "orange", "code": "        '': '',\n", "error": "none", "author": "tom@organisms.be"}, {"index": "476", "colour": "orange", "code": "        'http://backend.userland.com/rss': '',\n", "error": "none", "author": "tom@organisms.be"}, {"index": "477", "colour": "orange", "code": "        'http://blogs.law.harvard.edu/tech/rss': '',\n", "error": "none", "author": "tom@organisms.be"}, {"index": "478", "colour": "orange", "code": "        'http://purl.org/rss/1.0/': '',\n", "error": "none", "author": "tom@organisms.be"}, {"index": "479", "colour": "orange", "code": "        'http://my.netscape.com/rdf/simple/0.9/': '',\n", "error": "none", "author": "tom@organisms.be"}, {"index": "480", "colour": "orange", "code": "        'http://example.com/newformat#': '',\n", "error": "none", "author": "tom@organisms.be"}, {"index": "481", "colour": "orange", "code": "        'http://example.com/necho': '',\n", "error": "none", "author": "tom@organisms.be"}, {"index": "482", "colour": "orange", "code": "        'http://purl.org/echo/': '',\n", "error": "none", "author": "tom@organisms.be"}, {"index": "483", "colour": "orange", "code": "        'uri/of/echo/namespace#': '',\n", "error": "none", "author": "tom@organisms.be"}, {"index": "484", "colour": "orange", "code": "        'http://purl.org/pie/': '',\n", "error": "none", "author": "tom@organisms.be"}, {"index": "485", "colour": "orange", "code": "        'http://purl.org/atom/ns#': '',\n", "error": "none", "author": "tom@organisms.be"}, {"index": "486", "colour": "orange", "code": "        'http://www.w3.org/2005/Atom': '',\n", "error": "none", "author": "tom@organisms.be"}, {"index": "487", "colour": "orange", "code": "        'http://purl.org/rss/1.0/modules/rss091#': '',\n", "error": "none", "author": "tom@organisms.be"}, {"index": "488", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "489", "colour": "orange", "code": "        'http://webns.net/mvcb/':                                'admin',\n", "error": "none", "author": "tom@organisms.be"}, {"index": "490", "colour": "orange", "code": "        'http://purl.org/rss/1.0/modules/aggregation/':          'ag',\n", "error": "none", "author": "tom@organisms.be"}, {"index": "491", "colour": "orange", "code": "        'http://purl.org/rss/1.0/modules/annotate/':             'annotate',\n", "error": "none", "author": "tom@organisms.be"}, {"index": "492", "colour": "orange", "code": "        'http://media.tangent.org/rss/1.0/':                     'audio',\n", "error": "none", "author": "tom@organisms.be"}, {"index": "493", "colour": "orange", "code": "        'http://backend.userland.com/blogChannelModule':         'blogChannel',\n", "error": "none", "author": "tom@organisms.be"}, {"index": "494", "colour": "orange", "code": "        'http://web.resource.org/cc/':                           'cc',\n", "error": "none", "author": "tom@organisms.be"}, {"index": "495", "colour": "orange", "code": "        'http://backend.userland.com/creativeCommonsRssModule':  'creativeCommons',\n", "error": "none", "author": "tom@organisms.be"}, {"index": "496", "colour": "orange", "code": "        'http://purl.org/rss/1.0/modules/company':               'co',\n", "error": "none", "author": "tom@organisms.be"}, {"index": "497", "colour": "orange", "code": "        'http://purl.org/rss/1.0/modules/content/':              'content',\n", "error": "none", "author": "tom@organisms.be"}, {"index": "498", "colour": "orange", "code": "        'http://my.theinfo.org/changed/1.0/rss/':                'cp',\n", "error": "none", "author": "tom@organisms.be"}, {"index": "499", "colour": "orange", "code": "        'http://purl.org/dc/elements/1.1/':                      'dc',\n", "error": "none", "author": "tom@organisms.be"}, {"index": "500", "colour": "orange", "code": "        'http://purl.org/dc/terms/':                             'dcterms',\n", "error": "none", "author": "tom@organisms.be"}, {"index": "501", "colour": "orange", "code": "        'http://purl.org/rss/1.0/modules/email/':                'email',\n", "error": "none", "author": "tom@organisms.be"}, {"index": "502", "colour": "orange", "code": "        'http://purl.org/rss/1.0/modules/event/':                'ev',\n", "error": "none", "author": "tom@organisms.be"}, {"index": "503", "colour": "orange", "code": "        'http://rssnamespace.org/feedburner/ext/1.0':            'feedburner',\n", "error": "none", "author": "tom@organisms.be"}, {"index": "504", "colour": "orange", "code": "        'http://freshmeat.net/rss/fm/':                          'fm',\n", "error": "none", "author": "tom@organisms.be"}, {"index": "505", "colour": "orange", "code": "        'http://xmlns.com/foaf/0.1/':                            'foaf',\n", "error": "none", "author": "tom@organisms.be"}, {"index": "506", "colour": "orange", "code": "        'http://www.w3.org/2003/01/geo/wgs84_pos#':              'geo',\n", "error": "none", "author": "tom@organisms.be"}, {"index": "507", "colour": "orange", "code": "        'http://postneo.com/icbm/':                              'icbm',\n", "error": "none", "author": "tom@organisms.be"}, {"index": "508", "colour": "orange", "code": "        'http://purl.org/rss/1.0/modules/image/':                'image',\n", "error": "none", "author": "tom@organisms.be"}, {"index": "509", "colour": "orange", "code": "        'http://www.itunes.com/DTDs/PodCast-1.0.dtd':            'itunes',\n", "error": "none", "author": "tom@organisms.be"}, {"index": "510", "colour": "orange", "code": "        'http://example.com/DTDs/PodCast-1.0.dtd':               'itunes',\n", "error": "none", "author": "tom@organisms.be"}, {"index": "511", "colour": "orange", "code": "        'http://purl.org/rss/1.0/modules/link/':                 'l',\n", "error": "none", "author": "tom@organisms.be"}, {"index": "512", "colour": "orange", "code": "        'http://search.yahoo.com/mrss':                          'media',\n", "error": "none", "author": "tom@organisms.be"}, {"index": "513", "colour": "orange", "code": "        # Version 1.1.2 of the Media RSS spec added the trailing slash on the namespace\n", "error": "none", "author": "tom@organisms.be"}, {"index": "514", "colour": "orange", "code": "        'http://search.yahoo.com/mrss/':                         'media',\n", "error": "none", "author": "tom@organisms.be"}, {"index": "515", "colour": "orange", "code": "        'http://madskills.com/public/xml/rss/module/pingback/':  'pingback',\n", "error": "none", "author": "tom@organisms.be"}, {"index": "516", "colour": "orange", "code": "        'http://prismstandard.org/namespaces/1.2/basic/':        'prism',\n", "error": "none", "author": "tom@organisms.be"}, {"index": "517", "colour": "orange", "code": "        'http://www.w3.org/1999/02/22-rdf-syntax-ns#':           'rdf',\n", "error": "none", "author": "tom@organisms.be"}, {"index": "518", "colour": "orange", "code": "        'http://www.w3.org/2000/01/rdf-schema#':                 'rdfs',\n", "error": "none", "author": "tom@organisms.be"}, {"index": "519", "colour": "orange", "code": "        'http://purl.org/rss/1.0/modules/reference/':            'ref',\n", "error": "none", "author": "tom@organisms.be"}, {"index": "520", "colour": "orange", "code": "        'http://purl.org/rss/1.0/modules/richequiv/':            'reqv',\n", "error": "none", "author": "tom@organisms.be"}, {"index": "521", "colour": "orange", "code": "        'http://purl.org/rss/1.0/modules/search/':               'search',\n", "error": "none", "author": "tom@organisms.be"}, {"index": "522", "colour": "orange", "code": "        'http://purl.org/rss/1.0/modules/slash/':                'slash',\n", "error": "none", "author": "tom@organisms.be"}, {"index": "523", "colour": "orange", "code": "        'http://schemas.xmlsoap.org/soap/envelope/':             'soap',\n", "error": "none", "author": "tom@organisms.be"}, {"index": "524", "colour": "orange", "code": "        'http://purl.org/rss/1.0/modules/servicestatus/':        'ss',\n", "error": "none", "author": "tom@organisms.be"}, {"index": "525", "colour": "orange", "code": "        'http://hacks.benhammersley.com/rss/streaming/':         'str',\n", "error": "none", "author": "tom@organisms.be"}, {"index": "526", "colour": "orange", "code": "        'http://purl.org/rss/1.0/modules/subscription/':         'sub',\n", "error": "none", "author": "tom@organisms.be"}, {"index": "527", "colour": "orange", "code": "        'http://purl.org/rss/1.0/modules/syndication/':          'sy',\n", "error": "none", "author": "tom@organisms.be"}, {"index": "528", "colour": "orange", "code": "        'http://schemas.pocketsoap.com/rss/myDescModule/':       'szf',\n", "error": "none", "author": "tom@organisms.be"}, {"index": "529", "colour": "orange", "code": "        'http://purl.org/rss/1.0/modules/taxonomy/':             'taxo',\n", "error": "none", "author": "tom@organisms.be"}, {"index": "530", "colour": "orange", "code": "        'http://purl.org/rss/1.0/modules/threading/':            'thr',\n", "error": "none", "author": "tom@organisms.be"}, {"index": "531", "colour": "orange", "code": "        'http://purl.org/rss/1.0/modules/textinput/':            'ti',\n", "error": "none", "author": "tom@organisms.be"}, {"index": "532", "colour": "orange", "code": "        'http://madskills.com/public/xml/rss/module/trackback/': 'trackback',\n", "error": "none", "author": "tom@organisms.be"}, {"index": "533", "colour": "orange", "code": "        'http://wellformedweb.org/commentAPI/':                  'wfw',\n", "error": "none", "author": "tom@organisms.be"}, {"index": "534", "colour": "orange", "code": "        'http://purl.org/rss/1.0/modules/wiki/':                 'wiki',\n", "error": "none", "author": "tom@organisms.be"}, {"index": "535", "colour": "orange", "code": "        'http://www.w3.org/1999/xhtml':                          'xhtml',\n", "error": "none", "author": "tom@organisms.be"}, {"index": "536", "colour": "orange", "code": "        'http://www.w3.org/1999/xlink':                          'xlink',\n", "error": "none", "author": "tom@organisms.be"}, {"index": "537", "colour": "orange", "code": "        'http://www.w3.org/XML/1998/namespace':                  'xml',\n", "error": "none", "author": "tom@organisms.be"}, {"index": "538", "colour": "orange", "code": "    }\n", "error": "none", "author": "tom@organisms.be"}, {"index": "539", "colour": "orange", "code": "    _matchnamespaces = {}\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "540", "colour": "orange", "code": "\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "541", "colour": "orange", "code": "    can_be_relative_uri = set(['link', 'id', 'wfw_comment', 'wfw_commentrss', 'docs', 'url', 'href', 'comments', 'icon', 'logo'])\n", "error": "none", "author": "tom@organisms.be"}, {"index": "542", "colour": "orange", "code": "    can_contain_relative_uris = set(['content', 'title', 'summary', 'info', 'tagline', 'subtitle', 'copyright', 'rights', 'description'])\n", "error": "none", "author": "tom@organisms.be"}, {"index": "543", "colour": "orange", "code": "    can_contain_dangerous_markup = set(['content', 'title', 'summary', 'info', 'tagline', 'subtitle', 'copyright', 'rights', 'description'])\n", "error": "none", "author": "tom@organisms.be"}, {"index": "544", "colour": "orange", "code": "    html_types = [u'text/html', u'application/xhtml+xml']\n", "error": "none", "author": "tom@organisms.be"}, {"index": "545", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "546", "colour": "orange", "code": "    def __init__(self, baseuri=None, baselang=None, encoding=u'utf-8'):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "547", "colour": "orange", "code": "        if not self._matchnamespaces:\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "548", "colour": "orange", "code": "            for k, v in self.namespaces.items():\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "549", "colour": "orange", "code": "                self._matchnamespaces[k.lower()] = v\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "550", "colour": "orange", "code": "        self.feeddata = FeedParserDict() # feed-level data\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "551", "colour": "orange", "code": "        self.encoding = encoding # character encoding\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "552", "colour": "orange", "code": "        self.entries = [] # list of entry-level data\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "553", "colour": "orange", "code": "        self.version = u'' # feed type/version, see SUPPORTED_VERSIONS\n", "error": "none", "author": "tom@organisms.be"}, {"index": "554", "colour": "orange", "code": "        self.namespacesInUse = {} # dictionary of namespaces defined by the feed\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "555", "colour": "orange", "code": "\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "556", "colour": "orange", "code": "        # the following are used internally to track state;\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "557", "colour": "orange", "code": "        # this is really out of control and should be refactored\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "558", "colour": "orange", "code": "        self.infeed = 0\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "559", "colour": "orange", "code": "        self.inentry = 0\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "560", "colour": "orange", "code": "        self.incontent = 0\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "561", "colour": "orange", "code": "        self.intextinput = 0\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "562", "colour": "orange", "code": "        self.inimage = 0\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "563", "colour": "orange", "code": "        self.inauthor = 0\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "564", "colour": "orange", "code": "        self.incontributor = 0\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "565", "colour": "orange", "code": "        self.inpublisher = 0\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "566", "colour": "orange", "code": "        self.insource = 0\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "567", "colour": "orange", "code": "        self.sourcedata = FeedParserDict()\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "568", "colour": "orange", "code": "        self.contentparams = FeedParserDict()\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "569", "colour": "orange", "code": "        self._summaryKey = None\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "570", "colour": "orange", "code": "        self.namespacemap = {}\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "571", "colour": "orange", "code": "        self.elementstack = []\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "572", "colour": "orange", "code": "        self.basestack = []\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "573", "colour": "orange", "code": "        self.langstack = []\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "574", "colour": "orange", "code": "        self.baseuri = baseuri or u''\n", "error": "none", "author": "tom@organisms.be"}, {"index": "575", "colour": "orange", "code": "        self.lang = baselang or None\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "576", "colour": "orange", "code": "        self.svgOK = 0\n", "error": "none", "author": "tom@organisms.be"}, {"index": "577", "colour": "orange", "code": "        self.title_depth = -1\n", "error": "none", "author": "tom@organisms.be"}, {"index": "578", "colour": "orange", "code": "        self.depth = 0\n", "error": "none", "author": "tom@organisms.be"}, {"index": "579", "colour": "orange", "code": "        if baselang:\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "580", "colour": "orange", "code": "            self.feeddata['language'] = baselang.replace('_','-')\n", "error": "none", "author": "tom@organisms.be"}, {"index": "581", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "582", "colour": "orange", "code": "        # A map of the following form:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "583", "colour": "orange", "code": "        #     {\n", "error": "none", "author": "tom@organisms.be"}, {"index": "584", "colour": "orange", "code": "        #         object_that_value_is_set_on: {\n", "error": "none", "author": "tom@organisms.be"}, {"index": "585", "colour": "orange", "code": "        #             property_name: depth_of_node_property_was_extracted_from,\n", "error": "none", "author": "tom@organisms.be"}, {"index": "586", "colour": "orange", "code": "        #             other_property: depth_of_node_property_was_extracted_from,\n", "error": "none", "author": "tom@organisms.be"}, {"index": "587", "colour": "orange", "code": "        #         },\n", "error": "none", "author": "tom@organisms.be"}, {"index": "588", "colour": "orange", "code": "        #     }\n", "error": "none", "author": "tom@organisms.be"}, {"index": "589", "colour": "orange", "code": "        self.property_depth_map = {}\n", "error": "none", "author": "tom@organisms.be"}, {"index": "590", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "591", "colour": "orange", "code": "    def _normalize_attributes(self, kv):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "592", "colour": "orange", "code": "        k = kv[0].lower()\n", "error": "none", "author": "tom@organisms.be"}, {"index": "593", "colour": "orange", "code": "        v = k in ('rel', 'type') and kv[1].lower() or kv[1]\n", "error": "none", "author": "tom@organisms.be"}, {"index": "594", "colour": "orange", "code": "        # the sgml parser doesn't handle entities in attributes, nor\n", "error": "none", "author": "tom@organisms.be"}, {"index": "595", "colour": "orange", "code": "        # does it pass the attribute values through as unicode, while\n", "error": "none", "author": "tom@organisms.be"}, {"index": "596", "colour": "orange", "code": "        # strict xml parsers do -- account for this difference\n", "error": "none", "author": "tom@organisms.be"}, {"index": "597", "colour": "orange", "code": "        if isinstance(self, _LooseFeedParser):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "598", "colour": "orange", "code": "            v = v.replace('&amp;', '&')\n", "error": "none", "author": "tom@organisms.be"}, {"index": "599", "colour": "orange", "code": "            if not isinstance(v, unicode):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "600", "colour": "orange", "code": "                v = v.decode('utf-8')\n", "error": "none", "author": "tom@organisms.be"}, {"index": "601", "colour": "orange", "code": "        return (k, v)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "602", "colour": "orange", "code": "\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "603", "colour": "blue", "code": "    def unknown_starttag(self, tag, attrs):\n", "error": "R", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "604", "colour": "orange", "code": "        # increment depth counter\n", "error": "none", "author": "tom@organisms.be"}, {"index": "605", "colour": "orange", "code": "        self.depth += 1\n", "error": "none", "author": "tom@organisms.be"}, {"index": "606", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "607", "colour": "orange", "code": "        # normalize attrs\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "608", "colour": "green", "code": "        attrs = map(self._normalize_attributes, attrs)\n", "error": "W", "author": "tom@organisms.be"}, {"index": "609", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "610", "colour": "orange", "code": "        # track xml:base and xml:lang\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "611", "colour": "orange", "code": "        attrsD = dict(attrs)\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "612", "colour": "orange", "code": "        baseuri = attrsD.get('xml:base', attrsD.get('base')) or self.baseuri\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "613", "colour": "orange", "code": "        if not isinstance(baseuri, unicode):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "614", "colour": "orange", "code": "            baseuri = baseuri.decode(self.encoding, 'ignore')\n", "error": "none", "author": "tom@organisms.be"}, {"index": "615", "colour": "orange", "code": "        # ensure that self.baseuri is always an absolute URI that\n", "error": "none", "author": "tom@organisms.be"}, {"index": "616", "colour": "orange", "code": "        # uses a whitelisted URI scheme (e.g. not `javscript:`)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "617", "colour": "orange", "code": "        if self.baseuri:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "618", "colour": "orange", "code": "            self.baseuri = _makeSafeAbsoluteURI(self.baseuri, baseuri) or self.baseuri\n", "error": "none", "author": "tom@organisms.be"}, {"index": "619", "colour": "orange", "code": "        else:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "620", "colour": "orange", "code": "            self.baseuri = _urljoin(self.baseuri, baseuri)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "621", "colour": "orange", "code": "        lang = attrsD.get('xml:lang', attrsD.get('lang'))\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "622", "colour": "orange", "code": "        if lang == '':\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "623", "colour": "orange", "code": "            # xml:lang could be explicitly set to '', we need to capture that\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "624", "colour": "orange", "code": "            lang = None\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "625", "colour": "orange", "code": "        elif lang is None:\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "626", "colour": "orange", "code": "            # if no xml:lang is specified, use parent lang\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "627", "colour": "orange", "code": "            lang = self.lang\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "628", "colour": "orange", "code": "        if lang:\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "629", "colour": "orange", "code": "            if tag in ('feed', 'rss', 'rdf:RDF'):\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "630", "colour": "orange", "code": "                self.feeddata['language'] = lang.replace('_','-')\n", "error": "none", "author": "tom@organisms.be"}, {"index": "631", "colour": "orange", "code": "        self.lang = lang\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "632", "colour": "orange", "code": "        self.basestack.append(self.baseuri)\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "633", "colour": "orange", "code": "        self.langstack.append(lang)\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "634", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "635", "colour": "orange", "code": "        # track namespaces\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "636", "colour": "orange", "code": "        for prefix, uri in attrs:\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "637", "colour": "orange", "code": "            if prefix.startswith('xmlns:'):\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "638", "colour": "orange", "code": "                self.trackNamespace(prefix[6:], uri)\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "639", "colour": "orange", "code": "            elif prefix == 'xmlns':\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "640", "colour": "orange", "code": "                self.trackNamespace(None, uri)\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "641", "colour": "orange", "code": "\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "642", "colour": "orange", "code": "        # track inline content\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "643", "colour": "orange", "code": "        if self.incontent and not self.contentparams.get('type', u'xml').endswith(u'xml'):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "644", "colour": "orange", "code": "            if tag in ('xhtml:div', 'div'):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "645", "colour": "orange", "code": "                return # typepad does this 10/2007\n", "error": "none", "author": "tom@organisms.be"}, {"index": "646", "colour": "orange", "code": "            # element declared itself as escaped markup, but it isn't really\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "647", "colour": "orange", "code": "            self.contentparams['type'] = u'application/xhtml+xml'\n", "error": "none", "author": "tom@organisms.be"}, {"index": "648", "colour": "orange", "code": "        if self.incontent and self.contentparams.get('type') == u'application/xhtml+xml':\n", "error": "none", "author": "tom@organisms.be"}, {"index": "649", "colour": "green", "code": "            if tag.find(':') <> -1:\n", "error": "W", "author": "tom@organisms.be"}, {"index": "650", "colour": "orange", "code": "                prefix, tag = tag.split(':', 1)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "651", "colour": "orange", "code": "                namespace = self.namespacesInUse.get(prefix, '')\n", "error": "none", "author": "tom@organisms.be"}, {"index": "652", "colour": "orange", "code": "                if tag=='math' and namespace=='http://www.w3.org/1998/Math/MathML':\n", "error": "none", "author": "tom@organisms.be"}, {"index": "653", "colour": "orange", "code": "                    attrs.append(('xmlns',namespace))\n", "error": "none", "author": "tom@organisms.be"}, {"index": "654", "colour": "orange", "code": "                if tag=='svg' and namespace=='http://www.w3.org/2000/svg':\n", "error": "none", "author": "tom@organisms.be"}, {"index": "655", "colour": "orange", "code": "                    attrs.append(('xmlns',namespace))\n", "error": "none", "author": "tom@organisms.be"}, {"index": "656", "colour": "orange", "code": "            if tag == 'svg':\n", "error": "none", "author": "tom@organisms.be"}, {"index": "657", "colour": "orange", "code": "                self.svgOK += 1\n", "error": "none", "author": "tom@organisms.be"}, {"index": "658", "colour": "orange", "code": "            return self.handle_data('<%s%s>' % (tag, self.strattrs(attrs)), escape=0)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "659", "colour": "orange", "code": "\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "660", "colour": "orange", "code": "        # match namespaces\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "661", "colour": "green", "code": "        if tag.find(':') <> -1:\n", "error": "W", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "662", "colour": "orange", "code": "            prefix, suffix = tag.split(':', 1)\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "663", "colour": "orange", "code": "        else:\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "664", "colour": "orange", "code": "            prefix, suffix = '', tag\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "665", "colour": "orange", "code": "        prefix = self.namespacemap.get(prefix, prefix)\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "666", "colour": "orange", "code": "        if prefix:\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "667", "colour": "orange", "code": "            prefix = prefix + '_'\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "668", "colour": "orange", "code": "\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "669", "colour": "orange", "code": "        # special hack for better tracking of empty textinput/image elements in illformed feeds\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "670", "colour": "orange", "code": "        if (not prefix) and tag not in ('title', 'link', 'description', 'name'):\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "671", "colour": "orange", "code": "            self.intextinput = 0\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "672", "colour": "orange", "code": "        if (not prefix) and tag not in ('title', 'link', 'description', 'url', 'href', 'width', 'height'):\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "673", "colour": "orange", "code": "            self.inimage = 0\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "674", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "675", "colour": "orange", "code": "        # call special handler (if defined) or default handler\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "676", "colour": "orange", "code": "        methodname = '_start_' + prefix + suffix\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "677", "colour": "orange", "code": "        try:\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "678", "colour": "orange", "code": "            method = getattr(self, methodname)\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "679", "colour": "orange", "code": "            return method(attrsD)\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "680", "colour": "orange", "code": "        except AttributeError:\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "681", "colour": "orange", "code": "            # Since there's no handler or something has gone wrong we explicitly add the element and its attributes\n", "error": "none", "author": "tom@organisms.be"}, {"index": "682", "colour": "orange", "code": "            unknown_tag = prefix + suffix\n", "error": "none", "author": "tom@organisms.be"}, {"index": "683", "colour": "orange", "code": "            if len(attrsD) == 0:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "684", "colour": "orange", "code": "                # No attributes so merge it into the encosing dictionary\n", "error": "none", "author": "tom@organisms.be"}, {"index": "685", "colour": "orange", "code": "                return self.push(unknown_tag, 1)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "686", "colour": "orange", "code": "            else:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "687", "colour": "orange", "code": "                # Has attributes so create it in its own dictionary\n", "error": "none", "author": "tom@organisms.be"}, {"index": "688", "colour": "orange", "code": "                context = self._getContext()\n", "error": "none", "author": "tom@organisms.be"}, {"index": "689", "colour": "orange", "code": "                context[unknown_tag] = attrsD\n", "error": "none", "author": "tom@organisms.be"}, {"index": "690", "colour": "orange", "code": "\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "691", "colour": "blue", "code": "    def unknown_endtag(self, tag):\n", "error": "R", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "692", "colour": "orange", "code": "        # match namespaces\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "693", "colour": "green", "code": "        if tag.find(':') <> -1:\n", "error": "W", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "694", "colour": "orange", "code": "            prefix, suffix = tag.split(':', 1)\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "695", "colour": "orange", "code": "        else:\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "696", "colour": "orange", "code": "            prefix, suffix = '', tag\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "697", "colour": "orange", "code": "        prefix = self.namespacemap.get(prefix, prefix)\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "698", "colour": "orange", "code": "        if prefix:\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "699", "colour": "orange", "code": "            prefix = prefix + '_'\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "700", "colour": "orange", "code": "        if suffix == 'svg' and self.svgOK:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "701", "colour": "orange", "code": "            self.svgOK -= 1\n", "error": "none", "author": "tom@organisms.be"}, {"index": "702", "colour": "orange", "code": "\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "703", "colour": "orange", "code": "        # call special handler (if defined) or default handler\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "704", "colour": "orange", "code": "        methodname = '_end_' + prefix + suffix\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "705", "colour": "orange", "code": "        try:\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "706", "colour": "orange", "code": "            if self.svgOK:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "707", "colour": "orange", "code": "                raise AttributeError()\n", "error": "none", "author": "tom@organisms.be"}, {"index": "708", "colour": "orange", "code": "            method = getattr(self, methodname)\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "709", "colour": "orange", "code": "            method()\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "710", "colour": "orange", "code": "        except AttributeError:\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "711", "colour": "orange", "code": "            self.pop(prefix + suffix)\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "712", "colour": "orange", "code": "\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "713", "colour": "orange", "code": "        # track inline content\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "714", "colour": "orange", "code": "        if self.incontent and not self.contentparams.get('type', u'xml').endswith(u'xml'):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "715", "colour": "orange", "code": "            # element declared itself as escaped markup, but it isn't really\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "716", "colour": "orange", "code": "            if tag in ('xhtml:div', 'div'):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "717", "colour": "orange", "code": "                return # typepad does this 10/2007\n", "error": "none", "author": "tom@organisms.be"}, {"index": "718", "colour": "orange", "code": "            self.contentparams['type'] = u'application/xhtml+xml'\n", "error": "none", "author": "tom@organisms.be"}, {"index": "719", "colour": "orange", "code": "        if self.incontent and self.contentparams.get('type') == u'application/xhtml+xml':\n", "error": "none", "author": "tom@organisms.be"}, {"index": "720", "colour": "orange", "code": "            tag = tag.split(':')[-1]\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "721", "colour": "orange", "code": "            self.handle_data('</%s>' % tag, escape=0)\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "722", "colour": "orange", "code": "\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "723", "colour": "orange", "code": "        # track xml:base and xml:lang going out of scope\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "724", "colour": "orange", "code": "        if self.basestack:\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "725", "colour": "orange", "code": "            self.basestack.pop()\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "726", "colour": "orange", "code": "            if self.basestack and self.basestack[-1]:\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "727", "colour": "orange", "code": "                self.baseuri = self.basestack[-1]\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "728", "colour": "orange", "code": "        if self.langstack:\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "729", "colour": "orange", "code": "            self.langstack.pop()\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "730", "colour": "orange", "code": "            if self.langstack: # and (self.langstack[-1] is not None):\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "731", "colour": "orange", "code": "                self.lang = self.langstack[-1]\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "732", "colour": "orange", "code": "\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "733", "colour": "orange", "code": "        self.depth -= 1\n", "error": "none", "author": "tom@organisms.be"}, {"index": "734", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "735", "colour": "orange", "code": "    def handle_charref(self, ref):\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "736", "colour": "orange", "code": "        # called for each character reference, e.g. for '&#160;', ref will be '160'\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "737", "colour": "orange", "code": "        if not self.elementstack:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "738", "colour": "orange", "code": "            return\n", "error": "none", "author": "tom@organisms.be"}, {"index": "739", "colour": "orange", "code": "        ref = ref.lower()\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "740", "colour": "orange", "code": "        if ref in ('34', '38', '39', '60', '62', 'x22', 'x26', 'x27', 'x3c', 'x3e'):\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "741", "colour": "orange", "code": "            text = '&#%s;' % ref\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "742", "colour": "orange", "code": "        else:\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "743", "colour": "orange", "code": "            if ref[0] == 'x':\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "744", "colour": "orange", "code": "                c = int(ref[1:], 16)\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "745", "colour": "orange", "code": "            else:\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "746", "colour": "orange", "code": "                c = int(ref)\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "747", "colour": "orange", "code": "            text = unichr(c).encode('utf-8')\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "748", "colour": "orange", "code": "        self.elementstack[-1][2].append(text)\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "749", "colour": "orange", "code": "\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "750", "colour": "orange", "code": "    def handle_entityref(self, ref):\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "751", "colour": "orange", "code": "        # called for each entity reference, e.g. for '&copy;', ref will be 'copy'\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "752", "colour": "orange", "code": "        if not self.elementstack:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "753", "colour": "orange", "code": "            return\n", "error": "none", "author": "tom@organisms.be"}, {"index": "754", "colour": "orange", "code": "        if ref in ('lt', 'gt', 'quot', 'amp', 'apos'):\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "755", "colour": "orange", "code": "            text = '&%s;' % ref\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "756", "colour": "orange", "code": "        elif ref in self.entities:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "757", "colour": "orange", "code": "            text = self.entities[ref]\n", "error": "none", "author": "tom@organisms.be"}, {"index": "758", "colour": "orange", "code": "            if text.startswith('&#') and text.endswith(';'):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "759", "colour": "orange", "code": "                return self.handle_entityref(text)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "760", "colour": "orange", "code": "        else:\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "761", "colour": "orange", "code": "            try:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "762", "colour": "orange", "code": "                name2codepoint[ref]\n", "error": "none", "author": "tom@organisms.be"}, {"index": "763", "colour": "orange", "code": "            except KeyError:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "764", "colour": "orange", "code": "                text = '&%s;' % ref\n", "error": "none", "author": "tom@organisms.be"}, {"index": "765", "colour": "orange", "code": "            else:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "766", "colour": "orange", "code": "                text = unichr(name2codepoint[ref]).encode('utf-8')\n", "error": "none", "author": "tom@organisms.be"}, {"index": "767", "colour": "orange", "code": "        self.elementstack[-1][2].append(text)\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "768", "colour": "orange", "code": "\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "769", "colour": "orange", "code": "    def handle_data(self, text, escape=1):\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "770", "colour": "orange", "code": "        # called for each block of plain text, i.e. outside of any tag and\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "771", "colour": "orange", "code": "        # not containing any character or entity references\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "772", "colour": "orange", "code": "        if not self.elementstack:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "773", "colour": "orange", "code": "            return\n", "error": "none", "author": "tom@organisms.be"}, {"index": "774", "colour": "orange", "code": "        if escape and self.contentparams.get('type') == u'application/xhtml+xml':\n", "error": "none", "author": "tom@organisms.be"}, {"index": "775", "colour": "orange", "code": "            text = _xmlescape(text)\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "776", "colour": "orange", "code": "        self.elementstack[-1][2].append(text)\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "777", "colour": "orange", "code": "\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "778", "colour": "orange", "code": "    def handle_comment(self, text):\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "779", "colour": "orange", "code": "        # called for each comment, e.g. <!-- insert message here -->\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "780", "colour": "orange", "code": "        pass\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "781", "colour": "orange", "code": "\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "782", "colour": "orange", "code": "    def handle_pi(self, text):\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "783", "colour": "orange", "code": "        # called for each processing instruction, e.g. <?instruction>\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "784", "colour": "orange", "code": "        pass\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "785", "colour": "orange", "code": "\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "786", "colour": "orange", "code": "    def handle_decl(self, text):\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "787", "colour": "orange", "code": "        pass\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "788", "colour": "orange", "code": "\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "789", "colour": "orange", "code": "    def parse_declaration(self, i):\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "790", "colour": "orange", "code": "        # override internal declaration handler to handle CDATA blocks\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "791", "colour": "orange", "code": "        if self.rawdata[i:i+9] == '<![CDATA[':\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "792", "colour": "orange", "code": "            k = self.rawdata.find(']]>', i)\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "793", "colour": "orange", "code": "            if k == -1:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "794", "colour": "orange", "code": "                # CDATA block began but didn't finish\n", "error": "none", "author": "tom@organisms.be"}, {"index": "795", "colour": "orange", "code": "                k = len(self.rawdata)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "796", "colour": "orange", "code": "                return k\n", "error": "none", "author": "tom@organisms.be"}, {"index": "797", "colour": "orange", "code": "            self.handle_data(_xmlescape(self.rawdata[i+9:k]), 0)\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "798", "colour": "orange", "code": "            return k+3\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "799", "colour": "orange", "code": "        else:\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "800", "colour": "orange", "code": "            k = self.rawdata.find('>', i)\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "801", "colour": "orange", "code": "            if k >= 0:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "802", "colour": "orange", "code": "                return k+1\n", "error": "none", "author": "tom@organisms.be"}, {"index": "803", "colour": "orange", "code": "            else:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "804", "colour": "orange", "code": "                # We have an incomplete CDATA block.\n", "error": "none", "author": "tom@organisms.be"}, {"index": "805", "colour": "orange", "code": "                return k\n", "error": "none", "author": "tom@organisms.be"}, {"index": "806", "colour": "orange", "code": "\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "807", "colour": "blue", "code": "    def mapContentType(self, contentType):\n", "error": "R", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "808", "colour": "orange", "code": "        contentType = contentType.lower()\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "809", "colour": "orange", "code": "        if contentType == 'text' or contentType == 'plain':\n", "error": "none", "author": "tom@organisms.be"}, {"index": "810", "colour": "orange", "code": "            contentType = u'text/plain'\n", "error": "none", "author": "tom@organisms.be"}, {"index": "811", "colour": "orange", "code": "        elif contentType == 'html':\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "812", "colour": "orange", "code": "            contentType = u'text/html'\n", "error": "none", "author": "tom@organisms.be"}, {"index": "813", "colour": "orange", "code": "        elif contentType == 'xhtml':\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "814", "colour": "orange", "code": "            contentType = u'application/xhtml+xml'\n", "error": "none", "author": "tom@organisms.be"}, {"index": "815", "colour": "orange", "code": "        return contentType\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "816", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "817", "colour": "orange", "code": "    def trackNamespace(self, prefix, uri):\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "818", "colour": "orange", "code": "        loweruri = uri.lower()\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "819", "colour": "orange", "code": "        if not self.version:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "820", "colour": "orange", "code": "            if (prefix, loweruri) == (None, 'http://my.netscape.com/rdf/simple/0.9/'):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "821", "colour": "orange", "code": "                self.version = u'rss090'\n", "error": "none", "author": "tom@organisms.be"}, {"index": "822", "colour": "orange", "code": "            elif loweruri == 'http://purl.org/rss/1.0/':\n", "error": "none", "author": "tom@organisms.be"}, {"index": "823", "colour": "orange", "code": "                self.version = u'rss10'\n", "error": "none", "author": "tom@organisms.be"}, {"index": "824", "colour": "orange", "code": "            elif loweruri == 'http://www.w3.org/2005/atom':\n", "error": "none", "author": "tom@organisms.be"}, {"index": "825", "colour": "orange", "code": "                self.version = u'atom10'\n", "error": "none", "author": "tom@organisms.be"}, {"index": "826", "colour": "green", "code": "        if loweruri.find(u'backend.userland.com/rss') <> -1:\n", "error": "W", "author": "tom@organisms.be"}, {"index": "827", "colour": "orange", "code": "            # match any backend.userland.com namespace\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "828", "colour": "orange", "code": "            uri = u'http://backend.userland.com/rss'\n", "error": "none", "author": "tom@organisms.be"}, {"index": "829", "colour": "orange", "code": "            loweruri = uri\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "830", "colour": "orange", "code": "        if loweruri in self._matchnamespaces:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "831", "colour": "orange", "code": "            self.namespacemap[prefix] = self._matchnamespaces[loweruri]\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "832", "colour": "orange", "code": "            self.namespacesInUse[self._matchnamespaces[loweruri]] = uri\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "833", "colour": "orange", "code": "        else:\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "834", "colour": "orange", "code": "            self.namespacesInUse[prefix or ''] = uri\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "835", "colour": "orange", "code": "\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "836", "colour": "orange", "code": "    def resolveURI(self, uri):\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "837", "colour": "orange", "code": "        return _urljoin(self.baseuri or u'', uri)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "838", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "839", "colour": "blue", "code": "    def decodeEntities(self, element, data):\n", "error": "R", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "840", "colour": "orange", "code": "        return data\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "841", "colour": "orange", "code": "\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "842", "colour": "blue", "code": "    def strattrs(self, attrs):\n", "error": "R", "author": "tom@organisms.be"}, {"index": "843", "colour": "orange", "code": "        return ''.join([' %s=\"%s\"' % (t[0],_xmlescape(t[1],{'\"':'&quot;'})) for t in attrs])\n", "error": "none", "author": "tom@organisms.be"}, {"index": "844", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "845", "colour": "orange", "code": "    def push(self, element, expectingText):\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "846", "colour": "orange", "code": "        self.elementstack.append([element, expectingText, []])\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "847", "colour": "orange", "code": "\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "848", "colour": "blue", "code": "    def pop(self, element, stripWhitespace=1):\n", "error": "R", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "849", "colour": "orange", "code": "        if not self.elementstack:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "850", "colour": "orange", "code": "            return\n", "error": "none", "author": "tom@organisms.be"}, {"index": "851", "colour": "orange", "code": "        if self.elementstack[-1][0] != element:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "852", "colour": "orange", "code": "            return\n", "error": "none", "author": "tom@organisms.be"}, {"index": "853", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "854", "colour": "orange", "code": "        element, expectingText, pieces = self.elementstack.pop()\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "855", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "856", "colour": "orange", "code": "        if self.version == u'atom10' and self.contentparams.get('type', u'text') == u'application/xhtml+xml':\n", "error": "none", "author": "tom@organisms.be"}, {"index": "857", "colour": "orange", "code": "            # remove enclosing child element, but only if it is a <div> and\n", "error": "none", "author": "tom@organisms.be"}, {"index": "858", "colour": "orange", "code": "            # only if all the remaining content is nested underneath it.\n", "error": "none", "author": "tom@organisms.be"}, {"index": "859", "colour": "orange", "code": "            # This means that the divs would be retained in the following:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "860", "colour": "orange", "code": "            #    <div>foo</div><div>bar</div>\n", "error": "none", "author": "tom@organisms.be"}, {"index": "861", "colour": "orange", "code": "            while pieces and len(pieces)>1 and not pieces[-1].strip():\n", "error": "none", "author": "tom@organisms.be"}, {"index": "862", "colour": "orange", "code": "                del pieces[-1]\n", "error": "none", "author": "tom@organisms.be"}, {"index": "863", "colour": "orange", "code": "            while pieces and len(pieces)>1 and not pieces[0].strip():\n", "error": "none", "author": "tom@organisms.be"}, {"index": "864", "colour": "orange", "code": "                del pieces[0]\n", "error": "none", "author": "tom@organisms.be"}, {"index": "865", "colour": "orange", "code": "            if pieces and (pieces[0] == '<div>' or pieces[0].startswith('<div ')) and pieces[-1]=='</div>':\n", "error": "none", "author": "tom@organisms.be"}, {"index": "866", "colour": "orange", "code": "                depth = 0\n", "error": "none", "author": "tom@organisms.be"}, {"index": "867", "colour": "orange", "code": "                for piece in pieces[:-1]:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "868", "colour": "orange", "code": "                    if piece.startswith('</'):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "869", "colour": "orange", "code": "                        depth -= 1\n", "error": "none", "author": "tom@organisms.be"}, {"index": "870", "colour": "orange", "code": "                        if depth == 0:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "871", "colour": "orange", "code": "                            break\n", "error": "none", "author": "tom@organisms.be"}, {"index": "872", "colour": "orange", "code": "                    elif piece.startswith('<') and not piece.endswith('/>'):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "873", "colour": "orange", "code": "                        depth += 1\n", "error": "none", "author": "tom@organisms.be"}, {"index": "874", "colour": "orange", "code": "                else:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "875", "colour": "orange", "code": "                    pieces = pieces[1:-1]\n", "error": "none", "author": "tom@organisms.be"}, {"index": "876", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "877", "colour": "orange", "code": "        # Ensure each piece is a str for Python 3\n", "error": "none", "author": "tom@organisms.be"}, {"index": "878", "colour": "orange", "code": "        for (i, v) in enumerate(pieces):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "879", "colour": "orange", "code": "            if not isinstance(v, unicode):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "880", "colour": "orange", "code": "                pieces[i] = v.decode('utf-8')\n", "error": "none", "author": "tom@organisms.be"}, {"index": "881", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "882", "colour": "orange", "code": "        output = u''.join(pieces)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "883", "colour": "orange", "code": "        if stripWhitespace:\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "884", "colour": "orange", "code": "            output = output.strip()\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "885", "colour": "orange", "code": "        if not expectingText:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "886", "colour": "orange", "code": "            return output\n", "error": "none", "author": "tom@organisms.be"}, {"index": "887", "colour": "orange", "code": "\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "888", "colour": "orange", "code": "        # decode base64 content\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "889", "colour": "orange", "code": "        if base64 and self.contentparams.get('base64', 0):\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "890", "colour": "orange", "code": "            try:\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "891", "colour": "orange", "code": "                output = _base64decode(output)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "892", "colour": "orange", "code": "            except binascii.Error:\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "893", "colour": "orange", "code": "                pass\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "894", "colour": "orange", "code": "            except binascii.Incomplete:\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "895", "colour": "orange", "code": "                pass\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "896", "colour": "orange", "code": "            except TypeError:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "897", "colour": "orange", "code": "                # In Python 3, base64 takes and outputs bytes, not str\n", "error": "none", "author": "tom@organisms.be"}, {"index": "898", "colour": "orange", "code": "                # This may not be the most correct way to accomplish this\n", "error": "none", "author": "tom@organisms.be"}, {"index": "899", "colour": "orange", "code": "                output = _base64decode(output.encode('utf-8')).decode('utf-8')\n", "error": "none", "author": "tom@organisms.be"}, {"index": "900", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "901", "colour": "orange", "code": "        # resolve relative URIs\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "902", "colour": "orange", "code": "        if (element in self.can_be_relative_uri) and output:\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "903", "colour": "orange", "code": "            output = self.resolveURI(output)\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "904", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "905", "colour": "orange", "code": "        # decode entities within embedded markup\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "906", "colour": "orange", "code": "        if not self.contentparams.get('base64', 0):\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "907", "colour": "orange", "code": "            output = self.decodeEntities(element, output)\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "908", "colour": "orange", "code": "\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "909", "colour": "orange", "code": "        # some feed formats require consumers to guess\n", "error": "none", "author": "tom@organisms.be"}, {"index": "910", "colour": "orange", "code": "        # whether the content is html or plain text\n", "error": "none", "author": "tom@organisms.be"}, {"index": "911", "colour": "orange", "code": "        if not self.version.startswith(u'atom') and self.contentparams.get('type') == u'text/plain':\n", "error": "none", "author": "tom@organisms.be"}, {"index": "912", "colour": "orange", "code": "            if self.lookslikehtml(output):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "913", "colour": "orange", "code": "                self.contentparams['type'] = u'text/html'\n", "error": "none", "author": "tom@organisms.be"}, {"index": "914", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "915", "colour": "orange", "code": "        # remove temporary cruft from contentparams\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "916", "colour": "orange", "code": "        try:\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "917", "colour": "orange", "code": "            del self.contentparams['mode']\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "918", "colour": "orange", "code": "        except KeyError:\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "919", "colour": "orange", "code": "            pass\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "920", "colour": "orange", "code": "        try:\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "921", "colour": "orange", "code": "            del self.contentparams['base64']\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "922", "colour": "orange", "code": "        except KeyError:\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "923", "colour": "orange", "code": "            pass\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "924", "colour": "orange", "code": "\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "925", "colour": "orange", "code": "        is_htmlish = self.mapContentType(self.contentparams.get('type', u'text/html')) in self.html_types\n", "error": "none", "author": "tom@organisms.be"}, {"index": "926", "colour": "orange", "code": "        # resolve relative URIs within embedded markup\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "927", "colour": "orange", "code": "        if is_htmlish and RESOLVE_RELATIVE_URIS:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "928", "colour": "orange", "code": "            if element in self.can_contain_relative_uris:\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "929", "colour": "orange", "code": "                output = _resolveRelativeURIs(output, self.baseuri, self.encoding, self.contentparams.get('type', u'text/html'))\n", "error": "none", "author": "tom@organisms.be"}, {"index": "930", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "931", "colour": "orange", "code": "        # parse microformats\n", "error": "none", "author": "tom@organisms.be"}, {"index": "932", "colour": "orange", "code": "        # (must do this before sanitizing because some microformats\n", "error": "none", "author": "tom@organisms.be"}, {"index": "933", "colour": "orange", "code": "        # rely on elements that we sanitize)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "934", "colour": "orange", "code": "        if PARSE_MICROFORMATS and is_htmlish and element in ['content', 'description', 'summary']:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "935", "colour": "orange", "code": "            mfresults = _parseMicroformats(output, self.baseuri, self.encoding)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "936", "colour": "orange", "code": "            if mfresults:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "937", "colour": "orange", "code": "                for tag in mfresults.get('tags', []):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "938", "colour": "orange", "code": "                    self._addTag(tag['term'], tag['scheme'], tag['label'])\n", "error": "none", "author": "tom@organisms.be"}, {"index": "939", "colour": "orange", "code": "                for enclosure in mfresults.get('enclosures', []):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "940", "colour": "orange", "code": "                    self._start_enclosure(enclosure)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "941", "colour": "orange", "code": "                for xfn in mfresults.get('xfn', []):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "942", "colour": "orange", "code": "                    self._addXFN(xfn['relationships'], xfn['href'], xfn['name'])\n", "error": "none", "author": "tom@organisms.be"}, {"index": "943", "colour": "orange", "code": "                vcard = mfresults.get('vcard')\n", "error": "none", "author": "tom@organisms.be"}, {"index": "944", "colour": "orange", "code": "                if vcard:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "945", "colour": "orange", "code": "                    self._getContext()['vcard'] = vcard\n", "error": "none", "author": "tom@organisms.be"}, {"index": "946", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "947", "colour": "orange", "code": "        # sanitize embedded markup\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "948", "colour": "orange", "code": "        if is_htmlish and SANITIZE_HTML:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "949", "colour": "orange", "code": "            if element in self.can_contain_dangerous_markup:\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "950", "colour": "orange", "code": "                output = _sanitizeHTML(output, self.encoding, self.contentparams.get('type', u'text/html'))\n", "error": "none", "author": "tom@organisms.be"}, {"index": "951", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "952", "colour": "orange", "code": "        if self.encoding and not isinstance(output, unicode):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "953", "colour": "orange", "code": "            output = output.decode(self.encoding, 'ignore')\n", "error": "none", "author": "tom@organisms.be"}, {"index": "954", "colour": "orange", "code": "\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "955", "colour": "orange", "code": "        # address common error where people take data that is already\n", "error": "none", "author": "tom@organisms.be"}, {"index": "956", "colour": "orange", "code": "        # utf-8, presume that it is iso-8859-1, and re-encode it.\n", "error": "none", "author": "tom@organisms.be"}, {"index": "957", "colour": "orange", "code": "        if self.encoding in (u'utf-8', u'utf-8_INVALID_PYTHON_3') and isinstance(output, unicode):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "958", "colour": "orange", "code": "            try:\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "959", "colour": "orange", "code": "                output = output.encode('iso-8859-1').decode('utf-8')\n", "error": "none", "author": "tom@organisms.be"}, {"index": "960", "colour": "orange", "code": "            except (UnicodeEncodeError, UnicodeDecodeError):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "961", "colour": "orange", "code": "                pass\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "962", "colour": "orange", "code": "\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "963", "colour": "orange", "code": "        # map win-1252 extensions to the proper code points\n", "error": "none", "author": "tom@organisms.be"}, {"index": "964", "colour": "orange", "code": "        if isinstance(output, unicode):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "965", "colour": "orange", "code": "            output = output.translate(_cp1252)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "966", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "967", "colour": "orange", "code": "        # categories/tags/keywords/whatever are handled in _end_category\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "968", "colour": "orange", "code": "        if element == 'category':\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "969", "colour": "orange", "code": "            return output\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "970", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "971", "colour": "orange", "code": "        if element == 'title' and -1 < self.title_depth <= self.depth:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "972", "colour": "orange", "code": "            return output\n", "error": "none", "author": "tom@organisms.be"}, {"index": "973", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "974", "colour": "orange", "code": "        # store output in appropriate place(s)\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "975", "colour": "orange", "code": "        if self.inentry and not self.insource:\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "976", "colour": "orange", "code": "            if element == 'content':\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "977", "colour": "orange", "code": "                self.entries[-1].setdefault(element, [])\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "978", "colour": "orange", "code": "                contentparams = copy.deepcopy(self.contentparams)\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "979", "colour": "orange", "code": "                contentparams['value'] = output\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "980", "colour": "orange", "code": "                self.entries[-1][element].append(contentparams)\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "981", "colour": "orange", "code": "            elif element == 'link':\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "982", "colour": "orange", "code": "                if not self.inimage:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "983", "colour": "orange", "code": "                    # query variables in urls in link elements are improperly\n", "error": "none", "author": "tom@organisms.be"}, {"index": "984", "colour": "orange", "code": "                    # converted from `?a=1&b=2` to `?a=1&b;=2` as if they're\n", "error": "none", "author": "tom@organisms.be"}, {"index": "985", "colour": "orange", "code": "                    # unhandled character references. fix this special case.\n", "error": "none", "author": "tom@organisms.be"}, {"index": "986", "colour": "green", "code": "                    output = re.sub(\"&([A-Za-z0-9_]+);\", \"&\\g<1>\", output)\n", "error": "W", "author": "tom@organisms.be"}, {"index": "987", "colour": "orange", "code": "                    self.entries[-1][element] = output\n", "error": "none", "author": "tom@organisms.be"}, {"index": "988", "colour": "orange", "code": "                    if output:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "989", "colour": "orange", "code": "                        self.entries[-1]['links'][-1]['href'] = output\n", "error": "none", "author": "tom@organisms.be"}, {"index": "990", "colour": "orange", "code": "            else:\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "991", "colour": "orange", "code": "                if element == 'description':\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "992", "colour": "orange", "code": "                    element = 'summary'\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "993", "colour": "orange", "code": "                old_value_depth = self.property_depth_map.setdefault(self.entries[-1], {}).get(element)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "994", "colour": "orange", "code": "                if old_value_depth is None or self.depth <= old_value_depth:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "995", "colour": "orange", "code": "                    self.property_depth_map[self.entries[-1]][element] = self.depth\n", "error": "none", "author": "tom@organisms.be"}, {"index": "996", "colour": "orange", "code": "                    self.entries[-1][element] = output\n", "error": "none", "author": "tom@organisms.be"}, {"index": "997", "colour": "orange", "code": "                if self.incontent:\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "998", "colour": "orange", "code": "                    contentparams = copy.deepcopy(self.contentparams)\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "999", "colour": "orange", "code": "                    contentparams['value'] = output\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1000", "colour": "orange", "code": "                    self.entries[-1][element + '_detail'] = contentparams\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1001", "colour": "orange", "code": "        elif (self.infeed or self.insource):# and (not self.intextinput) and (not self.inimage):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "1002", "colour": "orange", "code": "            context = self._getContext()\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1003", "colour": "orange", "code": "            if element == 'description':\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1004", "colour": "orange", "code": "                element = 'subtitle'\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1005", "colour": "orange", "code": "            context[element] = output\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1006", "colour": "orange", "code": "            if element == 'link':\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1007", "colour": "orange", "code": "                # fix query variables; see above for the explanation\n", "error": "none", "author": "tom@organisms.be"}, {"index": "1008", "colour": "green", "code": "                output = re.sub(\"&([A-Za-z0-9_]+);\", \"&\\g<1>\", output)\n", "error": "W", "author": "tom@organisms.be"}, {"index": "1009", "colour": "orange", "code": "                context[element] = output\n", "error": "none", "author": "tom@organisms.be"}, {"index": "1010", "colour": "orange", "code": "                context['links'][-1]['href'] = output\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1011", "colour": "orange", "code": "            elif self.incontent:\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1012", "colour": "orange", "code": "                contentparams = copy.deepcopy(self.contentparams)\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1013", "colour": "orange", "code": "                contentparams['value'] = output\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1014", "colour": "orange", "code": "                context[element + '_detail'] = contentparams\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1015", "colour": "orange", "code": "        return output\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1016", "colour": "orange", "code": "\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1017", "colour": "orange", "code": "    def pushContent(self, tag, attrsD, defaultContentType, expectingText):\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1018", "colour": "orange", "code": "        self.incontent += 1\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1019", "colour": "orange", "code": "        if self.lang:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "1020", "colour": "orange", "code": "            self.lang=self.lang.replace('_','-')\n", "error": "none", "author": "tom@organisms.be"}, {"index": "1021", "colour": "orange", "code": "        self.contentparams = FeedParserDict({\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1022", "colour": "orange", "code": "            'type': self.mapContentType(attrsD.get('type', defaultContentType)),\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1023", "colour": "orange", "code": "            'language': self.lang,\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1024", "colour": "orange", "code": "            'base': self.baseuri})\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1025", "colour": "orange", "code": "        self.contentparams['base64'] = self._isBase64(attrsD, self.contentparams)\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1026", "colour": "orange", "code": "        self.push(tag, expectingText)\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1027", "colour": "orange", "code": "\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1028", "colour": "orange", "code": "    def popContent(self, tag):\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1029", "colour": "orange", "code": "        value = self.pop(tag)\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1030", "colour": "orange", "code": "        self.incontent -= 1\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1031", "colour": "orange", "code": "        self.contentparams.clear()\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1032", "colour": "orange", "code": "        return value\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1033", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "1034", "colour": "orange", "code": "    # a number of elements in a number of RSS variants are nominally plain\n", "error": "none", "author": "tom@organisms.be"}, {"index": "1035", "colour": "orange", "code": "    # text, but this is routinely ignored.  This is an attempt to detect\n", "error": "none", "author": "tom@organisms.be"}, {"index": "1036", "colour": "orange", "code": "    # the most common cases.  As false positives often result in silent\n", "error": "none", "author": "tom@organisms.be"}, {"index": "1037", "colour": "orange", "code": "    # data loss, this function errs on the conservative side.\n", "error": "none", "author": "tom@organisms.be"}, {"index": "1038", "colour": "orange", "code": "    @staticmethod\n", "error": "none", "author": "tom@organisms.be"}, {"index": "1039", "colour": "orange", "code": "    def lookslikehtml(s):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "1040", "colour": "orange", "code": "        # must have a close tag or an entity reference to qualify\n", "error": "none", "author": "tom@organisms.be"}, {"index": "1041", "colour": "green", "code": "        if not (re.search(r'</(\\w+)>',s) or re.search(\"&#?\\w+;\",s)):\n", "error": "W", "author": "tom@organisms.be"}, {"index": "1042", "colour": "orange", "code": "            return\n", "error": "none", "author": "tom@organisms.be"}, {"index": "1043", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "1044", "colour": "orange", "code": "        # all tags must be in a restricted subset of valid HTML tags\n", "error": "none", "author": "tom@organisms.be"}, {"index": "1045", "colour": "green", "code": "        if filter(lambda t: t.lower() not in _HTMLSanitizer.acceptable_elements,\n", "error": "W", "author": "tom@organisms.be"}, {"index": "1046", "colour": "orange", "code": "            re.findall(r'</?(\\w+)',s)):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "1047", "colour": "orange", "code": "            return\n", "error": "none", "author": "tom@organisms.be"}, {"index": "1048", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "1049", "colour": "orange", "code": "        # all entities must have been defined as valid HTML entities\n", "error": "none", "author": "tom@organisms.be"}, {"index": "1050", "colour": "green", "code": "        if filter(lambda e: e not in entitydefs.keys(), re.findall(r'&(\\w+);', s)):\n", "error": "W", "author": "tom@organisms.be"}, {"index": "1051", "colour": "orange", "code": "            return\n", "error": "none", "author": "tom@organisms.be"}, {"index": "1052", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "1053", "colour": "orange", "code": "        return 1\n", "error": "none", "author": "tom@organisms.be"}, {"index": "1054", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "1055", "colour": "orange", "code": "    def _mapToStandardPrefix(self, name):\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1056", "colour": "orange", "code": "        colonpos = name.find(':')\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1057", "colour": "green", "code": "        if colonpos <> -1:\n", "error": "W", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1058", "colour": "orange", "code": "            prefix = name[:colonpos]\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1059", "colour": "orange", "code": "            suffix = name[colonpos+1:]\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1060", "colour": "orange", "code": "            prefix = self.namespacemap.get(prefix, prefix)\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1061", "colour": "orange", "code": "            name = prefix + ':' + suffix\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1062", "colour": "orange", "code": "        return name\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1063", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "1064", "colour": "orange", "code": "    def _getAttribute(self, attrsD, name):\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1065", "colour": "orange", "code": "        return attrsD.get(self._mapToStandardPrefix(name))\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1066", "colour": "orange", "code": "\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1067", "colour": "green", "code": "    def _isBase64(self, attrsD, contentparams):\n", "error": "W", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1068", "colour": "orange", "code": "        if attrsD.get('mode', '') == 'base64':\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1069", "colour": "orange", "code": "            return 1\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1070", "colour": "orange", "code": "        if self.contentparams['type'].startswith(u'text/'):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "1071", "colour": "orange", "code": "            return 0\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1072", "colour": "orange", "code": "        if self.contentparams['type'].endswith(u'+xml'):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "1073", "colour": "orange", "code": "            return 0\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1074", "colour": "orange", "code": "        if self.contentparams['type'].endswith(u'/xml'):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "1075", "colour": "orange", "code": "            return 0\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1076", "colour": "orange", "code": "        return 1\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1077", "colour": "orange", "code": "\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1078", "colour": "blue", "code": "    def _itsAnHrefDamnIt(self, attrsD):\n", "error": "R", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1079", "colour": "orange", "code": "        href = attrsD.get('url', attrsD.get('uri', attrsD.get('href', None)))\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1080", "colour": "orange", "code": "        if href:\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1081", "colour": "orange", "code": "            try:\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1082", "colour": "orange", "code": "                del attrsD['url']\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1083", "colour": "orange", "code": "            except KeyError:\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1084", "colour": "orange", "code": "                pass\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1085", "colour": "orange", "code": "            try:\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1086", "colour": "orange", "code": "                del attrsD['uri']\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1087", "colour": "orange", "code": "            except KeyError:\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1088", "colour": "orange", "code": "                pass\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1089", "colour": "orange", "code": "            attrsD['href'] = href\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1090", "colour": "orange", "code": "        return attrsD\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1091", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "1092", "colour": "orange", "code": "    def _save(self, key, value, overwrite=False):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "1093", "colour": "orange", "code": "        context = self._getContext()\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1094", "colour": "orange", "code": "        if overwrite:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "1095", "colour": "orange", "code": "            context[key] = value\n", "error": "none", "author": "tom@organisms.be"}, {"index": "1096", "colour": "orange", "code": "        else:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "1097", "colour": "orange", "code": "            context.setdefault(key, value)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "1098", "colour": "orange", "code": "\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1099", "colour": "orange", "code": "    def _start_rss(self, attrsD):\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1100", "colour": "orange", "code": "        versionmap = {'0.91': u'rss091u',\n", "error": "none", "author": "tom@organisms.be"}, {"index": "1101", "colour": "orange", "code": "                      '0.92': u'rss092',\n", "error": "none", "author": "tom@organisms.be"}, {"index": "1102", "colour": "orange", "code": "                      '0.93': u'rss093',\n", "error": "none", "author": "tom@organisms.be"}, {"index": "1103", "colour": "orange", "code": "                      '0.94': u'rss094'}\n", "error": "none", "author": "tom@organisms.be"}, {"index": "1104", "colour": "orange", "code": "        #If we're here then this is an RSS feed.\n", "error": "none", "author": "tom@organisms.be"}, {"index": "1105", "colour": "orange", "code": "        #If we don't have a version or have a version that starts with something\n", "error": "none", "author": "tom@organisms.be"}, {"index": "1106", "colour": "orange", "code": "        #other than RSS then there's been a mistake. Correct it.\n", "error": "none", "author": "tom@organisms.be"}, {"index": "1107", "colour": "orange", "code": "        if not self.version or not self.version.startswith(u'rss'):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "1108", "colour": "orange", "code": "            attr_version = attrsD.get('version', '')\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1109", "colour": "orange", "code": "            version = versionmap.get(attr_version)\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1110", "colour": "orange", "code": "            if version:\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1111", "colour": "orange", "code": "                self.version = version\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1112", "colour": "orange", "code": "            elif attr_version.startswith('2.'):\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1113", "colour": "orange", "code": "                self.version = u'rss20'\n", "error": "none", "author": "tom@organisms.be"}, {"index": "1114", "colour": "orange", "code": "            else:\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1115", "colour": "orange", "code": "                self.version = u'rss'\n", "error": "none", "author": "tom@organisms.be"}, {"index": "1116", "colour": "orange", "code": "\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1117", "colour": "orange", "code": "    def _start_channel(self, attrsD):\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1118", "colour": "orange", "code": "        self.infeed = 1\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1119", "colour": "orange", "code": "        self._cdf_common(attrsD)\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1120", "colour": "orange", "code": "\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1121", "colour": "orange", "code": "    def _cdf_common(self, attrsD):\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1122", "colour": "orange", "code": "        if 'lastmod' in attrsD:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "1123", "colour": "orange", "code": "            self._start_modified({})\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1124", "colour": "orange", "code": "            self.elementstack[-1][-1] = attrsD['lastmod']\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1125", "colour": "orange", "code": "            self._end_modified()\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1126", "colour": "orange", "code": "        if 'href' in attrsD:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "1127", "colour": "orange", "code": "            self._start_link({})\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1128", "colour": "orange", "code": "            self.elementstack[-1][-1] = attrsD['href']\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1129", "colour": "orange", "code": "            self._end_link()\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1130", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "1131", "colour": "orange", "code": "    def _start_feed(self, attrsD):\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1132", "colour": "orange", "code": "        self.infeed = 1\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1133", "colour": "orange", "code": "        versionmap = {'0.1': u'atom01',\n", "error": "none", "author": "tom@organisms.be"}, {"index": "1134", "colour": "orange", "code": "                      '0.2': u'atom02',\n", "error": "none", "author": "tom@organisms.be"}, {"index": "1135", "colour": "orange", "code": "                      '0.3': u'atom03'}\n", "error": "none", "author": "tom@organisms.be"}, {"index": "1136", "colour": "orange", "code": "        if not self.version:\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1137", "colour": "orange", "code": "            attr_version = attrsD.get('version')\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1138", "colour": "orange", "code": "            version = versionmap.get(attr_version)\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1139", "colour": "orange", "code": "            if version:\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1140", "colour": "orange", "code": "                self.version = version\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1141", "colour": "orange", "code": "            else:\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1142", "colour": "orange", "code": "                self.version = u'atom'\n", "error": "none", "author": "tom@organisms.be"}, {"index": "1143", "colour": "orange", "code": "\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1144", "colour": "orange", "code": "    def _end_channel(self):\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1145", "colour": "orange", "code": "        self.infeed = 0\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1146", "colour": "orange", "code": "    _end_feed = _end_channel\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1147", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "1148", "colour": "green", "code": "    def _start_image(self, attrsD):\n", "error": "W", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1149", "colour": "orange", "code": "        context = self._getContext()\n", "error": "none", "author": "tom@organisms.be"}, {"index": "1150", "colour": "orange", "code": "        if not self.inentry:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "1151", "colour": "orange", "code": "            context.setdefault('image', FeedParserDict())\n", "error": "none", "author": "tom@organisms.be"}, {"index": "1152", "colour": "orange", "code": "        self.inimage = 1\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1153", "colour": "orange", "code": "        self.title_depth = -1\n", "error": "none", "author": "tom@organisms.be"}, {"index": "1154", "colour": "orange", "code": "        self.push('image', 0)\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1155", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "1156", "colour": "orange", "code": "    def _end_image(self):\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1157", "colour": "orange", "code": "        self.pop('image')\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1158", "colour": "orange", "code": "        self.inimage = 0\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1159", "colour": "orange", "code": "\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1160", "colour": "green", "code": "    def _start_textinput(self, attrsD):\n", "error": "W", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1161", "colour": "orange", "code": "        context = self._getContext()\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1162", "colour": "orange", "code": "        context.setdefault('textinput', FeedParserDict())\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1163", "colour": "orange", "code": "        self.intextinput = 1\n", "error": "none", "author": "tom@organisms.be"}, {"index": "1164", "colour": "orange", "code": "        self.title_depth = -1\n", "error": "none", "author": "tom@organisms.be"}, {"index": "1165", "colour": "orange", "code": "        self.push('textinput', 0)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "1166", "colour": "orange", "code": "    _start_textInput = _start_textinput\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1167", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "1168", "colour": "orange", "code": "    def _end_textinput(self):\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1169", "colour": "orange", "code": "        self.pop('textinput')\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1170", "colour": "orange", "code": "        self.intextinput = 0\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1171", "colour": "orange", "code": "    _end_textInput = _end_textinput\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1172", "colour": "orange", "code": "\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1173", "colour": "green", "code": "    def _start_author(self, attrsD):\n", "error": "W", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1174", "colour": "orange", "code": "        self.inauthor = 1\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1175", "colour": "orange", "code": "        self.push('author', 1)\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1176", "colour": "orange", "code": "        # Append a new FeedParserDict when expecting an author\n", "error": "none", "author": "tom@organisms.be"}, {"index": "1177", "colour": "orange", "code": "        context = self._getContext()\n", "error": "none", "author": "tom@organisms.be"}, {"index": "1178", "colour": "orange", "code": "        context.setdefault('authors', [])\n", "error": "none", "author": "tom@organisms.be"}, {"index": "1179", "colour": "orange", "code": "        context['authors'].append(FeedParserDict())\n", "error": "none", "author": "tom@organisms.be"}, {"index": "1180", "colour": "orange", "code": "    _start_managingeditor = _start_author\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1181", "colour": "orange", "code": "    _start_dc_author = _start_author\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1182", "colour": "orange", "code": "    _start_dc_creator = _start_author\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1183", "colour": "orange", "code": "    _start_itunes_author = _start_author\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1184", "colour": "orange", "code": "\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1185", "colour": "orange", "code": "    def _end_author(self):\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1186", "colour": "orange", "code": "        self.pop('author')\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1187", "colour": "orange", "code": "        self.inauthor = 0\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1188", "colour": "orange", "code": "        self._sync_author_detail()\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1189", "colour": "orange", "code": "    _end_managingeditor = _end_author\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1190", "colour": "orange", "code": "    _end_dc_author = _end_author\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1191", "colour": "orange", "code": "    _end_dc_creator = _end_author\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1192", "colour": "orange", "code": "    _end_itunes_author = _end_author\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1193", "colour": "orange", "code": "\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1194", "colour": "green", "code": "    def _start_itunes_owner(self, attrsD):\n", "error": "W", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1195", "colour": "orange", "code": "        self.inpublisher = 1\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1196", "colour": "orange", "code": "        self.push('publisher', 0)\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1197", "colour": "orange", "code": "\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1198", "colour": "orange", "code": "    def _end_itunes_owner(self):\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1199", "colour": "orange", "code": "        self.pop('publisher')\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1200", "colour": "orange", "code": "        self.inpublisher = 0\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1201", "colour": "orange", "code": "        self._sync_author_detail('publisher')\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1202", "colour": "orange", "code": "\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1203", "colour": "green", "code": "    def _start_contributor(self, attrsD):\n", "error": "W", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1204", "colour": "orange", "code": "        self.incontributor = 1\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1205", "colour": "orange", "code": "        context = self._getContext()\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1206", "colour": "orange", "code": "        context.setdefault('contributors', [])\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1207", "colour": "orange", "code": "        context['contributors'].append(FeedParserDict())\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1208", "colour": "orange", "code": "        self.push('contributor', 0)\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1209", "colour": "orange", "code": "\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1210", "colour": "orange", "code": "    def _end_contributor(self):\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1211", "colour": "orange", "code": "        self.pop('contributor')\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1212", "colour": "orange", "code": "        self.incontributor = 0\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1213", "colour": "orange", "code": "\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1214", "colour": "green", "code": "    def _start_dc_contributor(self, attrsD):\n", "error": "W", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1215", "colour": "orange", "code": "        self.incontributor = 1\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1216", "colour": "orange", "code": "        context = self._getContext()\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1217", "colour": "orange", "code": "        context.setdefault('contributors', [])\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1218", "colour": "orange", "code": "        context['contributors'].append(FeedParserDict())\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1219", "colour": "orange", "code": "        self.push('name', 0)\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1220", "colour": "orange", "code": "\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1221", "colour": "orange", "code": "    def _end_dc_contributor(self):\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1222", "colour": "orange", "code": "        self._end_name()\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1223", "colour": "orange", "code": "        self.incontributor = 0\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1224", "colour": "orange", "code": "\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1225", "colour": "green", "code": "    def _start_name(self, attrsD):\n", "error": "W", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1226", "colour": "orange", "code": "        self.push('name', 0)\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1227", "colour": "orange", "code": "    _start_itunes_name = _start_name\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1228", "colour": "orange", "code": "\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1229", "colour": "orange", "code": "    def _end_name(self):\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1230", "colour": "orange", "code": "        value = self.pop('name')\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1231", "colour": "orange", "code": "        if self.inpublisher:\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1232", "colour": "orange", "code": "            self._save_author('name', value, 'publisher')\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1233", "colour": "orange", "code": "        elif self.inauthor:\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1234", "colour": "orange", "code": "            self._save_author('name', value)\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1235", "colour": "orange", "code": "        elif self.incontributor:\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1236", "colour": "orange", "code": "            self._save_contributor('name', value)\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1237", "colour": "orange", "code": "        elif self.intextinput:\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1238", "colour": "orange", "code": "            context = self._getContext()\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1239", "colour": "orange", "code": "            context['name'] = value\n", "error": "none", "author": "tom@organisms.be"}, {"index": "1240", "colour": "orange", "code": "    _end_itunes_name = _end_name\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1241", "colour": "orange", "code": "\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1242", "colour": "green", "code": "    def _start_width(self, attrsD):\n", "error": "W", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1243", "colour": "orange", "code": "        self.push('width', 0)\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1244", "colour": "orange", "code": "\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1245", "colour": "orange", "code": "    def _end_width(self):\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1246", "colour": "orange", "code": "        value = self.pop('width')\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1247", "colour": "orange", "code": "        try:\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1248", "colour": "orange", "code": "            value = int(value)\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1249", "colour": "orange", "code": "        except ValueError:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "1250", "colour": "orange", "code": "            value = 0\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1251", "colour": "orange", "code": "        if self.inimage:\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1252", "colour": "orange", "code": "            context = self._getContext()\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1253", "colour": "orange", "code": "            context['width'] = value\n", "error": "none", "author": "tom@organisms.be"}, {"index": "1254", "colour": "orange", "code": "\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1255", "colour": "green", "code": "    def _start_height(self, attrsD):\n", "error": "W", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1256", "colour": "orange", "code": "        self.push('height', 0)\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1257", "colour": "orange", "code": "\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1258", "colour": "orange", "code": "    def _end_height(self):\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1259", "colour": "orange", "code": "        value = self.pop('height')\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1260", "colour": "orange", "code": "        try:\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1261", "colour": "orange", "code": "            value = int(value)\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1262", "colour": "orange", "code": "        except ValueError:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "1263", "colour": "orange", "code": "            value = 0\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1264", "colour": "orange", "code": "        if self.inimage:\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1265", "colour": "orange", "code": "            context = self._getContext()\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1266", "colour": "orange", "code": "            context['height'] = value\n", "error": "none", "author": "tom@organisms.be"}, {"index": "1267", "colour": "orange", "code": "\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1268", "colour": "green", "code": "    def _start_url(self, attrsD):\n", "error": "W", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1269", "colour": "orange", "code": "        self.push('href', 1)\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1270", "colour": "orange", "code": "    _start_homepage = _start_url\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1271", "colour": "orange", "code": "    _start_uri = _start_url\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1272", "colour": "orange", "code": "\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1273", "colour": "orange", "code": "    def _end_url(self):\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1274", "colour": "orange", "code": "        value = self.pop('href')\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1275", "colour": "orange", "code": "        if self.inauthor:\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1276", "colour": "orange", "code": "            self._save_author('href', value)\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1277", "colour": "orange", "code": "        elif self.incontributor:\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1278", "colour": "orange", "code": "            self._save_contributor('href', value)\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1279", "colour": "orange", "code": "    _end_homepage = _end_url\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1280", "colour": "orange", "code": "    _end_uri = _end_url\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1281", "colour": "orange", "code": "\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1282", "colour": "green", "code": "    def _start_email(self, attrsD):\n", "error": "W", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1283", "colour": "orange", "code": "        self.push('email', 0)\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1284", "colour": "orange", "code": "    _start_itunes_email = _start_email\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1285", "colour": "orange", "code": "\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1286", "colour": "orange", "code": "    def _end_email(self):\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1287", "colour": "orange", "code": "        value = self.pop('email')\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1288", "colour": "orange", "code": "        if self.inpublisher:\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1289", "colour": "orange", "code": "            self._save_author('email', value, 'publisher')\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1290", "colour": "orange", "code": "        elif self.inauthor:\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1291", "colour": "orange", "code": "            self._save_author('email', value)\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1292", "colour": "orange", "code": "        elif self.incontributor:\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1293", "colour": "orange", "code": "            self._save_contributor('email', value)\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1294", "colour": "orange", "code": "    _end_itunes_email = _end_email\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1295", "colour": "orange", "code": "\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1296", "colour": "orange", "code": "    def _getContext(self):\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1297", "colour": "orange", "code": "        if self.insource:\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1298", "colour": "orange", "code": "            context = self.sourcedata\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1299", "colour": "orange", "code": "        elif self.inimage and 'image' in self.feeddata:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "1300", "colour": "orange", "code": "            context = self.feeddata['image']\n", "error": "none", "author": "tom@organisms.be"}, {"index": "1301", "colour": "orange", "code": "        elif self.intextinput:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "1302", "colour": "orange", "code": "            context = self.feeddata['textinput']\n", "error": "none", "author": "tom@organisms.be"}, {"index": "1303", "colour": "orange", "code": "        elif self.inentry:\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1304", "colour": "orange", "code": "            context = self.entries[-1]\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1305", "colour": "orange", "code": "        else:\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1306", "colour": "orange", "code": "            context = self.feeddata\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1307", "colour": "orange", "code": "        return context\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1308", "colour": "orange", "code": "\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1309", "colour": "orange", "code": "    def _save_author(self, key, value, prefix='author'):\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1310", "colour": "orange", "code": "        context = self._getContext()\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1311", "colour": "orange", "code": "        context.setdefault(prefix + '_detail', FeedParserDict())\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1312", "colour": "orange", "code": "        context[prefix + '_detail'][key] = value\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1313", "colour": "orange", "code": "        self._sync_author_detail()\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1314", "colour": "orange", "code": "        context.setdefault('authors', [FeedParserDict()])\n", "error": "none", "author": "tom@organisms.be"}, {"index": "1315", "colour": "orange", "code": "        context['authors'][-1][key] = value\n", "error": "none", "author": "tom@organisms.be"}, {"index": "1316", "colour": "orange", "code": "\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1317", "colour": "orange", "code": "    def _save_contributor(self, key, value):\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1318", "colour": "orange", "code": "        context = self._getContext()\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1319", "colour": "orange", "code": "        context.setdefault('contributors', [FeedParserDict()])\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1320", "colour": "orange", "code": "        context['contributors'][-1][key] = value\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1321", "colour": "orange", "code": "\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1322", "colour": "orange", "code": "    def _sync_author_detail(self, key='author'):\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1323", "colour": "orange", "code": "        context = self._getContext()\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1324", "colour": "orange", "code": "        detail = context.get('%s_detail' % key)\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1325", "colour": "orange", "code": "        if detail:\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1326", "colour": "orange", "code": "            name = detail.get('name')\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1327", "colour": "orange", "code": "            email = detail.get('email')\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1328", "colour": "orange", "code": "            if name and email:\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1329", "colour": "orange", "code": "                context[key] = u'%s (%s)' % (name, email)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "1330", "colour": "orange", "code": "            elif name:\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1331", "colour": "orange", "code": "                context[key] = name\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1332", "colour": "orange", "code": "            elif email:\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1333", "colour": "orange", "code": "                context[key] = email\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1334", "colour": "orange", "code": "        else:\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1335", "colour": "orange", "code": "            author, email = context.get(key), None\n", "error": "none", "author": "tom@organisms.be"}, {"index": "1336", "colour": "orange", "code": "            if not author:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "1337", "colour": "orange", "code": "                return\n", "error": "none", "author": "tom@organisms.be"}, {"index": "1338", "colour": "orange", "code": "            emailmatch = re.search(ur'''(([a-zA-Z0-9\\_\\-\\.\\+]+)@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.)|(([a-zA-Z0-9\\-]+\\.)+))([a-zA-Z]{2,4}|[0-9]{1,3})(\\]?))(\\?subject=\\S+)?''', author)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "1339", "colour": "orange", "code": "            if emailmatch:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "1340", "colour": "orange", "code": "                email = emailmatch.group(0)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "1341", "colour": "orange", "code": "                # probably a better way to do the following, but it passes all the tests\n", "error": "none", "author": "tom@organisms.be"}, {"index": "1342", "colour": "orange", "code": "                author = author.replace(email, u'')\n", "error": "none", "author": "tom@organisms.be"}, {"index": "1343", "colour": "orange", "code": "                author = author.replace(u'()', u'')\n", "error": "none", "author": "tom@organisms.be"}, {"index": "1344", "colour": "orange", "code": "                author = author.replace(u'<>', u'')\n", "error": "none", "author": "tom@organisms.be"}, {"index": "1345", "colour": "orange", "code": "                author = author.replace(u'&lt;&gt;', u'')\n", "error": "none", "author": "tom@organisms.be"}, {"index": "1346", "colour": "orange", "code": "                author = author.strip()\n", "error": "none", "author": "tom@organisms.be"}, {"index": "1347", "colour": "orange", "code": "                if author and (author[0] == u'('):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "1348", "colour": "orange", "code": "                    author = author[1:]\n", "error": "none", "author": "tom@organisms.be"}, {"index": "1349", "colour": "orange", "code": "                if author and (author[-1] == u')'):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "1350", "colour": "orange", "code": "                    author = author[:-1]\n", "error": "none", "author": "tom@organisms.be"}, {"index": "1351", "colour": "orange", "code": "                author = author.strip()\n", "error": "none", "author": "tom@organisms.be"}, {"index": "1352", "colour": "orange", "code": "            if author or email:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "1353", "colour": "orange", "code": "                context.setdefault('%s_detail' % key, FeedParserDict())\n", "error": "none", "author": "tom@organisms.be"}, {"index": "1354", "colour": "orange", "code": "            if author:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "1355", "colour": "orange", "code": "                context['%s_detail' % key]['name'] = author\n", "error": "none", "author": "tom@organisms.be"}, {"index": "1356", "colour": "orange", "code": "            if email:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "1357", "colour": "orange", "code": "                context['%s_detail' % key]['email'] = email\n", "error": "none", "author": "tom@organisms.be"}, {"index": "1358", "colour": "orange", "code": "\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1359", "colour": "orange", "code": "    def _start_subtitle(self, attrsD):\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1360", "colour": "orange", "code": "        self.pushContent('subtitle', attrsD, u'text/plain', 1)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "1361", "colour": "orange", "code": "    _start_tagline = _start_subtitle\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1362", "colour": "orange", "code": "    _start_itunes_subtitle = _start_subtitle\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1363", "colour": "orange", "code": "\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1364", "colour": "orange", "code": "    def _end_subtitle(self):\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1365", "colour": "orange", "code": "        self.popContent('subtitle')\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1366", "colour": "orange", "code": "    _end_tagline = _end_subtitle\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1367", "colour": "orange", "code": "    _end_itunes_subtitle = _end_subtitle\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1368", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "1369", "colour": "orange", "code": "    def _start_rights(self, attrsD):\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1370", "colour": "orange", "code": "        self.pushContent('rights', attrsD, u'text/plain', 1)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "1371", "colour": "orange", "code": "    _start_dc_rights = _start_rights\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1372", "colour": "orange", "code": "    _start_copyright = _start_rights\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1373", "colour": "orange", "code": "\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1374", "colour": "orange", "code": "    def _end_rights(self):\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1375", "colour": "orange", "code": "        self.popContent('rights')\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1376", "colour": "orange", "code": "    _end_dc_rights = _end_rights\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1377", "colour": "orange", "code": "    _end_copyright = _end_rights\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1378", "colour": "orange", "code": "\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1379", "colour": "orange", "code": "    def _start_item(self, attrsD):\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1380", "colour": "orange", "code": "        self.entries.append(FeedParserDict())\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1381", "colour": "orange", "code": "        self.push('item', 0)\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1382", "colour": "orange", "code": "        self.inentry = 1\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1383", "colour": "green", "code": "        self.guidislink = 0\n", "error": "W", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1384", "colour": "orange", "code": "        self.title_depth = -1\n", "error": "none", "author": "tom@organisms.be"}, {"index": "1385", "colour": "green", "code": "        id = self._getAttribute(attrsD, 'rdf:about')\n", "error": "W", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1386", "colour": "orange", "code": "        if id:\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1387", "colour": "orange", "code": "            context = self._getContext()\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1388", "colour": "orange", "code": "            context['id'] = id\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1389", "colour": "orange", "code": "        self._cdf_common(attrsD)\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1390", "colour": "orange", "code": "    _start_entry = _start_item\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1391", "colour": "orange", "code": "\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1392", "colour": "orange", "code": "    def _end_item(self):\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1393", "colour": "orange", "code": "        self.pop('item')\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1394", "colour": "orange", "code": "        self.inentry = 0\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1395", "colour": "orange", "code": "    _end_entry = _end_item\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1396", "colour": "orange", "code": "\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1397", "colour": "green", "code": "    def _start_dc_language(self, attrsD):\n", "error": "W", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1398", "colour": "orange", "code": "        self.push('language', 1)\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1399", "colour": "orange", "code": "    _start_language = _start_dc_language\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1400", "colour": "orange", "code": "\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1401", "colour": "orange", "code": "    def _end_dc_language(self):\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1402", "colour": "orange", "code": "        self.lang = self.pop('language')\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1403", "colour": "orange", "code": "    _end_language = _end_dc_language\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1404", "colour": "orange", "code": "\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1405", "colour": "green", "code": "    def _start_dc_publisher(self, attrsD):\n", "error": "W", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1406", "colour": "orange", "code": "        self.push('publisher', 1)\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1407", "colour": "orange", "code": "    _start_webmaster = _start_dc_publisher\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1408", "colour": "orange", "code": "\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1409", "colour": "orange", "code": "    def _end_dc_publisher(self):\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1410", "colour": "orange", "code": "        self.pop('publisher')\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1411", "colour": "orange", "code": "        self._sync_author_detail('publisher')\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1412", "colour": "orange", "code": "    _end_webmaster = _end_dc_publisher\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1413", "colour": "orange", "code": "\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1414", "colour": "green", "code": "    def _start_published(self, attrsD):\n", "error": "W", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1415", "colour": "orange", "code": "        self.push('published', 1)\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1416", "colour": "orange", "code": "    _start_dcterms_issued = _start_published\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1417", "colour": "orange", "code": "    _start_issued = _start_published\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1418", "colour": "orange", "code": "    _start_pubdate = _start_published\n", "error": "none", "author": "tom@organisms.be"}, {"index": "1419", "colour": "orange", "code": "\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1420", "colour": "orange", "code": "    def _end_published(self):\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1421", "colour": "orange", "code": "        value = self.pop('published')\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1422", "colour": "orange", "code": "        self._save('published_parsed', _parse_date(value), overwrite=True)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "1423", "colour": "orange", "code": "    _end_dcterms_issued = _end_published\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1424", "colour": "orange", "code": "    _end_issued = _end_published\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1425", "colour": "orange", "code": "    _end_pubdate = _end_published\n", "error": "none", "author": "tom@organisms.be"}, {"index": "1426", "colour": "orange", "code": "\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1427", "colour": "green", "code": "    def _start_updated(self, attrsD):\n", "error": "W", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1428", "colour": "orange", "code": "        self.push('updated', 1)\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1429", "colour": "orange", "code": "    _start_modified = _start_updated\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1430", "colour": "orange", "code": "    _start_dcterms_modified = _start_updated\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1431", "colour": "orange", "code": "    _start_dc_date = _start_updated\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1432", "colour": "orange", "code": "    _start_lastbuilddate = _start_updated\n", "error": "none", "author": "tom@organisms.be"}, {"index": "1433", "colour": "orange", "code": "\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1434", "colour": "orange", "code": "    def _end_updated(self):\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1435", "colour": "orange", "code": "        value = self.pop('updated')\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1436", "colour": "orange", "code": "        parsed_value = _parse_date(value)\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1437", "colour": "orange", "code": "        self._save('updated_parsed', parsed_value, overwrite=True)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "1438", "colour": "orange", "code": "    _end_modified = _end_updated\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1439", "colour": "orange", "code": "    _end_dcterms_modified = _end_updated\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1440", "colour": "orange", "code": "    _end_dc_date = _end_updated\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1441", "colour": "orange", "code": "    _end_lastbuilddate = _end_updated\n", "error": "none", "author": "tom@organisms.be"}, {"index": "1442", "colour": "orange", "code": "\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1443", "colour": "green", "code": "    def _start_created(self, attrsD):\n", "error": "W", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1444", "colour": "orange", "code": "        self.push('created', 1)\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1445", "colour": "orange", "code": "    _start_dcterms_created = _start_created\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1446", "colour": "orange", "code": "\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1447", "colour": "orange", "code": "    def _end_created(self):\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1448", "colour": "orange", "code": "        value = self.pop('created')\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1449", "colour": "orange", "code": "        self._save('created_parsed', _parse_date(value), overwrite=True)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "1450", "colour": "orange", "code": "    _end_dcterms_created = _end_created\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1451", "colour": "orange", "code": "\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1452", "colour": "green", "code": "    def _start_expirationdate(self, attrsD):\n", "error": "W", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1453", "colour": "orange", "code": "        self.push('expired', 1)\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1454", "colour": "orange", "code": "\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1455", "colour": "orange", "code": "    def _end_expirationdate(self):\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1456", "colour": "orange", "code": "        self._save('expired_parsed', _parse_date(self.pop('expired')), overwrite=True)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "1457", "colour": "orange", "code": "\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1458", "colour": "orange", "code": "    def _start_cc_license(self, attrsD):\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1459", "colour": "orange", "code": "        context = self._getContext()\n", "error": "none", "author": "tom@organisms.be"}, {"index": "1460", "colour": "orange", "code": "        value = self._getAttribute(attrsD, 'rdf:resource')\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1461", "colour": "orange", "code": "        attrsD = FeedParserDict()\n", "error": "none", "author": "tom@organisms.be"}, {"index": "1462", "colour": "orange", "code": "        attrsD['rel'] = u'license'\n", "error": "none", "author": "tom@organisms.be"}, {"index": "1463", "colour": "orange", "code": "        if value:\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1464", "colour": "orange", "code": "            attrsD['href']=value\n", "error": "none", "author": "tom@organisms.be"}, {"index": "1465", "colour": "orange", "code": "        context.setdefault('links', []).append(attrsD)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "1466", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "1467", "colour": "green", "code": "    def _start_creativecommons_license(self, attrsD):\n", "error": "W", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1468", "colour": "orange", "code": "        self.push('license', 1)\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1469", "colour": "orange", "code": "    _start_creativeCommons_license = _start_creativecommons_license\n", "error": "none", "author": "tom@organisms.be"}, {"index": "1470", "colour": "orange", "code": "\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1471", "colour": "orange", "code": "    def _end_creativecommons_license(self):\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1472", "colour": "orange", "code": "        value = self.pop('license')\n", "error": "none", "author": "tom@organisms.be"}, {"index": "1473", "colour": "orange", "code": "        context = self._getContext()\n", "error": "none", "author": "tom@organisms.be"}, {"index": "1474", "colour": "orange", "code": "        attrsD = FeedParserDict()\n", "error": "none", "author": "tom@organisms.be"}, {"index": "1475", "colour": "orange", "code": "        attrsD['rel'] = u'license'\n", "error": "none", "author": "tom@organisms.be"}, {"index": "1476", "colour": "orange", "code": "        if value:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "1477", "colour": "orange", "code": "            attrsD['href'] = value\n", "error": "none", "author": "tom@organisms.be"}, {"index": "1478", "colour": "orange", "code": "        context.setdefault('links', []).append(attrsD)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "1479", "colour": "orange", "code": "        del context['license']\n", "error": "none", "author": "tom@organisms.be"}, {"index": "1480", "colour": "orange", "code": "    _end_creativeCommons_license = _end_creativecommons_license\n", "error": "none", "author": "tom@organisms.be"}, {"index": "1481", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "1482", "colour": "orange", "code": "    def _addXFN(self, relationships, href, name):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "1483", "colour": "orange", "code": "        context = self._getContext()\n", "error": "none", "author": "tom@organisms.be"}, {"index": "1484", "colour": "orange", "code": "        xfn = context.setdefault('xfn', [])\n", "error": "none", "author": "tom@organisms.be"}, {"index": "1485", "colour": "orange", "code": "        value = FeedParserDict({'relationships': relationships, 'href': href, 'name': name})\n", "error": "none", "author": "tom@organisms.be"}, {"index": "1486", "colour": "orange", "code": "        if value not in xfn:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "1487", "colour": "orange", "code": "            xfn.append(value)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "1488", "colour": "orange", "code": "\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1489", "colour": "orange", "code": "    def _addTag(self, term, scheme, label):\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1490", "colour": "orange", "code": "        context = self._getContext()\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1491", "colour": "orange", "code": "        tags = context.setdefault('tags', [])\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1492", "colour": "orange", "code": "        if (not term) and (not scheme) and (not label):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "1493", "colour": "orange", "code": "            return\n", "error": "none", "author": "tom@organisms.be"}, {"index": "1494", "colour": "orange", "code": "        value = FeedParserDict({'term': term, 'scheme': scheme, 'label': label})\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1495", "colour": "orange", "code": "        if value not in tags:\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1496", "colour": "orange", "code": "            tags.append(value)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "1497", "colour": "orange", "code": "\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1498", "colour": "orange", "code": "    def _start_category(self, attrsD):\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1499", "colour": "orange", "code": "        term = attrsD.get('term')\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1500", "colour": "orange", "code": "        scheme = attrsD.get('scheme', attrsD.get('domain'))\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1501", "colour": "orange", "code": "        label = attrsD.get('label')\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1502", "colour": "orange", "code": "        self._addTag(term, scheme, label)\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1503", "colour": "orange", "code": "        self.push('category', 1)\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1504", "colour": "orange", "code": "    _start_dc_subject = _start_category\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1505", "colour": "orange", "code": "    _start_keywords = _start_category\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1506", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "1507", "colour": "orange", "code": "    def _start_media_category(self, attrsD):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "1508", "colour": "orange", "code": "        attrsD.setdefault('scheme', u'http://search.yahoo.com/mrss/category_schema')\n", "error": "none", "author": "tom@organisms.be"}, {"index": "1509", "colour": "orange", "code": "        self._start_category(attrsD)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "1510", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "1511", "colour": "orange", "code": "    def _end_itunes_keywords(self):\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1512", "colour": "orange", "code": "        for term in self.pop('itunes_keywords').split(','):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "1513", "colour": "orange", "code": "            if term.strip():\n", "error": "none", "author": "tom@organisms.be"}, {"index": "1514", "colour": "orange", "code": "                self._addTag(term.strip(), u'http://www.itunes.com/', None)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "1515", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "1516", "colour": "orange", "code": "    def _start_itunes_category(self, attrsD):\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1517", "colour": "orange", "code": "        self._addTag(attrsD.get('text'), u'http://www.itunes.com/', None)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "1518", "colour": "orange", "code": "        self.push('category', 1)\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1519", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "1520", "colour": "orange", "code": "    def _end_category(self):\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1521", "colour": "orange", "code": "        value = self.pop('category')\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1522", "colour": "orange", "code": "        if not value:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "1523", "colour": "orange", "code": "            return\n", "error": "none", "author": "tom@organisms.be"}, {"index": "1524", "colour": "orange", "code": "        context = self._getContext()\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1525", "colour": "orange", "code": "        tags = context['tags']\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1526", "colour": "orange", "code": "        if value and len(tags) and not tags[-1]['term']:\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1527", "colour": "orange", "code": "            tags[-1]['term'] = value\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1528", "colour": "orange", "code": "        else:\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1529", "colour": "orange", "code": "            self._addTag(value, None, None)\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1530", "colour": "orange", "code": "    _end_dc_subject = _end_category\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1531", "colour": "orange", "code": "    _end_keywords = _end_category\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1532", "colour": "orange", "code": "    _end_itunes_category = _end_category\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1533", "colour": "orange", "code": "    _end_media_category = _end_category\n", "error": "none", "author": "tom@organisms.be"}, {"index": "1534", "colour": "orange", "code": "\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1535", "colour": "orange", "code": "    def _start_cloud(self, attrsD):\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1536", "colour": "orange", "code": "        self._getContext()['cloud'] = FeedParserDict(attrsD)\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1537", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "1538", "colour": "orange", "code": "    def _start_link(self, attrsD):\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1539", "colour": "orange", "code": "        attrsD.setdefault('rel', u'alternate')\n", "error": "none", "author": "tom@organisms.be"}, {"index": "1540", "colour": "orange", "code": "        if attrsD['rel'] == u'self':\n", "error": "none", "author": "tom@organisms.be"}, {"index": "1541", "colour": "orange", "code": "            attrsD.setdefault('type', u'application/atom+xml')\n", "error": "none", "author": "tom@organisms.be"}, {"index": "1542", "colour": "orange", "code": "        else:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "1543", "colour": "orange", "code": "            attrsD.setdefault('type', u'text/html')\n", "error": "none", "author": "tom@organisms.be"}, {"index": "1544", "colour": "orange", "code": "        context = self._getContext()\n", "error": "none", "author": "tom@organisms.be"}, {"index": "1545", "colour": "orange", "code": "        attrsD = self._itsAnHrefDamnIt(attrsD)\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1546", "colour": "orange", "code": "        if 'href' in attrsD:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "1547", "colour": "orange", "code": "            attrsD['href'] = self.resolveURI(attrsD['href'])\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1548", "colour": "orange", "code": "        expectingText = self.infeed or self.inentry or self.insource\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1549", "colour": "orange", "code": "        context.setdefault('links', [])\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1550", "colour": "orange", "code": "        if not (self.inentry and self.inimage):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "1551", "colour": "orange", "code": "            context['links'].append(FeedParserDict(attrsD))\n", "error": "none", "author": "tom@organisms.be"}, {"index": "1552", "colour": "orange", "code": "        if 'href' in attrsD:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "1553", "colour": "orange", "code": "            expectingText = 0\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1554", "colour": "orange", "code": "            if (attrsD.get('rel') == u'alternate') and (self.mapContentType(attrsD.get('type')) in self.html_types):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "1555", "colour": "orange", "code": "                context['link'] = attrsD['href']\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1556", "colour": "orange", "code": "        else:\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1557", "colour": "orange", "code": "            self.push('link', expectingText)\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1558", "colour": "orange", "code": "\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1559", "colour": "orange", "code": "    def _end_link(self):\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1560", "colour": "green", "code": "        value = self.pop('link')\n", "error": "W", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1561", "colour": "orange", "code": "\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1562", "colour": "orange", "code": "    def _start_guid(self, attrsD):\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1563", "colour": "green", "code": "        self.guidislink = (attrsD.get('ispermalink', 'true') == 'true')\n", "error": "W", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1564", "colour": "orange", "code": "        self.push('id', 1)\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1565", "colour": "orange", "code": "    _start_id = _start_guid\n", "error": "none", "author": "tom@organisms.be"}, {"index": "1566", "colour": "orange", "code": "\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1567", "colour": "orange", "code": "    def _end_guid(self):\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1568", "colour": "orange", "code": "        value = self.pop('id')\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1569", "colour": "orange", "code": "        self._save('guidislink', self.guidislink and 'link' not in self._getContext())\n", "error": "none", "author": "tom@organisms.be"}, {"index": "1570", "colour": "orange", "code": "        if self.guidislink:\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1571", "colour": "orange", "code": "            # guid acts as link, but only if 'ispermalink' is not present or is 'true',\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1572", "colour": "orange", "code": "            # and only if the item doesn't already have a link element\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1573", "colour": "orange", "code": "            self._save('link', value)\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1574", "colour": "orange", "code": "    _end_id = _end_guid\n", "error": "none", "author": "tom@organisms.be"}, {"index": "1575", "colour": "orange", "code": "\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1576", "colour": "orange", "code": "    def _start_title(self, attrsD):\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1577", "colour": "orange", "code": "        if self.svgOK:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "1578", "colour": "orange", "code": "            return self.unknown_starttag('title', attrsD.items())\n", "error": "none", "author": "tom@organisms.be"}, {"index": "1579", "colour": "orange", "code": "        self.pushContent('title', attrsD, u'text/plain', self.infeed or self.inentry or self.insource)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "1580", "colour": "orange", "code": "    _start_dc_title = _start_title\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1581", "colour": "orange", "code": "    _start_media_title = _start_title\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1582", "colour": "orange", "code": "\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1583", "colour": "orange", "code": "    def _end_title(self):\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1584", "colour": "orange", "code": "        if self.svgOK:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "1585", "colour": "orange", "code": "            return\n", "error": "none", "author": "tom@organisms.be"}, {"index": "1586", "colour": "orange", "code": "        value = self.popContent('title')\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1587", "colour": "orange", "code": "        if not value:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "1588", "colour": "orange", "code": "            return\n", "error": "none", "author": "tom@organisms.be"}, {"index": "1589", "colour": "orange", "code": "        self.title_depth = self.depth\n", "error": "none", "author": "tom@organisms.be"}, {"index": "1590", "colour": "orange", "code": "    _end_dc_title = _end_title\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1591", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "1592", "colour": "orange", "code": "    def _end_media_title(self):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "1593", "colour": "orange", "code": "        title_depth = self.title_depth\n", "error": "none", "author": "tom@organisms.be"}, {"index": "1594", "colour": "orange", "code": "        self._end_title()\n", "error": "none", "author": "tom@organisms.be"}, {"index": "1595", "colour": "orange", "code": "        self.title_depth = title_depth\n", "error": "none", "author": "tom@organisms.be"}, {"index": "1596", "colour": "orange", "code": "\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1597", "colour": "orange", "code": "    def _start_description(self, attrsD):\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1598", "colour": "orange", "code": "        context = self._getContext()\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1599", "colour": "orange", "code": "        if 'summary' in context:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "1600", "colour": "orange", "code": "            self._summaryKey = 'content'\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1601", "colour": "orange", "code": "            self._start_content(attrsD)\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1602", "colour": "orange", "code": "        else:\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1603", "colour": "orange", "code": "            self.pushContent('description', attrsD, u'text/html', self.infeed or self.inentry or self.insource)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "1604", "colour": "orange", "code": "    _start_dc_description = _start_description\n", "error": "none", "author": "tom@organisms.be"}, {"index": "1605", "colour": "orange", "code": "\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1606", "colour": "orange", "code": "    def _start_abstract(self, attrsD):\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1607", "colour": "orange", "code": "        self.pushContent('description', attrsD, u'text/plain', self.infeed or self.inentry or self.insource)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "1608", "colour": "orange", "code": "\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1609", "colour": "orange", "code": "    def _end_description(self):\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1610", "colour": "orange", "code": "        if self._summaryKey == 'content':\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1611", "colour": "orange", "code": "            self._end_content()\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1612", "colour": "orange", "code": "        else:\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1613", "colour": "green", "code": "            value = self.popContent('description')\n", "error": "W", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1614", "colour": "orange", "code": "        self._summaryKey = None\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1615", "colour": "orange", "code": "    _end_abstract = _end_description\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1616", "colour": "orange", "code": "    _end_dc_description = _end_description\n", "error": "none", "author": "tom@organisms.be"}, {"index": "1617", "colour": "orange", "code": "\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1618", "colour": "orange", "code": "    def _start_info(self, attrsD):\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1619", "colour": "orange", "code": "        self.pushContent('info', attrsD, u'text/plain', 1)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "1620", "colour": "orange", "code": "    _start_feedburner_browserfriendly = _start_info\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1621", "colour": "orange", "code": "\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1622", "colour": "orange", "code": "    def _end_info(self):\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1623", "colour": "orange", "code": "        self.popContent('info')\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1624", "colour": "orange", "code": "    _end_feedburner_browserfriendly = _end_info\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1625", "colour": "orange", "code": "\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1626", "colour": "orange", "code": "    def _start_generator(self, attrsD):\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1627", "colour": "orange", "code": "        if attrsD:\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1628", "colour": "orange", "code": "            attrsD = self._itsAnHrefDamnIt(attrsD)\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1629", "colour": "orange", "code": "            if 'href' in attrsD:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "1630", "colour": "orange", "code": "                attrsD['href'] = self.resolveURI(attrsD['href'])\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1631", "colour": "orange", "code": "        self._getContext()['generator_detail'] = FeedParserDict(attrsD)\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1632", "colour": "orange", "code": "        self.push('generator', 1)\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1633", "colour": "orange", "code": "\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1634", "colour": "orange", "code": "    def _end_generator(self):\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1635", "colour": "orange", "code": "        value = self.pop('generator')\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1636", "colour": "orange", "code": "        context = self._getContext()\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1637", "colour": "orange", "code": "        if 'generator_detail' in context:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "1638", "colour": "orange", "code": "            context['generator_detail']['name'] = value\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1639", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "1640", "colour": "orange", "code": "    def _start_admin_generatoragent(self, attrsD):\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1641", "colour": "orange", "code": "        self.push('generator', 1)\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1642", "colour": "orange", "code": "        value = self._getAttribute(attrsD, 'rdf:resource')\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1643", "colour": "orange", "code": "        if value:\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1644", "colour": "orange", "code": "            self.elementstack[-1][2].append(value)\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1645", "colour": "orange", "code": "        self.pop('generator')\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1646", "colour": "orange", "code": "        self._getContext()['generator_detail'] = FeedParserDict({'href': value})\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1647", "colour": "orange", "code": "\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1648", "colour": "orange", "code": "    def _start_admin_errorreportsto(self, attrsD):\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1649", "colour": "orange", "code": "        self.push('errorreportsto', 1)\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1650", "colour": "orange", "code": "        value = self._getAttribute(attrsD, 'rdf:resource')\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1651", "colour": "orange", "code": "        if value:\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1652", "colour": "orange", "code": "            self.elementstack[-1][2].append(value)\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1653", "colour": "orange", "code": "        self.pop('errorreportsto')\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1654", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "1655", "colour": "orange", "code": "    def _start_summary(self, attrsD):\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1656", "colour": "orange", "code": "        context = self._getContext()\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1657", "colour": "orange", "code": "        if 'summary' in context:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "1658", "colour": "orange", "code": "            self._summaryKey = 'content'\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1659", "colour": "orange", "code": "            self._start_content(attrsD)\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1660", "colour": "orange", "code": "        else:\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1661", "colour": "orange", "code": "            self._summaryKey = 'summary'\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1662", "colour": "orange", "code": "            self.pushContent(self._summaryKey, attrsD, u'text/plain', 1)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "1663", "colour": "orange", "code": "    _start_itunes_summary = _start_summary\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1664", "colour": "orange", "code": "\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1665", "colour": "orange", "code": "    def _end_summary(self):\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1666", "colour": "orange", "code": "        if self._summaryKey == 'content':\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1667", "colour": "orange", "code": "            self._end_content()\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1668", "colour": "orange", "code": "        else:\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1669", "colour": "orange", "code": "            self.popContent(self._summaryKey or 'summary')\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1670", "colour": "orange", "code": "        self._summaryKey = None\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1671", "colour": "orange", "code": "    _end_itunes_summary = _end_summary\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1672", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "1673", "colour": "orange", "code": "    def _start_enclosure(self, attrsD):\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1674", "colour": "orange", "code": "        attrsD = self._itsAnHrefDamnIt(attrsD)\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1675", "colour": "orange", "code": "        context = self._getContext()\n", "error": "none", "author": "tom@organisms.be"}, {"index": "1676", "colour": "orange", "code": "        attrsD['rel'] = u'enclosure'\n", "error": "none", "author": "tom@organisms.be"}, {"index": "1677", "colour": "orange", "code": "        context.setdefault('links', []).append(FeedParserDict(attrsD))\n", "error": "none", "author": "tom@organisms.be"}, {"index": "1678", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "1679", "colour": "orange", "code": "    def _start_source(self, attrsD):\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1680", "colour": "orange", "code": "        if 'url' in attrsD:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "1681", "colour": "orange", "code": "            # This means that we're processing a source element from an RSS 2.0 feed\n", "error": "none", "author": "tom@organisms.be"}, {"index": "1682", "colour": "orange", "code": "            self.sourcedata['href'] = attrsD[u'url']\n", "error": "none", "author": "tom@organisms.be"}, {"index": "1683", "colour": "orange", "code": "        self.push('source', 1)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "1684", "colour": "orange", "code": "        self.insource = 1\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1685", "colour": "orange", "code": "        self.title_depth = -1\n", "error": "none", "author": "tom@organisms.be"}, {"index": "1686", "colour": "orange", "code": "\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1687", "colour": "orange", "code": "    def _end_source(self):\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1688", "colour": "orange", "code": "        self.insource = 0\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1689", "colour": "orange", "code": "        value = self.pop('source')\n", "error": "none", "author": "tom@organisms.be"}, {"index": "1690", "colour": "orange", "code": "        if value:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "1691", "colour": "orange", "code": "            self.sourcedata['title'] = value\n", "error": "none", "author": "tom@organisms.be"}, {"index": "1692", "colour": "orange", "code": "        self._getContext()['source'] = copy.deepcopy(self.sourcedata)\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1693", "colour": "orange", "code": "        self.sourcedata.clear()\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1694", "colour": "orange", "code": "\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1695", "colour": "orange", "code": "    def _start_content(self, attrsD):\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1696", "colour": "orange", "code": "        self.pushContent('content', attrsD, u'text/plain', 1)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "1697", "colour": "orange", "code": "        src = attrsD.get('src')\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1698", "colour": "orange", "code": "        if src:\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1699", "colour": "orange", "code": "            self.contentparams['src'] = src\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1700", "colour": "orange", "code": "        self.push('content', 1)\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1701", "colour": "orange", "code": "\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1702", "colour": "orange", "code": "    def _start_body(self, attrsD):\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1703", "colour": "orange", "code": "        self.pushContent('content', attrsD, u'application/xhtml+xml', 1)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "1704", "colour": "orange", "code": "    _start_xhtml_body = _start_body\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1705", "colour": "orange", "code": "\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1706", "colour": "orange", "code": "    def _start_content_encoded(self, attrsD):\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1707", "colour": "orange", "code": "        self.pushContent('content', attrsD, u'text/html', 1)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "1708", "colour": "orange", "code": "    _start_fullitem = _start_content_encoded\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1709", "colour": "orange", "code": "\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1710", "colour": "orange", "code": "    def _end_content(self):\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1711", "colour": "orange", "code": "        copyToSummary = self.mapContentType(self.contentparams.get('type')) in ([u'text/plain'] + self.html_types)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "1712", "colour": "orange", "code": "        value = self.popContent('content')\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1713", "colour": "orange", "code": "        if copyToSummary:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "1714", "colour": "orange", "code": "            self._save('summary', value)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "1715", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "1716", "colour": "orange", "code": "    _end_body = _end_content\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1717", "colour": "orange", "code": "    _end_xhtml_body = _end_content\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1718", "colour": "orange", "code": "    _end_content_encoded = _end_content\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1719", "colour": "orange", "code": "    _end_fullitem = _end_content\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1720", "colour": "orange", "code": "\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1721", "colour": "orange", "code": "    def _start_itunes_image(self, attrsD):\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1722", "colour": "orange", "code": "        self.push('itunes_image', 0)\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1723", "colour": "orange", "code": "        if attrsD.get('href'):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "1724", "colour": "orange", "code": "            self._getContext()['image'] = FeedParserDict({'href': attrsD.get('href')})\n", "error": "none", "author": "tom@organisms.be"}, {"index": "1725", "colour": "orange", "code": "        elif attrsD.get('url'):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "1726", "colour": "orange", "code": "            self._getContext()['image'] = FeedParserDict({'href': attrsD.get('url')})\n", "error": "none", "author": "tom@organisms.be"}, {"index": "1727", "colour": "orange", "code": "    _start_itunes_link = _start_itunes_image\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1728", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "1729", "colour": "orange", "code": "    def _end_itunes_block(self):\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1730", "colour": "orange", "code": "        value = self.pop('itunes_block', 0)\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1731", "colour": "orange", "code": "        self._getContext()['itunes_block'] = (value == 'yes') and 1 or 0\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1732", "colour": "orange", "code": "\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1733", "colour": "orange", "code": "    def _end_itunes_explicit(self):\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1734", "colour": "orange", "code": "        value = self.pop('itunes_explicit', 0)\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1735", "colour": "orange", "code": "        # Convert 'yes' -> True, 'clean' to False, and any other value to None\n", "error": "none", "author": "tom@organisms.be"}, {"index": "1736", "colour": "orange", "code": "        # False and None both evaluate as False, so the difference can be ignored\n", "error": "none", "author": "tom@organisms.be"}, {"index": "1737", "colour": "orange", "code": "        # by applications that only need to know if the content is explicit.\n", "error": "none", "author": "tom@organisms.be"}, {"index": "1738", "colour": "orange", "code": "        self._getContext()['itunes_explicit'] = (None, False, True)[(value == 'yes' and 2) or value == 'clean' or 0]\n", "error": "none", "author": "tom@organisms.be"}, {"index": "1739", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "1740", "colour": "orange", "code": "    def _start_media_content(self, attrsD):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "1741", "colour": "orange", "code": "        context = self._getContext()\n", "error": "none", "author": "tom@organisms.be"}, {"index": "1742", "colour": "orange", "code": "        context.setdefault('media_content', [])\n", "error": "none", "author": "tom@organisms.be"}, {"index": "1743", "colour": "orange", "code": "        context['media_content'].append(attrsD)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "1744", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "1745", "colour": "orange", "code": "    def _start_media_thumbnail(self, attrsD):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "1746", "colour": "orange", "code": "        context = self._getContext()\n", "error": "none", "author": "tom@organisms.be"}, {"index": "1747", "colour": "orange", "code": "        context.setdefault('media_thumbnail', [])\n", "error": "none", "author": "tom@organisms.be"}, {"index": "1748", "colour": "orange", "code": "        self.push('url', 1) # new\n", "error": "none", "author": "tom@organisms.be"}, {"index": "1749", "colour": "orange", "code": "        context['media_thumbnail'].append(attrsD)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "1750", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "1751", "colour": "orange", "code": "    def _end_media_thumbnail(self):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "1752", "colour": "orange", "code": "        url = self.pop('url')\n", "error": "none", "author": "tom@organisms.be"}, {"index": "1753", "colour": "orange", "code": "        context = self._getContext()\n", "error": "none", "author": "tom@organisms.be"}, {"index": "1754", "colour": "orange", "code": "        if url != None and len(url.strip()) != 0:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "1755", "colour": "orange", "code": "            if 'url' not in context['media_thumbnail'][-1]:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "1756", "colour": "orange", "code": "                context['media_thumbnail'][-1]['url'] = url\n", "error": "none", "author": "tom@organisms.be"}, {"index": "1757", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "1758", "colour": "orange", "code": "    def _start_media_player(self, attrsD):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "1759", "colour": "orange", "code": "        self.push('media_player', 0)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "1760", "colour": "orange", "code": "        self._getContext()['media_player'] = FeedParserDict(attrsD)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "1761", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "1762", "colour": "orange", "code": "    def _end_media_player(self):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "1763", "colour": "orange", "code": "        value = self.pop('media_player')\n", "error": "none", "author": "tom@organisms.be"}, {"index": "1764", "colour": "orange", "code": "        context = self._getContext()\n", "error": "none", "author": "tom@organisms.be"}, {"index": "1765", "colour": "orange", "code": "        context['media_player']['content'] = value\n", "error": "none", "author": "tom@organisms.be"}, {"index": "1766", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "1767", "colour": "green", "code": "    def _start_newlocation(self, attrsD):\n", "error": "W", "author": "tom@organisms.be"}, {"index": "1768", "colour": "orange", "code": "        self.push('newlocation', 1)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "1769", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "1770", "colour": "orange", "code": "    def _end_newlocation(self):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "1771", "colour": "orange", "code": "        url = self.pop('newlocation')\n", "error": "none", "author": "tom@organisms.be"}, {"index": "1772", "colour": "orange", "code": "        context = self._getContext()\n", "error": "none", "author": "tom@organisms.be"}, {"index": "1773", "colour": "orange", "code": "        # don't set newlocation if the context isn't right\n", "error": "none", "author": "tom@organisms.be"}, {"index": "1774", "colour": "orange", "code": "        if context is not self.feeddata:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "1775", "colour": "orange", "code": "            return\n", "error": "none", "author": "tom@organisms.be"}, {"index": "1776", "colour": "orange", "code": "        context['newlocation'] = _makeSafeAbsoluteURI(self.baseuri, url.strip())\n", "error": "none", "author": "tom@organisms.be"}, {"index": "1777", "colour": "orange", "code": "\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1778", "colour": "orange", "code": "if _XML_AVAILABLE:\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1779", "colour": "blue", "code": "    class _StrictFeedParser(_FeedParserMixin, xml.sax.handler.ContentHandler):\n", "error": "R", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1780", "colour": "orange", "code": "        def __init__(self, baseuri, baselang, encoding):\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1781", "colour": "orange", "code": "            xml.sax.handler.ContentHandler.__init__(self)\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1782", "colour": "orange", "code": "            _FeedParserMixin.__init__(self, baseuri, baselang, encoding)\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1783", "colour": "orange", "code": "            self.bozo = 0\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1784", "colour": "orange", "code": "            self.exc = None\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1785", "colour": "orange", "code": "            self.decls = {}\n", "error": "none", "author": "tom@organisms.be"}, {"index": "1786", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "1787", "colour": "orange", "code": "        def startPrefixMapping(self, prefix, uri):\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1788", "colour": "orange", "code": "            if not uri:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "1789", "colour": "orange", "code": "                return\n", "error": "none", "author": "tom@organisms.be"}, {"index": "1790", "colour": "orange", "code": "            # Jython uses '' instead of None; standardize on None\n", "error": "none", "author": "tom@organisms.be"}, {"index": "1791", "colour": "orange", "code": "            prefix = prefix or None\n", "error": "none", "author": "tom@organisms.be"}, {"index": "1792", "colour": "orange", "code": "            self.trackNamespace(prefix, uri)\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1793", "colour": "orange", "code": "            if prefix and uri == 'http://www.w3.org/1999/xlink':\n", "error": "none", "author": "tom@organisms.be"}, {"index": "1794", "colour": "orange", "code": "                self.decls['xmlns:' + prefix] = uri\n", "error": "none", "author": "tom@organisms.be"}, {"index": "1795", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "1796", "colour": "blue", "code": "        def startElementNS(self, name, qname, attrs):\n", "error": "R", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1797", "colour": "orange", "code": "            namespace, localname = name\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1798", "colour": "orange", "code": "            lowernamespace = str(namespace or '').lower()\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1799", "colour": "green", "code": "            if lowernamespace.find(u'backend.userland.com/rss') <> -1:\n", "error": "W", "author": "tom@organisms.be"}, {"index": "1800", "colour": "orange", "code": "                # match any backend.userland.com namespace\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1801", "colour": "orange", "code": "                namespace = u'http://backend.userland.com/rss'\n", "error": "none", "author": "tom@organisms.be"}, {"index": "1802", "colour": "orange", "code": "                lowernamespace = namespace\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1803", "colour": "orange", "code": "            if qname and qname.find(':') > 0:\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1804", "colour": "orange", "code": "                givenprefix = qname.split(':')[0]\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1805", "colour": "orange", "code": "            else:\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1806", "colour": "orange", "code": "                givenprefix = None\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1807", "colour": "orange", "code": "            prefix = self._matchnamespaces.get(lowernamespace, givenprefix)\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1808", "colour": "orange", "code": "            if givenprefix and (prefix == None or (prefix == '' and lowernamespace == '')) and givenprefix not in self.namespacesInUse:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "1809", "colour": "orange", "code": "                raise UndeclaredNamespace(\"'%s' is not associated with a namespace\" % givenprefix)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "1810", "colour": "orange", "code": "            localname = str(localname).lower()\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1811", "colour": "orange", "code": "\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1812", "colour": "orange", "code": "            # qname implementation is horribly broken in Python 2.1 (it\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1813", "colour": "orange", "code": "            # doesn't report any), and slightly broken in Python 2.2 (it\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1814", "colour": "orange", "code": "            # doesn't report the xml: namespace). So we match up namespaces\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1815", "colour": "orange", "code": "            # with a known list first, and then possibly override them with\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1816", "colour": "orange", "code": "            # the qnames the SAX parser gives us (if indeed it gives us any\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1817", "colour": "orange", "code": "            # at all).  Thanks to MatejC for helping me test this and\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1818", "colour": "orange", "code": "            # tirelessly telling me that it didn't work yet.\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1819", "colour": "orange", "code": "            attrsD, self.decls = self.decls, {}\n", "error": "none", "author": "tom@organisms.be"}, {"index": "1820", "colour": "orange", "code": "            if localname=='math' and namespace=='http://www.w3.org/1998/Math/MathML':\n", "error": "none", "author": "tom@organisms.be"}, {"index": "1821", "colour": "orange", "code": "                attrsD['xmlns']=namespace\n", "error": "none", "author": "tom@organisms.be"}, {"index": "1822", "colour": "orange", "code": "            if localname=='svg' and namespace=='http://www.w3.org/2000/svg':\n", "error": "none", "author": "tom@organisms.be"}, {"index": "1823", "colour": "orange", "code": "                attrsD['xmlns']=namespace\n", "error": "none", "author": "tom@organisms.be"}, {"index": "1824", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "1825", "colour": "orange", "code": "            if prefix:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "1826", "colour": "orange", "code": "                localname = prefix.lower() + ':' + localname\n", "error": "none", "author": "tom@organisms.be"}, {"index": "1827", "colour": "orange", "code": "            elif namespace and not qname: #Expat\n", "error": "none", "author": "tom@organisms.be"}, {"index": "1828", "colour": "orange", "code": "                for name,value in self.namespacesInUse.items():\n", "error": "none", "author": "tom@organisms.be"}, {"index": "1829", "colour": "orange", "code": "                    if name and value == namespace:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "1830", "colour": "orange", "code": "                        localname = name + ':' + localname\n", "error": "none", "author": "tom@organisms.be"}, {"index": "1831", "colour": "orange", "code": "                        break\n", "error": "none", "author": "tom@organisms.be"}, {"index": "1832", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "1833", "colour": "orange", "code": "            for (namespace, attrlocalname), attrvalue in attrs.items():\n", "error": "none", "author": "tom@organisms.be"}, {"index": "1834", "colour": "orange", "code": "                lowernamespace = (namespace or '').lower()\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1835", "colour": "orange", "code": "                prefix = self._matchnamespaces.get(lowernamespace, '')\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1836", "colour": "orange", "code": "                if prefix:\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1837", "colour": "orange", "code": "                    attrlocalname = prefix + ':' + attrlocalname\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1838", "colour": "orange", "code": "                attrsD[str(attrlocalname).lower()] = attrvalue\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1839", "colour": "orange", "code": "            for qname in attrs.getQNames():\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1840", "colour": "orange", "code": "                attrsD[str(qname).lower()] = attrs.getValueByQName(qname)\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1841", "colour": "orange", "code": "            self.unknown_starttag(localname, attrsD.items())\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1842", "colour": "orange", "code": "\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1843", "colour": "orange", "code": "        def characters(self, text):\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1844", "colour": "orange", "code": "            self.handle_data(text)\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1845", "colour": "orange", "code": "\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1846", "colour": "orange", "code": "        def endElementNS(self, name, qname):\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1847", "colour": "orange", "code": "            namespace, localname = name\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1848", "colour": "orange", "code": "            lowernamespace = str(namespace or '').lower()\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1849", "colour": "orange", "code": "            if qname and qname.find(':') > 0:\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1850", "colour": "orange", "code": "                givenprefix = qname.split(':')[0]\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1851", "colour": "orange", "code": "            else:\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1852", "colour": "orange", "code": "                givenprefix = ''\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1853", "colour": "orange", "code": "            prefix = self._matchnamespaces.get(lowernamespace, givenprefix)\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1854", "colour": "orange", "code": "            if prefix:\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1855", "colour": "orange", "code": "                localname = prefix + ':' + localname\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1856", "colour": "orange", "code": "            elif namespace and not qname: #Expat\n", "error": "none", "author": "tom@organisms.be"}, {"index": "1857", "colour": "orange", "code": "                for name,value in self.namespacesInUse.items():\n", "error": "none", "author": "tom@organisms.be"}, {"index": "1858", "colour": "orange", "code": "                    if name and value == namespace:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "1859", "colour": "orange", "code": "                        localname = name + ':' + localname\n", "error": "none", "author": "tom@organisms.be"}, {"index": "1860", "colour": "orange", "code": "                        break\n", "error": "none", "author": "tom@organisms.be"}, {"index": "1861", "colour": "orange", "code": "            localname = str(localname).lower()\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1862", "colour": "orange", "code": "            self.unknown_endtag(localname)\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1863", "colour": "orange", "code": "\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1864", "colour": "orange", "code": "        def error(self, exc):\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1865", "colour": "orange", "code": "            self.bozo = 1\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1866", "colour": "orange", "code": "            self.exc = exc\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1867", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "1868", "colour": "orange", "code": "        # drv_libxml2 calls warning() in some cases\n", "error": "none", "author": "tom@organisms.be"}, {"index": "1869", "colour": "orange", "code": "        warning = error\n", "error": "none", "author": "tom@organisms.be"}, {"index": "1870", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "1871", "colour": "orange", "code": "        def fatalError(self, exc):\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1872", "colour": "orange", "code": "            self.error(exc)\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1873", "colour": "orange", "code": "            raise exc\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1874", "colour": "orange", "code": "\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1875", "colour": "blue", "code": "class _BaseHTMLProcessor(sgmllib.SGMLParser):\n", "error": "R", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1876", "colour": "orange", "code": "    special = re.compile('''[<>'\"]''')\n", "error": "none", "author": "tom@organisms.be"}, {"index": "1877", "colour": "green", "code": "    bare_ampersand = re.compile(\"&(?!#\\d+;|#x[0-9a-fA-F]+;|\\w+;)\")\n", "error": "W", "author": "tom@organisms.be"}, {"index": "1878", "colour": "orange", "code": "    elements_no_end_tag = set([\n", "error": "none", "author": "tom@organisms.be"}, {"index": "1879", "colour": "orange", "code": "      'area', 'base', 'basefont', 'br', 'col', 'command', 'embed', 'frame',\n", "error": "none", "author": "tom@organisms.be"}, {"index": "1880", "colour": "orange", "code": "      'hr', 'img', 'input', 'isindex', 'keygen', 'link', 'meta', 'param',\n", "error": "none", "author": "tom@organisms.be"}, {"index": "1881", "colour": "orange", "code": "      'source', 'track', 'wbr'\n", "error": "none", "author": "tom@organisms.be"}, {"index": "1882", "colour": "orange", "code": "    ])\n", "error": "none", "author": "tom@organisms.be"}, {"index": "1883", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "1884", "colour": "orange", "code": "    def __init__(self, encoding, _type):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "1885", "colour": "orange", "code": "        self.encoding = encoding\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1886", "colour": "orange", "code": "        self._type = _type\n", "error": "none", "author": "tom@organisms.be"}, {"index": "1887", "colour": "orange", "code": "        sgmllib.SGMLParser.__init__(self)\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1888", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "1889", "colour": "orange", "code": "    def reset(self):\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1890", "colour": "green", "code": "        self.pieces = []\n", "error": "W", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1891", "colour": "orange", "code": "        sgmllib.SGMLParser.reset(self)\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1892", "colour": "orange", "code": "\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1893", "colour": "orange", "code": "    def _shorttag_replace(self, match):\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1894", "colour": "orange", "code": "        tag = match.group(1)\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1895", "colour": "orange", "code": "        if tag in self.elements_no_end_tag:\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1896", "colour": "orange", "code": "            return '<' + tag + ' />'\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1897", "colour": "orange", "code": "        else:\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1898", "colour": "orange", "code": "            return '<' + tag + '></' + tag + '>'\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1899", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "1900", "colour": "orange", "code": "    # By declaring these methods and overriding their compiled code\n", "error": "none", "author": "tom@organisms.be"}, {"index": "1901", "colour": "orange", "code": "    # with the code from sgmllib, the original code will execute in\n", "error": "none", "author": "tom@organisms.be"}, {"index": "1902", "colour": "orange", "code": "    # feedparser's scope instead of sgmllib's. This means that the\n", "error": "none", "author": "tom@organisms.be"}, {"index": "1903", "colour": "orange", "code": "    # `tagfind` and `charref` regular expressions will be found as\n", "error": "none", "author": "tom@organisms.be"}, {"index": "1904", "colour": "orange", "code": "    # they're declared above, not as they're declared in sgmllib.\n", "error": "none", "author": "tom@organisms.be"}, {"index": "1905", "colour": "orange", "code": "    def goahead(self, i):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "1906", "colour": "orange", "code": "        pass\n", "error": "none", "author": "tom@organisms.be"}, {"index": "1907", "colour": "orange", "code": "    goahead.func_code = sgmllib.SGMLParser.goahead.func_code\n", "error": "none", "author": "tom@organisms.be"}, {"index": "1908", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "1909", "colour": "orange", "code": "    def __parse_starttag(self, i):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "1910", "colour": "orange", "code": "        pass\n", "error": "none", "author": "tom@organisms.be"}, {"index": "1911", "colour": "orange", "code": "    __parse_starttag.func_code = sgmllib.SGMLParser.parse_starttag.func_code\n", "error": "none", "author": "tom@organisms.be"}, {"index": "1912", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "1913", "colour": "orange", "code": "    def parse_starttag(self,i):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "1914", "colour": "orange", "code": "        j = self.__parse_starttag(i)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "1915", "colour": "orange", "code": "        if self._type == 'application/xhtml+xml':\n", "error": "none", "author": "tom@organisms.be"}, {"index": "1916", "colour": "orange", "code": "            if j>2 and self.rawdata[j-2:j]=='/>':\n", "error": "none", "author": "tom@organisms.be"}, {"index": "1917", "colour": "orange", "code": "                self.unknown_endtag(self.lasttag)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "1918", "colour": "orange", "code": "        return j\n", "error": "none", "author": "tom@organisms.be"}, {"index": "1919", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "1920", "colour": "orange", "code": "    def feed(self, data):\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1921", "colour": "orange", "code": "        data = re.compile(r'<!((?!DOCTYPE|--|\\[))', re.IGNORECASE).sub(r'&lt;!\\1', data)\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1922", "colour": "orange", "code": "        data = re.sub(r'<([^<>\\s]+?)\\s*/>', self._shorttag_replace, data)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "1923", "colour": "orange", "code": "        data = data.replace('&#39;', \"'\")\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1924", "colour": "orange", "code": "        data = data.replace('&#34;', '\"')\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1925", "colour": "orange", "code": "        try:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "1926", "colour": "green", "code": "            bytes\n", "error": "W", "author": "tom@organisms.be"}, {"index": "1927", "colour": "orange", "code": "            if bytes is str:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "1928", "colour": "orange", "code": "                raise NameError\n", "error": "none", "author": "tom@organisms.be"}, {"index": "1929", "colour": "orange", "code": "            self.encoding = self.encoding + u'_INVALID_PYTHON_3'\n", "error": "none", "author": "tom@organisms.be"}, {"index": "1930", "colour": "orange", "code": "        except NameError:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "1931", "colour": "orange", "code": "            if self.encoding and isinstance(data, unicode):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "1932", "colour": "orange", "code": "                data = data.encode(self.encoding)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "1933", "colour": "orange", "code": "        sgmllib.SGMLParser.feed(self, data)\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1934", "colour": "orange", "code": "        sgmllib.SGMLParser.close(self)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "1935", "colour": "orange", "code": "\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1936", "colour": "blue", "code": "    def normalize_attrs(self, attrs):\n", "error": "R", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1937", "colour": "orange", "code": "        if not attrs:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "1938", "colour": "orange", "code": "            return attrs\n", "error": "none", "author": "tom@organisms.be"}, {"index": "1939", "colour": "orange", "code": "        # utility method to be called by descendants\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1940", "colour": "orange", "code": "        attrs = dict([(k.lower(), v) for k, v in attrs]).items()\n", "error": "none", "author": "tom@organisms.be"}, {"index": "1941", "colour": "orange", "code": "        attrs = [(k, k in ('rel', 'type') and v.lower() or v) for k, v in attrs]\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1942", "colour": "orange", "code": "        attrs.sort()\n", "error": "none", "author": "tom@organisms.be"}, {"index": "1943", "colour": "orange", "code": "        return attrs\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1944", "colour": "orange", "code": "\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1945", "colour": "orange", "code": "    def unknown_starttag(self, tag, attrs):\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1946", "colour": "orange", "code": "        # called for each start tag\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1947", "colour": "orange", "code": "        # attrs is a list of (attr, value) tuples\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1948", "colour": "orange", "code": "        # e.g. for <pre class='screen'>, tag='pre', attrs=[('class', 'screen')]\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1949", "colour": "orange", "code": "        uattrs = []\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1950", "colour": "orange", "code": "        strattrs=''\n", "error": "none", "author": "tom@organisms.be"}, {"index": "1951", "colour": "orange", "code": "        if attrs:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "1952", "colour": "orange", "code": "            for key, value in attrs:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "1953", "colour": "orange", "code": "                value=value.replace('>','&gt;').replace('<','&lt;').replace('\"','&quot;')\n", "error": "none", "author": "tom@organisms.be"}, {"index": "1954", "colour": "orange", "code": "                value = self.bare_ampersand.sub(\"&amp;\", value)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "1955", "colour": "orange", "code": "                # thanks to Kevin Marks for this breathtaking hack to deal with (valid) high-bit attribute values in UTF-8 feeds\n", "error": "none", "author": "tom@organisms.be"}, {"index": "1956", "colour": "orange", "code": "                if not isinstance(value, unicode):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "1957", "colour": "orange", "code": "                    value = value.decode(self.encoding, 'ignore')\n", "error": "none", "author": "tom@organisms.be"}, {"index": "1958", "colour": "orange", "code": "                try:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "1959", "colour": "orange", "code": "                    # Currently, in Python 3 the key is already a str, and cannot be decoded again\n", "error": "none", "author": "tom@organisms.be"}, {"index": "1960", "colour": "orange", "code": "                    uattrs.append((unicode(key, self.encoding), value))\n", "error": "none", "author": "tom@organisms.be"}, {"index": "1961", "colour": "orange", "code": "                except TypeError:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "1962", "colour": "orange", "code": "                    uattrs.append((key, value))\n", "error": "none", "author": "tom@organisms.be"}, {"index": "1963", "colour": "orange", "code": "            strattrs = u''.join([u' %s=\"%s\"' % (key, value) for key, value in uattrs])\n", "error": "none", "author": "tom@organisms.be"}, {"index": "1964", "colour": "orange", "code": "            if self.encoding:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "1965", "colour": "orange", "code": "                try:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "1966", "colour": "orange", "code": "                    strattrs = strattrs.encode(self.encoding)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "1967", "colour": "orange", "code": "                except (UnicodeEncodeError, LookupError):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "1968", "colour": "orange", "code": "                    pass\n", "error": "none", "author": "tom@organisms.be"}, {"index": "1969", "colour": "orange", "code": "        if tag in self.elements_no_end_tag:\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1970", "colour": "orange", "code": "            self.pieces.append('<%s%s />' % (tag, strattrs))\n", "error": "none", "author": "tom@organisms.be"}, {"index": "1971", "colour": "orange", "code": "        else:\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1972", "colour": "orange", "code": "            self.pieces.append('<%s%s>' % (tag, strattrs))\n", "error": "none", "author": "tom@organisms.be"}, {"index": "1973", "colour": "orange", "code": "\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1974", "colour": "orange", "code": "    def unknown_endtag(self, tag):\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1975", "colour": "orange", "code": "        # called for each end tag, e.g. for </pre>, tag will be 'pre'\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1976", "colour": "orange", "code": "        # Reconstruct the original end tag.\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1977", "colour": "orange", "code": "        if tag not in self.elements_no_end_tag:\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1978", "colour": "orange", "code": "            self.pieces.append(\"</%s>\" % tag)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "1979", "colour": "orange", "code": "\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1980", "colour": "orange", "code": "    def handle_charref(self, ref):\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1981", "colour": "orange", "code": "        # called for each character reference, e.g. for '&#160;', ref will be '160'\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1982", "colour": "orange", "code": "        # Reconstruct the original character reference.\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1983", "colour": "orange", "code": "        if ref.startswith('x'):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "1984", "colour": "orange", "code": "            value = int(ref[1:], 16)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "1985", "colour": "orange", "code": "        else:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "1986", "colour": "orange", "code": "            value = int(ref)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "1987", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "1988", "colour": "orange", "code": "        if value in _cp1252:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "1989", "colour": "orange", "code": "            self.pieces.append('&#%s;' % hex(ord(_cp1252[value]))[1:])\n", "error": "none", "author": "tom@organisms.be"}, {"index": "1990", "colour": "orange", "code": "        else:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "1991", "colour": "orange", "code": "            self.pieces.append('&#%s;' % ref)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "1992", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "1993", "colour": "orange", "code": "    def handle_entityref(self, ref):\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1994", "colour": "orange", "code": "        # called for each entity reference, e.g. for '&copy;', ref will be 'copy'\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1995", "colour": "orange", "code": "        # Reconstruct the original entity reference.\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "1996", "colour": "orange", "code": "        if ref in name2codepoint or ref == 'apos':\n", "error": "none", "author": "tom@organisms.be"}, {"index": "1997", "colour": "orange", "code": "            self.pieces.append('&%s;' % ref)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "1998", "colour": "orange", "code": "        else:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "1999", "colour": "orange", "code": "            self.pieces.append('&amp;%s' % ref)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "2000", "colour": "orange", "code": "\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "2001", "colour": "orange", "code": "    def handle_data(self, text):\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "2002", "colour": "orange", "code": "        # called for each block of plain text, i.e. outside of any tag and\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "2003", "colour": "orange", "code": "        # not containing any character or entity references\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "2004", "colour": "orange", "code": "        # Store the original text verbatim.\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "2005", "colour": "orange", "code": "        self.pieces.append(text)\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "2006", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "2007", "colour": "orange", "code": "    def handle_comment(self, text):\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "2008", "colour": "orange", "code": "        # called for each HTML comment, e.g. <!-- insert Javascript code here -->\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "2009", "colour": "orange", "code": "        # Reconstruct the original comment.\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "2010", "colour": "orange", "code": "        self.pieces.append('<!--%s-->' % text)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "2011", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "2012", "colour": "orange", "code": "    def handle_pi(self, text):\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "2013", "colour": "orange", "code": "        # called for each processing instruction, e.g. <?instruction>\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "2014", "colour": "orange", "code": "        # Reconstruct original processing instruction.\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "2015", "colour": "orange", "code": "        self.pieces.append('<?%s>' % text)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "2016", "colour": "orange", "code": "\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "2017", "colour": "orange", "code": "    def handle_decl(self, text):\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "2018", "colour": "orange", "code": "        # called for the DOCTYPE, if present, e.g.\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "2019", "colour": "orange", "code": "        # <!DOCTYPE html PUBLIC \"-//W3C//DTD HTML 4.01 Transitional//EN\"\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "2020", "colour": "orange", "code": "        #     \"http://www.w3.org/TR/html4/loose.dtd\">\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "2021", "colour": "orange", "code": "        # Reconstruct original DOCTYPE\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "2022", "colour": "orange", "code": "        self.pieces.append('<!%s>' % text)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "2023", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "2024", "colour": "orange", "code": "    _new_declname_match = re.compile(r'[a-zA-Z][-_.a-zA-Z0-9:]*\\s*').match\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "2025", "colour": "orange", "code": "    def _scan_name(self, i, declstartpos):\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "2026", "colour": "orange", "code": "        rawdata = self.rawdata\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "2027", "colour": "orange", "code": "        n = len(rawdata)\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "2028", "colour": "orange", "code": "        if i == n:\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "2029", "colour": "orange", "code": "            return None, -1\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "2030", "colour": "orange", "code": "        m = self._new_declname_match(rawdata, i)\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "2031", "colour": "orange", "code": "        if m:\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "2032", "colour": "orange", "code": "            s = m.group()\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "2033", "colour": "orange", "code": "            name = s.strip()\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "2034", "colour": "orange", "code": "            if (i + len(s)) == n:\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "2035", "colour": "orange", "code": "                return None, -1  # end of buffer\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "2036", "colour": "orange", "code": "            return name.lower(), m.end()\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "2037", "colour": "orange", "code": "        else:\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "2038", "colour": "orange", "code": "            self.handle_data(rawdata)\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "2039", "colour": "orange", "code": "#            self.updatepos(declstartpos, i)\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "2040", "colour": "orange", "code": "            return None, -1\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "2041", "colour": "orange", "code": "\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "2042", "colour": "orange", "code": "    def convert_charref(self, name):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "2043", "colour": "orange", "code": "        return '&#%s;' % name\n", "error": "none", "author": "tom@organisms.be"}, {"index": "2044", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "2045", "colour": "orange", "code": "    def convert_entityref(self, name):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "2046", "colour": "orange", "code": "        return '&%s;' % name\n", "error": "none", "author": "tom@organisms.be"}, {"index": "2047", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "2048", "colour": "orange", "code": "    def output(self):\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "2049", "colour": "orange", "code": "        '''Return processed HTML as a single string'''\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "2050", "colour": "orange", "code": "        return ''.join([str(p) for p in self.pieces])\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "2051", "colour": "orange", "code": "\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "2052", "colour": "orange", "code": "    def parse_declaration(self, i):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "2053", "colour": "orange", "code": "        try:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "2054", "colour": "orange", "code": "            return sgmllib.SGMLParser.parse_declaration(self, i)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "2055", "colour": "orange", "code": "        except sgmllib.SGMLParseError:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "2056", "colour": "orange", "code": "            # escape the doctype declaration and continue parsing\n", "error": "none", "author": "tom@organisms.be"}, {"index": "2057", "colour": "orange", "code": "            self.handle_data('&lt;')\n", "error": "none", "author": "tom@organisms.be"}, {"index": "2058", "colour": "orange", "code": "            return i+1\n", "error": "none", "author": "tom@organisms.be"}, {"index": "2059", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "2060", "colour": "blue", "code": "class _LooseFeedParser(_FeedParserMixin, _BaseHTMLProcessor):\n", "error": "R", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "2061", "colour": "orange", "code": "    def __init__(self, baseuri, baselang, encoding, entities):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "2062", "colour": "green", "code": "        sgmllib.SGMLParser.__init__(self)\n", "error": "W", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "2063", "colour": "orange", "code": "        _FeedParserMixin.__init__(self, baseuri, baselang, encoding)\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "2064", "colour": "orange", "code": "        _BaseHTMLProcessor.__init__(self, encoding, 'application/xhtml+xml')\n", "error": "none", "author": "tom@organisms.be"}, {"index": "2065", "colour": "orange", "code": "        self.entities=entities\n", "error": "none", "author": "tom@organisms.be"}, {"index": "2066", "colour": "orange", "code": "\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "2067", "colour": "orange", "code": "    def decodeEntities(self, element, data):\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "2068", "colour": "orange", "code": "        data = data.replace('&#60;', '&lt;')\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "2069", "colour": "orange", "code": "        data = data.replace('&#x3c;', '&lt;')\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "2070", "colour": "orange", "code": "        data = data.replace('&#x3C;', '&lt;')\n", "error": "none", "author": "tom@organisms.be"}, {"index": "2071", "colour": "orange", "code": "        data = data.replace('&#62;', '&gt;')\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "2072", "colour": "orange", "code": "        data = data.replace('&#x3e;', '&gt;')\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "2073", "colour": "orange", "code": "        data = data.replace('&#x3E;', '&gt;')\n", "error": "none", "author": "tom@organisms.be"}, {"index": "2074", "colour": "orange", "code": "        data = data.replace('&#38;', '&amp;')\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "2075", "colour": "orange", "code": "        data = data.replace('&#x26;', '&amp;')\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "2076", "colour": "orange", "code": "        data = data.replace('&#34;', '&quot;')\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "2077", "colour": "orange", "code": "        data = data.replace('&#x22;', '&quot;')\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "2078", "colour": "orange", "code": "        data = data.replace('&#39;', '&apos;')\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "2079", "colour": "orange", "code": "        data = data.replace('&#x27;', '&apos;')\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "2080", "colour": "orange", "code": "        if not self.contentparams.get('type', u'xml').endswith(u'xml'):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "2081", "colour": "orange", "code": "            data = data.replace('&lt;', '<')\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "2082", "colour": "orange", "code": "            data = data.replace('&gt;', '>')\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "2083", "colour": "orange", "code": "            data = data.replace('&amp;', '&')\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "2084", "colour": "orange", "code": "            data = data.replace('&quot;', '\"')\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "2085", "colour": "orange", "code": "            data = data.replace('&apos;', \"'\")\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "2086", "colour": "orange", "code": "        return data\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "2087", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "2088", "colour": "orange", "code": "    def strattrs(self, attrs):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "2089", "colour": "orange", "code": "        return ''.join([' %s=\"%s\"' % (n,v.replace('\"','&quot;')) for n,v in attrs])\n", "error": "none", "author": "tom@organisms.be"}, {"index": "2090", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "2091", "colour": "orange", "code": "class _MicroformatsParser:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "2092", "colour": "orange", "code": "    STRING = 1\n", "error": "none", "author": "tom@organisms.be"}, {"index": "2093", "colour": "orange", "code": "    DATE = 2\n", "error": "none", "author": "tom@organisms.be"}, {"index": "2094", "colour": "orange", "code": "    URI = 3\n", "error": "none", "author": "tom@organisms.be"}, {"index": "2095", "colour": "orange", "code": "    NODE = 4\n", "error": "none", "author": "tom@organisms.be"}, {"index": "2096", "colour": "orange", "code": "    EMAIL = 5\n", "error": "none", "author": "tom@organisms.be"}, {"index": "2097", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "2098", "colour": "orange", "code": "    known_xfn_relationships = set(['contact', 'acquaintance', 'friend', 'met', 'co-worker', 'coworker', 'colleague', 'co-resident', 'coresident', 'neighbor', 'child', 'parent', 'sibling', 'brother', 'sister', 'spouse', 'wife', 'husband', 'kin', 'relative', 'muse', 'crush', 'date', 'sweetheart', 'me'])\n", "error": "none", "author": "tom@organisms.be"}, {"index": "2099", "colour": "orange", "code": "    known_binary_extensions =  set(['zip','rar','exe','gz','tar','tgz','tbz2','bz2','z','7z','dmg','img','sit','sitx','hqx','deb','rpm','bz2','jar','rar','iso','bin','msi','mp2','mp3','ogg','ogm','mp4','m4v','m4a','avi','wma','wmv'])\n", "error": "none", "author": "tom@organisms.be"}, {"index": "2100", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "2101", "colour": "orange", "code": "    def __init__(self, data, baseuri, encoding):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "2102", "colour": "orange", "code": "        self.document = BeautifulSoup.BeautifulSoup(data)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "2103", "colour": "orange", "code": "        self.baseuri = baseuri\n", "error": "none", "author": "tom@organisms.be"}, {"index": "2104", "colour": "orange", "code": "        self.encoding = encoding\n", "error": "none", "author": "tom@organisms.be"}, {"index": "2105", "colour": "orange", "code": "        if isinstance(data, unicode):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "2106", "colour": "orange", "code": "            data = data.encode(encoding)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "2107", "colour": "orange", "code": "        self.tags = []\n", "error": "none", "author": "tom@organisms.be"}, {"index": "2108", "colour": "orange", "code": "        self.enclosures = []\n", "error": "none", "author": "tom@organisms.be"}, {"index": "2109", "colour": "orange", "code": "        self.xfn = []\n", "error": "none", "author": "tom@organisms.be"}, {"index": "2110", "colour": "orange", "code": "        self.vcard = None\n", "error": "none", "author": "tom@organisms.be"}, {"index": "2111", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "2112", "colour": "blue", "code": "    def vcardEscape(self, s):\n", "error": "R", "author": "tom@organisms.be"}, {"index": "2113", "colour": "orange", "code": "        if isinstance(s, basestring):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "2114", "colour": "orange", "code": "            s = s.replace(',', '\\\\,').replace(';', '\\\\;').replace('\\n', '\\\\n')\n", "error": "none", "author": "tom@organisms.be"}, {"index": "2115", "colour": "orange", "code": "        return s\n", "error": "none", "author": "tom@organisms.be"}, {"index": "2116", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "2117", "colour": "blue", "code": "    def vcardFold(self, s):\n", "error": "R", "author": "tom@organisms.be"}, {"index": "2118", "colour": "orange", "code": "        s = re.sub(';+$', '', s)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "2119", "colour": "orange", "code": "        sFolded = ''\n", "error": "none", "author": "tom@organisms.be"}, {"index": "2120", "colour": "orange", "code": "        iMax = 75\n", "error": "none", "author": "tom@organisms.be"}, {"index": "2121", "colour": "orange", "code": "        sPrefix = ''\n", "error": "none", "author": "tom@organisms.be"}, {"index": "2122", "colour": "orange", "code": "        while len(s) > iMax:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "2123", "colour": "orange", "code": "            sFolded += sPrefix + s[:iMax] + '\\n'\n", "error": "none", "author": "tom@organisms.be"}, {"index": "2124", "colour": "orange", "code": "            s = s[iMax:]\n", "error": "none", "author": "tom@organisms.be"}, {"index": "2125", "colour": "orange", "code": "            sPrefix = ' '\n", "error": "none", "author": "tom@organisms.be"}, {"index": "2126", "colour": "orange", "code": "            iMax = 74\n", "error": "none", "author": "tom@organisms.be"}, {"index": "2127", "colour": "orange", "code": "        sFolded += sPrefix + s\n", "error": "none", "author": "tom@organisms.be"}, {"index": "2128", "colour": "orange", "code": "        return sFolded\n", "error": "none", "author": "tom@organisms.be"}, {"index": "2129", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "2130", "colour": "blue", "code": "    def normalize(self, s):\n", "error": "R", "author": "tom@organisms.be"}, {"index": "2131", "colour": "orange", "code": "        return re.sub(r'\\s+', ' ', s).strip()\n", "error": "none", "author": "tom@organisms.be"}, {"index": "2132", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "2133", "colour": "blue", "code": "    def unique(self, aList):\n", "error": "R", "author": "tom@organisms.be"}, {"index": "2134", "colour": "orange", "code": "        results = []\n", "error": "none", "author": "tom@organisms.be"}, {"index": "2135", "colour": "orange", "code": "        for element in aList:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "2136", "colour": "orange", "code": "            if element not in results:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "2137", "colour": "orange", "code": "                results.append(element)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "2138", "colour": "orange", "code": "        return results\n", "error": "none", "author": "tom@organisms.be"}, {"index": "2139", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "2140", "colour": "blue", "code": "    def toISO8601(self, dt):\n", "error": "R", "author": "tom@organisms.be"}, {"index": "2141", "colour": "orange", "code": "        return time.strftime('%Y-%m-%dT%H:%M:%SZ', dt)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "2142", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "2143", "colour": "blue", "code": "    def getPropertyValue(self, elmRoot, sProperty, iPropertyType=4, bAllowMultiple=0, bAutoEscape=0):\n", "error": "R", "author": "tom@organisms.be"}, {"index": "2144", "colour": "green", "code": "        all = lambda x: 1\n", "error": "W", "author": "tom@organisms.be"}, {"index": "2145", "colour": "orange", "code": "        sProperty = sProperty.lower()\n", "error": "none", "author": "tom@organisms.be"}, {"index": "2146", "colour": "orange", "code": "        bFound = 0\n", "error": "none", "author": "tom@organisms.be"}, {"index": "2147", "colour": "orange", "code": "        bNormalize = 1\n", "error": "none", "author": "tom@organisms.be"}, {"index": "2148", "colour": "orange", "code": "        propertyMatch = {'class': re.compile(r'\\b%s\\b' % sProperty)}\n", "error": "none", "author": "tom@organisms.be"}, {"index": "2149", "colour": "orange", "code": "        if bAllowMultiple and (iPropertyType != self.NODE):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "2150", "colour": "orange", "code": "            snapResults = []\n", "error": "none", "author": "tom@organisms.be"}, {"index": "2151", "colour": "orange", "code": "            containers = elmRoot(['ul', 'ol'], propertyMatch)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "2152", "colour": "orange", "code": "            for container in containers:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "2153", "colour": "orange", "code": "                snapResults.extend(container('li'))\n", "error": "none", "author": "tom@organisms.be"}, {"index": "2154", "colour": "orange", "code": "            bFound = (len(snapResults) != 0)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "2155", "colour": "orange", "code": "        if not bFound:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "2156", "colour": "orange", "code": "            snapResults = elmRoot(all, propertyMatch)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "2157", "colour": "orange", "code": "            bFound = (len(snapResults) != 0)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "2158", "colour": "orange", "code": "        if (not bFound) and (sProperty == 'value'):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "2159", "colour": "orange", "code": "            snapResults = elmRoot('pre')\n", "error": "none", "author": "tom@organisms.be"}, {"index": "2160", "colour": "orange", "code": "            bFound = (len(snapResults) != 0)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "2161", "colour": "orange", "code": "            bNormalize = not bFound\n", "error": "none", "author": "tom@organisms.be"}, {"index": "2162", "colour": "orange", "code": "            if not bFound:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "2163", "colour": "orange", "code": "                snapResults = [elmRoot]\n", "error": "none", "author": "tom@organisms.be"}, {"index": "2164", "colour": "orange", "code": "                bFound = (len(snapResults) != 0)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "2165", "colour": "orange", "code": "        arFilter = []\n", "error": "none", "author": "tom@organisms.be"}, {"index": "2166", "colour": "orange", "code": "        if sProperty == 'vcard':\n", "error": "none", "author": "tom@organisms.be"}, {"index": "2167", "colour": "orange", "code": "            snapFilter = elmRoot(all, propertyMatch)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "2168", "colour": "orange", "code": "            for node in snapFilter:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "2169", "colour": "orange", "code": "                if node.findParent(all, propertyMatch):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "2170", "colour": "orange", "code": "                    arFilter.append(node)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "2171", "colour": "orange", "code": "        arResults = []\n", "error": "none", "author": "tom@organisms.be"}, {"index": "2172", "colour": "orange", "code": "        for node in snapResults:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "2173", "colour": "orange", "code": "            if node not in arFilter:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "2174", "colour": "orange", "code": "                arResults.append(node)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "2175", "colour": "orange", "code": "        bFound = (len(arResults) != 0)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "2176", "colour": "orange", "code": "        if not bFound:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "2177", "colour": "orange", "code": "            if bAllowMultiple:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "2178", "colour": "orange", "code": "                return []\n", "error": "none", "author": "tom@organisms.be"}, {"index": "2179", "colour": "orange", "code": "            elif iPropertyType == self.STRING:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "2180", "colour": "orange", "code": "                return ''\n", "error": "none", "author": "tom@organisms.be"}, {"index": "2181", "colour": "orange", "code": "            elif iPropertyType == self.DATE:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "2182", "colour": "orange", "code": "                return None\n", "error": "none", "author": "tom@organisms.be"}, {"index": "2183", "colour": "orange", "code": "            elif iPropertyType == self.URI:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "2184", "colour": "orange", "code": "                return ''\n", "error": "none", "author": "tom@organisms.be"}, {"index": "2185", "colour": "orange", "code": "            elif iPropertyType == self.NODE:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "2186", "colour": "orange", "code": "                return None\n", "error": "none", "author": "tom@organisms.be"}, {"index": "2187", "colour": "orange", "code": "            else:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "2188", "colour": "orange", "code": "                return None\n", "error": "none", "author": "tom@organisms.be"}, {"index": "2189", "colour": "orange", "code": "        arValues = []\n", "error": "none", "author": "tom@organisms.be"}, {"index": "2190", "colour": "orange", "code": "        for elmResult in arResults:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "2191", "colour": "orange", "code": "            sValue = None\n", "error": "none", "author": "tom@organisms.be"}, {"index": "2192", "colour": "orange", "code": "            if iPropertyType == self.NODE:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "2193", "colour": "orange", "code": "                if bAllowMultiple:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "2194", "colour": "orange", "code": "                    arValues.append(elmResult)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "2195", "colour": "orange", "code": "                    continue\n", "error": "none", "author": "tom@organisms.be"}, {"index": "2196", "colour": "orange", "code": "                else:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "2197", "colour": "orange", "code": "                    return elmResult\n", "error": "none", "author": "tom@organisms.be"}, {"index": "2198", "colour": "orange", "code": "            sNodeName = elmResult.name.lower()\n", "error": "none", "author": "tom@organisms.be"}, {"index": "2199", "colour": "orange", "code": "            if (iPropertyType == self.EMAIL) and (sNodeName == 'a'):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "2200", "colour": "orange", "code": "                sValue = (elmResult.get('href') or '').split('mailto:').pop().split('?')[0]\n", "error": "none", "author": "tom@organisms.be"}, {"index": "2201", "colour": "orange", "code": "            if sValue:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "2202", "colour": "orange", "code": "                sValue = bNormalize and self.normalize(sValue) or sValue.strip()\n", "error": "none", "author": "tom@organisms.be"}, {"index": "2203", "colour": "orange", "code": "            if (not sValue) and (sNodeName == 'abbr'):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "2204", "colour": "orange", "code": "                sValue = elmResult.get('title')\n", "error": "none", "author": "tom@organisms.be"}, {"index": "2205", "colour": "orange", "code": "            if sValue:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "2206", "colour": "orange", "code": "                sValue = bNormalize and self.normalize(sValue) or sValue.strip()\n", "error": "none", "author": "tom@organisms.be"}, {"index": "2207", "colour": "orange", "code": "            if (not sValue) and (iPropertyType == self.URI):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "2208", "colour": "orange", "code": "                if sNodeName == 'a':\n", "error": "none", "author": "tom@organisms.be"}, {"index": "2209", "colour": "orange", "code": "                    sValue = elmResult.get('href')\n", "error": "none", "author": "tom@organisms.be"}, {"index": "2210", "colour": "orange", "code": "                elif sNodeName == 'img':\n", "error": "none", "author": "tom@organisms.be"}, {"index": "2211", "colour": "orange", "code": "                    sValue = elmResult.get('src')\n", "error": "none", "author": "tom@organisms.be"}, {"index": "2212", "colour": "orange", "code": "                elif sNodeName == 'object':\n", "error": "none", "author": "tom@organisms.be"}, {"index": "2213", "colour": "orange", "code": "                    sValue = elmResult.get('data')\n", "error": "none", "author": "tom@organisms.be"}, {"index": "2214", "colour": "orange", "code": "            if sValue:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "2215", "colour": "orange", "code": "                sValue = bNormalize and self.normalize(sValue) or sValue.strip()\n", "error": "none", "author": "tom@organisms.be"}, {"index": "2216", "colour": "orange", "code": "            if (not sValue) and (sNodeName == 'img'):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "2217", "colour": "orange", "code": "                sValue = elmResult.get('alt')\n", "error": "none", "author": "tom@organisms.be"}, {"index": "2218", "colour": "orange", "code": "            if sValue:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "2219", "colour": "orange", "code": "                sValue = bNormalize and self.normalize(sValue) or sValue.strip()\n", "error": "none", "author": "tom@organisms.be"}, {"index": "2220", "colour": "orange", "code": "            if not sValue:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "2221", "colour": "orange", "code": "                sValue = elmResult.renderContents()\n", "error": "none", "author": "tom@organisms.be"}, {"index": "2222", "colour": "orange", "code": "                sValue = re.sub(r'<\\S[^>]*>', '', sValue)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "2223", "colour": "orange", "code": "                sValue = sValue.replace('\\r\\n', '\\n')\n", "error": "none", "author": "tom@organisms.be"}, {"index": "2224", "colour": "orange", "code": "                sValue = sValue.replace('\\r', '\\n')\n", "error": "none", "author": "tom@organisms.be"}, {"index": "2225", "colour": "orange", "code": "            if sValue:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "2226", "colour": "orange", "code": "                sValue = bNormalize and self.normalize(sValue) or sValue.strip()\n", "error": "none", "author": "tom@organisms.be"}, {"index": "2227", "colour": "orange", "code": "            if not sValue:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "2228", "colour": "orange", "code": "                continue\n", "error": "none", "author": "tom@organisms.be"}, {"index": "2229", "colour": "orange", "code": "            if iPropertyType == self.DATE:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "2230", "colour": "orange", "code": "                sValue = _parse_date_iso8601(sValue)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "2231", "colour": "orange", "code": "            if bAllowMultiple:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "2232", "colour": "orange", "code": "                arValues.append(bAutoEscape and self.vcardEscape(sValue) or sValue)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "2233", "colour": "orange", "code": "            else:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "2234", "colour": "orange", "code": "                return bAutoEscape and self.vcardEscape(sValue) or sValue\n", "error": "none", "author": "tom@organisms.be"}, {"index": "2235", "colour": "orange", "code": "        return arValues\n", "error": "none", "author": "tom@organisms.be"}, {"index": "2236", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "2237", "colour": "blue", "code": "    def findVCards(self, elmRoot, bAgentParsing=0):\n", "error": "R", "author": "tom@organisms.be"}, {"index": "2238", "colour": "orange", "code": "        sVCards = ''\n", "error": "none", "author": "tom@organisms.be"}, {"index": "2239", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "2240", "colour": "orange", "code": "        if not bAgentParsing:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "2241", "colour": "orange", "code": "            arCards = self.getPropertyValue(elmRoot, 'vcard', bAllowMultiple=1)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "2242", "colour": "orange", "code": "        else:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "2243", "colour": "orange", "code": "            arCards = [elmRoot]\n", "error": "none", "author": "tom@organisms.be"}, {"index": "2244", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "2245", "colour": "orange", "code": "        for elmCard in arCards:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "2246", "colour": "orange", "code": "            arLines = []\n", "error": "none", "author": "tom@organisms.be"}, {"index": "2247", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "2248", "colour": "orange", "code": "            def processSingleString(sProperty):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "2249", "colour": "green", "code": "                sValue = self.getPropertyValue(elmCard, sProperty, self.STRING, bAutoEscape=1).decode(self.encoding)\n", "error": "W", "author": "tom@organisms.be"}, {"index": "2250", "colour": "orange", "code": "                if sValue:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "2251", "colour": "green", "code": "                    arLines.append(self.vcardFold(sProperty.upper() + ':' + sValue))\n", "error": "W", "author": "tom@organisms.be"}, {"index": "2252", "colour": "orange", "code": "                return sValue or u''\n", "error": "none", "author": "tom@organisms.be"}, {"index": "2253", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "2254", "colour": "orange", "code": "            def processSingleURI(sProperty):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "2255", "colour": "green", "code": "                sValue = self.getPropertyValue(elmCard, sProperty, self.URI)\n", "error": "W", "author": "tom@organisms.be"}, {"index": "2256", "colour": "orange", "code": "                if sValue:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "2257", "colour": "orange", "code": "                    sContentType = ''\n", "error": "none", "author": "tom@organisms.be"}, {"index": "2258", "colour": "orange", "code": "                    sEncoding = ''\n", "error": "none", "author": "tom@organisms.be"}, {"index": "2259", "colour": "orange", "code": "                    sValueKey = ''\n", "error": "none", "author": "tom@organisms.be"}, {"index": "2260", "colour": "orange", "code": "                    if sValue.startswith('data:'):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "2261", "colour": "orange", "code": "                        sEncoding = ';ENCODING=b'\n", "error": "none", "author": "tom@organisms.be"}, {"index": "2262", "colour": "orange", "code": "                        sContentType = sValue.split(';')[0].split('/').pop()\n", "error": "none", "author": "tom@organisms.be"}, {"index": "2263", "colour": "orange", "code": "                        sValue = sValue.split(',', 1).pop()\n", "error": "none", "author": "tom@organisms.be"}, {"index": "2264", "colour": "orange", "code": "                    else:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "2265", "colour": "green", "code": "                        elmValue = self.getPropertyValue(elmCard, sProperty)\n", "error": "W", "author": "tom@organisms.be"}, {"index": "2266", "colour": "orange", "code": "                        if elmValue:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "2267", "colour": "orange", "code": "                            if sProperty != 'url':\n", "error": "none", "author": "tom@organisms.be"}, {"index": "2268", "colour": "orange", "code": "                                sValueKey = ';VALUE=uri'\n", "error": "none", "author": "tom@organisms.be"}, {"index": "2269", "colour": "red", "code": "                            sContentType = elmValue.get('type', '').strip().split('/').pop().strip()\n", "error": "E", "author": "tom@organisms.be"}, {"index": "2270", "colour": "orange", "code": "                    sContentType = sContentType.upper()\n", "error": "none", "author": "tom@organisms.be"}, {"index": "2271", "colour": "orange", "code": "                    if sContentType == 'OCTET-STREAM':\n", "error": "none", "author": "tom@organisms.be"}, {"index": "2272", "colour": "orange", "code": "                        sContentType = ''\n", "error": "none", "author": "tom@organisms.be"}, {"index": "2273", "colour": "orange", "code": "                    if sContentType:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "2274", "colour": "orange", "code": "                        sContentType = ';TYPE=' + sContentType.upper()\n", "error": "none", "author": "tom@organisms.be"}, {"index": "2275", "colour": "green", "code": "                    arLines.append(self.vcardFold(sProperty.upper() + sEncoding + sContentType + sValueKey + ':' + sValue))\n", "error": "W", "author": "tom@organisms.be"}, {"index": "2276", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "2277", "colour": "orange", "code": "            def processTypeValue(sProperty, arDefaultType, arForceType=None):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "2278", "colour": "green", "code": "                arResults = self.getPropertyValue(elmCard, sProperty, bAllowMultiple=1)\n", "error": "W", "author": "tom@organisms.be"}, {"index": "2279", "colour": "orange", "code": "                for elmResult in arResults:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "2280", "colour": "orange", "code": "                    arType = self.getPropertyValue(elmResult, 'type', self.STRING, 1, 1)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "2281", "colour": "orange", "code": "                    if arForceType:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "2282", "colour": "orange", "code": "                        arType = self.unique(arForceType + arType)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "2283", "colour": "orange", "code": "                    if not arType:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "2284", "colour": "orange", "code": "                        arType = arDefaultType\n", "error": "none", "author": "tom@organisms.be"}, {"index": "2285", "colour": "orange", "code": "                    sValue = self.getPropertyValue(elmResult, 'value', self.EMAIL, 0)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "2286", "colour": "orange", "code": "                    if sValue:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "2287", "colour": "green", "code": "                        arLines.append(self.vcardFold(sProperty.upper() + ';TYPE=' + ','.join(arType) + ':' + sValue))\n", "error": "W", "author": "tom@organisms.be"}, {"index": "2288", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "2289", "colour": "orange", "code": "            # AGENT\n", "error": "none", "author": "tom@organisms.be"}, {"index": "2290", "colour": "orange", "code": "            # must do this before all other properties because it is destructive\n", "error": "none", "author": "tom@organisms.be"}, {"index": "2291", "colour": "orange", "code": "            # (removes nested class=\"vcard\" nodes so they don't interfere with\n", "error": "none", "author": "tom@organisms.be"}, {"index": "2292", "colour": "orange", "code": "            # this vcard's other properties)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "2293", "colour": "orange", "code": "            arAgent = self.getPropertyValue(elmCard, 'agent', bAllowMultiple=1)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "2294", "colour": "orange", "code": "            for elmAgent in arAgent:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "2295", "colour": "orange", "code": "                if re.compile(r'\\bvcard\\b').search(elmAgent.get('class')):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "2296", "colour": "orange", "code": "                    sAgentValue = self.findVCards(elmAgent, 1) + '\\n'\n", "error": "none", "author": "tom@organisms.be"}, {"index": "2297", "colour": "orange", "code": "                    sAgentValue = sAgentValue.replace('\\n', '\\\\n')\n", "error": "none", "author": "tom@organisms.be"}, {"index": "2298", "colour": "orange", "code": "                    sAgentValue = sAgentValue.replace(';', '\\\\;')\n", "error": "none", "author": "tom@organisms.be"}, {"index": "2299", "colour": "orange", "code": "                    if sAgentValue:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "2300", "colour": "orange", "code": "                        arLines.append(self.vcardFold('AGENT:' + sAgentValue))\n", "error": "none", "author": "tom@organisms.be"}, {"index": "2301", "colour": "orange", "code": "                    # Completely remove the agent element from the parse tree\n", "error": "none", "author": "tom@organisms.be"}, {"index": "2302", "colour": "orange", "code": "                    elmAgent.extract()\n", "error": "none", "author": "tom@organisms.be"}, {"index": "2303", "colour": "orange", "code": "                else:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "2304", "colour": "green", "code": "                    sAgentValue = self.getPropertyValue(elmAgent, 'value', self.URI, bAutoEscape=1);\n", "error": "W", "author": "tom@organisms.be"}, {"index": "2305", "colour": "orange", "code": "                    if sAgentValue:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "2306", "colour": "orange", "code": "                        arLines.append(self.vcardFold('AGENT;VALUE=uri:' + sAgentValue))\n", "error": "none", "author": "tom@organisms.be"}, {"index": "2307", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "2308", "colour": "orange", "code": "            # FN (full name)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "2309", "colour": "orange", "code": "            sFN = processSingleString('fn')\n", "error": "none", "author": "tom@organisms.be"}, {"index": "2310", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "2311", "colour": "orange", "code": "            # N (name)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "2312", "colour": "orange", "code": "            elmName = self.getPropertyValue(elmCard, 'n')\n", "error": "none", "author": "tom@organisms.be"}, {"index": "2313", "colour": "orange", "code": "            if elmName:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "2314", "colour": "orange", "code": "                sFamilyName = self.getPropertyValue(elmName, 'family-name', self.STRING, bAutoEscape=1)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "2315", "colour": "orange", "code": "                sGivenName = self.getPropertyValue(elmName, 'given-name', self.STRING, bAutoEscape=1)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "2316", "colour": "orange", "code": "                arAdditionalNames = self.getPropertyValue(elmName, 'additional-name', self.STRING, 1, 1) + self.getPropertyValue(elmName, 'additional-names', self.STRING, 1, 1)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "2317", "colour": "orange", "code": "                arHonorificPrefixes = self.getPropertyValue(elmName, 'honorific-prefix', self.STRING, 1, 1) + self.getPropertyValue(elmName, 'honorific-prefixes', self.STRING, 1, 1)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "2318", "colour": "orange", "code": "                arHonorificSuffixes = self.getPropertyValue(elmName, 'honorific-suffix', self.STRING, 1, 1) + self.getPropertyValue(elmName, 'honorific-suffixes', self.STRING, 1, 1)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "2319", "colour": "orange", "code": "                arLines.append(self.vcardFold('N:' + sFamilyName + ';' +\n", "error": "none", "author": "tom@organisms.be"}, {"index": "2320", "colour": "orange", "code": "                                         sGivenName + ';' +\n", "error": "none", "author": "tom@organisms.be"}, {"index": "2321", "colour": "orange", "code": "                                         ','.join(arAdditionalNames) + ';' +\n", "error": "none", "author": "tom@organisms.be"}, {"index": "2322", "colour": "orange", "code": "                                         ','.join(arHonorificPrefixes) + ';' +\n", "error": "none", "author": "tom@organisms.be"}, {"index": "2323", "colour": "orange", "code": "                                         ','.join(arHonorificSuffixes)))\n", "error": "none", "author": "tom@organisms.be"}, {"index": "2324", "colour": "orange", "code": "            elif sFN:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "2325", "colour": "orange", "code": "                # implied \"N\" optimization\n", "error": "none", "author": "tom@organisms.be"}, {"index": "2326", "colour": "orange", "code": "                # http://microformats.org/wiki/hcard#Implied_.22N.22_Optimization\n", "error": "none", "author": "tom@organisms.be"}, {"index": "2327", "colour": "orange", "code": "                arNames = self.normalize(sFN).split()\n", "error": "none", "author": "tom@organisms.be"}, {"index": "2328", "colour": "orange", "code": "                if len(arNames) == 2:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "2329", "colour": "orange", "code": "                    bFamilyNameFirst = (arNames[0].endswith(',') or\n", "error": "none", "author": "tom@organisms.be"}, {"index": "2330", "colour": "orange", "code": "                                        len(arNames[1]) == 1 or\n", "error": "none", "author": "tom@organisms.be"}, {"index": "2331", "colour": "orange", "code": "                                        ((len(arNames[1]) == 2) and (arNames[1].endswith('.'))))\n", "error": "none", "author": "tom@organisms.be"}, {"index": "2332", "colour": "orange", "code": "                    if bFamilyNameFirst:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "2333", "colour": "orange", "code": "                        arLines.append(self.vcardFold('N:' + arNames[0] + ';' + arNames[1]))\n", "error": "none", "author": "tom@organisms.be"}, {"index": "2334", "colour": "orange", "code": "                    else:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "2335", "colour": "orange", "code": "                        arLines.append(self.vcardFold('N:' + arNames[1] + ';' + arNames[0]))\n", "error": "none", "author": "tom@organisms.be"}, {"index": "2336", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "2337", "colour": "orange", "code": "            # SORT-STRING\n", "error": "none", "author": "tom@organisms.be"}, {"index": "2338", "colour": "orange", "code": "            sSortString = self.getPropertyValue(elmCard, 'sort-string', self.STRING, bAutoEscape=1)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "2339", "colour": "orange", "code": "            if sSortString:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "2340", "colour": "orange", "code": "                arLines.append(self.vcardFold('SORT-STRING:' + sSortString))\n", "error": "none", "author": "tom@organisms.be"}, {"index": "2341", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "2342", "colour": "orange", "code": "            # NICKNAME\n", "error": "none", "author": "tom@organisms.be"}, {"index": "2343", "colour": "orange", "code": "            arNickname = self.getPropertyValue(elmCard, 'nickname', self.STRING, 1, 1)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "2344", "colour": "orange", "code": "            if arNickname:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "2345", "colour": "orange", "code": "                arLines.append(self.vcardFold('NICKNAME:' + ','.join(arNickname)))\n", "error": "none", "author": "tom@organisms.be"}, {"index": "2346", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "2347", "colour": "orange", "code": "            # PHOTO\n", "error": "none", "author": "tom@organisms.be"}, {"index": "2348", "colour": "orange", "code": "            processSingleURI('photo')\n", "error": "none", "author": "tom@organisms.be"}, {"index": "2349", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "2350", "colour": "orange", "code": "            # BDAY\n", "error": "none", "author": "tom@organisms.be"}, {"index": "2351", "colour": "orange", "code": "            dtBday = self.getPropertyValue(elmCard, 'bday', self.DATE)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "2352", "colour": "orange", "code": "            if dtBday:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "2353", "colour": "orange", "code": "                arLines.append(self.vcardFold('BDAY:' + self.toISO8601(dtBday)))\n", "error": "none", "author": "tom@organisms.be"}, {"index": "2354", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "2355", "colour": "orange", "code": "            # ADR (address)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "2356", "colour": "orange", "code": "            arAdr = self.getPropertyValue(elmCard, 'adr', bAllowMultiple=1)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "2357", "colour": "orange", "code": "            for elmAdr in arAdr:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "2358", "colour": "orange", "code": "                arType = self.getPropertyValue(elmAdr, 'type', self.STRING, 1, 1)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "2359", "colour": "orange", "code": "                if not arType:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "2360", "colour": "orange", "code": "                    arType = ['intl','postal','parcel','work'] # default adr types, see RFC 2426 section 3.2.1\n", "error": "none", "author": "tom@organisms.be"}, {"index": "2361", "colour": "orange", "code": "                sPostOfficeBox = self.getPropertyValue(elmAdr, 'post-office-box', self.STRING, 0, 1)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "2362", "colour": "orange", "code": "                sExtendedAddress = self.getPropertyValue(elmAdr, 'extended-address', self.STRING, 0, 1)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "2363", "colour": "orange", "code": "                sStreetAddress = self.getPropertyValue(elmAdr, 'street-address', self.STRING, 0, 1)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "2364", "colour": "orange", "code": "                sLocality = self.getPropertyValue(elmAdr, 'locality', self.STRING, 0, 1)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "2365", "colour": "orange", "code": "                sRegion = self.getPropertyValue(elmAdr, 'region', self.STRING, 0, 1)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "2366", "colour": "orange", "code": "                sPostalCode = self.getPropertyValue(elmAdr, 'postal-code', self.STRING, 0, 1)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "2367", "colour": "orange", "code": "                sCountryName = self.getPropertyValue(elmAdr, 'country-name', self.STRING, 0, 1)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "2368", "colour": "orange", "code": "                arLines.append(self.vcardFold('ADR;TYPE=' + ','.join(arType) + ':' +\n", "error": "none", "author": "tom@organisms.be"}, {"index": "2369", "colour": "orange", "code": "                                         sPostOfficeBox + ';' +\n", "error": "none", "author": "tom@organisms.be"}, {"index": "2370", "colour": "orange", "code": "                                         sExtendedAddress + ';' +\n", "error": "none", "author": "tom@organisms.be"}, {"index": "2371", "colour": "orange", "code": "                                         sStreetAddress + ';' +\n", "error": "none", "author": "tom@organisms.be"}, {"index": "2372", "colour": "orange", "code": "                                         sLocality + ';' +\n", "error": "none", "author": "tom@organisms.be"}, {"index": "2373", "colour": "orange", "code": "                                         sRegion + ';' +\n", "error": "none", "author": "tom@organisms.be"}, {"index": "2374", "colour": "orange", "code": "                                         sPostalCode + ';' +\n", "error": "none", "author": "tom@organisms.be"}, {"index": "2375", "colour": "orange", "code": "                                         sCountryName))\n", "error": "none", "author": "tom@organisms.be"}, {"index": "2376", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "2377", "colour": "orange", "code": "            # LABEL\n", "error": "none", "author": "tom@organisms.be"}, {"index": "2378", "colour": "orange", "code": "            processTypeValue('label', ['intl','postal','parcel','work'])\n", "error": "none", "author": "tom@organisms.be"}, {"index": "2379", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "2380", "colour": "orange", "code": "            # TEL (phone number)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "2381", "colour": "orange", "code": "            processTypeValue('tel', ['voice'])\n", "error": "none", "author": "tom@organisms.be"}, {"index": "2382", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "2383", "colour": "orange", "code": "            # EMAIL\n", "error": "none", "author": "tom@organisms.be"}, {"index": "2384", "colour": "orange", "code": "            processTypeValue('email', ['internet'], ['internet'])\n", "error": "none", "author": "tom@organisms.be"}, {"index": "2385", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "2386", "colour": "orange", "code": "            # MAILER\n", "error": "none", "author": "tom@organisms.be"}, {"index": "2387", "colour": "orange", "code": "            processSingleString('mailer')\n", "error": "none", "author": "tom@organisms.be"}, {"index": "2388", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "2389", "colour": "orange", "code": "            # TZ (timezone)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "2390", "colour": "orange", "code": "            processSingleString('tz')\n", "error": "none", "author": "tom@organisms.be"}, {"index": "2391", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "2392", "colour": "orange", "code": "            # GEO (geographical information)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "2393", "colour": "orange", "code": "            elmGeo = self.getPropertyValue(elmCard, 'geo')\n", "error": "none", "author": "tom@organisms.be"}, {"index": "2394", "colour": "orange", "code": "            if elmGeo:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "2395", "colour": "orange", "code": "                sLatitude = self.getPropertyValue(elmGeo, 'latitude', self.STRING, 0, 1)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "2396", "colour": "orange", "code": "                sLongitude = self.getPropertyValue(elmGeo, 'longitude', self.STRING, 0, 1)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "2397", "colour": "orange", "code": "                arLines.append(self.vcardFold('GEO:' + sLatitude + ';' + sLongitude))\n", "error": "none", "author": "tom@organisms.be"}, {"index": "2398", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "2399", "colour": "orange", "code": "            # TITLE\n", "error": "none", "author": "tom@organisms.be"}, {"index": "2400", "colour": "orange", "code": "            processSingleString('title')\n", "error": "none", "author": "tom@organisms.be"}, {"index": "2401", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "2402", "colour": "orange", "code": "            # ROLE\n", "error": "none", "author": "tom@organisms.be"}, {"index": "2403", "colour": "orange", "code": "            processSingleString('role')\n", "error": "none", "author": "tom@organisms.be"}, {"index": "2404", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "2405", "colour": "orange", "code": "            # LOGO\n", "error": "none", "author": "tom@organisms.be"}, {"index": "2406", "colour": "orange", "code": "            processSingleURI('logo')\n", "error": "none", "author": "tom@organisms.be"}, {"index": "2407", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "2408", "colour": "orange", "code": "            # ORG (organization)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "2409", "colour": "orange", "code": "            elmOrg = self.getPropertyValue(elmCard, 'org')\n", "error": "none", "author": "tom@organisms.be"}, {"index": "2410", "colour": "orange", "code": "            if elmOrg:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "2411", "colour": "orange", "code": "                sOrganizationName = self.getPropertyValue(elmOrg, 'organization-name', self.STRING, 0, 1)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "2412", "colour": "orange", "code": "                if not sOrganizationName:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "2413", "colour": "orange", "code": "                    # implied \"organization-name\" optimization\n", "error": "none", "author": "tom@organisms.be"}, {"index": "2414", "colour": "orange", "code": "                    # http://microformats.org/wiki/hcard#Implied_.22organization-name.22_Optimization\n", "error": "none", "author": "tom@organisms.be"}, {"index": "2415", "colour": "orange", "code": "                    sOrganizationName = self.getPropertyValue(elmCard, 'org', self.STRING, 0, 1)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "2416", "colour": "orange", "code": "                    if sOrganizationName:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "2417", "colour": "orange", "code": "                        arLines.append(self.vcardFold('ORG:' + sOrganizationName))\n", "error": "none", "author": "tom@organisms.be"}, {"index": "2418", "colour": "orange", "code": "                else:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "2419", "colour": "orange", "code": "                    arOrganizationUnit = self.getPropertyValue(elmOrg, 'organization-unit', self.STRING, 1, 1)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "2420", "colour": "orange", "code": "                    arLines.append(self.vcardFold('ORG:' + sOrganizationName + ';' + ';'.join(arOrganizationUnit)))\n", "error": "none", "author": "tom@organisms.be"}, {"index": "2421", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "2422", "colour": "orange", "code": "            # CATEGORY\n", "error": "none", "author": "tom@organisms.be"}, {"index": "2423", "colour": "orange", "code": "            arCategory = self.getPropertyValue(elmCard, 'category', self.STRING, 1, 1) + self.getPropertyValue(elmCard, 'categories', self.STRING, 1, 1)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "2424", "colour": "orange", "code": "            if arCategory:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "2425", "colour": "orange", "code": "                arLines.append(self.vcardFold('CATEGORIES:' + ','.join(arCategory)))\n", "error": "none", "author": "tom@organisms.be"}, {"index": "2426", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "2427", "colour": "orange", "code": "            # NOTE\n", "error": "none", "author": "tom@organisms.be"}, {"index": "2428", "colour": "orange", "code": "            processSingleString('note')\n", "error": "none", "author": "tom@organisms.be"}, {"index": "2429", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "2430", "colour": "orange", "code": "            # REV\n", "error": "none", "author": "tom@organisms.be"}, {"index": "2431", "colour": "orange", "code": "            processSingleString('rev')\n", "error": "none", "author": "tom@organisms.be"}, {"index": "2432", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "2433", "colour": "orange", "code": "            # SOUND\n", "error": "none", "author": "tom@organisms.be"}, {"index": "2434", "colour": "orange", "code": "            processSingleURI('sound')\n", "error": "none", "author": "tom@organisms.be"}, {"index": "2435", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "2436", "colour": "orange", "code": "            # UID\n", "error": "none", "author": "tom@organisms.be"}, {"index": "2437", "colour": "orange", "code": "            processSingleString('uid')\n", "error": "none", "author": "tom@organisms.be"}, {"index": "2438", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "2439", "colour": "orange", "code": "            # URL\n", "error": "none", "author": "tom@organisms.be"}, {"index": "2440", "colour": "orange", "code": "            processSingleURI('url')\n", "error": "none", "author": "tom@organisms.be"}, {"index": "2441", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "2442", "colour": "orange", "code": "            # CLASS\n", "error": "none", "author": "tom@organisms.be"}, {"index": "2443", "colour": "orange", "code": "            processSingleString('class')\n", "error": "none", "author": "tom@organisms.be"}, {"index": "2444", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "2445", "colour": "orange", "code": "            # KEY\n", "error": "none", "author": "tom@organisms.be"}, {"index": "2446", "colour": "orange", "code": "            processSingleURI('key')\n", "error": "none", "author": "tom@organisms.be"}, {"index": "2447", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "2448", "colour": "orange", "code": "            if arLines:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "2449", "colour": "orange", "code": "                arLines = [u'BEGIN:vCard',u'VERSION:3.0'] + arLines + [u'END:vCard']\n", "error": "none", "author": "tom@organisms.be"}, {"index": "2450", "colour": "green", "code": "                # XXX - this is super ugly; properly fix this with issue 148\n", "error": "W", "author": "tom@organisms.be"}, {"index": "2451", "colour": "orange", "code": "                for i, s in enumerate(arLines):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "2452", "colour": "orange", "code": "                    if not isinstance(s, unicode):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "2453", "colour": "orange", "code": "                        arLines[i] = s.decode('utf-8', 'ignore')\n", "error": "none", "author": "tom@organisms.be"}, {"index": "2454", "colour": "orange", "code": "                sVCards += u'\\n'.join(arLines) + u'\\n'\n", "error": "none", "author": "tom@organisms.be"}, {"index": "2455", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "2456", "colour": "orange", "code": "        return sVCards.strip()\n", "error": "none", "author": "tom@organisms.be"}, {"index": "2457", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "2458", "colour": "orange", "code": "    def isProbablyDownloadable(self, elm):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "2459", "colour": "orange", "code": "        attrsD = elm.attrMap\n", "error": "none", "author": "tom@organisms.be"}, {"index": "2460", "colour": "orange", "code": "        if 'href' not in attrsD:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "2461", "colour": "orange", "code": "            return 0\n", "error": "none", "author": "tom@organisms.be"}, {"index": "2462", "colour": "orange", "code": "        linktype = attrsD.get('type', '').strip()\n", "error": "none", "author": "tom@organisms.be"}, {"index": "2463", "colour": "orange", "code": "        if linktype.startswith('audio/') or \\\n", "error": "none", "author": "tom@organisms.be"}, {"index": "2464", "colour": "orange", "code": "           linktype.startswith('video/') or \\\n", "error": "none", "author": "tom@organisms.be"}, {"index": "2465", "colour": "orange", "code": "           (linktype.startswith('application/') and not linktype.endswith('xml')):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "2466", "colour": "orange", "code": "            return 1\n", "error": "none", "author": "tom@organisms.be"}, {"index": "2467", "colour": "orange", "code": "        path = urlparse.urlparse(attrsD['href'])[2]\n", "error": "none", "author": "tom@organisms.be"}, {"index": "2468", "colour": "orange", "code": "        if path.find('.') == -1:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "2469", "colour": "orange", "code": "            return 0\n", "error": "none", "author": "tom@organisms.be"}, {"index": "2470", "colour": "orange", "code": "        fileext = path.split('.').pop().lower()\n", "error": "none", "author": "tom@organisms.be"}, {"index": "2471", "colour": "orange", "code": "        return fileext in self.known_binary_extensions\n", "error": "none", "author": "tom@organisms.be"}, {"index": "2472", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "2473", "colour": "orange", "code": "    def findTags(self):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "2474", "colour": "green", "code": "        all = lambda x: 1\n", "error": "W", "author": "tom@organisms.be"}, {"index": "2475", "colour": "orange", "code": "        for elm in self.document(all, {'rel': re.compile(r'\\btag\\b')}):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "2476", "colour": "orange", "code": "            href = elm.get('href')\n", "error": "none", "author": "tom@organisms.be"}, {"index": "2477", "colour": "orange", "code": "            if not href:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "2478", "colour": "orange", "code": "                continue\n", "error": "none", "author": "tom@organisms.be"}, {"index": "2479", "colour": "green", "code": "            urlscheme, domain, path, params, query, fragment = \\\n", "error": "W", "author": "tom@organisms.be"}, {"index": "2480", "colour": "orange", "code": "                       urlparse.urlparse(_urljoin(self.baseuri, href))\n", "error": "none", "author": "tom@organisms.be"}, {"index": "2481", "colour": "orange", "code": "            segments = path.split('/')\n", "error": "none", "author": "tom@organisms.be"}, {"index": "2482", "colour": "orange", "code": "            tag = segments.pop()\n", "error": "none", "author": "tom@organisms.be"}, {"index": "2483", "colour": "orange", "code": "            if not tag:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "2484", "colour": "orange", "code": "                if segments:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "2485", "colour": "orange", "code": "                    tag = segments.pop()\n", "error": "none", "author": "tom@organisms.be"}, {"index": "2486", "colour": "orange", "code": "                else:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "2487", "colour": "orange", "code": "                    # there are no tags\n", "error": "none", "author": "tom@organisms.be"}, {"index": "2488", "colour": "orange", "code": "                    continue\n", "error": "none", "author": "tom@organisms.be"}, {"index": "2489", "colour": "orange", "code": "            tagscheme = urlparse.urlunparse((urlscheme, domain, '/'.join(segments), '', '', ''))\n", "error": "none", "author": "tom@organisms.be"}, {"index": "2490", "colour": "orange", "code": "            if not tagscheme.endswith('/'):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "2491", "colour": "orange", "code": "                tagscheme += '/'\n", "error": "none", "author": "tom@organisms.be"}, {"index": "2492", "colour": "orange", "code": "            self.tags.append(FeedParserDict({\"term\": tag, \"scheme\": tagscheme, \"label\": elm.string or ''}))\n", "error": "none", "author": "tom@organisms.be"}, {"index": "2493", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "2494", "colour": "orange", "code": "    def findEnclosures(self):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "2495", "colour": "green", "code": "        all = lambda x: 1\n", "error": "W", "author": "tom@organisms.be"}, {"index": "2496", "colour": "orange", "code": "        enclosure_match = re.compile(r'\\benclosure\\b')\n", "error": "none", "author": "tom@organisms.be"}, {"index": "2497", "colour": "orange", "code": "        for elm in self.document(all, {'href': re.compile(r'.+')}):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "2498", "colour": "orange", "code": "            if not enclosure_match.search(elm.get('rel', u'')) and not self.isProbablyDownloadable(elm):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "2499", "colour": "orange", "code": "                continue\n", "error": "none", "author": "tom@organisms.be"}, {"index": "2500", "colour": "orange", "code": "            if elm.attrMap not in self.enclosures:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "2501", "colour": "orange", "code": "                self.enclosures.append(elm.attrMap)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "2502", "colour": "orange", "code": "                if elm.string and not elm.get('title'):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "2503", "colour": "orange", "code": "                    self.enclosures[-1]['title'] = elm.string\n", "error": "none", "author": "tom@organisms.be"}, {"index": "2504", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "2505", "colour": "orange", "code": "    def findXFN(self):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "2506", "colour": "green", "code": "        all = lambda x: 1\n", "error": "W", "author": "tom@organisms.be"}, {"index": "2507", "colour": "orange", "code": "        for elm in self.document(all, {'rel': re.compile('.+'), 'href': re.compile('.+')}):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "2508", "colour": "orange", "code": "            rels = elm.get('rel', u'').split()\n", "error": "none", "author": "tom@organisms.be"}, {"index": "2509", "colour": "orange", "code": "            xfn_rels = [r for r in rels if r in self.known_xfn_relationships]\n", "error": "none", "author": "tom@organisms.be"}, {"index": "2510", "colour": "orange", "code": "            if xfn_rels:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "2511", "colour": "orange", "code": "                self.xfn.append({\"relationships\": xfn_rels, \"href\": elm.get('href', ''), \"name\": elm.string})\n", "error": "none", "author": "tom@organisms.be"}, {"index": "2512", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "2513", "colour": "orange", "code": "def _parseMicroformats(htmlSource, baseURI, encoding):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "2514", "colour": "orange", "code": "    if not BeautifulSoup:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "2515", "colour": "orange", "code": "        return\n", "error": "none", "author": "tom@organisms.be"}, {"index": "2516", "colour": "orange", "code": "    try:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "2517", "colour": "orange", "code": "        p = _MicroformatsParser(htmlSource, baseURI, encoding)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "2518", "colour": "orange", "code": "    except UnicodeEncodeError:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "2519", "colour": "orange", "code": "        # sgmllib throws this exception when performing lookups of tags\n", "error": "none", "author": "tom@organisms.be"}, {"index": "2520", "colour": "orange", "code": "        # with non-ASCII characters in them.\n", "error": "none", "author": "tom@organisms.be"}, {"index": "2521", "colour": "orange", "code": "        return\n", "error": "none", "author": "tom@organisms.be"}, {"index": "2522", "colour": "orange", "code": "    p.vcard = p.findVCards(p.document)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "2523", "colour": "orange", "code": "    p.findTags()\n", "error": "none", "author": "tom@organisms.be"}, {"index": "2524", "colour": "orange", "code": "    p.findEnclosures()\n", "error": "none", "author": "tom@organisms.be"}, {"index": "2525", "colour": "orange", "code": "    p.findXFN()\n", "error": "none", "author": "tom@organisms.be"}, {"index": "2526", "colour": "orange", "code": "    return {\"tags\": p.tags, \"enclosures\": p.enclosures, \"xfn\": p.xfn, \"vcard\": p.vcard}\n", "error": "none", "author": "tom@organisms.be"}, {"index": "2527", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "2528", "colour": "blue", "code": "class _RelativeURIResolver(_BaseHTMLProcessor):\n", "error": "R", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "2529", "colour": "orange", "code": "    relative_uris = set([('a', 'href'),\n", "error": "none", "author": "tom@organisms.be"}, {"index": "2530", "colour": "orange", "code": "                     ('applet', 'codebase'),\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "2531", "colour": "orange", "code": "                     ('area', 'href'),\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "2532", "colour": "orange", "code": "                     ('blockquote', 'cite'),\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "2533", "colour": "orange", "code": "                     ('body', 'background'),\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "2534", "colour": "orange", "code": "                     ('del', 'cite'),\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "2535", "colour": "orange", "code": "                     ('form', 'action'),\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "2536", "colour": "orange", "code": "                     ('frame', 'longdesc'),\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "2537", "colour": "orange", "code": "                     ('frame', 'src'),\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "2538", "colour": "orange", "code": "                     ('iframe', 'longdesc'),\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "2539", "colour": "orange", "code": "                     ('iframe', 'src'),\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "2540", "colour": "orange", "code": "                     ('head', 'profile'),\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "2541", "colour": "orange", "code": "                     ('img', 'longdesc'),\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "2542", "colour": "orange", "code": "                     ('img', 'src'),\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "2543", "colour": "orange", "code": "                     ('img', 'usemap'),\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "2544", "colour": "orange", "code": "                     ('input', 'src'),\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "2545", "colour": "orange", "code": "                     ('input', 'usemap'),\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "2546", "colour": "orange", "code": "                     ('ins', 'cite'),\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "2547", "colour": "orange", "code": "                     ('link', 'href'),\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "2548", "colour": "orange", "code": "                     ('object', 'classid'),\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "2549", "colour": "orange", "code": "                     ('object', 'codebase'),\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "2550", "colour": "orange", "code": "                     ('object', 'data'),\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "2551", "colour": "orange", "code": "                     ('object', 'usemap'),\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "2552", "colour": "orange", "code": "                     ('q', 'cite'),\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "2553", "colour": "orange", "code": "                     ('script', 'src')])\n", "error": "none", "author": "tom@organisms.be"}, {"index": "2554", "colour": "orange", "code": "\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "2555", "colour": "orange", "code": "    def __init__(self, baseuri, encoding, _type):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "2556", "colour": "orange", "code": "        _BaseHTMLProcessor.__init__(self, encoding, _type)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "2557", "colour": "orange", "code": "        self.baseuri = baseuri\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "2558", "colour": "orange", "code": "\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "2559", "colour": "orange", "code": "    def resolveURI(self, uri):\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "2560", "colour": "orange", "code": "        return _makeSafeAbsoluteURI(self.baseuri, uri.strip())\n", "error": "none", "author": "tom@organisms.be"}, {"index": "2561", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "2562", "colour": "orange", "code": "    def unknown_starttag(self, tag, attrs):\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "2563", "colour": "orange", "code": "        attrs = self.normalize_attrs(attrs)\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "2564", "colour": "orange", "code": "        attrs = [(key, ((tag, key) in self.relative_uris) and self.resolveURI(value) or value) for key, value in attrs]\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "2565", "colour": "orange", "code": "        _BaseHTMLProcessor.unknown_starttag(self, tag, attrs)\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "2566", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "2567", "colour": "orange", "code": "def _resolveRelativeURIs(htmlSource, baseURI, encoding, _type):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "2568", "colour": "orange", "code": "    if not _SGML_AVAILABLE:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "2569", "colour": "orange", "code": "        return htmlSource\n", "error": "none", "author": "tom@organisms.be"}, {"index": "2570", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "2571", "colour": "orange", "code": "    p = _RelativeURIResolver(baseURI, encoding, _type)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "2572", "colour": "orange", "code": "    p.feed(htmlSource)\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "2573", "colour": "orange", "code": "    return p.output()\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "2574", "colour": "orange", "code": "\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "2575", "colour": "blue", "code": "def _makeSafeAbsoluteURI(base, rel=None):\n", "error": "R", "author": "tom@organisms.be"}, {"index": "2576", "colour": "orange", "code": "    # bail if ACCEPTABLE_URI_SCHEMES is empty\n", "error": "none", "author": "tom@organisms.be"}, {"index": "2577", "colour": "orange", "code": "    if not ACCEPTABLE_URI_SCHEMES:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "2578", "colour": "orange", "code": "        try:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "2579", "colour": "orange", "code": "            return _urljoin(base, rel or u'')\n", "error": "none", "author": "tom@organisms.be"}, {"index": "2580", "colour": "orange", "code": "        except ValueError:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "2581", "colour": "orange", "code": "            return u''\n", "error": "none", "author": "tom@organisms.be"}, {"index": "2582", "colour": "orange", "code": "    if not base:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "2583", "colour": "orange", "code": "        return rel or u''\n", "error": "none", "author": "tom@organisms.be"}, {"index": "2584", "colour": "orange", "code": "    if not rel:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "2585", "colour": "orange", "code": "        try:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "2586", "colour": "orange", "code": "            scheme = urlparse.urlparse(base)[0]\n", "error": "none", "author": "tom@organisms.be"}, {"index": "2587", "colour": "orange", "code": "        except ValueError:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "2588", "colour": "orange", "code": "            return u''\n", "error": "none", "author": "tom@organisms.be"}, {"index": "2589", "colour": "orange", "code": "        if not scheme or scheme in ACCEPTABLE_URI_SCHEMES:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "2590", "colour": "orange", "code": "            return base\n", "error": "none", "author": "tom@organisms.be"}, {"index": "2591", "colour": "orange", "code": "        return u''\n", "error": "none", "author": "tom@organisms.be"}, {"index": "2592", "colour": "orange", "code": "    try:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "2593", "colour": "orange", "code": "        uri = _urljoin(base, rel)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "2594", "colour": "orange", "code": "    except ValueError:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "2595", "colour": "orange", "code": "        return u''\n", "error": "none", "author": "tom@organisms.be"}, {"index": "2596", "colour": "orange", "code": "    if uri.strip().split(':', 1)[0] not in ACCEPTABLE_URI_SCHEMES:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "2597", "colour": "orange", "code": "        return u''\n", "error": "none", "author": "tom@organisms.be"}, {"index": "2598", "colour": "orange", "code": "    return uri\n", "error": "none", "author": "tom@organisms.be"}, {"index": "2599", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "2600", "colour": "blue", "code": "class _HTMLSanitizer(_BaseHTMLProcessor):\n", "error": "R", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "2601", "colour": "orange", "code": "    acceptable_elements = set(['a', 'abbr', 'acronym', 'address', 'area',\n", "error": "none", "author": "tom@organisms.be"}, {"index": "2602", "colour": "orange", "code": "        'article', 'aside', 'audio', 'b', 'big', 'blockquote', 'br', 'button',\n", "error": "none", "author": "tom@organisms.be"}, {"index": "2603", "colour": "orange", "code": "        'canvas', 'caption', 'center', 'cite', 'code', 'col', 'colgroup',\n", "error": "none", "author": "tom@organisms.be"}, {"index": "2604", "colour": "orange", "code": "        'command', 'datagrid', 'datalist', 'dd', 'del', 'details', 'dfn',\n", "error": "none", "author": "tom@organisms.be"}, {"index": "2605", "colour": "orange", "code": "        'dialog', 'dir', 'div', 'dl', 'dt', 'em', 'event-source', 'fieldset',\n", "error": "none", "author": "tom@organisms.be"}, {"index": "2606", "colour": "orange", "code": "        'figcaption', 'figure', 'footer', 'font', 'form', 'header', 'h1',\n", "error": "none", "author": "tom@organisms.be"}, {"index": "2607", "colour": "orange", "code": "        'h2', 'h3', 'h4', 'h5', 'h6', 'hr', 'i', 'img', 'input', 'ins',\n", "error": "none", "author": "tom@organisms.be"}, {"index": "2608", "colour": "orange", "code": "        'keygen', 'kbd', 'label', 'legend', 'li', 'm', 'map', 'menu', 'meter',\n", "error": "none", "author": "tom@organisms.be"}, {"index": "2609", "colour": "orange", "code": "        'multicol', 'nav', 'nextid', 'ol', 'output', 'optgroup', 'option',\n", "error": "none", "author": "tom@organisms.be"}, {"index": "2610", "colour": "orange", "code": "        'p', 'pre', 'progress', 'q', 's', 'samp', 'section', 'select',\n", "error": "none", "author": "tom@organisms.be"}, {"index": "2611", "colour": "orange", "code": "        'small', 'sound', 'source', 'spacer', 'span', 'strike', 'strong',\n", "error": "none", "author": "tom@organisms.be"}, {"index": "2612", "colour": "orange", "code": "        'sub', 'sup', 'table', 'tbody', 'td', 'textarea', 'time', 'tfoot',\n", "error": "none", "author": "tom@organisms.be"}, {"index": "2613", "colour": "orange", "code": "        'th', 'thead', 'tr', 'tt', 'u', 'ul', 'var', 'video', 'noscript'])\n", "error": "none", "author": "tom@organisms.be"}, {"index": "2614", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "2615", "colour": "orange", "code": "    acceptable_attributes = set(['abbr', 'accept', 'accept-charset', 'accesskey',\n", "error": "none", "author": "tom@organisms.be"}, {"index": "2616", "colour": "orange", "code": "      'action', 'align', 'alt', 'autocomplete', 'autofocus', 'axis',\n", "error": "none", "author": "tom@organisms.be"}, {"index": "2617", "colour": "orange", "code": "      'background', 'balance', 'bgcolor', 'bgproperties', 'border',\n", "error": "none", "author": "tom@organisms.be"}, {"index": "2618", "colour": "orange", "code": "      'bordercolor', 'bordercolordark', 'bordercolorlight', 'bottompadding',\n", "error": "none", "author": "tom@organisms.be"}, {"index": "2619", "colour": "orange", "code": "      'cellpadding', 'cellspacing', 'ch', 'challenge', 'char', 'charoff',\n", "error": "none", "author": "tom@organisms.be"}, {"index": "2620", "colour": "orange", "code": "      'choff', 'charset', 'checked', 'cite', 'class', 'clear', 'color', 'cols',\n", "error": "none", "author": "tom@organisms.be"}, {"index": "2621", "colour": "orange", "code": "      'colspan', 'compact', 'contenteditable', 'controls', 'coords', 'data',\n", "error": "none", "author": "tom@organisms.be"}, {"index": "2622", "colour": "orange", "code": "      'datafld', 'datapagesize', 'datasrc', 'datetime', 'default', 'delay',\n", "error": "none", "author": "tom@organisms.be"}, {"index": "2623", "colour": "orange", "code": "      'dir', 'disabled', 'draggable', 'dynsrc', 'enctype', 'end', 'face', 'for',\n", "error": "none", "author": "tom@organisms.be"}, {"index": "2624", "colour": "orange", "code": "      'form', 'frame', 'galleryimg', 'gutter', 'headers', 'height', 'hidefocus',\n", "error": "none", "author": "tom@organisms.be"}, {"index": "2625", "colour": "orange", "code": "      'hidden', 'high', 'href', 'hreflang', 'hspace', 'icon', 'id', 'inputmode',\n", "error": "none", "author": "tom@organisms.be"}, {"index": "2626", "colour": "orange", "code": "      'ismap', 'keytype', 'label', 'leftspacing', 'lang', 'list', 'longdesc',\n", "error": "none", "author": "tom@organisms.be"}, {"index": "2627", "colour": "orange", "code": "      'loop', 'loopcount', 'loopend', 'loopstart', 'low', 'lowsrc', 'max',\n", "error": "none", "author": "tom@organisms.be"}, {"index": "2628", "colour": "orange", "code": "      'maxlength', 'media', 'method', 'min', 'multiple', 'name', 'nohref',\n", "error": "none", "author": "tom@organisms.be"}, {"index": "2629", "colour": "orange", "code": "      'noshade', 'nowrap', 'open', 'optimum', 'pattern', 'ping', 'point-size',\n", "error": "none", "author": "tom@organisms.be"}, {"index": "2630", "colour": "orange", "code": "      'prompt', 'pqg', 'radiogroup', 'readonly', 'rel', 'repeat-max',\n", "error": "none", "author": "tom@organisms.be"}, {"index": "2631", "colour": "orange", "code": "      'repeat-min', 'replace', 'required', 'rev', 'rightspacing', 'rows',\n", "error": "none", "author": "tom@organisms.be"}, {"index": "2632", "colour": "orange", "code": "      'rowspan', 'rules', 'scope', 'selected', 'shape', 'size', 'span', 'src',\n", "error": "none", "author": "tom@organisms.be"}, {"index": "2633", "colour": "orange", "code": "      'start', 'step', 'summary', 'suppress', 'tabindex', 'target', 'template',\n", "error": "none", "author": "tom@organisms.be"}, {"index": "2634", "colour": "orange", "code": "      'title', 'toppadding', 'type', 'unselectable', 'usemap', 'urn', 'valign',\n", "error": "none", "author": "tom@organisms.be"}, {"index": "2635", "colour": "orange", "code": "      'value', 'variable', 'volume', 'vspace', 'vrml', 'width', 'wrap',\n", "error": "none", "author": "tom@organisms.be"}, {"index": "2636", "colour": "orange", "code": "      'xml:lang'])\n", "error": "none", "author": "tom@organisms.be"}, {"index": "2637", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "2638", "colour": "orange", "code": "    unacceptable_elements_with_end_tag = set(['script', 'applet', 'style'])\n", "error": "none", "author": "tom@organisms.be"}, {"index": "2639", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "2640", "colour": "orange", "code": "    acceptable_css_properties = set(['azimuth', 'background-color',\n", "error": "none", "author": "tom@organisms.be"}, {"index": "2641", "colour": "orange", "code": "      'border-bottom-color', 'border-collapse', 'border-color',\n", "error": "none", "author": "tom@organisms.be"}, {"index": "2642", "colour": "orange", "code": "      'border-left-color', 'border-right-color', 'border-top-color', 'clear',\n", "error": "none", "author": "tom@organisms.be"}, {"index": "2643", "colour": "orange", "code": "      'color', 'cursor', 'direction', 'display', 'elevation', 'float', 'font',\n", "error": "none", "author": "tom@organisms.be"}, {"index": "2644", "colour": "orange", "code": "      'font-family', 'font-size', 'font-style', 'font-variant', 'font-weight',\n", "error": "none", "author": "tom@organisms.be"}, {"index": "2645", "colour": "orange", "code": "      'height', 'letter-spacing', 'line-height', 'overflow', 'pause',\n", "error": "none", "author": "tom@organisms.be"}, {"index": "2646", "colour": "orange", "code": "      'pause-after', 'pause-before', 'pitch', 'pitch-range', 'richness',\n", "error": "none", "author": "tom@organisms.be"}, {"index": "2647", "colour": "orange", "code": "      'speak', 'speak-header', 'speak-numeral', 'speak-punctuation',\n", "error": "none", "author": "tom@organisms.be"}, {"index": "2648", "colour": "orange", "code": "      'speech-rate', 'stress', 'text-align', 'text-decoration', 'text-indent',\n", "error": "none", "author": "tom@organisms.be"}, {"index": "2649", "colour": "orange", "code": "      'unicode-bidi', 'vertical-align', 'voice-family', 'volume',\n", "error": "none", "author": "tom@organisms.be"}, {"index": "2650", "colour": "orange", "code": "      'white-space', 'width'])\n", "error": "none", "author": "tom@organisms.be"}, {"index": "2651", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "2652", "colour": "orange", "code": "    # survey of common keywords found in feeds\n", "error": "none", "author": "tom@organisms.be"}, {"index": "2653", "colour": "orange", "code": "    acceptable_css_keywords = set(['auto', 'aqua', 'black', 'block', 'blue',\n", "error": "none", "author": "tom@organisms.be"}, {"index": "2654", "colour": "orange", "code": "      'bold', 'both', 'bottom', 'brown', 'center', 'collapse', 'dashed',\n", "error": "none", "author": "tom@organisms.be"}, {"index": "2655", "colour": "orange", "code": "      'dotted', 'fuchsia', 'gray', 'green', '!important', 'italic', 'left',\n", "error": "none", "author": "tom@organisms.be"}, {"index": "2656", "colour": "orange", "code": "      'lime', 'maroon', 'medium', 'none', 'navy', 'normal', 'nowrap', 'olive',\n", "error": "none", "author": "tom@organisms.be"}, {"index": "2657", "colour": "orange", "code": "      'pointer', 'purple', 'red', 'right', 'solid', 'silver', 'teal', 'top',\n", "error": "none", "author": "tom@organisms.be"}, {"index": "2658", "colour": "orange", "code": "      'transparent', 'underline', 'white', 'yellow'])\n", "error": "none", "author": "tom@organisms.be"}, {"index": "2659", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "2660", "colour": "green", "code": "    valid_css_values = re.compile('^(#[0-9a-f]+|rgb\\(\\d+%?,\\d*%?,?\\d*%?\\)?|' +\n", "error": "W", "author": "tom@organisms.be"}, {"index": "2661", "colour": "green", "code": "      '\\d{0,2}\\.?\\d{0,2}(cm|em|ex|in|mm|pc|pt|px|%|,|\\))?)$')\n", "error": "W", "author": "tom@organisms.be"}, {"index": "2662", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "2663", "colour": "orange", "code": "    mathml_elements = set(['annotation', 'annotation-xml', 'maction', 'math',\n", "error": "none", "author": "tom@organisms.be"}, {"index": "2664", "colour": "orange", "code": "      'merror', 'mfenced', 'mfrac', 'mi', 'mmultiscripts', 'mn', 'mo', 'mover', 'mpadded',\n", "error": "none", "author": "tom@organisms.be"}, {"index": "2665", "colour": "orange", "code": "      'mphantom', 'mprescripts', 'mroot', 'mrow', 'mspace', 'msqrt', 'mstyle',\n", "error": "none", "author": "tom@organisms.be"}, {"index": "2666", "colour": "orange", "code": "      'msub', 'msubsup', 'msup', 'mtable', 'mtd', 'mtext', 'mtr', 'munder',\n", "error": "none", "author": "tom@organisms.be"}, {"index": "2667", "colour": "orange", "code": "      'munderover', 'none', 'semantics'])\n", "error": "none", "author": "tom@organisms.be"}, {"index": "2668", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "2669", "colour": "orange", "code": "    mathml_attributes = set(['actiontype', 'align', 'columnalign', 'columnalign',\n", "error": "none", "author": "tom@organisms.be"}, {"index": "2670", "colour": "orange", "code": "      'columnalign', 'close', 'columnlines', 'columnspacing', 'columnspan', 'depth',\n", "error": "none", "author": "tom@organisms.be"}, {"index": "2671", "colour": "orange", "code": "      'display', 'displaystyle', 'encoding', 'equalcolumns', 'equalrows',\n", "error": "none", "author": "tom@organisms.be"}, {"index": "2672", "colour": "orange", "code": "      'fence', 'fontstyle', 'fontweight', 'frame', 'height', 'linethickness',\n", "error": "none", "author": "tom@organisms.be"}, {"index": "2673", "colour": "orange", "code": "      'lspace', 'mathbackground', 'mathcolor', 'mathvariant', 'mathvariant',\n", "error": "none", "author": "tom@organisms.be"}, {"index": "2674", "colour": "orange", "code": "      'maxsize', 'minsize', 'open', 'other', 'rowalign', 'rowalign', 'rowalign',\n", "error": "none", "author": "tom@organisms.be"}, {"index": "2675", "colour": "orange", "code": "      'rowlines', 'rowspacing', 'rowspan', 'rspace', 'scriptlevel', 'selection',\n", "error": "none", "author": "tom@organisms.be"}, {"index": "2676", "colour": "orange", "code": "      'separator', 'separators', 'stretchy', 'width', 'width', 'xlink:href',\n", "error": "none", "author": "tom@organisms.be"}, {"index": "2677", "colour": "orange", "code": "      'xlink:show', 'xlink:type', 'xmlns', 'xmlns:xlink'])\n", "error": "none", "author": "tom@organisms.be"}, {"index": "2678", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "2679", "colour": "orange", "code": "    # svgtiny - foreignObject + linearGradient + radialGradient + stop\n", "error": "none", "author": "tom@organisms.be"}, {"index": "2680", "colour": "orange", "code": "    svg_elements = set(['a', 'animate', 'animateColor', 'animateMotion',\n", "error": "none", "author": "tom@organisms.be"}, {"index": "2681", "colour": "orange", "code": "      'animateTransform', 'circle', 'defs', 'desc', 'ellipse', 'foreignObject',\n", "error": "none", "author": "tom@organisms.be"}, {"index": "2682", "colour": "orange", "code": "      'font-face', 'font-face-name', 'font-face-src', 'g', 'glyph', 'hkern',\n", "error": "none", "author": "tom@organisms.be"}, {"index": "2683", "colour": "orange", "code": "      'linearGradient', 'line', 'marker', 'metadata', 'missing-glyph', 'mpath',\n", "error": "none", "author": "tom@organisms.be"}, {"index": "2684", "colour": "orange", "code": "      'path', 'polygon', 'polyline', 'radialGradient', 'rect', 'set', 'stop',\n", "error": "none", "author": "tom@organisms.be"}, {"index": "2685", "colour": "orange", "code": "      'svg', 'switch', 'text', 'title', 'tspan', 'use'])\n", "error": "none", "author": "tom@organisms.be"}, {"index": "2686", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "2687", "colour": "orange", "code": "    # svgtiny + class + opacity + offset + xmlns + xmlns:xlink\n", "error": "none", "author": "tom@organisms.be"}, {"index": "2688", "colour": "orange", "code": "    svg_attributes = set(['accent-height', 'accumulate', 'additive', 'alphabetic',\n", "error": "none", "author": "tom@organisms.be"}, {"index": "2689", "colour": "orange", "code": "       'arabic-form', 'ascent', 'attributeName', 'attributeType',\n", "error": "none", "author": "tom@organisms.be"}, {"index": "2690", "colour": "orange", "code": "       'baseProfile', 'bbox', 'begin', 'by', 'calcMode', 'cap-height',\n", "error": "none", "author": "tom@organisms.be"}, {"index": "2691", "colour": "orange", "code": "       'class', 'color', 'color-rendering', 'content', 'cx', 'cy', 'd', 'dx',\n", "error": "none", "author": "tom@organisms.be"}, {"index": "2692", "colour": "orange", "code": "       'dy', 'descent', 'display', 'dur', 'end', 'fill', 'fill-opacity',\n", "error": "none", "author": "tom@organisms.be"}, {"index": "2693", "colour": "orange", "code": "       'fill-rule', 'font-family', 'font-size', 'font-stretch', 'font-style',\n", "error": "none", "author": "tom@organisms.be"}, {"index": "2694", "colour": "orange", "code": "       'font-variant', 'font-weight', 'from', 'fx', 'fy', 'g1', 'g2',\n", "error": "none", "author": "tom@organisms.be"}, {"index": "2695", "colour": "orange", "code": "       'glyph-name', 'gradientUnits', 'hanging', 'height', 'horiz-adv-x',\n", "error": "none", "author": "tom@organisms.be"}, {"index": "2696", "colour": "orange", "code": "       'horiz-origin-x', 'id', 'ideographic', 'k', 'keyPoints', 'keySplines',\n", "error": "none", "author": "tom@organisms.be"}, {"index": "2697", "colour": "orange", "code": "       'keyTimes', 'lang', 'mathematical', 'marker-end', 'marker-mid',\n", "error": "none", "author": "tom@organisms.be"}, {"index": "2698", "colour": "orange", "code": "       'marker-start', 'markerHeight', 'markerUnits', 'markerWidth', 'max',\n", "error": "none", "author": "tom@organisms.be"}, {"index": "2699", "colour": "orange", "code": "       'min', 'name', 'offset', 'opacity', 'orient', 'origin',\n", "error": "none", "author": "tom@organisms.be"}, {"index": "2700", "colour": "orange", "code": "       'overline-position', 'overline-thickness', 'panose-1', 'path',\n", "error": "none", "author": "tom@organisms.be"}, {"index": "2701", "colour": "orange", "code": "       'pathLength', 'points', 'preserveAspectRatio', 'r', 'refX', 'refY',\n", "error": "none", "author": "tom@organisms.be"}, {"index": "2702", "colour": "orange", "code": "       'repeatCount', 'repeatDur', 'requiredExtensions', 'requiredFeatures',\n", "error": "none", "author": "tom@organisms.be"}, {"index": "2703", "colour": "orange", "code": "       'restart', 'rotate', 'rx', 'ry', 'slope', 'stemh', 'stemv',\n", "error": "none", "author": "tom@organisms.be"}, {"index": "2704", "colour": "orange", "code": "       'stop-color', 'stop-opacity', 'strikethrough-position',\n", "error": "none", "author": "tom@organisms.be"}, {"index": "2705", "colour": "orange", "code": "       'strikethrough-thickness', 'stroke', 'stroke-dasharray',\n", "error": "none", "author": "tom@organisms.be"}, {"index": "2706", "colour": "orange", "code": "       'stroke-dashoffset', 'stroke-linecap', 'stroke-linejoin',\n", "error": "none", "author": "tom@organisms.be"}, {"index": "2707", "colour": "orange", "code": "       'stroke-miterlimit', 'stroke-opacity', 'stroke-width', 'systemLanguage',\n", "error": "none", "author": "tom@organisms.be"}, {"index": "2708", "colour": "orange", "code": "       'target', 'text-anchor', 'to', 'transform', 'type', 'u1', 'u2',\n", "error": "none", "author": "tom@organisms.be"}, {"index": "2709", "colour": "orange", "code": "       'underline-position', 'underline-thickness', 'unicode', 'unicode-range',\n", "error": "none", "author": "tom@organisms.be"}, {"index": "2710", "colour": "orange", "code": "       'units-per-em', 'values', 'version', 'viewBox', 'visibility', 'width',\n", "error": "none", "author": "tom@organisms.be"}, {"index": "2711", "colour": "orange", "code": "       'widths', 'x', 'x-height', 'x1', 'x2', 'xlink:actuate', 'xlink:arcrole',\n", "error": "none", "author": "tom@organisms.be"}, {"index": "2712", "colour": "orange", "code": "       'xlink:href', 'xlink:role', 'xlink:show', 'xlink:title', 'xlink:type',\n", "error": "none", "author": "tom@organisms.be"}, {"index": "2713", "colour": "orange", "code": "       'xml:base', 'xml:lang', 'xml:space', 'xmlns', 'xmlns:xlink', 'y', 'y1',\n", "error": "none", "author": "tom@organisms.be"}, {"index": "2714", "colour": "orange", "code": "       'y2', 'zoomAndPan'])\n", "error": "none", "author": "tom@organisms.be"}, {"index": "2715", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "2716", "colour": "orange", "code": "    svg_attr_map = None\n", "error": "none", "author": "tom@organisms.be"}, {"index": "2717", "colour": "orange", "code": "    svg_elem_map = None\n", "error": "none", "author": "tom@organisms.be"}, {"index": "2718", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "2719", "colour": "orange", "code": "    acceptable_svg_properties = set([ 'fill', 'fill-opacity', 'fill-rule',\n", "error": "none", "author": "tom@organisms.be"}, {"index": "2720", "colour": "orange", "code": "      'stroke', 'stroke-width', 'stroke-linecap', 'stroke-linejoin',\n", "error": "none", "author": "tom@organisms.be"}, {"index": "2721", "colour": "orange", "code": "      'stroke-opacity'])\n", "error": "none", "author": "tom@organisms.be"}, {"index": "2722", "colour": "orange", "code": "\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "2723", "colour": "orange", "code": "    def reset(self):\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "2724", "colour": "orange", "code": "        _BaseHTMLProcessor.reset(self)\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "2725", "colour": "green", "code": "        self.unacceptablestack = 0\n", "error": "W", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "2726", "colour": "green", "code": "        self.mathmlOK = 0\n", "error": "W", "author": "tom@organisms.be"}, {"index": "2727", "colour": "green", "code": "        self.svgOK = 0\n", "error": "W", "author": "tom@organisms.be"}, {"index": "2728", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "2729", "colour": "blue", "code": "    def unknown_starttag(self, tag, attrs):\n", "error": "R", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "2730", "colour": "orange", "code": "        acceptable_attributes = self.acceptable_attributes\n", "error": "none", "author": "tom@organisms.be"}, {"index": "2731", "colour": "orange", "code": "        keymap = {}\n", "error": "none", "author": "tom@organisms.be"}, {"index": "2732", "colour": "orange", "code": "        if not tag in self.acceptable_elements or self.svgOK:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "2733", "colour": "orange", "code": "            if tag in self.unacceptable_elements_with_end_tag:\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "2734", "colour": "orange", "code": "                self.unacceptablestack += 1\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "2735", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "2736", "colour": "orange", "code": "            # add implicit namespaces to html5 inline svg/mathml\n", "error": "none", "author": "tom@organisms.be"}, {"index": "2737", "colour": "orange", "code": "            if self._type.endswith('html'):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "2738", "colour": "orange", "code": "                if not dict(attrs).get('xmlns'):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "2739", "colour": "orange", "code": "                    if tag=='svg':\n", "error": "none", "author": "tom@organisms.be"}, {"index": "2740", "colour": "orange", "code": "                        attrs.append( ('xmlns','http://www.w3.org/2000/svg') )\n", "error": "none", "author": "tom@organisms.be"}, {"index": "2741", "colour": "orange", "code": "                    if tag=='math':\n", "error": "none", "author": "tom@organisms.be"}, {"index": "2742", "colour": "orange", "code": "                        attrs.append( ('xmlns','http://www.w3.org/1998/Math/MathML') )\n", "error": "none", "author": "tom@organisms.be"}, {"index": "2743", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "2744", "colour": "orange", "code": "            # not otherwise acceptable, perhaps it is MathML or SVG?\n", "error": "none", "author": "tom@organisms.be"}, {"index": "2745", "colour": "orange", "code": "            if tag=='math' and ('xmlns','http://www.w3.org/1998/Math/MathML') in attrs:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "2746", "colour": "orange", "code": "                self.mathmlOK += 1\n", "error": "none", "author": "tom@organisms.be"}, {"index": "2747", "colour": "orange", "code": "            if tag=='svg' and ('xmlns','http://www.w3.org/2000/svg') in attrs:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "2748", "colour": "orange", "code": "                self.svgOK += 1\n", "error": "none", "author": "tom@organisms.be"}, {"index": "2749", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "2750", "colour": "orange", "code": "            # chose acceptable attributes based on tag class, else bail\n", "error": "none", "author": "tom@organisms.be"}, {"index": "2751", "colour": "orange", "code": "            if  self.mathmlOK and tag in self.mathml_elements:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "2752", "colour": "orange", "code": "                acceptable_attributes = self.mathml_attributes\n", "error": "none", "author": "tom@organisms.be"}, {"index": "2753", "colour": "orange", "code": "            elif self.svgOK and tag in self.svg_elements:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "2754", "colour": "orange", "code": "                # for most vocabularies, lowercasing is a good idea.  Many\n", "error": "none", "author": "tom@organisms.be"}, {"index": "2755", "colour": "orange", "code": "                # svg elements, however, are camel case\n", "error": "none", "author": "tom@organisms.be"}, {"index": "2756", "colour": "orange", "code": "                if not self.svg_attr_map:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "2757", "colour": "orange", "code": "                    lower=[attr.lower() for attr in self.svg_attributes]\n", "error": "none", "author": "tom@organisms.be"}, {"index": "2758", "colour": "orange", "code": "                    mix=[a for a in self.svg_attributes if a not in lower]\n", "error": "none", "author": "tom@organisms.be"}, {"index": "2759", "colour": "orange", "code": "                    self.svg_attributes = lower\n", "error": "none", "author": "tom@organisms.be"}, {"index": "2760", "colour": "orange", "code": "                    self.svg_attr_map = dict([(a.lower(),a) for a in mix])\n", "error": "none", "author": "tom@organisms.be"}, {"index": "2761", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "2762", "colour": "orange", "code": "                    lower=[attr.lower() for attr in self.svg_elements]\n", "error": "none", "author": "tom@organisms.be"}, {"index": "2763", "colour": "orange", "code": "                    mix=[a for a in self.svg_elements if a not in lower]\n", "error": "none", "author": "tom@organisms.be"}, {"index": "2764", "colour": "orange", "code": "                    self.svg_elements = lower\n", "error": "none", "author": "tom@organisms.be"}, {"index": "2765", "colour": "orange", "code": "                    self.svg_elem_map = dict([(a.lower(),a) for a in mix])\n", "error": "none", "author": "tom@organisms.be"}, {"index": "2766", "colour": "orange", "code": "                acceptable_attributes = self.svg_attributes\n", "error": "none", "author": "tom@organisms.be"}, {"index": "2767", "colour": "orange", "code": "                tag = self.svg_elem_map.get(tag,tag)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "2768", "colour": "orange", "code": "                keymap = self.svg_attr_map\n", "error": "none", "author": "tom@organisms.be"}, {"index": "2769", "colour": "orange", "code": "            elif not tag in self.acceptable_elements:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "2770", "colour": "orange", "code": "                return\n", "error": "none", "author": "tom@organisms.be"}, {"index": "2771", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "2772", "colour": "orange", "code": "        # declare xlink namespace, if needed\n", "error": "none", "author": "tom@organisms.be"}, {"index": "2773", "colour": "orange", "code": "        if self.mathmlOK or self.svgOK:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "2774", "colour": "green", "code": "            if filter(lambda n,v: n.startswith('xlink:'),attrs):\n", "error": "W", "author": "tom@organisms.be"}, {"index": "2775", "colour": "orange", "code": "                if not ('xmlns:xlink','http://www.w3.org/1999/xlink') in attrs:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "2776", "colour": "orange", "code": "                    attrs.append(('xmlns:xlink','http://www.w3.org/1999/xlink'))\n", "error": "none", "author": "tom@organisms.be"}, {"index": "2777", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "2778", "colour": "orange", "code": "        clean_attrs = []\n", "error": "none", "author": "tom@organisms.be"}, {"index": "2779", "colour": "orange", "code": "        for key, value in self.normalize_attrs(attrs):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "2780", "colour": "orange", "code": "            if key in acceptable_attributes:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "2781", "colour": "orange", "code": "                key=keymap.get(key,key)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "2782", "colour": "orange", "code": "                # make sure the uri uses an acceptable uri scheme\n", "error": "none", "author": "tom@organisms.be"}, {"index": "2783", "colour": "orange", "code": "                if key == u'href':\n", "error": "none", "author": "tom@organisms.be"}, {"index": "2784", "colour": "orange", "code": "                    value = _makeSafeAbsoluteURI(value)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "2785", "colour": "orange", "code": "                clean_attrs.append((key,value))\n", "error": "none", "author": "tom@organisms.be"}, {"index": "2786", "colour": "orange", "code": "            elif key=='style':\n", "error": "none", "author": "tom@organisms.be"}, {"index": "2787", "colour": "orange", "code": "                clean_value = self.sanitize_style(value)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "2788", "colour": "orange", "code": "                if clean_value:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "2789", "colour": "orange", "code": "                    clean_attrs.append((key,clean_value))\n", "error": "none", "author": "tom@organisms.be"}, {"index": "2790", "colour": "orange", "code": "        _BaseHTMLProcessor.unknown_starttag(self, tag, clean_attrs)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "2791", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "2792", "colour": "orange", "code": "    def unknown_endtag(self, tag):\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "2793", "colour": "orange", "code": "        if not tag in self.acceptable_elements:\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "2794", "colour": "orange", "code": "            if tag in self.unacceptable_elements_with_end_tag:\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "2795", "colour": "orange", "code": "                self.unacceptablestack -= 1\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "2796", "colour": "orange", "code": "            if self.mathmlOK and tag in self.mathml_elements:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "2797", "colour": "orange", "code": "                if tag == 'math' and self.mathmlOK:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "2798", "colour": "orange", "code": "                    self.mathmlOK -= 1\n", "error": "none", "author": "tom@organisms.be"}, {"index": "2799", "colour": "orange", "code": "            elif self.svgOK and tag in self.svg_elements:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "2800", "colour": "orange", "code": "                tag = self.svg_elem_map.get(tag,tag)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "2801", "colour": "orange", "code": "                if tag == 'svg' and self.svgOK:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "2802", "colour": "orange", "code": "                    self.svgOK -= 1\n", "error": "none", "author": "tom@organisms.be"}, {"index": "2803", "colour": "orange", "code": "            else:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "2804", "colour": "orange", "code": "                return\n", "error": "none", "author": "tom@organisms.be"}, {"index": "2805", "colour": "orange", "code": "        _BaseHTMLProcessor.unknown_endtag(self, tag)\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "2806", "colour": "orange", "code": "\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "2807", "colour": "orange", "code": "    def handle_pi(self, text):\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "2808", "colour": "orange", "code": "        pass\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "2809", "colour": "orange", "code": "\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "2810", "colour": "orange", "code": "    def handle_decl(self, text):\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "2811", "colour": "orange", "code": "        pass\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "2812", "colour": "orange", "code": "\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "2813", "colour": "orange", "code": "    def handle_data(self, text):\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "2814", "colour": "orange", "code": "        if not self.unacceptablestack:\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "2815", "colour": "orange", "code": "            _BaseHTMLProcessor.handle_data(self, text)\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "2816", "colour": "orange", "code": "\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "2817", "colour": "orange", "code": "    def sanitize_style(self, style):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "2818", "colour": "orange", "code": "        # disallow urls\n", "error": "none", "author": "tom@organisms.be"}, {"index": "2819", "colour": "green", "code": "        style=re.compile('url\\s*\\(\\s*[^\\s)]+?\\s*\\)\\s*').sub(' ',style)\n", "error": "W", "author": "tom@organisms.be"}, {"index": "2820", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "2821", "colour": "orange", "code": "        # gauntlet\n", "error": "none", "author": "tom@organisms.be"}, {"index": "2822", "colour": "green", "code": "        if not re.match(\"\"\"^([:,;#%.\\sa-zA-Z0-9!]|\\w-\\w|'[\\s\\w]+'|\"[\\s\\w]+\"|\\([\\d,\\s]+\\))*$\"\"\", style):\n", "error": "W", "author": "tom@organisms.be"}, {"index": "2823", "colour": "orange", "code": "            return ''\n", "error": "none", "author": "tom@organisms.be"}, {"index": "2824", "colour": "orange", "code": "        # This replaced a regexp that used re.match and was prone to pathological back-tracking.\n", "error": "none", "author": "tom@organisms.be"}, {"index": "2825", "colour": "green", "code": "        if re.sub(\"\\s*[-\\w]+\\s*:\\s*[^:;]*;?\", '', style).strip():\n", "error": "W", "author": "tom@organisms.be"}, {"index": "2826", "colour": "orange", "code": "            return ''\n", "error": "none", "author": "tom@organisms.be"}, {"index": "2827", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "2828", "colour": "orange", "code": "        clean = []\n", "error": "none", "author": "tom@organisms.be"}, {"index": "2829", "colour": "green", "code": "        for prop,value in re.findall(\"([-\\w]+)\\s*:\\s*([^:;]*)\",style):\n", "error": "W", "author": "tom@organisms.be"}, {"index": "2830", "colour": "orange", "code": "            if not value:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "2831", "colour": "orange", "code": "                continue\n", "error": "none", "author": "tom@organisms.be"}, {"index": "2832", "colour": "orange", "code": "            if prop.lower() in self.acceptable_css_properties:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "2833", "colour": "orange", "code": "                clean.append(prop + ': ' + value + ';')\n", "error": "none", "author": "tom@organisms.be"}, {"index": "2834", "colour": "orange", "code": "            elif prop.split('-')[0].lower() in ['background','border','margin','padding']:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "2835", "colour": "orange", "code": "                for keyword in value.split():\n", "error": "none", "author": "tom@organisms.be"}, {"index": "2836", "colour": "orange", "code": "                    if not keyword in self.acceptable_css_keywords and \\\n", "error": "none", "author": "tom@organisms.be"}, {"index": "2837", "colour": "orange", "code": "                        not self.valid_css_values.match(keyword):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "2838", "colour": "orange", "code": "                        break\n", "error": "none", "author": "tom@organisms.be"}, {"index": "2839", "colour": "orange", "code": "                else:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "2840", "colour": "orange", "code": "                    clean.append(prop + ': ' + value + ';')\n", "error": "none", "author": "tom@organisms.be"}, {"index": "2841", "colour": "orange", "code": "            elif self.svgOK and prop.lower() in self.acceptable_svg_properties:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "2842", "colour": "orange", "code": "                clean.append(prop + ': ' + value + ';')\n", "error": "none", "author": "tom@organisms.be"}, {"index": "2843", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "2844", "colour": "orange", "code": "        return ' '.join(clean)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "2845", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "2846", "colour": "orange", "code": "    def parse_comment(self, i, report=1):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "2847", "colour": "orange", "code": "        ret = _BaseHTMLProcessor.parse_comment(self, i, report)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "2848", "colour": "orange", "code": "        if ret >= 0:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "2849", "colour": "orange", "code": "            return ret\n", "error": "none", "author": "tom@organisms.be"}, {"index": "2850", "colour": "orange", "code": "        # if ret == -1, this may be a malicious attempt to circumvent\n", "error": "none", "author": "tom@organisms.be"}, {"index": "2851", "colour": "orange", "code": "        # sanitization, or a page-destroying unclosed comment\n", "error": "none", "author": "tom@organisms.be"}, {"index": "2852", "colour": "orange", "code": "        match = re.compile(r'--[^>]*>').search(self.rawdata, i+4)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "2853", "colour": "orange", "code": "        if match:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "2854", "colour": "orange", "code": "            return match.end()\n", "error": "none", "author": "tom@organisms.be"}, {"index": "2855", "colour": "orange", "code": "        # unclosed comment; deliberately fail to handle_data()\n", "error": "none", "author": "tom@organisms.be"}, {"index": "2856", "colour": "orange", "code": "        return len(self.rawdata)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "2857", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "2858", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "2859", "colour": "blue", "code": "def _sanitizeHTML(htmlSource, encoding, _type):\n", "error": "R", "author": "tom@organisms.be"}, {"index": "2860", "colour": "orange", "code": "    if not _SGML_AVAILABLE:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "2861", "colour": "orange", "code": "        return htmlSource\n", "error": "none", "author": "tom@organisms.be"}, {"index": "2862", "colour": "orange", "code": "    p = _HTMLSanitizer(encoding, _type)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "2863", "colour": "orange", "code": "    htmlSource = htmlSource.replace('<![CDATA[', '&lt;![CDATA[')\n", "error": "none", "author": "tom@organisms.be"}, {"index": "2864", "colour": "orange", "code": "    p.feed(htmlSource)\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "2865", "colour": "orange", "code": "    data = p.output()\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "2866", "colour": "orange", "code": "    if TIDY_MARKUP:\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "2867", "colour": "orange", "code": "        # loop through list of preferred Tidy interfaces looking for one that's installed,\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "2868", "colour": "orange", "code": "        # then set up a common _tidy function to wrap the interface-specific API.\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "2869", "colour": "orange", "code": "        _tidy = None\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "2870", "colour": "orange", "code": "        for tidy_interface in PREFERRED_TIDY_INTERFACES:\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "2871", "colour": "orange", "code": "            try:\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "2872", "colour": "orange", "code": "                if tidy_interface == \"uTidy\":\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "2873", "colour": "orange", "code": "                    from tidy import parseString as _utidy\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "2874", "colour": "red", "code": "                    def _tidy(data, **kwargs):\n", "error": "E", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "2875", "colour": "green", "code": "                        return str(_utidy(data, **kwargs))\n", "error": "W", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "2876", "colour": "orange", "code": "                    break\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "2877", "colour": "orange", "code": "                elif tidy_interface == \"mxTidy\":\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "2878", "colour": "orange", "code": "                    from mx.Tidy import Tidy as _mxtidy\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "2879", "colour": "red", "code": "                    def _tidy(data, **kwargs):\n", "error": "E", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "2880", "colour": "green", "code": "                        nerrors, nwarnings, data, errordata = _mxtidy.tidy(data, **kwargs)\n", "error": "W", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "2881", "colour": "orange", "code": "                        return data\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "2882", "colour": "orange", "code": "                    break\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "2883", "colour": "green", "code": "            except:\n", "error": "W", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "2884", "colour": "orange", "code": "                pass\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "2885", "colour": "orange", "code": "        if _tidy:\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "2886", "colour": "orange", "code": "            utf8 = isinstance(data, unicode)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "2887", "colour": "orange", "code": "            if utf8:\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "2888", "colour": "orange", "code": "                data = data.encode('utf-8')\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "2889", "colour": "orange", "code": "            data = _tidy(data, output_xhtml=1, numeric_entities=1, wrap=0, char_encoding=\"utf8\")\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "2890", "colour": "orange", "code": "            if utf8:\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "2891", "colour": "orange", "code": "                data = unicode(data, 'utf-8')\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "2892", "colour": "orange", "code": "            if data.count('<body'):\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "2893", "colour": "orange", "code": "                data = data.split('<body', 1)[1]\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "2894", "colour": "orange", "code": "                if data.count('>'):\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "2895", "colour": "orange", "code": "                    data = data.split('>', 1)[1]\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "2896", "colour": "orange", "code": "            if data.count('</body'):\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "2897", "colour": "orange", "code": "                data = data.split('</body', 1)[0]\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "2898", "colour": "orange", "code": "    data = data.strip().replace('\\r\\n', '\\n')\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "2899", "colour": "orange", "code": "    return data\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "2900", "colour": "orange", "code": "\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "2901", "colour": "orange", "code": "class _FeedURLHandler(urllib2.HTTPDigestAuthHandler, urllib2.HTTPRedirectHandler, urllib2.HTTPDefaultErrorHandler):\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "2902", "colour": "green", "code": "    def http_error_default(self, req, fp, code, msg, headers):\n", "error": "W", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "2903", "colour": "orange", "code": "        # The default implementation just raises HTTPError.\n", "error": "none", "author": "tom@organisms.be"}, {"index": "2904", "colour": "orange", "code": "        # Forget that.\n", "error": "none", "author": "tom@organisms.be"}, {"index": "2905", "colour": "orange", "code": "        fp.status = code\n", "error": "none", "author": "tom@organisms.be"}, {"index": "2906", "colour": "orange", "code": "        return fp\n", "error": "none", "author": "tom@organisms.be"}, {"index": "2907", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "2908", "colour": "blue", "code": "    def http_error_301(self, req, fp, code, msg, hdrs):\n", "error": "R", "author": "tom@organisms.be"}, {"index": "2909", "colour": "orange", "code": "        result = urllib2.HTTPRedirectHandler.http_error_301(self, req, fp,\n", "error": "none", "author": "tom@organisms.be"}, {"index": "2910", "colour": "orange", "code": "                                                            code, msg, hdrs)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "2911", "colour": "orange", "code": "        result.status = code\n", "error": "none", "author": "tom@organisms.be"}, {"index": "2912", "colour": "orange", "code": "        result.newurl = result.geturl()\n", "error": "none", "author": "tom@organisms.be"}, {"index": "2913", "colour": "orange", "code": "        return result\n", "error": "none", "author": "tom@organisms.be"}, {"index": "2914", "colour": "orange", "code": "    # The default implementations in urllib2.HTTPRedirectHandler\n", "error": "none", "author": "tom@organisms.be"}, {"index": "2915", "colour": "orange", "code": "    # are identical, so hardcoding a http_error_301 call above\n", "error": "none", "author": "tom@organisms.be"}, {"index": "2916", "colour": "orange", "code": "    # won't affect anything\n", "error": "none", "author": "tom@organisms.be"}, {"index": "2917", "colour": "orange", "code": "    http_error_300 = http_error_301\n", "error": "none", "author": "tom@organisms.be"}, {"index": "2918", "colour": "orange", "code": "    http_error_302 = http_error_301\n", "error": "none", "author": "tom@organisms.be"}, {"index": "2919", "colour": "orange", "code": "    http_error_303 = http_error_301\n", "error": "none", "author": "tom@organisms.be"}, {"index": "2920", "colour": "orange", "code": "    http_error_307 = http_error_301\n", "error": "none", "author": "tom@organisms.be"}, {"index": "2921", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "2922", "colour": "blue", "code": "    def http_error_401(self, req, fp, code, msg, headers):\n", "error": "R", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "2923", "colour": "orange", "code": "        # Check if\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "2924", "colour": "orange", "code": "        # - server requires digest auth, AND\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "2925", "colour": "orange", "code": "        # - we tried (unsuccessfully) with basic auth, AND\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "2926", "colour": "orange", "code": "        # If all conditions hold, parse authentication information\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "2927", "colour": "orange", "code": "        # out of the Authorization header we sent the first time\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "2928", "colour": "orange", "code": "        # (for the username and password) and the WWW-Authenticate\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "2929", "colour": "orange", "code": "        # header the server sent back (for the realm) and retry\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "2930", "colour": "orange", "code": "        # the request with the appropriate digest auth headers instead.\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "2931", "colour": "orange", "code": "        # This evil genius hack has been brought to you by Aaron Swartz.\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "2932", "colour": "orange", "code": "        host = urlparse.urlparse(req.get_full_url())[1]\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "2933", "colour": "orange", "code": "        if base64 is None or 'Authorization' not in req.headers \\\n", "error": "none", "author": "tom@organisms.be"}, {"index": "2934", "colour": "orange", "code": "                          or 'WWW-Authenticate' not in headers:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "2935", "colour": "orange", "code": "            return self.http_error_default(req, fp, code, msg, headers)\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "2936", "colour": "orange", "code": "        auth = _base64decode(req.headers['Authorization'].split(' ')[1])\n", "error": "none", "author": "tom@organisms.be"}, {"index": "2937", "colour": "orange", "code": "        user, passw = auth.split(':')\n", "error": "none", "author": "tom@organisms.be"}, {"index": "2938", "colour": "orange", "code": "        realm = re.findall('realm=\"([^\"]*)\"', headers['WWW-Authenticate'])[0]\n", "error": "none", "author": "tom@organisms.be"}, {"index": "2939", "colour": "orange", "code": "        self.add_password(realm, host, user, passw)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "2940", "colour": "orange", "code": "        retry = self.http_error_auth_reqed('www-authenticate', host, req, headers)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "2941", "colour": "orange", "code": "        self.reset_retry_count()\n", "error": "none", "author": "tom@organisms.be"}, {"index": "2942", "colour": "orange", "code": "        return retry\n", "error": "none", "author": "tom@organisms.be"}, {"index": "2943", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "2944", "colour": "blue", "code": "def _open_resource(url_file_stream_or_string, etag, modified, agent, referrer, handlers, request_headers):\n", "error": "R", "author": "tom@organisms.be"}, {"index": "2945", "colour": "orange", "code": "    \"\"\"URL, filename, or string --> stream\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "2946", "colour": "orange", "code": "\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "2947", "colour": "orange", "code": "    This function lets you define parsers that take any input source\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "2948", "colour": "orange", "code": "    (URL, pathname to local or network file, or actual data as a string)\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "2949", "colour": "orange", "code": "    and deal with it in a uniform manner.  Returned object is guaranteed\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "2950", "colour": "orange", "code": "    to have all the basic stdio read methods (read, readline, readlines).\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "2951", "colour": "orange", "code": "    Just .close() the object when you're done with it.\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "2952", "colour": "orange", "code": "\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "2953", "colour": "orange", "code": "    If the etag argument is supplied, it will be used as the value of an\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "2954", "colour": "orange", "code": "    If-None-Match request header.\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "2955", "colour": "orange", "code": "\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "2956", "colour": "orange", "code": "    If the modified argument is supplied, it can be a tuple of 9 integers\n", "error": "none", "author": "tom@organisms.be"}, {"index": "2957", "colour": "orange", "code": "    (as returned by gmtime() in the standard Python time module) or a date\n", "error": "none", "author": "tom@organisms.be"}, {"index": "2958", "colour": "orange", "code": "    string in any format supported by feedparser. Regardless, it MUST\n", "error": "none", "author": "tom@organisms.be"}, {"index": "2959", "colour": "orange", "code": "    be in GMT (Greenwich Mean Time). It will be reformatted into an\n", "error": "none", "author": "tom@organisms.be"}, {"index": "2960", "colour": "orange", "code": "    RFC 1123-compliant date and used as the value of an If-Modified-Since\n", "error": "none", "author": "tom@organisms.be"}, {"index": "2961", "colour": "orange", "code": "    request header.\n", "error": "none", "author": "tom@organisms.be"}, {"index": "2962", "colour": "orange", "code": "\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "2963", "colour": "orange", "code": "    If the agent argument is supplied, it will be used as the value of a\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "2964", "colour": "orange", "code": "    User-Agent request header.\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "2965", "colour": "orange", "code": "\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "2966", "colour": "orange", "code": "    If the referrer argument is supplied, it will be used as the value of a\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "2967", "colour": "orange", "code": "    Referer[sic] request header.\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "2968", "colour": "orange", "code": "\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "2969", "colour": "orange", "code": "    If handlers is supplied, it is a list of handlers used to build a\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "2970", "colour": "orange", "code": "    urllib2 opener.\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "2971", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "2972", "colour": "orange", "code": "    if request_headers is supplied it is a dictionary of HTTP request headers\n", "error": "none", "author": "tom@organisms.be"}, {"index": "2973", "colour": "orange", "code": "    that will override the values generated by FeedParser.\n", "error": "none", "author": "tom@organisms.be"}, {"index": "2974", "colour": "orange", "code": "    \"\"\"\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "2975", "colour": "orange", "code": "\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "2976", "colour": "orange", "code": "    if hasattr(url_file_stream_or_string, 'read'):\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "2977", "colour": "orange", "code": "        return url_file_stream_or_string\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "2978", "colour": "orange", "code": "\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "2979", "colour": "orange", "code": "    if isinstance(url_file_stream_or_string, basestring) \\\n", "error": "none", "author": "tom@organisms.be"}, {"index": "2980", "colour": "orange", "code": "       and urlparse.urlparse(url_file_stream_or_string)[0] in ('http', 'https', 'ftp', 'file', 'feed'):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "2981", "colour": "orange", "code": "        # Deal with the feed URI scheme\n", "error": "none", "author": "tom@organisms.be"}, {"index": "2982", "colour": "orange", "code": "        if url_file_stream_or_string.startswith('feed:http'):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "2983", "colour": "orange", "code": "            url_file_stream_or_string = url_file_stream_or_string[5:]\n", "error": "none", "author": "tom@organisms.be"}, {"index": "2984", "colour": "orange", "code": "        elif url_file_stream_or_string.startswith('feed:'):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "2985", "colour": "orange", "code": "            url_file_stream_or_string = 'http:' + url_file_stream_or_string[5:]\n", "error": "none", "author": "tom@organisms.be"}, {"index": "2986", "colour": "orange", "code": "        if not agent:\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "2987", "colour": "orange", "code": "            agent = USER_AGENT\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "2988", "colour": "orange", "code": "        # test for inline user:password for basic auth\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "2989", "colour": "orange", "code": "        auth = None\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "2990", "colour": "orange", "code": "        if base64:\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "2991", "colour": "orange", "code": "            urltype, rest = urllib.splittype(url_file_stream_or_string)\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "2992", "colour": "orange", "code": "            realhost, rest = urllib.splithost(rest)\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "2993", "colour": "orange", "code": "            if realhost:\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "2994", "colour": "orange", "code": "                user_passwd, realhost = urllib.splituser(realhost)\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "2995", "colour": "orange", "code": "                if user_passwd:\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "2996", "colour": "orange", "code": "                    url_file_stream_or_string = '%s://%s%s' % (urltype, realhost, rest)\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "2997", "colour": "orange", "code": "                    auth = base64.standard_b64encode(user_passwd).strip()\n", "error": "none", "author": "tom@organisms.be"}, {"index": "2998", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "2999", "colour": "orange", "code": "        # iri support\n", "error": "none", "author": "tom@organisms.be"}, {"index": "3000", "colour": "orange", "code": "        if isinstance(url_file_stream_or_string, unicode):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "3001", "colour": "orange", "code": "            url_file_stream_or_string = _convert_to_idn(url_file_stream_or_string)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "3002", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "3003", "colour": "orange", "code": "        # try to open with urllib2 (to use optional headers)\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "3004", "colour": "orange", "code": "        request = _build_urllib2_request(url_file_stream_or_string, agent, etag, modified, referrer, auth, request_headers)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "3005", "colour": "orange", "code": "        opener = urllib2.build_opener(*tuple(handlers + [_FeedURLHandler()]))\n", "error": "none", "author": "tom@organisms.be"}, {"index": "3006", "colour": "orange", "code": "        opener.addheaders = [] # RMK - must clear so we only send our custom User-Agent\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "3007", "colour": "orange", "code": "        try:\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "3008", "colour": "orange", "code": "            return opener.open(request)\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "3009", "colour": "orange", "code": "        finally:\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "3010", "colour": "orange", "code": "            opener.close() # JohnD\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "3011", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "3012", "colour": "orange", "code": "    # try to open with native open function (if url_file_stream_or_string is a filename)\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "3013", "colour": "orange", "code": "    try:\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "3014", "colour": "orange", "code": "        return open(url_file_stream_or_string, 'rb')\n", "error": "none", "author": "tom@organisms.be"}, {"index": "3015", "colour": "orange", "code": "    except (IOError, UnicodeEncodeError, TypeError):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "3016", "colour": "orange", "code": "        # if url_file_stream_or_string is a unicode object that\n", "error": "none", "author": "tom@organisms.be"}, {"index": "3017", "colour": "orange", "code": "        # cannot be converted to the encoding returned by\n", "error": "none", "author": "tom@organisms.be"}, {"index": "3018", "colour": "orange", "code": "        # sys.getfilesystemencoding(), a UnicodeEncodeError\n", "error": "none", "author": "tom@organisms.be"}, {"index": "3019", "colour": "orange", "code": "        # will be thrown\n", "error": "none", "author": "tom@organisms.be"}, {"index": "3020", "colour": "orange", "code": "        # If url_file_stream_or_string is a string that contains NULL\n", "error": "none", "author": "tom@organisms.be"}, {"index": "3021", "colour": "orange", "code": "        # (such as an XML document encoded in UTF-32), TypeError will\n", "error": "none", "author": "tom@organisms.be"}, {"index": "3022", "colour": "orange", "code": "        # be thrown.\n", "error": "none", "author": "tom@organisms.be"}, {"index": "3023", "colour": "orange", "code": "        pass\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "3024", "colour": "orange", "code": "\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "3025", "colour": "orange", "code": "    # treat url_file_stream_or_string as string\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "3026", "colour": "orange", "code": "    if isinstance(url_file_stream_or_string, unicode):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "3027", "colour": "orange", "code": "        return _StringIO(url_file_stream_or_string.encode('utf-8'))\n", "error": "none", "author": "tom@organisms.be"}, {"index": "3028", "colour": "orange", "code": "    return _StringIO(url_file_stream_or_string)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "3029", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "3030", "colour": "orange", "code": "def _convert_to_idn(url):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "3031", "colour": "orange", "code": "    \"\"\"Convert a URL to IDN notation\"\"\"\n", "error": "none", "author": "tom@organisms.be"}, {"index": "3032", "colour": "orange", "code": "    # this function should only be called with a unicode string\n", "error": "none", "author": "tom@organisms.be"}, {"index": "3033", "colour": "orange", "code": "    # strategy: if the host cannot be encoded in ascii, then\n", "error": "none", "author": "tom@organisms.be"}, {"index": "3034", "colour": "orange", "code": "    # it'll be necessary to encode it in idn form\n", "error": "none", "author": "tom@organisms.be"}, {"index": "3035", "colour": "orange", "code": "    parts = list(urlparse.urlsplit(url))\n", "error": "none", "author": "tom@organisms.be"}, {"index": "3036", "colour": "orange", "code": "    try:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "3037", "colour": "orange", "code": "        parts[1].encode('ascii')\n", "error": "none", "author": "tom@organisms.be"}, {"index": "3038", "colour": "orange", "code": "    except UnicodeEncodeError:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "3039", "colour": "orange", "code": "        # the url needs to be converted to idn notation\n", "error": "none", "author": "tom@organisms.be"}, {"index": "3040", "colour": "orange", "code": "        host = parts[1].rsplit(':', 1)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "3041", "colour": "orange", "code": "        newhost = []\n", "error": "none", "author": "tom@organisms.be"}, {"index": "3042", "colour": "orange", "code": "        port = u''\n", "error": "none", "author": "tom@organisms.be"}, {"index": "3043", "colour": "orange", "code": "        if len(host) == 2:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "3044", "colour": "orange", "code": "            port = host.pop()\n", "error": "none", "author": "tom@organisms.be"}, {"index": "3045", "colour": "orange", "code": "        for h in host[0].split('.'):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "3046", "colour": "orange", "code": "            newhost.append(h.encode('idna').decode('utf-8'))\n", "error": "none", "author": "tom@organisms.be"}, {"index": "3047", "colour": "orange", "code": "        parts[1] = '.'.join(newhost)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "3048", "colour": "orange", "code": "        if port:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "3049", "colour": "orange", "code": "            parts[1] += ':' + port\n", "error": "none", "author": "tom@organisms.be"}, {"index": "3050", "colour": "orange", "code": "        return urlparse.urlunsplit(parts)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "3051", "colour": "orange", "code": "    else:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "3052", "colour": "orange", "code": "        return url\n", "error": "none", "author": "tom@organisms.be"}, {"index": "3053", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "3054", "colour": "blue", "code": "def _build_urllib2_request(url, agent, etag, modified, referrer, auth, request_headers):\n", "error": "R", "author": "tom@organisms.be"}, {"index": "3055", "colour": "orange", "code": "    request = urllib2.Request(url)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "3056", "colour": "orange", "code": "    request.add_header('User-Agent', agent)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "3057", "colour": "orange", "code": "    if etag:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "3058", "colour": "orange", "code": "        request.add_header('If-None-Match', etag)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "3059", "colour": "orange", "code": "    if isinstance(modified, basestring):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "3060", "colour": "orange", "code": "        modified = _parse_date(modified)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "3061", "colour": "orange", "code": "    elif isinstance(modified, datetime.datetime):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "3062", "colour": "orange", "code": "        modified = modified.utctimetuple()\n", "error": "none", "author": "tom@organisms.be"}, {"index": "3063", "colour": "orange", "code": "    if modified:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "3064", "colour": "orange", "code": "        # format into an RFC 1123-compliant timestamp. We can't use\n", "error": "none", "author": "tom@organisms.be"}, {"index": "3065", "colour": "orange", "code": "        # time.strftime() since the %a and %b directives can be affected\n", "error": "none", "author": "tom@organisms.be"}, {"index": "3066", "colour": "orange", "code": "        # by the current locale, but RFC 2616 states that dates must be\n", "error": "none", "author": "tom@organisms.be"}, {"index": "3067", "colour": "orange", "code": "        # in English.\n", "error": "none", "author": "tom@organisms.be"}, {"index": "3068", "colour": "orange", "code": "        short_weekdays = ['Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat', 'Sun']\n", "error": "none", "author": "tom@organisms.be"}, {"index": "3069", "colour": "orange", "code": "        months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec']\n", "error": "none", "author": "tom@organisms.be"}, {"index": "3070", "colour": "orange", "code": "        request.add_header('If-Modified-Since', '%s, %02d %s %04d %02d:%02d:%02d GMT' % (short_weekdays[modified[6]], modified[2], months[modified[1] - 1], modified[0], modified[3], modified[4], modified[5]))\n", "error": "none", "author": "tom@organisms.be"}, {"index": "3071", "colour": "orange", "code": "    if referrer:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "3072", "colour": "orange", "code": "        request.add_header('Referer', referrer)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "3073", "colour": "orange", "code": "    if gzip and zlib:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "3074", "colour": "orange", "code": "        request.add_header('Accept-encoding', 'gzip, deflate')\n", "error": "none", "author": "tom@organisms.be"}, {"index": "3075", "colour": "orange", "code": "    elif gzip:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "3076", "colour": "orange", "code": "        request.add_header('Accept-encoding', 'gzip')\n", "error": "none", "author": "tom@organisms.be"}, {"index": "3077", "colour": "orange", "code": "    elif zlib:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "3078", "colour": "orange", "code": "        request.add_header('Accept-encoding', 'deflate')\n", "error": "none", "author": "tom@organisms.be"}, {"index": "3079", "colour": "orange", "code": "    else:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "3080", "colour": "orange", "code": "        request.add_header('Accept-encoding', '')\n", "error": "none", "author": "tom@organisms.be"}, {"index": "3081", "colour": "orange", "code": "    if auth:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "3082", "colour": "orange", "code": "        request.add_header('Authorization', 'Basic %s' % auth)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "3083", "colour": "orange", "code": "    if ACCEPT_HEADER:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "3084", "colour": "orange", "code": "        request.add_header('Accept', ACCEPT_HEADER)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "3085", "colour": "orange", "code": "    # use this for whatever -- cookies, special headers, etc\n", "error": "none", "author": "tom@organisms.be"}, {"index": "3086", "colour": "orange", "code": "    # [('Cookie','Something'),('x-special-header','Another Value')]\n", "error": "none", "author": "tom@organisms.be"}, {"index": "3087", "colour": "orange", "code": "    for header_name, header_value in request_headers.items():\n", "error": "none", "author": "tom@organisms.be"}, {"index": "3088", "colour": "orange", "code": "        request.add_header(header_name, header_value)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "3089", "colour": "orange", "code": "    request.add_header('A-IM', 'feed') # RFC 3229 support\n", "error": "none", "author": "tom@organisms.be"}, {"index": "3090", "colour": "orange", "code": "    return request\n", "error": "none", "author": "tom@organisms.be"}, {"index": "3091", "colour": "orange", "code": "\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "3092", "colour": "orange", "code": "_date_handlers = []\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "3093", "colour": "orange", "code": "def registerDateHandler(func):\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "3094", "colour": "orange", "code": "    '''Register a date handler function (takes string, returns 9-tuple date in GMT)'''\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "3095", "colour": "orange", "code": "    _date_handlers.insert(0, func)\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "3096", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "3097", "colour": "orange", "code": "# ISO-8601 date parsing routines written by Fazal Majid.\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "3098", "colour": "orange", "code": "# The ISO 8601 standard is very convoluted and irregular - a full ISO 8601\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "3099", "colour": "orange", "code": "# parser is beyond the scope of feedparser and would be a worthwhile addition\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "3100", "colour": "orange", "code": "# to the Python library.\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "3101", "colour": "orange", "code": "# A single regular expression cannot parse ISO 8601 date formats into groups\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "3102", "colour": "orange", "code": "# as the standard is highly irregular (for instance is 030104 2003-01-04 or\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "3103", "colour": "orange", "code": "# 0301-04-01), so we use templates instead.\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "3104", "colour": "orange", "code": "# Please note the order in templates is significant because we need a\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "3105", "colour": "orange", "code": "# greedy match.\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "3106", "colour": "orange", "code": "_iso8601_tmpl = ['YYYY-?MM-?DD', 'YYYY-0MM?-?DD', 'YYYY-MM', 'YYYY-?OOO',\n", "error": "none", "author": "tom@organisms.be"}, {"index": "3107", "colour": "orange", "code": "                'YY-?MM-?DD', 'YY-?OOO', 'YYYY',\n", "error": "none", "author": "tom@organisms.be"}, {"index": "3108", "colour": "orange", "code": "                '-YY-?MM', '-OOO', '-YY',\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "3109", "colour": "orange", "code": "                '--MM-?DD', '--MM',\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "3110", "colour": "orange", "code": "                '---DD',\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "3111", "colour": "orange", "code": "                'CC', '']\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "3112", "colour": "orange", "code": "_iso8601_re = [\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "3113", "colour": "orange", "code": "    tmpl.replace(\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "3114", "colour": "orange", "code": "    'YYYY', r'(?P<year>\\d{4})').replace(\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "3115", "colour": "orange", "code": "    'YY', r'(?P<year>\\d\\d)').replace(\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "3116", "colour": "orange", "code": "    'MM', r'(?P<month>[01]\\d)').replace(\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "3117", "colour": "orange", "code": "    'DD', r'(?P<day>[0123]\\d)').replace(\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "3118", "colour": "orange", "code": "    'OOO', r'(?P<ordinal>[0123]\\d\\d)').replace(\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "3119", "colour": "orange", "code": "    'CC', r'(?P<century>\\d\\d$)')\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "3120", "colour": "orange", "code": "    + r'(T?(?P<hour>\\d{2}):(?P<minute>\\d{2})'\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "3121", "colour": "orange", "code": "    + r'(:(?P<second>\\d{2}))?'\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "3122", "colour": "orange", "code": "    + r'(\\.(?P<fracsecond>\\d+))?'\n", "error": "none", "author": "tom@organisms.be"}, {"index": "3123", "colour": "orange", "code": "    + r'(?P<tz>[+-](?P<tzhour>\\d{2})(:(?P<tzmin>\\d{2}))?|Z)?)?'\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "3124", "colour": "orange", "code": "    for tmpl in _iso8601_tmpl]\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "3125", "colour": "orange", "code": "try:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "3126", "colour": "green", "code": "    del tmpl\n", "error": "W", "author": "tom@organisms.be"}, {"index": "3127", "colour": "orange", "code": "except NameError:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "3128", "colour": "orange", "code": "    pass\n", "error": "none", "author": "tom@organisms.be"}, {"index": "3129", "colour": "orange", "code": "_iso8601_matches = [re.compile(regex).match for regex in _iso8601_re]\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "3130", "colour": "orange", "code": "try:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "3131", "colour": "green", "code": "    del regex\n", "error": "W", "author": "tom@organisms.be"}, {"index": "3132", "colour": "orange", "code": "except NameError:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "3133", "colour": "orange", "code": "    pass\n", "error": "none", "author": "tom@organisms.be"}, {"index": "3134", "colour": "blue", "code": "def _parse_date_iso8601(dateString):\n", "error": "R", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "3135", "colour": "orange", "code": "    '''Parse a variety of ISO-8601-compatible formats like 20040105'''\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "3136", "colour": "orange", "code": "    m = None\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "3137", "colour": "orange", "code": "    for _iso8601_match in _iso8601_matches:\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "3138", "colour": "orange", "code": "        m = _iso8601_match(dateString)\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "3139", "colour": "orange", "code": "        if m:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "3140", "colour": "orange", "code": "            break\n", "error": "none", "author": "tom@organisms.be"}, {"index": "3141", "colour": "orange", "code": "    if not m:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "3142", "colour": "orange", "code": "        return\n", "error": "none", "author": "tom@organisms.be"}, {"index": "3143", "colour": "orange", "code": "    if m.span() == (0, 0):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "3144", "colour": "orange", "code": "        return\n", "error": "none", "author": "tom@organisms.be"}, {"index": "3145", "colour": "orange", "code": "    params = m.groupdict()\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "3146", "colour": "orange", "code": "    ordinal = params.get('ordinal', 0)\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "3147", "colour": "orange", "code": "    if ordinal:\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "3148", "colour": "orange", "code": "        ordinal = int(ordinal)\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "3149", "colour": "orange", "code": "    else:\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "3150", "colour": "orange", "code": "        ordinal = 0\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "3151", "colour": "orange", "code": "    year = params.get('year', '--')\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "3152", "colour": "orange", "code": "    if not year or year == '--':\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "3153", "colour": "orange", "code": "        year = time.gmtime()[0]\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "3154", "colour": "orange", "code": "    elif len(year) == 2:\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "3155", "colour": "orange", "code": "        # ISO 8601 assumes current century, i.e. 93 -> 2093, NOT 1993\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "3156", "colour": "orange", "code": "        year = 100 * int(time.gmtime()[0] / 100) + int(year)\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "3157", "colour": "orange", "code": "    else:\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "3158", "colour": "orange", "code": "        year = int(year)\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "3159", "colour": "orange", "code": "    month = params.get('month', '-')\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "3160", "colour": "orange", "code": "    if not month or month == '-':\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "3161", "colour": "orange", "code": "        # ordinals are NOT normalized by mktime, we simulate them\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "3162", "colour": "orange", "code": "        # by setting month=1, day=ordinal\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "3163", "colour": "orange", "code": "        if ordinal:\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "3164", "colour": "orange", "code": "            month = 1\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "3165", "colour": "orange", "code": "        else:\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "3166", "colour": "orange", "code": "            month = time.gmtime()[1]\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "3167", "colour": "orange", "code": "    month = int(month)\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "3168", "colour": "orange", "code": "    day = params.get('day', 0)\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "3169", "colour": "orange", "code": "    if not day:\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "3170", "colour": "orange", "code": "        # see above\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "3171", "colour": "orange", "code": "        if ordinal:\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "3172", "colour": "orange", "code": "            day = ordinal\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "3173", "colour": "orange", "code": "        elif params.get('century', 0) or \\\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "3174", "colour": "orange", "code": "                 params.get('year', 0) or params.get('month', 0):\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "3175", "colour": "orange", "code": "            day = 1\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "3176", "colour": "orange", "code": "        else:\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "3177", "colour": "orange", "code": "            day = time.gmtime()[2]\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "3178", "colour": "orange", "code": "    else:\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "3179", "colour": "orange", "code": "        day = int(day)\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "3180", "colour": "orange", "code": "    # special case of the century - is the first year of the 21st century\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "3181", "colour": "orange", "code": "    # 2000 or 2001 ? The debate goes on...\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "3182", "colour": "orange", "code": "    if 'century' in params:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "3183", "colour": "orange", "code": "        year = (int(params['century']) - 1) * 100 + 1\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "3184", "colour": "orange", "code": "    # in ISO 8601 most fields are optional\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "3185", "colour": "orange", "code": "    for field in ['hour', 'minute', 'second', 'tzhour', 'tzmin']:\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "3186", "colour": "orange", "code": "        if not params.get(field, None):\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "3187", "colour": "orange", "code": "            params[field] = 0\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "3188", "colour": "orange", "code": "    hour = int(params.get('hour', 0))\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "3189", "colour": "orange", "code": "    minute = int(params.get('minute', 0))\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "3190", "colour": "orange", "code": "    second = int(float(params.get('second', 0)))\n", "error": "none", "author": "tom@organisms.be"}, {"index": "3191", "colour": "orange", "code": "    # weekday is normalized by mktime(), we can ignore it\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "3192", "colour": "orange", "code": "    weekday = 0\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "3193", "colour": "orange", "code": "    daylight_savings_flag = -1\n", "error": "none", "author": "tom@organisms.be"}, {"index": "3194", "colour": "orange", "code": "    tm = [year, month, day, hour, minute, second, weekday,\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "3195", "colour": "orange", "code": "          ordinal, daylight_savings_flag]\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "3196", "colour": "orange", "code": "    # ISO 8601 time zone adjustments\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "3197", "colour": "orange", "code": "    tz = params.get('tz')\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "3198", "colour": "orange", "code": "    if tz and tz != 'Z':\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "3199", "colour": "orange", "code": "        if tz[0] == '-':\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "3200", "colour": "orange", "code": "            tm[3] += int(params.get('tzhour', 0))\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "3201", "colour": "orange", "code": "            tm[4] += int(params.get('tzmin', 0))\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "3202", "colour": "orange", "code": "        elif tz[0] == '+':\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "3203", "colour": "orange", "code": "            tm[3] -= int(params.get('tzhour', 0))\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "3204", "colour": "orange", "code": "            tm[4] -= int(params.get('tzmin', 0))\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "3205", "colour": "orange", "code": "        else:\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "3206", "colour": "orange", "code": "            return None\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "3207", "colour": "orange", "code": "    # Python's time.mktime() is a wrapper around the ANSI C mktime(3c)\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "3208", "colour": "orange", "code": "    # which is guaranteed to normalize d/m/y/h/m/s.\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "3209", "colour": "orange", "code": "    # Many implementations have bugs, but we'll pretend they don't.\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "3210", "colour": "orange", "code": "    return time.localtime(time.mktime(tuple(tm)))\n", "error": "none", "author": "tom@organisms.be"}, {"index": "3211", "colour": "orange", "code": "registerDateHandler(_parse_date_iso8601)\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "3212", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "3213", "colour": "orange", "code": "# 8-bit date handling routines written by ytrewq1.\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "3214", "colour": "orange", "code": "_korean_year  = u'\\ub144' # b3e2 in euc-kr\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "3215", "colour": "orange", "code": "_korean_month = u'\\uc6d4' # bff9 in euc-kr\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "3216", "colour": "orange", "code": "_korean_day   = u'\\uc77c' # c0cf in euc-kr\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "3217", "colour": "orange", "code": "_korean_am    = u'\\uc624\\uc804' # bfc0 c0fc in euc-kr\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "3218", "colour": "orange", "code": "_korean_pm    = u'\\uc624\\ud6c4' # bfc0 c8c4 in euc-kr\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "3219", "colour": "orange", "code": "\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "3220", "colour": "orange", "code": "_korean_onblog_date_re = \\\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "3221", "colour": "green", "code": "    re.compile('(\\d{4})%s\\s+(\\d{2})%s\\s+(\\d{2})%s\\s+(\\d{2}):(\\d{2}):(\\d{2})' % \\\n", "error": "W", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "3222", "colour": "orange", "code": "               (_korean_year, _korean_month, _korean_day))\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "3223", "colour": "orange", "code": "_korean_nate_date_re = \\\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "3224", "colour": "green", "code": "    re.compile(u'(\\d{4})-(\\d{2})-(\\d{2})\\s+(%s|%s)\\s+(\\d{,2}):(\\d{,2}):(\\d{,2})' % \\\n", "error": "W", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "3225", "colour": "orange", "code": "               (_korean_am, _korean_pm))\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "3226", "colour": "orange", "code": "def _parse_date_onblog(dateString):\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "3227", "colour": "orange", "code": "    '''Parse a string according to the OnBlog 8-bit date format'''\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "3228", "colour": "orange", "code": "    m = _korean_onblog_date_re.match(dateString)\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "3229", "colour": "orange", "code": "    if not m:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "3230", "colour": "orange", "code": "        return\n", "error": "none", "author": "tom@organisms.be"}, {"index": "3231", "colour": "orange", "code": "    w3dtfdate = '%(year)s-%(month)s-%(day)sT%(hour)s:%(minute)s:%(second)s%(zonediff)s' % \\\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "3232", "colour": "orange", "code": "                {'year': m.group(1), 'month': m.group(2), 'day': m.group(3),\\\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "3233", "colour": "orange", "code": "                 'hour': m.group(4), 'minute': m.group(5), 'second': m.group(6),\\\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "3234", "colour": "orange", "code": "                 'zonediff': '+09:00'}\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "3235", "colour": "orange", "code": "    return _parse_date_w3dtf(w3dtfdate)\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "3236", "colour": "orange", "code": "registerDateHandler(_parse_date_onblog)\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "3237", "colour": "orange", "code": "\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "3238", "colour": "orange", "code": "def _parse_date_nate(dateString):\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "3239", "colour": "orange", "code": "    '''Parse a string according to the Nate 8-bit date format'''\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "3240", "colour": "orange", "code": "    m = _korean_nate_date_re.match(dateString)\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "3241", "colour": "orange", "code": "    if not m:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "3242", "colour": "orange", "code": "        return\n", "error": "none", "author": "tom@organisms.be"}, {"index": "3243", "colour": "orange", "code": "    hour = int(m.group(5))\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "3244", "colour": "orange", "code": "    ampm = m.group(4)\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "3245", "colour": "orange", "code": "    if (ampm == _korean_pm):\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "3246", "colour": "orange", "code": "        hour += 12\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "3247", "colour": "orange", "code": "    hour = str(hour)\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "3248", "colour": "orange", "code": "    if len(hour) == 1:\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "3249", "colour": "orange", "code": "        hour = '0' + hour\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "3250", "colour": "orange", "code": "    w3dtfdate = '%(year)s-%(month)s-%(day)sT%(hour)s:%(minute)s:%(second)s%(zonediff)s' % \\\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "3251", "colour": "orange", "code": "                {'year': m.group(1), 'month': m.group(2), 'day': m.group(3),\\\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "3252", "colour": "orange", "code": "                 'hour': hour, 'minute': m.group(6), 'second': m.group(7),\\\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "3253", "colour": "orange", "code": "                 'zonediff': '+09:00'}\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "3254", "colour": "orange", "code": "    return _parse_date_w3dtf(w3dtfdate)\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "3255", "colour": "orange", "code": "registerDateHandler(_parse_date_nate)\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "3256", "colour": "orange", "code": "\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "3257", "colour": "orange", "code": "# Unicode strings for Greek date strings\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "3258", "colour": "orange", "code": "_greek_months = \\\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "3259", "colour": "orange", "code": "  { \\\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "3260", "colour": "orange", "code": "   u'\\u0399\\u03b1\\u03bd': u'Jan',       # c9e1ed in iso-8859-7\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "3261", "colour": "orange", "code": "   u'\\u03a6\\u03b5\\u03b2': u'Feb',       # d6e5e2 in iso-8859-7\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "3262", "colour": "orange", "code": "   u'\\u039c\\u03ac\\u03ce': u'Mar',       # ccdcfe in iso-8859-7\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "3263", "colour": "orange", "code": "   u'\\u039c\\u03b1\\u03ce': u'Mar',       # cce1fe in iso-8859-7\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "3264", "colour": "orange", "code": "   u'\\u0391\\u03c0\\u03c1': u'Apr',       # c1f0f1 in iso-8859-7\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "3265", "colour": "orange", "code": "   u'\\u039c\\u03ac\\u03b9': u'May',       # ccdce9 in iso-8859-7\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "3266", "colour": "orange", "code": "   u'\\u039c\\u03b1\\u03ca': u'May',       # cce1fa in iso-8859-7\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "3267", "colour": "orange", "code": "   u'\\u039c\\u03b1\\u03b9': u'May',       # cce1e9 in iso-8859-7\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "3268", "colour": "orange", "code": "   u'\\u0399\\u03bf\\u03cd\\u03bd': u'Jun', # c9effded in iso-8859-7\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "3269", "colour": "orange", "code": "   u'\\u0399\\u03bf\\u03bd': u'Jun',       # c9efed in iso-8859-7\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "3270", "colour": "orange", "code": "   u'\\u0399\\u03bf\\u03cd\\u03bb': u'Jul', # c9effdeb in iso-8859-7\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "3271", "colour": "orange", "code": "   u'\\u0399\\u03bf\\u03bb': u'Jul',       # c9f9eb in iso-8859-7\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "3272", "colour": "orange", "code": "   u'\\u0391\\u03cd\\u03b3': u'Aug',       # c1fde3 in iso-8859-7\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "3273", "colour": "orange", "code": "   u'\\u0391\\u03c5\\u03b3': u'Aug',       # c1f5e3 in iso-8859-7\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "3274", "colour": "orange", "code": "   u'\\u03a3\\u03b5\\u03c0': u'Sep',       # d3e5f0 in iso-8859-7\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "3275", "colour": "orange", "code": "   u'\\u039f\\u03ba\\u03c4': u'Oct',       # cfeaf4 in iso-8859-7\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "3276", "colour": "orange", "code": "   u'\\u039d\\u03bf\\u03ad': u'Nov',       # cdefdd in iso-8859-7\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "3277", "colour": "orange", "code": "   u'\\u039d\\u03bf\\u03b5': u'Nov',       # cdefe5 in iso-8859-7\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "3278", "colour": "orange", "code": "   u'\\u0394\\u03b5\\u03ba': u'Dec',       # c4e5ea in iso-8859-7\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "3279", "colour": "orange", "code": "  }\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "3280", "colour": "orange", "code": "\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "3281", "colour": "orange", "code": "_greek_wdays = \\\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "3282", "colour": "orange", "code": "  { \\\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "3283", "colour": "orange", "code": "   u'\\u039a\\u03c5\\u03c1': u'Sun', # caf5f1 in iso-8859-7\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "3284", "colour": "orange", "code": "   u'\\u0394\\u03b5\\u03c5': u'Mon', # c4e5f5 in iso-8859-7\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "3285", "colour": "orange", "code": "   u'\\u03a4\\u03c1\\u03b9': u'Tue', # d4f1e9 in iso-8859-7\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "3286", "colour": "orange", "code": "   u'\\u03a4\\u03b5\\u03c4': u'Wed', # d4e5f4 in iso-8859-7\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "3287", "colour": "orange", "code": "   u'\\u03a0\\u03b5\\u03bc': u'Thu', # d0e5ec in iso-8859-7\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "3288", "colour": "orange", "code": "   u'\\u03a0\\u03b1\\u03c1': u'Fri', # d0e1f1 in iso-8859-7\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "3289", "colour": "orange", "code": "   u'\\u03a3\\u03b1\\u03b2': u'Sat', # d3e1e2 in iso-8859-7\n", "error": "none", "author": "tom@organisms.be"}, {"index": "3290", "colour": "orange", "code": "  }\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "3291", "colour": "orange", "code": "\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "3292", "colour": "orange", "code": "_greek_date_format_re = \\\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "3293", "colour": "green", "code": "    re.compile(u'([^,]+),\\s+(\\d{2})\\s+([^\\s]+)\\s+(\\d{4})\\s+(\\d{2}):(\\d{2}):(\\d{2})\\s+([^\\s]+)')\n", "error": "W", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "3294", "colour": "orange", "code": "\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "3295", "colour": "orange", "code": "def _parse_date_greek(dateString):\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "3296", "colour": "orange", "code": "    '''Parse a string according to a Greek 8-bit date format.'''\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "3297", "colour": "orange", "code": "    m = _greek_date_format_re.match(dateString)\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "3298", "colour": "orange", "code": "    if not m:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "3299", "colour": "orange", "code": "        return\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "3300", "colour": "orange", "code": "    wday = _greek_wdays[m.group(1)]\n", "error": "none", "author": "tom@organisms.be"}, {"index": "3301", "colour": "orange", "code": "    month = _greek_months[m.group(3)]\n", "error": "none", "author": "tom@organisms.be"}, {"index": "3302", "colour": "orange", "code": "    rfc822date = '%(wday)s, %(day)s %(month)s %(year)s %(hour)s:%(minute)s:%(second)s %(zonediff)s' % \\\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "3303", "colour": "orange", "code": "                 {'wday': wday, 'day': m.group(2), 'month': month, 'year': m.group(4),\\\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "3304", "colour": "orange", "code": "                  'hour': m.group(5), 'minute': m.group(6), 'second': m.group(7),\\\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "3305", "colour": "orange", "code": "                  'zonediff': m.group(8)}\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "3306", "colour": "orange", "code": "    return _parse_date_rfc822(rfc822date)\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "3307", "colour": "orange", "code": "registerDateHandler(_parse_date_greek)\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "3308", "colour": "orange", "code": "\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "3309", "colour": "orange", "code": "# Unicode strings for Hungarian date strings\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "3310", "colour": "orange", "code": "_hungarian_months = \\\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "3311", "colour": "orange", "code": "  { \\\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "3312", "colour": "orange", "code": "    u'janu\\u00e1r':   u'01',  # e1 in iso-8859-2\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "3313", "colour": "orange", "code": "    u'febru\\u00e1ri': u'02',  # e1 in iso-8859-2\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "3314", "colour": "orange", "code": "    u'm\\u00e1rcius':  u'03',  # e1 in iso-8859-2\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "3315", "colour": "orange", "code": "    u'\\u00e1prilis':  u'04',  # e1 in iso-8859-2\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "3316", "colour": "orange", "code": "    u'm\\u00e1ujus':   u'05',  # e1 in iso-8859-2\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "3317", "colour": "orange", "code": "    u'j\\u00fanius':   u'06',  # fa in iso-8859-2\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "3318", "colour": "orange", "code": "    u'j\\u00falius':   u'07',  # fa in iso-8859-2\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "3319", "colour": "orange", "code": "    u'augusztus':     u'08',\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "3320", "colour": "orange", "code": "    u'szeptember':    u'09',\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "3321", "colour": "orange", "code": "    u'okt\\u00f3ber':  u'10',  # f3 in iso-8859-2\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "3322", "colour": "orange", "code": "    u'november':      u'11',\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "3323", "colour": "orange", "code": "    u'december':      u'12',\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "3324", "colour": "orange", "code": "  }\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "3325", "colour": "orange", "code": "\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "3326", "colour": "orange", "code": "_hungarian_date_format_re = \\\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "3327", "colour": "green", "code": "  re.compile(u'(\\d{4})-([^-]+)-(\\d{,2})T(\\d{,2}):(\\d{2})((\\+|-)(\\d{,2}:\\d{2}))')\n", "error": "W", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "3328", "colour": "orange", "code": "\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "3329", "colour": "orange", "code": "def _parse_date_hungarian(dateString):\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "3330", "colour": "orange", "code": "    '''Parse a string according to a Hungarian 8-bit date format.'''\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "3331", "colour": "orange", "code": "    m = _hungarian_date_format_re.match(dateString)\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "3332", "colour": "orange", "code": "    if not m or m.group(2) not in _hungarian_months:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "3333", "colour": "orange", "code": "        return None\n", "error": "none", "author": "tom@organisms.be"}, {"index": "3334", "colour": "orange", "code": "    month = _hungarian_months[m.group(2)]\n", "error": "none", "author": "tom@organisms.be"}, {"index": "3335", "colour": "orange", "code": "    day = m.group(3)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "3336", "colour": "orange", "code": "    if len(day) == 1:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "3337", "colour": "orange", "code": "        day = '0' + day\n", "error": "none", "author": "tom@organisms.be"}, {"index": "3338", "colour": "orange", "code": "    hour = m.group(4)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "3339", "colour": "orange", "code": "    if len(hour) == 1:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "3340", "colour": "orange", "code": "        hour = '0' + hour\n", "error": "none", "author": "tom@organisms.be"}, {"index": "3341", "colour": "orange", "code": "    w3dtfdate = '%(year)s-%(month)s-%(day)sT%(hour)s:%(minute)s%(zonediff)s' % \\\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "3342", "colour": "orange", "code": "                {'year': m.group(1), 'month': month, 'day': day,\\\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "3343", "colour": "orange", "code": "                 'hour': hour, 'minute': m.group(5),\\\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "3344", "colour": "orange", "code": "                 'zonediff': m.group(6)}\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "3345", "colour": "orange", "code": "    return _parse_date_w3dtf(w3dtfdate)\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "3346", "colour": "orange", "code": "registerDateHandler(_parse_date_hungarian)\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "3347", "colour": "orange", "code": "\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "3348", "colour": "orange", "code": "# W3DTF-style date parsing adapted from PyXML xml.utils.iso8601, written by\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "3349", "colour": "orange", "code": "# Drake and licensed under the Python license.  Removed all range checking\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "3350", "colour": "orange", "code": "# for month, day, hour, minute, and second, since mktime will normalize\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "3351", "colour": "orange", "code": "# these later\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "3352", "colour": "orange", "code": "# Modified to also support MSSQL-style datetimes as defined at:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "3353", "colour": "orange", "code": "# http://msdn.microsoft.com/en-us/library/ms186724.aspx\n", "error": "none", "author": "tom@organisms.be"}, {"index": "3354", "colour": "orange", "code": "# (which basically means allowing a space as a date/time/timezone separator)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "3355", "colour": "blue", "code": "def _parse_date_w3dtf(dateString):\n", "error": "R", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "3356", "colour": "blue", "code": "    def __extract_date(m):\n", "error": "R", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "3357", "colour": "orange", "code": "        year = int(m.group('year'))\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "3358", "colour": "orange", "code": "        if year < 100:\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "3359", "colour": "orange", "code": "            year = 100 * int(time.gmtime()[0] / 100) + int(year)\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "3360", "colour": "orange", "code": "        if year < 1000:\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "3361", "colour": "orange", "code": "            return 0, 0, 0\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "3362", "colour": "orange", "code": "        julian = m.group('julian')\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "3363", "colour": "orange", "code": "        if julian:\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "3364", "colour": "orange", "code": "            julian = int(julian)\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "3365", "colour": "orange", "code": "            month = julian / 30 + 1\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "3366", "colour": "orange", "code": "            day = julian % 30 + 1\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "3367", "colour": "orange", "code": "            jday = None\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "3368", "colour": "orange", "code": "            while jday != julian:\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "3369", "colour": "orange", "code": "                t = time.mktime((year, month, day, 0, 0, 0, 0, 0, 0))\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "3370", "colour": "orange", "code": "                jday = time.gmtime(t)[-2]\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "3371", "colour": "orange", "code": "                diff = abs(jday - julian)\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "3372", "colour": "orange", "code": "                if jday > julian:\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "3373", "colour": "orange", "code": "                    if diff < day:\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "3374", "colour": "orange", "code": "                        day = day - diff\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "3375", "colour": "orange", "code": "                    else:\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "3376", "colour": "orange", "code": "                        month = month - 1\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "3377", "colour": "orange", "code": "                        day = 31\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "3378", "colour": "orange", "code": "                elif jday < julian:\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "3379", "colour": "orange", "code": "                    if day + diff < 28:\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "3380", "colour": "orange", "code": "                        day = day + diff\n", "error": "none", "author": "tom@organisms.be"}, {"index": "3381", "colour": "orange", "code": "                    else:\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "3382", "colour": "orange", "code": "                        month = month + 1\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "3383", "colour": "orange", "code": "            return year, month, day\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "3384", "colour": "orange", "code": "        month = m.group('month')\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "3385", "colour": "orange", "code": "        day = 1\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "3386", "colour": "orange", "code": "        if month is None:\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "3387", "colour": "orange", "code": "            month = 1\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "3388", "colour": "orange", "code": "        else:\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "3389", "colour": "orange", "code": "            month = int(month)\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "3390", "colour": "orange", "code": "            day = m.group('day')\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "3391", "colour": "orange", "code": "            if day:\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "3392", "colour": "orange", "code": "                day = int(day)\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "3393", "colour": "orange", "code": "            else:\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "3394", "colour": "orange", "code": "                day = 1\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "3395", "colour": "orange", "code": "        return year, month, day\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "3396", "colour": "orange", "code": "\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "3397", "colour": "orange", "code": "    def __extract_time(m):\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "3398", "colour": "orange", "code": "        if not m:\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "3399", "colour": "orange", "code": "            return 0, 0, 0\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "3400", "colour": "orange", "code": "        hours = m.group('hours')\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "3401", "colour": "orange", "code": "        if not hours:\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "3402", "colour": "orange", "code": "            return 0, 0, 0\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "3403", "colour": "orange", "code": "        hours = int(hours)\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "3404", "colour": "orange", "code": "        minutes = int(m.group('minutes'))\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "3405", "colour": "orange", "code": "        seconds = m.group('seconds')\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "3406", "colour": "orange", "code": "        if seconds:\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "3407", "colour": "orange", "code": "            seconds = int(seconds)\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "3408", "colour": "orange", "code": "        else:\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "3409", "colour": "orange", "code": "            seconds = 0\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "3410", "colour": "orange", "code": "        return hours, minutes, seconds\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "3411", "colour": "orange", "code": "\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "3412", "colour": "orange", "code": "    def __extract_tzd(m):\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "3413", "colour": "orange", "code": "        '''Return the Time Zone Designator as an offset in seconds from UTC.'''\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "3414", "colour": "orange", "code": "        if not m:\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "3415", "colour": "orange", "code": "            return 0\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "3416", "colour": "orange", "code": "        tzd = m.group('tzd')\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "3417", "colour": "orange", "code": "        if not tzd:\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "3418", "colour": "orange", "code": "            return 0\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "3419", "colour": "orange", "code": "        if tzd == 'Z':\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "3420", "colour": "orange", "code": "            return 0\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "3421", "colour": "orange", "code": "        hours = int(m.group('tzdhours'))\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "3422", "colour": "orange", "code": "        minutes = m.group('tzdminutes')\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "3423", "colour": "orange", "code": "        if minutes:\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "3424", "colour": "orange", "code": "            minutes = int(minutes)\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "3425", "colour": "orange", "code": "        else:\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "3426", "colour": "orange", "code": "            minutes = 0\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "3427", "colour": "orange", "code": "        offset = (hours*60 + minutes) * 60\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "3428", "colour": "orange", "code": "        if tzd[0] == '+':\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "3429", "colour": "orange", "code": "            return -offset\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "3430", "colour": "orange", "code": "        return offset\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "3431", "colour": "orange", "code": "\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "3432", "colour": "green", "code": "    __date_re = ('(?P<year>\\d\\d\\d\\d)'\n", "error": "W", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "3433", "colour": "orange", "code": "                 '(?:(?P<dsep>-|)'\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "3434", "colour": "green", "code": "                 '(?:(?P<month>\\d\\d)(?:(?P=dsep)(?P<day>\\d\\d))?'\n", "error": "W", "author": "tom@organisms.be"}, {"index": "3435", "colour": "green", "code": "                 '|(?P<julian>\\d\\d\\d)))?')\n", "error": "W", "author": "tom@organisms.be"}, {"index": "3436", "colour": "green", "code": "    __tzd_re = ' ?(?P<tzd>[-+](?P<tzdhours>\\d\\d)(?::?(?P<tzdminutes>\\d\\d))|Z)?'\n", "error": "W", "author": "tom@organisms.be"}, {"index": "3437", "colour": "green", "code": "    __time_re = ('(?P<hours>\\d\\d)(?P<tsep>:|)(?P<minutes>\\d\\d)'\n", "error": "W", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "3438", "colour": "green", "code": "                 '(?:(?P=tsep)(?P<seconds>\\d\\d)(?:[.,]\\d+)?)?'\n", "error": "W", "author": "tom@organisms.be"}, {"index": "3439", "colour": "orange", "code": "                 + __tzd_re)\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "3440", "colour": "orange", "code": "    __datetime_re = '%s(?:[T ]%s)?' % (__date_re, __time_re)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "3441", "colour": "orange", "code": "    __datetime_rx = re.compile(__datetime_re)\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "3442", "colour": "orange", "code": "    m = __datetime_rx.match(dateString)\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "3443", "colour": "orange", "code": "    if (m is None) or (m.group() != dateString):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "3444", "colour": "orange", "code": "        return\n", "error": "none", "author": "tom@organisms.be"}, {"index": "3445", "colour": "orange", "code": "    gmt = __extract_date(m) + __extract_time(m) + (0, 0, 0)\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "3446", "colour": "orange", "code": "    if gmt[0] == 0:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "3447", "colour": "orange", "code": "        return\n", "error": "none", "author": "tom@organisms.be"}, {"index": "3448", "colour": "orange", "code": "    return time.gmtime(time.mktime(gmt) + __extract_tzd(m) - time.timezone)\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "3449", "colour": "orange", "code": "registerDateHandler(_parse_date_w3dtf)\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "3450", "colour": "orange", "code": "\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "3451", "colour": "orange", "code": "# Define the strings used by the RFC822 datetime parser\n", "error": "none", "author": "tom@organisms.be"}, {"index": "3452", "colour": "orange", "code": "_rfc822_months = ['jan', 'feb', 'mar', 'apr', 'may', 'jun',\n", "error": "none", "author": "tom@organisms.be"}, {"index": "3453", "colour": "orange", "code": "          'jul', 'aug', 'sep', 'oct', 'nov', 'dec']\n", "error": "none", "author": "tom@organisms.be"}, {"index": "3454", "colour": "orange", "code": "_rfc822_daynames = ['mon', 'tue', 'wed', 'thu', 'fri', 'sat', 'sun']\n", "error": "none", "author": "tom@organisms.be"}, {"index": "3455", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "3456", "colour": "orange", "code": "# Only the first three letters of the month name matter\n", "error": "none", "author": "tom@organisms.be"}, {"index": "3457", "colour": "orange", "code": "_rfc822_month = \"(?P<month>%s)(?:[a-z]*,?)\" % ('|'.join(_rfc822_months))\n", "error": "none", "author": "tom@organisms.be"}, {"index": "3458", "colour": "orange", "code": "# The year may be 2 or 4 digits; capture the century if it exists\n", "error": "none", "author": "tom@organisms.be"}, {"index": "3459", "colour": "green", "code": "_rfc822_year = \"(?P<year>(?:\\d{2})?\\d{2})\"\n", "error": "W", "author": "tom@organisms.be"}, {"index": "3460", "colour": "green", "code": "_rfc822_day = \"(?P<day> *\\d{1,2})\"\n", "error": "W", "author": "tom@organisms.be"}, {"index": "3461", "colour": "orange", "code": "_rfc822_date = \"%s %s %s\" % (_rfc822_day, _rfc822_month, _rfc822_year)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "3462", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "3463", "colour": "green", "code": "_rfc822_hour = \"(?P<hour>\\d{2}):(?P<minute>\\d{2})(?::(?P<second>\\d{2}))?\"\n", "error": "W", "author": "tom@organisms.be"}, {"index": "3464", "colour": "green", "code": "_rfc822_tz = \"(?P<tz>ut|gmt(?:[+-]\\d{2}:\\d{2})?|[aecmp][sd]?t|[zamny]|[+-]\\d{4})\"\n", "error": "W", "author": "tom@organisms.be"}, {"index": "3465", "colour": "orange", "code": "_rfc822_tznames = {\n", "error": "none", "author": "tom@organisms.be"}, {"index": "3466", "colour": "orange", "code": "    'ut': 0, 'gmt': 0, 'z': 0,\n", "error": "none", "author": "tom@organisms.be"}, {"index": "3467", "colour": "orange", "code": "    'adt': -3, 'ast': -4, 'at': -4,\n", "error": "none", "author": "tom@organisms.be"}, {"index": "3468", "colour": "orange", "code": "    'edt': -4, 'est': -5, 'et': -5,\n", "error": "none", "author": "tom@organisms.be"}, {"index": "3469", "colour": "orange", "code": "    'cdt': -5, 'cst': -6, 'ct': -6,\n", "error": "none", "author": "tom@organisms.be"}, {"index": "3470", "colour": "orange", "code": "    'mdt': -6, 'mst': -7, 'mt': -7,\n", "error": "none", "author": "tom@organisms.be"}, {"index": "3471", "colour": "orange", "code": "    'pdt': -7, 'pst': -8, 'pt': -8,\n", "error": "none", "author": "tom@organisms.be"}, {"index": "3472", "colour": "orange", "code": "    'a': -1, 'n': 1,\n", "error": "none", "author": "tom@organisms.be"}, {"index": "3473", "colour": "orange", "code": "    'm': -12, 'y': 12,\n", "error": "none", "author": "tom@organisms.be"}, {"index": "3474", "colour": "orange", "code": " }\n", "error": "none", "author": "tom@organisms.be"}, {"index": "3475", "colour": "orange", "code": "# The timezone may be prefixed by 'Etc/'\n", "error": "none", "author": "tom@organisms.be"}, {"index": "3476", "colour": "orange", "code": "_rfc822_time = \"%s (?:etc/)?%s\" % (_rfc822_hour, _rfc822_tz)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "3477", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "3478", "colour": "orange", "code": "_rfc822_dayname = \"(?P<dayname>%s)\" % ('|'.join(_rfc822_daynames))\n", "error": "none", "author": "tom@organisms.be"}, {"index": "3479", "colour": "orange", "code": "_rfc822_match = re.compile(\n", "error": "none", "author": "tom@organisms.be"}, {"index": "3480", "colour": "orange", "code": "    \"(?:%s, )?%s(?: %s)?\" % (_rfc822_dayname, _rfc822_date, _rfc822_time)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "3481", "colour": "orange", "code": ").match\n", "error": "none", "author": "tom@organisms.be"}, {"index": "3482", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "3483", "colour": "orange", "code": "def _parse_date_rfc822(dt):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "3484", "colour": "orange", "code": "    \"\"\"Parse RFC 822 dates and times, with one minor\n", "error": "none", "author": "tom@organisms.be"}, {"index": "3485", "colour": "orange", "code": "    difference: years may be 4DIGIT or 2DIGIT.\n", "error": "none", "author": "tom@organisms.be"}, {"index": "3486", "colour": "orange", "code": "    http://tools.ietf.org/html/rfc822#section-5\"\"\"\n", "error": "none", "author": "tom@organisms.be"}, {"index": "3487", "colour": "orange", "code": "    try:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "3488", "colour": "orange", "code": "        m = _rfc822_match(dt.lower()).groupdict(0)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "3489", "colour": "orange", "code": "    except AttributeError:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "3490", "colour": "orange", "code": "        return None\n", "error": "none", "author": "tom@organisms.be"}, {"index": "3491", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "3492", "colour": "orange", "code": "    # Calculate a date and timestamp\n", "error": "none", "author": "tom@organisms.be"}, {"index": "3493", "colour": "orange", "code": "    for k in ('year', 'day', 'hour', 'minute', 'second'):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "3494", "colour": "orange", "code": "        m[k] = int(m[k])\n", "error": "none", "author": "tom@organisms.be"}, {"index": "3495", "colour": "orange", "code": "    m['month'] = _rfc822_months.index(m['month']) + 1\n", "error": "none", "author": "tom@organisms.be"}, {"index": "3496", "colour": "orange", "code": "    # If the year is 2 digits, assume everything in the 90's is the 1990's\n", "error": "none", "author": "tom@organisms.be"}, {"index": "3497", "colour": "orange", "code": "    if m['year'] < 100:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "3498", "colour": "orange", "code": "        m['year'] += (1900, 2000)[m['year'] < 90]\n", "error": "none", "author": "tom@organisms.be"}, {"index": "3499", "colour": "orange", "code": "    stamp = datetime.datetime(*[m[i] for i in \n", "error": "none", "author": "tom@organisms.be"}, {"index": "3500", "colour": "orange", "code": "                ('year', 'month', 'day', 'hour', 'minute', 'second')])\n", "error": "none", "author": "tom@organisms.be"}, {"index": "3501", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "3502", "colour": "orange", "code": "    # Use the timezone information to calculate the difference between\n", "error": "none", "author": "tom@organisms.be"}, {"index": "3503", "colour": "orange", "code": "    # the given date and timestamp and Universal Coordinated Time\n", "error": "none", "author": "tom@organisms.be"}, {"index": "3504", "colour": "orange", "code": "    tzhour = 0\n", "error": "none", "author": "tom@organisms.be"}, {"index": "3505", "colour": "orange", "code": "    tzmin = 0\n", "error": "none", "author": "tom@organisms.be"}, {"index": "3506", "colour": "orange", "code": "    if m['tz'] and m['tz'].startswith('gmt'):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "3507", "colour": "orange", "code": "        # Handle GMT and GMT+hh:mm timezone syntax (the trailing\n", "error": "none", "author": "tom@organisms.be"}, {"index": "3508", "colour": "orange", "code": "        # timezone info will be handled by the next `if` block)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "3509", "colour": "orange", "code": "        m['tz'] = ''.join(m['tz'][3:].split(':')) or 'gmt'\n", "error": "none", "author": "tom@organisms.be"}, {"index": "3510", "colour": "orange", "code": "    if not m['tz']:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "3511", "colour": "orange", "code": "        pass\n", "error": "none", "author": "tom@organisms.be"}, {"index": "3512", "colour": "orange", "code": "    elif m['tz'].startswith('+'):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "3513", "colour": "orange", "code": "        tzhour = int(m['tz'][1:3])\n", "error": "none", "author": "tom@organisms.be"}, {"index": "3514", "colour": "orange", "code": "        tzmin = int(m['tz'][3:])\n", "error": "none", "author": "tom@organisms.be"}, {"index": "3515", "colour": "orange", "code": "    elif m['tz'].startswith('-'):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "3516", "colour": "orange", "code": "        tzhour = int(m['tz'][1:3]) * -1\n", "error": "none", "author": "tom@organisms.be"}, {"index": "3517", "colour": "orange", "code": "        tzmin = int(m['tz'][3:]) * -1\n", "error": "none", "author": "tom@organisms.be"}, {"index": "3518", "colour": "orange", "code": "    else:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "3519", "colour": "orange", "code": "        tzhour = _rfc822_tznames[m['tz']]\n", "error": "none", "author": "tom@organisms.be"}, {"index": "3520", "colour": "orange", "code": "    delta = datetime.timedelta(0, 0, 0, 0, tzmin, tzhour)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "3521", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "3522", "colour": "orange", "code": "    # Return the date and timestamp in UTC\n", "error": "none", "author": "tom@organisms.be"}, {"index": "3523", "colour": "orange", "code": "    return (stamp - delta).utctimetuple()\n", "error": "none", "author": "tom@organisms.be"}, {"index": "3524", "colour": "orange", "code": "registerDateHandler(_parse_date_rfc822)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "3525", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "3526", "colour": "orange", "code": "def _parse_date_asctime(dt):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "3527", "colour": "orange", "code": "    \"\"\"Parse asctime-style dates\"\"\"\n", "error": "none", "author": "tom@organisms.be"}, {"index": "3528", "colour": "green", "code": "    dayname, month, day, remainder = dt.split(None, 3)\n", "error": "W", "author": "tom@organisms.be"}, {"index": "3529", "colour": "orange", "code": "    # Convert month and day into zero-padded integers\n", "error": "none", "author": "tom@organisms.be"}, {"index": "3530", "colour": "orange", "code": "    month = '%02i ' % (_rfc822_months.index(month.lower()) + 1)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "3531", "colour": "orange", "code": "    day = '%02i ' % (int(day),)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "3532", "colour": "orange", "code": "    dt = month + day + remainder\n", "error": "none", "author": "tom@organisms.be"}, {"index": "3533", "colour": "orange", "code": "    return time.strptime(dt, '%m %d %H:%M:%S %Y')[:-1] + (0, )\n", "error": "none", "author": "tom@organisms.be"}, {"index": "3534", "colour": "orange", "code": "registerDateHandler(_parse_date_asctime)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "3535", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "3536", "colour": "orange", "code": "def _parse_date_perforce(aDateString):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "3537", "colour": "orange", "code": "    \"\"\"parse a date in yyyy/mm/dd hh:mm:ss TTT format\"\"\"\n", "error": "none", "author": "tom@organisms.be"}, {"index": "3538", "colour": "orange", "code": "    # Fri, 2006/09/15 08:19:53 EDT\n", "error": "none", "author": "tom@organisms.be"}, {"index": "3539", "colour": "orange", "code": "    _my_date_pattern = re.compile( \\\n", "error": "none", "author": "tom@organisms.be"}, {"index": "3540", "colour": "orange", "code": "        r'(\\w{,3}), (\\d{,4})/(\\d{,2})/(\\d{2}) (\\d{,2}):(\\d{2}):(\\d{2}) (\\w{,3})')\n", "error": "none", "author": "tom@organisms.be"}, {"index": "3541", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "3542", "colour": "orange", "code": "    m = _my_date_pattern.search(aDateString)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "3543", "colour": "orange", "code": "    if m is None:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "3544", "colour": "orange", "code": "        return None\n", "error": "none", "author": "tom@organisms.be"}, {"index": "3545", "colour": "orange", "code": "    dow, year, month, day, hour, minute, second, tz = m.groups()\n", "error": "none", "author": "tom@organisms.be"}, {"index": "3546", "colour": "orange", "code": "    months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec']\n", "error": "none", "author": "tom@organisms.be"}, {"index": "3547", "colour": "orange", "code": "    dateString = \"%s, %s %s %s %s:%s:%s %s\" % (dow, day, months[int(month) - 1], year, hour, minute, second, tz)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "3548", "colour": "orange", "code": "    tm = rfc822.parsedate_tz(dateString)\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "3549", "colour": "orange", "code": "    if tm:\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "3550", "colour": "orange", "code": "        return time.gmtime(rfc822.mktime_tz(tm))\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "3551", "colour": "orange", "code": "registerDateHandler(_parse_date_perforce)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "3552", "colour": "orange", "code": "\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "3553", "colour": "orange", "code": "def _parse_date(dateString):\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "3554", "colour": "orange", "code": "    '''Parses a variety of date formats into a 9-tuple in GMT'''\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "3555", "colour": "orange", "code": "    if not dateString:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "3556", "colour": "orange", "code": "        return None\n", "error": "none", "author": "tom@organisms.be"}, {"index": "3557", "colour": "orange", "code": "    for handler in _date_handlers:\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "3558", "colour": "orange", "code": "        try:\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "3559", "colour": "orange", "code": "            date9tuple = handler(dateString)\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "3560", "colour": "orange", "code": "        except (KeyError, OverflowError, ValueError):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "3561", "colour": "orange", "code": "            continue\n", "error": "none", "author": "tom@organisms.be"}, {"index": "3562", "colour": "orange", "code": "        if not date9tuple:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "3563", "colour": "orange", "code": "            continue\n", "error": "none", "author": "tom@organisms.be"}, {"index": "3564", "colour": "orange", "code": "        if len(date9tuple) != 9:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "3565", "colour": "orange", "code": "            continue\n", "error": "none", "author": "tom@organisms.be"}, {"index": "3566", "colour": "orange", "code": "        return date9tuple\n", "error": "none", "author": "tom@organisms.be"}, {"index": "3567", "colour": "orange", "code": "    return None\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "3568", "colour": "orange", "code": "\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "3569", "colour": "blue", "code": "def _getCharacterEncoding(http_headers, xml_data):\n", "error": "R", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "3570", "colour": "orange", "code": "    '''Get the character encoding of the XML document\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "3571", "colour": "orange", "code": "\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "3572", "colour": "orange", "code": "    http_headers is a dictionary\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "3573", "colour": "orange", "code": "    xml_data is a raw string (not Unicode)\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "3574", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "3575", "colour": "orange", "code": "    This is so much trickier than it sounds, it's not even funny.\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "3576", "colour": "orange", "code": "    According to RFC 3023 ('XML Media Types'), if the HTTP Content-Type\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "3577", "colour": "orange", "code": "    is application/xml, application/*+xml,\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "3578", "colour": "orange", "code": "    application/xml-external-parsed-entity, or application/xml-dtd,\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "3579", "colour": "orange", "code": "    the encoding given in the charset parameter of the HTTP Content-Type\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "3580", "colour": "orange", "code": "    takes precedence over the encoding given in the XML prefix within the\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "3581", "colour": "orange", "code": "    document, and defaults to 'utf-8' if neither are specified.  But, if\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "3582", "colour": "orange", "code": "    the HTTP Content-Type is text/xml, text/*+xml, or\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "3583", "colour": "orange", "code": "    text/xml-external-parsed-entity, the encoding given in the XML prefix\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "3584", "colour": "orange", "code": "    within the document is ALWAYS IGNORED and only the encoding given in\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "3585", "colour": "orange", "code": "    the charset parameter of the HTTP Content-Type header should be\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "3586", "colour": "orange", "code": "    respected, and it defaults to 'us-ascii' if not specified.\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "3587", "colour": "orange", "code": "\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "3588", "colour": "orange", "code": "    Furthermore, discussion on the atom-syntax mailing list with the\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "3589", "colour": "orange", "code": "    author of RFC 3023 leads me to the conclusion that any document\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "3590", "colour": "orange", "code": "    served with a Content-Type of text/* and no charset parameter\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "3591", "colour": "orange", "code": "    must be treated as us-ascii.  (We now do this.)  And also that it\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "3592", "colour": "orange", "code": "    must always be flagged as non-well-formed.  (We now do this too.)\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "3593", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "3594", "colour": "orange", "code": "    If Content-Type is unspecified (input was local file or non-HTTP source)\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "3595", "colour": "orange", "code": "    or unrecognized (server just got it totally wrong), then go by the\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "3596", "colour": "orange", "code": "    encoding given in the XML prefix of the document and default to\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "3597", "colour": "orange", "code": "    'iso-8859-1' as per the HTTP specification (RFC 2616).\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "3598", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "3599", "colour": "orange", "code": "    Then, assuming we didn't find a character encoding in the HTTP headers\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "3600", "colour": "orange", "code": "    (and the HTTP Content-type allowed us to look in the body), we need\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "3601", "colour": "orange", "code": "    to sniff the first few bytes of the XML data and try to determine\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "3602", "colour": "orange", "code": "    whether the encoding is ASCII-compatible.  Section F of the XML\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "3603", "colour": "orange", "code": "    specification shows the way here:\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "3604", "colour": "orange", "code": "    http://www.w3.org/TR/REC-xml/#sec-guessing-no-ext-info\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "3605", "colour": "orange", "code": "\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "3606", "colour": "orange", "code": "    If the sniffed encoding is not ASCII-compatible, we need to make it\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "3607", "colour": "orange", "code": "    ASCII compatible so that we can sniff further into the XML declaration\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "3608", "colour": "orange", "code": "    to find the encoding attribute, which will tell us the true encoding.\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "3609", "colour": "orange", "code": "\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "3610", "colour": "orange", "code": "    Of course, none of this guarantees that we will be able to parse the\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "3611", "colour": "orange", "code": "    feed in the declared character encoding (assuming it was declared\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "3612", "colour": "orange", "code": "    correctly, which many are not).  iconv_codec can help a lot;\n", "error": "none", "author": "tom@organisms.be"}, {"index": "3613", "colour": "orange", "code": "    you should definitely install it if you can.\n", "error": "none", "author": "tom@organisms.be"}, {"index": "3614", "colour": "orange", "code": "    http://cjkpython.i18n.org/\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "3615", "colour": "orange", "code": "    '''\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "3616", "colour": "orange", "code": "\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "3617", "colour": "orange", "code": "    def _parseHTTPContentType(content_type):\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "3618", "colour": "orange", "code": "        '''takes HTTP Content-Type header and returns (content type, charset)\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "3619", "colour": "orange", "code": "\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "3620", "colour": "orange", "code": "        If no charset is specified, returns (content type, '')\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "3621", "colour": "orange", "code": "        If no content type is specified, returns ('', '')\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "3622", "colour": "orange", "code": "        Both return parameters are guaranteed to be lowercase strings\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "3623", "colour": "orange", "code": "        '''\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "3624", "colour": "orange", "code": "        content_type = content_type or ''\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "3625", "colour": "orange", "code": "        content_type, params = cgi.parse_header(content_type)\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "3626", "colour": "orange", "code": "        charset = params.get('charset', '').replace(\"'\", \"\")\n", "error": "none", "author": "tom@organisms.be"}, {"index": "3627", "colour": "orange", "code": "        if not isinstance(charset, unicode):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "3628", "colour": "orange", "code": "            charset = charset.decode('utf-8', 'ignore')\n", "error": "none", "author": "tom@organisms.be"}, {"index": "3629", "colour": "orange", "code": "        return content_type, charset\n", "error": "none", "author": "tom@organisms.be"}, {"index": "3630", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "3631", "colour": "orange", "code": "    sniffed_xml_encoding = u''\n", "error": "none", "author": "tom@organisms.be"}, {"index": "3632", "colour": "orange", "code": "    xml_encoding = u''\n", "error": "none", "author": "tom@organisms.be"}, {"index": "3633", "colour": "orange", "code": "    true_encoding = u''\n", "error": "none", "author": "tom@organisms.be"}, {"index": "3634", "colour": "orange", "code": "    http_content_type, http_encoding = _parseHTTPContentType(http_headers.get('content-type'))\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "3635", "colour": "orange", "code": "    # Must sniff for non-ASCII-compatible character encodings before\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "3636", "colour": "orange", "code": "    # searching for XML declaration.  This heuristic is defined in\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "3637", "colour": "orange", "code": "    # section F of the XML specification:\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "3638", "colour": "orange", "code": "    # http://www.w3.org/TR/REC-xml/#sec-guessing-no-ext-info\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "3639", "colour": "orange", "code": "    try:\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "3640", "colour": "orange", "code": "        if xml_data[:4] == _l2bytes([0x4c, 0x6f, 0xa7, 0x94]):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "3641", "colour": "orange", "code": "            # In all forms of EBCDIC, these four bytes correspond\n", "error": "none", "author": "tom@organisms.be"}, {"index": "3642", "colour": "orange", "code": "            # to the string '<?xm'; try decoding using CP037\n", "error": "none", "author": "tom@organisms.be"}, {"index": "3643", "colour": "orange", "code": "            sniffed_xml_encoding = u'cp037'\n", "error": "none", "author": "tom@organisms.be"}, {"index": "3644", "colour": "orange", "code": "            xml_data = xml_data.decode('cp037').encode('utf-8')\n", "error": "none", "author": "tom@organisms.be"}, {"index": "3645", "colour": "orange", "code": "        elif xml_data[:4] == _l2bytes([0x00, 0x3c, 0x00, 0x3f]):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "3646", "colour": "orange", "code": "            # UTF-16BE\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "3647", "colour": "orange", "code": "            sniffed_xml_encoding = u'utf-16be'\n", "error": "none", "author": "tom@organisms.be"}, {"index": "3648", "colour": "orange", "code": "            xml_data = unicode(xml_data, 'utf-16be').encode('utf-8')\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "3649", "colour": "orange", "code": "        elif (len(xml_data) >= 4) and (xml_data[:2] == _l2bytes([0xfe, 0xff])) and (xml_data[2:4] != _l2bytes([0x00, 0x00])):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "3650", "colour": "orange", "code": "            # UTF-16BE with BOM\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "3651", "colour": "orange", "code": "            sniffed_xml_encoding = u'utf-16be'\n", "error": "none", "author": "tom@organisms.be"}, {"index": "3652", "colour": "orange", "code": "            xml_data = unicode(xml_data[2:], 'utf-16be').encode('utf-8')\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "3653", "colour": "orange", "code": "        elif xml_data[:4] == _l2bytes([0x3c, 0x00, 0x3f, 0x00]):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "3654", "colour": "orange", "code": "            # UTF-16LE\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "3655", "colour": "orange", "code": "            sniffed_xml_encoding = u'utf-16le'\n", "error": "none", "author": "tom@organisms.be"}, {"index": "3656", "colour": "orange", "code": "            xml_data = unicode(xml_data, 'utf-16le').encode('utf-8')\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "3657", "colour": "orange", "code": "        elif (len(xml_data) >= 4) and (xml_data[:2] == _l2bytes([0xff, 0xfe])) and (xml_data[2:4] != _l2bytes([0x00, 0x00])):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "3658", "colour": "orange", "code": "            # UTF-16LE with BOM\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "3659", "colour": "orange", "code": "            sniffed_xml_encoding = u'utf-16le'\n", "error": "none", "author": "tom@organisms.be"}, {"index": "3660", "colour": "orange", "code": "            xml_data = unicode(xml_data[2:], 'utf-16le').encode('utf-8')\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "3661", "colour": "orange", "code": "        elif xml_data[:4] == _l2bytes([0x00, 0x00, 0x00, 0x3c]):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "3662", "colour": "orange", "code": "            # UTF-32BE\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "3663", "colour": "orange", "code": "            sniffed_xml_encoding = u'utf-32be'\n", "error": "none", "author": "tom@organisms.be"}, {"index": "3664", "colour": "orange", "code": "            if _UTF32_AVAILABLE:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "3665", "colour": "orange", "code": "                xml_data = unicode(xml_data, 'utf-32be').encode('utf-8')\n", "error": "none", "author": "tom@organisms.be"}, {"index": "3666", "colour": "orange", "code": "        elif xml_data[:4] == _l2bytes([0x3c, 0x00, 0x00, 0x00]):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "3667", "colour": "orange", "code": "            # UTF-32LE\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "3668", "colour": "orange", "code": "            sniffed_xml_encoding = u'utf-32le'\n", "error": "none", "author": "tom@organisms.be"}, {"index": "3669", "colour": "orange", "code": "            if _UTF32_AVAILABLE:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "3670", "colour": "orange", "code": "                xml_data = unicode(xml_data, 'utf-32le').encode('utf-8')\n", "error": "none", "author": "tom@organisms.be"}, {"index": "3671", "colour": "orange", "code": "        elif xml_data[:4] == _l2bytes([0x00, 0x00, 0xfe, 0xff]):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "3672", "colour": "orange", "code": "            # UTF-32BE with BOM\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "3673", "colour": "orange", "code": "            sniffed_xml_encoding = u'utf-32be'\n", "error": "none", "author": "tom@organisms.be"}, {"index": "3674", "colour": "orange", "code": "            if _UTF32_AVAILABLE:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "3675", "colour": "orange", "code": "                xml_data = unicode(xml_data[4:], 'utf-32be').encode('utf-8')\n", "error": "none", "author": "tom@organisms.be"}, {"index": "3676", "colour": "orange", "code": "        elif xml_data[:4] == _l2bytes([0xff, 0xfe, 0x00, 0x00]):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "3677", "colour": "orange", "code": "            # UTF-32LE with BOM\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "3678", "colour": "orange", "code": "            sniffed_xml_encoding = u'utf-32le'\n", "error": "none", "author": "tom@organisms.be"}, {"index": "3679", "colour": "orange", "code": "            if _UTF32_AVAILABLE:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "3680", "colour": "orange", "code": "                xml_data = unicode(xml_data[4:], 'utf-32le').encode('utf-8')\n", "error": "none", "author": "tom@organisms.be"}, {"index": "3681", "colour": "orange", "code": "        elif xml_data[:3] == _l2bytes([0xef, 0xbb, 0xbf]):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "3682", "colour": "orange", "code": "            # UTF-8 with BOM\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "3683", "colour": "orange", "code": "            sniffed_xml_encoding = u'utf-8'\n", "error": "none", "author": "tom@organisms.be"}, {"index": "3684", "colour": "orange", "code": "            xml_data = unicode(xml_data[3:], 'utf-8').encode('utf-8')\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "3685", "colour": "orange", "code": "        else:\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "3686", "colour": "orange", "code": "            # ASCII-compatible\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "3687", "colour": "orange", "code": "            pass\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "3688", "colour": "green", "code": "        xml_encoding_match = re.compile(_s2bytes('^<\\?.*encoding=[\\'\"](.*?)[\\'\"].*\\?>')).match(xml_data)\n", "error": "W", "author": "tom@organisms.be"}, {"index": "3689", "colour": "orange", "code": "    except UnicodeDecodeError:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "3690", "colour": "orange", "code": "        xml_encoding_match = None\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "3691", "colour": "orange", "code": "    if xml_encoding_match:\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "3692", "colour": "orange", "code": "        xml_encoding = xml_encoding_match.groups()[0].decode('utf-8').lower()\n", "error": "none", "author": "tom@organisms.be"}, {"index": "3693", "colour": "orange", "code": "        if sniffed_xml_encoding and (xml_encoding in (u'iso-10646-ucs-2', u'ucs-2', u'csunicode', u'iso-10646-ucs-4', u'ucs-4', u'csucs4', u'utf-16', u'utf-32', u'utf_16', u'utf_32', u'utf16', u'u16')):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "3694", "colour": "orange", "code": "            xml_encoding = sniffed_xml_encoding\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "3695", "colour": "orange", "code": "    acceptable_content_type = 0\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "3696", "colour": "orange", "code": "    application_content_types = (u'application/xml', u'application/xml-dtd', u'application/xml-external-parsed-entity')\n", "error": "none", "author": "tom@organisms.be"}, {"index": "3697", "colour": "orange", "code": "    text_content_types = (u'text/xml', u'text/xml-external-parsed-entity')\n", "error": "none", "author": "tom@organisms.be"}, {"index": "3698", "colour": "orange", "code": "    if (http_content_type in application_content_types) or \\\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "3699", "colour": "orange", "code": "       (http_content_type.startswith(u'application/') and http_content_type.endswith(u'+xml')):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "3700", "colour": "orange", "code": "        acceptable_content_type = 1\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "3701", "colour": "orange", "code": "        true_encoding = http_encoding or xml_encoding or u'utf-8'\n", "error": "none", "author": "tom@organisms.be"}, {"index": "3702", "colour": "orange", "code": "    elif (http_content_type in text_content_types) or \\\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "3703", "colour": "orange", "code": "         (http_content_type.startswith(u'text/')) and http_content_type.endswith(u'+xml'):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "3704", "colour": "orange", "code": "        acceptable_content_type = 1\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "3705", "colour": "orange", "code": "        true_encoding = http_encoding or u'us-ascii'\n", "error": "none", "author": "tom@organisms.be"}, {"index": "3706", "colour": "orange", "code": "    elif http_content_type.startswith(u'text/'):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "3707", "colour": "orange", "code": "        true_encoding = http_encoding or u'us-ascii'\n", "error": "none", "author": "tom@organisms.be"}, {"index": "3708", "colour": "orange", "code": "    elif http_headers and 'content-type' not in http_headers:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "3709", "colour": "orange", "code": "        true_encoding = xml_encoding or u'iso-8859-1'\n", "error": "none", "author": "tom@organisms.be"}, {"index": "3710", "colour": "orange", "code": "    else:\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "3711", "colour": "orange", "code": "        true_encoding = xml_encoding or u'utf-8'\n", "error": "none", "author": "tom@organisms.be"}, {"index": "3712", "colour": "orange", "code": "    # some feeds claim to be gb2312 but are actually gb18030.\n", "error": "none", "author": "tom@organisms.be"}, {"index": "3713", "colour": "orange", "code": "    # apparently MSIE and Firefox both do the following switch:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "3714", "colour": "orange", "code": "    if true_encoding.lower() == u'gb2312':\n", "error": "none", "author": "tom@organisms.be"}, {"index": "3715", "colour": "orange", "code": "        true_encoding = u'gb18030'\n", "error": "none", "author": "tom@organisms.be"}, {"index": "3716", "colour": "orange", "code": "    return true_encoding, http_encoding, xml_encoding, sniffed_xml_encoding, acceptable_content_type\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "3717", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "3718", "colour": "orange", "code": "def _toUTF8(data, encoding):\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "3719", "colour": "orange", "code": "    '''Changes an XML data stream on the fly to specify a new encoding\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "3720", "colour": "orange", "code": "\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "3721", "colour": "orange", "code": "    data is a raw sequence of bytes (not Unicode) that is presumed to be in %encoding already\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "3722", "colour": "orange", "code": "    encoding is a string recognized by encodings.aliases\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "3723", "colour": "orange", "code": "    '''\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "3724", "colour": "orange", "code": "    # strip Byte Order Mark (if present)\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "3725", "colour": "orange", "code": "    if (len(data) >= 4) and (data[:2] == _l2bytes([0xfe, 0xff])) and (data[2:4] != _l2bytes([0x00, 0x00])):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "3726", "colour": "orange", "code": "        encoding = 'utf-16be'\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "3727", "colour": "orange", "code": "        data = data[2:]\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "3728", "colour": "orange", "code": "    elif (len(data) >= 4) and (data[:2] == _l2bytes([0xff, 0xfe])) and (data[2:4] != _l2bytes([0x00, 0x00])):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "3729", "colour": "orange", "code": "        encoding = 'utf-16le'\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "3730", "colour": "orange", "code": "        data = data[2:]\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "3731", "colour": "orange", "code": "    elif data[:3] == _l2bytes([0xef, 0xbb, 0xbf]):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "3732", "colour": "orange", "code": "        encoding = 'utf-8'\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "3733", "colour": "orange", "code": "        data = data[3:]\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "3734", "colour": "orange", "code": "    elif data[:4] == _l2bytes([0x00, 0x00, 0xfe, 0xff]):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "3735", "colour": "orange", "code": "        encoding = 'utf-32be'\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "3736", "colour": "orange", "code": "        data = data[4:]\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "3737", "colour": "orange", "code": "    elif data[:4] == _l2bytes([0xff, 0xfe, 0x00, 0x00]):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "3738", "colour": "orange", "code": "        encoding = 'utf-32le'\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "3739", "colour": "orange", "code": "        data = data[4:]\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "3740", "colour": "orange", "code": "    newdata = unicode(data, encoding)\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "3741", "colour": "green", "code": "    declmatch = re.compile('^<\\?xml[^>]*?>')\n", "error": "W", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "3742", "colour": "orange", "code": "    newdecl = '''<?xml version='1.0' encoding='utf-8'?>'''\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "3743", "colour": "orange", "code": "    if declmatch.search(newdata):\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "3744", "colour": "orange", "code": "        newdata = declmatch.sub(newdecl, newdata)\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "3745", "colour": "orange", "code": "    else:\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "3746", "colour": "orange", "code": "        newdata = newdecl + u'\\n' + newdata\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "3747", "colour": "orange", "code": "    return newdata.encode('utf-8')\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "3748", "colour": "orange", "code": "\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "3749", "colour": "orange", "code": "def _stripDoctype(data):\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "3750", "colour": "orange", "code": "    '''Strips DOCTYPE from XML document, returns (rss_version, stripped_data)\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "3751", "colour": "orange", "code": "\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "3752", "colour": "orange", "code": "    rss_version may be 'rss091n' or None\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "3753", "colour": "orange", "code": "    stripped_data is the same XML document, minus the DOCTYPE\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "3754", "colour": "orange", "code": "    '''\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "3755", "colour": "green", "code": "    start = re.search(_s2bytes('<\\w'), data)\n", "error": "W", "author": "tom@organisms.be"}, {"index": "3756", "colour": "orange", "code": "    start = start and start.start() or -1\n", "error": "none", "author": "tom@organisms.be"}, {"index": "3757", "colour": "orange", "code": "    head,data = data[:start+1], data[start+1:]\n", "error": "none", "author": "tom@organisms.be"}, {"index": "3758", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "3759", "colour": "orange", "code": "    entity_pattern = re.compile(_s2bytes(r'^\\s*<!ENTITY([^>]*?)>'), re.MULTILINE)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "3760", "colour": "orange", "code": "    entity_results=entity_pattern.findall(head)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "3761", "colour": "orange", "code": "    head = entity_pattern.sub(_s2bytes(''), head)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "3762", "colour": "orange", "code": "    doctype_pattern = re.compile(_s2bytes(r'^\\s*<!DOCTYPE([^>]*?)>'), re.MULTILINE)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "3763", "colour": "orange", "code": "    doctype_results = doctype_pattern.findall(head)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "3764", "colour": "orange", "code": "    doctype = doctype_results and doctype_results[0] or _s2bytes('')\n", "error": "none", "author": "tom@organisms.be"}, {"index": "3765", "colour": "orange", "code": "    if doctype.lower().count(_s2bytes('netscape')):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "3766", "colour": "orange", "code": "        version = u'rss091n'\n", "error": "none", "author": "tom@organisms.be"}, {"index": "3767", "colour": "orange", "code": "    else:\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "3768", "colour": "orange", "code": "        version = None\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "3769", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "3770", "colour": "orange", "code": "    # only allow in 'safe' inline entity definitions\n", "error": "none", "author": "tom@organisms.be"}, {"index": "3771", "colour": "orange", "code": "    replacement=_s2bytes('')\n", "error": "none", "author": "tom@organisms.be"}, {"index": "3772", "colour": "orange", "code": "    if len(doctype_results)==1 and entity_results:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "3773", "colour": "green", "code": "        safe_pattern=re.compile(_s2bytes('\\s+(\\w+)\\s+\"(&#\\w+;|[^&\"]*)\"'))\n", "error": "W", "author": "tom@organisms.be"}, {"index": "3774", "colour": "green", "code": "        safe_entities=filter(lambda e: safe_pattern.match(e),entity_results)\n", "error": "W", "author": "tom@organisms.be"}, {"index": "3775", "colour": "orange", "code": "        if safe_entities:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "3776", "colour": "orange", "code": "            replacement=_s2bytes('<!DOCTYPE feed [\\n  <!ENTITY') + _s2bytes('>\\n  <!ENTITY ').join(safe_entities) + _s2bytes('>\\n]>')\n", "error": "none", "author": "tom@organisms.be"}, {"index": "3777", "colour": "orange", "code": "    data = doctype_pattern.sub(replacement, head) + data\n", "error": "none", "author": "tom@organisms.be"}, {"index": "3778", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "3779", "colour": "orange", "code": "    return version, data, dict(replacement and [(k.decode('utf-8'), v.decode('utf-8')) for k, v in safe_pattern.findall(replacement)])\n", "error": "none", "author": "tom@organisms.be"}, {"index": "3780", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "3781", "colour": "blue", "code": "def parse(url_file_stream_or_string, etag=None, modified=None, agent=None, referrer=None, handlers=None, request_headers=None, response_headers=None):\n", "error": "R", "author": "tom@organisms.be"}, {"index": "3782", "colour": "orange", "code": "    '''Parse a feed from a URL, file, stream, or string.\n", "error": "none", "author": "tom@organisms.be"}, {"index": "3783", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "3784", "colour": "orange", "code": "    request_headers, if given, is a dict from http header name to value to add\n", "error": "none", "author": "tom@organisms.be"}, {"index": "3785", "colour": "orange", "code": "    to the request; this overrides internally generated values.\n", "error": "none", "author": "tom@organisms.be"}, {"index": "3786", "colour": "orange", "code": "    '''\n", "error": "none", "author": "tom@organisms.be"}, {"index": "3787", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "3788", "colour": "orange", "code": "    if handlers is None:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "3789", "colour": "orange", "code": "        handlers = []\n", "error": "none", "author": "tom@organisms.be"}, {"index": "3790", "colour": "orange", "code": "    if request_headers is None:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "3791", "colour": "orange", "code": "        request_headers = {}\n", "error": "none", "author": "tom@organisms.be"}, {"index": "3792", "colour": "orange", "code": "    if response_headers is None:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "3793", "colour": "orange", "code": "        response_headers = {}\n", "error": "none", "author": "tom@organisms.be"}, {"index": "3794", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "3795", "colour": "orange", "code": "    result = FeedParserDict()\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "3796", "colour": "orange", "code": "    result['feed'] = FeedParserDict()\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "3797", "colour": "orange", "code": "    result['entries'] = []\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "3798", "colour": "orange", "code": "    result['bozo'] = 0\n", "error": "none", "author": "tom@organisms.be"}, {"index": "3799", "colour": "orange", "code": "    if not isinstance(handlers, list):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "3800", "colour": "orange", "code": "        handlers = [handlers]\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "3801", "colour": "orange", "code": "    try:\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "3802", "colour": "orange", "code": "        f = _open_resource(url_file_stream_or_string, etag, modified, agent, referrer, handlers, request_headers)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "3803", "colour": "orange", "code": "        data = f.read()\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "3804", "colour": "green", "code": "    except Exception as e:\n", "error": "W", "author": "tom@organisms.be"}, {"index": "3805", "colour": "orange", "code": "        result['bozo'] = 1\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "3806", "colour": "orange", "code": "        result['bozo_exception'] = e\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "3807", "colour": "orange", "code": "        data = None\n", "error": "none", "author": "tom@organisms.be"}, {"index": "3808", "colour": "orange", "code": "        f = None\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "3809", "colour": "orange", "code": "\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "3810", "colour": "orange", "code": "    if hasattr(f, 'headers'):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "3811", "colour": "red", "code": "        result['headers'] = dict(f.headers)\n", "error": "E", "author": "tom@organisms.be"}, {"index": "3812", "colour": "orange", "code": "    # overwrite existing headers using response_headers\n", "error": "none", "author": "tom@organisms.be"}, {"index": "3813", "colour": "orange", "code": "    if 'headers' in result:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "3814", "colour": "orange", "code": "        result['headers'].update(response_headers)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "3815", "colour": "orange", "code": "    elif response_headers:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "3816", "colour": "orange", "code": "        result['headers'] = copy.deepcopy(response_headers)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "3817", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "3818", "colour": "orange", "code": "    # lowercase all of the HTTP headers for comparisons per RFC 2616\n", "error": "none", "author": "tom@organisms.be"}, {"index": "3819", "colour": "orange", "code": "    if 'headers' in result:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "3820", "colour": "orange", "code": "        http_headers = dict((k.lower(), v) for k, v in result['headers'].items())\n", "error": "none", "author": "tom@organisms.be"}, {"index": "3821", "colour": "orange", "code": "    else:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "3822", "colour": "orange", "code": "        http_headers = {}\n", "error": "none", "author": "tom@organisms.be"}, {"index": "3823", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "3824", "colour": "orange", "code": "    # if feed is gzip-compressed, decompress it\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "3825", "colour": "orange", "code": "    if f and data and http_headers:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "3826", "colour": "orange", "code": "        if gzip and 'gzip' in http_headers.get('content-encoding', ''):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "3827", "colour": "orange", "code": "            try:\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "3828", "colour": "orange", "code": "                data = gzip.GzipFile(fileobj=_StringIO(data)).read()\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "3829", "colour": "orange", "code": "            except (IOError, struct.error) as e:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "3830", "colour": "orange", "code": "                # IOError can occur if the gzip header is bad.\n", "error": "none", "author": "tom@organisms.be"}, {"index": "3831", "colour": "orange", "code": "                # struct.error can occur if the data is damaged.\n", "error": "none", "author": "tom@organisms.be"}, {"index": "3832", "colour": "orange", "code": "                result['bozo'] = 1\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "3833", "colour": "orange", "code": "                result['bozo_exception'] = e\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "3834", "colour": "orange", "code": "                if isinstance(e, struct.error):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "3835", "colour": "orange", "code": "                    # A gzip header was found but the data is corrupt.\n", "error": "none", "author": "tom@organisms.be"}, {"index": "3836", "colour": "orange", "code": "                    # Ideally, we should re-request the feed without the\n", "error": "none", "author": "tom@organisms.be"}, {"index": "3837", "colour": "orange", "code": "                    # 'Accept-encoding: gzip' header, but we don't.\n", "error": "none", "author": "tom@organisms.be"}, {"index": "3838", "colour": "orange", "code": "                    data = None\n", "error": "none", "author": "tom@organisms.be"}, {"index": "3839", "colour": "orange", "code": "        elif zlib and 'deflate' in http_headers.get('content-encoding', ''):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "3840", "colour": "orange", "code": "            try:\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "3841", "colour": "orange", "code": "                data = zlib.decompress(data)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "3842", "colour": "orange", "code": "            except zlib.error as e:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "3843", "colour": "orange", "code": "                try:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "3844", "colour": "orange", "code": "                    # The data may have no headers and no checksum.\n", "error": "none", "author": "tom@organisms.be"}, {"index": "3845", "colour": "orange", "code": "                    data = zlib.decompress(data, -15)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "3846", "colour": "orange", "code": "                except zlib.error as e:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "3847", "colour": "orange", "code": "                    result['bozo'] = 1\n", "error": "none", "author": "tom@organisms.be"}, {"index": "3848", "colour": "orange", "code": "                    result['bozo_exception'] = e\n", "error": "none", "author": "tom@organisms.be"}, {"index": "3849", "colour": "orange", "code": "\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "3850", "colour": "orange", "code": "    # save HTTP headers\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "3851", "colour": "orange", "code": "    if http_headers:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "3852", "colour": "orange", "code": "        if 'etag' in http_headers:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "3853", "colour": "orange", "code": "            etag = http_headers.get('etag', u'')\n", "error": "none", "author": "tom@organisms.be"}, {"index": "3854", "colour": "orange", "code": "            if not isinstance(etag, unicode):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "3855", "colour": "orange", "code": "                etag = etag.decode('utf-8', 'ignore')\n", "error": "none", "author": "tom@organisms.be"}, {"index": "3856", "colour": "orange", "code": "            if etag:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "3857", "colour": "orange", "code": "                result['etag'] = etag\n", "error": "none", "author": "tom@organisms.be"}, {"index": "3858", "colour": "orange", "code": "        if 'last-modified' in http_headers:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "3859", "colour": "orange", "code": "            modified = http_headers.get('last-modified', u'')\n", "error": "none", "author": "tom@organisms.be"}, {"index": "3860", "colour": "orange", "code": "            if modified:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "3861", "colour": "orange", "code": "                result['modified'] = modified\n", "error": "none", "author": "tom@organisms.be"}, {"index": "3862", "colour": "orange", "code": "                result['modified_parsed'] = _parse_date(modified)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "3863", "colour": "orange", "code": "    if hasattr(f, 'url'):\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "3864", "colour": "red", "code": "        if not isinstance(f.url, unicode):\n", "error": "E", "author": "tom@organisms.be"}, {"index": "3865", "colour": "red", "code": "            result['href'] = f.url.decode('utf-8', 'ignore')\n", "error": "E", "author": "tom@organisms.be"}, {"index": "3866", "colour": "orange", "code": "        else:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "3867", "colour": "red", "code": "            result['href'] = f.url\n", "error": "E", "author": "tom@organisms.be"}, {"index": "3868", "colour": "orange", "code": "        result['status'] = 200\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "3869", "colour": "orange", "code": "    if hasattr(f, 'status'):\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "3870", "colour": "red", "code": "        result['status'] = f.status\n", "error": "E", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "3871", "colour": "orange", "code": "    if hasattr(f, 'close'):\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "3872", "colour": "orange", "code": "        f.close()\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "3873", "colour": "orange", "code": "\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "3874", "colour": "orange", "code": "    if data is None:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "3875", "colour": "orange", "code": "        return result\n", "error": "none", "author": "tom@organisms.be"}, {"index": "3876", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "3877", "colour": "orange", "code": "    # there are four encodings to keep track of:\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "3878", "colour": "orange", "code": "    # - http_encoding is the encoding declared in the Content-Type HTTP header\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "3879", "colour": "orange", "code": "    # - xml_encoding is the encoding declared in the <?xml declaration\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "3880", "colour": "orange", "code": "    # - sniffed_encoding is the encoding sniffed from the first 4 bytes of the XML data\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "3881", "colour": "orange", "code": "    # - result['encoding'] is the actual encoding, as per RFC 3023 and a variety of other conflicting specifications\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "3882", "colour": "green", "code": "    result['encoding'], http_encoding, xml_encoding, sniffed_xml_encoding, acceptable_content_type = \\\n", "error": "W", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "3883", "colour": "orange", "code": "        _getCharacterEncoding(http_headers, data)\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "3884", "colour": "orange", "code": "    if http_headers and (not acceptable_content_type):\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "3885", "colour": "orange", "code": "        if 'content-type' in http_headers:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "3886", "colour": "orange", "code": "            bozo_message = '%s is not an XML media type' % http_headers['content-type']\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "3887", "colour": "orange", "code": "        else:\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "3888", "colour": "orange", "code": "            bozo_message = 'no Content-type specified'\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "3889", "colour": "orange", "code": "        result['bozo'] = 1\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "3890", "colour": "orange", "code": "        result['bozo_exception'] = NonXMLContentType(bozo_message)\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "3891", "colour": "orange", "code": "\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "3892", "colour": "orange", "code": "    # ensure that baseuri is an absolute uri using an acceptable URI scheme\n", "error": "none", "author": "tom@organisms.be"}, {"index": "3893", "colour": "orange", "code": "    contentloc = http_headers.get('content-location', u'')\n", "error": "none", "author": "tom@organisms.be"}, {"index": "3894", "colour": "orange", "code": "    href = result.get('href', u'')\n", "error": "none", "author": "tom@organisms.be"}, {"index": "3895", "colour": "orange", "code": "    baseuri = _makeSafeAbsoluteURI(href, contentloc) or _makeSafeAbsoluteURI(contentloc) or href\n", "error": "none", "author": "tom@organisms.be"}, {"index": "3896", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "3897", "colour": "orange", "code": "    baselang = http_headers.get('content-language', None)\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "3898", "colour": "orange", "code": "    if not isinstance(baselang, unicode) and baselang is not None:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "3899", "colour": "orange", "code": "        baselang = baselang.decode('utf-8', 'ignore')\n", "error": "none", "author": "tom@organisms.be"}, {"index": "3900", "colour": "orange", "code": "\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "3901", "colour": "orange", "code": "    # if server sent 304, we're done\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "3902", "colour": "orange", "code": "    if getattr(f, 'code', 0) == 304:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "3903", "colour": "orange", "code": "        result['version'] = u''\n", "error": "none", "author": "tom@organisms.be"}, {"index": "3904", "colour": "orange", "code": "        result['debug_message'] = 'The feed has not changed since you last checked, ' + \\\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "3905", "colour": "orange", "code": "            'so the server sent no data.  This is a feature, not a bug!'\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "3906", "colour": "orange", "code": "        return result\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "3907", "colour": "orange", "code": "\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "3908", "colour": "orange", "code": "    # if there was a problem downloading, we're done\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "3909", "colour": "orange", "code": "    if data is None:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "3910", "colour": "orange", "code": "        return result\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "3911", "colour": "orange", "code": "\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "3912", "colour": "orange", "code": "    # determine character encoding\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "3913", "colour": "orange", "code": "    use_strict_parser = 0\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "3914", "colour": "orange", "code": "    known_encoding = 0\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "3915", "colour": "orange", "code": "    tried_encodings = []\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "3916", "colour": "orange", "code": "    # try: HTTP encoding, declared XML encoding, encoding sniffed from BOM\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "3917", "colour": "orange", "code": "    for proposed_encoding in (result['encoding'], xml_encoding, sniffed_xml_encoding):\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "3918", "colour": "orange", "code": "        if not proposed_encoding:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "3919", "colour": "orange", "code": "            continue\n", "error": "none", "author": "tom@organisms.be"}, {"index": "3920", "colour": "orange", "code": "        if proposed_encoding in tried_encodings:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "3921", "colour": "orange", "code": "            continue\n", "error": "none", "author": "tom@organisms.be"}, {"index": "3922", "colour": "orange", "code": "        tried_encodings.append(proposed_encoding)\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "3923", "colour": "orange", "code": "        try:\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "3924", "colour": "orange", "code": "            data = _toUTF8(data, proposed_encoding)\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "3925", "colour": "orange", "code": "        except (UnicodeDecodeError, LookupError):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "3926", "colour": "orange", "code": "            pass\n", "error": "none", "author": "tom@organisms.be"}, {"index": "3927", "colour": "orange", "code": "        else:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "3928", "colour": "orange", "code": "            known_encoding = use_strict_parser = 1\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "3929", "colour": "orange", "code": "            break\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "3930", "colour": "orange", "code": "    # if no luck and we have auto-detection library, try that\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "3931", "colour": "orange", "code": "    if (not known_encoding) and chardet:\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "3932", "colour": "orange", "code": "        proposed_encoding = unicode(chardet.detect(data)['encoding'], 'ascii', 'ignore')\n", "error": "none", "author": "tom@organisms.be"}, {"index": "3933", "colour": "orange", "code": "        if proposed_encoding and (proposed_encoding not in tried_encodings):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "3934", "colour": "orange", "code": "            tried_encodings.append(proposed_encoding)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "3935", "colour": "orange", "code": "            try:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "3936", "colour": "orange", "code": "                data = _toUTF8(data, proposed_encoding)\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "3937", "colour": "orange", "code": "            except (UnicodeDecodeError, LookupError):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "3938", "colour": "orange", "code": "                pass\n", "error": "none", "author": "tom@organisms.be"}, {"index": "3939", "colour": "orange", "code": "            else:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "3940", "colour": "orange", "code": "                known_encoding = use_strict_parser = 1\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "3941", "colour": "orange", "code": "    # if still no luck and we haven't tried utf-8 yet, try that\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "3942", "colour": "orange", "code": "    if (not known_encoding) and (u'utf-8' not in tried_encodings):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "3943", "colour": "orange", "code": "        proposed_encoding = u'utf-8'\n", "error": "none", "author": "tom@organisms.be"}, {"index": "3944", "colour": "orange", "code": "        tried_encodings.append(proposed_encoding)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "3945", "colour": "orange", "code": "        try:\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "3946", "colour": "orange", "code": "            data = _toUTF8(data, proposed_encoding)\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "3947", "colour": "orange", "code": "        except UnicodeDecodeError:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "3948", "colour": "orange", "code": "            pass\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "3949", "colour": "orange", "code": "        else:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "3950", "colour": "orange", "code": "            known_encoding = use_strict_parser = 1\n", "error": "none", "author": "tom@organisms.be"}, {"index": "3951", "colour": "orange", "code": "    # if still no luck and we haven't tried windows-1252 yet, try that\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "3952", "colour": "orange", "code": "    if (not known_encoding) and (u'windows-1252' not in tried_encodings):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "3953", "colour": "orange", "code": "        proposed_encoding = u'windows-1252'\n", "error": "none", "author": "tom@organisms.be"}, {"index": "3954", "colour": "orange", "code": "        tried_encodings.append(proposed_encoding)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "3955", "colour": "orange", "code": "        try:\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "3956", "colour": "orange", "code": "            data = _toUTF8(data, proposed_encoding)\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "3957", "colour": "orange", "code": "        except UnicodeDecodeError:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "3958", "colour": "orange", "code": "            pass\n", "error": "none", "author": "tom@organisms.be"}, {"index": "3959", "colour": "orange", "code": "        else:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "3960", "colour": "orange", "code": "            known_encoding = use_strict_parser = 1\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "3961", "colour": "orange", "code": "    # if still no luck and we haven't tried iso-8859-2 yet, try that.\n", "error": "none", "author": "tom@organisms.be"}, {"index": "3962", "colour": "orange", "code": "    if (not known_encoding) and (u'iso-8859-2' not in tried_encodings):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "3963", "colour": "orange", "code": "        proposed_encoding = u'iso-8859-2'\n", "error": "none", "author": "tom@organisms.be"}, {"index": "3964", "colour": "orange", "code": "        tried_encodings.append(proposed_encoding)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "3965", "colour": "orange", "code": "        try:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "3966", "colour": "orange", "code": "            data = _toUTF8(data, proposed_encoding)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "3967", "colour": "orange", "code": "        except UnicodeDecodeError:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "3968", "colour": "orange", "code": "            pass\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "3969", "colour": "orange", "code": "        else:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "3970", "colour": "orange", "code": "            known_encoding = use_strict_parser = 1\n", "error": "none", "author": "tom@organisms.be"}, {"index": "3971", "colour": "orange", "code": "    # if still no luck, give up\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "3972", "colour": "orange", "code": "    if not known_encoding:\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "3973", "colour": "orange", "code": "        result['bozo'] = 1\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "3974", "colour": "orange", "code": "        result['bozo_exception'] = CharacterEncodingUnknown( \\\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "3975", "colour": "orange", "code": "            'document encoding unknown, I tried ' + \\\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "3976", "colour": "orange", "code": "            '%s, %s, utf-8, windows-1252, and iso-8859-2 but nothing worked' % \\\n", "error": "none", "author": "tom@organisms.be"}, {"index": "3977", "colour": "orange", "code": "            (result['encoding'], xml_encoding))\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "3978", "colour": "orange", "code": "        result['encoding'] = u''\n", "error": "none", "author": "tom@organisms.be"}, {"index": "3979", "colour": "orange", "code": "    elif proposed_encoding != result['encoding']:\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "3980", "colour": "orange", "code": "        result['bozo'] = 1\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "3981", "colour": "orange", "code": "        result['bozo_exception'] = CharacterEncodingOverride( \\\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "3982", "colour": "orange", "code": "            'document declared as %s, but parsed as %s' % \\\n", "error": "none", "author": "tom@organisms.be"}, {"index": "3983", "colour": "orange", "code": "            (result['encoding'], proposed_encoding))\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "3984", "colour": "orange", "code": "        result['encoding'] = proposed_encoding\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "3985", "colour": "orange", "code": "\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "3986", "colour": "orange", "code": "    result['version'], data, entities = _stripDoctype(data)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "3987", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "3988", "colour": "orange", "code": "    if not _XML_AVAILABLE:\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "3989", "colour": "orange", "code": "        use_strict_parser = 0\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "3990", "colour": "orange", "code": "    if use_strict_parser:\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "3991", "colour": "orange", "code": "        # initialize the SAX parser\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "3992", "colour": "orange", "code": "        feedparser = _StrictFeedParser(baseuri, baselang, 'utf-8')\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "3993", "colour": "orange", "code": "        saxparser = xml.sax.make_parser(PREFERRED_XML_PARSERS)\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "3994", "colour": "orange", "code": "        saxparser.setFeature(xml.sax.handler.feature_namespaces, 1)\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "3995", "colour": "orange", "code": "        try:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "3996", "colour": "orange", "code": "            # disable downloading external doctype references, if possible\n", "error": "none", "author": "tom@organisms.be"}, {"index": "3997", "colour": "orange", "code": "            saxparser.setFeature(xml.sax.handler.feature_external_ges, 0)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "3998", "colour": "orange", "code": "        except xml.sax.SAXNotSupportedException:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "3999", "colour": "orange", "code": "            pass\n", "error": "none", "author": "tom@organisms.be"}, {"index": "4000", "colour": "orange", "code": "        saxparser.setContentHandler(feedparser)\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "4001", "colour": "orange", "code": "        saxparser.setErrorHandler(feedparser)\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "4002", "colour": "orange", "code": "        source = xml.sax.xmlreader.InputSource()\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "4003", "colour": "orange", "code": "        source.setByteStream(_StringIO(data))\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "4004", "colour": "orange", "code": "        try:\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "4005", "colour": "orange", "code": "            saxparser.parse(source)\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "4006", "colour": "orange", "code": "        except xml.sax.SAXParseException as e:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "4007", "colour": "orange", "code": "            result['bozo'] = 1\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "4008", "colour": "orange", "code": "            result['bozo_exception'] = feedparser.exc or e\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "4009", "colour": "orange", "code": "            use_strict_parser = 0\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "4010", "colour": "orange", "code": "    if not use_strict_parser and _SGML_AVAILABLE:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "4011", "colour": "orange", "code": "        feedparser = _LooseFeedParser(baseuri, baselang, 'utf-8', entities)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "4012", "colour": "orange", "code": "        feedparser.feed(data.decode('utf-8', 'replace'))\n", "error": "none", "author": "tom@organisms.be"}, {"index": "4013", "colour": "orange", "code": "    result['feed'] = feedparser.feeddata\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "4014", "colour": "orange", "code": "    result['entries'] = feedparser.entries\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "4015", "colour": "orange", "code": "    result['version'] = result['version'] or feedparser.version\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "4016", "colour": "orange", "code": "    result['namespaces'] = feedparser.namespacesInUse\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "4017", "colour": "orange", "code": "    return result\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}]]}