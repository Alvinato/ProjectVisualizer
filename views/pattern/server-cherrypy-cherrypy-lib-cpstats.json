{"path": "/home/asumal/git/cs410/pattern/pattern/server/cherrypy/cherrypy/lib/cpstats.py", "lines": [[{"index": "1", "colour": "orange", "code": "\"\"\"CPStats, a package for collecting and reporting on program statistics.\n", "error": "none", "author": "tom@organisms.be"}, {"index": "2", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "3", "colour": "orange", "code": "Overview\n", "error": "none", "author": "tom@organisms.be"}, {"index": "4", "colour": "orange", "code": "========\n", "error": "none", "author": "tom@organisms.be"}, {"index": "5", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "6", "colour": "orange", "code": "Statistics about program operation are an invaluable monitoring and debugging\n", "error": "none", "author": "tom@organisms.be"}, {"index": "7", "colour": "orange", "code": "tool. Unfortunately, the gathering and reporting of these critical values is\n", "error": "none", "author": "tom@organisms.be"}, {"index": "8", "colour": "orange", "code": "usually ad-hoc. This package aims to add a centralized place for gathering\n", "error": "none", "author": "tom@organisms.be"}, {"index": "9", "colour": "orange", "code": "statistical performance data, a structure for recording that data which\n", "error": "none", "author": "tom@organisms.be"}, {"index": "10", "colour": "orange", "code": "provides for extrapolation of that data into more useful information,\n", "error": "none", "author": "tom@organisms.be"}, {"index": "11", "colour": "orange", "code": "and a method of serving that data to both human investigators and\n", "error": "none", "author": "tom@organisms.be"}, {"index": "12", "colour": "orange", "code": "monitoring software. Let's examine each of those in more detail.\n", "error": "none", "author": "tom@organisms.be"}, {"index": "13", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "14", "colour": "orange", "code": "Data Gathering\n", "error": "none", "author": "tom@organisms.be"}, {"index": "15", "colour": "orange", "code": "--------------\n", "error": "none", "author": "tom@organisms.be"}, {"index": "16", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "17", "colour": "orange", "code": "Just as Python's `logging` module provides a common importable for gathering\n", "error": "none", "author": "tom@organisms.be"}, {"index": "18", "colour": "orange", "code": "and sending messages, performance statistics would benefit from a similar\n", "error": "none", "author": "tom@organisms.be"}, {"index": "19", "colour": "orange", "code": "common mechanism, and one that does *not* require each package which wishes\n", "error": "none", "author": "tom@organisms.be"}, {"index": "20", "colour": "orange", "code": "to collect stats to import a third-party module. Therefore, we choose to\n", "error": "none", "author": "tom@organisms.be"}, {"index": "21", "colour": "orange", "code": "re-use the `logging` module by adding a `statistics` object to it.\n", "error": "none", "author": "tom@organisms.be"}, {"index": "22", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "23", "colour": "orange", "code": "That `logging.statistics` object is a nested dict. It is not a custom class,\n", "error": "none", "author": "tom@organisms.be"}, {"index": "24", "colour": "orange", "code": "because that would 1) require libraries and applications to import a third-\n", "error": "none", "author": "tom@organisms.be"}, {"index": "25", "colour": "orange", "code": "party module in order to participate, 2) inhibit innovation in extrapolation\n", "error": "none", "author": "tom@organisms.be"}, {"index": "26", "colour": "orange", "code": "approaches and in reporting tools, and 3) be slow. There are, however, some\n", "error": "none", "author": "tom@organisms.be"}, {"index": "27", "colour": "orange", "code": "specifications regarding the structure of the dict.\n", "error": "none", "author": "tom@organisms.be"}, {"index": "28", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "29", "colour": "orange", "code": "    {\n", "error": "none", "author": "tom@organisms.be"}, {"index": "30", "colour": "orange", "code": "   +----\"SQLAlchemy\": {\n", "error": "none", "author": "tom@organisms.be"}, {"index": "31", "colour": "orange", "code": "   |        \"Inserts\": 4389745,\n", "error": "none", "author": "tom@organisms.be"}, {"index": "32", "colour": "orange", "code": "   |        \"Inserts per Second\":\n", "error": "none", "author": "tom@organisms.be"}, {"index": "33", "colour": "orange", "code": "   |            lambda s: s[\"Inserts\"] / (time() - s[\"Start\"]),\n", "error": "none", "author": "tom@organisms.be"}, {"index": "34", "colour": "orange", "code": "   |  C +---\"Table Statistics\": {\n", "error": "none", "author": "tom@organisms.be"}, {"index": "35", "colour": "orange", "code": "   |  o |        \"widgets\": {-----------+\n", "error": "none", "author": "tom@organisms.be"}, {"index": "36", "colour": "orange", "code": " N |  l |            \"Rows\": 1.3M,      | Record\n", "error": "none", "author": "tom@organisms.be"}, {"index": "37", "colour": "orange", "code": " a |  l |            \"Inserts\": 400,    |\n", "error": "none", "author": "tom@organisms.be"}, {"index": "38", "colour": "orange", "code": " m |  e |        },---------------------+\n", "error": "none", "author": "tom@organisms.be"}, {"index": "39", "colour": "orange", "code": " e |  c |        \"froobles\": {\n", "error": "none", "author": "tom@organisms.be"}, {"index": "40", "colour": "orange", "code": " s |  t |            \"Rows\": 7845,\n", "error": "none", "author": "tom@organisms.be"}, {"index": "41", "colour": "orange", "code": " p |  i |            \"Inserts\": 0,\n", "error": "none", "author": "tom@organisms.be"}, {"index": "42", "colour": "orange", "code": " a |  o |        },\n", "error": "none", "author": "tom@organisms.be"}, {"index": "43", "colour": "orange", "code": " c |  n +---},\n", "error": "none", "author": "tom@organisms.be"}, {"index": "44", "colour": "orange", "code": " e |        \"Slow Queries\":\n", "error": "none", "author": "tom@organisms.be"}, {"index": "45", "colour": "orange", "code": "   |            [{\"Query\": \"SELECT * FROM widgets;\",\n", "error": "none", "author": "tom@organisms.be"}, {"index": "46", "colour": "orange", "code": "   |              \"Processing Time\": 47.840923343,\n", "error": "none", "author": "tom@organisms.be"}, {"index": "47", "colour": "orange", "code": "   |              },\n", "error": "none", "author": "tom@organisms.be"}, {"index": "48", "colour": "orange", "code": "   |             ],\n", "error": "none", "author": "tom@organisms.be"}, {"index": "49", "colour": "orange", "code": "   +----},\n", "error": "none", "author": "tom@organisms.be"}, {"index": "50", "colour": "orange", "code": "    }\n", "error": "none", "author": "tom@organisms.be"}, {"index": "51", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "52", "colour": "orange", "code": "The `logging.statistics` dict has four levels. The topmost level is nothing\n", "error": "none", "author": "tom@organisms.be"}, {"index": "53", "colour": "orange", "code": "more than a set of names to introduce modularity, usually along the lines of\n", "error": "none", "author": "tom@organisms.be"}, {"index": "54", "colour": "orange", "code": "package names. If the SQLAlchemy project wanted to participate, for example,\n", "error": "none", "author": "tom@organisms.be"}, {"index": "55", "colour": "orange", "code": "it might populate the item `logging.statistics['SQLAlchemy']`, whose value\n", "error": "none", "author": "tom@organisms.be"}, {"index": "56", "colour": "orange", "code": "would be a second-layer dict we call a \"namespace\". Namespaces help multiple\n", "error": "none", "author": "tom@organisms.be"}, {"index": "57", "colour": "orange", "code": "packages to avoid collisions over key names, and make reports easier to read,\n", "error": "none", "author": "tom@organisms.be"}, {"index": "58", "colour": "orange", "code": "to boot. The maintainers of SQLAlchemy should feel free to use more than one\n", "error": "none", "author": "tom@organisms.be"}, {"index": "59", "colour": "orange", "code": "namespace if needed (such as 'SQLAlchemy ORM'). Note that there are no case\n", "error": "none", "author": "tom@organisms.be"}, {"index": "60", "colour": "orange", "code": "or other syntax constraints on the namespace names; they should be chosen\n", "error": "none", "author": "tom@organisms.be"}, {"index": "61", "colour": "orange", "code": "to be maximally readable by humans (neither too short nor too long).\n", "error": "none", "author": "tom@organisms.be"}, {"index": "62", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "63", "colour": "orange", "code": "Each namespace, then, is a dict of named statistical values, such as\n", "error": "none", "author": "tom@organisms.be"}, {"index": "64", "colour": "orange", "code": "'Requests/sec' or 'Uptime'. You should choose names which will look\n", "error": "none", "author": "tom@organisms.be"}, {"index": "65", "colour": "orange", "code": "good on a report: spaces and capitalization are just fine.\n", "error": "none", "author": "tom@organisms.be"}, {"index": "66", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "67", "colour": "orange", "code": "In addition to scalars, values in a namespace MAY be a (third-layer)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "68", "colour": "orange", "code": "dict, or a list, called a \"collection\". For example, the CherryPy StatsTool\n", "error": "none", "author": "tom@organisms.be"}, {"index": "69", "colour": "orange", "code": "keeps track of what each request is doing (or has most recently done)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "70", "colour": "orange", "code": "in a 'Requests' collection, where each key is a thread ID; each\n", "error": "none", "author": "tom@organisms.be"}, {"index": "71", "colour": "orange", "code": "value in the subdict MUST be a fourth dict (whew!) of statistical data about\n", "error": "none", "author": "tom@organisms.be"}, {"index": "72", "colour": "orange", "code": "each thread. We call each subdict in the collection a \"record\". Similarly,\n", "error": "none", "author": "tom@organisms.be"}, {"index": "73", "colour": "orange", "code": "the StatsTool also keeps a list of slow queries, where each record contains\n", "error": "none", "author": "tom@organisms.be"}, {"index": "74", "colour": "orange", "code": "data about each slow query, in order.\n", "error": "none", "author": "tom@organisms.be"}, {"index": "75", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "76", "colour": "orange", "code": "Values in a namespace or record may also be functions, which brings us to:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "77", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "78", "colour": "orange", "code": "Extrapolation\n", "error": "none", "author": "tom@organisms.be"}, {"index": "79", "colour": "orange", "code": "-------------\n", "error": "none", "author": "tom@organisms.be"}, {"index": "80", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "81", "colour": "orange", "code": "The collection of statistical data needs to be fast, as close to unnoticeable\n", "error": "none", "author": "tom@organisms.be"}, {"index": "82", "colour": "orange", "code": "as possible to the host program. That requires us to minimize I/O, for example,\n", "error": "none", "author": "tom@organisms.be"}, {"index": "83", "colour": "orange", "code": "but in Python it also means we need to minimize function calls. So when you\n", "error": "none", "author": "tom@organisms.be"}, {"index": "84", "colour": "orange", "code": "are designing your namespace and record values, try to insert the most basic\n", "error": "none", "author": "tom@organisms.be"}, {"index": "85", "colour": "orange", "code": "scalar values you already have on hand.\n", "error": "none", "author": "tom@organisms.be"}, {"index": "86", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "87", "colour": "orange", "code": "When it comes time to report on the gathered data, however, we usually have\n", "error": "none", "author": "tom@organisms.be"}, {"index": "88", "colour": "orange", "code": "much more freedom in what we can calculate. Therefore, whenever reporting\n", "error": "none", "author": "tom@organisms.be"}, {"index": "89", "colour": "orange", "code": "tools (like the provided StatsPage CherryPy class) fetch the contents of\n", "error": "none", "author": "tom@organisms.be"}, {"index": "90", "colour": "orange", "code": "`logging.statistics` for reporting, they first call `extrapolate_statistics`\n", "error": "none", "author": "tom@organisms.be"}, {"index": "91", "colour": "orange", "code": "(passing the whole `statistics` dict as the only argument). This makes a\n", "error": "none", "author": "tom@organisms.be"}, {"index": "92", "colour": "orange", "code": "deep copy of the statistics dict so that the reporting tool can both iterate\n", "error": "none", "author": "tom@organisms.be"}, {"index": "93", "colour": "orange", "code": "over it and even change it without harming the original. But it also expands\n", "error": "none", "author": "tom@organisms.be"}, {"index": "94", "colour": "orange", "code": "any functions in the dict by calling them. For example, you might have a\n", "error": "none", "author": "tom@organisms.be"}, {"index": "95", "colour": "orange", "code": "'Current Time' entry in the namespace with the value \"lambda scope: time.time()\".\n", "error": "none", "author": "tom@organisms.be"}, {"index": "96", "colour": "orange", "code": "The \"scope\" parameter is the current namespace dict (or record, if we're\n", "error": "none", "author": "tom@organisms.be"}, {"index": "97", "colour": "orange", "code": "currently expanding one of those instead), allowing you access to existing\n", "error": "none", "author": "tom@organisms.be"}, {"index": "98", "colour": "orange", "code": "static entries. If you're truly evil, you can even modify more than one entry\n", "error": "none", "author": "tom@organisms.be"}, {"index": "99", "colour": "orange", "code": "at a time.\n", "error": "none", "author": "tom@organisms.be"}, {"index": "100", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "101", "colour": "orange", "code": "However, don't try to calculate an entry and then use its value in further\n", "error": "none", "author": "tom@organisms.be"}, {"index": "102", "colour": "orange", "code": "extrapolations; the order in which the functions are called is not guaranteed.\n", "error": "none", "author": "tom@organisms.be"}, {"index": "103", "colour": "orange", "code": "This can lead to a certain amount of duplicated work (or a redesign of your\n", "error": "none", "author": "tom@organisms.be"}, {"index": "104", "colour": "orange", "code": "schema), but that's better than complicating the spec.\n", "error": "none", "author": "tom@organisms.be"}, {"index": "105", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "106", "colour": "orange", "code": "After the whole thing has been extrapolated, it's time for:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "107", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "108", "colour": "orange", "code": "Reporting\n", "error": "none", "author": "tom@organisms.be"}, {"index": "109", "colour": "orange", "code": "---------\n", "error": "none", "author": "tom@organisms.be"}, {"index": "110", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "111", "colour": "orange", "code": "The StatsPage class grabs the `logging.statistics` dict, extrapolates it all,\n", "error": "none", "author": "tom@organisms.be"}, {"index": "112", "colour": "orange", "code": "and then transforms it to HTML for easy viewing. Each namespace gets its own\n", "error": "none", "author": "tom@organisms.be"}, {"index": "113", "colour": "orange", "code": "header and attribute table, plus an extra table for each collection. This is\n", "error": "none", "author": "tom@organisms.be"}, {"index": "114", "colour": "orange", "code": "NOT part of the statistics specification; other tools can format how they like.\n", "error": "none", "author": "tom@organisms.be"}, {"index": "115", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "116", "colour": "orange", "code": "You can control which columns are output and how they are formatted by updating\n", "error": "none", "author": "tom@organisms.be"}, {"index": "117", "colour": "orange", "code": "StatsPage.formatting, which is a dict that mirrors the keys and nesting of\n", "error": "none", "author": "tom@organisms.be"}, {"index": "118", "colour": "orange", "code": "`logging.statistics`. The difference is that, instead of data values, it has\n", "error": "none", "author": "tom@organisms.be"}, {"index": "119", "colour": "orange", "code": "formatting values. Use None for a given key to indicate to the StatsPage that a\n", "error": "none", "author": "tom@organisms.be"}, {"index": "120", "colour": "orange", "code": "given column should not be output. Use a string with formatting (such as '%.3f')\n", "error": "none", "author": "tom@organisms.be"}, {"index": "121", "colour": "orange", "code": "to interpolate the value(s), or use a callable (such as lambda v: v.isoformat())\n", "error": "none", "author": "tom@organisms.be"}, {"index": "122", "colour": "orange", "code": "for more advanced formatting. Any entry which is not mentioned in the formatting\n", "error": "none", "author": "tom@organisms.be"}, {"index": "123", "colour": "orange", "code": "dict is output unchanged.\n", "error": "none", "author": "tom@organisms.be"}, {"index": "124", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "125", "colour": "orange", "code": "Monitoring\n", "error": "none", "author": "tom@organisms.be"}, {"index": "126", "colour": "orange", "code": "----------\n", "error": "none", "author": "tom@organisms.be"}, {"index": "127", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "128", "colour": "orange", "code": "Although the HTML output takes pains to assign unique id's to each <td> with\n", "error": "none", "author": "tom@organisms.be"}, {"index": "129", "colour": "orange", "code": "statistical data, you're probably better off fetching /cpstats/data, which\n", "error": "none", "author": "tom@organisms.be"}, {"index": "130", "colour": "orange", "code": "outputs the whole (extrapolated) `logging.statistics` dict in JSON format.\n", "error": "none", "author": "tom@organisms.be"}, {"index": "131", "colour": "orange", "code": "That is probably easier to parse, and doesn't have any formatting controls,\n", "error": "none", "author": "tom@organisms.be"}, {"index": "132", "colour": "orange", "code": "so you get the \"original\" data in a consistently-serialized format.\n", "error": "none", "author": "tom@organisms.be"}, {"index": "133", "colour": "orange", "code": "Note: there's no treatment yet for datetime objects. Try time.time() instead\n", "error": "none", "author": "tom@organisms.be"}, {"index": "134", "colour": "orange", "code": "for now if you can. Nagios will probably thank you.\n", "error": "none", "author": "tom@organisms.be"}, {"index": "135", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "136", "colour": "orange", "code": "Turning Collection Off\n", "error": "none", "author": "tom@organisms.be"}, {"index": "137", "colour": "orange", "code": "----------------------\n", "error": "none", "author": "tom@organisms.be"}, {"index": "138", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "139", "colour": "orange", "code": "It is recommended each namespace have an \"Enabled\" item which, if False,\n", "error": "none", "author": "tom@organisms.be"}, {"index": "140", "colour": "orange", "code": "stops collection (but not reporting) of statistical data. Applications\n", "error": "none", "author": "tom@organisms.be"}, {"index": "141", "colour": "orange", "code": "SHOULD provide controls to pause and resume collection by setting these\n", "error": "none", "author": "tom@organisms.be"}, {"index": "142", "colour": "orange", "code": "entries to False or True, if present.\n", "error": "none", "author": "tom@organisms.be"}, {"index": "143", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "144", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "145", "colour": "orange", "code": "Usage\n", "error": "none", "author": "tom@organisms.be"}, {"index": "146", "colour": "orange", "code": "=====\n", "error": "none", "author": "tom@organisms.be"}, {"index": "147", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "148", "colour": "orange", "code": "To collect statistics on CherryPy applications:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "149", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "150", "colour": "orange", "code": "    from cherrypy.lib import cpstats\n", "error": "none", "author": "tom@organisms.be"}, {"index": "151", "colour": "orange", "code": "    appconfig['/']['tools.cpstats.on'] = True\n", "error": "none", "author": "tom@organisms.be"}, {"index": "152", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "153", "colour": "orange", "code": "To collect statistics on your own code:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "154", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "155", "colour": "orange", "code": "    import logging\n", "error": "none", "author": "tom@organisms.be"}, {"index": "156", "colour": "orange", "code": "    # Initialize the repository\n", "error": "none", "author": "tom@organisms.be"}, {"index": "157", "colour": "orange", "code": "    if not hasattr(logging, 'statistics'): logging.statistics = {}\n", "error": "none", "author": "tom@organisms.be"}, {"index": "158", "colour": "orange", "code": "    # Initialize my namespace\n", "error": "none", "author": "tom@organisms.be"}, {"index": "159", "colour": "orange", "code": "    mystats = logging.statistics.setdefault('My Stuff', {})\n", "error": "none", "author": "tom@organisms.be"}, {"index": "160", "colour": "orange", "code": "    # Initialize my namespace's scalars and collections\n", "error": "none", "author": "tom@organisms.be"}, {"index": "161", "colour": "orange", "code": "    mystats.update({\n", "error": "none", "author": "tom@organisms.be"}, {"index": "162", "colour": "orange", "code": "        'Enabled': True,\n", "error": "none", "author": "tom@organisms.be"}, {"index": "163", "colour": "orange", "code": "        'Start Time': time.time(),\n", "error": "none", "author": "tom@organisms.be"}, {"index": "164", "colour": "orange", "code": "        'Important Events': 0,\n", "error": "none", "author": "tom@organisms.be"}, {"index": "165", "colour": "orange", "code": "        'Events/Second': lambda s: (\n", "error": "none", "author": "tom@organisms.be"}, {"index": "166", "colour": "orange", "code": "            (s['Important Events'] / (time.time() - s['Start Time']))),\n", "error": "none", "author": "tom@organisms.be"}, {"index": "167", "colour": "orange", "code": "        })\n", "error": "none", "author": "tom@organisms.be"}, {"index": "168", "colour": "orange", "code": "    ...\n", "error": "none", "author": "tom@organisms.be"}, {"index": "169", "colour": "orange", "code": "    for event in events:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "170", "colour": "orange", "code": "        ...\n", "error": "none", "author": "tom@organisms.be"}, {"index": "171", "colour": "orange", "code": "        # Collect stats\n", "error": "none", "author": "tom@organisms.be"}, {"index": "172", "colour": "orange", "code": "        if mystats.get('Enabled', False):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "173", "colour": "orange", "code": "            mystats['Important Events'] += 1\n", "error": "none", "author": "tom@organisms.be"}, {"index": "174", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "175", "colour": "orange", "code": "To report statistics:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "176", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "177", "colour": "orange", "code": "    root.cpstats = cpstats.StatsPage()\n", "error": "none", "author": "tom@organisms.be"}, {"index": "178", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "179", "colour": "orange", "code": "To format statistics reports:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "180", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "181", "colour": "orange", "code": "    See 'Reporting', above.\n", "error": "none", "author": "tom@organisms.be"}, {"index": "182", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "183", "colour": "orange", "code": "\"\"\"\n", "error": "none", "author": "tom@organisms.be"}, {"index": "184", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "185", "colour": "orange", "code": "# -------------------------------- Statistics -------------------------------- #\n", "error": "none", "author": "tom@organisms.be"}, {"index": "186", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "187", "colour": "orange", "code": "import logging\n", "error": "none", "author": "tom@organisms.be"}, {"index": "188", "colour": "orange", "code": "if not hasattr(logging, 'statistics'): logging.statistics = {}\n", "error": "none", "author": "tom@organisms.be"}, {"index": "189", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "190", "colour": "orange", "code": "def extrapolate_statistics(scope):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "191", "colour": "orange", "code": "    \"\"\"Return an extrapolated copy of the given scope.\"\"\"\n", "error": "none", "author": "tom@organisms.be"}, {"index": "192", "colour": "orange", "code": "    c = {}\n", "error": "none", "author": "tom@organisms.be"}, {"index": "193", "colour": "orange", "code": "    for k, v in list(scope.items()):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "194", "colour": "orange", "code": "        if isinstance(v, dict):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "195", "colour": "orange", "code": "            v = extrapolate_statistics(v)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "196", "colour": "orange", "code": "        elif isinstance(v, (list, tuple)):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "197", "colour": "orange", "code": "            v = [extrapolate_statistics(record) for record in v]\n", "error": "none", "author": "tom@organisms.be"}, {"index": "198", "colour": "orange", "code": "        elif hasattr(v, '__call__'):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "199", "colour": "orange", "code": "            v = v(scope)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "200", "colour": "orange", "code": "        c[k] = v\n", "error": "none", "author": "tom@organisms.be"}, {"index": "201", "colour": "orange", "code": "    return c\n", "error": "none", "author": "tom@organisms.be"}, {"index": "202", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "203", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "204", "colour": "orange", "code": "# --------------------- CherryPy Applications Statistics --------------------- #\n", "error": "none", "author": "tom@organisms.be"}, {"index": "205", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "206", "colour": "orange", "code": "import threading\n", "error": "none", "author": "tom@organisms.be"}, {"index": "207", "colour": "orange", "code": "import time\n", "error": "none", "author": "tom@organisms.be"}, {"index": "208", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "209", "colour": "orange", "code": "import cherrypy\n", "error": "none", "author": "tom@organisms.be"}, {"index": "210", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "211", "colour": "orange", "code": "appstats = logging.statistics.setdefault('CherryPy Applications', {})\n", "error": "none", "author": "tom@organisms.be"}, {"index": "212", "colour": "orange", "code": "appstats.update({\n", "error": "none", "author": "tom@organisms.be"}, {"index": "213", "colour": "orange", "code": "    'Enabled': True,\n", "error": "none", "author": "tom@organisms.be"}, {"index": "214", "colour": "orange", "code": "    'Bytes Read/Request': lambda s: (s['Total Requests'] and\n", "error": "none", "author": "tom@organisms.be"}, {"index": "215", "colour": "orange", "code": "        (s['Total Bytes Read'] / float(s['Total Requests'])) or 0.0),\n", "error": "none", "author": "tom@organisms.be"}, {"index": "216", "colour": "orange", "code": "    'Bytes Read/Second': lambda s: s['Total Bytes Read'] / s['Uptime'](s),\n", "error": "none", "author": "tom@organisms.be"}, {"index": "217", "colour": "orange", "code": "    'Bytes Written/Request': lambda s: (s['Total Requests'] and\n", "error": "none", "author": "tom@organisms.be"}, {"index": "218", "colour": "orange", "code": "        (s['Total Bytes Written'] / float(s['Total Requests'])) or 0.0),\n", "error": "none", "author": "tom@organisms.be"}, {"index": "219", "colour": "orange", "code": "    'Bytes Written/Second': lambda s: s['Total Bytes Written'] / s['Uptime'](s),\n", "error": "none", "author": "tom@organisms.be"}, {"index": "220", "colour": "orange", "code": "    'Current Time': lambda s: time.time(),\n", "error": "none", "author": "tom@organisms.be"}, {"index": "221", "colour": "orange", "code": "    'Current Requests': 0,\n", "error": "none", "author": "tom@organisms.be"}, {"index": "222", "colour": "orange", "code": "    'Requests/Second': lambda s: float(s['Total Requests']) / s['Uptime'](s),\n", "error": "none", "author": "tom@organisms.be"}, {"index": "223", "colour": "orange", "code": "    'Server Version': cherrypy.__version__,\n", "error": "none", "author": "tom@organisms.be"}, {"index": "224", "colour": "orange", "code": "    'Start Time': time.time(),\n", "error": "none", "author": "tom@organisms.be"}, {"index": "225", "colour": "orange", "code": "    'Total Bytes Read': 0,\n", "error": "none", "author": "tom@organisms.be"}, {"index": "226", "colour": "orange", "code": "    'Total Bytes Written': 0,\n", "error": "none", "author": "tom@organisms.be"}, {"index": "227", "colour": "orange", "code": "    'Total Requests': 0,\n", "error": "none", "author": "tom@organisms.be"}, {"index": "228", "colour": "orange", "code": "    'Total Time': 0,\n", "error": "none", "author": "tom@organisms.be"}, {"index": "229", "colour": "orange", "code": "    'Uptime': lambda s: time.time() - s['Start Time'],\n", "error": "none", "author": "tom@organisms.be"}, {"index": "230", "colour": "orange", "code": "    'Requests': {},\n", "error": "none", "author": "tom@organisms.be"}, {"index": "231", "colour": "orange", "code": "    })\n", "error": "none", "author": "tom@organisms.be"}, {"index": "232", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "233", "colour": "orange", "code": "proc_time = lambda s: time.time() - s['Start Time']\n", "error": "none", "author": "tom@organisms.be"}, {"index": "234", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "235", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "236", "colour": "orange", "code": "class ByteCountWrapper(object):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "237", "colour": "orange", "code": "    \"\"\"Wraps a file-like object, counting the number of bytes read.\"\"\"\n", "error": "none", "author": "tom@organisms.be"}, {"index": "238", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "239", "colour": "orange", "code": "    def __init__(self, rfile):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "240", "colour": "orange", "code": "        self.rfile = rfile\n", "error": "none", "author": "tom@organisms.be"}, {"index": "241", "colour": "orange", "code": "        self.bytes_read = 0\n", "error": "none", "author": "tom@organisms.be"}, {"index": "242", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "243", "colour": "orange", "code": "    def read(self, size=-1):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "244", "colour": "orange", "code": "        data = self.rfile.read(size)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "245", "colour": "orange", "code": "        self.bytes_read += len(data)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "246", "colour": "orange", "code": "        return data\n", "error": "none", "author": "tom@organisms.be"}, {"index": "247", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "248", "colour": "orange", "code": "    def readline(self, size=-1):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "249", "colour": "orange", "code": "        data = self.rfile.readline(size)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "250", "colour": "orange", "code": "        self.bytes_read += len(data)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "251", "colour": "orange", "code": "        return data\n", "error": "none", "author": "tom@organisms.be"}, {"index": "252", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "253", "colour": "orange", "code": "    def readlines(self, sizehint=0):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "254", "colour": "orange", "code": "        # Shamelessly stolen from StringIO\n", "error": "none", "author": "tom@organisms.be"}, {"index": "255", "colour": "orange", "code": "        total = 0\n", "error": "none", "author": "tom@organisms.be"}, {"index": "256", "colour": "orange", "code": "        lines = []\n", "error": "none", "author": "tom@organisms.be"}, {"index": "257", "colour": "orange", "code": "        line = self.readline()\n", "error": "none", "author": "tom@organisms.be"}, {"index": "258", "colour": "orange", "code": "        while line:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "259", "colour": "orange", "code": "            lines.append(line)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "260", "colour": "orange", "code": "            total += len(line)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "261", "colour": "orange", "code": "            if 0 < sizehint <= total:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "262", "colour": "orange", "code": "                break\n", "error": "none", "author": "tom@organisms.be"}, {"index": "263", "colour": "orange", "code": "            line = self.readline()\n", "error": "none", "author": "tom@organisms.be"}, {"index": "264", "colour": "orange", "code": "        return lines\n", "error": "none", "author": "tom@organisms.be"}, {"index": "265", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "266", "colour": "orange", "code": "    def close(self):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "267", "colour": "orange", "code": "        self.rfile.close()\n", "error": "none", "author": "tom@organisms.be"}, {"index": "268", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "269", "colour": "orange", "code": "    def __iter__(self):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "270", "colour": "orange", "code": "        return self\n", "error": "none", "author": "tom@organisms.be"}, {"index": "271", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "272", "colour": "orange", "code": "    def next(self):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "273", "colour": "orange", "code": "        data = self.rfile.next()\n", "error": "none", "author": "tom@organisms.be"}, {"index": "274", "colour": "orange", "code": "        self.bytes_read += len(data)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "275", "colour": "orange", "code": "        return data\n", "error": "none", "author": "tom@organisms.be"}, {"index": "276", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "277", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "278", "colour": "orange", "code": "average_uriset_time = lambda s: s['Count'] and (s['Sum'] / s['Count']) or 0\n", "error": "none", "author": "tom@organisms.be"}, {"index": "279", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "280", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "281", "colour": "orange", "code": "class StatsTool(cherrypy.Tool):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "282", "colour": "orange", "code": "    \"\"\"Record various information about the current request.\"\"\"\n", "error": "none", "author": "tom@organisms.be"}, {"index": "283", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "284", "colour": "orange", "code": "    def __init__(self):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "285", "colour": "orange", "code": "        cherrypy.Tool.__init__(self, 'on_end_request', self.record_stop)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "286", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "287", "colour": "orange", "code": "    def _setup(self):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "288", "colour": "orange", "code": "        \"\"\"Hook this tool into cherrypy.request.\n", "error": "none", "author": "tom@organisms.be"}, {"index": "289", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "290", "colour": "orange", "code": "        The standard CherryPy request object will automatically call this\n", "error": "none", "author": "tom@organisms.be"}, {"index": "291", "colour": "orange", "code": "        method when the tool is \"turned on\" in config.\n", "error": "none", "author": "tom@organisms.be"}, {"index": "292", "colour": "orange", "code": "        \"\"\"\n", "error": "none", "author": "tom@organisms.be"}, {"index": "293", "colour": "orange", "code": "        if appstats.get('Enabled', False):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "294", "colour": "orange", "code": "            cherrypy.Tool._setup(self)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "295", "colour": "orange", "code": "            self.record_start()\n", "error": "none", "author": "tom@organisms.be"}, {"index": "296", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "297", "colour": "blue", "code": "    def record_start(self):\n", "error": "R", "author": "tom@organisms.be"}, {"index": "298", "colour": "orange", "code": "        \"\"\"Record the beginning of a request.\"\"\"\n", "error": "none", "author": "tom@organisms.be"}, {"index": "299", "colour": "orange", "code": "        request = cherrypy.serving.request\n", "error": "none", "author": "tom@organisms.be"}, {"index": "300", "colour": "orange", "code": "        if not hasattr(request.rfile, 'bytes_read'):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "301", "colour": "orange", "code": "            request.rfile = ByteCountWrapper(request.rfile)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "302", "colour": "orange", "code": "            request.body.fp = request.rfile\n", "error": "none", "author": "tom@organisms.be"}, {"index": "303", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "304", "colour": "orange", "code": "        r = request.remote\n", "error": "none", "author": "tom@organisms.be"}, {"index": "305", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "306", "colour": "orange", "code": "        appstats['Current Requests'] += 1\n", "error": "none", "author": "tom@organisms.be"}, {"index": "307", "colour": "orange", "code": "        appstats['Total Requests'] += 1\n", "error": "none", "author": "tom@organisms.be"}, {"index": "308", "colour": "green", "code": "        appstats['Requests'][threading._get_ident()] = {\n", "error": "W", "author": "tom@organisms.be"}, {"index": "309", "colour": "orange", "code": "            'Bytes Read': None,\n", "error": "none", "author": "tom@organisms.be"}, {"index": "310", "colour": "orange", "code": "            'Bytes Written': None,\n", "error": "none", "author": "tom@organisms.be"}, {"index": "311", "colour": "orange", "code": "            # Use a lambda so the ip gets updated by tools.proxy later\n", "error": "none", "author": "tom@organisms.be"}, {"index": "312", "colour": "orange", "code": "            'Client': lambda s: '%s:%s' % (r.ip, r.port),\n", "error": "none", "author": "tom@organisms.be"}, {"index": "313", "colour": "orange", "code": "            'End Time': None,\n", "error": "none", "author": "tom@organisms.be"}, {"index": "314", "colour": "orange", "code": "            'Processing Time': proc_time,\n", "error": "none", "author": "tom@organisms.be"}, {"index": "315", "colour": "orange", "code": "            'Request-Line': request.request_line,\n", "error": "none", "author": "tom@organisms.be"}, {"index": "316", "colour": "orange", "code": "            'Response Status': None,\n", "error": "none", "author": "tom@organisms.be"}, {"index": "317", "colour": "orange", "code": "            'Start Time': time.time(),\n", "error": "none", "author": "tom@organisms.be"}, {"index": "318", "colour": "orange", "code": "            }\n", "error": "none", "author": "tom@organisms.be"}, {"index": "319", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "320", "colour": "blue", "code": "    def record_stop(self, uriset=None, slow_queries=1.0, slow_queries_count=100,\n", "error": "R", "author": "tom@organisms.be"}, {"index": "321", "colour": "orange", "code": "                    debug=False, **kwargs):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "322", "colour": "orange", "code": "        \"\"\"Record the end of a request.\"\"\"\n", "error": "none", "author": "tom@organisms.be"}, {"index": "323", "colour": "orange", "code": "        resp = cherrypy.serving.response\n", "error": "none", "author": "tom@organisms.be"}, {"index": "324", "colour": "green", "code": "        w = appstats['Requests'][threading._get_ident()]\n", "error": "W", "author": "tom@organisms.be"}, {"index": "325", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "326", "colour": "orange", "code": "        r = cherrypy.request.rfile.bytes_read\n", "error": "none", "author": "tom@organisms.be"}, {"index": "327", "colour": "orange", "code": "        w['Bytes Read'] = r\n", "error": "none", "author": "tom@organisms.be"}, {"index": "328", "colour": "orange", "code": "        appstats['Total Bytes Read'] += r\n", "error": "none", "author": "tom@organisms.be"}, {"index": "329", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "330", "colour": "orange", "code": "        if resp.stream:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "331", "colour": "orange", "code": "            w['Bytes Written'] = 'chunked'\n", "error": "none", "author": "tom@organisms.be"}, {"index": "332", "colour": "orange", "code": "        else:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "333", "colour": "orange", "code": "            cl = int(resp.headers.get('Content-Length', 0))\n", "error": "none", "author": "tom@organisms.be"}, {"index": "334", "colour": "orange", "code": "            w['Bytes Written'] = cl\n", "error": "none", "author": "tom@organisms.be"}, {"index": "335", "colour": "orange", "code": "            appstats['Total Bytes Written'] += cl\n", "error": "none", "author": "tom@organisms.be"}, {"index": "336", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "337", "colour": "orange", "code": "        w['Response Status'] = getattr(resp, 'output_status', None) or resp.status\n", "error": "none", "author": "tom@organisms.be"}, {"index": "338", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "339", "colour": "orange", "code": "        w['End Time'] = time.time()\n", "error": "none", "author": "tom@organisms.be"}, {"index": "340", "colour": "orange", "code": "        p = w['End Time'] - w['Start Time']\n", "error": "none", "author": "tom@organisms.be"}, {"index": "341", "colour": "orange", "code": "        w['Processing Time'] = p\n", "error": "none", "author": "tom@organisms.be"}, {"index": "342", "colour": "orange", "code": "        appstats['Total Time'] += p\n", "error": "none", "author": "tom@organisms.be"}, {"index": "343", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "344", "colour": "orange", "code": "        appstats['Current Requests'] -= 1\n", "error": "none", "author": "tom@organisms.be"}, {"index": "345", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "346", "colour": "orange", "code": "        if debug:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "347", "colour": "orange", "code": "            cherrypy.log('Stats recorded: %s' % repr(w), 'TOOLS.CPSTATS')\n", "error": "none", "author": "tom@organisms.be"}, {"index": "348", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "349", "colour": "orange", "code": "        if uriset:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "350", "colour": "orange", "code": "            rs = appstats.setdefault('URI Set Tracking', {})\n", "error": "none", "author": "tom@organisms.be"}, {"index": "351", "colour": "orange", "code": "            r = rs.setdefault(uriset, {\n", "error": "none", "author": "tom@organisms.be"}, {"index": "352", "colour": "orange", "code": "                'Min': None, 'Max': None, 'Count': 0, 'Sum': 0,\n", "error": "none", "author": "tom@organisms.be"}, {"index": "353", "colour": "orange", "code": "                'Avg': average_uriset_time})\n", "error": "none", "author": "tom@organisms.be"}, {"index": "354", "colour": "orange", "code": "            if r['Min'] is None or p < r['Min']:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "355", "colour": "orange", "code": "                r['Min'] = p\n", "error": "none", "author": "tom@organisms.be"}, {"index": "356", "colour": "orange", "code": "            if r['Max'] is None or p > r['Max']:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "357", "colour": "orange", "code": "                r['Max'] = p\n", "error": "none", "author": "tom@organisms.be"}, {"index": "358", "colour": "orange", "code": "            r['Count'] += 1\n", "error": "none", "author": "tom@organisms.be"}, {"index": "359", "colour": "orange", "code": "            r['Sum'] += p\n", "error": "none", "author": "tom@organisms.be"}, {"index": "360", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "361", "colour": "orange", "code": "        if slow_queries and p > slow_queries:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "362", "colour": "orange", "code": "            sq = appstats.setdefault('Slow Queries', [])\n", "error": "none", "author": "tom@organisms.be"}, {"index": "363", "colour": "orange", "code": "            sq.append(w.copy())\n", "error": "none", "author": "tom@organisms.be"}, {"index": "364", "colour": "orange", "code": "            if len(sq) > slow_queries_count:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "365", "colour": "orange", "code": "                sq.pop(0)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "366", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "367", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "368", "colour": "green", "code": "import cherrypy\n", "error": "W", "author": "tom@organisms.be"}, {"index": "369", "colour": "orange", "code": "cherrypy.tools.cpstats = StatsTool()\n", "error": "none", "author": "tom@organisms.be"}, {"index": "370", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "371", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "372", "colour": "orange", "code": "# ---------------------- CherryPy Statistics Reporting ---------------------- #\n", "error": "none", "author": "tom@organisms.be"}, {"index": "373", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "374", "colour": "orange", "code": "import os\n", "error": "none", "author": "tom@organisms.be"}, {"index": "375", "colour": "orange", "code": "thisdir = os.path.abspath(os.path.dirname(__file__))\n", "error": "none", "author": "tom@organisms.be"}, {"index": "376", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "377", "colour": "orange", "code": "try:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "378", "colour": "orange", "code": "    import json\n", "error": "none", "author": "tom@organisms.be"}, {"index": "379", "colour": "orange", "code": "except ImportError:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "380", "colour": "orange", "code": "    try:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "381", "colour": "orange", "code": "        import simplejson as json\n", "error": "none", "author": "tom@organisms.be"}, {"index": "382", "colour": "orange", "code": "    except ImportError:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "383", "colour": "orange", "code": "        json = None\n", "error": "none", "author": "tom@organisms.be"}, {"index": "384", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "385", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "386", "colour": "orange", "code": "missing = object()\n", "error": "none", "author": "tom@organisms.be"}, {"index": "387", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "388", "colour": "orange", "code": "locale_date = lambda v: time.strftime('%c', time.gmtime(v))\n", "error": "none", "author": "tom@organisms.be"}, {"index": "389", "colour": "orange", "code": "iso_format = lambda v: time.strftime('%Y-%m-%d %H:%M:%S', time.gmtime(v))\n", "error": "none", "author": "tom@organisms.be"}, {"index": "390", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "391", "colour": "orange", "code": "def pause_resume(ns):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "392", "colour": "orange", "code": "    def _pause_resume(enabled):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "393", "colour": "orange", "code": "        pause_disabled = ''\n", "error": "none", "author": "tom@organisms.be"}, {"index": "394", "colour": "orange", "code": "        resume_disabled = ''\n", "error": "none", "author": "tom@organisms.be"}, {"index": "395", "colour": "orange", "code": "        if enabled:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "396", "colour": "orange", "code": "            resume_disabled = 'disabled=\"disabled\" '\n", "error": "none", "author": "tom@organisms.be"}, {"index": "397", "colour": "orange", "code": "        else:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "398", "colour": "orange", "code": "            pause_disabled = 'disabled=\"disabled\" '\n", "error": "none", "author": "tom@organisms.be"}, {"index": "399", "colour": "orange", "code": "        return \"\"\"\n", "error": "none", "author": "tom@organisms.be"}, {"index": "400", "colour": "orange", "code": "            <form action=\"pause\" method=\"POST\" style=\"display:inline\">\n", "error": "none", "author": "tom@organisms.be"}, {"index": "401", "colour": "orange", "code": "            <input type=\"hidden\" name=\"namespace\" value=\"%s\" />\n", "error": "none", "author": "tom@organisms.be"}, {"index": "402", "colour": "orange", "code": "            <input type=\"submit\" value=\"Pause\" %s/>\n", "error": "none", "author": "tom@organisms.be"}, {"index": "403", "colour": "orange", "code": "            </form>\n", "error": "none", "author": "tom@organisms.be"}, {"index": "404", "colour": "orange", "code": "            <form action=\"resume\" method=\"POST\" style=\"display:inline\">\n", "error": "none", "author": "tom@organisms.be"}, {"index": "405", "colour": "orange", "code": "            <input type=\"hidden\" name=\"namespace\" value=\"%s\" />\n", "error": "none", "author": "tom@organisms.be"}, {"index": "406", "colour": "orange", "code": "            <input type=\"submit\" value=\"Resume\" %s/>\n", "error": "none", "author": "tom@organisms.be"}, {"index": "407", "colour": "orange", "code": "            </form>\n", "error": "none", "author": "tom@organisms.be"}, {"index": "408", "colour": "orange", "code": "            \"\"\" % (ns, pause_disabled, ns, resume_disabled)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "409", "colour": "orange", "code": "    return _pause_resume\n", "error": "none", "author": "tom@organisms.be"}, {"index": "410", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "411", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "412", "colour": "orange", "code": "class StatsPage(object):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "413", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "414", "colour": "orange", "code": "    formatting = {\n", "error": "none", "author": "tom@organisms.be"}, {"index": "415", "colour": "orange", "code": "        'CherryPy Applications': {\n", "error": "none", "author": "tom@organisms.be"}, {"index": "416", "colour": "orange", "code": "            'Enabled': pause_resume('CherryPy Applications'),\n", "error": "none", "author": "tom@organisms.be"}, {"index": "417", "colour": "orange", "code": "            'Bytes Read/Request': '%.3f',\n", "error": "none", "author": "tom@organisms.be"}, {"index": "418", "colour": "orange", "code": "            'Bytes Read/Second': '%.3f',\n", "error": "none", "author": "tom@organisms.be"}, {"index": "419", "colour": "orange", "code": "            'Bytes Written/Request': '%.3f',\n", "error": "none", "author": "tom@organisms.be"}, {"index": "420", "colour": "orange", "code": "            'Bytes Written/Second': '%.3f',\n", "error": "none", "author": "tom@organisms.be"}, {"index": "421", "colour": "orange", "code": "            'Current Time': iso_format,\n", "error": "none", "author": "tom@organisms.be"}, {"index": "422", "colour": "orange", "code": "            'Requests/Second': '%.3f',\n", "error": "none", "author": "tom@organisms.be"}, {"index": "423", "colour": "orange", "code": "            'Start Time': iso_format,\n", "error": "none", "author": "tom@organisms.be"}, {"index": "424", "colour": "orange", "code": "            'Total Time': '%.3f',\n", "error": "none", "author": "tom@organisms.be"}, {"index": "425", "colour": "orange", "code": "            'Uptime': '%.3f',\n", "error": "none", "author": "tom@organisms.be"}, {"index": "426", "colour": "orange", "code": "            'Slow Queries': {\n", "error": "none", "author": "tom@organisms.be"}, {"index": "427", "colour": "orange", "code": "                'End Time': None,\n", "error": "none", "author": "tom@organisms.be"}, {"index": "428", "colour": "orange", "code": "                'Processing Time': '%.3f',\n", "error": "none", "author": "tom@organisms.be"}, {"index": "429", "colour": "orange", "code": "                'Start Time': iso_format,\n", "error": "none", "author": "tom@organisms.be"}, {"index": "430", "colour": "orange", "code": "                },\n", "error": "none", "author": "tom@organisms.be"}, {"index": "431", "colour": "orange", "code": "            'URI Set Tracking': {\n", "error": "none", "author": "tom@organisms.be"}, {"index": "432", "colour": "orange", "code": "                'Avg': '%.3f',\n", "error": "none", "author": "tom@organisms.be"}, {"index": "433", "colour": "orange", "code": "                'Max': '%.3f',\n", "error": "none", "author": "tom@organisms.be"}, {"index": "434", "colour": "orange", "code": "                'Min': '%.3f',\n", "error": "none", "author": "tom@organisms.be"}, {"index": "435", "colour": "orange", "code": "                'Sum': '%.3f',\n", "error": "none", "author": "tom@organisms.be"}, {"index": "436", "colour": "orange", "code": "                },\n", "error": "none", "author": "tom@organisms.be"}, {"index": "437", "colour": "orange", "code": "            'Requests': {\n", "error": "none", "author": "tom@organisms.be"}, {"index": "438", "colour": "orange", "code": "                'Bytes Read': '%s',\n", "error": "none", "author": "tom@organisms.be"}, {"index": "439", "colour": "orange", "code": "                'Bytes Written': '%s',\n", "error": "none", "author": "tom@organisms.be"}, {"index": "440", "colour": "orange", "code": "                'End Time': None,\n", "error": "none", "author": "tom@organisms.be"}, {"index": "441", "colour": "orange", "code": "                'Processing Time': '%.3f',\n", "error": "none", "author": "tom@organisms.be"}, {"index": "442", "colour": "orange", "code": "                'Start Time': None,\n", "error": "none", "author": "tom@organisms.be"}, {"index": "443", "colour": "orange", "code": "                },\n", "error": "none", "author": "tom@organisms.be"}, {"index": "444", "colour": "orange", "code": "        },\n", "error": "none", "author": "tom@organisms.be"}, {"index": "445", "colour": "orange", "code": "        'CherryPy WSGIServer': {\n", "error": "none", "author": "tom@organisms.be"}, {"index": "446", "colour": "orange", "code": "            'Enabled': pause_resume('CherryPy WSGIServer'),\n", "error": "none", "author": "tom@organisms.be"}, {"index": "447", "colour": "orange", "code": "            'Connections/second': '%.3f',\n", "error": "none", "author": "tom@organisms.be"}, {"index": "448", "colour": "orange", "code": "            'Start time': iso_format,\n", "error": "none", "author": "tom@organisms.be"}, {"index": "449", "colour": "orange", "code": "        },\n", "error": "none", "author": "tom@organisms.be"}, {"index": "450", "colour": "orange", "code": "    }\n", "error": "none", "author": "tom@organisms.be"}, {"index": "451", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "452", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "453", "colour": "orange", "code": "    def index(self):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "454", "colour": "orange", "code": "        # Transform the raw data into pretty output for HTML\n", "error": "none", "author": "tom@organisms.be"}, {"index": "455", "colour": "orange", "code": "        yield \"\"\"\n", "error": "none", "author": "tom@organisms.be"}, {"index": "456", "colour": "orange", "code": "<html>\n", "error": "none", "author": "tom@organisms.be"}, {"index": "457", "colour": "orange", "code": "<head>\n", "error": "none", "author": "tom@organisms.be"}, {"index": "458", "colour": "orange", "code": "    <title>Statistics</title>\n", "error": "none", "author": "tom@organisms.be"}, {"index": "459", "colour": "orange", "code": "<style>\n", "error": "none", "author": "tom@organisms.be"}, {"index": "460", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "461", "colour": "orange", "code": "th, td {\n", "error": "none", "author": "tom@organisms.be"}, {"index": "462", "colour": "orange", "code": "    padding: 0.25em 0.5em;\n", "error": "none", "author": "tom@organisms.be"}, {"index": "463", "colour": "orange", "code": "    border: 1px solid #666699;\n", "error": "none", "author": "tom@organisms.be"}, {"index": "464", "colour": "orange", "code": "}\n", "error": "none", "author": "tom@organisms.be"}, {"index": "465", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "466", "colour": "orange", "code": "table {\n", "error": "none", "author": "tom@organisms.be"}, {"index": "467", "colour": "orange", "code": "    border-collapse: collapse;\n", "error": "none", "author": "tom@organisms.be"}, {"index": "468", "colour": "orange", "code": "}\n", "error": "none", "author": "tom@organisms.be"}, {"index": "469", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "470", "colour": "orange", "code": "table.stats1 {\n", "error": "none", "author": "tom@organisms.be"}, {"index": "471", "colour": "orange", "code": "    width: 100%;\n", "error": "none", "author": "tom@organisms.be"}, {"index": "472", "colour": "orange", "code": "}\n", "error": "none", "author": "tom@organisms.be"}, {"index": "473", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "474", "colour": "orange", "code": "table.stats1 th {\n", "error": "none", "author": "tom@organisms.be"}, {"index": "475", "colour": "orange", "code": "    font-weight: bold;\n", "error": "none", "author": "tom@organisms.be"}, {"index": "476", "colour": "orange", "code": "    text-align: right;\n", "error": "none", "author": "tom@organisms.be"}, {"index": "477", "colour": "orange", "code": "    background-color: #CCD5DD;\n", "error": "none", "author": "tom@organisms.be"}, {"index": "478", "colour": "orange", "code": "}\n", "error": "none", "author": "tom@organisms.be"}, {"index": "479", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "480", "colour": "orange", "code": "table.stats2, h2 {\n", "error": "none", "author": "tom@organisms.be"}, {"index": "481", "colour": "orange", "code": "    margin-left: 50px;\n", "error": "none", "author": "tom@organisms.be"}, {"index": "482", "colour": "orange", "code": "}\n", "error": "none", "author": "tom@organisms.be"}, {"index": "483", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "484", "colour": "orange", "code": "table.stats2 th {\n", "error": "none", "author": "tom@organisms.be"}, {"index": "485", "colour": "orange", "code": "    font-weight: bold;\n", "error": "none", "author": "tom@organisms.be"}, {"index": "486", "colour": "orange", "code": "    text-align: center;\n", "error": "none", "author": "tom@organisms.be"}, {"index": "487", "colour": "orange", "code": "    background-color: #CCD5DD;\n", "error": "none", "author": "tom@organisms.be"}, {"index": "488", "colour": "orange", "code": "}\n", "error": "none", "author": "tom@organisms.be"}, {"index": "489", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "490", "colour": "orange", "code": "</style>\n", "error": "none", "author": "tom@organisms.be"}, {"index": "491", "colour": "orange", "code": "</head>\n", "error": "none", "author": "tom@organisms.be"}, {"index": "492", "colour": "orange", "code": "<body>\n", "error": "none", "author": "tom@organisms.be"}, {"index": "493", "colour": "orange", "code": "\"\"\"\n", "error": "none", "author": "tom@organisms.be"}, {"index": "494", "colour": "orange", "code": "        for title, scalars, collections in self.get_namespaces():\n", "error": "none", "author": "tom@organisms.be"}, {"index": "495", "colour": "orange", "code": "            yield \"\"\"\n", "error": "none", "author": "tom@organisms.be"}, {"index": "496", "colour": "orange", "code": "<h1>%s</h1>\n", "error": "none", "author": "tom@organisms.be"}, {"index": "497", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "498", "colour": "orange", "code": "<table class='stats1'>\n", "error": "none", "author": "tom@organisms.be"}, {"index": "499", "colour": "orange", "code": "    <tbody>\n", "error": "none", "author": "tom@organisms.be"}, {"index": "500", "colour": "orange", "code": "\"\"\" % title\n", "error": "none", "author": "tom@organisms.be"}, {"index": "501", "colour": "orange", "code": "            for i, (key, value) in enumerate(scalars):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "502", "colour": "orange", "code": "                colnum = i % 3\n", "error": "none", "author": "tom@organisms.be"}, {"index": "503", "colour": "orange", "code": "                if colnum == 0: yield \"\"\"\n", "error": "none", "author": "tom@organisms.be"}, {"index": "504", "colour": "orange", "code": "        <tr>\"\"\"\n", "error": "none", "author": "tom@organisms.be"}, {"index": "505", "colour": "orange", "code": "                yield \"\"\"\n", "error": "none", "author": "tom@organisms.be"}, {"index": "506", "colour": "orange", "code": "            <th>%(key)s</th><td id='%(title)s-%(key)s'>%(value)s</td>\"\"\" % vars()\n", "error": "none", "author": "tom@organisms.be"}, {"index": "507", "colour": "orange", "code": "                if colnum == 2: yield \"\"\"\n", "error": "none", "author": "tom@organisms.be"}, {"index": "508", "colour": "orange", "code": "        </tr>\"\"\"\n", "error": "none", "author": "tom@organisms.be"}, {"index": "509", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "510", "colour": "orange", "code": "            if colnum == 0: yield \"\"\"\n", "error": "none", "author": "tom@organisms.be"}, {"index": "511", "colour": "orange", "code": "            <th></th><td></td>\n", "error": "none", "author": "tom@organisms.be"}, {"index": "512", "colour": "orange", "code": "            <th></th><td></td>\n", "error": "none", "author": "tom@organisms.be"}, {"index": "513", "colour": "orange", "code": "        </tr>\"\"\"\n", "error": "none", "author": "tom@organisms.be"}, {"index": "514", "colour": "orange", "code": "            elif colnum == 1: yield \"\"\"\n", "error": "none", "author": "tom@organisms.be"}, {"index": "515", "colour": "orange", "code": "            <th></th><td></td>\n", "error": "none", "author": "tom@organisms.be"}, {"index": "516", "colour": "orange", "code": "        </tr>\"\"\"\n", "error": "none", "author": "tom@organisms.be"}, {"index": "517", "colour": "orange", "code": "            yield \"\"\"\n", "error": "none", "author": "tom@organisms.be"}, {"index": "518", "colour": "orange", "code": "    </tbody>\n", "error": "none", "author": "tom@organisms.be"}, {"index": "519", "colour": "orange", "code": "</table>\"\"\"\n", "error": "none", "author": "tom@organisms.be"}, {"index": "520", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "521", "colour": "orange", "code": "            for subtitle, headers, subrows in collections:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "522", "colour": "orange", "code": "                yield \"\"\"\n", "error": "none", "author": "tom@organisms.be"}, {"index": "523", "colour": "orange", "code": "<h2>%s</h2>\n", "error": "none", "author": "tom@organisms.be"}, {"index": "524", "colour": "orange", "code": "<table class='stats2'>\n", "error": "none", "author": "tom@organisms.be"}, {"index": "525", "colour": "orange", "code": "    <thead>\n", "error": "none", "author": "tom@organisms.be"}, {"index": "526", "colour": "orange", "code": "        <tr>\"\"\" % subtitle\n", "error": "none", "author": "tom@organisms.be"}, {"index": "527", "colour": "orange", "code": "                for key in headers:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "528", "colour": "orange", "code": "                    yield \"\"\"\n", "error": "none", "author": "tom@organisms.be"}, {"index": "529", "colour": "orange", "code": "            <th>%s</th>\"\"\" % key\n", "error": "none", "author": "tom@organisms.be"}, {"index": "530", "colour": "orange", "code": "                yield \"\"\"\n", "error": "none", "author": "tom@organisms.be"}, {"index": "531", "colour": "orange", "code": "        </tr>\n", "error": "none", "author": "tom@organisms.be"}, {"index": "532", "colour": "orange", "code": "    </thead>\n", "error": "none", "author": "tom@organisms.be"}, {"index": "533", "colour": "orange", "code": "    <tbody>\"\"\"\n", "error": "none", "author": "tom@organisms.be"}, {"index": "534", "colour": "orange", "code": "                for subrow in subrows:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "535", "colour": "orange", "code": "                    yield \"\"\"\n", "error": "none", "author": "tom@organisms.be"}, {"index": "536", "colour": "orange", "code": "        <tr>\"\"\"\n", "error": "none", "author": "tom@organisms.be"}, {"index": "537", "colour": "orange", "code": "                    for value in subrow:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "538", "colour": "orange", "code": "                        yield \"\"\"\n", "error": "none", "author": "tom@organisms.be"}, {"index": "539", "colour": "orange", "code": "            <td>%s</td>\"\"\" % value\n", "error": "none", "author": "tom@organisms.be"}, {"index": "540", "colour": "orange", "code": "                    yield \"\"\"\n", "error": "none", "author": "tom@organisms.be"}, {"index": "541", "colour": "orange", "code": "        </tr>\"\"\"\n", "error": "none", "author": "tom@organisms.be"}, {"index": "542", "colour": "orange", "code": "                yield \"\"\"\n", "error": "none", "author": "tom@organisms.be"}, {"index": "543", "colour": "orange", "code": "    </tbody>\n", "error": "none", "author": "tom@organisms.be"}, {"index": "544", "colour": "orange", "code": "</table>\"\"\"\n", "error": "none", "author": "tom@organisms.be"}, {"index": "545", "colour": "orange", "code": "        yield \"\"\"\n", "error": "none", "author": "tom@organisms.be"}, {"index": "546", "colour": "orange", "code": "</body>\n", "error": "none", "author": "tom@organisms.be"}, {"index": "547", "colour": "orange", "code": "</html>\n", "error": "none", "author": "tom@organisms.be"}, {"index": "548", "colour": "orange", "code": "\"\"\"\n", "error": "none", "author": "tom@organisms.be"}, {"index": "549", "colour": "orange", "code": "    index.exposed = True\n", "error": "none", "author": "tom@organisms.be"}, {"index": "550", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "551", "colour": "orange", "code": "    def get_namespaces(self):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "552", "colour": "orange", "code": "        \"\"\"Yield (title, scalars, collections) for each namespace.\"\"\"\n", "error": "none", "author": "tom@organisms.be"}, {"index": "553", "colour": "orange", "code": "        s = extrapolate_statistics(logging.statistics)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "554", "colour": "orange", "code": "        for title, ns in sorted(s.items()):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "555", "colour": "orange", "code": "            scalars = []\n", "error": "none", "author": "tom@organisms.be"}, {"index": "556", "colour": "orange", "code": "            collections = []\n", "error": "none", "author": "tom@organisms.be"}, {"index": "557", "colour": "orange", "code": "            ns_fmt = self.formatting.get(title, {})\n", "error": "none", "author": "tom@organisms.be"}, {"index": "558", "colour": "orange", "code": "            for k, v in sorted(ns.items()):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "559", "colour": "orange", "code": "                fmt = ns_fmt.get(k, {})\n", "error": "none", "author": "tom@organisms.be"}, {"index": "560", "colour": "orange", "code": "                if isinstance(v, dict):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "561", "colour": "orange", "code": "                    headers, subrows = self.get_dict_collection(v, fmt)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "562", "colour": "orange", "code": "                    collections.append((k, ['ID'] + headers, subrows))\n", "error": "none", "author": "tom@organisms.be"}, {"index": "563", "colour": "orange", "code": "                elif isinstance(v, (list, tuple)):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "564", "colour": "orange", "code": "                    headers, subrows = self.get_list_collection(v, fmt)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "565", "colour": "orange", "code": "                    collections.append((k, headers, subrows))\n", "error": "none", "author": "tom@organisms.be"}, {"index": "566", "colour": "orange", "code": "                else:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "567", "colour": "green", "code": "                    format = ns_fmt.get(k, missing)\n", "error": "W", "author": "tom@organisms.be"}, {"index": "568", "colour": "orange", "code": "                    if format is None:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "569", "colour": "orange", "code": "                        # Don't output this column.\n", "error": "none", "author": "tom@organisms.be"}, {"index": "570", "colour": "orange", "code": "                        continue\n", "error": "none", "author": "tom@organisms.be"}, {"index": "571", "colour": "orange", "code": "                    if hasattr(format, '__call__'):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "572", "colour": "orange", "code": "                        v = format(v)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "573", "colour": "orange", "code": "                    elif format is not missing:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "574", "colour": "orange", "code": "                        v = format % v\n", "error": "none", "author": "tom@organisms.be"}, {"index": "575", "colour": "orange", "code": "                    scalars.append((k, v))\n", "error": "none", "author": "tom@organisms.be"}, {"index": "576", "colour": "orange", "code": "            yield title, scalars, collections\n", "error": "none", "author": "tom@organisms.be"}, {"index": "577", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "578", "colour": "blue", "code": "    def get_dict_collection(self, v, formatting):\n", "error": "R", "author": "tom@organisms.be"}, {"index": "579", "colour": "orange", "code": "        \"\"\"Return ([headers], [rows]) for the given collection.\"\"\"\n", "error": "none", "author": "tom@organisms.be"}, {"index": "580", "colour": "orange", "code": "        # E.g., the 'Requests' dict.\n", "error": "none", "author": "tom@organisms.be"}, {"index": "581", "colour": "orange", "code": "        headers = []\n", "error": "none", "author": "tom@organisms.be"}, {"index": "582", "colour": "orange", "code": "        for record in v.itervalues():\n", "error": "none", "author": "tom@organisms.be"}, {"index": "583", "colour": "orange", "code": "            for k3 in record:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "584", "colour": "green", "code": "                format = formatting.get(k3, missing)\n", "error": "W", "author": "tom@organisms.be"}, {"index": "585", "colour": "orange", "code": "                if format is None:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "586", "colour": "orange", "code": "                    # Don't output this column.\n", "error": "none", "author": "tom@organisms.be"}, {"index": "587", "colour": "orange", "code": "                    continue\n", "error": "none", "author": "tom@organisms.be"}, {"index": "588", "colour": "orange", "code": "                if k3 not in headers:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "589", "colour": "orange", "code": "                    headers.append(k3)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "590", "colour": "orange", "code": "        headers.sort()\n", "error": "none", "author": "tom@organisms.be"}, {"index": "591", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "592", "colour": "orange", "code": "        subrows = []\n", "error": "none", "author": "tom@organisms.be"}, {"index": "593", "colour": "orange", "code": "        for k2, record in sorted(v.items()):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "594", "colour": "orange", "code": "            subrow = [k2]\n", "error": "none", "author": "tom@organisms.be"}, {"index": "595", "colour": "orange", "code": "            for k3 in headers:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "596", "colour": "orange", "code": "                v3 = record.get(k3, '')\n", "error": "none", "author": "tom@organisms.be"}, {"index": "597", "colour": "orange", "code": "                format = formatting.get(k3, missing)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "598", "colour": "orange", "code": "                if format is None:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "599", "colour": "orange", "code": "                    # Don't output this column.\n", "error": "none", "author": "tom@organisms.be"}, {"index": "600", "colour": "orange", "code": "                    continue\n", "error": "none", "author": "tom@organisms.be"}, {"index": "601", "colour": "orange", "code": "                if hasattr(format, '__call__'):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "602", "colour": "orange", "code": "                    v3 = format(v3)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "603", "colour": "orange", "code": "                elif format is not missing:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "604", "colour": "orange", "code": "                    v3 = format % v3\n", "error": "none", "author": "tom@organisms.be"}, {"index": "605", "colour": "orange", "code": "                subrow.append(v3)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "606", "colour": "orange", "code": "            subrows.append(subrow)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "607", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "608", "colour": "orange", "code": "        return headers, subrows\n", "error": "none", "author": "tom@organisms.be"}, {"index": "609", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "610", "colour": "blue", "code": "    def get_list_collection(self, v, formatting):\n", "error": "R", "author": "tom@organisms.be"}, {"index": "611", "colour": "orange", "code": "        \"\"\"Return ([headers], [subrows]) for the given collection.\"\"\"\n", "error": "none", "author": "tom@organisms.be"}, {"index": "612", "colour": "orange", "code": "        # E.g., the 'Slow Queries' list.\n", "error": "none", "author": "tom@organisms.be"}, {"index": "613", "colour": "orange", "code": "        headers = []\n", "error": "none", "author": "tom@organisms.be"}, {"index": "614", "colour": "orange", "code": "        for record in v:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "615", "colour": "orange", "code": "            for k3 in record:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "616", "colour": "green", "code": "                format = formatting.get(k3, missing)\n", "error": "W", "author": "tom@organisms.be"}, {"index": "617", "colour": "orange", "code": "                if format is None:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "618", "colour": "orange", "code": "                    # Don't output this column.\n", "error": "none", "author": "tom@organisms.be"}, {"index": "619", "colour": "orange", "code": "                    continue\n", "error": "none", "author": "tom@organisms.be"}, {"index": "620", "colour": "orange", "code": "                if k3 not in headers:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "621", "colour": "orange", "code": "                    headers.append(k3)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "622", "colour": "orange", "code": "        headers.sort()\n", "error": "none", "author": "tom@organisms.be"}, {"index": "623", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "624", "colour": "orange", "code": "        subrows = []\n", "error": "none", "author": "tom@organisms.be"}, {"index": "625", "colour": "orange", "code": "        for record in v:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "626", "colour": "orange", "code": "            subrow = []\n", "error": "none", "author": "tom@organisms.be"}, {"index": "627", "colour": "orange", "code": "            for k3 in headers:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "628", "colour": "orange", "code": "                v3 = record.get(k3, '')\n", "error": "none", "author": "tom@organisms.be"}, {"index": "629", "colour": "orange", "code": "                format = formatting.get(k3, missing)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "630", "colour": "orange", "code": "                if format is None:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "631", "colour": "orange", "code": "                    # Don't output this column.\n", "error": "none", "author": "tom@organisms.be"}, {"index": "632", "colour": "orange", "code": "                    continue\n", "error": "none", "author": "tom@organisms.be"}, {"index": "633", "colour": "orange", "code": "                if hasattr(format, '__call__'):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "634", "colour": "orange", "code": "                    v3 = format(v3)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "635", "colour": "orange", "code": "                elif format is not missing:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "636", "colour": "orange", "code": "                    v3 = format % v3\n", "error": "none", "author": "tom@organisms.be"}, {"index": "637", "colour": "orange", "code": "                subrow.append(v3)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "638", "colour": "orange", "code": "            subrows.append(subrow)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "639", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "640", "colour": "orange", "code": "        return headers, subrows\n", "error": "none", "author": "tom@organisms.be"}, {"index": "641", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "642", "colour": "orange", "code": "    if json is not None:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "643", "colour": "blue", "code": "        def data(self):\n", "error": "R", "author": "tom@organisms.be"}, {"index": "644", "colour": "orange", "code": "            s = extrapolate_statistics(logging.statistics)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "645", "colour": "orange", "code": "            cherrypy.response.headers['Content-Type'] = 'application/json'\n", "error": "none", "author": "tom@organisms.be"}, {"index": "646", "colour": "orange", "code": "            return json.dumps(s, sort_keys=True, indent=4)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "647", "colour": "orange", "code": "        data.exposed = True\n", "error": "none", "author": "tom@organisms.be"}, {"index": "648", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "649", "colour": "blue", "code": "    def pause(self, namespace):\n", "error": "R", "author": "tom@organisms.be"}, {"index": "650", "colour": "orange", "code": "        logging.statistics.get(namespace, {})['Enabled'] = False\n", "error": "none", "author": "tom@organisms.be"}, {"index": "651", "colour": "orange", "code": "        raise cherrypy.HTTPRedirect('./')\n", "error": "none", "author": "tom@organisms.be"}, {"index": "652", "colour": "orange", "code": "    pause.exposed = True\n", "error": "none", "author": "tom@organisms.be"}, {"index": "653", "colour": "orange", "code": "    pause.cp_config = {'tools.allow.on': True,\n", "error": "none", "author": "tom@organisms.be"}, {"index": "654", "colour": "orange", "code": "                       'tools.allow.methods': ['POST']}\n", "error": "none", "author": "tom@organisms.be"}, {"index": "655", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "656", "colour": "blue", "code": "    def resume(self, namespace):\n", "error": "R", "author": "tom@organisms.be"}, {"index": "657", "colour": "orange", "code": "        logging.statistics.get(namespace, {})['Enabled'] = True\n", "error": "none", "author": "tom@organisms.be"}, {"index": "658", "colour": "orange", "code": "        raise cherrypy.HTTPRedirect('./')\n", "error": "none", "author": "tom@organisms.be"}, {"index": "659", "colour": "orange", "code": "    resume.exposed = True\n", "error": "none", "author": "tom@organisms.be"}, {"index": "660", "colour": "orange", "code": "    resume.cp_config = {'tools.allow.on': True,\n", "error": "none", "author": "tom@organisms.be"}, {"index": "661", "colour": "orange", "code": "                        'tools.allow.methods': ['POST']}\n", "error": "none", "author": "tom@organisms.be"}, {"index": "662", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}]]}