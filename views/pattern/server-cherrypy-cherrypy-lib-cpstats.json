{"path": "/home/asumal/git/cs410/pattern/pattern/server/cherrypy/cherrypy/lib/cpstats.py", "lines": [[{"error": "none", "line": "1", "code": "\"\"\"CPStats, a package for collecting and reporting on program statistics.\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "2", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "3", "code": "Overview\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "4", "code": "========\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "5", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "6", "code": "Statistics about program operation are an invaluable monitoring and debugging\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "7", "code": "tool. Unfortunately, the gathering and reporting of these critical values is\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "8", "code": "usually ad-hoc. This package aims to add a centralized place for gathering\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "9", "code": "statistical performance data, a structure for recording that data which\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "10", "code": "provides for extrapolation of that data into more useful information,\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "11", "code": "and a method of serving that data to both human investigators and\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "12", "code": "monitoring software. Let's examine each of those in more detail.\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "13", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "14", "code": "Data Gathering\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "15", "code": "--------------\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "16", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "17", "code": "Just as Python's `logging` module provides a common importable for gathering\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "18", "code": "and sending messages, performance statistics would benefit from a similar\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "19", "code": "common mechanism, and one that does *not* require each package which wishes\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "20", "code": "to collect stats to import a third-party module. Therefore, we choose to\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "21", "code": "re-use the `logging` module by adding a `statistics` object to it.\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "22", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "23", "code": "That `logging.statistics` object is a nested dict. It is not a custom class,\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "24", "code": "because that would 1) require libraries and applications to import a third-\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "25", "code": "party module in order to participate, 2) inhibit innovation in extrapolation\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "26", "code": "approaches and in reporting tools, and 3) be slow. There are, however, some\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "27", "code": "specifications regarding the structure of the dict.\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "28", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "29", "code": "    {\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "30", "code": "   +----\"SQLAlchemy\": {\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "31", "code": "   |        \"Inserts\": 4389745,\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "32", "code": "   |        \"Inserts per Second\":\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "33", "code": "   |            lambda s: s[\"Inserts\"] / (time() - s[\"Start\"]),\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "34", "code": "   |  C +---\"Table Statistics\": {\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "35", "code": "   |  o |        \"widgets\": {-----------+\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "36", "code": " N |  l |            \"Rows\": 1.3M,      | Record\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "37", "code": " a |  l |            \"Inserts\": 400,    |\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "38", "code": " m |  e |        },---------------------+\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "39", "code": " e |  c |        \"froobles\": {\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "40", "code": " s |  t |            \"Rows\": 7845,\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "41", "code": " p |  i |            \"Inserts\": 0,\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "42", "code": " a |  o |        },\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "43", "code": " c |  n +---},\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "44", "code": " e |        \"Slow Queries\":\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "45", "code": "   |            [{\"Query\": \"SELECT * FROM widgets;\",\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "46", "code": "   |              \"Processing Time\": 47.840923343,\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "47", "code": "   |              },\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "48", "code": "   |             ],\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "49", "code": "   +----},\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "50", "code": "    }\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "51", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "52", "code": "The `logging.statistics` dict has four levels. The topmost level is nothing\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "53", "code": "more than a set of names to introduce modularity, usually along the lines of\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "54", "code": "package names. If the SQLAlchemy project wanted to participate, for example,\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "55", "code": "it might populate the item `logging.statistics['SQLAlchemy']`, whose value\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "56", "code": "would be a second-layer dict we call a \"namespace\". Namespaces help multiple\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "57", "code": "packages to avoid collisions over key names, and make reports easier to read,\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "58", "code": "to boot. The maintainers of SQLAlchemy should feel free to use more than one\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "59", "code": "namespace if needed (such as 'SQLAlchemy ORM'). Note that there are no case\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "60", "code": "or other syntax constraints on the namespace names; they should be chosen\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "61", "code": "to be maximally readable by humans (neither too short nor too long).\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "62", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "63", "code": "Each namespace, then, is a dict of named statistical values, such as\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "64", "code": "'Requests/sec' or 'Uptime'. You should choose names which will look\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "65", "code": "good on a report: spaces and capitalization are just fine.\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "66", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "67", "code": "In addition to scalars, values in a namespace MAY be a (third-layer)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "68", "code": "dict, or a list, called a \"collection\". For example, the CherryPy StatsTool\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "69", "code": "keeps track of what each request is doing (or has most recently done)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "70", "code": "in a 'Requests' collection, where each key is a thread ID; each\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "71", "code": "value in the subdict MUST be a fourth dict (whew!) of statistical data about\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "72", "code": "each thread. We call each subdict in the collection a \"record\". Similarly,\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "73", "code": "the StatsTool also keeps a list of slow queries, where each record contains\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "74", "code": "data about each slow query, in order.\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "75", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "76", "code": "Values in a namespace or record may also be functions, which brings us to:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "77", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "78", "code": "Extrapolation\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "79", "code": "-------------\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "80", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "81", "code": "The collection of statistical data needs to be fast, as close to unnoticeable\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "82", "code": "as possible to the host program. That requires us to minimize I/O, for example,\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "83", "code": "but in Python it also means we need to minimize function calls. So when you\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "84", "code": "are designing your namespace and record values, try to insert the most basic\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "85", "code": "scalar values you already have on hand.\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "86", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "87", "code": "When it comes time to report on the gathered data, however, we usually have\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "88", "code": "much more freedom in what we can calculate. Therefore, whenever reporting\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "89", "code": "tools (like the provided StatsPage CherryPy class) fetch the contents of\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "90", "code": "`logging.statistics` for reporting, they first call `extrapolate_statistics`\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "91", "code": "(passing the whole `statistics` dict as the only argument). This makes a\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "92", "code": "deep copy of the statistics dict so that the reporting tool can both iterate\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "93", "code": "over it and even change it without harming the original. But it also expands\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "94", "code": "any functions in the dict by calling them. For example, you might have a\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "95", "code": "'Current Time' entry in the namespace with the value \"lambda scope: time.time()\".\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "96", "code": "The \"scope\" parameter is the current namespace dict (or record, if we're\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "97", "code": "currently expanding one of those instead), allowing you access to existing\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "98", "code": "static entries. If you're truly evil, you can even modify more than one entry\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "99", "code": "at a time.\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "100", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "101", "code": "However, don't try to calculate an entry and then use its value in further\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "102", "code": "extrapolations; the order in which the functions are called is not guaranteed.\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "103", "code": "This can lead to a certain amount of duplicated work (or a redesign of your\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "104", "code": "schema), but that's better than complicating the spec.\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "105", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "106", "code": "After the whole thing has been extrapolated, it's time for:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "107", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "108", "code": "Reporting\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "109", "code": "---------\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "110", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "111", "code": "The StatsPage class grabs the `logging.statistics` dict, extrapolates it all,\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "112", "code": "and then transforms it to HTML for easy viewing. Each namespace gets its own\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "113", "code": "header and attribute table, plus an extra table for each collection. This is\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "114", "code": "NOT part of the statistics specification; other tools can format how they like.\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "115", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "116", "code": "You can control which columns are output and how they are formatted by updating\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "117", "code": "StatsPage.formatting, which is a dict that mirrors the keys and nesting of\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "118", "code": "`logging.statistics`. The difference is that, instead of data values, it has\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "119", "code": "formatting values. Use None for a given key to indicate to the StatsPage that a\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "120", "code": "given column should not be output. Use a string with formatting (such as '%.3f')\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "121", "code": "to interpolate the value(s), or use a callable (such as lambda v: v.isoformat())\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "122", "code": "for more advanced formatting. Any entry which is not mentioned in the formatting\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "123", "code": "dict is output unchanged.\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "124", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "125", "code": "Monitoring\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "126", "code": "----------\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "127", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "128", "code": "Although the HTML output takes pains to assign unique id's to each <td> with\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "129", "code": "statistical data, you're probably better off fetching /cpstats/data, which\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "130", "code": "outputs the whole (extrapolated) `logging.statistics` dict in JSON format.\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "131", "code": "That is probably easier to parse, and doesn't have any formatting controls,\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "132", "code": "so you get the \"original\" data in a consistently-serialized format.\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "133", "code": "Note: there's no treatment yet for datetime objects. Try time.time() instead\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "134", "code": "for now if you can. Nagios will probably thank you.\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "135", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "136", "code": "Turning Collection Off\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "137", "code": "----------------------\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "138", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "139", "code": "It is recommended each namespace have an \"Enabled\" item which, if False,\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "140", "code": "stops collection (but not reporting) of statistical data. Applications\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "141", "code": "SHOULD provide controls to pause and resume collection by setting these\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "142", "code": "entries to False or True, if present.\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "143", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "144", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "145", "code": "Usage\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "146", "code": "=====\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "147", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "148", "code": "To collect statistics on CherryPy applications:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "149", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "150", "code": "    from cherrypy.lib import cpstats\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "151", "code": "    appconfig['/']['tools.cpstats.on'] = True\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "152", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "153", "code": "To collect statistics on your own code:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "154", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "155", "code": "    import logging\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "156", "code": "    # Initialize the repository\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "157", "code": "    if not hasattr(logging, 'statistics'): logging.statistics = {}\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "158", "code": "    # Initialize my namespace\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "159", "code": "    mystats = logging.statistics.setdefault('My Stuff', {})\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "160", "code": "    # Initialize my namespace's scalars and collections\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "161", "code": "    mystats.update({\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "162", "code": "        'Enabled': True,\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "163", "code": "        'Start Time': time.time(),\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "164", "code": "        'Important Events': 0,\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "165", "code": "        'Events/Second': lambda s: (\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "166", "code": "            (s['Important Events'] / (time.time() - s['Start Time']))),\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "167", "code": "        })\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "168", "code": "    ...\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "169", "code": "    for event in events:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "170", "code": "        ...\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "171", "code": "        # Collect stats\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "172", "code": "        if mystats.get('Enabled', False):\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "173", "code": "            mystats['Important Events'] += 1\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "174", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "175", "code": "To report statistics:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "176", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "177", "code": "    root.cpstats = cpstats.StatsPage()\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "178", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "179", "code": "To format statistics reports:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "180", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "181", "code": "    See 'Reporting', above.\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "182", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "183", "code": "\"\"\"\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "184", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "185", "code": "# -------------------------------- Statistics -------------------------------- #\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "186", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "187", "code": "import logging\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "188", "code": "if not hasattr(logging, 'statistics'): logging.statistics = {}\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "189", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "190", "code": "def extrapolate_statistics(scope):\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "191", "code": "    \"\"\"Return an extrapolated copy of the given scope.\"\"\"\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "192", "code": "    c = {}\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "C", "line": "193", "code": "    for k, v in list(scope.items()):\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "194", "code": "        if isinstance(v, dict):\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "195", "code": "            v = extrapolate_statistics(v)\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "196", "code": "        elif isinstance(v, (list, tuple)):\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "197", "code": "            v = [extrapolate_statistics(record) for record in v]\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "198", "code": "        elif hasattr(v, '__call__'):\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "199", "code": "            v = v(scope)\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "200", "code": "        c[k] = v\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "201", "code": "    return c\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "202", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "203", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "204", "code": "# --------------------- CherryPy Applications Statistics --------------------- #\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "205", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "206", "code": "import threading\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "207", "code": "import time\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "208", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "209", "code": "import cherrypy\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "210", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "211", "code": "appstats = logging.statistics.setdefault('CherryPy Applications', {})\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "212", "code": "appstats.update({\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "213", "code": "    'Enabled': True,\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "214", "code": "    'Bytes Read/Request': lambda s: (s['Total Requests'] and\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "215", "code": "        (s['Total Bytes Read'] / float(s['Total Requests'])) or 0.0),\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "216", "code": "    'Bytes Read/Second': lambda s: s['Total Bytes Read'] / s['Uptime'](s),\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "217", "code": "    'Bytes Written/Request': lambda s: (s['Total Requests'] and\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "218", "code": "        (s['Total Bytes Written'] / float(s['Total Requests'])) or 0.0),\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "219", "code": "    'Bytes Written/Second': lambda s: s['Total Bytes Written'] / s['Uptime'](s),\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "220", "code": "    'Current Time': lambda s: time.time(),\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "221", "code": "    'Current Requests': 0,\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "222", "code": "    'Requests/Second': lambda s: float(s['Total Requests']) / s['Uptime'](s),\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "223", "code": "    'Server Version': cherrypy.__version__,\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "224", "code": "    'Start Time': time.time(),\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "225", "code": "    'Total Bytes Read': 0,\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "226", "code": "    'Total Bytes Written': 0,\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "227", "code": "    'Total Requests': 0,\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "228", "code": "    'Total Time': 0,\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "229", "code": "    'Uptime': lambda s: time.time() - s['Start Time'],\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "230", "code": "    'Requests': {},\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "231", "code": "    })\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "232", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "233", "code": "proc_time = lambda s: time.time() - s['Start Time']\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "234", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "235", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "236", "code": "class ByteCountWrapper(object):\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "237", "code": "    \"\"\"Wraps a file-like object, counting the number of bytes read.\"\"\"\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "238", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "239", "code": "    def __init__(self, rfile):\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "240", "code": "        self.rfile = rfile\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "241", "code": "        self.bytes_read = 0\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "242", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "243", "code": "    def read(self, size=-1):\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "244", "code": "        data = self.rfile.read(size)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "245", "code": "        self.bytes_read += len(data)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "246", "code": "        return data\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "247", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "248", "code": "    def readline(self, size=-1):\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "249", "code": "        data = self.rfile.readline(size)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "250", "code": "        self.bytes_read += len(data)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "251", "code": "        return data\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "252", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "253", "code": "    def readlines(self, sizehint=0):\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "254", "code": "        # Shamelessly stolen from StringIO\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "255", "code": "        total = 0\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "256", "code": "        lines = []\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "257", "code": "        line = self.readline()\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "258", "code": "        while line:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "259", "code": "            lines.append(line)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "260", "code": "            total += len(line)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "261", "code": "            if 0 < sizehint <= total:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "262", "code": "                break\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "263", "code": "            line = self.readline()\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "264", "code": "        return lines\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "265", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "266", "code": "    def close(self):\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "267", "code": "        self.rfile.close()\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "268", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "269", "code": "    def __iter__(self):\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "270", "code": "        return self\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "271", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "272", "code": "    def next(self):\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "273", "code": "        data = self.rfile.next()\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "274", "code": "        self.bytes_read += len(data)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "275", "code": "        return data\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "276", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "277", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "278", "code": "average_uriset_time = lambda s: s['Count'] and (s['Sum'] / s['Count']) or 0\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "279", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "280", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "281", "code": "class StatsTool(cherrypy.Tool):\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "282", "code": "    \"\"\"Record various information about the current request.\"\"\"\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "283", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "284", "code": "    def __init__(self):\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "285", "code": "        cherrypy.Tool.__init__(self, 'on_end_request', self.record_stop)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "286", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "287", "code": "    def _setup(self):\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "288", "code": "        \"\"\"Hook this tool into cherrypy.request.\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "289", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "290", "code": "        The standard CherryPy request object will automatically call this\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "291", "code": "        method when the tool is \"turned on\" in config.\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "292", "code": "        \"\"\"\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "293", "code": "        if appstats.get('Enabled', False):\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "294", "code": "            cherrypy.Tool._setup(self)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "295", "code": "            self.record_start()\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "296", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "R", "line": "297", "code": "    def record_start(self):\n", "colour": "green", "author": "tom@organisms.be"}, {"error": "none", "line": "298", "code": "        \"\"\"Record the beginning of a request.\"\"\"\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "299", "code": "        request = cherrypy.serving.request\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "300", "code": "        if not hasattr(request.rfile, 'bytes_read'):\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "301", "code": "            request.rfile = ByteCountWrapper(request.rfile)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "302", "code": "            request.body.fp = request.rfile\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "303", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "304", "code": "        r = request.remote\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "305", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "306", "code": "        appstats['Current Requests'] += 1\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "307", "code": "        appstats['Total Requests'] += 1\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "W", "line": "308", "code": "        appstats['Requests'][threading._get_ident()] = {\n", "colour": "purple", "author": "tom@organisms.be"}, {"error": "none", "line": "309", "code": "            'Bytes Read': None,\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "310", "code": "            'Bytes Written': None,\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "311", "code": "            # Use a lambda so the ip gets updated by tools.proxy later\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "312", "code": "            'Client': lambda s: '%s:%s' % (r.ip, r.port),\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "313", "code": "            'End Time': None,\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "314", "code": "            'Processing Time': proc_time,\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "315", "code": "            'Request-Line': request.request_line,\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "316", "code": "            'Response Status': None,\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "317", "code": "            'Start Time': time.time(),\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "318", "code": "            }\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "319", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "R", "line": "320", "code": "    def record_stop(self, uriset=None, slow_queries=1.0, slow_queries_count=100,\n", "colour": "green", "author": "tom@organisms.be"}, {"error": "none", "line": "321", "code": "                    debug=False, **kwargs):\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "322", "code": "        \"\"\"Record the end of a request.\"\"\"\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "323", "code": "        resp = cherrypy.serving.response\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "W", "line": "324", "code": "        w = appstats['Requests'][threading._get_ident()]\n", "colour": "purple", "author": "tom@organisms.be"}, {"error": "none", "line": "325", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "326", "code": "        r = cherrypy.request.rfile.bytes_read\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "327", "code": "        w['Bytes Read'] = r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "328", "code": "        appstats['Total Bytes Read'] += r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "329", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "330", "code": "        if resp.stream:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "331", "code": "            w['Bytes Written'] = 'chunked'\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "332", "code": "        else:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "333", "code": "            cl = int(resp.headers.get('Content-Length', 0))\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "334", "code": "            w['Bytes Written'] = cl\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "335", "code": "            appstats['Total Bytes Written'] += cl\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "336", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "337", "code": "        w['Response Status'] = getattr(resp, 'output_status', None) or resp.status\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "338", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "339", "code": "        w['End Time'] = time.time()\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "340", "code": "        p = w['End Time'] - w['Start Time']\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "341", "code": "        w['Processing Time'] = p\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "342", "code": "        appstats['Total Time'] += p\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "343", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "344", "code": "        appstats['Current Requests'] -= 1\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "345", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "346", "code": "        if debug:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "347", "code": "            cherrypy.log('Stats recorded: %s' % repr(w), 'TOOLS.CPSTATS')\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "348", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "349", "code": "        if uriset:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "350", "code": "            rs = appstats.setdefault('URI Set Tracking', {})\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "C", "line": "351", "code": "            r = rs.setdefault(uriset, {\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "352", "code": "                'Min': None, 'Max': None, 'Count': 0, 'Sum': 0,\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "353", "code": "                'Avg': average_uriset_time})\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "354", "code": "            if r['Min'] is None or p < r['Min']:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "355", "code": "                r['Min'] = p\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "356", "code": "            if r['Max'] is None or p > r['Max']:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "357", "code": "                r['Max'] = p\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "358", "code": "            r['Count'] += 1\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "359", "code": "            r['Sum'] += p\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "360", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "361", "code": "        if slow_queries and p > slow_queries:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "362", "code": "            sq = appstats.setdefault('Slow Queries', [])\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "363", "code": "            sq.append(w.copy())\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "364", "code": "            if len(sq) > slow_queries_count:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "365", "code": "                sq.pop(0)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "366", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "367", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "W", "line": "368", "code": "import cherrypy\n", "colour": "purple", "author": "tom@organisms.be"}, {"error": "none", "line": "369", "code": "cherrypy.tools.cpstats = StatsTool()\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "370", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "371", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "372", "code": "# ---------------------- CherryPy Statistics Reporting ---------------------- #\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "373", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "374", "code": "import os\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "375", "code": "thisdir = os.path.abspath(os.path.dirname(__file__))\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "376", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "377", "code": "try:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "378", "code": "    import json\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "379", "code": "except ImportError:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "380", "code": "    try:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "F", "line": "381", "code": "        import simplejson as json\n", "colour": "red", "author": "tom@organisms.be"}, {"error": "none", "line": "382", "code": "    except ImportError:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "383", "code": "        json = None\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "384", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "385", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "386", "code": "missing = object()\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "387", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "388", "code": "locale_date = lambda v: time.strftime('%c', time.gmtime(v))\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "C", "line": "389", "code": "iso_format = lambda v: time.strftime('%Y-%m-%d %H:%M:%S', time.gmtime(v))\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "390", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "391", "code": "def pause_resume(ns):\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "C", "line": "392", "code": "    def _pause_resume(enabled):\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "393", "code": "        pause_disabled = ''\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "394", "code": "        resume_disabled = ''\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "395", "code": "        if enabled:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "396", "code": "            resume_disabled = 'disabled=\"disabled\" '\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "397", "code": "        else:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "398", "code": "            pause_disabled = 'disabled=\"disabled\" '\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "399", "code": "        return \"\"\"\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "400", "code": "            <form action=\"pause\" method=\"POST\" style=\"display:inline\">\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "401", "code": "            <input type=\"hidden\" name=\"namespace\" value=\"%s\" />\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "402", "code": "            <input type=\"submit\" value=\"Pause\" %s/>\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "403", "code": "            </form>\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "404", "code": "            <form action=\"resume\" method=\"POST\" style=\"display:inline\">\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "405", "code": "            <input type=\"hidden\" name=\"namespace\" value=\"%s\" />\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "406", "code": "            <input type=\"submit\" value=\"Resume\" %s/>\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "407", "code": "            </form>\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "408", "code": "            \"\"\" % (ns, pause_disabled, ns, resume_disabled)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "409", "code": "    return _pause_resume\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "410", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "411", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "412", "code": "class StatsPage(object):\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "413", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "414", "code": "    formatting = {\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "415", "code": "        'CherryPy Applications': {\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "416", "code": "            'Enabled': pause_resume('CherryPy Applications'),\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "417", "code": "            'Bytes Read/Request': '%.3f',\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "418", "code": "            'Bytes Read/Second': '%.3f',\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "419", "code": "            'Bytes Written/Request': '%.3f',\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "420", "code": "            'Bytes Written/Second': '%.3f',\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "421", "code": "            'Current Time': iso_format,\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "422", "code": "            'Requests/Second': '%.3f',\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "423", "code": "            'Start Time': iso_format,\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "424", "code": "            'Total Time': '%.3f',\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "425", "code": "            'Uptime': '%.3f',\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "426", "code": "            'Slow Queries': {\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "427", "code": "                'End Time': None,\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "428", "code": "                'Processing Time': '%.3f',\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "429", "code": "                'Start Time': iso_format,\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "430", "code": "                },\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "431", "code": "            'URI Set Tracking': {\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "432", "code": "                'Avg': '%.3f',\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "433", "code": "                'Max': '%.3f',\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "434", "code": "                'Min': '%.3f',\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "435", "code": "                'Sum': '%.3f',\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "436", "code": "                },\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "437", "code": "            'Requests': {\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "438", "code": "                'Bytes Read': '%s',\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "439", "code": "                'Bytes Written': '%s',\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "440", "code": "                'End Time': None,\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "441", "code": "                'Processing Time': '%.3f',\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "442", "code": "                'Start Time': None,\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "443", "code": "                },\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "444", "code": "        },\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "445", "code": "        'CherryPy WSGIServer': {\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "446", "code": "            'Enabled': pause_resume('CherryPy WSGIServer'),\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "447", "code": "            'Connections/second': '%.3f',\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "448", "code": "            'Start time': iso_format,\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "449", "code": "        },\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "450", "code": "    }\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "451", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "452", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "453", "code": "    def index(self):\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "454", "code": "        # Transform the raw data into pretty output for HTML\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "455", "code": "        yield \"\"\"\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "456", "code": "<html>\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "457", "code": "<head>\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "458", "code": "    <title>Statistics</title>\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "459", "code": "<style>\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "460", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "461", "code": "th, td {\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "462", "code": "    padding: 0.25em 0.5em;\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "463", "code": "    border: 1px solid #666699;\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "464", "code": "}\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "465", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "466", "code": "table {\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "467", "code": "    border-collapse: collapse;\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "468", "code": "}\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "469", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "470", "code": "table.stats1 {\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "471", "code": "    width: 100%;\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "472", "code": "}\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "473", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "474", "code": "table.stats1 th {\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "475", "code": "    font-weight: bold;\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "476", "code": "    text-align: right;\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "477", "code": "    background-color: #CCD5DD;\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "478", "code": "}\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "479", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "480", "code": "table.stats2, h2 {\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "481", "code": "    margin-left: 50px;\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "482", "code": "}\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "483", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "484", "code": "table.stats2 th {\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "485", "code": "    font-weight: bold;\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "486", "code": "    text-align: center;\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "487", "code": "    background-color: #CCD5DD;\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "488", "code": "}\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "489", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "490", "code": "</style>\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "491", "code": "</head>\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "492", "code": "<body>\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "493", "code": "\"\"\"\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "494", "code": "        for title, scalars, collections in self.get_namespaces():\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "495", "code": "            yield \"\"\"\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "496", "code": "<h1>%s</h1>\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "497", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "498", "code": "<table class='stats1'>\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "499", "code": "    <tbody>\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "500", "code": "\"\"\" % title\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "501", "code": "            for i, (key, value) in enumerate(scalars):\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "502", "code": "                colnum = i % 3\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "503", "code": "                if colnum == 0: yield \"\"\"\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "504", "code": "        <tr>\"\"\"\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "505", "code": "                yield \"\"\"\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "506", "code": "            <th>%(key)s</th><td id='%(title)s-%(key)s'>%(value)s</td>\"\"\" % vars()\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "C", "line": "507", "code": "                if colnum == 2: yield \"\"\"\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "508", "code": "        </tr>\"\"\"\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "509", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "510", "code": "            if colnum == 0: yield \"\"\"\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "511", "code": "            <th></th><td></td>\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "512", "code": "            <th></th><td></td>\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "513", "code": "        </tr>\"\"\"\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "514", "code": "            elif colnum == 1: yield \"\"\"\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "515", "code": "            <th></th><td></td>\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "516", "code": "        </tr>\"\"\"\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "517", "code": "            yield \"\"\"\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "518", "code": "    </tbody>\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "519", "code": "</table>\"\"\"\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "520", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "521", "code": "            for subtitle, headers, subrows in collections:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "522", "code": "                yield \"\"\"\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "523", "code": "<h2>%s</h2>\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "524", "code": "<table class='stats2'>\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "525", "code": "    <thead>\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "526", "code": "        <tr>\"\"\" % subtitle\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "527", "code": "                for key in headers:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "528", "code": "                    yield \"\"\"\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "529", "code": "            <th>%s</th>\"\"\" % key\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "530", "code": "                yield \"\"\"\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "531", "code": "        </tr>\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "532", "code": "    </thead>\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "533", "code": "    <tbody>\"\"\"\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "534", "code": "                for subrow in subrows:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "535", "code": "                    yield \"\"\"\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "536", "code": "        <tr>\"\"\"\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "537", "code": "                    for value in subrow:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "538", "code": "                        yield \"\"\"\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "539", "code": "            <td>%s</td>\"\"\" % value\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "540", "code": "                    yield \"\"\"\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "541", "code": "        </tr>\"\"\"\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "542", "code": "                yield \"\"\"\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "543", "code": "    </tbody>\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "544", "code": "</table>\"\"\"\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "545", "code": "        yield \"\"\"\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "546", "code": "</body>\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "547", "code": "</html>\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "548", "code": "\"\"\"\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "549", "code": "    index.exposed = True\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "550", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "551", "code": "    def get_namespaces(self):\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "552", "code": "        \"\"\"Yield (title, scalars, collections) for each namespace.\"\"\"\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "553", "code": "        s = extrapolate_statistics(logging.statistics)\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "C", "line": "554", "code": "        for title, ns in sorted(s.items()):\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "555", "code": "            scalars = []\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "556", "code": "            collections = []\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "557", "code": "            ns_fmt = self.formatting.get(title, {})\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "558", "code": "            for k, v in sorted(ns.items()):\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "559", "code": "                fmt = ns_fmt.get(k, {})\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "560", "code": "                if isinstance(v, dict):\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "561", "code": "                    headers, subrows = self.get_dict_collection(v, fmt)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "562", "code": "                    collections.append((k, ['ID'] + headers, subrows))\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "563", "code": "                elif isinstance(v, (list, tuple)):\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "564", "code": "                    headers, subrows = self.get_list_collection(v, fmt)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "565", "code": "                    collections.append((k, headers, subrows))\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "566", "code": "                else:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "W", "line": "567", "code": "                    format = ns_fmt.get(k, missing)\n", "colour": "purple", "author": "tom@organisms.be"}, {"error": "none", "line": "568", "code": "                    if format is None:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "569", "code": "                        # Don't output this column.\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "570", "code": "                        continue\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "571", "code": "                    if hasattr(format, '__call__'):\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "572", "code": "                        v = format(v)\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "573", "code": "                    elif format is not missing:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "574", "code": "                        v = format % v\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "575", "code": "                    scalars.append((k, v))\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "576", "code": "            yield title, scalars, collections\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "577", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "R", "line": "578", "code": "    def get_dict_collection(self, v, formatting):\n", "colour": "green", "author": "tom@organisms.be"}, {"error": "none", "line": "579", "code": "        \"\"\"Return ([headers], [rows]) for the given collection.\"\"\"\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "580", "code": "        # E.g., the 'Requests' dict.\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "581", "code": "        headers = []\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "582", "code": "        for record in v.itervalues():\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "583", "code": "            for k3 in record:\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "W", "line": "584", "code": "                format = formatting.get(k3, missing)\n", "colour": "purple", "author": "tom@organisms.be"}, {"error": "none", "line": "585", "code": "                if format is None:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "586", "code": "                    # Don't output this column.\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "587", "code": "                    continue\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "588", "code": "                if k3 not in headers:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "589", "code": "                    headers.append(k3)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "590", "code": "        headers.sort()\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "591", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "592", "code": "        subrows = []\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "593", "code": "        for k2, record in sorted(v.items()):\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "594", "code": "            subrow = [k2]\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "595", "code": "            for k3 in headers:\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "C", "line": "596", "code": "                v3 = record.get(k3, '')\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "597", "code": "                format = formatting.get(k3, missing)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "598", "code": "                if format is None:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "599", "code": "                    # Don't output this column.\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "600", "code": "                    continue\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "601", "code": "                if hasattr(format, '__call__'):\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "602", "code": "                    v3 = format(v3)\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "603", "code": "                elif format is not missing:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "604", "code": "                    v3 = format % v3\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "605", "code": "                subrow.append(v3)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "606", "code": "            subrows.append(subrow)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "607", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "608", "code": "        return headers, subrows\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "609", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "R", "line": "610", "code": "    def get_list_collection(self, v, formatting):\n", "colour": "green", "author": "tom@organisms.be"}, {"error": "none", "line": "611", "code": "        \"\"\"Return ([headers], [subrows]) for the given collection.\"\"\"\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "612", "code": "        # E.g., the 'Slow Queries' list.\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "613", "code": "        headers = []\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "614", "code": "        for record in v:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "615", "code": "            for k3 in record:\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "W", "line": "616", "code": "                format = formatting.get(k3, missing)\n", "colour": "purple", "author": "tom@organisms.be"}, {"error": "none", "line": "617", "code": "                if format is None:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "618", "code": "                    # Don't output this column.\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "619", "code": "                    continue\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "620", "code": "                if k3 not in headers:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "621", "code": "                    headers.append(k3)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "622", "code": "        headers.sort()\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "623", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "624", "code": "        subrows = []\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "625", "code": "        for record in v:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "626", "code": "            subrow = []\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "627", "code": "            for k3 in headers:\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "C", "line": "628", "code": "                v3 = record.get(k3, '')\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "629", "code": "                format = formatting.get(k3, missing)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "630", "code": "                if format is None:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "631", "code": "                    # Don't output this column.\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "632", "code": "                    continue\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "633", "code": "                if hasattr(format, '__call__'):\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "634", "code": "                    v3 = format(v3)\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "635", "code": "                elif format is not missing:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "636", "code": "                    v3 = format % v3\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "637", "code": "                subrow.append(v3)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "638", "code": "            subrows.append(subrow)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "639", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "640", "code": "        return headers, subrows\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "641", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "642", "code": "    if json is not None:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "R", "line": "643", "code": "        def data(self):\n", "colour": "green", "author": "tom@organisms.be"}, {"error": "C", "line": "644", "code": "            s = extrapolate_statistics(logging.statistics)\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "645", "code": "            cherrypy.response.headers['Content-Type'] = 'application/json'\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "646", "code": "            return json.dumps(s, sort_keys=True, indent=4)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "647", "code": "        data.exposed = True\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "648", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "R", "line": "649", "code": "    def pause(self, namespace):\n", "colour": "green", "author": "tom@organisms.be"}, {"error": "none", "line": "650", "code": "        logging.statistics.get(namespace, {})['Enabled'] = False\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "651", "code": "        raise cherrypy.HTTPRedirect('./')\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "652", "code": "    pause.exposed = True\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "653", "code": "    pause.cp_config = {'tools.allow.on': True,\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "654", "code": "                       'tools.allow.methods': ['POST']}\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "655", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "R", "line": "656", "code": "    def resume(self, namespace):\n", "colour": "green", "author": "tom@organisms.be"}, {"error": "none", "line": "657", "code": "        logging.statistics.get(namespace, {})['Enabled'] = True\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "658", "code": "        raise cherrypy.HTTPRedirect('./')\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "659", "code": "    resume.exposed = True\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "660", "code": "    resume.cp_config = {'tools.allow.on': True,\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "661", "code": "                        'tools.allow.methods': ['POST']}\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "662", "code": "\n", "colour": "black", "author": "tom@organisms.be"}]]}