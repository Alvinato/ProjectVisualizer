{"path": "/home/asumal/git/cs410/pattern/pattern/server/cherrypy/cherrypy/_cpconfig.py", "lines": [[{"error": "none", "line": "1", "code": "\"\"\"\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "2", "code": "Configuration system for CherryPy.\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "3", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "4", "code": "Configuration in CherryPy is implemented via dictionaries. Keys are strings\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "5", "code": "which name the mapped value, which may be of any type.\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "6", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "7", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "8", "code": "Architecture\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "9", "code": "------------\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "10", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "11", "code": "CherryPy Requests are part of an Application, which runs in a global context,\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "12", "code": "and configuration data may apply to any of those three scopes:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "13", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "14", "code": "Global\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "15", "code": "    Configuration entries which apply everywhere are stored in\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "16", "code": "    cherrypy.config.\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "17", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "18", "code": "Application\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "19", "code": "    Entries which apply to each mounted application are stored\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "20", "code": "    on the Application object itself, as 'app.config'. This is a two-level\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "21", "code": "    dict where each key is a path, or \"relative URL\" (for example, \"/\" or\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "22", "code": "    \"/path/to/my/page\"), and each value is a config dict. Usually, this\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "23", "code": "    data is provided in the call to tree.mount(root(), config=conf),\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "24", "code": "    although you may also use app.merge(conf).\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "25", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "26", "code": "Request\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "27", "code": "    Each Request object possesses a single 'Request.config' dict.\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "28", "code": "    Early in the request process, this dict is populated by merging global\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "29", "code": "    config entries, Application entries (whose path equals or is a parent\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "30", "code": "    of Request.path_info), and any config acquired while looking up the\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "31", "code": "    page handler (see next).\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "32", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "33", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "34", "code": "Declaration\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "35", "code": "-----------\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "36", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "37", "code": "Configuration data may be supplied as a Python dictionary, as a filename,\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "38", "code": "or as an open file object. When you supply a filename or file, CherryPy\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "39", "code": "uses Python's builtin ConfigParser; you declare Application config by\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "40", "code": "writing each path as a section header::\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "41", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "42", "code": "    [/path/to/my/page]\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "43", "code": "    request.stream = True\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "44", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "45", "code": "To declare global configuration entries, place them in a [global] section.\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "46", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "47", "code": "You may also declare config entries directly on the classes and methods\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "48", "code": "(page handlers) that make up your CherryPy application via the ``_cp_config``\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "49", "code": "attribute. For example::\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "50", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "51", "code": "    class Demo:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "52", "code": "        _cp_config = {'tools.gzip.on': True}\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "53", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "54", "code": "        def index(self):\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "55", "code": "            return \"Hello world\"\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "56", "code": "        index.exposed = True\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "57", "code": "        index._cp_config = {'request.show_tracebacks': False}\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "58", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "59", "code": ".. note::\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "60", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "61", "code": "    This behavior is only guaranteed for the default dispatcher.\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "62", "code": "    Other dispatchers may have different restrictions on where\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "63", "code": "    you can attach _cp_config attributes.\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "64", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "65", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "66", "code": "Namespaces\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "67", "code": "----------\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "68", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "69", "code": "Configuration keys are separated into namespaces by the first \".\" in the key.\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "70", "code": "Current namespaces:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "71", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "72", "code": "engine\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "73", "code": "    Controls the 'application engine', including autoreload.\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "74", "code": "    These can only be declared in the global config.\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "75", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "76", "code": "tree\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "77", "code": "    Grafts cherrypy.Application objects onto cherrypy.tree.\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "78", "code": "    These can only be declared in the global config.\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "79", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "80", "code": "hooks\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "81", "code": "    Declares additional request-processing functions.\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "82", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "83", "code": "log\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "84", "code": "    Configures the logging for each application.\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "85", "code": "    These can only be declared in the global or / config.\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "86", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "87", "code": "request\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "88", "code": "    Adds attributes to each Request.\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "89", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "90", "code": "response\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "91", "code": "    Adds attributes to each Response.\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "92", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "93", "code": "server\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "94", "code": "    Controls the default HTTP server via cherrypy.server.\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "95", "code": "    These can only be declared in the global config.\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "96", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "97", "code": "tools\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "98", "code": "    Runs and configures additional request-processing packages.\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "99", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "100", "code": "wsgi\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "101", "code": "    Adds WSGI middleware to an Application's \"pipeline\".\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "102", "code": "    These can only be declared in the app's root config (\"/\").\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "103", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "104", "code": "checker\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "105", "code": "    Controls the 'checker', which looks for common errors in\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "106", "code": "    app state (including config) when the engine starts.\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "107", "code": "    Global config only.\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "108", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "109", "code": "The only key that does not exist in a namespace is the \"environment\" entry.\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "110", "code": "This special entry 'imports' other config entries from a template stored in\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "111", "code": "cherrypy._cpconfig.environments[environment]. It only applies to the global\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "112", "code": "config, and only when you use cherrypy.config.update.\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "113", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "114", "code": "You can define your own namespaces to be called at the Global, Application,\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "115", "code": "or Request level, by adding a named handler to cherrypy.config.namespaces,\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "116", "code": "app.namespaces, or app.request_class.namespaces. The name can\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "117", "code": "be any string, and the handler must be either a callable or a (Python 2.5\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "118", "code": "style) context manager.\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "119", "code": "\"\"\"\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "120", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "121", "code": "import cherrypy\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "W", "line": "122", "code": "from cherrypy._cpcompat import set, basestring\n", "colour": "purple", "author": "tom@organisms.be"}, {"error": "none", "line": "123", "code": "from cherrypy.lib import reprconf\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "124", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "125", "code": "# Deprecated in  CherryPy 3.2--remove in 3.3\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "126", "code": "NamespaceSet = reprconf.NamespaceSet\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "127", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "128", "code": "def merge(base, other):\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "129", "code": "    \"\"\"Merge one app config (from a dict, file, or filename) into another.\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "130", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "131", "code": "    If the given config is a filename, it will be appended to\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "132", "code": "    the list of files to monitor for \"autoreload\" changes.\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "133", "code": "    \"\"\"\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "134", "code": "    if isinstance(other, basestring):\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "135", "code": "        cherrypy.engine.autoreload.files.add(other)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "136", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "137", "code": "    # Load other into base\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "138", "code": "    for section, value_map in reprconf.as_dict(other).items():\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "139", "code": "        if not isinstance(value_map, dict):\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "140", "code": "            raise ValueError(\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "141", "code": "                \"Application config must include section headers, but the \"\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "142", "code": "                \"config you tried to merge doesn't have any sections. \"\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "143", "code": "                \"Wrap your config in another dict with paths as section \"\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "144", "code": "                \"headers, for example: {'/': config}.\")\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "145", "code": "        base.setdefault(section, {}).update(value_map)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "146", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "147", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "148", "code": "class Config(reprconf.Config):\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "149", "code": "    \"\"\"The 'global' configuration data for the entire CherryPy process.\"\"\"\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "150", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "151", "code": "    def update(self, config):\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "152", "code": "        \"\"\"Update self from a dict, file or filename.\"\"\"\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "153", "code": "        if isinstance(config, basestring):\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "154", "code": "            # Filename\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "155", "code": "            cherrypy.engine.autoreload.files.add(config)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "156", "code": "        reprconf.Config.update(self, config)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "157", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "158", "code": "    def _apply(self, config):\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "159", "code": "        \"\"\"Update self from a dict.\"\"\"\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "160", "code": "        if isinstance(config.get(\"global\", None), dict):\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "161", "code": "            if len(config) > 1:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "162", "code": "                cherrypy.checker.global_config_contained_paths = True\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "163", "code": "            config = config[\"global\"]\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "164", "code": "        if 'tools.staticdir.dir' in config:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "165", "code": "            config['tools.staticdir.section'] = \"global\"\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "166", "code": "        reprconf.Config._apply(self, config)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "167", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "168", "code": "    def __call__(self, *args, **kwargs):\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "169", "code": "        \"\"\"Decorator for page handlers to set _cp_config.\"\"\"\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "170", "code": "        if args:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "171", "code": "            raise TypeError(\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "172", "code": "                \"The cherrypy.config decorator does not accept positional \"\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "173", "code": "                \"arguments; you must use keyword arguments.\")\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "174", "code": "        def tool_decorator(f):\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "175", "code": "            if not hasattr(f, \"_cp_config\"):\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "W", "line": "176", "code": "                f._cp_config = {}\n", "colour": "purple", "author": "tom@organisms.be"}, {"error": "C", "line": "177", "code": "            for k, v in kwargs.items():\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "W", "line": "178", "code": "                f._cp_config[k] = v\n", "colour": "purple", "author": "tom@organisms.be"}, {"error": "none", "line": "179", "code": "            return f\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "180", "code": "        return tool_decorator\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "181", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "182", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "183", "code": "Config.environments = environments = {\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "184", "code": "    \"staging\": {\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "185", "code": "        'engine.autoreload_on': False,\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "186", "code": "        'checker.on': False,\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "187", "code": "        'tools.log_headers.on': False,\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "188", "code": "        'request.show_tracebacks': False,\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "189", "code": "        'request.show_mismatched_params': False,\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "190", "code": "        },\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "191", "code": "    \"production\": {\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "192", "code": "        'engine.autoreload_on': False,\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "193", "code": "        'checker.on': False,\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "194", "code": "        'tools.log_headers.on': False,\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "195", "code": "        'request.show_tracebacks': False,\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "196", "code": "        'request.show_mismatched_params': False,\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "197", "code": "        'log.screen': False,\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "198", "code": "        },\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "199", "code": "    \"embedded\": {\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "200", "code": "        # For use with CherryPy embedded in another deployment stack.\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "201", "code": "        'engine.autoreload_on': False,\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "202", "code": "        'checker.on': False,\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "203", "code": "        'tools.log_headers.on': False,\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "204", "code": "        'request.show_tracebacks': False,\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "205", "code": "        'request.show_mismatched_params': False,\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "206", "code": "        'log.screen': False,\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "207", "code": "        'engine.SIGHUP': None,\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "208", "code": "        'engine.SIGTERM': None,\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "209", "code": "        },\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "210", "code": "    \"test_suite\": {\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "211", "code": "        'engine.autoreload_on': False,\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "212", "code": "        'checker.on': False,\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "213", "code": "        'tools.log_headers.on': False,\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "214", "code": "        'request.show_tracebacks': True,\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "215", "code": "        'request.show_mismatched_params': True,\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "216", "code": "        'log.screen': False,\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "217", "code": "        },\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "218", "code": "    }\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "219", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "220", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "221", "code": "def _server_namespace_handler(k, v):\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "222", "code": "    \"\"\"Config handler for the \"server\" namespace.\"\"\"\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "223", "code": "    atoms = k.split(\".\", 1)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "224", "code": "    if len(atoms) > 1:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "225", "code": "        # Special-case config keys of the form 'server.servername.socket_port'\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "226", "code": "        # to configure additional HTTP servers.\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "227", "code": "        if not hasattr(cherrypy, \"servers\"):\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "228", "code": "            cherrypy.servers = {}\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "229", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "230", "code": "        servername, k = atoms\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "231", "code": "        if servername not in cherrypy.servers:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "232", "code": "            from cherrypy import _cpserver\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "233", "code": "            cherrypy.servers[servername] = _cpserver.Server()\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "234", "code": "            # On by default, but 'on = False' can unsubscribe it (see below).\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "235", "code": "            cherrypy.servers[servername].subscribe()\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "236", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "237", "code": "        if k == 'on':\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "238", "code": "            if v:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "239", "code": "                cherrypy.servers[servername].subscribe()\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "240", "code": "            else:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "241", "code": "                cherrypy.servers[servername].unsubscribe()\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "242", "code": "        else:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "243", "code": "            setattr(cherrypy.servers[servername], k, v)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "244", "code": "    else:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "245", "code": "        setattr(cherrypy.server, k, v)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "246", "code": "Config.namespaces[\"server\"] = _server_namespace_handler\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "247", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "R", "line": "248", "code": "def _engine_namespace_handler(k, v):\n", "colour": "green", "author": "tom@organisms.be"}, {"error": "none", "line": "249", "code": "    \"\"\"Backward compatibility handler for the \"engine\" namespace.\"\"\"\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "250", "code": "    engine = cherrypy.engine\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "251", "code": "    if k == 'autoreload_on':\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "252", "code": "        if v:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "253", "code": "            engine.autoreload.subscribe()\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "254", "code": "        else:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "255", "code": "            engine.autoreload.unsubscribe()\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "256", "code": "    elif k == 'autoreload_frequency':\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "257", "code": "        engine.autoreload.frequency = v\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "258", "code": "    elif k == 'autoreload_match':\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "259", "code": "        engine.autoreload.match = v\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "260", "code": "    elif k == 'reload_files':\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "261", "code": "        engine.autoreload.files = set(v)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "262", "code": "    elif k == 'deadlock_poll_freq':\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "263", "code": "        engine.timeout_monitor.frequency = v\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "264", "code": "    elif k == 'SIGHUP':\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "265", "code": "        engine.listeners['SIGHUP'] = set([v])\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "266", "code": "    elif k == 'SIGTERM':\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "267", "code": "        engine.listeners['SIGTERM'] = set([v])\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "268", "code": "    elif \".\" in k:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "269", "code": "        plugin, attrname = k.split(\".\", 1)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "270", "code": "        plugin = getattr(engine, plugin)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "271", "code": "        if attrname == 'on':\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "272", "code": "            if v and hasattr(getattr(plugin, 'subscribe', None), '__call__'):\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "273", "code": "                plugin.subscribe()\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "274", "code": "                return\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "275", "code": "            elif (not v) and hasattr(getattr(plugin, 'unsubscribe', None), '__call__'):\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "276", "code": "                plugin.unsubscribe()\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "277", "code": "                return\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "278", "code": "        setattr(plugin, attrname, v)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "279", "code": "    else:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "280", "code": "        setattr(engine, k, v)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "281", "code": "Config.namespaces[\"engine\"] = _engine_namespace_handler\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "282", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "283", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "W", "line": "284", "code": "def _tree_namespace_handler(k, v):\n", "colour": "purple", "author": "tom@organisms.be"}, {"error": "none", "line": "285", "code": "    \"\"\"Namespace handler for the 'tree' config namespace.\"\"\"\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "286", "code": "    if isinstance(v, dict):\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "287", "code": "        for script_name, app in v.items():\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "288", "code": "            cherrypy.tree.graft(app, script_name)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "289", "code": "            cherrypy.engine.log(\"Mounted: %s on %s\" % (app, script_name or \"/\"))\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "290", "code": "    else:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "291", "code": "        cherrypy.tree.graft(v, v.script_name)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "292", "code": "        cherrypy.engine.log(\"Mounted: %s on %s\" % (v, v.script_name or \"/\"))\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "293", "code": "Config.namespaces[\"tree\"] = _tree_namespace_handler\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "294", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "295", "code": "\n", "colour": "black", "author": "tom@organisms.be"}]]}