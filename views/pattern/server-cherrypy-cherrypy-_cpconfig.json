{"path": "/home/asumal/git/cs410/pattern/pattern/server/cherrypy/cherrypy/_cpconfig.py", "lines": [[{"index": "1", "colour": "orange", "code": "\"\"\"\n", "error": "none", "author": "tom@organisms.be"}, {"index": "2", "colour": "orange", "code": "Configuration system for CherryPy.\n", "error": "none", "author": "tom@organisms.be"}, {"index": "3", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "4", "colour": "orange", "code": "Configuration in CherryPy is implemented via dictionaries. Keys are strings\n", "error": "none", "author": "tom@organisms.be"}, {"index": "5", "colour": "orange", "code": "which name the mapped value, which may be of any type.\n", "error": "none", "author": "tom@organisms.be"}, {"index": "6", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "7", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "8", "colour": "orange", "code": "Architecture\n", "error": "none", "author": "tom@organisms.be"}, {"index": "9", "colour": "orange", "code": "------------\n", "error": "none", "author": "tom@organisms.be"}, {"index": "10", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "11", "colour": "orange", "code": "CherryPy Requests are part of an Application, which runs in a global context,\n", "error": "none", "author": "tom@organisms.be"}, {"index": "12", "colour": "orange", "code": "and configuration data may apply to any of those three scopes:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "13", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "14", "colour": "orange", "code": "Global\n", "error": "none", "author": "tom@organisms.be"}, {"index": "15", "colour": "orange", "code": "    Configuration entries which apply everywhere are stored in\n", "error": "none", "author": "tom@organisms.be"}, {"index": "16", "colour": "orange", "code": "    cherrypy.config.\n", "error": "none", "author": "tom@organisms.be"}, {"index": "17", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "18", "colour": "orange", "code": "Application\n", "error": "none", "author": "tom@organisms.be"}, {"index": "19", "colour": "orange", "code": "    Entries which apply to each mounted application are stored\n", "error": "none", "author": "tom@organisms.be"}, {"index": "20", "colour": "orange", "code": "    on the Application object itself, as 'app.config'. This is a two-level\n", "error": "none", "author": "tom@organisms.be"}, {"index": "21", "colour": "orange", "code": "    dict where each key is a path, or \"relative URL\" (for example, \"/\" or\n", "error": "none", "author": "tom@organisms.be"}, {"index": "22", "colour": "orange", "code": "    \"/path/to/my/page\"), and each value is a config dict. Usually, this\n", "error": "none", "author": "tom@organisms.be"}, {"index": "23", "colour": "orange", "code": "    data is provided in the call to tree.mount(root(), config=conf),\n", "error": "none", "author": "tom@organisms.be"}, {"index": "24", "colour": "orange", "code": "    although you may also use app.merge(conf).\n", "error": "none", "author": "tom@organisms.be"}, {"index": "25", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "26", "colour": "orange", "code": "Request\n", "error": "none", "author": "tom@organisms.be"}, {"index": "27", "colour": "orange", "code": "    Each Request object possesses a single 'Request.config' dict.\n", "error": "none", "author": "tom@organisms.be"}, {"index": "28", "colour": "orange", "code": "    Early in the request process, this dict is populated by merging global\n", "error": "none", "author": "tom@organisms.be"}, {"index": "29", "colour": "orange", "code": "    config entries, Application entries (whose path equals or is a parent\n", "error": "none", "author": "tom@organisms.be"}, {"index": "30", "colour": "orange", "code": "    of Request.path_info), and any config acquired while looking up the\n", "error": "none", "author": "tom@organisms.be"}, {"index": "31", "colour": "orange", "code": "    page handler (see next).\n", "error": "none", "author": "tom@organisms.be"}, {"index": "32", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "33", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "34", "colour": "orange", "code": "Declaration\n", "error": "none", "author": "tom@organisms.be"}, {"index": "35", "colour": "orange", "code": "-----------\n", "error": "none", "author": "tom@organisms.be"}, {"index": "36", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "37", "colour": "orange", "code": "Configuration data may be supplied as a Python dictionary, as a filename,\n", "error": "none", "author": "tom@organisms.be"}, {"index": "38", "colour": "orange", "code": "or as an open file object. When you supply a filename or file, CherryPy\n", "error": "none", "author": "tom@organisms.be"}, {"index": "39", "colour": "orange", "code": "uses Python's builtin ConfigParser; you declare Application config by\n", "error": "none", "author": "tom@organisms.be"}, {"index": "40", "colour": "orange", "code": "writing each path as a section header::\n", "error": "none", "author": "tom@organisms.be"}, {"index": "41", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "42", "colour": "orange", "code": "    [/path/to/my/page]\n", "error": "none", "author": "tom@organisms.be"}, {"index": "43", "colour": "orange", "code": "    request.stream = True\n", "error": "none", "author": "tom@organisms.be"}, {"index": "44", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "45", "colour": "orange", "code": "To declare global configuration entries, place them in a [global] section.\n", "error": "none", "author": "tom@organisms.be"}, {"index": "46", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "47", "colour": "orange", "code": "You may also declare config entries directly on the classes and methods\n", "error": "none", "author": "tom@organisms.be"}, {"index": "48", "colour": "orange", "code": "(page handlers) that make up your CherryPy application via the ``_cp_config``\n", "error": "none", "author": "tom@organisms.be"}, {"index": "49", "colour": "orange", "code": "attribute. For example::\n", "error": "none", "author": "tom@organisms.be"}, {"index": "50", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "51", "colour": "orange", "code": "    class Demo:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "52", "colour": "orange", "code": "        _cp_config = {'tools.gzip.on': True}\n", "error": "none", "author": "tom@organisms.be"}, {"index": "53", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "54", "colour": "orange", "code": "        def index(self):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "55", "colour": "orange", "code": "            return \"Hello world\"\n", "error": "none", "author": "tom@organisms.be"}, {"index": "56", "colour": "orange", "code": "        index.exposed = True\n", "error": "none", "author": "tom@organisms.be"}, {"index": "57", "colour": "orange", "code": "        index._cp_config = {'request.show_tracebacks': False}\n", "error": "none", "author": "tom@organisms.be"}, {"index": "58", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "59", "colour": "orange", "code": ".. note::\n", "error": "none", "author": "tom@organisms.be"}, {"index": "60", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "61", "colour": "orange", "code": "    This behavior is only guaranteed for the default dispatcher.\n", "error": "none", "author": "tom@organisms.be"}, {"index": "62", "colour": "orange", "code": "    Other dispatchers may have different restrictions on where\n", "error": "none", "author": "tom@organisms.be"}, {"index": "63", "colour": "orange", "code": "    you can attach _cp_config attributes.\n", "error": "none", "author": "tom@organisms.be"}, {"index": "64", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "65", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "66", "colour": "orange", "code": "Namespaces\n", "error": "none", "author": "tom@organisms.be"}, {"index": "67", "colour": "orange", "code": "----------\n", "error": "none", "author": "tom@organisms.be"}, {"index": "68", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "69", "colour": "orange", "code": "Configuration keys are separated into namespaces by the first \".\" in the key.\n", "error": "none", "author": "tom@organisms.be"}, {"index": "70", "colour": "orange", "code": "Current namespaces:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "71", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "72", "colour": "orange", "code": "engine\n", "error": "none", "author": "tom@organisms.be"}, {"index": "73", "colour": "orange", "code": "    Controls the 'application engine', including autoreload.\n", "error": "none", "author": "tom@organisms.be"}, {"index": "74", "colour": "orange", "code": "    These can only be declared in the global config.\n", "error": "none", "author": "tom@organisms.be"}, {"index": "75", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "76", "colour": "orange", "code": "tree\n", "error": "none", "author": "tom@organisms.be"}, {"index": "77", "colour": "orange", "code": "    Grafts cherrypy.Application objects onto cherrypy.tree.\n", "error": "none", "author": "tom@organisms.be"}, {"index": "78", "colour": "orange", "code": "    These can only be declared in the global config.\n", "error": "none", "author": "tom@organisms.be"}, {"index": "79", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "80", "colour": "orange", "code": "hooks\n", "error": "none", "author": "tom@organisms.be"}, {"index": "81", "colour": "orange", "code": "    Declares additional request-processing functions.\n", "error": "none", "author": "tom@organisms.be"}, {"index": "82", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "83", "colour": "orange", "code": "log\n", "error": "none", "author": "tom@organisms.be"}, {"index": "84", "colour": "orange", "code": "    Configures the logging for each application.\n", "error": "none", "author": "tom@organisms.be"}, {"index": "85", "colour": "orange", "code": "    These can only be declared in the global or / config.\n", "error": "none", "author": "tom@organisms.be"}, {"index": "86", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "87", "colour": "orange", "code": "request\n", "error": "none", "author": "tom@organisms.be"}, {"index": "88", "colour": "orange", "code": "    Adds attributes to each Request.\n", "error": "none", "author": "tom@organisms.be"}, {"index": "89", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "90", "colour": "orange", "code": "response\n", "error": "none", "author": "tom@organisms.be"}, {"index": "91", "colour": "orange", "code": "    Adds attributes to each Response.\n", "error": "none", "author": "tom@organisms.be"}, {"index": "92", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "93", "colour": "orange", "code": "server\n", "error": "none", "author": "tom@organisms.be"}, {"index": "94", "colour": "orange", "code": "    Controls the default HTTP server via cherrypy.server.\n", "error": "none", "author": "tom@organisms.be"}, {"index": "95", "colour": "orange", "code": "    These can only be declared in the global config.\n", "error": "none", "author": "tom@organisms.be"}, {"index": "96", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "97", "colour": "orange", "code": "tools\n", "error": "none", "author": "tom@organisms.be"}, {"index": "98", "colour": "orange", "code": "    Runs and configures additional request-processing packages.\n", "error": "none", "author": "tom@organisms.be"}, {"index": "99", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "100", "colour": "orange", "code": "wsgi\n", "error": "none", "author": "tom@organisms.be"}, {"index": "101", "colour": "orange", "code": "    Adds WSGI middleware to an Application's \"pipeline\".\n", "error": "none", "author": "tom@organisms.be"}, {"index": "102", "colour": "orange", "code": "    These can only be declared in the app's root config (\"/\").\n", "error": "none", "author": "tom@organisms.be"}, {"index": "103", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "104", "colour": "orange", "code": "checker\n", "error": "none", "author": "tom@organisms.be"}, {"index": "105", "colour": "orange", "code": "    Controls the 'checker', which looks for common errors in\n", "error": "none", "author": "tom@organisms.be"}, {"index": "106", "colour": "orange", "code": "    app state (including config) when the engine starts.\n", "error": "none", "author": "tom@organisms.be"}, {"index": "107", "colour": "orange", "code": "    Global config only.\n", "error": "none", "author": "tom@organisms.be"}, {"index": "108", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "109", "colour": "orange", "code": "The only key that does not exist in a namespace is the \"environment\" entry.\n", "error": "none", "author": "tom@organisms.be"}, {"index": "110", "colour": "orange", "code": "This special entry 'imports' other config entries from a template stored in\n", "error": "none", "author": "tom@organisms.be"}, {"index": "111", "colour": "orange", "code": "cherrypy._cpconfig.environments[environment]. It only applies to the global\n", "error": "none", "author": "tom@organisms.be"}, {"index": "112", "colour": "orange", "code": "config, and only when you use cherrypy.config.update.\n", "error": "none", "author": "tom@organisms.be"}, {"index": "113", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "114", "colour": "orange", "code": "You can define your own namespaces to be called at the Global, Application,\n", "error": "none", "author": "tom@organisms.be"}, {"index": "115", "colour": "orange", "code": "or Request level, by adding a named handler to cherrypy.config.namespaces,\n", "error": "none", "author": "tom@organisms.be"}, {"index": "116", "colour": "orange", "code": "app.namespaces, or app.request_class.namespaces. The name can\n", "error": "none", "author": "tom@organisms.be"}, {"index": "117", "colour": "orange", "code": "be any string, and the handler must be either a callable or a (Python 2.5\n", "error": "none", "author": "tom@organisms.be"}, {"index": "118", "colour": "orange", "code": "style) context manager.\n", "error": "none", "author": "tom@organisms.be"}, {"index": "119", "colour": "orange", "code": "\"\"\"\n", "error": "none", "author": "tom@organisms.be"}, {"index": "120", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "121", "colour": "orange", "code": "import cherrypy\n", "error": "none", "author": "tom@organisms.be"}, {"index": "122", "colour": "green", "code": "from cherrypy._cpcompat import set, basestring\n", "error": "W", "author": "tom@organisms.be"}, {"index": "123", "colour": "orange", "code": "from cherrypy.lib import reprconf\n", "error": "none", "author": "tom@organisms.be"}, {"index": "124", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "125", "colour": "orange", "code": "# Deprecated in  CherryPy 3.2--remove in 3.3\n", "error": "none", "author": "tom@organisms.be"}, {"index": "126", "colour": "orange", "code": "NamespaceSet = reprconf.NamespaceSet\n", "error": "none", "author": "tom@organisms.be"}, {"index": "127", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "128", "colour": "orange", "code": "def merge(base, other):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "129", "colour": "orange", "code": "    \"\"\"Merge one app config (from a dict, file, or filename) into another.\n", "error": "none", "author": "tom@organisms.be"}, {"index": "130", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "131", "colour": "orange", "code": "    If the given config is a filename, it will be appended to\n", "error": "none", "author": "tom@organisms.be"}, {"index": "132", "colour": "orange", "code": "    the list of files to monitor for \"autoreload\" changes.\n", "error": "none", "author": "tom@organisms.be"}, {"index": "133", "colour": "orange", "code": "    \"\"\"\n", "error": "none", "author": "tom@organisms.be"}, {"index": "134", "colour": "orange", "code": "    if isinstance(other, basestring):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "135", "colour": "orange", "code": "        cherrypy.engine.autoreload.files.add(other)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "136", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "137", "colour": "orange", "code": "    # Load other into base\n", "error": "none", "author": "tom@organisms.be"}, {"index": "138", "colour": "orange", "code": "    for section, value_map in reprconf.as_dict(other).items():\n", "error": "none", "author": "tom@organisms.be"}, {"index": "139", "colour": "orange", "code": "        if not isinstance(value_map, dict):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "140", "colour": "orange", "code": "            raise ValueError(\n", "error": "none", "author": "tom@organisms.be"}, {"index": "141", "colour": "orange", "code": "                \"Application config must include section headers, but the \"\n", "error": "none", "author": "tom@organisms.be"}, {"index": "142", "colour": "orange", "code": "                \"config you tried to merge doesn't have any sections. \"\n", "error": "none", "author": "tom@organisms.be"}, {"index": "143", "colour": "orange", "code": "                \"Wrap your config in another dict with paths as section \"\n", "error": "none", "author": "tom@organisms.be"}, {"index": "144", "colour": "orange", "code": "                \"headers, for example: {'/': config}.\")\n", "error": "none", "author": "tom@organisms.be"}, {"index": "145", "colour": "orange", "code": "        base.setdefault(section, {}).update(value_map)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "146", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "147", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "148", "colour": "orange", "code": "class Config(reprconf.Config):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "149", "colour": "orange", "code": "    \"\"\"The 'global' configuration data for the entire CherryPy process.\"\"\"\n", "error": "none", "author": "tom@organisms.be"}, {"index": "150", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "151", "colour": "orange", "code": "    def update(self, config):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "152", "colour": "orange", "code": "        \"\"\"Update self from a dict, file or filename.\"\"\"\n", "error": "none", "author": "tom@organisms.be"}, {"index": "153", "colour": "orange", "code": "        if isinstance(config, basestring):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "154", "colour": "orange", "code": "            # Filename\n", "error": "none", "author": "tom@organisms.be"}, {"index": "155", "colour": "orange", "code": "            cherrypy.engine.autoreload.files.add(config)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "156", "colour": "orange", "code": "        reprconf.Config.update(self, config)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "157", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "158", "colour": "orange", "code": "    def _apply(self, config):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "159", "colour": "orange", "code": "        \"\"\"Update self from a dict.\"\"\"\n", "error": "none", "author": "tom@organisms.be"}, {"index": "160", "colour": "orange", "code": "        if isinstance(config.get(\"global\", None), dict):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "161", "colour": "orange", "code": "            if len(config) > 1:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "162", "colour": "orange", "code": "                cherrypy.checker.global_config_contained_paths = True\n", "error": "none", "author": "tom@organisms.be"}, {"index": "163", "colour": "orange", "code": "            config = config[\"global\"]\n", "error": "none", "author": "tom@organisms.be"}, {"index": "164", "colour": "orange", "code": "        if 'tools.staticdir.dir' in config:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "165", "colour": "orange", "code": "            config['tools.staticdir.section'] = \"global\"\n", "error": "none", "author": "tom@organisms.be"}, {"index": "166", "colour": "orange", "code": "        reprconf.Config._apply(self, config)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "167", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "168", "colour": "orange", "code": "    def __call__(self, *args, **kwargs):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "169", "colour": "orange", "code": "        \"\"\"Decorator for page handlers to set _cp_config.\"\"\"\n", "error": "none", "author": "tom@organisms.be"}, {"index": "170", "colour": "orange", "code": "        if args:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "171", "colour": "orange", "code": "            raise TypeError(\n", "error": "none", "author": "tom@organisms.be"}, {"index": "172", "colour": "orange", "code": "                \"The cherrypy.config decorator does not accept positional \"\n", "error": "none", "author": "tom@organisms.be"}, {"index": "173", "colour": "orange", "code": "                \"arguments; you must use keyword arguments.\")\n", "error": "none", "author": "tom@organisms.be"}, {"index": "174", "colour": "orange", "code": "        def tool_decorator(f):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "175", "colour": "orange", "code": "            if not hasattr(f, \"_cp_config\"):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "176", "colour": "green", "code": "                f._cp_config = {}\n", "error": "W", "author": "tom@organisms.be"}, {"index": "177", "colour": "orange", "code": "            for k, v in kwargs.items():\n", "error": "none", "author": "tom@organisms.be"}, {"index": "178", "colour": "green", "code": "                f._cp_config[k] = v\n", "error": "W", "author": "tom@organisms.be"}, {"index": "179", "colour": "orange", "code": "            return f\n", "error": "none", "author": "tom@organisms.be"}, {"index": "180", "colour": "orange", "code": "        return tool_decorator\n", "error": "none", "author": "tom@organisms.be"}, {"index": "181", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "182", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "183", "colour": "orange", "code": "Config.environments = environments = {\n", "error": "none", "author": "tom@organisms.be"}, {"index": "184", "colour": "orange", "code": "    \"staging\": {\n", "error": "none", "author": "tom@organisms.be"}, {"index": "185", "colour": "orange", "code": "        'engine.autoreload_on': False,\n", "error": "none", "author": "tom@organisms.be"}, {"index": "186", "colour": "orange", "code": "        'checker.on': False,\n", "error": "none", "author": "tom@organisms.be"}, {"index": "187", "colour": "orange", "code": "        'tools.log_headers.on': False,\n", "error": "none", "author": "tom@organisms.be"}, {"index": "188", "colour": "orange", "code": "        'request.show_tracebacks': False,\n", "error": "none", "author": "tom@organisms.be"}, {"index": "189", "colour": "orange", "code": "        'request.show_mismatched_params': False,\n", "error": "none", "author": "tom@organisms.be"}, {"index": "190", "colour": "orange", "code": "        },\n", "error": "none", "author": "tom@organisms.be"}, {"index": "191", "colour": "orange", "code": "    \"production\": {\n", "error": "none", "author": "tom@organisms.be"}, {"index": "192", "colour": "orange", "code": "        'engine.autoreload_on': False,\n", "error": "none", "author": "tom@organisms.be"}, {"index": "193", "colour": "orange", "code": "        'checker.on': False,\n", "error": "none", "author": "tom@organisms.be"}, {"index": "194", "colour": "orange", "code": "        'tools.log_headers.on': False,\n", "error": "none", "author": "tom@organisms.be"}, {"index": "195", "colour": "orange", "code": "        'request.show_tracebacks': False,\n", "error": "none", "author": "tom@organisms.be"}, {"index": "196", "colour": "orange", "code": "        'request.show_mismatched_params': False,\n", "error": "none", "author": "tom@organisms.be"}, {"index": "197", "colour": "orange", "code": "        'log.screen': False,\n", "error": "none", "author": "tom@organisms.be"}, {"index": "198", "colour": "orange", "code": "        },\n", "error": "none", "author": "tom@organisms.be"}, {"index": "199", "colour": "orange", "code": "    \"embedded\": {\n", "error": "none", "author": "tom@organisms.be"}, {"index": "200", "colour": "orange", "code": "        # For use with CherryPy embedded in another deployment stack.\n", "error": "none", "author": "tom@organisms.be"}, {"index": "201", "colour": "orange", "code": "        'engine.autoreload_on': False,\n", "error": "none", "author": "tom@organisms.be"}, {"index": "202", "colour": "orange", "code": "        'checker.on': False,\n", "error": "none", "author": "tom@organisms.be"}, {"index": "203", "colour": "orange", "code": "        'tools.log_headers.on': False,\n", "error": "none", "author": "tom@organisms.be"}, {"index": "204", "colour": "orange", "code": "        'request.show_tracebacks': False,\n", "error": "none", "author": "tom@organisms.be"}, {"index": "205", "colour": "orange", "code": "        'request.show_mismatched_params': False,\n", "error": "none", "author": "tom@organisms.be"}, {"index": "206", "colour": "orange", "code": "        'log.screen': False,\n", "error": "none", "author": "tom@organisms.be"}, {"index": "207", "colour": "orange", "code": "        'engine.SIGHUP': None,\n", "error": "none", "author": "tom@organisms.be"}, {"index": "208", "colour": "orange", "code": "        'engine.SIGTERM': None,\n", "error": "none", "author": "tom@organisms.be"}, {"index": "209", "colour": "orange", "code": "        },\n", "error": "none", "author": "tom@organisms.be"}, {"index": "210", "colour": "orange", "code": "    \"test_suite\": {\n", "error": "none", "author": "tom@organisms.be"}, {"index": "211", "colour": "orange", "code": "        'engine.autoreload_on': False,\n", "error": "none", "author": "tom@organisms.be"}, {"index": "212", "colour": "orange", "code": "        'checker.on': False,\n", "error": "none", "author": "tom@organisms.be"}, {"index": "213", "colour": "orange", "code": "        'tools.log_headers.on': False,\n", "error": "none", "author": "tom@organisms.be"}, {"index": "214", "colour": "orange", "code": "        'request.show_tracebacks': True,\n", "error": "none", "author": "tom@organisms.be"}, {"index": "215", "colour": "orange", "code": "        'request.show_mismatched_params': True,\n", "error": "none", "author": "tom@organisms.be"}, {"index": "216", "colour": "orange", "code": "        'log.screen': False,\n", "error": "none", "author": "tom@organisms.be"}, {"index": "217", "colour": "orange", "code": "        },\n", "error": "none", "author": "tom@organisms.be"}, {"index": "218", "colour": "orange", "code": "    }\n", "error": "none", "author": "tom@organisms.be"}, {"index": "219", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "220", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "221", "colour": "orange", "code": "def _server_namespace_handler(k, v):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "222", "colour": "orange", "code": "    \"\"\"Config handler for the \"server\" namespace.\"\"\"\n", "error": "none", "author": "tom@organisms.be"}, {"index": "223", "colour": "orange", "code": "    atoms = k.split(\".\", 1)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "224", "colour": "orange", "code": "    if len(atoms) > 1:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "225", "colour": "orange", "code": "        # Special-case config keys of the form 'server.servername.socket_port'\n", "error": "none", "author": "tom@organisms.be"}, {"index": "226", "colour": "orange", "code": "        # to configure additional HTTP servers.\n", "error": "none", "author": "tom@organisms.be"}, {"index": "227", "colour": "orange", "code": "        if not hasattr(cherrypy, \"servers\"):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "228", "colour": "orange", "code": "            cherrypy.servers = {}\n", "error": "none", "author": "tom@organisms.be"}, {"index": "229", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "230", "colour": "orange", "code": "        servername, k = atoms\n", "error": "none", "author": "tom@organisms.be"}, {"index": "231", "colour": "orange", "code": "        if servername not in cherrypy.servers:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "232", "colour": "orange", "code": "            from cherrypy import _cpserver\n", "error": "none", "author": "tom@organisms.be"}, {"index": "233", "colour": "orange", "code": "            cherrypy.servers[servername] = _cpserver.Server()\n", "error": "none", "author": "tom@organisms.be"}, {"index": "234", "colour": "orange", "code": "            # On by default, but 'on = False' can unsubscribe it (see below).\n", "error": "none", "author": "tom@organisms.be"}, {"index": "235", "colour": "orange", "code": "            cherrypy.servers[servername].subscribe()\n", "error": "none", "author": "tom@organisms.be"}, {"index": "236", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "237", "colour": "orange", "code": "        if k == 'on':\n", "error": "none", "author": "tom@organisms.be"}, {"index": "238", "colour": "orange", "code": "            if v:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "239", "colour": "orange", "code": "                cherrypy.servers[servername].subscribe()\n", "error": "none", "author": "tom@organisms.be"}, {"index": "240", "colour": "orange", "code": "            else:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "241", "colour": "orange", "code": "                cherrypy.servers[servername].unsubscribe()\n", "error": "none", "author": "tom@organisms.be"}, {"index": "242", "colour": "orange", "code": "        else:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "243", "colour": "orange", "code": "            setattr(cherrypy.servers[servername], k, v)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "244", "colour": "orange", "code": "    else:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "245", "colour": "orange", "code": "        setattr(cherrypy.server, k, v)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "246", "colour": "orange", "code": "Config.namespaces[\"server\"] = _server_namespace_handler\n", "error": "none", "author": "tom@organisms.be"}, {"index": "247", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "248", "colour": "blue", "code": "def _engine_namespace_handler(k, v):\n", "error": "R", "author": "tom@organisms.be"}, {"index": "249", "colour": "orange", "code": "    \"\"\"Backward compatibility handler for the \"engine\" namespace.\"\"\"\n", "error": "none", "author": "tom@organisms.be"}, {"index": "250", "colour": "orange", "code": "    engine = cherrypy.engine\n", "error": "none", "author": "tom@organisms.be"}, {"index": "251", "colour": "orange", "code": "    if k == 'autoreload_on':\n", "error": "none", "author": "tom@organisms.be"}, {"index": "252", "colour": "orange", "code": "        if v:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "253", "colour": "orange", "code": "            engine.autoreload.subscribe()\n", "error": "none", "author": "tom@organisms.be"}, {"index": "254", "colour": "orange", "code": "        else:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "255", "colour": "orange", "code": "            engine.autoreload.unsubscribe()\n", "error": "none", "author": "tom@organisms.be"}, {"index": "256", "colour": "orange", "code": "    elif k == 'autoreload_frequency':\n", "error": "none", "author": "tom@organisms.be"}, {"index": "257", "colour": "orange", "code": "        engine.autoreload.frequency = v\n", "error": "none", "author": "tom@organisms.be"}, {"index": "258", "colour": "orange", "code": "    elif k == 'autoreload_match':\n", "error": "none", "author": "tom@organisms.be"}, {"index": "259", "colour": "orange", "code": "        engine.autoreload.match = v\n", "error": "none", "author": "tom@organisms.be"}, {"index": "260", "colour": "orange", "code": "    elif k == 'reload_files':\n", "error": "none", "author": "tom@organisms.be"}, {"index": "261", "colour": "orange", "code": "        engine.autoreload.files = set(v)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "262", "colour": "orange", "code": "    elif k == 'deadlock_poll_freq':\n", "error": "none", "author": "tom@organisms.be"}, {"index": "263", "colour": "orange", "code": "        engine.timeout_monitor.frequency = v\n", "error": "none", "author": "tom@organisms.be"}, {"index": "264", "colour": "orange", "code": "    elif k == 'SIGHUP':\n", "error": "none", "author": "tom@organisms.be"}, {"index": "265", "colour": "orange", "code": "        engine.listeners['SIGHUP'] = set([v])\n", "error": "none", "author": "tom@organisms.be"}, {"index": "266", "colour": "orange", "code": "    elif k == 'SIGTERM':\n", "error": "none", "author": "tom@organisms.be"}, {"index": "267", "colour": "orange", "code": "        engine.listeners['SIGTERM'] = set([v])\n", "error": "none", "author": "tom@organisms.be"}, {"index": "268", "colour": "orange", "code": "    elif \".\" in k:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "269", "colour": "orange", "code": "        plugin, attrname = k.split(\".\", 1)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "270", "colour": "orange", "code": "        plugin = getattr(engine, plugin)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "271", "colour": "orange", "code": "        if attrname == 'on':\n", "error": "none", "author": "tom@organisms.be"}, {"index": "272", "colour": "orange", "code": "            if v and hasattr(getattr(plugin, 'subscribe', None), '__call__'):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "273", "colour": "orange", "code": "                plugin.subscribe()\n", "error": "none", "author": "tom@organisms.be"}, {"index": "274", "colour": "orange", "code": "                return\n", "error": "none", "author": "tom@organisms.be"}, {"index": "275", "colour": "orange", "code": "            elif (not v) and hasattr(getattr(plugin, 'unsubscribe', None), '__call__'):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "276", "colour": "orange", "code": "                plugin.unsubscribe()\n", "error": "none", "author": "tom@organisms.be"}, {"index": "277", "colour": "orange", "code": "                return\n", "error": "none", "author": "tom@organisms.be"}, {"index": "278", "colour": "orange", "code": "        setattr(plugin, attrname, v)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "279", "colour": "orange", "code": "    else:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "280", "colour": "orange", "code": "        setattr(engine, k, v)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "281", "colour": "orange", "code": "Config.namespaces[\"engine\"] = _engine_namespace_handler\n", "error": "none", "author": "tom@organisms.be"}, {"index": "282", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "283", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "284", "colour": "green", "code": "def _tree_namespace_handler(k, v):\n", "error": "W", "author": "tom@organisms.be"}, {"index": "285", "colour": "orange", "code": "    \"\"\"Namespace handler for the 'tree' config namespace.\"\"\"\n", "error": "none", "author": "tom@organisms.be"}, {"index": "286", "colour": "orange", "code": "    if isinstance(v, dict):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "287", "colour": "orange", "code": "        for script_name, app in v.items():\n", "error": "none", "author": "tom@organisms.be"}, {"index": "288", "colour": "orange", "code": "            cherrypy.tree.graft(app, script_name)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "289", "colour": "orange", "code": "            cherrypy.engine.log(\"Mounted: %s on %s\" % (app, script_name or \"/\"))\n", "error": "none", "author": "tom@organisms.be"}, {"index": "290", "colour": "orange", "code": "    else:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "291", "colour": "orange", "code": "        cherrypy.tree.graft(v, v.script_name)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "292", "colour": "orange", "code": "        cherrypy.engine.log(\"Mounted: %s on %s\" % (v, v.script_name or \"/\"))\n", "error": "none", "author": "tom@organisms.be"}, {"index": "293", "colour": "orange", "code": "Config.namespaces[\"tree\"] = _tree_namespace_handler\n", "error": "none", "author": "tom@organisms.be"}, {"index": "294", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "295", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}]]}