{"path": "/home/asumal/git/cs410/pattern/pattern/server/cherrypy/cherrypy/lib/cptools.py", "lines": [[{"error": "none", "line": "1", "code": "\"\"\"Functions for builtin CherryPy tools.\"\"\"\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "2", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "3", "code": "import logging\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "4", "code": "import re\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "5", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "6", "code": "import cherrypy\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "W", "line": "7", "code": "from cherrypy._cpcompat import basestring, md5, set, unicodestr\n", "colour": "purple", "author": "tom@organisms.be"}, {"error": "none", "line": "8", "code": "from cherrypy.lib import httputil as _httputil\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "9", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "10", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "11", "code": "#                     Conditional HTTP request support                     #\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "12", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "R", "line": "13", "code": "def validate_etags(autotags=False, debug=False):\n", "colour": "green", "author": "tom@organisms.be"}, {"error": "none", "line": "14", "code": "    \"\"\"Validate the current ETag against If-Match, If-None-Match headers.\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "15", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "16", "code": "    If autotags is True, an ETag response-header value will be provided\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "17", "code": "    from an MD5 hash of the response body (unless some other code has\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "18", "code": "    already provided an ETag header). If False (the default), the ETag\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "19", "code": "    will not be automatic.\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "20", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "21", "code": "    WARNING: the autotags feature is not designed for URL's which allow\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "22", "code": "    methods other than GET. For example, if a POST to the same URL returns\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "23", "code": "    no content, the automatic ETag will be incorrect, breaking a fundamental\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "24", "code": "    use for entity tags in a possibly destructive fashion. Likewise, if you\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "25", "code": "    raise 304 Not Modified, the response body will be empty, the ETag hash\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "26", "code": "    will be incorrect, and your application will break.\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "27", "code": "    See :rfc:`2616` Section 14.24.\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "28", "code": "    \"\"\"\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "29", "code": "    response = cherrypy.serving.response\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "30", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "31", "code": "    # Guard against being run twice.\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "32", "code": "    if hasattr(response, \"ETag\"):\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "33", "code": "        return\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "34", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "W", "line": "35", "code": "    status, reason, msg = _httputil.valid_status(response.status)\n", "colour": "purple", "author": "tom@organisms.be"}, {"error": "none", "line": "36", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "37", "code": "    etag = response.headers.get('ETag')\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "38", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "39", "code": "    # Automatic ETag generation. See warning in docstring.\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "40", "code": "    if etag:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "41", "code": "        if debug:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "42", "code": "            cherrypy.log('ETag already set: %s' % etag, 'TOOLS.ETAGS')\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "43", "code": "    elif not autotags:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "44", "code": "        if debug:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "45", "code": "            cherrypy.log('Autotags off', 'TOOLS.ETAGS')\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "46", "code": "    elif status != 200:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "47", "code": "        if debug:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "48", "code": "            cherrypy.log('Status not 200', 'TOOLS.ETAGS')\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "49", "code": "    else:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "50", "code": "        etag = response.collapse_body()\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "51", "code": "        etag = '\"%s\"' % md5(etag).hexdigest()\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "52", "code": "        if debug:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "53", "code": "            cherrypy.log('Setting ETag: %s' % etag, 'TOOLS.ETAGS')\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "54", "code": "        response.headers['ETag'] = etag\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "55", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "56", "code": "    response.ETag = etag\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "57", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "58", "code": "    # \"If the request would, without the If-Match header field, result in\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "59", "code": "    # anything other than a 2xx or 412 status, then the If-Match header\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "60", "code": "    # MUST be ignored.\"\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "61", "code": "    if debug:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "62", "code": "        cherrypy.log('Status: %s' % status, 'TOOLS.ETAGS')\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "63", "code": "    if status >= 200 and status <= 299:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "64", "code": "        request = cherrypy.serving.request\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "65", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "66", "code": "        conditions = request.headers.elements('If-Match') or []\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "67", "code": "        conditions = [str(x) for x in conditions]\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "68", "code": "        if debug:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "69", "code": "            cherrypy.log('If-Match conditions: %s' % repr(conditions),\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "70", "code": "                         'TOOLS.ETAGS')\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "71", "code": "        if conditions and not (conditions == [\"*\"] or etag in conditions):\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "72", "code": "            raise cherrypy.HTTPError(412, \"If-Match failed: ETag %r did \"\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "73", "code": "                                     \"not match %r\" % (etag, conditions))\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "74", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "75", "code": "        conditions = request.headers.elements('If-None-Match') or []\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "76", "code": "        conditions = [str(x) for x in conditions]\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "77", "code": "        if debug:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "78", "code": "            cherrypy.log('If-None-Match conditions: %s' % repr(conditions),\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "79", "code": "                         'TOOLS.ETAGS')\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "80", "code": "        if conditions == [\"*\"] or etag in conditions:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "81", "code": "            if debug:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "82", "code": "                cherrypy.log('request.method: %s' % request.method, 'TOOLS.ETAGS')\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "83", "code": "            if request.method in (\"GET\", \"HEAD\"):\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "84", "code": "                raise cherrypy.HTTPRedirect([], 304)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "85", "code": "            else:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "86", "code": "                raise cherrypy.HTTPError(412, \"If-None-Match failed: ETag %r \"\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "87", "code": "                                         \"matched %r\" % (etag, conditions))\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "88", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "89", "code": "def validate_since():\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "90", "code": "    \"\"\"Validate the current Last-Modified against If-Modified-Since headers.\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "91", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "92", "code": "    If no code has set the Last-Modified response header, then no validation\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "93", "code": "    will be performed.\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "94", "code": "    \"\"\"\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "95", "code": "    response = cherrypy.serving.response\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "96", "code": "    lastmod = response.headers.get('Last-Modified')\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "97", "code": "    if lastmod:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "W", "line": "98", "code": "        status, reason, msg = _httputil.valid_status(response.status)\n", "colour": "purple", "author": "tom@organisms.be"}, {"error": "none", "line": "99", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "100", "code": "        request = cherrypy.serving.request\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "101", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "102", "code": "        since = request.headers.get('If-Unmodified-Since')\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "103", "code": "        if since and since != lastmod:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "104", "code": "            if (status >= 200 and status <= 299) or status == 412:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "105", "code": "                raise cherrypy.HTTPError(412)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "106", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "107", "code": "        since = request.headers.get('If-Modified-Since')\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "108", "code": "        if since and since == lastmod:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "109", "code": "            if (status >= 200 and status <= 299) or status == 304:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "110", "code": "                if request.method in (\"GET\", \"HEAD\"):\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "111", "code": "                    raise cherrypy.HTTPRedirect([], 304)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "112", "code": "                else:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "113", "code": "                    raise cherrypy.HTTPError(412)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "114", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "115", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "116", "code": "#                                Tool code                                #\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "117", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "118", "code": "def allow(methods=None, debug=False):\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "119", "code": "    \"\"\"Raise 405 if request.method not in methods (default ['GET', 'HEAD']).\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "120", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "121", "code": "    The given methods are case-insensitive, and may be in any order.\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "122", "code": "    If only one method is allowed, you may supply a single string;\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "123", "code": "    if more than one, supply a list of strings.\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "124", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "125", "code": "    Regardless of whether the current method is allowed or not, this\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "126", "code": "    also emits an 'Allow' response header, containing the given methods.\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "127", "code": "    \"\"\"\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "128", "code": "    if not isinstance(methods, (tuple, list)):\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "129", "code": "        methods = [methods]\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "130", "code": "    methods = [m.upper() for m in methods if m]\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "131", "code": "    if not methods:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "132", "code": "        methods = ['GET', 'HEAD']\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "133", "code": "    elif 'GET' in methods and 'HEAD' not in methods:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "134", "code": "        methods.append('HEAD')\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "135", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "136", "code": "    cherrypy.response.headers['Allow'] = ', '.join(methods)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "137", "code": "    if cherrypy.request.method not in methods:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "138", "code": "        if debug:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "139", "code": "            cherrypy.log('request.method %r not in methods %r' %\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "140", "code": "                         (cherrypy.request.method, methods), 'TOOLS.ALLOW')\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "141", "code": "        raise cherrypy.HTTPError(405)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "142", "code": "    else:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "143", "code": "        if debug:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "144", "code": "            cherrypy.log('request.method %r in methods %r' %\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "145", "code": "                         (cherrypy.request.method, methods), 'TOOLS.ALLOW')\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "146", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "147", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "R", "line": "148", "code": "def proxy(base=None, local='X-Forwarded-Host', remote='X-Forwarded-For',\n", "colour": "green", "author": "tom@organisms.be"}, {"error": "none", "line": "149", "code": "          scheme='X-Forwarded-Proto', debug=False):\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "150", "code": "    \"\"\"Change the base URL (scheme://host[:port][/path]).\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "151", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "152", "code": "    For running a CP server behind Apache, lighttpd, or other HTTP server.\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "153", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "154", "code": "    For Apache and lighttpd, you should leave the 'local' argument at the\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "155", "code": "    default value of 'X-Forwarded-Host'. For Squid, you probably want to set\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "156", "code": "    tools.proxy.local = 'Origin'.\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "157", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "158", "code": "    If you want the new request.base to include path info (not just the host),\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "159", "code": "    you must explicitly set base to the full base path, and ALSO set 'local'\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "160", "code": "    to '', so that the X-Forwarded-Host request header (which never includes\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "161", "code": "    path info) does not override it. Regardless, the value for 'base' MUST\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "162", "code": "    NOT end in a slash.\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "163", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "164", "code": "    cherrypy.request.remote.ip (the IP address of the client) will be\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "165", "code": "    rewritten if the header specified by the 'remote' arg is valid.\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "166", "code": "    By default, 'remote' is set to 'X-Forwarded-For'. If you do not\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "167", "code": "    want to rewrite remote.ip, set the 'remote' arg to an empty string.\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "168", "code": "    \"\"\"\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "169", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "170", "code": "    request = cherrypy.serving.request\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "171", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "172", "code": "    if scheme:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "173", "code": "        s = request.headers.get(scheme, None)\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "174", "code": "        if debug:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "175", "code": "            cherrypy.log('Testing scheme %r:%r' % (scheme, s), 'TOOLS.PROXY')\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "176", "code": "        if s == 'on' and 'ssl' in scheme.lower():\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "177", "code": "            # This handles e.g. webfaction's 'X-Forwarded-Ssl: on' header\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "178", "code": "            scheme = 'https'\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "179", "code": "        else:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "180", "code": "            # This is for lighttpd/pound/Mongrel's 'X-Forwarded-Proto: https'\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "181", "code": "            scheme = s\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "182", "code": "    if not scheme:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "183", "code": "        scheme = request.base[:request.base.find(\"://\")]\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "184", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "185", "code": "    if local:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "186", "code": "        lbase = request.headers.get(local, None)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "187", "code": "        if debug:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "188", "code": "            cherrypy.log('Testing local %r:%r' % (local, lbase), 'TOOLS.PROXY')\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "189", "code": "        if lbase is not None:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "190", "code": "            base = lbase.split(',')[0]\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "191", "code": "    if not base:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "192", "code": "        port = request.local.port\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "193", "code": "        if port == 80:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "194", "code": "            base = '127.0.0.1'\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "195", "code": "        else:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "196", "code": "            base = '127.0.0.1:%s' % port\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "197", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "198", "code": "    if base.find(\"://\") == -1:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "199", "code": "        # add http:// or https:// if needed\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "200", "code": "        base = scheme + \"://\" + base\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "201", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "202", "code": "    request.base = base\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "203", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "204", "code": "    if remote:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "205", "code": "        xff = request.headers.get(remote)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "206", "code": "        if debug:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "207", "code": "            cherrypy.log('Testing remote %r:%r' % (remote, xff), 'TOOLS.PROXY')\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "208", "code": "        if xff:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "209", "code": "            if remote == 'X-Forwarded-For':\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "210", "code": "                # See http://bob.pythonmac.org/archives/2005/09/23/apache-x-forwarded-for-caveat/\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "211", "code": "                xff = xff.split(',')[-1].strip()\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "212", "code": "            request.remote.ip = xff\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "213", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "214", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "215", "code": "def ignore_headers(headers=('Range',), debug=False):\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "216", "code": "    \"\"\"Delete request headers whose field names are included in 'headers'.\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "217", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "218", "code": "    This is a useful tool for working behind certain HTTP servers;\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "219", "code": "    for example, Apache duplicates the work that CP does for 'Range'\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "220", "code": "    headers, and will doubly-truncate the response.\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "221", "code": "    \"\"\"\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "222", "code": "    request = cherrypy.serving.request\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "223", "code": "    for name in headers:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "224", "code": "        if name in request.headers:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "225", "code": "            if debug:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "226", "code": "                cherrypy.log('Ignoring request header %r' % name,\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "227", "code": "                             'TOOLS.IGNORE_HEADERS')\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "228", "code": "            del request.headers[name]\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "229", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "230", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "231", "code": "def response_headers(headers=None, debug=False):\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "232", "code": "    \"\"\"Set headers on the response.\"\"\"\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "233", "code": "    if debug:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "234", "code": "        cherrypy.log('Setting response headers: %s' % repr(headers),\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "235", "code": "                     'TOOLS.RESPONSE_HEADERS')\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "236", "code": "    for name, value in (headers or []):\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "237", "code": "        cherrypy.serving.response.headers[name] = value\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "238", "code": "response_headers.failsafe = True\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "239", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "240", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "R", "line": "241", "code": "def referer(pattern, accept=True, accept_missing=False, error=403,\n", "colour": "green", "author": "tom@organisms.be"}, {"error": "none", "line": "242", "code": "            message='Forbidden Referer header.', debug=False):\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "243", "code": "    \"\"\"Raise HTTPError if Referer header does/does not match the given pattern.\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "244", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "245", "code": "    pattern\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "246", "code": "        A regular expression pattern to test against the Referer.\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "247", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "248", "code": "    accept\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "249", "code": "        If True, the Referer must match the pattern; if False,\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "250", "code": "        the Referer must NOT match the pattern.\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "251", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "252", "code": "    accept_missing\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "253", "code": "        If True, permit requests with no Referer header.\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "254", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "255", "code": "    error\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "256", "code": "        The HTTP error code to return to the client on failure.\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "257", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "258", "code": "    message\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "259", "code": "        A string to include in the response body on failure.\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "260", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "261", "code": "    \"\"\"\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "262", "code": "    try:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "263", "code": "        ref = cherrypy.serving.request.headers['Referer']\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "264", "code": "        match = bool(re.match(pattern, ref))\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "265", "code": "        if debug:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "266", "code": "            cherrypy.log('Referer %r matches %r' % (ref, pattern),\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "267", "code": "                         'TOOLS.REFERER')\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "268", "code": "        if accept == match:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "269", "code": "            return\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "270", "code": "    except KeyError:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "271", "code": "        if debug:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "272", "code": "            cherrypy.log('No Referer header', 'TOOLS.REFERER')\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "273", "code": "        if accept_missing:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "274", "code": "            return\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "275", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "276", "code": "    raise cherrypy.HTTPError(error, message)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "277", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "278", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "279", "code": "class SessionAuth(object):\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "280", "code": "    \"\"\"Assert that the user is logged in.\"\"\"\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "281", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "282", "code": "    session_key = \"username\"\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "283", "code": "    debug = False\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "284", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "285", "code": "    def check_username_and_password(self, username, password):\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "286", "code": "        pass\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "287", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "288", "code": "    def anonymous(self):\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "289", "code": "        \"\"\"Provide a temporary user name for anonymous users.\"\"\"\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "290", "code": "        pass\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "291", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "292", "code": "    def on_login(self, username):\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "293", "code": "        pass\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "294", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "295", "code": "    def on_logout(self, username):\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "296", "code": "        pass\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "297", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "298", "code": "    def on_check(self, username):\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "299", "code": "        pass\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "300", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "R", "line": "301", "code": "    def login_screen(self, from_page='..', username='', error_msg='', **kwargs):\n", "colour": "green", "author": "tom@organisms.be"}, {"error": "none", "line": "302", "code": "        return (unicodestr(\"\"\"<html><body>\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "303", "code": "Message: %(error_msg)s\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "304", "code": "<form method=\"post\" action=\"do_login\">\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "305", "code": "    Login: <input type=\"text\" name=\"username\" value=\"%(username)s\" size=\"10\" /><br />\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "306", "code": "    Password: <input type=\"password\" name=\"password\" size=\"10\" /><br />\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "307", "code": "    <input type=\"hidden\" name=\"from_page\" value=\"%(from_page)s\" /><br />\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "308", "code": "    <input type=\"submit\" />\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "309", "code": "</form>\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "310", "code": "</body></html>\"\"\") % vars()).encode(\"utf-8\")\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "311", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "W", "line": "312", "code": "    def do_login(self, username, password, from_page='..', **kwargs):\n", "colour": "purple", "author": "tom@organisms.be"}, {"error": "none", "line": "313", "code": "        \"\"\"Login. May raise redirect, or return True if request handled.\"\"\"\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "314", "code": "        response = cherrypy.serving.response\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "315", "code": "        error_msg = self.check_username_and_password(username, password)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "316", "code": "        if error_msg:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "317", "code": "            body = self.login_screen(from_page, username, error_msg)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "318", "code": "            response.body = body\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "319", "code": "            if \"Content-Length\" in response.headers:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "320", "code": "                # Delete Content-Length header so finalize() recalcs it.\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "321", "code": "                del response.headers[\"Content-Length\"]\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "322", "code": "            return True\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "323", "code": "        else:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "324", "code": "            cherrypy.serving.request.login = username\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "E", "line": "325", "code": "            cherrypy.session[self.session_key] = username\n", "colour": "yellow", "author": "tom@organisms.be"}, {"error": "none", "line": "326", "code": "            self.on_login(username)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "327", "code": "            raise cherrypy.HTTPRedirect(from_page or \"/\")\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "328", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "W", "line": "329", "code": "    def do_logout(self, from_page='..', **kwargs):\n", "colour": "purple", "author": "tom@organisms.be"}, {"error": "none", "line": "330", "code": "        \"\"\"Logout. May raise redirect, or return True if request handled.\"\"\"\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "E", "line": "331", "code": "        sess = cherrypy.session\n", "colour": "yellow", "author": "tom@organisms.be"}, {"error": "none", "line": "332", "code": "        username = sess.get(self.session_key)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "333", "code": "        sess[self.session_key] = None\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "334", "code": "        if username:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "335", "code": "            cherrypy.serving.request.login = None\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "336", "code": "            self.on_logout(username)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "337", "code": "        raise cherrypy.HTTPRedirect(from_page)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "338", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "339", "code": "    def do_check(self):\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "340", "code": "        \"\"\"Assert username. May raise redirect, or return True if request handled.\"\"\"\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "E", "line": "341", "code": "        sess = cherrypy.session\n", "colour": "yellow", "author": "tom@organisms.be"}, {"error": "none", "line": "342", "code": "        request = cherrypy.serving.request\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "343", "code": "        response = cherrypy.serving.response\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "344", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "345", "code": "        username = sess.get(self.session_key)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "346", "code": "        if not username:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "347", "code": "            sess[self.session_key] = username = self.anonymous()\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "348", "code": "            if self.debug:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "349", "code": "                cherrypy.log('No session[username], trying anonymous', 'TOOLS.SESSAUTH')\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "350", "code": "        if not username:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "351", "code": "            url = cherrypy.url(qs=request.query_string)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "352", "code": "            if self.debug:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "353", "code": "                cherrypy.log('No username, routing to login_screen with '\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "354", "code": "                             'from_page %r' % url, 'TOOLS.SESSAUTH')\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "355", "code": "            response.body = self.login_screen(url)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "356", "code": "            if \"Content-Length\" in response.headers:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "357", "code": "                # Delete Content-Length header so finalize() recalcs it.\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "358", "code": "                del response.headers[\"Content-Length\"]\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "359", "code": "            return True\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "360", "code": "        if self.debug:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "361", "code": "            cherrypy.log('Setting request.login to %r' % username, 'TOOLS.SESSAUTH')\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "362", "code": "        request.login = username\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "363", "code": "        self.on_check(username)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "364", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "365", "code": "    def run(self):\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "366", "code": "        request = cherrypy.serving.request\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "367", "code": "        response = cherrypy.serving.response\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "368", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "369", "code": "        path = request.path_info\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "370", "code": "        if path.endswith('login_screen'):\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "371", "code": "            if self.debug:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "372", "code": "                cherrypy.log('routing %r to login_screen' % path, 'TOOLS.SESSAUTH')\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "373", "code": "            return self.login_screen(**request.params)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "374", "code": "        elif path.endswith('do_login'):\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "375", "code": "            if request.method != 'POST':\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "376", "code": "                response.headers['Allow'] = \"POST\"\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "377", "code": "                if self.debug:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "378", "code": "                    cherrypy.log('do_login requires POST', 'TOOLS.SESSAUTH')\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "379", "code": "                raise cherrypy.HTTPError(405)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "380", "code": "            if self.debug:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "381", "code": "                cherrypy.log('routing %r to do_login' % path, 'TOOLS.SESSAUTH')\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "382", "code": "            return self.do_login(**request.params)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "383", "code": "        elif path.endswith('do_logout'):\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "384", "code": "            if request.method != 'POST':\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "385", "code": "                response.headers['Allow'] = \"POST\"\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "386", "code": "                raise cherrypy.HTTPError(405)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "387", "code": "            if self.debug:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "388", "code": "                cherrypy.log('routing %r to do_logout' % path, 'TOOLS.SESSAUTH')\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "389", "code": "            return self.do_logout(**request.params)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "390", "code": "        else:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "391", "code": "            if self.debug:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "392", "code": "                cherrypy.log('No special path, running do_check', 'TOOLS.SESSAUTH')\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "393", "code": "            return self.do_check()\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "394", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "395", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "396", "code": "def session_auth(**kwargs):\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "C", "line": "397", "code": "    sa = SessionAuth()\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "C", "line": "398", "code": "    for k, v in kwargs.items():\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "399", "code": "        setattr(sa, k, v)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "400", "code": "    return sa.run()\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "401", "code": "session_auth.__doc__ = \"\"\"Session authentication hook.\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "402", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "403", "code": "Any attribute of the SessionAuth class may be overridden via a keyword arg\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "404", "code": "to this function:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "405", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "406", "code": "\"\"\" + \"\\n\".join([\"%s: %s\" % (k, type(getattr(SessionAuth, k)).__name__)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "407", "code": "                 for k in dir(SessionAuth) if not k.startswith(\"__\")])\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "408", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "409", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "W", "line": "410", "code": "def log_traceback(severity=logging.ERROR, debug=False):\n", "colour": "purple", "author": "tom@organisms.be"}, {"error": "none", "line": "411", "code": "    \"\"\"Write the last error's traceback to the cherrypy error log.\"\"\"\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "412", "code": "    cherrypy.log(\"\", \"HTTP\", severity=severity, traceback=True)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "413", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "W", "line": "414", "code": "def log_request_headers(debug=False):\n", "colour": "purple", "author": "tom@organisms.be"}, {"error": "none", "line": "415", "code": "    \"\"\"Write request headers to the cherrypy error log.\"\"\"\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "416", "code": "    h = [\"  %s: %s\" % (k, v) for k, v in cherrypy.serving.request.header_list]\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "417", "code": "    cherrypy.log('\\nRequest Headers:\\n' + '\\n'.join(h), \"HTTP\")\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "418", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "W", "line": "419", "code": "def log_hooks(debug=False):\n", "colour": "purple", "author": "tom@organisms.be"}, {"error": "none", "line": "420", "code": "    \"\"\"Write request.hooks to the cherrypy error log.\"\"\"\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "421", "code": "    request = cherrypy.serving.request\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "422", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "423", "code": "    msg = []\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "424", "code": "    # Sort by the standard points if possible.\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "425", "code": "    from cherrypy import _cprequest\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "426", "code": "    points = _cprequest.hookpoints\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "W", "line": "427", "code": "    for k in request.hooks.keys():\n", "colour": "purple", "author": "tom@organisms.be"}, {"error": "none", "line": "428", "code": "        if k not in points:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "429", "code": "            points.append(k)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "430", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "431", "code": "    for k in points:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "432", "code": "        msg.append(\"    %s:\" % k)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "433", "code": "        v = request.hooks.get(k, [])\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "434", "code": "        v.sort()\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "435", "code": "        for h in v:\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "436", "code": "            msg.append(\"        %r\" % h)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "437", "code": "    cherrypy.log('\\nRequest Hooks for ' + cherrypy.url() +\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "438", "code": "                 ':\\n' + '\\n'.join(msg), \"HTTP\")\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "439", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "440", "code": "def redirect(url='', internal=True, debug=False):\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "441", "code": "    \"\"\"Raise InternalRedirect or HTTPRedirect to the given url.\"\"\"\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "442", "code": "    if debug:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "443", "code": "        cherrypy.log('Redirecting %sto: %s' %\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "444", "code": "                     ({True: 'internal ', False: ''}[internal], url),\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "445", "code": "                     'TOOLS.REDIRECT')\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "446", "code": "    if internal:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "447", "code": "        raise cherrypy.InternalRedirect(url)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "448", "code": "    else:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "449", "code": "        raise cherrypy.HTTPRedirect(url)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "450", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "451", "code": "def trailing_slash(missing=True, extra=False, status=None, debug=False):\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "452", "code": "    \"\"\"Redirect if path_info has (missing|extra) trailing slash.\"\"\"\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "453", "code": "    request = cherrypy.serving.request\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "454", "code": "    pi = request.path_info\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "455", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "456", "code": "    if debug:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "457", "code": "        cherrypy.log('is_index: %r, missing: %r, extra: %r, path_info: %r' %\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "458", "code": "                     (request.is_index, missing, extra, pi),\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "459", "code": "                     'TOOLS.TRAILING_SLASH')\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "460", "code": "    if request.is_index is True:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "461", "code": "        if missing:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "462", "code": "            if not pi.endswith('/'):\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "463", "code": "                new_url = cherrypy.url(pi + '/', request.query_string)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "464", "code": "                raise cherrypy.HTTPRedirect(new_url, status=status or 301)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "465", "code": "    elif request.is_index is False:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "466", "code": "        if extra:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "467", "code": "            # If pi == '/', don't redirect to ''!\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "468", "code": "            if pi.endswith('/') and pi != '/':\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "469", "code": "                new_url = cherrypy.url(pi[:-1], request.query_string)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "470", "code": "                raise cherrypy.HTTPRedirect(new_url, status=status or 301)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "471", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "472", "code": "def flatten(debug=False):\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "473", "code": "    \"\"\"Wrap response.body in a generator that recursively iterates over body.\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "474", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "475", "code": "    This allows cherrypy.response.body to consist of 'nested generators';\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "476", "code": "    that is, a set of generators that yield generators.\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "477", "code": "    \"\"\"\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "478", "code": "    import types\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "W", "line": "479", "code": "    def flattener(input):\n", "colour": "purple", "author": "tom@organisms.be"}, {"error": "none", "line": "480", "code": "        numchunks = 0\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "481", "code": "        for x in input:\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "482", "code": "            if not isinstance(x, types.GeneratorType):\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "483", "code": "                numchunks += 1\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "484", "code": "                yield x\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "485", "code": "            else:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "486", "code": "                for y in flattener(x):\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "487", "code": "                    numchunks += 1\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "488", "code": "                    yield y\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "489", "code": "        if debug:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "490", "code": "            cherrypy.log('Flattened %d chunks' % numchunks, 'TOOLS.FLATTEN')\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "491", "code": "    response = cherrypy.serving.response\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "492", "code": "    response.body = flattener(response.body)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "493", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "494", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "R", "line": "495", "code": "def accept(media=None, debug=False):\n", "colour": "green", "author": "tom@organisms.be"}, {"error": "none", "line": "496", "code": "    \"\"\"Return the client's preferred media-type (from the given Content-Types).\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "497", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "498", "code": "    If 'media' is None (the default), no test will be performed.\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "499", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "500", "code": "    If 'media' is provided, it should be the Content-Type value (as a string)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "501", "code": "    or values (as a list or tuple of strings) which the current resource\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "502", "code": "    can emit. The client's acceptable media ranges (as declared in the\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "503", "code": "    Accept request header) will be matched in order to these Content-Type\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "504", "code": "    values; the first such string is returned. That is, the return value\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "505", "code": "    will always be one of the strings provided in the 'media' arg (or None\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "506", "code": "    if 'media' is None).\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "507", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "508", "code": "    If no match is found, then HTTPError 406 (Not Acceptable) is raised.\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "509", "code": "    Note that most web browsers send */* as a (low-quality) acceptable\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "510", "code": "    media range, which should match any Content-Type. In addition, \"...if\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "511", "code": "    no Accept header field is present, then it is assumed that the client\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "512", "code": "    accepts all media types.\"\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "513", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "514", "code": "    Matching types are checked in order of client preference first,\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "515", "code": "    and then in the order of the given 'media' values.\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "516", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "517", "code": "    Note that this function does not honor accept-params (other than \"q\").\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "518", "code": "    \"\"\"\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "519", "code": "    if not media:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "520", "code": "        return\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "521", "code": "    if isinstance(media, basestring):\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "522", "code": "        media = [media]\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "523", "code": "    request = cherrypy.serving.request\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "524", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "525", "code": "    # Parse the Accept request header, and try to match one\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "526", "code": "    # of the requested media-ranges (in order of preference).\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "527", "code": "    ranges = request.headers.elements('Accept')\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "528", "code": "    if not ranges:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "529", "code": "        # Any media type is acceptable.\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "530", "code": "        if debug:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "531", "code": "            cherrypy.log('No Accept header elements', 'TOOLS.ACCEPT')\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "532", "code": "        return media[0]\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "533", "code": "    else:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "534", "code": "        # Note that 'ranges' is sorted in order of preference\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "535", "code": "        for element in ranges:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "536", "code": "            if element.qvalue > 0:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "537", "code": "                if element.value == \"*/*\":\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "538", "code": "                    # Matches any type or subtype\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "539", "code": "                    if debug:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "540", "code": "                        cherrypy.log('Match due to */*', 'TOOLS.ACCEPT')\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "541", "code": "                    return media[0]\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "542", "code": "                elif element.value.endswith(\"/*\"):\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "543", "code": "                    # Matches any subtype\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "544", "code": "                    mtype = element.value[:-1]  # Keep the slash\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "545", "code": "                    for m in media:\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "546", "code": "                        if m.startswith(mtype):\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "547", "code": "                            if debug:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "548", "code": "                                cherrypy.log('Match due to %s' % element.value,\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "549", "code": "                                             'TOOLS.ACCEPT')\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "550", "code": "                            return m\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "551", "code": "                else:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "552", "code": "                    # Matches exact value\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "553", "code": "                    if element.value in media:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "554", "code": "                        if debug:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "555", "code": "                            cherrypy.log('Match due to %s' % element.value,\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "556", "code": "                                         'TOOLS.ACCEPT')\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "557", "code": "                        return element.value\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "558", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "559", "code": "    # No suitable media-range found.\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "560", "code": "    ah = request.headers.get('Accept')\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "561", "code": "    if ah is None:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "562", "code": "        msg = \"Your client did not send an Accept header.\"\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "563", "code": "    else:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "564", "code": "        msg = \"Your client sent this Accept header: %s.\" % ah\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "565", "code": "    msg += (\" But this resource only emits these media types: %s.\" %\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "566", "code": "            \", \".join(media))\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "567", "code": "    raise cherrypy.HTTPError(406, msg)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "568", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "569", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "R", "line": "570", "code": "class MonitoredHeaderMap(_httputil.HeaderMap):\n", "colour": "green", "author": "tom@organisms.be"}, {"error": "none", "line": "571", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "W", "line": "572", "code": "    def __init__(self):\n", "colour": "purple", "author": "tom@organisms.be"}, {"error": "none", "line": "573", "code": "        self.accessed_headers = set()\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "574", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "575", "code": "    def __getitem__(self, key):\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "576", "code": "        self.accessed_headers.add(key)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "577", "code": "        return _httputil.HeaderMap.__getitem__(self, key)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "578", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "579", "code": "    def __contains__(self, key):\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "580", "code": "        self.accessed_headers.add(key)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "581", "code": "        return _httputil.HeaderMap.__contains__(self, key)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "582", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "583", "code": "    def get(self, key, default=None):\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "584", "code": "        self.accessed_headers.add(key)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "585", "code": "        return _httputil.HeaderMap.get(self, key, default=default)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "586", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "587", "code": "    if hasattr({}, 'has_key'):\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "588", "code": "        # Python 2\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "589", "code": "        def has_key(self, key):\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "590", "code": "            self.accessed_headers.add(key)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "591", "code": "            return _httputil.HeaderMap.has_key(self, key)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "592", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "593", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "594", "code": "def autovary(ignore=None, debug=False):\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "595", "code": "    \"\"\"Auto-populate the Vary response header based on request.header access.\"\"\"\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "596", "code": "    request = cherrypy.serving.request\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "597", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "598", "code": "    req_h = request.headers\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "599", "code": "    request.headers = MonitoredHeaderMap()\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "600", "code": "    request.headers.update(req_h)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "601", "code": "    if ignore is None:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "602", "code": "        ignore = set(['Content-Disposition', 'Content-Length', 'Content-Type'])\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "603", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "604", "code": "    def set_response_header():\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "605", "code": "        resp_h = cherrypy.serving.response.headers\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "606", "code": "        v = set([e.value for e in resp_h.elements('Vary')])\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "607", "code": "        if debug:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "608", "code": "            cherrypy.log('Accessed headers: %s' % request.headers.accessed_headers,\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "609", "code": "                         'TOOLS.AUTOVARY')\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "610", "code": "        v = v.union(request.headers.accessed_headers)\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "C", "line": "611", "code": "        v = v.difference(ignore)\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "C", "line": "612", "code": "        v = list(v)\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "613", "code": "        v.sort()\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "614", "code": "        resp_h['Vary'] = ', '.join(v)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "615", "code": "    request.hooks.attach('before_finalize', set_response_header, 95)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "616", "code": "\n", "colour": "black", "author": "tom@organisms.be"}]]}