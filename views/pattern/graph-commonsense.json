{"path": "/home/asumal/git/cs410/pattern/pattern/graph/commonsense.py", "lines": [[{"index": "1", "colour": "orange", "code": "#### PATTERN | COMMONSENSE #########################################################################\n", "error": "none", "author": "tom@organisms.be"}, {"index": "2", "colour": "orange", "code": "# Copyright (c) 2010 University of Antwerp, Belgium\n", "error": "none", "author": "tom@organisms.be"}, {"index": "3", "colour": "orange", "code": "# Author: Tom De Smedt <tom@organisms.be>\n", "error": "none", "author": "tom@organisms.be"}, {"index": "4", "colour": "orange", "code": "# License: BSD (see LICENSE.txt for details).\n", "error": "none", "author": "tom@organisms.be"}, {"index": "5", "colour": "orange", "code": "# http://www.clips.ua.ac.be/pages/pattern\n", "error": "none", "author": "tom@organisms.be"}, {"index": "6", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "7", "colour": "orange", "code": "####################################################################################################\n", "error": "none", "author": "tom@organisms.be"}, {"index": "8", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "9", "colour": "orange", "code": "from codecs    import BOM_UTF8\n", "error": "none", "author": "tom@organisms.be"}, {"index": "10", "colour": "orange", "code": "from urllib    import urlopen\n", "error": "none", "author": "tom@organisms.be"}, {"index": "11", "colour": "orange", "code": "from itertools import chain\n", "error": "none", "author": "tom@organisms.be"}, {"index": "12", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "13", "colour": "green", "code": "from __init__ import Graph, Node, Edge, bfs\n", "error": "W", "author": "tom@organisms.be"}, {"index": "14", "colour": "green", "code": "from __init__ import WEIGHT, CENTRALITY, EIGENVECTOR, BETWEENNESS\n", "error": "W", "author": "tom@organisms.be"}, {"index": "15", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "16", "colour": "orange", "code": "import os\n", "error": "none", "author": "tom@organisms.be"}, {"index": "17", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "18", "colour": "orange", "code": "try:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "19", "colour": "orange", "code": "    MODULE = os.path.dirname(os.path.realpath(__file__))\n", "error": "none", "author": "tom@alice-2.local"}, {"index": "20", "colour": "green", "code": "except:\n", "error": "W", "author": "tom@organisms.be"}, {"index": "21", "colour": "orange", "code": "    MODULE = \"\"\n", "error": "none", "author": "tom@organisms.be"}, {"index": "22", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "23", "colour": "orange", "code": "#### COMMONSENSE SEMANTIC NETWORK ##################################################################\n", "error": "none", "author": "tom@organisms.be"}, {"index": "24", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "25", "colour": "orange", "code": "#--- CONCEPT ---------------------------------------------------------------------------------------\n", "error": "none", "author": "tom@organisms.be"}, {"index": "26", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "27", "colour": "orange", "code": "class Concept(Node):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "28", "colour": "orange", "code": "    \n", "error": "none", "author": "tom@organisms.be"}, {"index": "29", "colour": "green", "code": "    def __init__(self, *args, **kwargs):\n", "error": "W", "author": "tom@organisms.be"}, {"index": "30", "colour": "orange", "code": "        \"\"\" A concept in the sematic network.\n", "error": "none", "author": "tom@organisms.be"}, {"index": "31", "colour": "orange", "code": "        \"\"\"\n", "error": "none", "author": "tom@organisms.be"}, {"index": "32", "colour": "green", "code": "        Node.__init__(self, *args, **kwargs)\n", "error": "W", "author": "tom@organisms.be"}, {"index": "33", "colour": "orange", "code": "        self._properties = None\n", "error": "none", "author": "tom@organisms.be"}, {"index": "34", "colour": "orange", "code": "    \n", "error": "none", "author": "tom@organisms.be"}, {"index": "35", "colour": "orange", "code": "    @property\n", "error": "none", "author": "tom@organisms.be"}, {"index": "36", "colour": "orange", "code": "    def halo(self, depth=2):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "37", "colour": "orange", "code": "        \"\"\" Returns the concept halo: a list with this concept + surrounding concepts.\n", "error": "none", "author": "tom@organisms.be"}, {"index": "38", "colour": "orange", "code": "            This is useful to reason more fluidly about the concept,\n", "error": "none", "author": "tom@organisms.be"}, {"index": "39", "colour": "orange", "code": "            since the halo will include latent properties linked to nearby concepts.\n", "error": "none", "author": "tom@organisms.be"}, {"index": "40", "colour": "orange", "code": "        \"\"\"\n", "error": "none", "author": "tom@organisms.be"}, {"index": "41", "colour": "orange", "code": "        return self.flatten(depth=depth)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "42", "colour": "orange", "code": "        \n", "error": "none", "author": "tom@organisms.be"}, {"index": "43", "colour": "orange", "code": "    @property\n", "error": "none", "author": "tom@organisms.be"}, {"index": "44", "colour": "orange", "code": "    def properties(self):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "45", "colour": "orange", "code": "        \"\"\" Returns the top properties in the concept halo, sorted by betweenness centrality.\n", "error": "none", "author": "tom@organisms.be"}, {"index": "46", "colour": "orange", "code": "            The return value is a list of concept id's instead of Concepts (for performance).\n", "error": "none", "author": "tom@organisms.be"}, {"index": "47", "colour": "orange", "code": "        \"\"\"\n", "error": "none", "author": "tom@organisms.be"}, {"index": "48", "colour": "orange", "code": "        if self._properties is None:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "49", "colour": "orange", "code": "            g = self.graph.copy(nodes=self.halo)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "50", "colour": "orange", "code": "            p = (n for n in g.nodes if n.id in self.graph.properties)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "51", "colour": "orange", "code": "            p = [n.id for n in reversed(sorted(p, key=lambda n: n.centrality))]\n", "error": "none", "author": "tom@organisms.be"}, {"index": "52", "colour": "orange", "code": "            self._properties = p\n", "error": "none", "author": "tom@organisms.be"}, {"index": "53", "colour": "orange", "code": "        return self._properties\n", "error": "none", "author": "tom@organisms.be"}, {"index": "54", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "55", "colour": "orange", "code": "def halo(concept, depth=2):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "56", "colour": "orange", "code": "    return concept.flatten(depth=depth)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "57", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "58", "colour": "orange", "code": "def properties(concept, depth=2, centrality=BETWEENNESS):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "59", "colour": "orange", "code": "    g = concept.graph.copy(nodes=halo(concept, depth))\n", "error": "none", "author": "tom@organisms.be"}, {"index": "60", "colour": "orange", "code": "    p = (n for n in g.nodes if n.id in concept.graph.properties)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "61", "colour": "orange", "code": "    p = [n.id for n in reversed(sorted(p, key=lambda n: getattr(n, centrality)))]\n", "error": "none", "author": "tom@organisms.be"}, {"index": "62", "colour": "orange", "code": "    return p\n", "error": "none", "author": "tom@organisms.be"}, {"index": "63", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "64", "colour": "orange", "code": "#--- RELATION --------------------------------------------------------------------------------------\n", "error": "none", "author": "tom@organisms.be"}, {"index": "65", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "66", "colour": "orange", "code": "class Relation(Edge):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "67", "colour": "orange", "code": "    \n", "error": "none", "author": "tom@organisms.be"}, {"index": "68", "colour": "green", "code": "    def __init__(self, *args, **kwargs):\n", "error": "W", "author": "tom@organisms.be"}, {"index": "69", "colour": "orange", "code": "        \"\"\" A relation between two concepts, with an optional context.\n", "error": "none", "author": "tom@organisms.be"}, {"index": "70", "colour": "orange", "code": "            For example, \"Felix is-a cat\" is in the \"media\" context, \"tiger is-a cat\" in \"nature\".\n", "error": "none", "author": "tom@organisms.be"}, {"index": "71", "colour": "orange", "code": "        \"\"\"\n", "error": "none", "author": "tom@organisms.be"}, {"index": "72", "colour": "orange", "code": "        self.context = kwargs.pop(\"context\", None)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "73", "colour": "green", "code": "        Edge.__init__(self, *args, **kwargs)\n", "error": "W", "author": "tom@organisms.be"}, {"index": "74", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "75", "colour": "orange", "code": "#--- HEURISTICS ------------------------------------------------------------------------------------\n", "error": "none", "author": "tom@organisms.be"}, {"index": "76", "colour": "orange", "code": "# Similarity between concepts is measured using a featural approach:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "77", "colour": "orange", "code": "# a comparison of the features/properties that are salient in each concept's halo.\n", "error": "none", "author": "tom@organisms.be"}, {"index": "78", "colour": "orange", "code": "# Commonsense.similarity() takes an optional \"heuristic\" parameter to tweak this behavior.\n", "error": "none", "author": "tom@organisms.be"}, {"index": "79", "colour": "orange", "code": "# It is a tuple of two functions:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "80", "colour": "orange", "code": "# 1) function(concept) returns a list of salient properties (or other),\n", "error": "none", "author": "tom@organisms.be"}, {"index": "81", "colour": "orange", "code": "# 2) function(concept1, concept2) returns the cost to traverse this edge (0.0-1.0).\n", "error": "none", "author": "tom@organisms.be"}, {"index": "82", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "83", "colour": "orange", "code": "COMMONALITY = (\n", "error": "none", "author": "tom@organisms.be"}, {"index": "84", "colour": "orange", "code": "    # Similarity heuristic that only traverses relations between properties.\n", "error": "none", "author": "tom@organisms.be"}, {"index": "85", "colour": "orange", "code": "    lambda concept: concept.properties,\n", "error": "none", "author": "tom@organisms.be"}, {"index": "86", "colour": "orange", "code": "    lambda edge: 1 - int(edge.context == \"properties\" and \\\n", "error": "none", "author": "tom@organisms.be"}, {"index": "87", "colour": "orange", "code": "                         edge.type != \"is-opposite-of\"))\n", "error": "none", "author": "tom@organisms.be"}, {"index": "88", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "89", "colour": "orange", "code": "#--- COMMONSENSE -----------------------------------------------------------------------------------\n", "error": "none", "author": "tom@organisms.be"}, {"index": "90", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "91", "colour": "blue", "code": "class Commonsense(Graph):\n", "error": "R", "author": "tom@organisms.be"}, {"index": "92", "colour": "orange", "code": "    \n", "error": "none", "author": "tom@organisms.be"}, {"index": "93", "colour": "green", "code": "    def __init__(self, data=os.path.join(MODULE, \"commonsense.csv\"), **kwargs):\n", "error": "W", "author": "tom@organisms.be"}, {"index": "94", "colour": "orange", "code": "        \"\"\" A semantic network of commonsense, using different relation types:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "95", "colour": "orange", "code": "            - is-a,\n", "error": "none", "author": "tom@organisms.be"}, {"index": "96", "colour": "orange", "code": "            - is-part-of,\n", "error": "none", "author": "tom@organisms.be"}, {"index": "97", "colour": "orange", "code": "            - is-opposite-of,\n", "error": "none", "author": "tom@organisms.be"}, {"index": "98", "colour": "orange", "code": "            - is-property-of,\n", "error": "none", "author": "tom@organisms.be"}, {"index": "99", "colour": "orange", "code": "            - is-related-to,\n", "error": "none", "author": "tom@organisms.be"}, {"index": "100", "colour": "orange", "code": "            - is-same-as,\n", "error": "none", "author": "tom@organisms.be"}, {"index": "101", "colour": "orange", "code": "            - is-effect-of.\n", "error": "none", "author": "tom@organisms.be"}, {"index": "102", "colour": "orange", "code": "        \"\"\"\n", "error": "none", "author": "tom@organisms.be"}, {"index": "103", "colour": "green", "code": "        Graph.__init__(self, **kwargs)\n", "error": "W", "author": "tom@organisms.be"}, {"index": "104", "colour": "orange", "code": "        self._properties = None\n", "error": "none", "author": "tom@organisms.be"}, {"index": "105", "colour": "orange", "code": "        # Load data from the given path,\n", "error": "none", "author": "tom@organisms.be"}, {"index": "106", "colour": "orange", "code": "        # a CSV-file of (concept1, relation, concept2, context, weight)-items.\n", "error": "none", "author": "tom@organisms.be"}, {"index": "107", "colour": "orange", "code": "        if data is not None:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "108", "colour": "orange", "code": "            s = open(data).read()\n", "error": "none", "author": "tom@organisms.be"}, {"index": "109", "colour": "orange", "code": "            s = s.strip(BOM_UTF8)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "110", "colour": "orange", "code": "            s = s.decode(\"utf-8\")\n", "error": "none", "author": "tom@organisms.be"}, {"index": "111", "colour": "orange", "code": "            s = ((v.strip(\"\\\"\") for v in r.split(\",\")) for r in s.splitlines())\n", "error": "none", "author": "tom@organisms.be"}, {"index": "112", "colour": "orange", "code": "            for concept1, relation, concept2, context, weight in s:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "113", "colour": "orange", "code": "                self.add_edge(concept1, concept2, \n", "error": "none", "author": "tom@organisms.be"}, {"index": "114", "colour": "orange", "code": "                    type = relation, \n", "error": "none", "author": "tom@organisms.be"}, {"index": "115", "colour": "orange", "code": "                 context = context, \n", "error": "none", "author": "tom@organisms.be"}, {"index": "116", "colour": "orange", "code": "                  weight = min(int(weight)*0.1, 1.0))\n", "error": "none", "author": "tom@organisms.be"}, {"index": "117", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "118", "colour": "orange", "code": "    @property\n", "error": "none", "author": "tom@organisms.be"}, {"index": "119", "colour": "orange", "code": "    def concepts(self):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "120", "colour": "orange", "code": "        return self.nodes\n", "error": "none", "author": "tom@organisms.be"}, {"index": "121", "colour": "orange", "code": "        \n", "error": "none", "author": "tom@organisms.be"}, {"index": "122", "colour": "orange", "code": "    @property\n", "error": "none", "author": "tom@organisms.be"}, {"index": "123", "colour": "orange", "code": "    def relations(self):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "124", "colour": "orange", "code": "        return self.edges\n", "error": "none", "author": "tom@organisms.be"}, {"index": "125", "colour": "orange", "code": "        \n", "error": "none", "author": "tom@organisms.be"}, {"index": "126", "colour": "orange", "code": "    @property\n", "error": "none", "author": "tom@organisms.be"}, {"index": "127", "colour": "orange", "code": "    def properties(self):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "128", "colour": "orange", "code": "        \"\"\" Yields all concepts that are properties (i.e., adjectives).\n", "error": "none", "author": "tom@organisms.be"}, {"index": "129", "colour": "orange", "code": "            For example: \"cold is-property-of winter\" => \"cold\".\n", "error": "none", "author": "tom@organisms.be"}, {"index": "130", "colour": "orange", "code": "        \"\"\"\n", "error": "none", "author": "tom@organisms.be"}, {"index": "131", "colour": "orange", "code": "        if self._properties is None:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "132", "colour": "orange", "code": "            #self._properties = set(e.node1.id for e in self.edges if e.type == \"is-property-of\")\n", "error": "none", "author": "tom@organisms.be"}, {"index": "133", "colour": "orange", "code": "            self._properties = (e for e in self.edges if e.context == \"properties\")\n", "error": "none", "author": "tom@organisms.be"}, {"index": "134", "colour": "orange", "code": "            self._properties = set(chain(*((e.node1.id, e.node2.id) for e in self._properties)))\n", "error": "none", "author": "tom@organisms.be"}, {"index": "135", "colour": "orange", "code": "        return self._properties\n", "error": "none", "author": "tom@organisms.be"}, {"index": "136", "colour": "orange", "code": "    \n", "error": "none", "author": "tom@organisms.be"}, {"index": "137", "colour": "green", "code": "    def add_node(self, id, *args, **kwargs):\n", "error": "W", "author": "tom@organisms.be"}, {"index": "138", "colour": "orange", "code": "        \"\"\" Returns a Concept (Node subclass).\n", "error": "none", "author": "tom@organisms.be"}, {"index": "139", "colour": "orange", "code": "        \"\"\"\n", "error": "none", "author": "tom@organisms.be"}, {"index": "140", "colour": "orange", "code": "        self._properties = None\n", "error": "none", "author": "tom@organisms.be"}, {"index": "141", "colour": "orange", "code": "        kwargs.setdefault(\"base\", Concept)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "142", "colour": "orange", "code": "        return Graph.add_node(self, id, *args, **kwargs)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "143", "colour": "orange", "code": "        \n", "error": "none", "author": "tom@organisms.be"}, {"index": "144", "colour": "orange", "code": "    def add_edge(self, id1, id2, *args, **kwargs):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "145", "colour": "orange", "code": "        \"\"\" Returns a Relation between two concepts (Edge subclass).\n", "error": "none", "author": "tom@organisms.be"}, {"index": "146", "colour": "orange", "code": "        \"\"\"\n", "error": "none", "author": "tom@organisms.be"}, {"index": "147", "colour": "orange", "code": "        self._properties = None\n", "error": "none", "author": "tom@organisms.be"}, {"index": "148", "colour": "orange", "code": "        kwargs.setdefault(\"base\", Relation)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "149", "colour": "orange", "code": "        return Graph.add_edge(self, id1, id2, *args, **kwargs)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "150", "colour": "orange", "code": "        \n", "error": "none", "author": "tom@organisms.be"}, {"index": "151", "colour": "orange", "code": "    def remove(self, x):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "152", "colour": "orange", "code": "        self._properties = None\n", "error": "none", "author": "tom@organisms.be"}, {"index": "153", "colour": "orange", "code": "        Graph.remove(self, x)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "154", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "155", "colour": "orange", "code": "    def similarity(self, concept1, concept2, k=3, heuristic=COMMONALITY):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "156", "colour": "orange", "code": "        \"\"\" Returns the similarity of the given concepts,\n", "error": "none", "author": "tom@organisms.be"}, {"index": "157", "colour": "orange", "code": "            by cross-comparing shortest path distance between k concept properties.\n", "error": "none", "author": "tom@organisms.be"}, {"index": "158", "colour": "orange", "code": "            A given concept can also be a flat list of properties, e.g. [\"creepy\"].\n", "error": "none", "author": "tom@organisms.be"}, {"index": "159", "colour": "orange", "code": "            The given heuristic is a tuple of two functions:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "160", "colour": "orange", "code": "            1) function(concept) returns a list of salient properties,\n", "error": "none", "author": "tom@organisms.be"}, {"index": "161", "colour": "orange", "code": "            2) function(edge) returns the cost for traversing this edge (0.0-1.0).\n", "error": "none", "author": "tom@organisms.be"}, {"index": "162", "colour": "orange", "code": "        \"\"\"\n", "error": "none", "author": "tom@organisms.be"}, {"index": "163", "colour": "orange", "code": "        if isinstance(concept1, basestring):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "164", "colour": "orange", "code": "            concept1 = self[concept1]\n", "error": "none", "author": "tom@organisms.be"}, {"index": "165", "colour": "orange", "code": "        if isinstance(concept2, basestring):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "166", "colour": "orange", "code": "            concept2 = self[concept2]\n", "error": "none", "author": "tom@organisms.be"}, {"index": "167", "colour": "orange", "code": "        if isinstance(concept1, Node):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "168", "colour": "orange", "code": "            concept1 = heuristic[0](concept1)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "169", "colour": "orange", "code": "        if isinstance(concept2, Node):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "170", "colour": "orange", "code": "            concept2 = heuristic[0](concept2)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "171", "colour": "orange", "code": "        if isinstance(concept1, list):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "172", "colour": "orange", "code": "            concept1 = [isinstance(n, Node) and n or self[n] for n in concept1]\n", "error": "none", "author": "tom@organisms.be"}, {"index": "173", "colour": "orange", "code": "        if isinstance(concept2, list):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "174", "colour": "orange", "code": "            concept2 = [isinstance(n, Node) and n or self[n] for n in concept2]\n", "error": "none", "author": "tom@organisms.be"}, {"index": "175", "colour": "orange", "code": "        h = lambda id1, id2: heuristic[1](self.edge(id1, id2))\n", "error": "none", "author": "tom@organisms.be"}, {"index": "176", "colour": "orange", "code": "        w = 0.0\n", "error": "none", "author": "tom@organisms.be"}, {"index": "177", "colour": "orange", "code": "        for p1 in concept1[:k]:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "178", "colour": "orange", "code": "            for p2 in concept2[:k]:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "179", "colour": "orange", "code": "                p = self.shortest_path(p1, p2, heuristic=h)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "180", "colour": "orange", "code": "                w += 1.0 / (p is None and 1e10 or len(p))\n", "error": "none", "author": "tom@organisms.be"}, {"index": "181", "colour": "orange", "code": "        return w / k\n", "error": "none", "author": "tom@organisms.be"}, {"index": "182", "colour": "orange", "code": "        \n", "error": "none", "author": "tom@organisms.be"}, {"index": "183", "colour": "green", "code": "    def nearest_neighbors(self, concept, concepts=[], k=3):\n", "error": "W", "author": "tom@organisms.be"}, {"index": "184", "colour": "orange", "code": "        \"\"\" Returns the k most similar concepts from the given list.\n", "error": "none", "author": "tom@organisms.be"}, {"index": "185", "colour": "orange", "code": "        \"\"\"\n", "error": "none", "author": "tom@organisms.be"}, {"index": "186", "colour": "orange", "code": "        return sorted(concepts, key=lambda candidate: self.similarity(concept, candidate, k), reverse=True)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "187", "colour": "orange", "code": "        \n", "error": "none", "author": "tom@organisms.be"}, {"index": "188", "colour": "orange", "code": "    similar = neighbors = nn = nearest_neighbors\n", "error": "none", "author": "tom@organisms.be"}, {"index": "189", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "190", "colour": "orange", "code": "    def taxonomy(self, concept, depth=3, fringe=2):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "191", "colour": "orange", "code": "        \"\"\" Returns a list of concepts that are descendants of the given concept, using \"is-a\" relations.\n", "error": "none", "author": "tom@organisms.be"}, {"index": "192", "colour": "orange", "code": "            Creates a subgraph of \"is-a\" related concepts up to the given depth,\n", "error": "none", "author": "tom@organisms.be"}, {"index": "193", "colour": "orange", "code": "            then takes the fringe (i.e., leaves) of the subgraph.\n", "error": "none", "author": "tom@organisms.be"}, {"index": "194", "colour": "orange", "code": "        \"\"\"\n", "error": "none", "author": "tom@organisms.be"}, {"index": "195", "colour": "orange", "code": "        def traversable(node, edge):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "196", "colour": "orange", "code": "            # Follow parent-child edges.\n", "error": "none", "author": "tom@organisms.be"}, {"index": "197", "colour": "orange", "code": "            return edge.node2 == node and edge.type == \"is-a\"\n", "error": "none", "author": "tom@organisms.be"}, {"index": "198", "colour": "orange", "code": "        if not isinstance(concept, Node):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "199", "colour": "orange", "code": "            concept = self[concept]\n", "error": "none", "author": "tom@organisms.be"}, {"index": "200", "colour": "orange", "code": "        g = self.copy(nodes=concept.flatten(depth, traversable))\n", "error": "none", "author": "tom@organisms.be"}, {"index": "201", "colour": "orange", "code": "        g = g.fringe(depth=fringe)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "202", "colour": "orange", "code": "        g = [self[n.id] for n in g if n != concept]\n", "error": "none", "author": "tom@organisms.be"}, {"index": "203", "colour": "orange", "code": "        return g\n", "error": "none", "author": "tom@organisms.be"}, {"index": "204", "colour": "orange", "code": "        \n", "error": "none", "author": "tom@organisms.be"}, {"index": "205", "colour": "orange", "code": "    field = semantic_field = taxonomy\n", "error": "none", "author": "tom@organisms.be"}, {"index": "206", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "207", "colour": "orange", "code": "#g = Commonsense()\n", "error": "none", "author": "tom@organisms.be"}, {"index": "208", "colour": "orange", "code": "#print(g.nn(\"party\", g.field(\"animal\")))\n", "error": "none", "author": "tom@organisms.be"}, {"index": "209", "colour": "orange", "code": "#print(g.nn(\"creepy\", g.field(\"animal\")))\n", "error": "none", "author": "tom@organisms.be"}, {"index": "210", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "211", "colour": "orange", "code": "#### COMMONSENSE DATA ##############################################################################\n", "error": "none", "author": "tom@organisms.be"}, {"index": "212", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "213", "colour": "orange", "code": "#--- NODEBOX.NET/PERCEPTION ------------------------------------------------------------------------\n", "error": "none", "author": "tom@organisms.be"}, {"index": "214", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "215", "colour": "orange", "code": "def download(path=os.path.join(MODULE, \"commonsense.csv\"), threshold=50):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "216", "colour": "orange", "code": "    \"\"\" Downloads commonsense data from http://nodebox.net/perception.\n", "error": "none", "author": "tom@organisms.be"}, {"index": "217", "colour": "orange", "code": "        Saves the data as commonsense.csv which can be the input for Commonsense.load().\n", "error": "none", "author": "tom@organisms.be"}, {"index": "218", "colour": "orange", "code": "    \"\"\"\n", "error": "none", "author": "tom@organisms.be"}, {"index": "219", "colour": "orange", "code": "    s = \"http://nodebox.net/perception?format=txt&robots=1\"\n", "error": "none", "author": "tom@organisms.be"}, {"index": "220", "colour": "orange", "code": "    s = urlopen(s).read()\n", "error": "none", "author": "tom@organisms.be"}, {"index": "221", "colour": "orange", "code": "    s = s.decode(\"utf-8\")\n", "error": "none", "author": "tom@organisms.be"}, {"index": "222", "colour": "orange", "code": "    s = s.replace(\"\\\\'\", \"'\")\n", "error": "none", "author": "tom@organisms.be"}, {"index": "223", "colour": "orange", "code": "    # Group relations by author.\n", "error": "none", "author": "tom@organisms.be"}, {"index": "224", "colour": "orange", "code": "    a = {}\n", "error": "none", "author": "tom@organisms.be"}, {"index": "225", "colour": "orange", "code": "    for r in ([v.strip(\"'\") for v in r.split(\", \")] for r in s.split(\"\\n\")):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "226", "colour": "orange", "code": "        if len(r) == 7:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "227", "colour": "orange", "code": "            a.setdefault(r[-2], []).append(r)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "228", "colour": "orange", "code": "    # Iterate authors sorted by number of contributions.\n", "error": "none", "author": "tom@organisms.be"}, {"index": "229", "colour": "orange", "code": "    # 1) Authors with 50+ contributions can define new relations and context.\n", "error": "none", "author": "tom@organisms.be"}, {"index": "230", "colour": "orange", "code": "    # 2) Authors with 50- contributions (or robots) can only reinforce existing relations.\n", "error": "none", "author": "tom@organisms.be"}, {"index": "231", "colour": "orange", "code": "    a = sorted(a.items(), cmp=lambda v1, v2: len(v2[1]) - len(v1[1]))\n", "error": "none", "author": "tom@organisms.be"}, {"index": "232", "colour": "orange", "code": "    r = {}\n", "error": "none", "author": "tom@organisms.be"}, {"index": "233", "colour": "orange", "code": "    for author, relations in a:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "234", "colour": "orange", "code": "        if author == \"\" or author.startswith(\"robots@\"):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "235", "colour": "orange", "code": "            continue\n", "error": "none", "author": "tom@organisms.be"}, {"index": "236", "colour": "orange", "code": "        if len(relations) < threshold:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "237", "colour": "orange", "code": "            break\n", "error": "none", "author": "tom@organisms.be"}, {"index": "238", "colour": "orange", "code": "        # Sort latest-first (we prefer more recent relation types).\n", "error": "none", "author": "tom@organisms.be"}, {"index": "239", "colour": "orange", "code": "        relations = sorted(relations, cmp=lambda r1, r2: r1[-1] > r2[-1])\n", "error": "none", "author": "tom@organisms.be"}, {"index": "240", "colour": "orange", "code": "        # 1) Define new relations.\n", "error": "none", "author": "tom@organisms.be"}, {"index": "241", "colour": "green", "code": "        for concept1, relation, concept2, context, weight, author, date in relations:\n", "error": "W", "author": "tom@organisms.be"}, {"index": "242", "colour": "green", "code": "            id = (concept1, relation, concept2)\n", "error": "W", "author": "tom@organisms.be"}, {"index": "243", "colour": "orange", "code": "            if id not in r:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "244", "colour": "orange", "code": "                r[id] = [None, 0]\n", "error": "none", "author": "tom@organisms.be"}, {"index": "245", "colour": "orange", "code": "            if r[id][0] is None and context is not None:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "246", "colour": "orange", "code": "                r[id][0] = context\n", "error": "none", "author": "tom@organisms.be"}, {"index": "247", "colour": "orange", "code": "    for author, relations in a:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "248", "colour": "orange", "code": "        # 2) Reinforce existing relations.\n", "error": "none", "author": "tom@organisms.be"}, {"index": "249", "colour": "orange", "code": "        for concept1, relation, concept2, context, weight, author, date in relations:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "250", "colour": "orange", "code": "            id = (concept1, relation, concept2)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "251", "colour": "orange", "code": "            if id in r:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "252", "colour": "orange", "code": "                r[id][1] += int(weight)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "253", "colour": "orange", "code": "    # Export CSV-file.\n", "error": "none", "author": "tom@organisms.be"}, {"index": "254", "colour": "orange", "code": "    s = []\n", "error": "none", "author": "tom@organisms.be"}, {"index": "255", "colour": "orange", "code": "    for (concept1, relation, concept2), (context, weight) in r.items():\n", "error": "none", "author": "tom@organisms.be"}, {"index": "256", "colour": "orange", "code": "        s.append(\"\\\"%s\\\",\\\"%s\\\",\\\"%s\\\",\\\"%s\\\",%s\" % (\n", "error": "none", "author": "tom@organisms.be"}, {"index": "257", "colour": "orange", "code": "            concept1, relation, concept2, context, weight))\n", "error": "none", "author": "tom@organisms.be"}, {"index": "258", "colour": "orange", "code": "    f = open(path, \"w\")\n", "error": "none", "author": "tom@organisms.be"}, {"index": "259", "colour": "orange", "code": "    f.write(BOM_UTF8)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "260", "colour": "orange", "code": "    f.write(\"\\n\".join(s).encode(\"utf-8\"))\n", "error": "none", "author": "tom@organisms.be"}, {"index": "261", "colour": "orange", "code": "    f.close()\n", "error": "none", "author": "tom@organisms.be"}, {"index": "262", "colour": "orange", "code": "    \n", "error": "none", "author": "tom@organisms.be"}, {"index": "263", "colour": "orange", "code": "def json():\n", "error": "none", "author": "tom@organisms.be"}, {"index": "264", "colour": "orange", "code": "    \"\"\" Returns a JSON-string with the data from commonsense.csv.\n", "error": "none", "author": "tom@organisms.be"}, {"index": "265", "colour": "orange", "code": "        Each relation is encoded as a [concept1, relation, concept2, context, weight] list.\n", "error": "none", "author": "tom@organisms.be"}, {"index": "266", "colour": "orange", "code": "    \"\"\"\n", "error": "none", "author": "tom@organisms.be"}, {"index": "267", "colour": "orange", "code": "    f = lambda s: s.replace(\"'\", \"\\\\'\").encode(\"utf-8\")\n", "error": "none", "author": "tom@organisms.be"}, {"index": "268", "colour": "orange", "code": "    s = []\n", "error": "none", "author": "tom@organisms.be"}, {"index": "269", "colour": "orange", "code": "    g = Commonsense()\n", "error": "none", "author": "tom@organisms.be"}, {"index": "270", "colour": "orange", "code": "    for e in g.edges:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "271", "colour": "orange", "code": "        s.append(\"\\n\\t['%s', '%s', '%s', '%s', %.2f]\" % (\n", "error": "none", "author": "tom@organisms.be"}, {"index": "272", "colour": "orange", "code": "            f(e.node1.id),\n", "error": "none", "author": "tom@organisms.be"}, {"index": "273", "colour": "orange", "code": "            f(e.type),\n", "error": "none", "author": "tom@organisms.be"}, {"index": "274", "colour": "orange", "code": "            f(e.node2.id),\n", "error": "none", "author": "tom@organisms.be"}, {"index": "275", "colour": "orange", "code": "            f(e.context),\n", "error": "none", "author": "tom@organisms.be"}, {"index": "276", "colour": "orange", "code": "              e.weight\n", "error": "none", "author": "tom@organisms.be"}, {"index": "277", "colour": "orange", "code": "        ))\n", "error": "none", "author": "tom@organisms.be"}, {"index": "278", "colour": "orange", "code": "    return \"commonsense = [%s];\" % \", \".join(s)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "279", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "280", "colour": "orange", "code": "#download(\"commonsense.csv\", threshold=50)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "281", "colour": "orange", "code": "#open(\"commonsense.js\", \"w\").write(json())\n", "error": "none", "author": "tom@organisms.be"}]]}