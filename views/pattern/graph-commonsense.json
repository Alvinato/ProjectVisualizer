{"path": "/home/asumal/git/cs410/pattern/pattern/graph/commonsense.py", "lines": [[{"error": "C", "line": "1", "code": "#### PATTERN | COMMONSENSE #########################################################################\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "2", "code": "# Copyright (c) 2010 University of Antwerp, Belgium\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "3", "code": "# Author: Tom De Smedt <tom@organisms.be>\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "4", "code": "# License: BSD (see LICENSE.txt for details).\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "5", "code": "# http://www.clips.ua.ac.be/pages/pattern\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "6", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "7", "code": "####################################################################################################\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "8", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "9", "code": "from codecs    import BOM_UTF8\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "10", "code": "from urllib    import urlopen\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "11", "code": "from itertools import chain\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "12", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "W", "line": "13", "code": "from __init__ import Graph, Node, Edge, bfs\n", "colour": "purple", "author": "tom@organisms.be"}, {"error": "W", "line": "14", "code": "from __init__ import WEIGHT, CENTRALITY, EIGENVECTOR, BETWEENNESS\n", "colour": "purple", "author": "tom@organisms.be"}, {"error": "none", "line": "15", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "16", "code": "import os\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "17", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "18", "code": "try:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "19", "code": "    MODULE = os.path.dirname(os.path.realpath(__file__))\n", "colour": "black", "author": "tom@alice-2.local"}, {"error": "W", "line": "20", "code": "except:\n", "colour": "purple", "author": "tom@organisms.be"}, {"error": "none", "line": "21", "code": "    MODULE = \"\"\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "22", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "23", "code": "#### COMMONSENSE SEMANTIC NETWORK ##################################################################\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "24", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "25", "code": "#--- CONCEPT ---------------------------------------------------------------------------------------\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "26", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "27", "code": "class Concept(Node):\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "C", "line": "28", "code": "    \n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "W", "line": "29", "code": "    def __init__(self, *args, **kwargs):\n", "colour": "purple", "author": "tom@organisms.be"}, {"error": "none", "line": "30", "code": "        \"\"\" A concept in the sematic network.\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "31", "code": "        \"\"\"\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "W", "line": "32", "code": "        Node.__init__(self, *args, **kwargs)\n", "colour": "purple", "author": "tom@organisms.be"}, {"error": "none", "line": "33", "code": "        self._properties = None\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "34", "code": "    \n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "35", "code": "    @property\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "36", "code": "    def halo(self, depth=2):\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "37", "code": "        \"\"\" Returns the concept halo: a list with this concept + surrounding concepts.\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "38", "code": "            This is useful to reason more fluidly about the concept,\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "39", "code": "            since the halo will include latent properties linked to nearby concepts.\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "40", "code": "        \"\"\"\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "41", "code": "        return self.flatten(depth=depth)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "42", "code": "        \n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "43", "code": "    @property\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "44", "code": "    def properties(self):\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "45", "code": "        \"\"\" Returns the top properties in the concept halo, sorted by betweenness centrality.\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "C", "line": "46", "code": "            The return value is a list of concept id's instead of Concepts (for performance).\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "47", "code": "        \"\"\"\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "48", "code": "        if self._properties is None:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "49", "code": "            g = self.graph.copy(nodes=self.halo)\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "C", "line": "50", "code": "            p = (n for n in g.nodes if n.id in self.graph.properties)\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "C", "line": "51", "code": "            p = [n.id for n in reversed(sorted(p, key=lambda n: n.centrality))]\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "52", "code": "            self._properties = p\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "53", "code": "        return self._properties\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "54", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "55", "code": "def halo(concept, depth=2):\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "56", "code": "    return concept.flatten(depth=depth)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "57", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "58", "code": "def properties(concept, depth=2, centrality=BETWEENNESS):\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "C", "line": "59", "code": "    g = concept.graph.copy(nodes=halo(concept, depth))\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "C", "line": "60", "code": "    p = (n for n in g.nodes if n.id in concept.graph.properties)\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "C", "line": "61", "code": "    p = [n.id for n in reversed(sorted(p, key=lambda n: getattr(n, centrality)))]\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "62", "code": "    return p\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "63", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "64", "code": "#--- RELATION --------------------------------------------------------------------------------------\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "65", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "66", "code": "class Relation(Edge):\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "C", "line": "67", "code": "    \n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "W", "line": "68", "code": "    def __init__(self, *args, **kwargs):\n", "colour": "purple", "author": "tom@organisms.be"}, {"error": "none", "line": "69", "code": "        \"\"\" A relation between two concepts, with an optional context.\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "70", "code": "            For example, \"Felix is-a cat\" is in the \"media\" context, \"tiger is-a cat\" in \"nature\".\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "71", "code": "        \"\"\"\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "72", "code": "        self.context = kwargs.pop(\"context\", None)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "W", "line": "73", "code": "        Edge.__init__(self, *args, **kwargs)\n", "colour": "purple", "author": "tom@organisms.be"}, {"error": "none", "line": "74", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "75", "code": "#--- HEURISTICS ------------------------------------------------------------------------------------\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "76", "code": "# Similarity between concepts is measured using a featural approach:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "77", "code": "# a comparison of the features/properties that are salient in each concept's halo.\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "C", "line": "78", "code": "# Commonsense.similarity() takes an optional \"heuristic\" parameter to tweak this behavior.\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "79", "code": "# It is a tuple of two functions:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "80", "code": "# 1) function(concept) returns a list of salient properties (or other),\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "81", "code": "# 2) function(concept1, concept2) returns the cost to traverse this edge (0.0-1.0).\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "82", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "83", "code": "COMMONALITY = (\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "84", "code": "    # Similarity heuristic that only traverses relations between properties.\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "85", "code": "    lambda concept: concept.properties,\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "86", "code": "    lambda edge: 1 - int(edge.context == \"properties\" and \\\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "87", "code": "                         edge.type != \"is-opposite-of\"))\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "88", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "89", "code": "#--- COMMONSENSE -----------------------------------------------------------------------------------\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "90", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "R", "line": "91", "code": "class Commonsense(Graph):\n", "colour": "green", "author": "tom@organisms.be"}, {"error": "C", "line": "92", "code": "    \n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "W", "line": "93", "code": "    def __init__(self, data=os.path.join(MODULE, \"commonsense.csv\"), **kwargs):\n", "colour": "purple", "author": "tom@organisms.be"}, {"error": "none", "line": "94", "code": "        \"\"\" A semantic network of commonsense, using different relation types:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "95", "code": "            - is-a,\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "96", "code": "            - is-part-of,\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "97", "code": "            - is-opposite-of,\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "98", "code": "            - is-property-of,\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "99", "code": "            - is-related-to,\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "100", "code": "            - is-same-as,\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "101", "code": "            - is-effect-of.\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "102", "code": "        \"\"\"\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "W", "line": "103", "code": "        Graph.__init__(self, **kwargs)\n", "colour": "purple", "author": "tom@organisms.be"}, {"error": "none", "line": "104", "code": "        self._properties = None\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "105", "code": "        # Load data from the given path,\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "106", "code": "        # a CSV-file of (concept1, relation, concept2, context, weight)-items.\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "107", "code": "        if data is not None:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "108", "code": "            s = open(data).read()\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "C", "line": "109", "code": "            s = s.strip(BOM_UTF8)\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "C", "line": "110", "code": "            s = s.decode(\"utf-8\")\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "C", "line": "111", "code": "            s = ((v.strip(\"\\\"\") for v in r.split(\",\")) for r in s.splitlines())\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "112", "code": "            for concept1, relation, concept2, context, weight in s:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "113", "code": "                self.add_edge(concept1, concept2, \n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "C", "line": "114", "code": "                    type = relation, \n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "C", "line": "115", "code": "                 context = context, \n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "C", "line": "116", "code": "                  weight = min(int(weight)*0.1, 1.0))\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "117", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "118", "code": "    @property\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "119", "code": "    def concepts(self):\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "120", "code": "        return self.nodes\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "121", "code": "        \n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "122", "code": "    @property\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "123", "code": "    def relations(self):\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "124", "code": "        return self.edges\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "125", "code": "        \n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "126", "code": "    @property\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "127", "code": "    def properties(self):\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "128", "code": "        \"\"\" Yields all concepts that are properties (i.e., adjectives).\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "129", "code": "            For example: \"cold is-property-of winter\" => \"cold\".\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "130", "code": "        \"\"\"\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "131", "code": "        if self._properties is None:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "132", "code": "            #self._properties = set(e.node1.id for e in self.edges if e.type == \"is-property-of\")\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "C", "line": "133", "code": "            self._properties = (e for e in self.edges if e.context == \"properties\")\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "C", "line": "134", "code": "            self._properties = set(chain(*((e.node1.id, e.node2.id) for e in self._properties)))\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "135", "code": "        return self._properties\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "136", "code": "    \n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "W", "line": "137", "code": "    def add_node(self, id, *args, **kwargs):\n", "colour": "purple", "author": "tom@organisms.be"}, {"error": "none", "line": "138", "code": "        \"\"\" Returns a Concept (Node subclass).\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "139", "code": "        \"\"\"\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "140", "code": "        self._properties = None\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "141", "code": "        kwargs.setdefault(\"base\", Concept)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "142", "code": "        return Graph.add_node(self, id, *args, **kwargs)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "143", "code": "        \n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "144", "code": "    def add_edge(self, id1, id2, *args, **kwargs):\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "145", "code": "        \"\"\" Returns a Relation between two concepts (Edge subclass).\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "146", "code": "        \"\"\"\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "147", "code": "        self._properties = None\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "148", "code": "        kwargs.setdefault(\"base\", Relation)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "149", "code": "        return Graph.add_edge(self, id1, id2, *args, **kwargs)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "150", "code": "        \n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "151", "code": "    def remove(self, x):\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "152", "code": "        self._properties = None\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "153", "code": "        Graph.remove(self, x)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "154", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "155", "code": "    def similarity(self, concept1, concept2, k=3, heuristic=COMMONALITY):\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "156", "code": "        \"\"\" Returns the similarity of the given concepts,\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "157", "code": "            by cross-comparing shortest path distance between k concept properties.\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "C", "line": "158", "code": "            A given concept can also be a flat list of properties, e.g. [\"creepy\"].\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "159", "code": "            The given heuristic is a tuple of two functions:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "160", "code": "            1) function(concept) returns a list of salient properties,\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "161", "code": "            2) function(edge) returns the cost for traversing this edge (0.0-1.0).\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "162", "code": "        \"\"\"\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "163", "code": "        if isinstance(concept1, basestring):\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "164", "code": "            concept1 = self[concept1]\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "165", "code": "        if isinstance(concept2, basestring):\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "166", "code": "            concept2 = self[concept2]\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "167", "code": "        if isinstance(concept1, Node):\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "168", "code": "            concept1 = heuristic[0](concept1)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "169", "code": "        if isinstance(concept2, Node):\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "170", "code": "            concept2 = heuristic[0](concept2)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "171", "code": "        if isinstance(concept1, list):\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "172", "code": "            concept1 = [isinstance(n, Node) and n or self[n] for n in concept1]\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "173", "code": "        if isinstance(concept2, list):\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "174", "code": "            concept2 = [isinstance(n, Node) and n or self[n] for n in concept2]\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "175", "code": "        h = lambda id1, id2: heuristic[1](self.edge(id1, id2))\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "C", "line": "176", "code": "        w = 0.0\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "C", "line": "177", "code": "        for p1 in concept1[:k]:\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "C", "line": "178", "code": "            for p2 in concept2[:k]:\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "C", "line": "179", "code": "                p = self.shortest_path(p1, p2, heuristic=h)\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "C", "line": "180", "code": "                w += 1.0 / (p is None and 1e10 or len(p))\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "181", "code": "        return w / k\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "182", "code": "        \n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "W", "line": "183", "code": "    def nearest_neighbors(self, concept, concepts=[], k=3):\n", "colour": "purple", "author": "tom@organisms.be"}, {"error": "none", "line": "184", "code": "        \"\"\" Returns the k most similar concepts from the given list.\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "185", "code": "        \"\"\"\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "186", "code": "        return sorted(concepts, key=lambda candidate: self.similarity(concept, candidate, k), reverse=True)\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "C", "line": "187", "code": "        \n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "C", "line": "188", "code": "    similar = neighbors = nn = nearest_neighbors\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "189", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "190", "code": "    def taxonomy(self, concept, depth=3, fringe=2):\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "191", "code": "        \"\"\" Returns a list of concepts that are descendants of the given concept, using \"is-a\" relations.\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "192", "code": "            Creates a subgraph of \"is-a\" related concepts up to the given depth,\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "193", "code": "            then takes the fringe (i.e., leaves) of the subgraph.\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "194", "code": "        \"\"\"\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "195", "code": "        def traversable(node, edge):\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "196", "code": "            # Follow parent-child edges.\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "197", "code": "            return edge.node2 == node and edge.type == \"is-a\"\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "198", "code": "        if not isinstance(concept, Node):\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "199", "code": "            concept = self[concept]\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "200", "code": "        g = self.copy(nodes=concept.flatten(depth, traversable))\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "C", "line": "201", "code": "        g = g.fringe(depth=fringe)\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "C", "line": "202", "code": "        g = [self[n.id] for n in g if n != concept]\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "203", "code": "        return g\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "204", "code": "        \n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "205", "code": "    field = semantic_field = taxonomy\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "206", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "207", "code": "#g = Commonsense()\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "208", "code": "#print(g.nn(\"party\", g.field(\"animal\")))\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "209", "code": "#print(g.nn(\"creepy\", g.field(\"animal\")))\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "210", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "211", "code": "#### COMMONSENSE DATA ##############################################################################\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "212", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "213", "code": "#--- NODEBOX.NET/PERCEPTION ------------------------------------------------------------------------\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "214", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "215", "code": "def download(path=os.path.join(MODULE, \"commonsense.csv\"), threshold=50):\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "216", "code": "    \"\"\" Downloads commonsense data from http://nodebox.net/perception.\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "217", "code": "        Saves the data as commonsense.csv which can be the input for Commonsense.load().\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "218", "code": "    \"\"\"\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "219", "code": "    s = \"http://nodebox.net/perception?format=txt&robots=1\"\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "C", "line": "220", "code": "    s = urlopen(s).read()\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "C", "line": "221", "code": "    s = s.decode(\"utf-8\")\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "C", "line": "222", "code": "    s = s.replace(\"\\\\'\", \"'\")\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "223", "code": "    # Group relations by author.\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "224", "code": "    a = {}\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "C", "line": "225", "code": "    for r in ([v.strip(\"'\") for v in r.split(\", \")] for r in s.split(\"\\n\")):\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "226", "code": "        if len(r) == 7:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "227", "code": "            a.setdefault(r[-2], []).append(r)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "228", "code": "    # Iterate authors sorted by number of contributions.\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "229", "code": "    # 1) Authors with 50+ contributions can define new relations and context.\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "230", "code": "    # 2) Authors with 50- contributions (or robots) can only reinforce existing relations.\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "C", "line": "231", "code": "    a = sorted(a.items(), cmp=lambda v1, v2: len(v2[1]) - len(v1[1]))\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "C", "line": "232", "code": "    r = {}\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "233", "code": "    for author, relations in a:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "234", "code": "        if author == \"\" or author.startswith(\"robots@\"):\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "235", "code": "            continue\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "236", "code": "        if len(relations) < threshold:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "237", "code": "            break\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "238", "code": "        # Sort latest-first (we prefer more recent relation types).\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "239", "code": "        relations = sorted(relations, cmp=lambda r1, r2: r1[-1] > r2[-1])\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "240", "code": "        # 1) Define new relations.\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "W", "line": "241", "code": "        for concept1, relation, concept2, context, weight, author, date in relations:\n", "colour": "purple", "author": "tom@organisms.be"}, {"error": "C", "line": "242", "code": "            id = (concept1, relation, concept2)\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "243", "code": "            if id not in r:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "244", "code": "                r[id] = [None, 0]\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "245", "code": "            if r[id][0] is None and context is not None:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "246", "code": "                r[id][0] = context\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "247", "code": "    for author, relations in a:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "248", "code": "        # 2) Reinforce existing relations.\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "249", "code": "        for concept1, relation, concept2, context, weight, author, date in relations:\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "C", "line": "250", "code": "            id = (concept1, relation, concept2)\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "251", "code": "            if id in r:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "252", "code": "                r[id][1] += int(weight)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "253", "code": "    # Export CSV-file.\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "254", "code": "    s = []\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "255", "code": "    for (concept1, relation, concept2), (context, weight) in r.items():\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "256", "code": "        s.append(\"\\\"%s\\\",\\\"%s\\\",\\\"%s\\\",\\\"%s\\\",%s\" % (\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "257", "code": "            concept1, relation, concept2, context, weight))\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "258", "code": "    f = open(path, \"w\")\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "259", "code": "    f.write(BOM_UTF8)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "260", "code": "    f.write(\"\\n\".join(s).encode(\"utf-8\"))\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "261", "code": "    f.close()\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "262", "code": "    \n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "263", "code": "def json():\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "264", "code": "    \"\"\" Returns a JSON-string with the data from commonsense.csv.\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "265", "code": "        Each relation is encoded as a [concept1, relation, concept2, context, weight] list.\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "266", "code": "    \"\"\"\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "267", "code": "    f = lambda s: s.replace(\"'\", \"\\\\'\").encode(\"utf-8\")\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "C", "line": "268", "code": "    s = []\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "C", "line": "269", "code": "    g = Commonsense()\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "C", "line": "270", "code": "    for e in g.edges:\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "271", "code": "        s.append(\"\\n\\t['%s', '%s', '%s', '%s', %.2f]\" % (\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "272", "code": "            f(e.node1.id),\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "273", "code": "            f(e.type),\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "274", "code": "            f(e.node2.id),\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "275", "code": "            f(e.context),\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "276", "code": "              e.weight\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "277", "code": "        ))\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "278", "code": "    return \"commonsense = [%s];\" % \", \".join(s)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "279", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "280", "code": "#download(\"commonsense.csv\", threshold=50)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "281", "code": "#open(\"commonsense.js\", \"w\").write(json())\n", "colour": "black", "author": "tom@organisms.be"}]]}