{"path": "/home/asumal/git/cs410/pattern/pattern/server/cherrypy/cherrypy/wsgiserver/wsgiserver2.py", "lines": [[{"error": "C", "line": "1", "code": "\"\"\"A high-speed, production ready, thread pooled, generic HTTP server.\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "2", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "3", "code": "Simplest example on how to use this module directly\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "4", "code": "(without using CherryPy's application machinery)::\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "5", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "6", "code": "    from cherrypy import wsgiserver\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "7", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "8", "code": "    def my_crazy_app(environ, start_response):\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "9", "code": "        status = '200 OK'\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "10", "code": "        response_headers = [('Content-type','text/plain')]\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "11", "code": "        start_response(status, response_headers)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "12", "code": "        return ['Hello world!']\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "13", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "14", "code": "    server = wsgiserver.CherryPyWSGIServer(\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "15", "code": "                ('0.0.0.0', 8070), my_crazy_app,\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "16", "code": "                server_name='www.cherrypy.example')\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "17", "code": "    server.start()\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "18", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "19", "code": "The CherryPy WSGI server can serve as many WSGI applications\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "20", "code": "as you want in one instance by using a WSGIPathInfoDispatcher::\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "21", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "22", "code": "    d = WSGIPathInfoDispatcher({'/': my_crazy_app, '/blog': my_blog_app})\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "23", "code": "    server = wsgiserver.CherryPyWSGIServer(('0.0.0.0', 80), d)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "24", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "25", "code": "Want SSL support? Just set server.ssl_adapter to an SSLAdapter instance.\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "26", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "27", "code": "This won't call the CherryPy engine (application side) at all, only the\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "28", "code": "HTTP server, which is independent from the rest of CherryPy. Don't\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "29", "code": "let the name \"CherryPyWSGIServer\" throw you; the name merely reflects\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "30", "code": "its origin, not its coupling.\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "31", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "32", "code": "For those of you wanting to understand internals of this module, here's the\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "33", "code": "basic call flow. The server's listening thread runs a very tight loop,\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "34", "code": "sticking incoming connections onto a Queue::\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "35", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "36", "code": "    server = CherryPyWSGIServer(...)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "37", "code": "    server.start()\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "38", "code": "    while True:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "39", "code": "        tick()\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "40", "code": "        # This blocks until a request comes in:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "41", "code": "        child = socket.accept()\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "42", "code": "        conn = HTTPConnection(child, ...)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "43", "code": "        server.requests.put(conn)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "44", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "45", "code": "Worker threads are kept in a pool and poll the Queue, popping off and then\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "46", "code": "handling each connection in turn. Each connection can consist of an arbitrary\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "47", "code": "number of requests and their responses, so we run a nested loop::\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "48", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "49", "code": "    while True:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "50", "code": "        conn = server.requests.get()\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "51", "code": "        conn.communicate()\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "52", "code": "        ->  while True:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "53", "code": "                req = HTTPRequest(...)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "54", "code": "                req.parse_request()\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "55", "code": "                ->  # Read the Request-Line, e.g. \"GET /page HTTP/1.1\"\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "56", "code": "                    req.rfile.readline()\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "57", "code": "                    read_headers(req.rfile, req.inheaders)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "58", "code": "                req.respond()\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "59", "code": "                ->  response = app(...)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "60", "code": "                    try:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "61", "code": "                        for chunk in response:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "62", "code": "                            if chunk:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "63", "code": "                                req.write(chunk)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "64", "code": "                    finally:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "65", "code": "                        if hasattr(response, \"close\"):\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "66", "code": "                            response.close()\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "67", "code": "                if req.close_connection:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "68", "code": "                    return\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "69", "code": "\"\"\"\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "70", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "71", "code": "__all__ = ['HTTPRequest', 'HTTPConnection', 'HTTPServer',\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "72", "code": "           'SizeCheckWrapper', 'KnownLengthRFile', 'ChunkedRFile',\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "73", "code": "           'CP_fileobject',\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "74", "code": "           'MaxSizeExceeded', 'NoSSLError', 'FatalSSLAlert',\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "75", "code": "           'WorkerThread', 'ThreadPool', 'SSLAdapter',\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "76", "code": "           'CherryPyWSGIServer',\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "77", "code": "           'Gateway', 'WSGIGateway', 'WSGIGateway_10', 'WSGIGateway_u0',\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "78", "code": "           'WSGIPathInfoDispatcher', 'get_ssl_adapter_class']\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "79", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "80", "code": "import os\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "81", "code": "try:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "F", "line": "82", "code": "    import queue\n", "colour": "red", "author": "tom@organisms.be"}, {"error": "W", "line": "83", "code": "except:\n", "colour": "purple", "author": "tom@organisms.be"}, {"error": "none", "line": "84", "code": "    import Queue as queue\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "85", "code": "import re\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "86", "code": "import rfc822\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "87", "code": "import socket\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "88", "code": "import sys\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "89", "code": "if 'win' in sys.platform and not hasattr(socket, 'IPPROTO_IPV6'):\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "90", "code": "    socket.IPPROTO_IPV6 = 41\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "91", "code": "try:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "92", "code": "    import cStringIO as StringIO\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "93", "code": "except ImportError:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "94", "code": "    import StringIO\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "95", "code": "DEFAULT_BUFFER_SIZE = -1\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "96", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "W", "line": "97", "code": "_fileobject_uses_str_type = isinstance(socket._fileobject(None)._rbuf, basestring)\n", "colour": "purple", "author": "tom@organisms.be"}, {"error": "none", "line": "98", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "99", "code": "import threading\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "100", "code": "import time\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "101", "code": "import traceback\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "102", "code": "def format_exc(limit=None):\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "103", "code": "    \"\"\"Like print_exc() but return a string. Backport for Python 2.3.\"\"\"\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "104", "code": "    try:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "105", "code": "        etype, value, tb = sys.exc_info()\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "106", "code": "        return ''.join(traceback.format_exception(etype, value, tb, limit))\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "107", "code": "    finally:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "108", "code": "        etype = value = tb = None\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "109", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "110", "code": "import operator\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "111", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "112", "code": "from urllib import unquote\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "113", "code": "import warnings\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "114", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "115", "code": "if sys.version_info >= (3, 0):\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "116", "code": "    bytestr = bytes\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "C", "line": "117", "code": "    unicodestr = str\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "C", "line": "118", "code": "    basestring = (bytes, str)\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "C", "line": "119", "code": "    def ntob(n, encoding='ISO-8859-1'):\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "C", "line": "120", "code": "        \"\"\"Return the given native string as a byte string in the given encoding.\"\"\"\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "121", "code": "        # In Python 3, the native string type is unicode\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "122", "code": "        return n.encode(encoding)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "123", "code": "else:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "124", "code": "    bytestr = str\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "C", "line": "125", "code": "    unicodestr = unicode\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "C", "line": "126", "code": "    basestring = basestring\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "W", "line": "127", "code": "    def ntob(n, encoding='ISO-8859-1'):\n", "colour": "purple", "author": "tom@organisms.be"}, {"error": "C", "line": "128", "code": "        \"\"\"Return the given native string as a byte string in the given encoding.\"\"\"\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "129", "code": "        # In Python 2, the native string type is bytes. Assume it's already\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "130", "code": "        # in the given encoding, which for ISO-8859-1 is almost always what\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "131", "code": "        # was intended.\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "132", "code": "        return n\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "133", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "134", "code": "LF = ntob('\\n')\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "135", "code": "CRLF = ntob('\\r\\n')\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "136", "code": "TAB = ntob('\\t')\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "137", "code": "SPACE = ntob(' ')\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "138", "code": "COLON = ntob(':')\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "139", "code": "SEMICOLON = ntob(';')\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "140", "code": "EMPTY = ntob('')\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "141", "code": "NUMBER_SIGN = ntob('#')\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "142", "code": "QUESTION_MARK = ntob('?')\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "143", "code": "ASTERISK = ntob('*')\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "144", "code": "FORWARD_SLASH = ntob('/')\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "145", "code": "quoted_slash = re.compile(ntob(\"(?i)%2F\"))\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "146", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "147", "code": "import errno\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "148", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "149", "code": "def plat_specific_errors(*errnames):\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "150", "code": "    \"\"\"Return error numbers for all errors in errnames on this platform.\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "151", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "152", "code": "    The 'errno' module contains different global constants depending on\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "153", "code": "    the specific platform (OS). This function will return the list of\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "154", "code": "    numeric values for a given list of potential names.\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "155", "code": "    \"\"\"\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "156", "code": "    errno_names = dir(errno)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "157", "code": "    nums = [getattr(errno, k) for k in errnames if k in errno_names]\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "158", "code": "    # de-dupe the list\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "159", "code": "    return list(dict.fromkeys(nums).keys())\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "160", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "161", "code": "socket_error_eintr = plat_specific_errors(\"EINTR\", \"WSAEINTR\")\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "162", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "163", "code": "socket_errors_to_ignore = plat_specific_errors(\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "164", "code": "    \"EPIPE\",\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "165", "code": "    \"EBADF\", \"WSAEBADF\",\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "166", "code": "    \"ENOTSOCK\", \"WSAENOTSOCK\",\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "167", "code": "    \"ETIMEDOUT\", \"WSAETIMEDOUT\",\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "168", "code": "    \"ECONNREFUSED\", \"WSAECONNREFUSED\",\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "169", "code": "    \"ECONNRESET\", \"WSAECONNRESET\",\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "170", "code": "    \"ECONNABORTED\", \"WSAECONNABORTED\",\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "171", "code": "    \"ENETRESET\", \"WSAENETRESET\",\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "172", "code": "    \"EHOSTDOWN\", \"EHOSTUNREACH\",\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "173", "code": "    )\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "174", "code": "socket_errors_to_ignore.append(\"timed out\")\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "175", "code": "socket_errors_to_ignore.append(\"The read operation timed out\")\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "176", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "177", "code": "socket_errors_nonblocking = plat_specific_errors(\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "178", "code": "    'EAGAIN', 'EWOULDBLOCK', 'WSAEWOULDBLOCK')\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "179", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "180", "code": "comma_separated_headers = [ntob(h) for h in\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "C", "line": "181", "code": "    ['Accept', 'Accept-Charset', 'Accept-Encoding',\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "182", "code": "     'Accept-Language', 'Accept-Ranges', 'Allow', 'Cache-Control',\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "183", "code": "     'Connection', 'Content-Encoding', 'Content-Language', 'Expect',\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "184", "code": "     'If-Match', 'If-None-Match', 'Pragma', 'Proxy-Authenticate', 'TE',\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "185", "code": "     'Trailer', 'Transfer-Encoding', 'Upgrade', 'Vary', 'Via', 'Warning',\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "186", "code": "     'WWW-Authenticate']]\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "187", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "188", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "189", "code": "import logging\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "190", "code": "if not hasattr(logging, 'statistics'): logging.statistics = {}\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "191", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "192", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "193", "code": "def read_headers(rfile, hdict=None):\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "194", "code": "    \"\"\"Read headers from the given stream into the given header dict.\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "195", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "196", "code": "    If hdict is None, a new header dict is created. Returns the populated\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "197", "code": "    header dict.\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "198", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "199", "code": "    Headers which are repeated are folded together using a comma if their\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "200", "code": "    specification so dictates.\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "201", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "202", "code": "    This function raises ValueError when the read bytes violate the HTTP spec.\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "203", "code": "    You should probably return \"400 Bad Request\" if this happens.\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "204", "code": "    \"\"\"\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "205", "code": "    if hdict is None:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "206", "code": "        hdict = {}\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "207", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "208", "code": "    while True:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "209", "code": "        line = rfile.readline()\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "210", "code": "        if not line:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "211", "code": "            # No more data--illegal end of headers\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "212", "code": "            raise ValueError(\"Illegal end of headers.\")\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "213", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "214", "code": "        if line == CRLF:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "215", "code": "            # Normal end of headers\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "216", "code": "            break\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "217", "code": "        if not line.endswith(CRLF):\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "218", "code": "            raise ValueError(\"HTTP requires CRLF terminators\")\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "219", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "220", "code": "        if line[0] in (SPACE, TAB):\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "221", "code": "            # It's a continuation line.\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "222", "code": "            v = line.strip()\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "223", "code": "        else:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "224", "code": "            try:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "225", "code": "                k, v = line.split(COLON, 1)\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "226", "code": "            except ValueError:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "227", "code": "                raise ValueError(\"Illegal header line.\")\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "W", "line": "228", "code": "            # TODO: what about TE and WWW-Authenticate?\n", "colour": "purple", "author": "tom@organisms.be"}, {"error": "none", "line": "229", "code": "            k = k.strip().title()\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "230", "code": "            v = v.strip()\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "231", "code": "            hname = k\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "232", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "233", "code": "        if k in comma_separated_headers:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "234", "code": "            existing = hdict.get(hname)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "235", "code": "            if existing:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "236", "code": "                v = \", \".join((existing, v))\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "237", "code": "        hdict[hname] = v\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "238", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "239", "code": "    return hdict\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "240", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "241", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "242", "code": "class MaxSizeExceeded(Exception):\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "243", "code": "    pass\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "244", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "245", "code": "class SizeCheckWrapper(object):\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "246", "code": "    \"\"\"Wraps a file-like object, raising MaxSizeExceeded if too large.\"\"\"\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "247", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "248", "code": "    def __init__(self, rfile, maxlen):\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "249", "code": "        self.rfile = rfile\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "250", "code": "        self.maxlen = maxlen\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "251", "code": "        self.bytes_read = 0\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "252", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "253", "code": "    def _check_length(self):\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "254", "code": "        if self.maxlen and self.bytes_read > self.maxlen:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "255", "code": "            raise MaxSizeExceeded()\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "256", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "257", "code": "    def read(self, size=None):\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "258", "code": "        data = self.rfile.read(size)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "259", "code": "        self.bytes_read += len(data)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "260", "code": "        self._check_length()\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "261", "code": "        return data\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "262", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "263", "code": "    def readline(self, size=None):\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "264", "code": "        if size is not None:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "265", "code": "            data = self.rfile.readline(size)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "266", "code": "            self.bytes_read += len(data)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "267", "code": "            self._check_length()\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "268", "code": "            return data\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "269", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "270", "code": "        # User didn't specify a size ...\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "271", "code": "        # We read the line in chunks to make sure it's not a 100MB line !\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "272", "code": "        res = []\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "273", "code": "        while True:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "274", "code": "            data = self.rfile.readline(256)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "275", "code": "            self.bytes_read += len(data)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "276", "code": "            self._check_length()\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "277", "code": "            res.append(data)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "278", "code": "            # See http://www.cherrypy.org/ticket/421\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "279", "code": "            if len(data) < 256 or data[-1:] == \"\\n\":\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "280", "code": "                return EMPTY.join(res)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "281", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "282", "code": "    def readlines(self, sizehint=0):\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "283", "code": "        # Shamelessly stolen from StringIO\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "284", "code": "        total = 0\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "285", "code": "        lines = []\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "286", "code": "        line = self.readline()\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "287", "code": "        while line:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "288", "code": "            lines.append(line)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "289", "code": "            total += len(line)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "290", "code": "            if 0 < sizehint <= total:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "291", "code": "                break\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "292", "code": "            line = self.readline()\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "293", "code": "        return lines\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "294", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "295", "code": "    def close(self):\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "296", "code": "        self.rfile.close()\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "297", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "298", "code": "    def __iter__(self):\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "299", "code": "        return self\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "300", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "301", "code": "    def __next__(self):\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "302", "code": "        data = next(self.rfile)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "303", "code": "        self.bytes_read += len(data)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "304", "code": "        self._check_length()\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "305", "code": "        return data\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "306", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "307", "code": "    def next(self):\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "308", "code": "        data = self.rfile.next()\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "309", "code": "        self.bytes_read += len(data)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "310", "code": "        self._check_length()\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "311", "code": "        return data\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "312", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "313", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "314", "code": "class KnownLengthRFile(object):\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "315", "code": "    \"\"\"Wraps a file-like object, returning an empty string when exhausted.\"\"\"\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "316", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "317", "code": "    def __init__(self, rfile, content_length):\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "318", "code": "        self.rfile = rfile\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "319", "code": "        self.remaining = content_length\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "320", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "321", "code": "    def read(self, size=None):\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "322", "code": "        if self.remaining == 0:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "323", "code": "            return ''\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "324", "code": "        if size is None:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "325", "code": "            size = self.remaining\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "326", "code": "        else:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "327", "code": "            size = min(size, self.remaining)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "328", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "329", "code": "        data = self.rfile.read(size)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "330", "code": "        self.remaining -= len(data)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "331", "code": "        return data\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "332", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "333", "code": "    def readline(self, size=None):\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "334", "code": "        if self.remaining == 0:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "335", "code": "            return ''\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "336", "code": "        if size is None:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "337", "code": "            size = self.remaining\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "338", "code": "        else:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "339", "code": "            size = min(size, self.remaining)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "340", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "341", "code": "        data = self.rfile.readline(size)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "342", "code": "        self.remaining -= len(data)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "343", "code": "        return data\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "344", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "345", "code": "    def readlines(self, sizehint=0):\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "346", "code": "        # Shamelessly stolen from StringIO\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "347", "code": "        total = 0\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "348", "code": "        lines = []\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "349", "code": "        line = self.readline(sizehint)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "350", "code": "        while line:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "351", "code": "            lines.append(line)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "352", "code": "            total += len(line)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "353", "code": "            if 0 < sizehint <= total:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "354", "code": "                break\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "355", "code": "            line = self.readline(sizehint)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "356", "code": "        return lines\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "357", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "358", "code": "    def close(self):\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "359", "code": "        self.rfile.close()\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "360", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "W", "line": "361", "code": "    def __iter__(self):\n", "colour": "purple", "author": "tom@organisms.be"}, {"error": "none", "line": "362", "code": "        return self\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "363", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "364", "code": "    def __next__(self):\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "365", "code": "        data = next(self.rfile)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "366", "code": "        self.remaining -= len(data)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "367", "code": "        return data\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "368", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "369", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "370", "code": "class ChunkedRFile(object):\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "371", "code": "    \"\"\"Wraps a file-like object, returning an empty string when exhausted.\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "372", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "373", "code": "    This class is intended to provide a conforming wsgi.input value for\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "374", "code": "    request entities that have been encoded with the 'chunked' transfer\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "375", "code": "    encoding.\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "376", "code": "    \"\"\"\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "377", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "378", "code": "    def __init__(self, rfile, maxlen, bufsize=8192):\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "379", "code": "        self.rfile = rfile\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "380", "code": "        self.maxlen = maxlen\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "381", "code": "        self.bytes_read = 0\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "382", "code": "        self.buffer = EMPTY\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "383", "code": "        self.bufsize = bufsize\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "384", "code": "        self.closed = False\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "385", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "386", "code": "    def _fetch(self):\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "387", "code": "        if self.closed:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "388", "code": "            return\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "389", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "390", "code": "        line = self.rfile.readline()\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "391", "code": "        self.bytes_read += len(line)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "392", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "393", "code": "        if self.maxlen and self.bytes_read > self.maxlen:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "394", "code": "            raise MaxSizeExceeded(\"Request Entity Too Large\", self.maxlen)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "395", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "396", "code": "        line = line.strip().split(SEMICOLON, 1)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "397", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "398", "code": "        try:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "399", "code": "            chunk_size = line.pop(0)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "400", "code": "            chunk_size = int(chunk_size, 16)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "401", "code": "        except ValueError:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "402", "code": "            raise ValueError(\"Bad chunked transfer size: \" + repr(chunk_size))\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "403", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "404", "code": "        if chunk_size <= 0:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "405", "code": "            self.closed = True\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "406", "code": "            return\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "407", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "408", "code": "##            if line: chunk_extension = line[0]\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "409", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "410", "code": "        if self.maxlen and self.bytes_read + chunk_size > self.maxlen:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "411", "code": "            raise IOError(\"Request Entity Too Large\")\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "412", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "413", "code": "        chunk = self.rfile.read(chunk_size)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "414", "code": "        self.bytes_read += len(chunk)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "415", "code": "        self.buffer += chunk\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "416", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "417", "code": "        crlf = self.rfile.read(2)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "418", "code": "        if crlf != CRLF:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "419", "code": "            raise ValueError(\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "420", "code": "                 \"Bad chunked transfer coding (expected '\\\\r\\\\n', \"\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "421", "code": "                 \"got \" + repr(crlf) + \")\")\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "422", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "423", "code": "    def read(self, size=None):\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "424", "code": "        data = EMPTY\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "425", "code": "        while True:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "426", "code": "            if size and len(data) >= size:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "427", "code": "                return data\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "428", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "429", "code": "            if not self.buffer:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "430", "code": "                self._fetch()\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "431", "code": "                if not self.buffer:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "432", "code": "                    # EOF\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "433", "code": "                    return data\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "434", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "435", "code": "            if size:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "436", "code": "                remaining = size - len(data)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "437", "code": "                data += self.buffer[:remaining]\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "438", "code": "                self.buffer = self.buffer[remaining:]\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "439", "code": "            else:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "440", "code": "                data += self.buffer\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "441", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "442", "code": "    def readline(self, size=None):\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "443", "code": "        data = EMPTY\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "444", "code": "        while True:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "445", "code": "            if size and len(data) >= size:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "446", "code": "                return data\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "447", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "448", "code": "            if not self.buffer:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "449", "code": "                self._fetch()\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "450", "code": "                if not self.buffer:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "451", "code": "                    # EOF\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "452", "code": "                    return data\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "453", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "454", "code": "            newline_pos = self.buffer.find(LF)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "455", "code": "            if size:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "456", "code": "                if newline_pos == -1:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "457", "code": "                    remaining = size - len(data)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "458", "code": "                    data += self.buffer[:remaining]\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "459", "code": "                    self.buffer = self.buffer[remaining:]\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "460", "code": "                else:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "461", "code": "                    remaining = min(size - len(data), newline_pos)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "462", "code": "                    data += self.buffer[:remaining]\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "463", "code": "                    self.buffer = self.buffer[remaining:]\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "464", "code": "            else:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "465", "code": "                if newline_pos == -1:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "466", "code": "                    data += self.buffer\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "467", "code": "                else:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "468", "code": "                    data += self.buffer[:newline_pos]\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "469", "code": "                    self.buffer = self.buffer[newline_pos:]\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "470", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "471", "code": "    def readlines(self, sizehint=0):\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "472", "code": "        # Shamelessly stolen from StringIO\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "473", "code": "        total = 0\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "474", "code": "        lines = []\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "475", "code": "        line = self.readline(sizehint)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "476", "code": "        while line:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "477", "code": "            lines.append(line)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "478", "code": "            total += len(line)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "479", "code": "            if 0 < sizehint <= total:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "480", "code": "                break\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "481", "code": "            line = self.readline(sizehint)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "482", "code": "        return lines\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "483", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "484", "code": "    def read_trailer_lines(self):\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "485", "code": "        if not self.closed:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "486", "code": "            raise ValueError(\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "487", "code": "                \"Cannot read trailers until the request body has been read.\")\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "488", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "489", "code": "        while True:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "490", "code": "            line = self.rfile.readline()\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "491", "code": "            if not line:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "492", "code": "                # No more data--illegal end of headers\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "493", "code": "                raise ValueError(\"Illegal end of headers.\")\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "494", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "495", "code": "            self.bytes_read += len(line)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "496", "code": "            if self.maxlen and self.bytes_read > self.maxlen:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "497", "code": "                raise IOError(\"Request Entity Too Large\")\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "498", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "499", "code": "            if line == CRLF:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "500", "code": "                # Normal end of headers\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "501", "code": "                break\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "502", "code": "            if not line.endswith(CRLF):\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "503", "code": "                raise ValueError(\"HTTP requires CRLF terminators\")\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "504", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "505", "code": "            yield line\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "506", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "507", "code": "    def close(self):\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "508", "code": "        self.rfile.close()\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "509", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "510", "code": "    def __iter__(self):\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "511", "code": "        # Shamelessly stolen from StringIO\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "512", "code": "        total = 0\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "E", "line": "513", "code": "        line = self.readline(sizehint)\n", "colour": "yellow", "author": "tom@organisms.be"}, {"error": "none", "line": "514", "code": "        while line:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "515", "code": "            yield line\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "516", "code": "            total += len(line)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "E", "line": "517", "code": "            if 0 < sizehint <= total:\n", "colour": "yellow", "author": "tom@organisms.be"}, {"error": "none", "line": "518", "code": "                break\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "E", "line": "519", "code": "            line = self.readline(sizehint)\n", "colour": "yellow", "author": "tom@organisms.be"}, {"error": "none", "line": "520", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "521", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "R", "line": "522", "code": "class HTTPRequest(object):\n", "colour": "green", "author": "tom@organisms.be"}, {"error": "none", "line": "523", "code": "    \"\"\"An HTTP Request (and response).\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "524", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "525", "code": "    A single HTTP connection may consist of multiple request/response pairs.\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "526", "code": "    \"\"\"\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "527", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "528", "code": "    server = None\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "529", "code": "    \"\"\"The HTTPServer object which is receiving this request.\"\"\"\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "530", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "531", "code": "    conn = None\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "532", "code": "    \"\"\"The HTTPConnection object on which this request connected.\"\"\"\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "533", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "534", "code": "    inheaders = {}\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "535", "code": "    \"\"\"A dict of request headers.\"\"\"\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "536", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "537", "code": "    outheaders = []\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "538", "code": "    \"\"\"A list of header tuples to write in the response.\"\"\"\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "539", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "540", "code": "    ready = False\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "541", "code": "    \"\"\"When True, the request has been parsed and is ready to begin generating\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "542", "code": "    the response. When False, signals the calling Connection that the response\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "543", "code": "    should not be generated and the connection should close.\"\"\"\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "544", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "545", "code": "    close_connection = False\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "546", "code": "    \"\"\"Signals the calling Connection that the request should close. This does\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "547", "code": "    not imply an error! The client and/or server may each request that the\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "548", "code": "    connection be closed.\"\"\"\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "549", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "550", "code": "    chunked_write = False\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "551", "code": "    \"\"\"If True, output will be encoded with the \"chunked\" transfer-coding.\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "552", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "553", "code": "    This value is set automatically inside send_headers.\"\"\"\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "554", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "555", "code": "    def __init__(self, server, conn):\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "556", "code": "        self.server= server\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "557", "code": "        self.conn = conn\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "558", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "559", "code": "        self.ready = False\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "560", "code": "        self.started_request = False\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "561", "code": "        self.scheme = ntob(\"http\")\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "562", "code": "        if self.server.ssl_adapter is not None:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "563", "code": "            self.scheme = ntob(\"https\")\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "564", "code": "        # Use the lowest-common protocol in case read_request_line errors.\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "565", "code": "        self.response_protocol = 'HTTP/1.0'\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "566", "code": "        self.inheaders = {}\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "567", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "568", "code": "        self.status = \"\"\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "569", "code": "        self.outheaders = []\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "570", "code": "        self.sent_headers = False\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "571", "code": "        self.close_connection = self.__class__.close_connection\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "572", "code": "        self.chunked_read = False\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "573", "code": "        self.chunked_write = self.__class__.chunked_write\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "574", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "575", "code": "    def parse_request(self):\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "576", "code": "        \"\"\"Parse the next HTTP request start-line and message-headers.\"\"\"\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "W", "line": "577", "code": "        self.rfile = SizeCheckWrapper(self.conn.rfile,\n", "colour": "purple", "author": "tom@organisms.be"}, {"error": "none", "line": "578", "code": "                                      self.server.max_request_header_size)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "579", "code": "        try:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "580", "code": "            success = self.read_request_line()\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "581", "code": "        except MaxSizeExceeded:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "582", "code": "            self.simple_response(\"414 Request-URI Too Long\",\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "583", "code": "                \"The Request-URI sent with the request exceeds the maximum \"\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "584", "code": "                \"allowed bytes.\")\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "585", "code": "            return\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "586", "code": "        else:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "587", "code": "            if not success:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "588", "code": "                return\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "589", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "590", "code": "        try:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "591", "code": "            success = self.read_request_headers()\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "592", "code": "        except MaxSizeExceeded:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "593", "code": "            self.simple_response(\"413 Request Entity Too Large\",\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "594", "code": "                \"The headers sent with the request exceed the maximum \"\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "595", "code": "                \"allowed bytes.\")\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "596", "code": "            return\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "597", "code": "        else:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "598", "code": "            if not success:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "599", "code": "                return\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "600", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "601", "code": "        self.ready = True\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "602", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "R", "line": "603", "code": "    def read_request_line(self):\n", "colour": "green", "author": "tom@organisms.be"}, {"error": "none", "line": "604", "code": "        # HTTP/1.1 connections are persistent by default. If a client\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "605", "code": "        # requests a page, then idles (leaves the connection open),\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "606", "code": "        # then rfile.readline() will raise socket.error(\"timed out\").\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "607", "code": "        # Note that it does this based on the value given to settimeout(),\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "608", "code": "        # and doesn't need the client to request or acknowledge the close\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "609", "code": "        # (although your TCP stack might suffer for it: cf Apache's history\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "610", "code": "        # with FIN_WAIT_2).\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "611", "code": "        request_line = self.rfile.readline()\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "612", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "613", "code": "        # Set started_request to True so communicate() knows to send 408\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "614", "code": "        # from here on out.\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "615", "code": "        self.started_request = True\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "616", "code": "        if not request_line:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "617", "code": "            return False\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "618", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "619", "code": "        if request_line == CRLF:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "620", "code": "            # RFC 2616 sec 4.1: \"...if the server is reading the protocol\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "621", "code": "            # stream at the beginning of a message and receives a CRLF\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "622", "code": "            # first, it should ignore the CRLF.\"\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "623", "code": "            # But only ignore one leading line! else we enable a DoS.\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "624", "code": "            request_line = self.rfile.readline()\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "625", "code": "            if not request_line:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "626", "code": "                return False\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "627", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "628", "code": "        if not request_line.endswith(CRLF):\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "629", "code": "            self.simple_response(\"400 Bad Request\", \"HTTP requires CRLF terminators\")\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "630", "code": "            return False\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "631", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "632", "code": "        try:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "633", "code": "            method, uri, req_protocol = request_line.strip().split(SPACE, 2)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "634", "code": "            rp = int(req_protocol[5]), int(req_protocol[7])\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "635", "code": "        except (ValueError, IndexError):\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "636", "code": "            self.simple_response(\"400 Bad Request\", \"Malformed Request-Line\")\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "637", "code": "            return False\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "638", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "W", "line": "639", "code": "        self.uri = uri\n", "colour": "purple", "author": "tom@organisms.be"}, {"error": "W", "line": "640", "code": "        self.method = method\n", "colour": "purple", "author": "tom@organisms.be"}, {"error": "none", "line": "641", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "642", "code": "        # uri may be an abs_path (including \"http://host.domain.tld\");\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "W", "line": "643", "code": "        scheme, authority, path = self.parse_request_uri(uri)\n", "colour": "purple", "author": "tom@organisms.be"}, {"error": "none", "line": "644", "code": "        if NUMBER_SIGN in path:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "645", "code": "            self.simple_response(\"400 Bad Request\",\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "646", "code": "                                 \"Illegal #fragment in Request-URI.\")\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "647", "code": "            return False\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "648", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "649", "code": "        if scheme:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "650", "code": "            self.scheme = scheme\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "651", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "652", "code": "        qs = EMPTY\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "653", "code": "        if QUESTION_MARK in path:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "654", "code": "            path, qs = path.split(QUESTION_MARK, 1)\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "655", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "656", "code": "        # Unquote the path+params (e.g. \"/this%20path\" -> \"/this path\").\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "657", "code": "        # http://www.w3.org/Protocols/rfc2616/rfc2616-sec5.html#sec5.1.2\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "658", "code": "        #\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "659", "code": "        # But note that \"...a URI must be separated into its components\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "660", "code": "        # before the escaped characters within those components can be\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "661", "code": "        # safely decoded.\" http://www.ietf.org/rfc/rfc2396.txt, sec 2.4.2\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "662", "code": "        # Therefore, \"/this%2Fpath\" becomes \"/this%2Fpath\", not \"/this/path\".\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "663", "code": "        try:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "664", "code": "            atoms = [unquote(x) for x in quoted_slash.split(path)]\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "665", "code": "        except ValueError:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "666", "code": "            ex = sys.exc_info()[1]\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "667", "code": "            self.simple_response(\"400 Bad Request\", ex.args[0])\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "668", "code": "            return False\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "669", "code": "        path = \"%2F\".join(atoms)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "W", "line": "670", "code": "        self.path = path\n", "colour": "purple", "author": "tom@organisms.be"}, {"error": "none", "line": "671", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "672", "code": "        # Note that, like wsgiref and most other HTTP servers,\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "673", "code": "        # we \"% HEX HEX\"-unquote the path but not the query string.\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "W", "line": "674", "code": "        self.qs = qs\n", "colour": "purple", "author": "tom@organisms.be"}, {"error": "none", "line": "675", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "676", "code": "        # Compare request and server HTTP protocol versions, in case our\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "677", "code": "        # server does not support the requested protocol. Limit our output\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "678", "code": "        # to min(req, server). We want the following output:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "679", "code": "        #     request    server     actual written   supported response\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "680", "code": "        #     protocol   protocol  response protocol    feature set\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "681", "code": "        # a     1.0        1.0           1.0                1.0\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "682", "code": "        # b     1.0        1.1           1.1                1.0\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "683", "code": "        # c     1.1        1.0           1.0                1.0\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "684", "code": "        # d     1.1        1.1           1.1                1.1\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "685", "code": "        # Notice that, in (b), the response will be \"HTTP/1.1\" even though\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "686", "code": "        # the client only understands 1.0. RFC 2616 10.5.6 says we should\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "687", "code": "        # only return 505 if the _major_ version is different.\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "688", "code": "        sp = int(self.server.protocol[5]), int(self.server.protocol[7])\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "689", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "690", "code": "        if sp[0] != rp[0]:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "691", "code": "            self.simple_response(\"505 HTTP Version Not Supported\")\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "692", "code": "            return False\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "693", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "W", "line": "694", "code": "        self.request_protocol = req_protocol\n", "colour": "purple", "author": "tom@organisms.be"}, {"error": "none", "line": "695", "code": "        self.response_protocol = \"HTTP/%s.%s\" % min(rp, sp)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "696", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "697", "code": "        return True\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "698", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "R", "line": "699", "code": "    def read_request_headers(self):\n", "colour": "green", "author": "tom@organisms.be"}, {"error": "none", "line": "700", "code": "        \"\"\"Read self.rfile into self.inheaders. Return success.\"\"\"\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "701", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "702", "code": "        # then all the http headers\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "703", "code": "        try:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "704", "code": "            read_headers(self.rfile, self.inheaders)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "705", "code": "        except ValueError:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "706", "code": "            ex = sys.exc_info()[1]\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "707", "code": "            self.simple_response(\"400 Bad Request\", ex.args[0])\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "708", "code": "            return False\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "709", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "710", "code": "        mrbs = self.server.max_request_body_size\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "711", "code": "        if mrbs and int(self.inheaders.get(\"Content-Length\", 0)) > mrbs:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "712", "code": "            self.simple_response(\"413 Request Entity Too Large\",\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "713", "code": "                \"The entity sent with the request exceeds the maximum \"\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "714", "code": "                \"allowed bytes.\")\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "715", "code": "            return False\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "716", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "717", "code": "        # Persistent connection support\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "718", "code": "        if self.response_protocol == \"HTTP/1.1\":\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "719", "code": "            # Both server and client are HTTP/1.1\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "720", "code": "            if self.inheaders.get(\"Connection\", \"\") == \"close\":\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "721", "code": "                self.close_connection = True\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "722", "code": "        else:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "723", "code": "            # Either the server or client (or both) are HTTP/1.0\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "724", "code": "            if self.inheaders.get(\"Connection\", \"\") != \"Keep-Alive\":\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "725", "code": "                self.close_connection = True\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "726", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "727", "code": "        # Transfer-Encoding support\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "728", "code": "        te = None\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "729", "code": "        if self.response_protocol == \"HTTP/1.1\":\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "730", "code": "            te = self.inheaders.get(\"Transfer-Encoding\")\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "731", "code": "            if te:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "732", "code": "                te = [x.strip().lower() for x in te.split(\",\") if x.strip()]\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "733", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "734", "code": "        self.chunked_read = False\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "735", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "736", "code": "        if te:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "737", "code": "            for enc in te:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "738", "code": "                if enc == \"chunked\":\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "739", "code": "                    self.chunked_read = True\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "740", "code": "                else:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "741", "code": "                    # Note that, even if we see \"chunked\", we must reject\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "742", "code": "                    # if there is an extension we don't recognize.\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "743", "code": "                    self.simple_response(\"501 Unimplemented\")\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "744", "code": "                    self.close_connection = True\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "745", "code": "                    return False\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "746", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "747", "code": "        # From PEP 333:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "748", "code": "        # \"Servers and gateways that implement HTTP 1.1 must provide\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "749", "code": "        # transparent support for HTTP 1.1's \"expect/continue\" mechanism.\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "750", "code": "        # This may be done in any of several ways:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "751", "code": "        #   1. Respond to requests containing an Expect: 100-continue request\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "752", "code": "        #      with an immediate \"100 Continue\" response, and proceed normally.\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "753", "code": "        #   2. Proceed with the request normally, but provide the application\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "754", "code": "        #      with a wsgi.input stream that will send the \"100 Continue\"\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "755", "code": "        #      response if/when the application first attempts to read from\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "756", "code": "        #      the input stream. The read request must then remain blocked\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "757", "code": "        #      until the client responds.\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "758", "code": "        #   3. Wait until the client decides that the server does not support\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "759", "code": "        #      expect/continue, and sends the request body on its own.\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "760", "code": "        #      (This is suboptimal, and is not recommended.)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "761", "code": "        #\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "762", "code": "        # We used to do 3, but are now doing 1. Maybe we'll do 2 someday,\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "763", "code": "        # but it seems like it would be a big slowdown for such a rare case.\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "764", "code": "        if self.inheaders.get(\"Expect\", \"\") == \"100-continue\":\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "765", "code": "            # Don't use simple_response here, because it emits headers\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "766", "code": "            # we don't want. See http://www.cherrypy.org/ticket/951\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "767", "code": "            msg = self.server.protocol + \" 100 Continue\\r\\n\\r\\n\"\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "768", "code": "            try:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "769", "code": "                self.conn.wfile.sendall(msg)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "770", "code": "            except socket.error:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "771", "code": "                x = sys.exc_info()[1]\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "772", "code": "                if x.args[0] not in socket_errors_to_ignore:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "773", "code": "                    raise\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "774", "code": "        return True\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "775", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "R", "line": "776", "code": "    def parse_request_uri(self, uri):\n", "colour": "green", "author": "tom@organisms.be"}, {"error": "none", "line": "777", "code": "        \"\"\"Parse a Request-URI into (scheme, authority, path).\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "778", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "779", "code": "        Note that Request-URI's must be one of::\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "780", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "781", "code": "            Request-URI    = \"*\" | absoluteURI | abs_path | authority\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "782", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "783", "code": "        Therefore, a Request-URI which starts with a double forward-slash\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "784", "code": "        cannot be a \"net_path\"::\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "785", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "786", "code": "            net_path      = \"//\" authority [ abs_path ]\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "787", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "788", "code": "        Instead, it must be interpreted as an \"abs_path\" with an empty first\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "789", "code": "        path segment::\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "790", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "791", "code": "            abs_path      = \"/\"  path_segments\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "792", "code": "            path_segments = segment *( \"/\" segment )\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "793", "code": "            segment       = *pchar *( \";\" param )\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "794", "code": "            param         = *pchar\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "795", "code": "        \"\"\"\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "796", "code": "        if uri == ASTERISK:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "797", "code": "            return None, None, uri\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "798", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "799", "code": "        i = uri.find('://')\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "800", "code": "        if i > 0 and QUESTION_MARK not in uri[:i]:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "801", "code": "            # An absoluteURI.\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "802", "code": "            # If there's a scheme (and it must be http or https), then:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "803", "code": "            # http_URL = \"http:\" \"//\" host [ \":\" port ] [ abs_path [ \"?\" query ]]\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "804", "code": "            scheme, remainder = uri[:i].lower(), uri[i + 3:]\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "805", "code": "            authority, path = remainder.split(FORWARD_SLASH, 1)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "806", "code": "            path = FORWARD_SLASH + path\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "807", "code": "            return scheme, authority, path\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "808", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "809", "code": "        if uri.startswith(FORWARD_SLASH):\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "810", "code": "            # An abs_path.\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "811", "code": "            return None, None, uri\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "812", "code": "        else:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "813", "code": "            # An authority.\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "814", "code": "            return None, uri, None\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "815", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "816", "code": "    def respond(self):\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "817", "code": "        \"\"\"Call the gateway and write its iterable output.\"\"\"\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "818", "code": "        mrbs = self.server.max_request_body_size\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "819", "code": "        if self.chunked_read:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "W", "line": "820", "code": "            self.rfile = ChunkedRFile(self.conn.rfile, mrbs)\n", "colour": "purple", "author": "tom@organisms.be"}, {"error": "none", "line": "821", "code": "        else:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "822", "code": "            cl = int(self.inheaders.get(\"Content-Length\", 0))\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "823", "code": "            if mrbs and mrbs < cl:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "824", "code": "                if not self.sent_headers:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "825", "code": "                    self.simple_response(\"413 Request Entity Too Large\",\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "826", "code": "                        \"The entity sent with the request exceeds the maximum \"\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "827", "code": "                        \"allowed bytes.\")\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "828", "code": "                return\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "W", "line": "829", "code": "            self.rfile = KnownLengthRFile(self.conn.rfile, cl)\n", "colour": "purple", "author": "tom@organisms.be"}, {"error": "none", "line": "830", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "831", "code": "        self.server.gateway(self).respond()\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "832", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "833", "code": "        if (self.ready and not self.sent_headers):\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "834", "code": "            self.sent_headers = True\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "835", "code": "            self.send_headers()\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "836", "code": "        if self.chunked_write:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "837", "code": "            self.conn.wfile.sendall(\"0\\r\\n\\r\\n\")\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "838", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "839", "code": "    def simple_response(self, status, msg=\"\"):\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "840", "code": "        \"\"\"Write a simple response back to the client.\"\"\"\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "841", "code": "        status = str(status)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "842", "code": "        buf = [self.server.protocol + SPACE +\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "843", "code": "               status + CRLF,\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "844", "code": "               \"Content-Length: %s\\r\\n\" % len(msg),\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "845", "code": "               \"Content-Type: text/plain\\r\\n\"]\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "846", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "847", "code": "        if status[:3] in (\"413\", \"414\"):\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "848", "code": "            # Request Entity Too Large / Request-URI Too Long\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "849", "code": "            self.close_connection = True\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "850", "code": "            if self.response_protocol == 'HTTP/1.1':\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "851", "code": "                # This will not be true for 414, since read_request_line\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "852", "code": "                # usually raises 414 before reading the whole line, and we\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "853", "code": "                # therefore cannot know the proper response_protocol.\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "854", "code": "                buf.append(\"Connection: close\\r\\n\")\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "855", "code": "            else:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "856", "code": "                # HTTP/1.0 had no 413/414 status nor Connection header.\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "857", "code": "                # Emit 400 instead and trust the message body is enough.\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "858", "code": "                status = \"400 Bad Request\"\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "859", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "860", "code": "        buf.append(CRLF)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "861", "code": "        if msg:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "862", "code": "            if isinstance(msg, unicodestr):\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "863", "code": "                msg = msg.encode(\"ISO-8859-1\")\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "864", "code": "            buf.append(msg)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "865", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "866", "code": "        try:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "867", "code": "            self.conn.wfile.sendall(\"\".join(buf))\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "868", "code": "        except socket.error:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "869", "code": "            x = sys.exc_info()[1]\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "870", "code": "            if x.args[0] not in socket_errors_to_ignore:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "871", "code": "                raise\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "872", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "873", "code": "    def write(self, chunk):\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "874", "code": "        \"\"\"Write unbuffered data to the client.\"\"\"\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "875", "code": "        if self.chunked_write and chunk:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "876", "code": "            buf = [hex(len(chunk))[2:], CRLF, chunk, CRLF]\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "877", "code": "            self.conn.wfile.sendall(EMPTY.join(buf))\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "878", "code": "        else:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "879", "code": "            self.conn.wfile.sendall(chunk)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "880", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "R", "line": "881", "code": "    def send_headers(self):\n", "colour": "green", "author": "tom@organisms.be"}, {"error": "none", "line": "882", "code": "        \"\"\"Assert, process, and send the HTTP response message-headers.\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "883", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "884", "code": "        You must set self.status, and self.outheaders before calling this.\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "885", "code": "        \"\"\"\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "W", "line": "886", "code": "        hkeys = [key.lower() for key, value in self.outheaders]\n", "colour": "purple", "author": "tom@organisms.be"}, {"error": "none", "line": "887", "code": "        status = int(self.status[:3])\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "888", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "889", "code": "        if status == 413:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "890", "code": "            # Request Entity Too Large. Close conn to avoid garbage.\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "891", "code": "            self.close_connection = True\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "892", "code": "        elif \"content-length\" not in hkeys:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "893", "code": "            # \"All 1xx (informational), 204 (no content),\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "894", "code": "            # and 304 (not modified) responses MUST NOT\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "895", "code": "            # include a message-body.\" So no point chunking.\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "896", "code": "            if status < 200 or status in (204, 205, 304):\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "897", "code": "                pass\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "898", "code": "            else:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "899", "code": "                if (self.response_protocol == 'HTTP/1.1'\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "900", "code": "                    and self.method != 'HEAD'):\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "901", "code": "                    # Use the chunked transfer-coding\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "902", "code": "                    self.chunked_write = True\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "903", "code": "                    self.outheaders.append((\"Transfer-Encoding\", \"chunked\"))\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "904", "code": "                else:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "905", "code": "                    # Closing the conn is the only way to determine len.\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "906", "code": "                    self.close_connection = True\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "907", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "908", "code": "        if \"connection\" not in hkeys:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "909", "code": "            if self.response_protocol == 'HTTP/1.1':\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "910", "code": "                # Both server and client are HTTP/1.1 or better\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "911", "code": "                if self.close_connection:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "912", "code": "                    self.outheaders.append((\"Connection\", \"close\"))\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "913", "code": "            else:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "914", "code": "                # Server and/or client are HTTP/1.0\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "915", "code": "                if not self.close_connection:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "916", "code": "                    self.outheaders.append((\"Connection\", \"Keep-Alive\"))\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "917", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "918", "code": "        if (not self.close_connection) and (not self.chunked_read):\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "919", "code": "            # Read any remaining request body data on the socket.\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "920", "code": "            # \"If an origin server receives a request that does not include an\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "921", "code": "            # Expect request-header field with the \"100-continue\" expectation,\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "922", "code": "            # the request includes a request body, and the server responds\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "923", "code": "            # with a final status code before reading the entire request body\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "924", "code": "            # from the transport connection, then the server SHOULD NOT close\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "925", "code": "            # the transport connection until it has read the entire request,\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "926", "code": "            # or until the client closes the connection. Otherwise, the client\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "927", "code": "            # might not reliably receive the response message. However, this\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "928", "code": "            # requirement is not be construed as preventing a server from\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "929", "code": "            # defending itself against denial-of-service attacks, or from\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "930", "code": "            # badly broken client implementations.\"\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "931", "code": "            remaining = getattr(self.rfile, 'remaining', 0)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "932", "code": "            if remaining > 0:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "933", "code": "                self.rfile.read(remaining)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "934", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "935", "code": "        if \"date\" not in hkeys:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "936", "code": "            self.outheaders.append((\"Date\", rfc822.formatdate()))\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "937", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "938", "code": "        if \"server\" not in hkeys:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "939", "code": "            self.outheaders.append((\"Server\", self.server.server_name))\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "940", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "941", "code": "        buf = [self.server.protocol + SPACE + self.status + CRLF]\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "942", "code": "        for k, v in self.outheaders:\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "943", "code": "            buf.append(k + COLON + SPACE + v + CRLF)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "944", "code": "        buf.append(CRLF)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "945", "code": "        self.conn.wfile.sendall(EMPTY.join(buf))\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "946", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "947", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "948", "code": "class NoSSLError(Exception):\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "949", "code": "    \"\"\"Exception raised when a client speaks HTTP to an HTTPS socket.\"\"\"\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "950", "code": "    pass\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "951", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "952", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "953", "code": "class FatalSSLAlert(Exception):\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "954", "code": "    \"\"\"Exception raised when the SSL implementation signals a fatal alert.\"\"\"\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "955", "code": "    pass\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "956", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "957", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "W", "line": "958", "code": "class CP_fileobject(socket._fileobject):\n", "colour": "purple", "author": "tom@organisms.be"}, {"error": "none", "line": "959", "code": "    \"\"\"Faux file object attached to a socket object.\"\"\"\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "960", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "961", "code": "    def __init__(self, *args, **kwargs):\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "962", "code": "        self.bytes_read = 0\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "963", "code": "        self.bytes_written = 0\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "W", "line": "964", "code": "        socket._fileobject.__init__(self, *args, **kwargs)\n", "colour": "purple", "author": "tom@organisms.be"}, {"error": "none", "line": "965", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "966", "code": "    def sendall(self, data):\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "967", "code": "        \"\"\"Sendall for non-blocking sockets.\"\"\"\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "968", "code": "        while data:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "969", "code": "            try:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "970", "code": "                bytes_sent = self.send(data)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "971", "code": "                data = data[bytes_sent:]\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "972", "code": "            except socket.error as e:\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "973", "code": "                if e.args[0] not in socket_errors_nonblocking:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "974", "code": "                    raise\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "975", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "976", "code": "    def send(self, data):\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "977", "code": "        bytes_sent = self._sock.send(data)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "978", "code": "        self.bytes_written += bytes_sent\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "979", "code": "        return bytes_sent\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "980", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "981", "code": "    def flush(self):\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "982", "code": "        if self._wbuf:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "W", "line": "983", "code": "            buffer = \"\".join(self._wbuf)\n", "colour": "purple", "author": "tom@organisms.be"}, {"error": "none", "line": "984", "code": "            self._wbuf = []\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "985", "code": "            self.sendall(buffer)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "986", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "987", "code": "    def recv(self, size):\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "988", "code": "        while True:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "989", "code": "            try:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "990", "code": "                data = self._sock.recv(size)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "991", "code": "                self.bytes_read += len(data)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "992", "code": "                return data\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "993", "code": "            except socket.error as e:\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "994", "code": "                if (e.args[0] not in socket_errors_nonblocking\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "995", "code": "                    and e.args[0] not in socket_error_eintr):\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "996", "code": "                    raise\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "997", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "998", "code": "    if not _fileobject_uses_str_type:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "999", "code": "        def read(self, size=-1):\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "1000", "code": "            # Use max, disallow tiny reads in a loop as they are very inefficient.\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "C", "line": "1001", "code": "            # We never leave read() with any leftover data from a new recv() call\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "1002", "code": "            # in our internal buffer.\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1003", "code": "            rbufsize = max(self._rbufsize, self.default_bufsize)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "1004", "code": "            # Our use of StringIO rather than lists of string objects returned by\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "1005", "code": "            # recv() minimizes memory usage and fragmentation that occurs when\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1006", "code": "            # rbufsize is large compared to the typical return value of recv().\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1007", "code": "            buf = self._rbuf\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1008", "code": "            buf.seek(0, 2)  # seek end\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1009", "code": "            if size < 0:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1010", "code": "                # Read until EOF\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "1011", "code": "                self._rbuf = StringIO.StringIO()  # reset _rbuf.  we consume it via buf.\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "1012", "code": "                while True:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1013", "code": "                    data = self.recv(rbufsize)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1014", "code": "                    if not data:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1015", "code": "                        break\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1016", "code": "                    buf.write(data)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1017", "code": "                return buf.getvalue()\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1018", "code": "            else:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1019", "code": "                # Read until size bytes or EOF seen, whichever comes first\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1020", "code": "                buf_len = buf.tell()\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1021", "code": "                if buf_len >= size:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "1022", "code": "                    # Already have size bytes in our buffer?  Extract and return.\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "1023", "code": "                    buf.seek(0)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "1024", "code": "                    rv = buf.read(size)\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "1025", "code": "                    self._rbuf = StringIO.StringIO()\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1026", "code": "                    self._rbuf.write(buf.read())\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1027", "code": "                    return rv\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1028", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "1029", "code": "                self._rbuf = StringIO.StringIO()  # reset _rbuf.  we consume it via buf.\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "1030", "code": "                while True:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1031", "code": "                    left = size - buf_len\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1032", "code": "                    # recv() will malloc the amount of memory given as its\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1033", "code": "                    # parameter even though it often returns much less data\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1034", "code": "                    # than that.  The returned data string is short lived\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1035", "code": "                    # as we copy it into a StringIO and free it.  This avoids\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1036", "code": "                    # fragmentation issues on many platforms.\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1037", "code": "                    data = self.recv(left)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1038", "code": "                    if not data:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1039", "code": "                        break\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "1040", "code": "                    n = len(data)\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "1041", "code": "                    if n == size and not buf_len:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1042", "code": "                        # Shortcut.  Avoid buffer data copies when:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1043", "code": "                        # - We have no data in our buffer.\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1044", "code": "                        # AND\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1045", "code": "                        # - Our call to recv returned exactly the\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1046", "code": "                        #   number of bytes we were asked to read.\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1047", "code": "                        return data\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1048", "code": "                    if n == left:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1049", "code": "                        buf.write(data)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1050", "code": "                        del data  # explicit free\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1051", "code": "                        break\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1052", "code": "                    assert n <= left, \"recv(%d) returned %d bytes\" % (left, n)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1053", "code": "                    buf.write(data)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1054", "code": "                    buf_len += n\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1055", "code": "                    del data  # explicit free\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1056", "code": "                    #assert buf_len == buf.tell()\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1057", "code": "                return buf.getvalue()\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1058", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "R", "line": "1059", "code": "        def readline(self, size=-1):\n", "colour": "green", "author": "tom@organisms.be"}, {"error": "none", "line": "1060", "code": "            buf = self._rbuf\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1061", "code": "            buf.seek(0, 2)  # seek end\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1062", "code": "            if buf.tell() > 0:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1063", "code": "                # check if we already have it in our buffer\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1064", "code": "                buf.seek(0)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1065", "code": "                bline = buf.readline(size)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1066", "code": "                if bline.endswith('\\n') or len(bline) == size:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1067", "code": "                    self._rbuf = StringIO.StringIO()\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1068", "code": "                    self._rbuf.write(buf.read())\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1069", "code": "                    return bline\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1070", "code": "                del bline\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1071", "code": "            if size < 0:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1072", "code": "                # Read until \\n or EOF, whichever comes first\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1073", "code": "                if self._rbufsize <= 1:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1074", "code": "                    # Speed up unbuffered case\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1075", "code": "                    buf.seek(0)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1076", "code": "                    buffers = [buf.read()]\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "1077", "code": "                    self._rbuf = StringIO.StringIO()  # reset _rbuf.  we consume it via buf.\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "1078", "code": "                    data = None\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1079", "code": "                    recv = self.recv\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1080", "code": "                    while data != \"\\n\":\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1081", "code": "                        data = recv(1)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1082", "code": "                        if not data:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1083", "code": "                            break\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1084", "code": "                        buffers.append(data)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1085", "code": "                    return \"\".join(buffers)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1086", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1087", "code": "                buf.seek(0, 2)  # seek end\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "1088", "code": "                self._rbuf = StringIO.StringIO()  # reset _rbuf.  we consume it via buf.\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "1089", "code": "                while True:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1090", "code": "                    data = self.recv(self._rbufsize)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1091", "code": "                    if not data:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1092", "code": "                        break\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "1093", "code": "                    nl = data.find('\\n')\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "1094", "code": "                    if nl >= 0:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "1095", "code": "                        nl += 1\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "1096", "code": "                        buf.write(data[:nl])\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1097", "code": "                        self._rbuf.write(data[nl:])\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1098", "code": "                        del data\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1099", "code": "                        break\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1100", "code": "                    buf.write(data)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1101", "code": "                return buf.getvalue()\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1102", "code": "            else:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1103", "code": "                # Read until size bytes or \\n or EOF seen, whichever comes first\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1104", "code": "                buf.seek(0, 2)  # seek end\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1105", "code": "                buf_len = buf.tell()\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1106", "code": "                if buf_len >= size:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1107", "code": "                    buf.seek(0)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "1108", "code": "                    rv = buf.read(size)\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "1109", "code": "                    self._rbuf = StringIO.StringIO()\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1110", "code": "                    self._rbuf.write(buf.read())\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1111", "code": "                    return rv\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "1112", "code": "                self._rbuf = StringIO.StringIO()  # reset _rbuf.  we consume it via buf.\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "1113", "code": "                while True:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1114", "code": "                    data = self.recv(self._rbufsize)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1115", "code": "                    if not data:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1116", "code": "                        break\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1117", "code": "                    left = size - buf_len\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1118", "code": "                    # did we just receive a newline?\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "1119", "code": "                    nl = data.find('\\n', 0, left)\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "1120", "code": "                    if nl >= 0:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "1121", "code": "                        nl += 1\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "1122", "code": "                        # save the excess data to _rbuf\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1123", "code": "                        self._rbuf.write(data[nl:])\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1124", "code": "                        if buf_len:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1125", "code": "                            buf.write(data[:nl])\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1126", "code": "                            break\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1127", "code": "                        else:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "1128", "code": "                            # Shortcut.  Avoid data copy through buf when returning\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "1129", "code": "                            # a substring of our first recv().\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1130", "code": "                            return data[:nl]\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "1131", "code": "                    n = len(data)\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "1132", "code": "                    if n == size and not buf_len:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1133", "code": "                        # Shortcut.  Avoid data copy through buf when\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1134", "code": "                        # returning exactly all of our first recv().\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1135", "code": "                        return data\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1136", "code": "                    if n >= left:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1137", "code": "                        buf.write(data[:left])\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1138", "code": "                        self._rbuf.write(data[left:])\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1139", "code": "                        break\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1140", "code": "                    buf.write(data)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1141", "code": "                    buf_len += n\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1142", "code": "                    #assert buf_len == buf.tell()\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1143", "code": "                return buf.getvalue()\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1144", "code": "    else:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1145", "code": "        def read(self, size=-1):\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1146", "code": "            if size < 0:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1147", "code": "                # Read until EOF\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1148", "code": "                buffers = [self._rbuf]\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1149", "code": "                self._rbuf = \"\"\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1150", "code": "                if self._rbufsize <= 1:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1151", "code": "                    recv_size = self.default_bufsize\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1152", "code": "                else:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1153", "code": "                    recv_size = self._rbufsize\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1154", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1155", "code": "                while True:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1156", "code": "                    data = self.recv(recv_size)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1157", "code": "                    if not data:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1158", "code": "                        break\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1159", "code": "                    buffers.append(data)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1160", "code": "                return \"\".join(buffers)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1161", "code": "            else:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1162", "code": "                # Read until size bytes or EOF seen, whichever comes first\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1163", "code": "                data = self._rbuf\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1164", "code": "                buf_len = len(data)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1165", "code": "                if buf_len >= size:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1166", "code": "                    self._rbuf = data[size:]\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1167", "code": "                    return data[:size]\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1168", "code": "                buffers = []\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1169", "code": "                if data:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1170", "code": "                    buffers.append(data)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1171", "code": "                self._rbuf = \"\"\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1172", "code": "                while True:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1173", "code": "                    left = size - buf_len\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1174", "code": "                    recv_size = max(self._rbufsize, left)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1175", "code": "                    data = self.recv(recv_size)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1176", "code": "                    if not data:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1177", "code": "                        break\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1178", "code": "                    buffers.append(data)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "1179", "code": "                    n = len(data)\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "1180", "code": "                    if n >= left:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1181", "code": "                        self._rbuf = data[left:]\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1182", "code": "                        buffers[-1] = data[:left]\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1183", "code": "                        break\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1184", "code": "                    buf_len += n\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1185", "code": "                return \"\".join(buffers)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1186", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "R", "line": "1187", "code": "        def readline(self, size=-1):\n", "colour": "green", "author": "tom@organisms.be"}, {"error": "none", "line": "1188", "code": "            data = self._rbuf\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1189", "code": "            if size < 0:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1190", "code": "                # Read until \\n or EOF, whichever comes first\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1191", "code": "                if self._rbufsize <= 1:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1192", "code": "                    # Speed up unbuffered case\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1193", "code": "                    assert data == \"\"\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1194", "code": "                    buffers = []\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1195", "code": "                    while data != \"\\n\":\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1196", "code": "                        data = self.recv(1)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1197", "code": "                        if not data:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1198", "code": "                            break\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1199", "code": "                        buffers.append(data)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1200", "code": "                    return \"\".join(buffers)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "1201", "code": "                nl = data.find('\\n')\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "1202", "code": "                if nl >= 0:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "1203", "code": "                    nl += 1\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "1204", "code": "                    self._rbuf = data[nl:]\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1205", "code": "                    return data[:nl]\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1206", "code": "                buffers = []\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1207", "code": "                if data:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1208", "code": "                    buffers.append(data)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1209", "code": "                self._rbuf = \"\"\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1210", "code": "                while True:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1211", "code": "                    data = self.recv(self._rbufsize)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1212", "code": "                    if not data:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1213", "code": "                        break\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1214", "code": "                    buffers.append(data)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "1215", "code": "                    nl = data.find('\\n')\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "1216", "code": "                    if nl >= 0:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "1217", "code": "                        nl += 1\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "1218", "code": "                        self._rbuf = data[nl:]\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1219", "code": "                        buffers[-1] = data[:nl]\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1220", "code": "                        break\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1221", "code": "                return \"\".join(buffers)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1222", "code": "            else:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1223", "code": "                # Read until size bytes or \\n or EOF seen, whichever comes first\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "1224", "code": "                nl = data.find('\\n', 0, size)\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "1225", "code": "                if nl >= 0:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "1226", "code": "                    nl += 1\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "1227", "code": "                    self._rbuf = data[nl:]\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1228", "code": "                    return data[:nl]\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1229", "code": "                buf_len = len(data)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1230", "code": "                if buf_len >= size:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1231", "code": "                    self._rbuf = data[size:]\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1232", "code": "                    return data[:size]\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1233", "code": "                buffers = []\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1234", "code": "                if data:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1235", "code": "                    buffers.append(data)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1236", "code": "                self._rbuf = \"\"\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1237", "code": "                while True:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1238", "code": "                    data = self.recv(self._rbufsize)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1239", "code": "                    if not data:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1240", "code": "                        break\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1241", "code": "                    buffers.append(data)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1242", "code": "                    left = size - buf_len\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "1243", "code": "                    nl = data.find('\\n', 0, left)\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "1244", "code": "                    if nl >= 0:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "1245", "code": "                        nl += 1\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "1246", "code": "                        self._rbuf = data[nl:]\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1247", "code": "                        buffers[-1] = data[:nl]\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1248", "code": "                        break\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "1249", "code": "                    n = len(data)\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "1250", "code": "                    if n >= left:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1251", "code": "                        self._rbuf = data[left:]\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1252", "code": "                        buffers[-1] = data[:left]\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1253", "code": "                        break\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1254", "code": "                    buf_len += n\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1255", "code": "                return \"\".join(buffers)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1256", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1257", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "R", "line": "1258", "code": "class HTTPConnection(object):\n", "colour": "green", "author": "tom@organisms.be"}, {"error": "none", "line": "1259", "code": "    \"\"\"An HTTP connection (active socket).\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1260", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1261", "code": "    server: the Server object which received this connection.\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1262", "code": "    socket: the raw socket object (usually TCP) for this connection.\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1263", "code": "    makefile: a fileobject class for reading from the socket.\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1264", "code": "    \"\"\"\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1265", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1266", "code": "    remote_addr = None\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1267", "code": "    remote_port = None\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1268", "code": "    ssl_env = None\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1269", "code": "    rbufsize = DEFAULT_BUFFER_SIZE\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1270", "code": "    wbufsize = DEFAULT_BUFFER_SIZE\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1271", "code": "    RequestHandlerClass = HTTPRequest\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1272", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1273", "code": "    def __init__(self, server, sock, makefile=CP_fileobject):\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1274", "code": "        self.server = server\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1275", "code": "        self.socket = sock\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1276", "code": "        self.rfile = makefile(sock, \"rb\", self.rbufsize)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1277", "code": "        self.wfile = makefile(sock, \"wb\", self.wbufsize)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1278", "code": "        self.requests_seen = 0\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1279", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "R", "line": "1280", "code": "    def communicate(self):\n", "colour": "green", "author": "tom@organisms.be"}, {"error": "none", "line": "1281", "code": "        \"\"\"Read each request and respond appropriately.\"\"\"\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1282", "code": "        request_seen = False\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1283", "code": "        try:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1284", "code": "            while True:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1285", "code": "                # (re)set req to None so that if something goes wrong in\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1286", "code": "                # the RequestHandlerClass constructor, the error doesn't\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1287", "code": "                # get written to the previous request.\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1288", "code": "                req = None\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1289", "code": "                req = self.RequestHandlerClass(self.server, self)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1290", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1291", "code": "                # This order of operations should guarantee correct pipelining.\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1292", "code": "                req.parse_request()\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1293", "code": "                if self.server.stats['Enabled']:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1294", "code": "                    self.requests_seen += 1\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1295", "code": "                if not req.ready:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1296", "code": "                    # Something went wrong in the parsing (and the server has\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1297", "code": "                    # probably already made a simple_response). Return and\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1298", "code": "                    # let the conn close.\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1299", "code": "                    return\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1300", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1301", "code": "                request_seen = True\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1302", "code": "                req.respond()\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1303", "code": "                if req.close_connection:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1304", "code": "                    return\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1305", "code": "        except socket.error:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "1306", "code": "            e = sys.exc_info()[1]\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "1307", "code": "            errnum = e.args[0]\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1308", "code": "            # sadly SSL sockets return a different (longer) time out string\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "1309", "code": "            if errnum == 'timed out' or errnum == 'The read operation timed out':\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "1310", "code": "                # Don't error if we're between requests; only error\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1311", "code": "                # if 1) no request has been started at all, or 2) we're\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1312", "code": "                # in the middle of a request.\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1313", "code": "                # See http://www.cherrypy.org/ticket/853\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1314", "code": "                if (not request_seen) or (req and req.started_request):\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1315", "code": "                    # Don't bother writing the 408 if the response\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1316", "code": "                    # has already started being written.\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1317", "code": "                    if req and not req.sent_headers:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1318", "code": "                        try:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1319", "code": "                            req.simple_response(\"408 Request Timeout\")\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1320", "code": "                        except FatalSSLAlert:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1321", "code": "                            # Close the connection.\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1322", "code": "                            return\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1323", "code": "            elif errnum not in socket_errors_to_ignore:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1324", "code": "                self.server.error_log(\"socket.error %s\" % repr(errnum),\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1325", "code": "                                      level=logging.WARNING, traceback=True)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1326", "code": "                if req and not req.sent_headers:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1327", "code": "                    try:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1328", "code": "                        req.simple_response(\"500 Internal Server Error\")\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1329", "code": "                    except FatalSSLAlert:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1330", "code": "                        # Close the connection.\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1331", "code": "                        return\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1332", "code": "            return\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1333", "code": "        except (KeyboardInterrupt, SystemExit):\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1334", "code": "            raise\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1335", "code": "        except FatalSSLAlert:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1336", "code": "            # Close the connection.\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1337", "code": "            return\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1338", "code": "        except NoSSLError:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1339", "code": "            if req and not req.sent_headers:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1340", "code": "                # Unwrap our wfile\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "W", "line": "1341", "code": "                self.wfile = CP_fileobject(self.socket._sock, \"wb\", self.wbufsize)\n", "colour": "purple", "author": "tom@organisms.be"}, {"error": "none", "line": "1342", "code": "                req.simple_response(\"400 Bad Request\",\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "1343", "code": "                    \"The client sent a plain HTTP request, but \"\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "1344", "code": "                    \"this server only speaks HTTPS on this port.\")\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1345", "code": "                self.linger = True\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "W", "line": "1346", "code": "        except Exception:\n", "colour": "purple", "author": "tom@organisms.be"}, {"error": "C", "line": "1347", "code": "            e = sys.exc_info()[1]\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "1348", "code": "            self.server.error_log(repr(e), level=logging.ERROR, traceback=True)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1349", "code": "            if req and not req.sent_headers:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1350", "code": "                try:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1351", "code": "                    req.simple_response(\"500 Internal Server Error\")\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1352", "code": "                except FatalSSLAlert:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1353", "code": "                    # Close the connection.\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1354", "code": "                    return\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1355", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1356", "code": "    linger = False\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1357", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1358", "code": "    def close(self):\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1359", "code": "        \"\"\"Close the socket underlying this connection.\"\"\"\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1360", "code": "        self.rfile.close()\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1361", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1362", "code": "        if not self.linger:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1363", "code": "            # Python's socket module does NOT call close on the kernel socket\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1364", "code": "            # when you call socket.close(). We do so manually here because we\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1365", "code": "            # want this server to send a FIN TCP segment immediately. Note this\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1366", "code": "            # must be called *before* calling socket.close(), because the latter\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1367", "code": "            # drops its reference to the kernel socket.\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1368", "code": "            if hasattr(self.socket, '_sock'):\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "W", "line": "1369", "code": "                self.socket._sock.close()\n", "colour": "purple", "author": "tom@organisms.be"}, {"error": "none", "line": "1370", "code": "            self.socket.close()\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1371", "code": "        else:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1372", "code": "            # On the other hand, sometimes we want to hang around for a bit\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1373", "code": "            # to make sure the client has a chance to read our entire\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1374", "code": "            # response. Skipping the close() calls here delays the FIN\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1375", "code": "            # packet until the socket object is garbage-collected later.\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1376", "code": "            # Someday, perhaps, we'll do the full lingering_close that\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1377", "code": "            # Apache does, but not today.\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1378", "code": "            pass\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1379", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1380", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "R", "line": "1381", "code": "class TrueyZero(object):\n", "colour": "green", "author": "tom@organisms.be"}, {"error": "C", "line": "1382", "code": "    \"\"\"An object which equals and does math like the integer '0' but evals True.\"\"\"\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "1383", "code": "    def __add__(self, other):\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1384", "code": "        return other\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1385", "code": "    def __radd__(self, other):\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1386", "code": "        return other\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "1387", "code": "trueyzero = TrueyZero()\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "1388", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1389", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1390", "code": "_SHUTDOWNREQUEST = None\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1391", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "R", "line": "1392", "code": "class WorkerThread(threading.Thread):\n", "colour": "green", "author": "tom@organisms.be"}, {"error": "none", "line": "1393", "code": "    \"\"\"Thread which continuously polls a Queue for Connection objects.\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1394", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1395", "code": "    Due to the timing issues of polling a Queue, a WorkerThread does not\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1396", "code": "    check its own 'ready' flag after it has started. To stop the thread,\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1397", "code": "    it is necessary to stick a _SHUTDOWNREQUEST object onto the Queue\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1398", "code": "    (one for each running WorkerThread).\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1399", "code": "    \"\"\"\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1400", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1401", "code": "    conn = None\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1402", "code": "    \"\"\"The current connection pulled off the Queue, or None.\"\"\"\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1403", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1404", "code": "    server = None\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1405", "code": "    \"\"\"The HTTP Server which spawned this thread, and which owns the\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1406", "code": "    Queue and is placing active connections into it.\"\"\"\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1407", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1408", "code": "    ready = False\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1409", "code": "    \"\"\"A simple flag for the calling server to know when this thread\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1410", "code": "    has begun polling the Queue.\"\"\"\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1411", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1412", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1413", "code": "    def __init__(self, server):\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1414", "code": "        self.ready = False\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1415", "code": "        self.server = server\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1416", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1417", "code": "        self.requests_seen = 0\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1418", "code": "        self.bytes_read = 0\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1419", "code": "        self.bytes_written = 0\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1420", "code": "        self.start_time = None\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1421", "code": "        self.work_time = 0\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1422", "code": "        self.stats = {\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "1423", "code": "            'Requests': lambda s: self.requests_seen + ((self.start_time is None) and trueyzero or self.conn.requests_seen),\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "C", "line": "1424", "code": "            'Bytes Read': lambda s: self.bytes_read + ((self.start_time is None) and trueyzero or self.conn.rfile.bytes_read),\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "C", "line": "1425", "code": "            'Bytes Written': lambda s: self.bytes_written + ((self.start_time is None) and trueyzero or self.conn.wfile.bytes_written),\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "C", "line": "1426", "code": "            'Work Time': lambda s: self.work_time + ((self.start_time is None) and trueyzero or time.time() - self.start_time),\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "C", "line": "1427", "code": "            'Read Throughput': lambda s: s['Bytes Read'](s) / (s['Work Time'](s) or 1e-6),\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "C", "line": "1428", "code": "            'Write Throughput': lambda s: s['Bytes Written'](s) / (s['Work Time'](s) or 1e-6),\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "1429", "code": "        }\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1430", "code": "        threading.Thread.__init__(self)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1431", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1432", "code": "    def run(self):\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1433", "code": "        self.server.stats['Worker Threads'][self.getName()] = self.stats\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1434", "code": "        try:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1435", "code": "            self.ready = True\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1436", "code": "            while True:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1437", "code": "                conn = self.server.requests.get()\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1438", "code": "                if conn is _SHUTDOWNREQUEST:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1439", "code": "                    return\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1440", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1441", "code": "                self.conn = conn\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1442", "code": "                if self.server.stats['Enabled']:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1443", "code": "                    self.start_time = time.time()\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1444", "code": "                try:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1445", "code": "                    conn.communicate()\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1446", "code": "                finally:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1447", "code": "                    conn.close()\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1448", "code": "                    if self.server.stats['Enabled']:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1449", "code": "                        self.requests_seen += self.conn.requests_seen\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1450", "code": "                        self.bytes_read += self.conn.rfile.bytes_read\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1451", "code": "                        self.bytes_written += self.conn.wfile.bytes_written\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1452", "code": "                        self.work_time += time.time() - self.start_time\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1453", "code": "                        self.start_time = None\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1454", "code": "                    self.conn = None\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1455", "code": "        except (KeyboardInterrupt, SystemExit):\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1456", "code": "            exc = sys.exc_info()[1]\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1457", "code": "            self.server.interrupt = exc\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1458", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1459", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1460", "code": "class ThreadPool(object):\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1461", "code": "    \"\"\"A Request Queue for an HTTPServer which pools threads.\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1462", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1463", "code": "    ThreadPool objects must provide min, get(), put(obj), start()\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1464", "code": "    and stop(timeout) attributes.\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1465", "code": "    \"\"\"\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1466", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "W", "line": "1467", "code": "    def __init__(self, server, min=10, max=-1):\n", "colour": "purple", "author": "tom@organisms.be"}, {"error": "none", "line": "1468", "code": "        self.server = server\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1469", "code": "        self.min = min\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1470", "code": "        self.max = max\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1471", "code": "        self._threads = []\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1472", "code": "        self._queue = queue.Queue()\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1473", "code": "        self.get = self._queue.get\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1474", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1475", "code": "    def start(self):\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1476", "code": "        \"\"\"Start the pool of threads.\"\"\"\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "W", "line": "1477", "code": "        for i in range(self.min):\n", "colour": "purple", "author": "tom@organisms.be"}, {"error": "none", "line": "1478", "code": "            self._threads.append(WorkerThread(self.server))\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1479", "code": "        for worker in self._threads:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1480", "code": "            worker.setName(\"CP Server \" + worker.getName())\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1481", "code": "            worker.start()\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1482", "code": "        for worker in self._threads:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1483", "code": "            while not worker.ready:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1484", "code": "                time.sleep(.1)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1485", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1486", "code": "    def _get_idle(self):\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1487", "code": "        \"\"\"Number of worker threads which are idle. Read-only.\"\"\"\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1488", "code": "        return len([t for t in self._threads if t.conn is None])\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1489", "code": "    idle = property(_get_idle, doc=_get_idle.__doc__)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1490", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "1491", "code": "    def put(self, obj):\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "1492", "code": "        self._queue.put(obj)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1493", "code": "        if obj is _SHUTDOWNREQUEST:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1494", "code": "            return\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1495", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1496", "code": "    def grow(self, amount):\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1497", "code": "        \"\"\"Spawn new worker threads (not above self.max).\"\"\"\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1498", "code": "        if self.max > 0:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1499", "code": "            budget = max(self.max - len(self._threads), 0)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1500", "code": "        else:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1501", "code": "            # self.max <= 0 indicates no maximum\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1502", "code": "            budget = float('inf')\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1503", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1504", "code": "        n_new = min(amount, budget)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1505", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "W", "line": "1506", "code": "        workers = [self._spawn_worker() for i in range(n_new)]\n", "colour": "purple", "author": "tom@organisms.be"}, {"error": "none", "line": "1507", "code": "        while not self._all(operator.attrgetter('ready'), workers):\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1508", "code": "            time.sleep(.1)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1509", "code": "        self._threads.extend(workers)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1510", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "1511", "code": "    def _spawn_worker(self):\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "1512", "code": "        worker = WorkerThread(self.server)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1513", "code": "        worker.setName(\"CP Server \" + worker.getName())\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1514", "code": "        worker.start()\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1515", "code": "        return worker\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1516", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "1517", "code": "    def _all(func, items):\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "1518", "code": "        results = [func(item) for item in items]\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1519", "code": "        return reduce(operator.and_, results, True)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1520", "code": "    _all = staticmethod(_all)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1521", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1522", "code": "    def shrink(self, amount):\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1523", "code": "        \"\"\"Kill off worker threads (not below self.min).\"\"\"\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1524", "code": "        # Grow/shrink the pool if necessary.\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1525", "code": "        # Remove any dead threads from our list\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "1526", "code": "        for t in self._threads:\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "1527", "code": "            if not t.isAlive():\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1528", "code": "                self._threads.remove(t)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1529", "code": "                amount -= 1\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1530", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1531", "code": "        # calculate the number of threads above the minimum\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1532", "code": "        n_extra = max(len(self._threads) - self.min, 0)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1533", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1534", "code": "        # don't remove more than amount\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1535", "code": "        n_to_remove = min(amount, n_extra)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1536", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1537", "code": "        # put shutdown requests on the queue equal to the number of threads\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1538", "code": "        # to remove. As each request is processed by a worker, that worker\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1539", "code": "        # will terminate and be culled from the list.\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "W", "line": "1540", "code": "        for n in range(n_to_remove):\n", "colour": "purple", "author": "tom@organisms.be"}, {"error": "none", "line": "1541", "code": "            self._queue.put(_SHUTDOWNREQUEST)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1542", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "1543", "code": "    def stop(self, timeout=5):\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "1544", "code": "        # Must shut down threads here so the code that calls\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1545", "code": "        # this method can know when all threads are stopped.\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1546", "code": "        for worker in self._threads:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1547", "code": "            self._queue.put(_SHUTDOWNREQUEST)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1548", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1549", "code": "        # Don't join currentThread (when stop is called inside a request).\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1550", "code": "        current = threading.currentThread()\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1551", "code": "        if timeout and timeout >= 0:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1552", "code": "            endtime = time.time() + timeout\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1553", "code": "        while self._threads:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1554", "code": "            worker = self._threads.pop()\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1555", "code": "            if worker is not current and worker.isAlive():\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1556", "code": "                try:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1557", "code": "                    if timeout is None or timeout < 0:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1558", "code": "                        worker.join()\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1559", "code": "                    else:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1560", "code": "                        remaining_time = endtime - time.time()\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1561", "code": "                        if remaining_time > 0:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1562", "code": "                            worker.join(remaining_time)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1563", "code": "                        if worker.isAlive():\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1564", "code": "                            # We exhausted the timeout.\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1565", "code": "                            # Forcibly shut down the socket.\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "1566", "code": "                            c = worker.conn\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "1567", "code": "                            if c and not c.rfile.closed:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1568", "code": "                                try:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1569", "code": "                                    c.socket.shutdown(socket.SHUT_RD)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1570", "code": "                                except TypeError:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1571", "code": "                                    # pyOpenSSL sockets don't take an arg\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1572", "code": "                                    c.socket.shutdown()\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1573", "code": "                            worker.join()\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1574", "code": "                except (AssertionError,\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1575", "code": "                        # Ignore repeated Ctrl-C.\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1576", "code": "                        # See http://www.cherrypy.org/ticket/691.\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1577", "code": "                        KeyboardInterrupt):\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1578", "code": "                    pass\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1579", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "1580", "code": "    def _get_qsize(self):\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "1581", "code": "        return self._queue.qsize()\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1582", "code": "    qsize = property(_get_qsize)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1583", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1584", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1585", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1586", "code": "try:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1587", "code": "    import fcntl\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1588", "code": "except ImportError:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1589", "code": "    try:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1590", "code": "        from ctypes import windll, WinError\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1591", "code": "    except ImportError:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "W", "line": "1592", "code": "        def prevent_socket_inheritance(sock):\n", "colour": "purple", "author": "tom@organisms.be"}, {"error": "none", "line": "1593", "code": "            \"\"\"Dummy function, since neither fcntl nor ctypes are available.\"\"\"\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1594", "code": "            pass\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1595", "code": "    else:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1596", "code": "        def prevent_socket_inheritance(sock):\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1597", "code": "            \"\"\"Mark the given socket fd as non-inheritable (Windows).\"\"\"\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1598", "code": "            if not windll.kernel32.SetHandleInformation(sock.fileno(), 1, 0):\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1599", "code": "                raise WinError()\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1600", "code": "else:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1601", "code": "    def prevent_socket_inheritance(sock):\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1602", "code": "        \"\"\"Mark the given socket fd as non-inheritable (POSIX).\"\"\"\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "1603", "code": "        fd = sock.fileno()\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "1604", "code": "        old_flags = fcntl.fcntl(fd, fcntl.F_GETFD)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1605", "code": "        fcntl.fcntl(fd, fcntl.F_SETFD, old_flags | fcntl.FD_CLOEXEC)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1606", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1607", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1608", "code": "class SSLAdapter(object):\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1609", "code": "    \"\"\"Base class for SSL driver library adapters.\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1610", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1611", "code": "    Required methods:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1612", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1613", "code": "        * ``wrap(sock) -> (wrapped socket, ssl environ dict)``\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "1614", "code": "        * ``makefile(sock, mode='r', bufsize=DEFAULT_BUFFER_SIZE) -> socket file object``\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "1615", "code": "    \"\"\"\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1616", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1617", "code": "    def __init__(self, certificate, private_key, certificate_chain=None):\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1618", "code": "        self.certificate = certificate\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1619", "code": "        self.private_key = private_key\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1620", "code": "        self.certificate_chain = certificate_chain\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1621", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "R", "line": "1622", "code": "    def wrap(self, sock):\n", "colour": "green", "author": "tom@organisms.be"}, {"error": "E", "line": "1623", "code": "        raise NotImplemented\n", "colour": "yellow", "author": "tom@organisms.be"}, {"error": "none", "line": "1624", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "R", "line": "1625", "code": "    def makefile(self, sock, mode='r', bufsize=DEFAULT_BUFFER_SIZE):\n", "colour": "green", "author": "tom@organisms.be"}, {"error": "E", "line": "1626", "code": "        raise NotImplemented\n", "colour": "yellow", "author": "tom@organisms.be"}, {"error": "none", "line": "1627", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1628", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "R", "line": "1629", "code": "class HTTPServer(object):\n", "colour": "green", "author": "tom@organisms.be"}, {"error": "none", "line": "1630", "code": "    \"\"\"An HTTP server.\"\"\"\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1631", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1632", "code": "    _bind_addr = \"127.0.0.1\"\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1633", "code": "    _interrupt = None\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1634", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1635", "code": "    gateway = None\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1636", "code": "    \"\"\"A Gateway instance.\"\"\"\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1637", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1638", "code": "    minthreads = None\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1639", "code": "    \"\"\"The minimum number of worker threads to create (default 10).\"\"\"\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1640", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1641", "code": "    maxthreads = None\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "1642", "code": "    \"\"\"The maximum number of worker threads to create (default -1 = no limit).\"\"\"\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "1643", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1644", "code": "    server_name = None\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1645", "code": "    \"\"\"The name of the server; defaults to socket.gethostname().\"\"\"\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1646", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1647", "code": "    protocol = \"HTTP/1.1\"\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1648", "code": "    \"\"\"The version string to write in the Status-Line of all HTTP responses.\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1649", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1650", "code": "    For example, \"HTTP/1.1\" is the default. This also limits the supported\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1651", "code": "    features used in the response.\"\"\"\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1652", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1653", "code": "    request_queue_size = 5\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "1654", "code": "    \"\"\"The 'backlog' arg to socket.listen(); max queued connections (default 5).\"\"\"\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "1655", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1656", "code": "    shutdown_timeout = 5\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "1657", "code": "    \"\"\"The total time, in seconds, to wait for worker threads to cleanly exit.\"\"\"\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "1658", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1659", "code": "    timeout = 10\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1660", "code": "    \"\"\"The timeout in seconds for accepted connections (default 10).\"\"\"\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1661", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1662", "code": "    version = \"CherryPy/3.2.4\"\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1663", "code": "    \"\"\"A version string for the HTTPServer.\"\"\"\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1664", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1665", "code": "    software = None\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1666", "code": "    \"\"\"The value to set for the SERVER_SOFTWARE entry in the WSGI environ.\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1667", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1668", "code": "    If None, this defaults to ``'%s Server' % self.version``.\"\"\"\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1669", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1670", "code": "    ready = False\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "1671", "code": "    \"\"\"An internal flag which marks whether the socket is accepting connections.\"\"\"\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "1672", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1673", "code": "    max_request_header_size = 0\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1674", "code": "    \"\"\"The maximum size, in bytes, for request headers, or 0 for no limit.\"\"\"\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1675", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1676", "code": "    max_request_body_size = 0\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1677", "code": "    \"\"\"The maximum size, in bytes, for request bodies, or 0 for no limit.\"\"\"\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1678", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1679", "code": "    nodelay = True\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1680", "code": "    \"\"\"If True (the default since 3.1), sets the TCP_NODELAY socket option.\"\"\"\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1681", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1682", "code": "    ConnectionClass = HTTPConnection\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1683", "code": "    \"\"\"The class to use for handling HTTP connections.\"\"\"\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1684", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1685", "code": "    ssl_adapter = None\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1686", "code": "    \"\"\"An instance of SSLAdapter (or a subclass).\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1687", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1688", "code": "    You must have the corresponding SSL driver library installed.\"\"\"\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1689", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "R", "line": "1690", "code": "    def __init__(self, bind_addr, gateway, minthreads=10, maxthreads=-1,\n", "colour": "green", "author": "tom@organisms.be"}, {"error": "none", "line": "1691", "code": "                 server_name=None):\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1692", "code": "        self.bind_addr = bind_addr\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1693", "code": "        self.gateway = gateway\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1694", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1695", "code": "        self.requests = ThreadPool(self, min=minthreads or 1, max=maxthreads)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1696", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1697", "code": "        if not server_name:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1698", "code": "            server_name = socket.gethostname()\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1699", "code": "        self.server_name = server_name\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1700", "code": "        self.clear_stats()\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1701", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "1702", "code": "    def clear_stats(self):\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "W", "line": "1703", "code": "        self._start_time = None\n", "colour": "purple", "author": "tom@organisms.be"}, {"error": "W", "line": "1704", "code": "        self._run_time = 0\n", "colour": "purple", "author": "tom@organisms.be"}, {"error": "W", "line": "1705", "code": "        self.stats = {\n", "colour": "purple", "author": "tom@organisms.be"}, {"error": "none", "line": "1706", "code": "            'Enabled': False,\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1707", "code": "            'Bind Address': lambda s: repr(self.bind_addr),\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1708", "code": "            'Run time': lambda s: (not s['Enabled']) and -1 or self.runtime(),\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1709", "code": "            'Accepts': 0,\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1710", "code": "            'Accepts/sec': lambda s: s['Accepts'] / self.runtime(),\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1711", "code": "            'Queue': lambda s: getattr(self.requests, \"qsize\", None),\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1712", "code": "            'Threads': lambda s: len(getattr(self.requests, \"_threads\", [])),\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1713", "code": "            'Threads Idle': lambda s: getattr(self.requests, \"idle\", None),\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1714", "code": "            'Socket Errors': 0,\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "1715", "code": "            'Requests': lambda s: (not s['Enabled']) and -1 or sum([w['Requests'](w) for w\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "C", "line": "1716", "code": "                                       in s['Worker Threads'].values()], 0),\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "C", "line": "1717", "code": "            'Bytes Read': lambda s: (not s['Enabled']) and -1 or sum([w['Bytes Read'](w) for w\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "C", "line": "1718", "code": "                                         in s['Worker Threads'].values()], 0),\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "C", "line": "1719", "code": "            'Bytes Written': lambda s: (not s['Enabled']) and -1 or sum([w['Bytes Written'](w) for w\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "C", "line": "1720", "code": "                                            in s['Worker Threads'].values()], 0),\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "C", "line": "1721", "code": "            'Work Time': lambda s: (not s['Enabled']) and -1 or sum([w['Work Time'](w) for w\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "C", "line": "1722", "code": "                                         in s['Worker Threads'].values()], 0),\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "1723", "code": "            'Read Throughput': lambda s: (not s['Enabled']) and -1 or sum(\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1724", "code": "                [w['Bytes Read'](w) / (w['Work Time'](w) or 1e-6)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1725", "code": "                 for w in s['Worker Threads'].values()], 0),\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1726", "code": "            'Write Throughput': lambda s: (not s['Enabled']) and -1 or sum(\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1727", "code": "                [w['Bytes Written'](w) / (w['Work Time'](w) or 1e-6)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1728", "code": "                 for w in s['Worker Threads'].values()], 0),\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1729", "code": "            'Worker Threads': {},\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1730", "code": "            }\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1731", "code": "        logging.statistics[\"CherryPy HTTPServer %d\" % id(self)] = self.stats\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1732", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "1733", "code": "    def runtime(self):\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "1734", "code": "        if self._start_time is None:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1735", "code": "            return self._run_time\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1736", "code": "        else:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1737", "code": "            return self._run_time + (time.time() - self._start_time)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1738", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1739", "code": "    def __str__(self):\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1740", "code": "        return \"%s.%s(%r)\" % (self.__module__, self.__class__.__name__,\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1741", "code": "                              self.bind_addr)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1742", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "1743", "code": "    def _get_bind_addr(self):\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "1744", "code": "        return self._bind_addr\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "1745", "code": "    def _set_bind_addr(self, value):\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "1746", "code": "        if isinstance(value, tuple) and value[0] in ('', None):\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1747", "code": "            # Despite the socket module docs, using '' does not\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1748", "code": "            # allow AI_PASSIVE to work. Passing None instead\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1749", "code": "            # returns '0.0.0.0' like we want. In other words:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1750", "code": "            #     host    AI_PASSIVE     result\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1751", "code": "            #      ''         Y         192.168.x.y\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1752", "code": "            #      ''         N         192.168.x.y\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1753", "code": "            #     None        Y         0.0.0.0\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1754", "code": "            #     None        N         127.0.0.1\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1755", "code": "            # But since you can get the same effect with an explicit\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1756", "code": "            # '0.0.0.0', we deny both the empty string and None as values.\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1757", "code": "            raise ValueError(\"Host values of '' or None are not allowed. \"\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1758", "code": "                             \"Use '0.0.0.0' (IPv4) or '::' (IPv6) instead \"\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1759", "code": "                             \"to listen on all active interfaces.\")\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1760", "code": "        self._bind_addr = value\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1761", "code": "    bind_addr = property(_get_bind_addr, _set_bind_addr,\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "1762", "code": "        doc=\"\"\"The interface on which to listen for connections.\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "1763", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1764", "code": "        For TCP sockets, a (host, port) tuple. Host values may be any IPv4\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1765", "code": "        or IPv6 address, or any valid hostname. The string 'localhost' is a\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1766", "code": "        synonym for '127.0.0.1' (or '::1', if your hosts file prefers IPv6).\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1767", "code": "        The string '0.0.0.0' is a special IPv4 entry meaning \"any active\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1768", "code": "        interface\" (INADDR_ANY), and '::' is the similar IN6ADDR_ANY for\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1769", "code": "        IPv6. The empty string or None are not allowed.\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1770", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1771", "code": "        For UNIX sockets, supply the filename as a string.\"\"\")\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1772", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "R", "line": "1773", "code": "    def start(self):\n", "colour": "green", "author": "tom@organisms.be"}, {"error": "none", "line": "1774", "code": "        \"\"\"Run the server forever.\"\"\"\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1775", "code": "        # We don't have to trap KeyboardInterrupt or SystemExit here,\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1776", "code": "        # because cherrpy.server already does so, calling self.stop() for us.\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1777", "code": "        # If you're using this server with another framework, you should\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1778", "code": "        # trap those exceptions in whatever code block calls start().\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1779", "code": "        self._interrupt = None\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1780", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1781", "code": "        if self.software is None:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1782", "code": "            self.software = \"%s Server\" % self.version\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1783", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1784", "code": "        # SSL backward compatibility\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1785", "code": "        if (self.ssl_adapter is None and\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "1786", "code": "            getattr(self, 'ssl_certificate', None) and\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "C", "line": "1787", "code": "            getattr(self, 'ssl_private_key', None)):\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "1788", "code": "            warnings.warn(\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "1789", "code": "                    \"SSL attributes are deprecated in CherryPy 3.2, and will \"\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "1790", "code": "                    \"be removed in CherryPy 3.3. Use an ssl_adapter attribute \"\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1791", "code": "                    \"instead.\",\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "1792", "code": "                    DeprecationWarning\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "1793", "code": "                )\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1794", "code": "            try:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1795", "code": "                from cherrypy.wsgiserver.ssl_pyopenssl import pyOpenSSLAdapter\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1796", "code": "            except ImportError:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1797", "code": "                pass\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1798", "code": "            else:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1799", "code": "                self.ssl_adapter = pyOpenSSLAdapter(\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "E", "line": "1800", "code": "                    self.ssl_certificate, self.ssl_private_key,\n", "colour": "yellow", "author": "tom@organisms.be"}, {"error": "none", "line": "1801", "code": "                    getattr(self, 'ssl_certificate_chain', None))\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1802", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1803", "code": "        # Select the appropriate socket\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1804", "code": "        if isinstance(self.bind_addr, basestring):\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1805", "code": "            # AF_UNIX socket\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1806", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1807", "code": "            # So we can reuse the socket...\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "1808", "code": "            try: os.unlink(self.bind_addr)\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "C", "line": "1809", "code": "            except: pass\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "1810", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1811", "code": "            # So everyone can access the socket...\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "1812", "code": "            try: os.chmod(self.bind_addr, 511) # 0777\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "C", "line": "1813", "code": "            except: pass\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "1814", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1815", "code": "            info = [(socket.AF_UNIX, socket.SOCK_STREAM, 0, \"\", self.bind_addr)]\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1816", "code": "        else:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1817", "code": "            # AF_INET or AF_INET6 socket\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "1818", "code": "            # Get the correct address family for our host (allows IPv6 addresses)\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "1819", "code": "            host, port = self.bind_addr\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1820", "code": "            try:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1821", "code": "                info = socket.getaddrinfo(host, port, socket.AF_UNSPEC,\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "1822", "code": "                                          socket.SOCK_STREAM, 0, socket.AI_PASSIVE)\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "1823", "code": "            except socket.gaierror:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1824", "code": "                if ':' in self.bind_addr[0]:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1825", "code": "                    info = [(socket.AF_INET6, socket.SOCK_STREAM,\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1826", "code": "                             0, \"\", self.bind_addr + (0, 0))]\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1827", "code": "                else:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1828", "code": "                    info = [(socket.AF_INET, socket.SOCK_STREAM,\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1829", "code": "                             0, \"\", self.bind_addr)]\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1830", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "W", "line": "1831", "code": "        self.socket = None\n", "colour": "purple", "author": "tom@organisms.be"}, {"error": "none", "line": "1832", "code": "        msg = \"No socket could be created\"\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1833", "code": "        for res in info:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "W", "line": "1834", "code": "            af, socktype, proto, canonname, sa = res\n", "colour": "purple", "author": "tom@organisms.be"}, {"error": "none", "line": "1835", "code": "            try:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1836", "code": "                self.bind(af, socktype, proto)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1837", "code": "            except socket.error:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1838", "code": "                if self.socket:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1839", "code": "                    self.socket.close()\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "W", "line": "1840", "code": "                self.socket = None\n", "colour": "purple", "author": "tom@organisms.be"}, {"error": "none", "line": "1841", "code": "                continue\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1842", "code": "            break\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1843", "code": "        if not self.socket:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1844", "code": "            raise socket.error(msg)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1845", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1846", "code": "        # Timeout so KeyboardInterrupt can be caught on Win32\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1847", "code": "        self.socket.settimeout(1)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1848", "code": "        self.socket.listen(self.request_queue_size)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1849", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1850", "code": "        # Create worker threads\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1851", "code": "        self.requests.start()\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1852", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1853", "code": "        self.ready = True\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "W", "line": "1854", "code": "        self._start_time = time.time()\n", "colour": "purple", "author": "tom@organisms.be"}, {"error": "none", "line": "1855", "code": "        while self.ready:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1856", "code": "            try:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1857", "code": "                self.tick()\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1858", "code": "            except (KeyboardInterrupt, SystemExit):\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1859", "code": "                raise\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "W", "line": "1860", "code": "            except:\n", "colour": "purple", "author": "tom@organisms.be"}, {"error": "none", "line": "1861", "code": "                self.error_log(\"Error in HTTPServer.tick\", level=logging.ERROR,\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1862", "code": "                               traceback=True)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1863", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1864", "code": "            if self.interrupt:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1865", "code": "                while self.interrupt is True:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1866", "code": "                    # Wait for self.stop() to complete. See _set_interrupt.\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1867", "code": "                    time.sleep(0.1)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1868", "code": "                if self.interrupt:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1869", "code": "                    raise self.interrupt\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1870", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "R", "line": "1871", "code": "    def error_log(self, msg=\"\", level=20, traceback=False):\n", "colour": "green", "author": "tom@organisms.be"}, {"error": "none", "line": "1872", "code": "        # Override this in subclasses as desired\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1873", "code": "        sys.stderr.write(msg + '\\n')\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1874", "code": "        sys.stderr.flush()\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1875", "code": "        if traceback:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1876", "code": "            tblines = format_exc()\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1877", "code": "            sys.stderr.write(tblines)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1878", "code": "            sys.stderr.flush()\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1879", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "W", "line": "1880", "code": "    def bind(self, family, type, proto=0):\n", "colour": "purple", "author": "tom@organisms.be"}, {"error": "none", "line": "1881", "code": "        \"\"\"Create (or recreate) the actual socket object.\"\"\"\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "W", "line": "1882", "code": "        self.socket = socket.socket(family, type, proto)\n", "colour": "purple", "author": "tom@organisms.be"}, {"error": "none", "line": "1883", "code": "        prevent_socket_inheritance(self.socket)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1884", "code": "        self.socket.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1885", "code": "        if self.nodelay and not isinstance(self.bind_addr, str):\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1886", "code": "            self.socket.setsockopt(socket.IPPROTO_TCP, socket.TCP_NODELAY, 1)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1887", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1888", "code": "        if self.ssl_adapter is not None:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "W", "line": "1889", "code": "            self.socket = self.ssl_adapter.bind(self.socket)\n", "colour": "purple", "author": "tom@organisms.be"}, {"error": "none", "line": "1890", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1891", "code": "        # If listening on the IPV6 any address ('::' = IN6ADDR_ANY),\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1892", "code": "        # activate dual-stack. See http://www.cherrypy.org/ticket/871.\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1893", "code": "        if (hasattr(socket, 'AF_INET6') and family == socket.AF_INET6\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "1894", "code": "            and self.bind_addr[0] in ('::', '::0', '::0.0.0.0')):\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "1895", "code": "            try:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "1896", "code": "                self.socket.setsockopt(socket.IPPROTO_IPV6, socket.IPV6_V6ONLY, 0)\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "1897", "code": "            except (AttributeError, socket.error):\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1898", "code": "                # Apparently, the socket option is not available in\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1899", "code": "                # this machine's TCP stack\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1900", "code": "                pass\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1901", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1902", "code": "        self.socket.bind(self.bind_addr)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1903", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "R", "line": "1904", "code": "    def tick(self):\n", "colour": "green", "author": "tom@organisms.be"}, {"error": "none", "line": "1905", "code": "        \"\"\"Accept a new connection and put it on the Queue.\"\"\"\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1906", "code": "        try:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "1907", "code": "            s, addr = self.socket.accept()\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "1908", "code": "            if self.stats['Enabled']:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1909", "code": "                self.stats['Accepts'] += 1\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1910", "code": "            if not self.ready:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1911", "code": "                return\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1912", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1913", "code": "            prevent_socket_inheritance(s)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1914", "code": "            if hasattr(s, 'settimeout'):\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1915", "code": "                s.settimeout(self.timeout)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1916", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1917", "code": "            makefile = CP_fileobject\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1918", "code": "            ssl_env = {}\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1919", "code": "            # if ssl cert and key are set, we try to be a secure HTTP server\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1920", "code": "            if self.ssl_adapter is not None:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1921", "code": "                try:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "1922", "code": "                    s, ssl_env = self.ssl_adapter.wrap(s)\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "1923", "code": "                except NoSSLError:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1924", "code": "                    msg = (\"The client sent a plain HTTP request, but \"\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1925", "code": "                           \"this server only speaks HTTPS on this port.\")\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1926", "code": "                    buf = [\"%s 400 Bad Request\\r\\n\" % self.protocol,\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1927", "code": "                           \"Content-Length: %s\\r\\n\" % len(msg),\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1928", "code": "                           \"Content-Type: text/plain\\r\\n\\r\\n\",\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1929", "code": "                           msg]\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1930", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1931", "code": "                    wfile = makefile(s, \"wb\", DEFAULT_BUFFER_SIZE)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1932", "code": "                    try:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1933", "code": "                        wfile.sendall(\"\".join(buf))\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1934", "code": "                    except socket.error:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "1935", "code": "                        x = sys.exc_info()[1]\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "1936", "code": "                        if x.args[0] not in socket_errors_to_ignore:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1937", "code": "                            raise\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1938", "code": "                    return\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1939", "code": "                if not s:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1940", "code": "                    return\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1941", "code": "                makefile = self.ssl_adapter.makefile\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1942", "code": "                # Re-apply our timeout since we may have a new socket object\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1943", "code": "                if hasattr(s, 'settimeout'):\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1944", "code": "                    s.settimeout(self.timeout)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1945", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1946", "code": "            conn = self.ConnectionClass(self, s, makefile)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1947", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1948", "code": "            if not isinstance(self.bind_addr, basestring):\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1949", "code": "                # optional values\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1950", "code": "                # Until we do DNS lookups, omit REMOTE_HOST\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1951", "code": "                if addr is None: # sometimes this can happen\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1952", "code": "                    # figure out if AF_INET or AF_INET6.\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1953", "code": "                    if len(s.getsockname()) == 2:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1954", "code": "                        # AF_INET\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1955", "code": "                        addr = ('0.0.0.0', 0)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1956", "code": "                    else:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1957", "code": "                        # AF_INET6\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1958", "code": "                        addr = ('::', 0)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1959", "code": "                conn.remote_addr = addr[0]\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1960", "code": "                conn.remote_port = addr[1]\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1961", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1962", "code": "            conn.ssl_env = ssl_env\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1963", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1964", "code": "            self.requests.put(conn)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1965", "code": "        except socket.timeout:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1966", "code": "            # The only reason for the timeout in start() is so we can\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1967", "code": "            # notice keyboard interrupts on Win32, which don't interrupt\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1968", "code": "            # accept() by default\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1969", "code": "            return\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1970", "code": "        except socket.error:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "1971", "code": "            x = sys.exc_info()[1]\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "1972", "code": "            if self.stats['Enabled']:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1973", "code": "                self.stats['Socket Errors'] += 1\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1974", "code": "            if x.args[0] in socket_error_eintr:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1975", "code": "                # I *think* this is right. EINTR should occur when a signal\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1976", "code": "                # is received during the accept() call; all docs say retry\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1977", "code": "                # the call, and I *think* I'm reading it right that Python\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1978", "code": "                # will then go ahead and poll for and handle the signal\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1979", "code": "                # elsewhere. See http://www.cherrypy.org/ticket/707.\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1980", "code": "                return\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1981", "code": "            if x.args[0] in socket_errors_nonblocking:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1982", "code": "                # Just try again. See http://www.cherrypy.org/ticket/479.\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1983", "code": "                return\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1984", "code": "            if x.args[0] in socket_errors_to_ignore:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1985", "code": "                # Our socket was closed.\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1986", "code": "                # See http://www.cherrypy.org/ticket/686.\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1987", "code": "                return\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1988", "code": "            raise\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1989", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "1990", "code": "    def _get_interrupt(self):\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "1991", "code": "        return self._interrupt\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "1992", "code": "    def _set_interrupt(self, interrupt):\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "1993", "code": "        self._interrupt = True\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1994", "code": "        self.stop()\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1995", "code": "        self._interrupt = interrupt\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1996", "code": "    interrupt = property(_get_interrupt, _set_interrupt,\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1997", "code": "                         doc=\"Set this to an Exception instance to \"\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1998", "code": "                             \"interrupt the server.\")\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1999", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "2000", "code": "    def stop(self):\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "2001", "code": "        \"\"\"Gracefully shutdown a server that is serving forever.\"\"\"\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "2002", "code": "        self.ready = False\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "2003", "code": "        if self._start_time is not None:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "2004", "code": "            self._run_time += (time.time() - self._start_time)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "W", "line": "2005", "code": "        self._start_time = None\n", "colour": "purple", "author": "tom@organisms.be"}, {"error": "none", "line": "2006", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "2007", "code": "        sock = getattr(self, \"socket\", None)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "2008", "code": "        if sock:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "2009", "code": "            if not isinstance(self.bind_addr, basestring):\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "2010", "code": "                # Touch our own socket to make accept() return immediately.\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "2011", "code": "                try:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "2012", "code": "                    host, port = sock.getsockname()[:2]\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "2013", "code": "                except socket.error:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "2014", "code": "                    x = sys.exc_info()[1]\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "2015", "code": "                    if x.args[0] not in socket_errors_to_ignore:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "2016", "code": "                        # Changed to use error code and not message\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "2017", "code": "                        # See http://www.cherrypy.org/ticket/860.\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "2018", "code": "                        raise\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "2019", "code": "                else:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "2020", "code": "                    # Note that we're explicitly NOT using AI_PASSIVE,\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "2021", "code": "                    # here, because we want an actual IP to touch.\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "2022", "code": "                    # localhost won't work if we've bound to a public IP,\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "2023", "code": "                    # but it will if we bound to '0.0.0.0' (INADDR_ANY).\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "2024", "code": "                    for res in socket.getaddrinfo(host, port, socket.AF_UNSPEC,\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "2025", "code": "                                                  socket.SOCK_STREAM):\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "W", "line": "2026", "code": "                        af, socktype, proto, canonname, sa = res\n", "colour": "purple", "author": "tom@organisms.be"}, {"error": "C", "line": "2027", "code": "                        s = None\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "2028", "code": "                        try:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "2029", "code": "                            s = socket.socket(af, socktype, proto)\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "2030", "code": "                            # See http://groups.google.com/group/cherrypy-users/\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "2031", "code": "                            #        browse_frm/thread/bbfe5eb39c904fe0\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "2032", "code": "                            s.settimeout(1.0)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "2033", "code": "                            s.connect((host, port))\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "2034", "code": "                            s.close()\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "2035", "code": "                        except socket.error:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "2036", "code": "                            if s:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "2037", "code": "                                s.close()\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "2038", "code": "            if hasattr(sock, \"close\"):\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "2039", "code": "                sock.close()\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "W", "line": "2040", "code": "            self.socket = None\n", "colour": "purple", "author": "tom@organisms.be"}, {"error": "none", "line": "2041", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "2042", "code": "        self.requests.stop(self.shutdown_timeout)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "2043", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "2044", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "R", "line": "2045", "code": "class Gateway(object):\n", "colour": "green", "author": "tom@organisms.be"}, {"error": "none", "line": "2046", "code": "    \"\"\"A base class to interface HTTPServer with other systems, such as WSGI.\"\"\"\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "2047", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "2048", "code": "    def __init__(self, req):\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "2049", "code": "        self.req = req\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "2050", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "R", "line": "2051", "code": "    def respond(self):\n", "colour": "green", "author": "tom@organisms.be"}, {"error": "none", "line": "2052", "code": "        \"\"\"Process the current request. Must be overridden in a subclass.\"\"\"\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "E", "line": "2053", "code": "        raise NotImplemented\n", "colour": "yellow", "author": "tom@organisms.be"}, {"error": "none", "line": "2054", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "2055", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "2056", "code": "# These may either be wsgiserver.SSLAdapter subclasses or the string names\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "2057", "code": "# of such classes (in which case they will be lazily loaded).\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "2058", "code": "ssl_adapters = {\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "2059", "code": "    'builtin': 'cherrypy.wsgiserver.ssl_builtin.BuiltinSSLAdapter',\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "2060", "code": "    'pyopenssl': 'cherrypy.wsgiserver.ssl_pyopenssl.pyOpenSSLAdapter',\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "2061", "code": "    }\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "2062", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "2063", "code": "def get_ssl_adapter_class(name='pyopenssl'):\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "2064", "code": "    \"\"\"Return an SSL adapter class for the given name.\"\"\"\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "2065", "code": "    adapter = ssl_adapters[name.lower()]\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "2066", "code": "    if isinstance(adapter, basestring):\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "2067", "code": "        last_dot = adapter.rfind(\".\")\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "2068", "code": "        attr_name = adapter[last_dot + 1:]\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "2069", "code": "        mod_path = adapter[:last_dot]\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "2070", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "2071", "code": "        try:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "2072", "code": "            mod = sys.modules[mod_path]\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "2073", "code": "            if mod is None:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "2074", "code": "                raise KeyError()\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "2075", "code": "        except KeyError:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "2076", "code": "            # The last [''] is important.\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "2077", "code": "            mod = __import__(mod_path, globals(), locals(), [''])\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "2078", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "2079", "code": "        # Let an AttributeError propagate outward.\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "2080", "code": "        try:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "2081", "code": "            adapter = getattr(mod, attr_name)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "2082", "code": "        except AttributeError:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "2083", "code": "            raise AttributeError(\"'%s' object has no attribute '%s'\"\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "2084", "code": "                                 % (mod_path, attr_name))\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "2085", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "2086", "code": "    return adapter\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "2087", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "2088", "code": "# -------------------------------- WSGI Stuff -------------------------------- #\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "2089", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "2090", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "R", "line": "2091", "code": "class CherryPyWSGIServer(HTTPServer):\n", "colour": "green", "author": "tom@organisms.be"}, {"error": "none", "line": "2092", "code": "    \"\"\"A subclass of HTTPServer which calls a WSGI application.\"\"\"\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "2093", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "2094", "code": "    wsgi_version = (1, 0)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "2095", "code": "    \"\"\"The version of WSGI to produce.\"\"\"\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "2096", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "W", "line": "2097", "code": "    def __init__(self, bind_addr, wsgi_app, numthreads=10, server_name=None,\n", "colour": "purple", "author": "tom@organisms.be"}, {"error": "W", "line": "2098", "code": "                 max=-1, request_queue_size=5, timeout=10, shutdown_timeout=5):\n", "colour": "purple", "author": "tom@organisms.be"}, {"error": "none", "line": "2099", "code": "        self.requests = ThreadPool(self, min=numthreads or 1, max=max)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "2100", "code": "        self.wsgi_app = wsgi_app\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "2101", "code": "        self.gateway = wsgi_gateways[self.wsgi_version]\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "2102", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "2103", "code": "        self.bind_addr = bind_addr\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "2104", "code": "        if not server_name:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "2105", "code": "            server_name = socket.gethostname()\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "2106", "code": "        self.server_name = server_name\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "2107", "code": "        self.request_queue_size = request_queue_size\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "2108", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "2109", "code": "        self.timeout = timeout\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "2110", "code": "        self.shutdown_timeout = shutdown_timeout\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "2111", "code": "        self.clear_stats()\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "2112", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "2113", "code": "    def _get_numthreads(self):\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "2114", "code": "        return self.requests.min\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "2115", "code": "    def _set_numthreads(self, value):\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "2116", "code": "        self.requests.min = value\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "2117", "code": "    numthreads = property(_get_numthreads, _set_numthreads)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "2118", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "2119", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "2120", "code": "class WSGIGateway(Gateway):\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "2121", "code": "    \"\"\"A base class to interface HTTPServer with WSGI.\"\"\"\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "2122", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "W", "line": "2123", "code": "    def __init__(self, req):\n", "colour": "purple", "author": "tom@organisms.be"}, {"error": "none", "line": "2124", "code": "        self.req = req\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "2125", "code": "        self.started_response = False\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "2126", "code": "        self.env = self.get_environ()\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "2127", "code": "        self.remaining_bytes_out = None\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "2128", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "R", "line": "2129", "code": "    def get_environ(self):\n", "colour": "green", "author": "tom@organisms.be"}, {"error": "none", "line": "2130", "code": "        \"\"\"Return a new environ dict targeting the given wsgi.version\"\"\"\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "E", "line": "2131", "code": "        raise NotImplemented\n", "colour": "yellow", "author": "tom@organisms.be"}, {"error": "none", "line": "2132", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "2133", "code": "    def respond(self):\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "2134", "code": "        \"\"\"Process the current request.\"\"\"\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "2135", "code": "        response = self.req.server.wsgi_app(self.env, self.start_response)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "2136", "code": "        try:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "2137", "code": "            for chunk in response:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "2138", "code": "                # \"The start_response callable must not actually transmit\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "2139", "code": "                # the response headers. Instead, it must store them for the\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "2140", "code": "                # server or gateway to transmit only after the first\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "2141", "code": "                # iteration of the application return value that yields\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "2142", "code": "                # a NON-EMPTY string, or upon the application's first\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "2143", "code": "                # invocation of the write() callable.\" (PEP 333)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "2144", "code": "                if chunk:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "2145", "code": "                    if isinstance(chunk, unicodestr):\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "2146", "code": "                        chunk = chunk.encode('ISO-8859-1')\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "2147", "code": "                    self.write(chunk)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "2148", "code": "        finally:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "2149", "code": "            if hasattr(response, \"close\"):\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "2150", "code": "                response.close()\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "2151", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "2152", "code": "    def start_response(self, status, headers, exc_info = None):\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "2153", "code": "        \"\"\"WSGI callable to begin the HTTP response.\"\"\"\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "2154", "code": "        # \"The application may call start_response more than once,\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "2155", "code": "        # if and only if the exc_info argument is provided.\"\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "2156", "code": "        if self.started_response and not exc_info:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "2157", "code": "            raise AssertionError(\"WSGI start_response called a second \"\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "2158", "code": "                                 \"time with no exc_info.\")\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "2159", "code": "        self.started_response = True\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "2160", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "2161", "code": "        # \"if exc_info is provided, and the HTTP headers have already been\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "2162", "code": "        # sent, start_response must raise an error, and should raise the\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "2163", "code": "        # exc_info tuple.\"\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "2164", "code": "        if self.req.sent_headers:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "2165", "code": "            try:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "2166", "code": "                raise exc_info[0], exc_info[1], exc_info[2]\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "2167", "code": "            finally:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "2168", "code": "                exc_info = None\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "2169", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "2170", "code": "        self.req.status = status\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "2171", "code": "        for k, v in headers:\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "2172", "code": "            if not isinstance(k, str):\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "2173", "code": "                raise TypeError(\"WSGI response header key %r is not of type str.\" % k)\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "2174", "code": "            if not isinstance(v, str):\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "2175", "code": "                raise TypeError(\"WSGI response header value %r is not of type str.\" % v)\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "2176", "code": "            if k.lower() == 'content-length':\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "2177", "code": "                self.remaining_bytes_out = int(v)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "2178", "code": "        self.req.outheaders.extend(headers)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "2179", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "2180", "code": "        return self.write\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "2181", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "2182", "code": "    def write(self, chunk):\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "2183", "code": "        \"\"\"WSGI callable to write unbuffered data to the client.\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "2184", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "2185", "code": "        This method is also used internally by start_response (to write\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "2186", "code": "        data from the iterable returned by the WSGI application).\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "2187", "code": "        \"\"\"\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "2188", "code": "        if not self.started_response:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "2189", "code": "            raise AssertionError(\"WSGI write called before start_response.\")\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "2190", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "2191", "code": "        chunklen = len(chunk)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "2192", "code": "        rbo = self.remaining_bytes_out\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "2193", "code": "        if rbo is not None and chunklen > rbo:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "2194", "code": "            if not self.req.sent_headers:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "2195", "code": "                # Whew. We can send a 500 to the client.\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "2196", "code": "                self.req.simple_response(\"500 Internal Server Error\",\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "2197", "code": "                    \"The requested resource returned more bytes than the \"\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "2198", "code": "                    \"declared Content-Length.\")\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "2199", "code": "            else:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "2200", "code": "                # Dang. We have probably already sent data. Truncate the chunk\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "2201", "code": "                # to fit (so the client doesn't hang) and raise an error later.\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "2202", "code": "                chunk = chunk[:rbo]\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "2203", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "2204", "code": "        if not self.req.sent_headers:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "2205", "code": "            self.req.sent_headers = True\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "2206", "code": "            self.req.send_headers()\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "2207", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "2208", "code": "        self.req.write(chunk)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "2209", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "2210", "code": "        if rbo is not None:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "2211", "code": "            rbo -= chunklen\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "2212", "code": "            if rbo < 0:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "2213", "code": "                raise ValueError(\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "2214", "code": "                    \"Response body exceeds the declared Content-Length.\")\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "2215", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "2216", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "2217", "code": "class WSGIGateway_10(WSGIGateway):\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "2218", "code": "    \"\"\"A Gateway class to interface HTTPServer with WSGI 1.0.x.\"\"\"\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "2219", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "2220", "code": "    def get_environ(self):\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "2221", "code": "        \"\"\"Return a new environ dict targeting the given wsgi.version\"\"\"\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "2222", "code": "        req = self.req\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "2223", "code": "        env = {\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "2224", "code": "            # set a non-standard environ entry so the WSGI app can know what\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "2225", "code": "            # the *real* server protocol is (and what features to support).\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "2226", "code": "            # See http://www.faqs.org/rfcs/rfc2145.html.\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "2227", "code": "            'ACTUAL_SERVER_PROTOCOL': req.server.protocol,\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "2228", "code": "            'PATH_INFO': req.path,\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "2229", "code": "            'QUERY_STRING': req.qs,\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "2230", "code": "            'REMOTE_ADDR': req.conn.remote_addr or '',\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "2231", "code": "            'REMOTE_PORT': str(req.conn.remote_port or ''),\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "2232", "code": "            'REQUEST_METHOD': req.method,\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "2233", "code": "            'REQUEST_URI': req.uri,\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "2234", "code": "            'SCRIPT_NAME': '',\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "2235", "code": "            'SERVER_NAME': req.server.server_name,\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "2236", "code": "            # Bah. \"SERVER_PROTOCOL\" is actually the REQUEST protocol.\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "2237", "code": "            'SERVER_PROTOCOL': req.request_protocol,\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "2238", "code": "            'SERVER_SOFTWARE': req.server.software,\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "2239", "code": "            'wsgi.errors': sys.stderr,\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "2240", "code": "            'wsgi.input': req.rfile,\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "2241", "code": "            'wsgi.multiprocess': False,\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "2242", "code": "            'wsgi.multithread': True,\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "2243", "code": "            'wsgi.run_once': False,\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "2244", "code": "            'wsgi.url_scheme': req.scheme,\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "2245", "code": "            'wsgi.version': (1, 0),\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "2246", "code": "            }\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "2247", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "2248", "code": "        if isinstance(req.server.bind_addr, basestring):\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "2249", "code": "            # AF_UNIX. This isn't really allowed by WSGI, which doesn't\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "2250", "code": "            # address unix domain sockets. But it's better than nothing.\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "2251", "code": "            env[\"SERVER_PORT\"] = \"\"\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "2252", "code": "        else:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "2253", "code": "            env[\"SERVER_PORT\"] = str(req.server.bind_addr[1])\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "2254", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "2255", "code": "        # Request headers\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "2256", "code": "        for k, v in req.inheaders.iteritems():\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "2257", "code": "            env[\"HTTP_\" + k.upper().replace(\"-\", \"_\")] = v\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "2258", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "2259", "code": "        # CONTENT_TYPE/CONTENT_LENGTH\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "2260", "code": "        ct = env.pop(\"HTTP_CONTENT_TYPE\", None)\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "2261", "code": "        if ct is not None:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "2262", "code": "            env[\"CONTENT_TYPE\"] = ct\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "2263", "code": "        cl = env.pop(\"HTTP_CONTENT_LENGTH\", None)\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "2264", "code": "        if cl is not None:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "2265", "code": "            env[\"CONTENT_LENGTH\"] = cl\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "2266", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "2267", "code": "        if req.conn.ssl_env:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "2268", "code": "            env.update(req.conn.ssl_env)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "2269", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "2270", "code": "        return env\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "2271", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "2272", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "2273", "code": "class WSGIGateway_u0(WSGIGateway_10):\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "2274", "code": "    \"\"\"A Gateway class to interface HTTPServer with WSGI u.0.\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "2275", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "2276", "code": "    WSGI u.0 is an experimental protocol, which uses unicode for keys and values\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "2277", "code": "    in both Python 2 and Python 3.\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "2278", "code": "    \"\"\"\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "2279", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "2280", "code": "    def get_environ(self):\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "2281", "code": "        \"\"\"Return a new environ dict targeting the given wsgi.version\"\"\"\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "W", "line": "2282", "code": "        req = self.req\n", "colour": "purple", "author": "tom@organisms.be"}, {"error": "none", "line": "2283", "code": "        env_10 = WSGIGateway_10.get_environ(self)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "2284", "code": "        env = dict([(k.decode('ISO-8859-1'), v) for k, v in env_10.iteritems()])\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "2285", "code": "        env[u'wsgi.version'] = ('u', 0)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "2286", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "2287", "code": "        # Request-URI\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "2288", "code": "        env.setdefault(u'wsgi.url_encoding', u'utf-8')\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "2289", "code": "        try:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "2290", "code": "            for key in [u\"PATH_INFO\", u\"SCRIPT_NAME\", u\"QUERY_STRING\"]:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "2291", "code": "                env[key] = env_10[str(key)].decode(env[u'wsgi.url_encoding'])\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "2292", "code": "        except UnicodeDecodeError:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "2293", "code": "            # Fall back to latin 1 so apps can transcode if needed.\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "2294", "code": "            env[u'wsgi.url_encoding'] = u'ISO-8859-1'\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "2295", "code": "            for key in [u\"PATH_INFO\", u\"SCRIPT_NAME\", u\"QUERY_STRING\"]:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "2296", "code": "                env[key] = env_10[str(key)].decode(env[u'wsgi.url_encoding'])\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "2297", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "2298", "code": "        for k, v in sorted(env.items()):\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "2299", "code": "            if isinstance(v, str) and k not in ('REQUEST_URI', 'wsgi.input'):\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "2300", "code": "                env[k] = v.decode('ISO-8859-1')\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "2301", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "2302", "code": "        return env\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "2303", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "2304", "code": "wsgi_gateways = {\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "2305", "code": "    (1, 0): WSGIGateway_10,\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "2306", "code": "    ('u', 0): WSGIGateway_u0,\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "2307", "code": "}\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "2308", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "R", "line": "2309", "code": "class WSGIPathInfoDispatcher(object):\n", "colour": "green", "author": "tom@organisms.be"}, {"error": "none", "line": "2310", "code": "    \"\"\"A WSGI dispatcher for dispatch based on the PATH_INFO.\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "2311", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "2312", "code": "    apps: a dict or list of (path_prefix, app) pairs.\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "2313", "code": "    \"\"\"\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "2314", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "2315", "code": "    def __init__(self, apps):\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "2316", "code": "        try:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "2317", "code": "            apps = list(apps.items())\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "2318", "code": "        except AttributeError:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "2319", "code": "            pass\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "2320", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "2321", "code": "        # Sort the apps by len(path), descending\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "2322", "code": "        apps.sort(cmp=lambda x,y: cmp(len(x[0]), len(y[0])))\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "2323", "code": "        apps.reverse()\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "2324", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "2325", "code": "        # The path_prefix strings must start, but not end, with a slash.\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "2326", "code": "        # Use \"\" instead of \"/\".\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "2327", "code": "        self.apps = [(p.rstrip(\"/\"), a) for p, a in apps]\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "2328", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "2329", "code": "    def __call__(self, environ, start_response):\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "2330", "code": "        path = environ[\"PATH_INFO\"] or \"/\"\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "2331", "code": "        for p, app in self.apps:\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "2332", "code": "            # The apps list should be sorted by length, descending.\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "2333", "code": "            if path.startswith(p + \"/\") or path == p:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "2334", "code": "                environ = environ.copy()\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "2335", "code": "                environ[\"SCRIPT_NAME\"] = environ[\"SCRIPT_NAME\"] + p\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "2336", "code": "                environ[\"PATH_INFO\"] = path[len(p):]\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "2337", "code": "                return app(environ, start_response)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "2338", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "2339", "code": "        start_response('404 Not Found', [('Content-Type', 'text/plain'),\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "2340", "code": "                                         ('Content-Length', '0')])\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "2341", "code": "        return ['']\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "2342", "code": "\n", "colour": "black", "author": "tom@organisms.be"}]]}