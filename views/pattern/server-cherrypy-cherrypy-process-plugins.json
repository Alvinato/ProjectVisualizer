{"path": "/home/asumal/git/cs410/pattern/pattern/server/cherrypy/cherrypy/process/plugins.py", "lines": [[{"error": "none", "line": "1", "code": "\"\"\"Site services for use with a Web Site Process Bus.\"\"\"\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "2", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "3", "code": "import os\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "4", "code": "import re\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "5", "code": "import signal as _signal\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "6", "code": "import sys\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "7", "code": "import time\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "8", "code": "import threading\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "9", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "W", "line": "10", "code": "from cherrypy._cpcompat import basestring, get_daemon, get_thread_ident, ntob, set, Timer, SetDaemonProperty\n", "colour": "purple", "author": "tom@organisms.be"}, {"error": "none", "line": "11", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "12", "code": "# _module__file__base is used by Autoreload to make\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "13", "code": "# absolute any filenames retrieved from sys.modules which are not\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "14", "code": "# already absolute paths.  This is to work around Python's quirk\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "15", "code": "# of importing the startup script and using a relative filename\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "16", "code": "# for it in sys.modules.\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "17", "code": "#\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "18", "code": "# Autoreload examines sys.modules afresh every time it runs. If an application\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "19", "code": "# changes the current directory by executing os.chdir(), then the next time\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "20", "code": "# Autoreload runs, it will not be able to find any filenames which are\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "21", "code": "# not absolute paths, because the current directory is not the same as when the\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "22", "code": "# module was first imported.  Autoreload will then wrongly conclude the file has\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "23", "code": "# \"changed\", and initiate the shutdown/re-exec sequence.\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "24", "code": "# See ticket #917.\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "25", "code": "# For this workaround to have a decent probability of success, this module\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "26", "code": "# needs to be imported as early as possible, before the app has much chance\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "27", "code": "# to change the working directory.\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "28", "code": "_module__file__base = os.getcwd()\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "29", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "30", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "31", "code": "class SimplePlugin(object):\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "32", "code": "    \"\"\"Plugin base class which auto-subscribes methods for known channels.\"\"\"\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "33", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "34", "code": "    bus = None\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "35", "code": "    \"\"\"A :class:`Bus <cherrypy.process.wspbus.Bus>`, usually cherrypy.engine.\"\"\"\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "36", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "37", "code": "    def __init__(self, bus):\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "38", "code": "        self.bus = bus\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "39", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "40", "code": "    def subscribe(self):\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "41", "code": "        \"\"\"Register this object as a (multi-channel) listener on the bus.\"\"\"\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "42", "code": "        for channel in self.bus.listeners:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "43", "code": "            # Subscribe self.start, self.exit, etc. if present.\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "44", "code": "            method = getattr(self, channel, None)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "45", "code": "            if method is not None:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "46", "code": "                self.bus.subscribe(channel, method)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "47", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "48", "code": "    def unsubscribe(self):\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "49", "code": "        \"\"\"Unregister this object as a listener on the bus.\"\"\"\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "50", "code": "        for channel in self.bus.listeners:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "51", "code": "            # Unsubscribe self.start, self.exit, etc. if present.\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "52", "code": "            method = getattr(self, channel, None)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "53", "code": "            if method is not None:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "54", "code": "                self.bus.unsubscribe(channel, method)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "55", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "56", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "57", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "58", "code": "class SignalHandler(object):\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "59", "code": "    \"\"\"Register bus channels (and listeners) for system signals.\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "60", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "61", "code": "    You can modify what signals your application listens for, and what it does\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "62", "code": "    when it receives signals, by modifying :attr:`SignalHandler.handlers`,\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "63", "code": "    a dict of {signal name: callback} pairs. The default set is::\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "64", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "65", "code": "        handlers = {'SIGTERM': self.bus.exit,\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "66", "code": "                    'SIGHUP': self.handle_SIGHUP,\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "67", "code": "                    'SIGUSR1': self.bus.graceful,\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "68", "code": "                   }\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "69", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "70", "code": "    The :func:`SignalHandler.handle_SIGHUP`` method calls\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "71", "code": "    :func:`bus.restart()<cherrypy.process.wspbus.Bus.restart>`\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "72", "code": "    if the process is daemonized, but\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "73", "code": "    :func:`bus.exit()<cherrypy.process.wspbus.Bus.exit>`\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "74", "code": "    if the process is attached to a TTY. This is because Unix window\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "75", "code": "    managers tend to send SIGHUP to terminal windows when the user closes them.\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "76", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "77", "code": "    Feel free to add signals which are not available on every platform. The\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "78", "code": "    :class:`SignalHandler` will ignore errors raised from attempting to register\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "79", "code": "    handlers for unknown signals.\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "80", "code": "    \"\"\"\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "81", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "82", "code": "    handlers = {}\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "83", "code": "    \"\"\"A map from signal names (e.g. 'SIGTERM') to handlers (e.g. bus.exit).\"\"\"\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "84", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "85", "code": "    signals = {}\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "86", "code": "    \"\"\"A map from signal numbers to names.\"\"\"\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "87", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "88", "code": "    for k, v in vars(_signal).items():\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "89", "code": "        if k.startswith('SIG') and not k.startswith('SIG_'):\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "90", "code": "            signals[v] = k\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "W", "line": "91", "code": "    del k, v\n", "colour": "purple", "author": "tom@organisms.be"}, {"error": "none", "line": "92", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "93", "code": "    def __init__(self, bus):\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "94", "code": "        self.bus = bus\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "95", "code": "        # Set default handlers\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "96", "code": "        self.handlers = {'SIGTERM': self.bus.exit,\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "97", "code": "                         'SIGHUP': self.handle_SIGHUP,\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "98", "code": "                         'SIGUSR1': self.bus.graceful,\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "99", "code": "                         }\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "100", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "101", "code": "        if sys.platform[:4] == 'java':\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "102", "code": "            del self.handlers['SIGUSR1']\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "103", "code": "            self.handlers['SIGUSR2'] = self.bus.graceful\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "104", "code": "            self.bus.log(\"SIGUSR1 cannot be set on the JVM platform. \"\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "105", "code": "                         \"Using SIGUSR2 instead.\")\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "106", "code": "            self.handlers['SIGINT'] = self._jython_SIGINT_handler\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "107", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "108", "code": "        self._previous_handlers = {}\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "109", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "W", "line": "110", "code": "    def _jython_SIGINT_handler(self, signum=None, frame=None):\n", "colour": "purple", "author": "tom@organisms.be"}, {"error": "none", "line": "111", "code": "        # See http://bugs.jython.org/issue1313\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "112", "code": "        self.bus.log('Keyboard Interrupt: shutting down bus')\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "113", "code": "        self.bus.exit()\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "114", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "115", "code": "    def subscribe(self):\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "116", "code": "        \"\"\"Subscribe self.handlers to signals.\"\"\"\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "117", "code": "        for sig, func in self.handlers.items():\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "118", "code": "            try:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "119", "code": "                self.set_handler(sig, func)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "120", "code": "            except ValueError:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "121", "code": "                pass\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "122", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "123", "code": "    def unsubscribe(self):\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "124", "code": "        \"\"\"Unsubscribe self.handlers from signals.\"\"\"\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "125", "code": "        for signum, handler in self._previous_handlers.items():\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "126", "code": "            signame = self.signals[signum]\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "127", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "128", "code": "            if handler is None:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "129", "code": "                self.bus.log(\"Restoring %s handler to SIG_DFL.\" % signame)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "130", "code": "                handler = _signal.SIG_DFL\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "131", "code": "            else:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "132", "code": "                self.bus.log(\"Restoring %s handler %r.\" % (signame, handler))\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "133", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "134", "code": "            try:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "135", "code": "                our_handler = _signal.signal(signum, handler)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "136", "code": "                if our_handler is None:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "137", "code": "                    self.bus.log(\"Restored old %s handler %r, but our \"\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "138", "code": "                                 \"handler was not registered.\" %\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "139", "code": "                                 (signame, handler), level=30)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "140", "code": "            except ValueError:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "141", "code": "                self.bus.log(\"Unable to restore %s handler %r.\" %\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "142", "code": "                             (signame, handler), level=40, traceback=True)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "143", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "144", "code": "    def set_handler(self, signal, listener=None):\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "145", "code": "        \"\"\"Subscribe a handler for the given signal (number or name).\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "146", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "147", "code": "        If the optional 'listener' argument is provided, it will be\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "148", "code": "        subscribed as a listener for the given signal's channel.\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "149", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "150", "code": "        If the given signal name or number is not available on the current\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "151", "code": "        platform, ValueError is raised.\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "152", "code": "        \"\"\"\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "153", "code": "        if isinstance(signal, basestring):\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "154", "code": "            signum = getattr(_signal, signal, None)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "155", "code": "            if signum is None:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "156", "code": "                raise ValueError(\"No such signal: %r\" % signal)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "157", "code": "            signame = signal\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "158", "code": "        else:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "159", "code": "            try:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "160", "code": "                signame = self.signals[signal]\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "161", "code": "            except KeyError:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "162", "code": "                raise ValueError(\"No such signal: %r\" % signal)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "163", "code": "            signum = signal\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "164", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "165", "code": "        prev = _signal.signal(signum, self._handle_signal)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "166", "code": "        self._previous_handlers[signum] = prev\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "167", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "168", "code": "        if listener is not None:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "169", "code": "            self.bus.log(\"Listening for %s.\" % signame)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "170", "code": "            self.bus.subscribe(signame, listener)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "171", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "W", "line": "172", "code": "    def _handle_signal(self, signum=None, frame=None):\n", "colour": "purple", "author": "tom@organisms.be"}, {"error": "none", "line": "173", "code": "        \"\"\"Python signal handler (self.set_handler subscribes it for you).\"\"\"\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "174", "code": "        signame = self.signals[signum]\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "175", "code": "        self.bus.log(\"Caught signal %s.\" % signame)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "176", "code": "        self.bus.publish(signame)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "177", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "178", "code": "    def handle_SIGHUP(self):\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "179", "code": "        \"\"\"Restart if daemonized, else exit.\"\"\"\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "180", "code": "        if os.isatty(sys.stdin.fileno()):\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "181", "code": "            # not daemonized (may be foreground or background)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "182", "code": "            self.bus.log(\"SIGHUP caught but not daemonized. Exiting.\")\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "183", "code": "            self.bus.exit()\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "184", "code": "        else:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "185", "code": "            self.bus.log(\"SIGHUP caught while daemonized. Restarting.\")\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "186", "code": "            self.bus.restart()\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "187", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "188", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "189", "code": "try:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "190", "code": "    import pwd, grp\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "191", "code": "except ImportError:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "192", "code": "    pwd, grp = None, None\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "193", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "194", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "195", "code": "class DropPrivileges(SimplePlugin):\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "196", "code": "    \"\"\"Drop privileges. uid/gid arguments not available on Windows.\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "197", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "198", "code": "    Special thanks to Gavin Baker: http://antonym.org/node/100.\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "199", "code": "    \"\"\"\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "200", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "201", "code": "    def __init__(self, bus, umask=None, uid=None, gid=None):\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "202", "code": "        SimplePlugin.__init__(self, bus)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "203", "code": "        self.finalized = False\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "204", "code": "        self.uid = uid\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "205", "code": "        self.gid = gid\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "206", "code": "        self.umask = umask\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "207", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "208", "code": "    def _get_uid(self):\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "209", "code": "        return self._uid\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "210", "code": "    def _set_uid(self, val):\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "211", "code": "        if val is not None:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "212", "code": "            if pwd is None:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "213", "code": "                self.bus.log(\"pwd module not available; ignoring uid.\",\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "214", "code": "                             level=30)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "215", "code": "                val = None\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "216", "code": "            elif isinstance(val, basestring):\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "217", "code": "                val = pwd.getpwnam(val)[2]\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "W", "line": "218", "code": "        self._uid = val\n", "colour": "purple", "author": "tom@organisms.be"}, {"error": "none", "line": "219", "code": "    uid = property(_get_uid, _set_uid,\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "220", "code": "        doc=\"The uid under which to run. Availability: Unix.\")\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "221", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "222", "code": "    def _get_gid(self):\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "223", "code": "        return self._gid\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "224", "code": "    def _set_gid(self, val):\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "225", "code": "        if val is not None:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "226", "code": "            if grp is None:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "227", "code": "                self.bus.log(\"grp module not available; ignoring gid.\",\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "228", "code": "                             level=30)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "229", "code": "                val = None\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "230", "code": "            elif isinstance(val, basestring):\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "231", "code": "                val = grp.getgrnam(val)[2]\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "W", "line": "232", "code": "        self._gid = val\n", "colour": "purple", "author": "tom@organisms.be"}, {"error": "none", "line": "233", "code": "    gid = property(_get_gid, _set_gid,\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "234", "code": "        doc=\"The gid under which to run. Availability: Unix.\")\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "235", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "236", "code": "    def _get_umask(self):\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "237", "code": "        return self._umask\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "238", "code": "    def _set_umask(self, val):\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "239", "code": "        if val is not None:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "240", "code": "            try:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "241", "code": "                os.umask\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "242", "code": "            except AttributeError:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "243", "code": "                self.bus.log(\"umask function not available; ignoring umask.\",\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "244", "code": "                             level=30)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "245", "code": "                val = None\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "W", "line": "246", "code": "        self._umask = val\n", "colour": "purple", "author": "tom@organisms.be"}, {"error": "none", "line": "247", "code": "    umask = property(_get_umask, _set_umask,\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "248", "code": "        doc=\"\"\"The default permission mode for newly created files and directories.\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "249", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "250", "code": "        Usually expressed in octal format, for example, ``0644``.\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "251", "code": "        Availability: Unix, Windows.\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "252", "code": "        \"\"\")\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "253", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "R", "line": "254", "code": "    def start(self):\n", "colour": "green", "author": "tom@organisms.be"}, {"error": "none", "line": "255", "code": "        # uid/gid\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "256", "code": "        def current_ids():\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "257", "code": "            \"\"\"Return the current (uid, gid) if available.\"\"\"\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "258", "code": "            name, group = None, None\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "259", "code": "            if pwd:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "260", "code": "                name = pwd.getpwuid(os.getuid())[0]\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "261", "code": "            if grp:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "262", "code": "                group = grp.getgrgid(os.getgid())[0]\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "263", "code": "            return name, group\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "264", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "265", "code": "        if self.finalized:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "266", "code": "            if not (self.uid is None and self.gid is None):\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "267", "code": "                self.bus.log('Already running as uid: %r gid: %r' %\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "268", "code": "                             current_ids())\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "269", "code": "        else:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "270", "code": "            if self.uid is None and self.gid is None:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "271", "code": "                if pwd or grp:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "272", "code": "                    self.bus.log('uid/gid not set', level=30)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "273", "code": "            else:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "274", "code": "                self.bus.log('Started as uid: %r gid: %r' % current_ids())\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "275", "code": "                if self.gid is not None:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "276", "code": "                    os.setgid(self.gid)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "277", "code": "                    os.setgroups([])\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "278", "code": "                if self.uid is not None:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "279", "code": "                    os.setuid(self.uid)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "280", "code": "                self.bus.log('Running as uid: %r gid: %r' % current_ids())\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "281", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "282", "code": "        # umask\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "283", "code": "        if self.finalized:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "284", "code": "            if self.umask is not None:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "285", "code": "                self.bus.log('umask already set to: %03o' % self.umask)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "286", "code": "        else:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "287", "code": "            if self.umask is None:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "288", "code": "                self.bus.log('umask not set', level=30)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "289", "code": "            else:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "290", "code": "                old_umask = os.umask(self.umask)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "291", "code": "                self.bus.log('umask old: %03o, new: %03o' %\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "292", "code": "                             (old_umask, self.umask))\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "293", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "294", "code": "        self.finalized = True\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "295", "code": "    # This is slightly higher than the priority for server.start\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "296", "code": "    # in order to facilitate the most common use: starting on a low\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "297", "code": "    # port (which requires root) and then dropping to another user.\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "298", "code": "    start.priority = 77\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "299", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "300", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "301", "code": "class Daemonizer(SimplePlugin):\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "302", "code": "    \"\"\"Daemonize the running script.\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "303", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "304", "code": "    Use this with a Web Site Process Bus via::\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "305", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "306", "code": "        Daemonizer(bus).subscribe()\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "307", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "308", "code": "    When this component finishes, the process is completely decoupled from\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "309", "code": "    the parent environment. Please note that when this component is used,\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "310", "code": "    the return code from the parent process will still be 0 if a startup\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "311", "code": "    error occurs in the forked children. Errors in the initial daemonizing\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "312", "code": "    process still return proper exit codes. Therefore, if you use this\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "313", "code": "    plugin to daemonize, don't use the return code as an accurate indicator\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "314", "code": "    of whether the process fully started. In fact, that return code only\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "315", "code": "    indicates if the process succesfully finished the first fork.\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "316", "code": "    \"\"\"\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "317", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "318", "code": "    def __init__(self, bus, stdin='/dev/null', stdout='/dev/null',\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "319", "code": "                 stderr='/dev/null'):\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "320", "code": "        SimplePlugin.__init__(self, bus)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "321", "code": "        self.stdin = stdin\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "322", "code": "        self.stdout = stdout\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "323", "code": "        self.stderr = stderr\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "324", "code": "        self.finalized = False\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "325", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "326", "code": "    def start(self):\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "327", "code": "        if self.finalized:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "328", "code": "            self.bus.log('Already deamonized.')\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "329", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "330", "code": "        # forking has issues with threads:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "331", "code": "        # http://www.opengroup.org/onlinepubs/000095399/functions/fork.html\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "332", "code": "        # \"The general problem with making fork() work in a multi-threaded\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "333", "code": "        #  world is what to do with all of the threads...\"\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "334", "code": "        # So we check for active threads:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "335", "code": "        if threading.activeCount() != 1:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "336", "code": "            self.bus.log('There are %r active threads. '\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "337", "code": "                         'Daemonizing now may cause strange failures.' %\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "338", "code": "                         threading.enumerate(), level=30)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "339", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "340", "code": "        # See http://www.erlenstar.demon.co.uk/unix/faq_2.html#SEC16\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "341", "code": "        # (or http://www.faqs.org/faqs/unix-faq/programmer/faq/ section 1.7)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "342", "code": "        # and http://aspn.activestate.com/ASPN/Cookbook/Python/Recipe/66012\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "343", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "344", "code": "        # Finish up with the current stdout/stderr\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "345", "code": "        sys.stdout.flush()\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "346", "code": "        sys.stderr.flush()\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "347", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "348", "code": "        # Do first fork.\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "349", "code": "        try:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "350", "code": "            pid = os.fork()\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "351", "code": "            if pid == 0:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "352", "code": "                # This is the child process. Continue.\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "353", "code": "                pass\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "354", "code": "            else:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "355", "code": "                # This is the first parent. Exit, now that we've forked.\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "356", "code": "                self.bus.log('Forking once.')\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "W", "line": "357", "code": "                os._exit(0)\n", "colour": "purple", "author": "tom@organisms.be"}, {"error": "none", "line": "358", "code": "        except OSError:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "359", "code": "            # Python raises OSError rather than returning negative numbers.\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "360", "code": "            exc = sys.exc_info()[1]\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "361", "code": "            sys.exit(\"%s: fork #1 failed: (%d) %s\\n\"\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "362", "code": "                     % (sys.argv[0], exc.errno, exc.strerror))\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "363", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "364", "code": "        os.setsid()\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "365", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "366", "code": "        # Do second fork\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "367", "code": "        try:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "368", "code": "            pid = os.fork()\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "369", "code": "            if pid > 0:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "370", "code": "                self.bus.log('Forking twice.')\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "W", "line": "371", "code": "                os._exit(0) # Exit second parent\n", "colour": "purple", "author": "tom@organisms.be"}, {"error": "none", "line": "372", "code": "        except OSError:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "373", "code": "            exc = sys.exc_info()[1]\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "374", "code": "            sys.exit(\"%s: fork #2 failed: (%d) %s\\n\"\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "375", "code": "                     % (sys.argv[0], exc.errno, exc.strerror))\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "376", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "377", "code": "        os.chdir(\"/\")\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "378", "code": "        os.umask(0)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "379", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "380", "code": "        si = open(self.stdin, \"r\")\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "C", "line": "381", "code": "        so = open(self.stdout, \"a+\")\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "C", "line": "382", "code": "        se = open(self.stderr, \"a+\")\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "383", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "384", "code": "        # os.dup2(fd, fd2) will close fd2 if necessary,\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "385", "code": "        # so we don't explicitly close stdin/out/err.\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "386", "code": "        # See http://docs.python.org/lib/os-fd-ops.html\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "387", "code": "        os.dup2(si.fileno(), sys.stdin.fileno())\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "388", "code": "        os.dup2(so.fileno(), sys.stdout.fileno())\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "389", "code": "        os.dup2(se.fileno(), sys.stderr.fileno())\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "390", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "391", "code": "        self.bus.log('Daemonized to PID: %s' % os.getpid())\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "392", "code": "        self.finalized = True\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "393", "code": "    start.priority = 65\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "394", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "395", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "396", "code": "class PIDFile(SimplePlugin):\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "397", "code": "    \"\"\"Maintain a PID file via a WSPBus.\"\"\"\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "398", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "399", "code": "    def __init__(self, bus, pidfile):\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "400", "code": "        SimplePlugin.__init__(self, bus)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "401", "code": "        self.pidfile = pidfile\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "402", "code": "        self.finalized = False\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "403", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "404", "code": "    def start(self):\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "405", "code": "        pid = os.getpid()\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "406", "code": "        if self.finalized:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "407", "code": "            self.bus.log('PID %r already written to %r.' % (pid, self.pidfile))\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "408", "code": "        else:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "409", "code": "            open(self.pidfile, \"wb\").write(ntob(\"%s\" % pid, 'utf8'))\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "410", "code": "            self.bus.log('PID %r written to %r.' % (pid, self.pidfile))\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "411", "code": "            self.finalized = True\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "412", "code": "    start.priority = 70\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "413", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "414", "code": "    def exit(self):\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "415", "code": "        try:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "416", "code": "            os.remove(self.pidfile)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "417", "code": "            self.bus.log('PID file removed: %r.' % self.pidfile)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "418", "code": "        except (KeyboardInterrupt, SystemExit):\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "419", "code": "            raise\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "W", "line": "420", "code": "        except:\n", "colour": "purple", "author": "tom@organisms.be"}, {"error": "none", "line": "421", "code": "            pass\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "422", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "423", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "R", "line": "424", "code": "class PerpetualTimer(Timer):\n", "colour": "green", "author": "tom@organisms.be"}, {"error": "none", "line": "425", "code": "    \"\"\"A responsive subclass of threading.Timer whose run() method repeats.\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "426", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "427", "code": "    Use this timer only when you really need a very interruptible timer;\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "428", "code": "    this checks its 'finished' condition up to 20 times a second, which can\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "429", "code": "    results in pretty high CPU usage\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "430", "code": "    \"\"\"\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "431", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "E", "line": "432", "code": "    def __init__(self, *args, **kwargs):\n", "colour": "yellow", "author": "tom@organisms.be"}, {"error": "none", "line": "433", "code": "        \"Override parent constructor to allow 'bus' to be provided.\"\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "434", "code": "        self.bus = kwargs.pop('bus', None)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "435", "code": "        super(PerpetualTimer, self).__init__(*args, **kwargs)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "436", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "437", "code": "    def run(self):\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "438", "code": "        while True:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "E", "line": "439", "code": "            self.finished.wait(self.interval)\n", "colour": "yellow", "author": "tom@organisms.be"}, {"error": "E", "line": "440", "code": "            if self.finished.isSet():\n", "colour": "yellow", "author": "tom@organisms.be"}, {"error": "none", "line": "441", "code": "                return\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "442", "code": "            try:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "E", "line": "443", "code": "                self.function(*self.args, **self.kwargs)\n", "colour": "yellow", "author": "tom@organisms.be"}, {"error": "none", "line": "444", "code": "            except Exception:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "445", "code": "                if self.bus:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "446", "code": "                    self.bus.log(\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "447", "code": "                        \"Error in perpetual timer thread function %r.\" %\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "E", "line": "448", "code": "                        self.function, level=40, traceback=True)\n", "colour": "yellow", "author": "tom@organisms.be"}, {"error": "none", "line": "449", "code": "                # Quit on first error to avoid massive logs.\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "450", "code": "                raise\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "451", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "452", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "453", "code": "class BackgroundTask(SetDaemonProperty, threading.Thread):\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "454", "code": "    \"\"\"A subclass of threading.Thread whose run() method repeats.\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "455", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "456", "code": "    Use this class for most repeating tasks. It uses time.sleep() to wait\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "457", "code": "    for each interval, which isn't very responsive; that is, even if you call\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "458", "code": "    self.cancel(), you'll have to wait until the sleep() call finishes before\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "459", "code": "    the thread stops. To compensate, it defaults to being daemonic, which means\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "460", "code": "    it won't delay stopping the whole process.\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "461", "code": "    \"\"\"\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "462", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "R", "line": "463", "code": "    def __init__(self, interval, function, args=[], kwargs={}, bus=None):\n", "colour": "green", "author": "tom@organisms.be"}, {"error": "none", "line": "464", "code": "        threading.Thread.__init__(self)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "465", "code": "        self.interval = interval\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "466", "code": "        self.function = function\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "467", "code": "        self.args = args\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "468", "code": "        self.kwargs = kwargs\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "469", "code": "        self.running = False\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "470", "code": "        self.bus = bus\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "471", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "472", "code": "        # default to daemonic\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "473", "code": "        self.daemon = True\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "474", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "475", "code": "    def cancel(self):\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "476", "code": "        self.running = False\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "477", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "478", "code": "    def run(self):\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "479", "code": "        self.running = True\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "480", "code": "        while self.running:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "481", "code": "            time.sleep(self.interval)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "482", "code": "            if not self.running:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "483", "code": "                return\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "484", "code": "            try:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "485", "code": "                self.function(*self.args, **self.kwargs)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "486", "code": "            except Exception:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "487", "code": "                if self.bus:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "488", "code": "                    self.bus.log(\"Error in background task thread function %r.\"\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "489", "code": "                                 % self.function, level=40, traceback=True)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "490", "code": "                # Quit on first error to avoid massive logs.\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "491", "code": "                raise\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "492", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "493", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "494", "code": "class Monitor(SimplePlugin):\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "495", "code": "    \"\"\"WSPBus listener to periodically run a callback in its own thread.\"\"\"\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "496", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "497", "code": "    callback = None\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "498", "code": "    \"\"\"The function to call at intervals.\"\"\"\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "499", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "500", "code": "    frequency = 60\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "501", "code": "    \"\"\"The time in seconds between callback runs.\"\"\"\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "502", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "503", "code": "    thread = None\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "504", "code": "    \"\"\"A :class:`BackgroundTask<cherrypy.process.plugins.BackgroundTask>` thread.\"\"\"\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "505", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "506", "code": "    def __init__(self, bus, callback, frequency=60, name=None):\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "507", "code": "        SimplePlugin.__init__(self, bus)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "508", "code": "        self.callback = callback\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "509", "code": "        self.frequency = frequency\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "510", "code": "        self.thread = None\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "511", "code": "        self.name = name\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "512", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "513", "code": "    def start(self):\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "514", "code": "        \"\"\"Start our callback in its own background thread.\"\"\"\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "515", "code": "        if self.frequency > 0:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "516", "code": "            threadname = self.name or self.__class__.__name__\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "517", "code": "            if self.thread is None:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "518", "code": "                self.thread = BackgroundTask(self.frequency, self.callback,\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "519", "code": "                                             bus = self.bus)\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "520", "code": "                self.thread.setName(threadname)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "521", "code": "                self.thread.start()\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "522", "code": "                self.bus.log(\"Started monitor thread %r.\" % threadname)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "523", "code": "            else:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "524", "code": "                self.bus.log(\"Monitor thread %r already started.\" % threadname)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "525", "code": "    start.priority = 70\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "526", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "527", "code": "    def stop(self):\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "528", "code": "        \"\"\"Stop our callback's background task thread.\"\"\"\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "529", "code": "        if self.thread is None:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "530", "code": "            self.bus.log(\"No thread running for %s.\" % self.name or self.__class__.__name__)\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "531", "code": "        else:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "532", "code": "            if self.thread is not threading.currentThread():\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "533", "code": "                name = self.thread.getName()\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "534", "code": "                self.thread.cancel()\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "535", "code": "                if not get_daemon(self.thread):\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "536", "code": "                    self.bus.log(\"Joining %r\" % name)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "537", "code": "                    self.thread.join()\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "538", "code": "                self.bus.log(\"Stopped thread %r.\" % name)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "539", "code": "            self.thread = None\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "540", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "541", "code": "    def graceful(self):\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "542", "code": "        \"\"\"Stop the callback's background task thread and restart it.\"\"\"\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "543", "code": "        self.stop()\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "544", "code": "        self.start()\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "545", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "546", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "547", "code": "class Autoreloader(Monitor):\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "548", "code": "    \"\"\"Monitor which re-executes the process when files change.\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "549", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "550", "code": "    This :ref:`plugin<plugins>` restarts the process (via :func:`os.execv`)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "551", "code": "    if any of the files it monitors change (or is deleted). By default, the\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "552", "code": "    autoreloader monitors all imported modules; you can add to the\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "553", "code": "    set by adding to ``autoreload.files``::\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "554", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "555", "code": "        cherrypy.engine.autoreload.files.add(myFile)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "556", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "557", "code": "    If there are imported files you do *not* wish to monitor, you can adjust the\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "558", "code": "    ``match`` attribute, a regular expression. For example, to stop monitoring\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "559", "code": "    cherrypy itself::\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "560", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "561", "code": "        cherrypy.engine.autoreload.match = r'^(?!cherrypy).+'\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "562", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "563", "code": "    Like all :class:`Monitor<cherrypy.process.plugins.Monitor>` plugins,\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "564", "code": "    the autoreload plugin takes a ``frequency`` argument. The default is\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "565", "code": "    1 second; that is, the autoreloader will examine files once each second.\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "566", "code": "    \"\"\"\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "567", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "568", "code": "    files = None\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "569", "code": "    \"\"\"The set of files to poll for modifications.\"\"\"\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "570", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "571", "code": "    frequency = 1\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "572", "code": "    \"\"\"The interval in seconds at which to poll for modified files.\"\"\"\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "573", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "574", "code": "    match = '.*'\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "575", "code": "    \"\"\"A regular expression by which to match filenames.\"\"\"\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "576", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "577", "code": "    def __init__(self, bus, frequency=1, match='.*'):\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "578", "code": "        self.mtimes = {}\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "579", "code": "        self.files = set()\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "580", "code": "        self.match = match\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "581", "code": "        Monitor.__init__(self, bus, self.run, frequency)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "582", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "583", "code": "    def start(self):\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "584", "code": "        \"\"\"Start our own background task thread for self.run.\"\"\"\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "585", "code": "        if self.thread is None:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "586", "code": "            self.mtimes = {}\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "587", "code": "        Monitor.start(self)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "588", "code": "    start.priority = 70\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "589", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "590", "code": "    def sysfiles(self):\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "591", "code": "        \"\"\"Return a Set of sys.modules filenames to monitor.\"\"\"\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "592", "code": "        files = set()\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "593", "code": "        for k, m in sys.modules.items():\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "594", "code": "            if re.match(self.match, k):\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "595", "code": "                if hasattr(m, '__loader__') and hasattr(m.__loader__, 'archive'):\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "C", "line": "596", "code": "                    f = m.__loader__.archive\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "597", "code": "                else:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "598", "code": "                    f = getattr(m, '__file__', None)\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "599", "code": "                    if f is not None and not os.path.isabs(f):\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "600", "code": "                        # ensure absolute paths so a os.chdir() in the app doesn't break me\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "C", "line": "601", "code": "                        f = os.path.normpath(os.path.join(_module__file__base, f))\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "602", "code": "                files.add(f)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "603", "code": "        return files\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "604", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "605", "code": "    def run(self):\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "606", "code": "        \"\"\"Reload the process if registered files have been modified.\"\"\"\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "607", "code": "        for filename in self.sysfiles() | self.files:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "608", "code": "            if filename:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "609", "code": "                if filename.endswith('.pyc'):\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "610", "code": "                    filename = filename[:-1]\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "611", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "612", "code": "                oldtime = self.mtimes.get(filename, 0)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "613", "code": "                if oldtime is None:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "614", "code": "                    # Module with no .py file. Skip it.\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "615", "code": "                    continue\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "616", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "617", "code": "                try:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "618", "code": "                    mtime = os.stat(filename).st_mtime\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "619", "code": "                except OSError:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "620", "code": "                    # Either a module with no .py file, or it's been deleted.\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "621", "code": "                    mtime = None\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "622", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "623", "code": "                if filename not in self.mtimes:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "624", "code": "                    # If a module has no .py file, this will be None.\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "625", "code": "                    self.mtimes[filename] = mtime\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "626", "code": "                else:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "627", "code": "                    if mtime is None or mtime > oldtime:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "628", "code": "                        # The file has been deleted or modified.\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "629", "code": "                        self.bus.log(\"Restarting because %s changed.\" % filename)\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "630", "code": "                        self.thread.cancel()\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "631", "code": "                        self.bus.log(\"Stopped thread %r.\" % self.thread.getName())\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "632", "code": "                        self.bus.restart()\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "633", "code": "                        return\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "634", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "635", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "636", "code": "class ThreadManager(SimplePlugin):\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "637", "code": "    \"\"\"Manager for HTTP request threads.\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "638", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "639", "code": "    If you have control over thread creation and destruction, publish to\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "640", "code": "    the 'acquire_thread' and 'release_thread' channels (for each thread).\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "641", "code": "    This will register/unregister the current thread and publish to\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "642", "code": "    'start_thread' and 'stop_thread' listeners in the bus as needed.\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "643", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "644", "code": "    If threads are created and destroyed by code you do not control\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "645", "code": "    (e.g., Apache), then, at the beginning of every HTTP request,\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "646", "code": "    publish to 'acquire_thread' only. You should not publish to\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "647", "code": "    'release_thread' in this case, since you do not know whether\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "648", "code": "    the thread will be re-used or not. The bus will call\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "649", "code": "    'stop_thread' listeners for you when it stops.\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "650", "code": "    \"\"\"\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "651", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "652", "code": "    threads = None\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "653", "code": "    \"\"\"A map of {thread ident: index number} pairs.\"\"\"\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "654", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "655", "code": "    def __init__(self, bus):\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "656", "code": "        self.threads = {}\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "657", "code": "        SimplePlugin.__init__(self, bus)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "658", "code": "        self.bus.listeners.setdefault('acquire_thread', set())\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "659", "code": "        self.bus.listeners.setdefault('start_thread', set())\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "660", "code": "        self.bus.listeners.setdefault('release_thread', set())\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "661", "code": "        self.bus.listeners.setdefault('stop_thread', set())\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "662", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "663", "code": "    def acquire_thread(self):\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "664", "code": "        \"\"\"Run 'start_thread' listeners for the current thread.\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "665", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "666", "code": "        If the current thread has already been seen, any 'start_thread'\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "667", "code": "        listeners will not be run again.\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "668", "code": "        \"\"\"\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "669", "code": "        thread_ident = get_thread_ident()\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "670", "code": "        if thread_ident not in self.threads:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "671", "code": "            # We can't just use get_ident as the thread ID\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "672", "code": "            # because some platforms reuse thread ID's.\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "673", "code": "            i = len(self.threads) + 1\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "674", "code": "            self.threads[thread_ident] = i\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "675", "code": "            self.bus.publish('start_thread', i)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "676", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "677", "code": "    def release_thread(self):\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "678", "code": "        \"\"\"Release the current thread and run 'stop_thread' listeners.\"\"\"\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "679", "code": "        thread_ident = get_thread_ident()\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "680", "code": "        i = self.threads.pop(thread_ident, None)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "681", "code": "        if i is not None:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "682", "code": "            self.bus.publish('stop_thread', i)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "683", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "684", "code": "    def stop(self):\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "685", "code": "        \"\"\"Release all threads and run all 'stop_thread' listeners.\"\"\"\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "W", "line": "686", "code": "        for thread_ident, i in self.threads.items():\n", "colour": "purple", "author": "tom@organisms.be"}, {"error": "none", "line": "687", "code": "            self.bus.publish('stop_thread', i)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "688", "code": "        self.threads.clear()\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "689", "code": "    graceful = stop\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "690", "code": "\n", "colour": "black", "author": "tom@organisms.be"}]]}