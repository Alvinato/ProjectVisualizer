{"path": "/home/asumal/git/cs410/pattern/pattern/server/cherrypy/cherrypy/process/plugins.py", "lines": [{"index": "1", "colour": "orange", "code": "\"\"\"Site services for use with a Web Site Process Bus.\"\"\"\n", "error": "none", "author": "tom@organisms.be"}, {"index": "2", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "3", "colour": "orange", "code": "import os\n", "error": "none", "author": "tom@organisms.be"}, {"index": "4", "colour": "orange", "code": "import re\n", "error": "none", "author": "tom@organisms.be"}, {"index": "5", "colour": "orange", "code": "import signal as _signal\n", "error": "none", "author": "tom@organisms.be"}, {"index": "6", "colour": "orange", "code": "import sys\n", "error": "none", "author": "tom@organisms.be"}, {"index": "7", "colour": "orange", "code": "import time\n", "error": "none", "author": "tom@organisms.be"}, {"index": "8", "colour": "orange", "code": "import threading\n", "error": "none", "author": "tom@organisms.be"}, {"index": "9", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "10", "colour": "green", "code": "from cherrypy._cpcompat import basestring, get_daemon, get_thread_ident, ntob, set, Timer, SetDaemonProperty\n", "error": "W", "author": "tom@organisms.be"}, {"index": "11", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "12", "colour": "orange", "code": "# _module__file__base is used by Autoreload to make\n", "error": "none", "author": "tom@organisms.be"}, {"index": "13", "colour": "orange", "code": "# absolute any filenames retrieved from sys.modules which are not\n", "error": "none", "author": "tom@organisms.be"}, {"index": "14", "colour": "orange", "code": "# already absolute paths.  This is to work around Python's quirk\n", "error": "none", "author": "tom@organisms.be"}, {"index": "15", "colour": "orange", "code": "# of importing the startup script and using a relative filename\n", "error": "none", "author": "tom@organisms.be"}, {"index": "16", "colour": "orange", "code": "# for it in sys.modules.\n", "error": "none", "author": "tom@organisms.be"}, {"index": "17", "colour": "orange", "code": "#\n", "error": "none", "author": "tom@organisms.be"}, {"index": "18", "colour": "orange", "code": "# Autoreload examines sys.modules afresh every time it runs. If an application\n", "error": "none", "author": "tom@organisms.be"}, {"index": "19", "colour": "orange", "code": "# changes the current directory by executing os.chdir(), then the next time\n", "error": "none", "author": "tom@organisms.be"}, {"index": "20", "colour": "orange", "code": "# Autoreload runs, it will not be able to find any filenames which are\n", "error": "none", "author": "tom@organisms.be"}, {"index": "21", "colour": "orange", "code": "# not absolute paths, because the current directory is not the same as when the\n", "error": "none", "author": "tom@organisms.be"}, {"index": "22", "colour": "orange", "code": "# module was first imported.  Autoreload will then wrongly conclude the file has\n", "error": "none", "author": "tom@organisms.be"}, {"index": "23", "colour": "orange", "code": "# \"changed\", and initiate the shutdown/re-exec sequence.\n", "error": "none", "author": "tom@organisms.be"}, {"index": "24", "colour": "orange", "code": "# See ticket #917.\n", "error": "none", "author": "tom@organisms.be"}, {"index": "25", "colour": "orange", "code": "# For this workaround to have a decent probability of success, this module\n", "error": "none", "author": "tom@organisms.be"}, {"index": "26", "colour": "orange", "code": "# needs to be imported as early as possible, before the app has much chance\n", "error": "none", "author": "tom@organisms.be"}, {"index": "27", "colour": "orange", "code": "# to change the working directory.\n", "error": "none", "author": "tom@organisms.be"}, {"index": "28", "colour": "orange", "code": "_module__file__base = os.getcwd()\n", "error": "none", "author": "tom@organisms.be"}, {"index": "29", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "30", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "31", "colour": "orange", "code": "class SimplePlugin(object):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "32", "colour": "orange", "code": "    \"\"\"Plugin base class which auto-subscribes methods for known channels.\"\"\"\n", "error": "none", "author": "tom@organisms.be"}, {"index": "33", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "34", "colour": "orange", "code": "    bus = None\n", "error": "none", "author": "tom@organisms.be"}, {"index": "35", "colour": "orange", "code": "    \"\"\"A :class:`Bus <cherrypy.process.wspbus.Bus>`, usually cherrypy.engine.\"\"\"\n", "error": "none", "author": "tom@organisms.be"}, {"index": "36", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "37", "colour": "orange", "code": "    def __init__(self, bus):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "38", "colour": "orange", "code": "        self.bus = bus\n", "error": "none", "author": "tom@organisms.be"}, {"index": "39", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "40", "colour": "orange", "code": "    def subscribe(self):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "41", "colour": "orange", "code": "        \"\"\"Register this object as a (multi-channel) listener on the bus.\"\"\"\n", "error": "none", "author": "tom@organisms.be"}, {"index": "42", "colour": "orange", "code": "        for channel in self.bus.listeners:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "43", "colour": "orange", "code": "            # Subscribe self.start, self.exit, etc. if present.\n", "error": "none", "author": "tom@organisms.be"}, {"index": "44", "colour": "orange", "code": "            method = getattr(self, channel, None)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "45", "colour": "orange", "code": "            if method is not None:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "46", "colour": "orange", "code": "                self.bus.subscribe(channel, method)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "47", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "48", "colour": "orange", "code": "    def unsubscribe(self):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "49", "colour": "orange", "code": "        \"\"\"Unregister this object as a listener on the bus.\"\"\"\n", "error": "none", "author": "tom@organisms.be"}, {"index": "50", "colour": "orange", "code": "        for channel in self.bus.listeners:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "51", "colour": "orange", "code": "            # Unsubscribe self.start, self.exit, etc. if present.\n", "error": "none", "author": "tom@organisms.be"}, {"index": "52", "colour": "orange", "code": "            method = getattr(self, channel, None)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "53", "colour": "orange", "code": "            if method is not None:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "54", "colour": "orange", "code": "                self.bus.unsubscribe(channel, method)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "55", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "56", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "57", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "58", "colour": "orange", "code": "class SignalHandler(object):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "59", "colour": "orange", "code": "    \"\"\"Register bus channels (and listeners) for system signals.\n", "error": "none", "author": "tom@organisms.be"}, {"index": "60", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "61", "colour": "orange", "code": "    You can modify what signals your application listens for, and what it does\n", "error": "none", "author": "tom@organisms.be"}, {"index": "62", "colour": "orange", "code": "    when it receives signals, by modifying :attr:`SignalHandler.handlers`,\n", "error": "none", "author": "tom@organisms.be"}, {"index": "63", "colour": "orange", "code": "    a dict of {signal name: callback} pairs. The default set is::\n", "error": "none", "author": "tom@organisms.be"}, {"index": "64", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "65", "colour": "orange", "code": "        handlers = {'SIGTERM': self.bus.exit,\n", "error": "none", "author": "tom@organisms.be"}, {"index": "66", "colour": "orange", "code": "                    'SIGHUP': self.handle_SIGHUP,\n", "error": "none", "author": "tom@organisms.be"}, {"index": "67", "colour": "orange", "code": "                    'SIGUSR1': self.bus.graceful,\n", "error": "none", "author": "tom@organisms.be"}, {"index": "68", "colour": "orange", "code": "                   }\n", "error": "none", "author": "tom@organisms.be"}, {"index": "69", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "70", "colour": "orange", "code": "    The :func:`SignalHandler.handle_SIGHUP`` method calls\n", "error": "none", "author": "tom@organisms.be"}, {"index": "71", "colour": "orange", "code": "    :func:`bus.restart()<cherrypy.process.wspbus.Bus.restart>`\n", "error": "none", "author": "tom@organisms.be"}, {"index": "72", "colour": "orange", "code": "    if the process is daemonized, but\n", "error": "none", "author": "tom@organisms.be"}, {"index": "73", "colour": "orange", "code": "    :func:`bus.exit()<cherrypy.process.wspbus.Bus.exit>`\n", "error": "none", "author": "tom@organisms.be"}, {"index": "74", "colour": "orange", "code": "    if the process is attached to a TTY. This is because Unix window\n", "error": "none", "author": "tom@organisms.be"}, {"index": "75", "colour": "orange", "code": "    managers tend to send SIGHUP to terminal windows when the user closes them.\n", "error": "none", "author": "tom@organisms.be"}, {"index": "76", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "77", "colour": "orange", "code": "    Feel free to add signals which are not available on every platform. The\n", "error": "none", "author": "tom@organisms.be"}, {"index": "78", "colour": "orange", "code": "    :class:`SignalHandler` will ignore errors raised from attempting to register\n", "error": "none", "author": "tom@organisms.be"}, {"index": "79", "colour": "orange", "code": "    handlers for unknown signals.\n", "error": "none", "author": "tom@organisms.be"}, {"index": "80", "colour": "orange", "code": "    \"\"\"\n", "error": "none", "author": "tom@organisms.be"}, {"index": "81", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "82", "colour": "orange", "code": "    handlers = {}\n", "error": "none", "author": "tom@organisms.be"}, {"index": "83", "colour": "orange", "code": "    \"\"\"A map from signal names (e.g. 'SIGTERM') to handlers (e.g. bus.exit).\"\"\"\n", "error": "none", "author": "tom@organisms.be"}, {"index": "84", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "85", "colour": "orange", "code": "    signals = {}\n", "error": "none", "author": "tom@organisms.be"}, {"index": "86", "colour": "orange", "code": "    \"\"\"A map from signal numbers to names.\"\"\"\n", "error": "none", "author": "tom@organisms.be"}, {"index": "87", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "88", "colour": "orange", "code": "    for k, v in vars(_signal).items():\n", "error": "none", "author": "tom@organisms.be"}, {"index": "89", "colour": "orange", "code": "        if k.startswith('SIG') and not k.startswith('SIG_'):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "90", "colour": "orange", "code": "            signals[v] = k\n", "error": "none", "author": "tom@organisms.be"}, {"index": "91", "colour": "green", "code": "    del k, v\n", "error": "W", "author": "tom@organisms.be"}, {"index": "92", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "93", "colour": "orange", "code": "    def __init__(self, bus):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "94", "colour": "orange", "code": "        self.bus = bus\n", "error": "none", "author": "tom@organisms.be"}, {"index": "95", "colour": "orange", "code": "        # Set default handlers\n", "error": "none", "author": "tom@organisms.be"}, {"index": "96", "colour": "orange", "code": "        self.handlers = {'SIGTERM': self.bus.exit,\n", "error": "none", "author": "tom@organisms.be"}, {"index": "97", "colour": "orange", "code": "                         'SIGHUP': self.handle_SIGHUP,\n", "error": "none", "author": "tom@organisms.be"}, {"index": "98", "colour": "orange", "code": "                         'SIGUSR1': self.bus.graceful,\n", "error": "none", "author": "tom@organisms.be"}, {"index": "99", "colour": "orange", "code": "                         }\n", "error": "none", "author": "tom@organisms.be"}, {"index": "100", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "101", "colour": "orange", "code": "        if sys.platform[:4] == 'java':\n", "error": "none", "author": "tom@organisms.be"}, {"index": "102", "colour": "orange", "code": "            del self.handlers['SIGUSR1']\n", "error": "none", "author": "tom@organisms.be"}, {"index": "103", "colour": "orange", "code": "            self.handlers['SIGUSR2'] = self.bus.graceful\n", "error": "none", "author": "tom@organisms.be"}, {"index": "104", "colour": "orange", "code": "            self.bus.log(\"SIGUSR1 cannot be set on the JVM platform. \"\n", "error": "none", "author": "tom@organisms.be"}, {"index": "105", "colour": "orange", "code": "                         \"Using SIGUSR2 instead.\")\n", "error": "none", "author": "tom@organisms.be"}, {"index": "106", "colour": "orange", "code": "            self.handlers['SIGINT'] = self._jython_SIGINT_handler\n", "error": "none", "author": "tom@organisms.be"}, {"index": "107", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "108", "colour": "orange", "code": "        self._previous_handlers = {}\n", "error": "none", "author": "tom@organisms.be"}, {"index": "109", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "110", "colour": "green", "code": "    def _jython_SIGINT_handler(self, signum=None, frame=None):\n", "error": "W", "author": "tom@organisms.be"}, {"index": "111", "colour": "orange", "code": "        # See http://bugs.jython.org/issue1313\n", "error": "none", "author": "tom@organisms.be"}, {"index": "112", "colour": "orange", "code": "        self.bus.log('Keyboard Interrupt: shutting down bus')\n", "error": "none", "author": "tom@organisms.be"}, {"index": "113", "colour": "orange", "code": "        self.bus.exit()\n", "error": "none", "author": "tom@organisms.be"}, {"index": "114", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "115", "colour": "orange", "code": "    def subscribe(self):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "116", "colour": "orange", "code": "        \"\"\"Subscribe self.handlers to signals.\"\"\"\n", "error": "none", "author": "tom@organisms.be"}, {"index": "117", "colour": "orange", "code": "        for sig, func in self.handlers.items():\n", "error": "none", "author": "tom@organisms.be"}, {"index": "118", "colour": "orange", "code": "            try:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "119", "colour": "orange", "code": "                self.set_handler(sig, func)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "120", "colour": "orange", "code": "            except ValueError:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "121", "colour": "orange", "code": "                pass\n", "error": "none", "author": "tom@organisms.be"}, {"index": "122", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "123", "colour": "orange", "code": "    def unsubscribe(self):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "124", "colour": "orange", "code": "        \"\"\"Unsubscribe self.handlers from signals.\"\"\"\n", "error": "none", "author": "tom@organisms.be"}, {"index": "125", "colour": "orange", "code": "        for signum, handler in self._previous_handlers.items():\n", "error": "none", "author": "tom@organisms.be"}, {"index": "126", "colour": "orange", "code": "            signame = self.signals[signum]\n", "error": "none", "author": "tom@organisms.be"}, {"index": "127", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "128", "colour": "orange", "code": "            if handler is None:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "129", "colour": "orange", "code": "                self.bus.log(\"Restoring %s handler to SIG_DFL.\" % signame)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "130", "colour": "orange", "code": "                handler = _signal.SIG_DFL\n", "error": "none", "author": "tom@organisms.be"}, {"index": "131", "colour": "orange", "code": "            else:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "132", "colour": "orange", "code": "                self.bus.log(\"Restoring %s handler %r.\" % (signame, handler))\n", "error": "none", "author": "tom@organisms.be"}, {"index": "133", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "134", "colour": "orange", "code": "            try:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "135", "colour": "orange", "code": "                our_handler = _signal.signal(signum, handler)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "136", "colour": "orange", "code": "                if our_handler is None:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "137", "colour": "orange", "code": "                    self.bus.log(\"Restored old %s handler %r, but our \"\n", "error": "none", "author": "tom@organisms.be"}, {"index": "138", "colour": "orange", "code": "                                 \"handler was not registered.\" %\n", "error": "none", "author": "tom@organisms.be"}, {"index": "139", "colour": "orange", "code": "                                 (signame, handler), level=30)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "140", "colour": "orange", "code": "            except ValueError:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "141", "colour": "orange", "code": "                self.bus.log(\"Unable to restore %s handler %r.\" %\n", "error": "none", "author": "tom@organisms.be"}, {"index": "142", "colour": "orange", "code": "                             (signame, handler), level=40, traceback=True)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "143", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "144", "colour": "orange", "code": "    def set_handler(self, signal, listener=None):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "145", "colour": "orange", "code": "        \"\"\"Subscribe a handler for the given signal (number or name).\n", "error": "none", "author": "tom@organisms.be"}, {"index": "146", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "147", "colour": "orange", "code": "        If the optional 'listener' argument is provided, it will be\n", "error": "none", "author": "tom@organisms.be"}, {"index": "148", "colour": "orange", "code": "        subscribed as a listener for the given signal's channel.\n", "error": "none", "author": "tom@organisms.be"}, {"index": "149", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "150", "colour": "orange", "code": "        If the given signal name or number is not available on the current\n", "error": "none", "author": "tom@organisms.be"}, {"index": "151", "colour": "orange", "code": "        platform, ValueError is raised.\n", "error": "none", "author": "tom@organisms.be"}, {"index": "152", "colour": "orange", "code": "        \"\"\"\n", "error": "none", "author": "tom@organisms.be"}, {"index": "153", "colour": "orange", "code": "        if isinstance(signal, basestring):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "154", "colour": "orange", "code": "            signum = getattr(_signal, signal, None)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "155", "colour": "orange", "code": "            if signum is None:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "156", "colour": "orange", "code": "                raise ValueError(\"No such signal: %r\" % signal)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "157", "colour": "orange", "code": "            signame = signal\n", "error": "none", "author": "tom@organisms.be"}, {"index": "158", "colour": "orange", "code": "        else:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "159", "colour": "orange", "code": "            try:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "160", "colour": "orange", "code": "                signame = self.signals[signal]\n", "error": "none", "author": "tom@organisms.be"}, {"index": "161", "colour": "orange", "code": "            except KeyError:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "162", "colour": "orange", "code": "                raise ValueError(\"No such signal: %r\" % signal)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "163", "colour": "orange", "code": "            signum = signal\n", "error": "none", "author": "tom@organisms.be"}, {"index": "164", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "165", "colour": "orange", "code": "        prev = _signal.signal(signum, self._handle_signal)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "166", "colour": "orange", "code": "        self._previous_handlers[signum] = prev\n", "error": "none", "author": "tom@organisms.be"}, {"index": "167", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "168", "colour": "orange", "code": "        if listener is not None:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "169", "colour": "orange", "code": "            self.bus.log(\"Listening for %s.\" % signame)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "170", "colour": "orange", "code": "            self.bus.subscribe(signame, listener)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "171", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "172", "colour": "green", "code": "    def _handle_signal(self, signum=None, frame=None):\n", "error": "W", "author": "tom@organisms.be"}, {"index": "173", "colour": "orange", "code": "        \"\"\"Python signal handler (self.set_handler subscribes it for you).\"\"\"\n", "error": "none", "author": "tom@organisms.be"}, {"index": "174", "colour": "orange", "code": "        signame = self.signals[signum]\n", "error": "none", "author": "tom@organisms.be"}, {"index": "175", "colour": "orange", "code": "        self.bus.log(\"Caught signal %s.\" % signame)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "176", "colour": "orange", "code": "        self.bus.publish(signame)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "177", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "178", "colour": "orange", "code": "    def handle_SIGHUP(self):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "179", "colour": "orange", "code": "        \"\"\"Restart if daemonized, else exit.\"\"\"\n", "error": "none", "author": "tom@organisms.be"}, {"index": "180", "colour": "orange", "code": "        if os.isatty(sys.stdin.fileno()):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "181", "colour": "orange", "code": "            # not daemonized (may be foreground or background)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "182", "colour": "orange", "code": "            self.bus.log(\"SIGHUP caught but not daemonized. Exiting.\")\n", "error": "none", "author": "tom@organisms.be"}, {"index": "183", "colour": "orange", "code": "            self.bus.exit()\n", "error": "none", "author": "tom@organisms.be"}, {"index": "184", "colour": "orange", "code": "        else:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "185", "colour": "orange", "code": "            self.bus.log(\"SIGHUP caught while daemonized. Restarting.\")\n", "error": "none", "author": "tom@organisms.be"}, {"index": "186", "colour": "orange", "code": "            self.bus.restart()\n", "error": "none", "author": "tom@organisms.be"}, {"index": "187", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "188", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "189", "colour": "orange", "code": "try:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "190", "colour": "orange", "code": "    import pwd, grp\n", "error": "none", "author": "tom@organisms.be"}, {"index": "191", "colour": "orange", "code": "except ImportError:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "192", "colour": "orange", "code": "    pwd, grp = None, None\n", "error": "none", "author": "tom@organisms.be"}, {"index": "193", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "194", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "195", "colour": "orange", "code": "class DropPrivileges(SimplePlugin):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "196", "colour": "orange", "code": "    \"\"\"Drop privileges. uid/gid arguments not available on Windows.\n", "error": "none", "author": "tom@organisms.be"}, {"index": "197", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "198", "colour": "orange", "code": "    Special thanks to Gavin Baker: http://antonym.org/node/100.\n", "error": "none", "author": "tom@organisms.be"}, {"index": "199", "colour": "orange", "code": "    \"\"\"\n", "error": "none", "author": "tom@organisms.be"}, {"index": "200", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "201", "colour": "orange", "code": "    def __init__(self, bus, umask=None, uid=None, gid=None):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "202", "colour": "orange", "code": "        SimplePlugin.__init__(self, bus)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "203", "colour": "orange", "code": "        self.finalized = False\n", "error": "none", "author": "tom@organisms.be"}, {"index": "204", "colour": "orange", "code": "        self.uid = uid\n", "error": "none", "author": "tom@organisms.be"}, {"index": "205", "colour": "orange", "code": "        self.gid = gid\n", "error": "none", "author": "tom@organisms.be"}, {"index": "206", "colour": "orange", "code": "        self.umask = umask\n", "error": "none", "author": "tom@organisms.be"}, {"index": "207", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "208", "colour": "orange", "code": "    def _get_uid(self):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "209", "colour": "orange", "code": "        return self._uid\n", "error": "none", "author": "tom@organisms.be"}, {"index": "210", "colour": "orange", "code": "    def _set_uid(self, val):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "211", "colour": "orange", "code": "        if val is not None:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "212", "colour": "orange", "code": "            if pwd is None:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "213", "colour": "orange", "code": "                self.bus.log(\"pwd module not available; ignoring uid.\",\n", "error": "none", "author": "tom@organisms.be"}, {"index": "214", "colour": "orange", "code": "                             level=30)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "215", "colour": "orange", "code": "                val = None\n", "error": "none", "author": "tom@organisms.be"}, {"index": "216", "colour": "orange", "code": "            elif isinstance(val, basestring):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "217", "colour": "orange", "code": "                val = pwd.getpwnam(val)[2]\n", "error": "none", "author": "tom@organisms.be"}, {"index": "218", "colour": "green", "code": "        self._uid = val\n", "error": "W", "author": "tom@organisms.be"}, {"index": "219", "colour": "orange", "code": "    uid = property(_get_uid, _set_uid,\n", "error": "none", "author": "tom@organisms.be"}, {"index": "220", "colour": "orange", "code": "        doc=\"The uid under which to run. Availability: Unix.\")\n", "error": "none", "author": "tom@organisms.be"}, {"index": "221", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "222", "colour": "orange", "code": "    def _get_gid(self):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "223", "colour": "orange", "code": "        return self._gid\n", "error": "none", "author": "tom@organisms.be"}, {"index": "224", "colour": "orange", "code": "    def _set_gid(self, val):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "225", "colour": "orange", "code": "        if val is not None:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "226", "colour": "orange", "code": "            if grp is None:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "227", "colour": "orange", "code": "                self.bus.log(\"grp module not available; ignoring gid.\",\n", "error": "none", "author": "tom@organisms.be"}, {"index": "228", "colour": "orange", "code": "                             level=30)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "229", "colour": "orange", "code": "                val = None\n", "error": "none", "author": "tom@organisms.be"}, {"index": "230", "colour": "orange", "code": "            elif isinstance(val, basestring):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "231", "colour": "orange", "code": "                val = grp.getgrnam(val)[2]\n", "error": "none", "author": "tom@organisms.be"}, {"index": "232", "colour": "green", "code": "        self._gid = val\n", "error": "W", "author": "tom@organisms.be"}, {"index": "233", "colour": "orange", "code": "    gid = property(_get_gid, _set_gid,\n", "error": "none", "author": "tom@organisms.be"}, {"index": "234", "colour": "orange", "code": "        doc=\"The gid under which to run. Availability: Unix.\")\n", "error": "none", "author": "tom@organisms.be"}, {"index": "235", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "236", "colour": "orange", "code": "    def _get_umask(self):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "237", "colour": "orange", "code": "        return self._umask\n", "error": "none", "author": "tom@organisms.be"}, {"index": "238", "colour": "orange", "code": "    def _set_umask(self, val):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "239", "colour": "orange", "code": "        if val is not None:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "240", "colour": "orange", "code": "            try:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "241", "colour": "orange", "code": "                os.umask\n", "error": "none", "author": "tom@organisms.be"}, {"index": "242", "colour": "orange", "code": "            except AttributeError:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "243", "colour": "orange", "code": "                self.bus.log(\"umask function not available; ignoring umask.\",\n", "error": "none", "author": "tom@organisms.be"}, {"index": "244", "colour": "orange", "code": "                             level=30)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "245", "colour": "orange", "code": "                val = None\n", "error": "none", "author": "tom@organisms.be"}, {"index": "246", "colour": "green", "code": "        self._umask = val\n", "error": "W", "author": "tom@organisms.be"}, {"index": "247", "colour": "orange", "code": "    umask = property(_get_umask, _set_umask,\n", "error": "none", "author": "tom@organisms.be"}, {"index": "248", "colour": "orange", "code": "        doc=\"\"\"The default permission mode for newly created files and directories.\n", "error": "none", "author": "tom@organisms.be"}, {"index": "249", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "250", "colour": "orange", "code": "        Usually expressed in octal format, for example, ``0644``.\n", "error": "none", "author": "tom@organisms.be"}, {"index": "251", "colour": "orange", "code": "        Availability: Unix, Windows.\n", "error": "none", "author": "tom@organisms.be"}, {"index": "252", "colour": "orange", "code": "        \"\"\")\n", "error": "none", "author": "tom@organisms.be"}, {"index": "253", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "254", "colour": "blue", "code": "    def start(self):\n", "error": "R", "author": "tom@organisms.be"}, {"index": "255", "colour": "orange", "code": "        # uid/gid\n", "error": "none", "author": "tom@organisms.be"}, {"index": "256", "colour": "orange", "code": "        def current_ids():\n", "error": "none", "author": "tom@organisms.be"}, {"index": "257", "colour": "orange", "code": "            \"\"\"Return the current (uid, gid) if available.\"\"\"\n", "error": "none", "author": "tom@organisms.be"}, {"index": "258", "colour": "orange", "code": "            name, group = None, None\n", "error": "none", "author": "tom@organisms.be"}, {"index": "259", "colour": "orange", "code": "            if pwd:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "260", "colour": "orange", "code": "                name = pwd.getpwuid(os.getuid())[0]\n", "error": "none", "author": "tom@organisms.be"}, {"index": "261", "colour": "orange", "code": "            if grp:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "262", "colour": "orange", "code": "                group = grp.getgrgid(os.getgid())[0]\n", "error": "none", "author": "tom@organisms.be"}, {"index": "263", "colour": "orange", "code": "            return name, group\n", "error": "none", "author": "tom@organisms.be"}, {"index": "264", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "265", "colour": "orange", "code": "        if self.finalized:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "266", "colour": "orange", "code": "            if not (self.uid is None and self.gid is None):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "267", "colour": "orange", "code": "                self.bus.log('Already running as uid: %r gid: %r' %\n", "error": "none", "author": "tom@organisms.be"}, {"index": "268", "colour": "orange", "code": "                             current_ids())\n", "error": "none", "author": "tom@organisms.be"}, {"index": "269", "colour": "orange", "code": "        else:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "270", "colour": "orange", "code": "            if self.uid is None and self.gid is None:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "271", "colour": "orange", "code": "                if pwd or grp:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "272", "colour": "orange", "code": "                    self.bus.log('uid/gid not set', level=30)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "273", "colour": "orange", "code": "            else:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "274", "colour": "orange", "code": "                self.bus.log('Started as uid: %r gid: %r' % current_ids())\n", "error": "none", "author": "tom@organisms.be"}, {"index": "275", "colour": "orange", "code": "                if self.gid is not None:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "276", "colour": "orange", "code": "                    os.setgid(self.gid)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "277", "colour": "orange", "code": "                    os.setgroups([])\n", "error": "none", "author": "tom@organisms.be"}, {"index": "278", "colour": "orange", "code": "                if self.uid is not None:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "279", "colour": "orange", "code": "                    os.setuid(self.uid)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "280", "colour": "orange", "code": "                self.bus.log('Running as uid: %r gid: %r' % current_ids())\n", "error": "none", "author": "tom@organisms.be"}, {"index": "281", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "282", "colour": "orange", "code": "        # umask\n", "error": "none", "author": "tom@organisms.be"}, {"index": "283", "colour": "orange", "code": "        if self.finalized:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "284", "colour": "orange", "code": "            if self.umask is not None:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "285", "colour": "orange", "code": "                self.bus.log('umask already set to: %03o' % self.umask)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "286", "colour": "orange", "code": "        else:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "287", "colour": "orange", "code": "            if self.umask is None:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "288", "colour": "orange", "code": "                self.bus.log('umask not set', level=30)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "289", "colour": "orange", "code": "            else:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "290", "colour": "orange", "code": "                old_umask = os.umask(self.umask)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "291", "colour": "orange", "code": "                self.bus.log('umask old: %03o, new: %03o' %\n", "error": "none", "author": "tom@organisms.be"}, {"index": "292", "colour": "orange", "code": "                             (old_umask, self.umask))\n", "error": "none", "author": "tom@organisms.be"}, {"index": "293", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "294", "colour": "orange", "code": "        self.finalized = True\n", "error": "none", "author": "tom@organisms.be"}, {"index": "295", "colour": "orange", "code": "    # This is slightly higher than the priority for server.start\n", "error": "none", "author": "tom@organisms.be"}, {"index": "296", "colour": "orange", "code": "    # in order to facilitate the most common use: starting on a low\n", "error": "none", "author": "tom@organisms.be"}, {"index": "297", "colour": "orange", "code": "    # port (which requires root) and then dropping to another user.\n", "error": "none", "author": "tom@organisms.be"}, {"index": "298", "colour": "orange", "code": "    start.priority = 77\n", "error": "none", "author": "tom@organisms.be"}, {"index": "299", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "300", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "301", "colour": "orange", "code": "class Daemonizer(SimplePlugin):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "302", "colour": "orange", "code": "    \"\"\"Daemonize the running script.\n", "error": "none", "author": "tom@organisms.be"}, {"index": "303", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "304", "colour": "orange", "code": "    Use this with a Web Site Process Bus via::\n", "error": "none", "author": "tom@organisms.be"}, {"index": "305", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "306", "colour": "orange", "code": "        Daemonizer(bus).subscribe()\n", "error": "none", "author": "tom@organisms.be"}, {"index": "307", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "308", "colour": "orange", "code": "    When this component finishes, the process is completely decoupled from\n", "error": "none", "author": "tom@organisms.be"}, {"index": "309", "colour": "orange", "code": "    the parent environment. Please note that when this component is used,\n", "error": "none", "author": "tom@organisms.be"}, {"index": "310", "colour": "orange", "code": "    the return code from the parent process will still be 0 if a startup\n", "error": "none", "author": "tom@organisms.be"}, {"index": "311", "colour": "orange", "code": "    error occurs in the forked children. Errors in the initial daemonizing\n", "error": "none", "author": "tom@organisms.be"}, {"index": "312", "colour": "orange", "code": "    process still return proper exit codes. Therefore, if you use this\n", "error": "none", "author": "tom@organisms.be"}, {"index": "313", "colour": "orange", "code": "    plugin to daemonize, don't use the return code as an accurate indicator\n", "error": "none", "author": "tom@organisms.be"}, {"index": "314", "colour": "orange", "code": "    of whether the process fully started. In fact, that return code only\n", "error": "none", "author": "tom@organisms.be"}, {"index": "315", "colour": "orange", "code": "    indicates if the process succesfully finished the first fork.\n", "error": "none", "author": "tom@organisms.be"}, {"index": "316", "colour": "orange", "code": "    \"\"\"\n", "error": "none", "author": "tom@organisms.be"}, {"index": "317", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "318", "colour": "orange", "code": "    def __init__(self, bus, stdin='/dev/null', stdout='/dev/null',\n", "error": "none", "author": "tom@organisms.be"}, {"index": "319", "colour": "orange", "code": "                 stderr='/dev/null'):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "320", "colour": "orange", "code": "        SimplePlugin.__init__(self, bus)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "321", "colour": "orange", "code": "        self.stdin = stdin\n", "error": "none", "author": "tom@organisms.be"}, {"index": "322", "colour": "orange", "code": "        self.stdout = stdout\n", "error": "none", "author": "tom@organisms.be"}, {"index": "323", "colour": "orange", "code": "        self.stderr = stderr\n", "error": "none", "author": "tom@organisms.be"}, {"index": "324", "colour": "orange", "code": "        self.finalized = False\n", "error": "none", "author": "tom@organisms.be"}, {"index": "325", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "326", "colour": "orange", "code": "    def start(self):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "327", "colour": "orange", "code": "        if self.finalized:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "328", "colour": "orange", "code": "            self.bus.log('Already deamonized.')\n", "error": "none", "author": "tom@organisms.be"}, {"index": "329", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "330", "colour": "orange", "code": "        # forking has issues with threads:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "331", "colour": "orange", "code": "        # http://www.opengroup.org/onlinepubs/000095399/functions/fork.html\n", "error": "none", "author": "tom@organisms.be"}, {"index": "332", "colour": "orange", "code": "        # \"The general problem with making fork() work in a multi-threaded\n", "error": "none", "author": "tom@organisms.be"}, {"index": "333", "colour": "orange", "code": "        #  world is what to do with all of the threads...\"\n", "error": "none", "author": "tom@organisms.be"}, {"index": "334", "colour": "orange", "code": "        # So we check for active threads:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "335", "colour": "orange", "code": "        if threading.activeCount() != 1:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "336", "colour": "orange", "code": "            self.bus.log('There are %r active threads. '\n", "error": "none", "author": "tom@organisms.be"}, {"index": "337", "colour": "orange", "code": "                         'Daemonizing now may cause strange failures.' %\n", "error": "none", "author": "tom@organisms.be"}, {"index": "338", "colour": "orange", "code": "                         threading.enumerate(), level=30)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "339", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "340", "colour": "orange", "code": "        # See http://www.erlenstar.demon.co.uk/unix/faq_2.html#SEC16\n", "error": "none", "author": "tom@organisms.be"}, {"index": "341", "colour": "orange", "code": "        # (or http://www.faqs.org/faqs/unix-faq/programmer/faq/ section 1.7)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "342", "colour": "orange", "code": "        # and http://aspn.activestate.com/ASPN/Cookbook/Python/Recipe/66012\n", "error": "none", "author": "tom@organisms.be"}, {"index": "343", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "344", "colour": "orange", "code": "        # Finish up with the current stdout/stderr\n", "error": "none", "author": "tom@organisms.be"}, {"index": "345", "colour": "orange", "code": "        sys.stdout.flush()\n", "error": "none", "author": "tom@organisms.be"}, {"index": "346", "colour": "orange", "code": "        sys.stderr.flush()\n", "error": "none", "author": "tom@organisms.be"}, {"index": "347", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "348", "colour": "orange", "code": "        # Do first fork.\n", "error": "none", "author": "tom@organisms.be"}, {"index": "349", "colour": "orange", "code": "        try:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "350", "colour": "orange", "code": "            pid = os.fork()\n", "error": "none", "author": "tom@organisms.be"}, {"index": "351", "colour": "orange", "code": "            if pid == 0:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "352", "colour": "orange", "code": "                # This is the child process. Continue.\n", "error": "none", "author": "tom@organisms.be"}, {"index": "353", "colour": "orange", "code": "                pass\n", "error": "none", "author": "tom@organisms.be"}, {"index": "354", "colour": "orange", "code": "            else:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "355", "colour": "orange", "code": "                # This is the first parent. Exit, now that we've forked.\n", "error": "none", "author": "tom@organisms.be"}, {"index": "356", "colour": "orange", "code": "                self.bus.log('Forking once.')\n", "error": "none", "author": "tom@organisms.be"}, {"index": "357", "colour": "green", "code": "                os._exit(0)\n", "error": "W", "author": "tom@organisms.be"}, {"index": "358", "colour": "orange", "code": "        except OSError:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "359", "colour": "orange", "code": "            # Python raises OSError rather than returning negative numbers.\n", "error": "none", "author": "tom@organisms.be"}, {"index": "360", "colour": "orange", "code": "            exc = sys.exc_info()[1]\n", "error": "none", "author": "tom@organisms.be"}, {"index": "361", "colour": "orange", "code": "            sys.exit(\"%s: fork #1 failed: (%d) %s\\n\"\n", "error": "none", "author": "tom@organisms.be"}, {"index": "362", "colour": "orange", "code": "                     % (sys.argv[0], exc.errno, exc.strerror))\n", "error": "none", "author": "tom@organisms.be"}, {"index": "363", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "364", "colour": "orange", "code": "        os.setsid()\n", "error": "none", "author": "tom@organisms.be"}, {"index": "365", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "366", "colour": "orange", "code": "        # Do second fork\n", "error": "none", "author": "tom@organisms.be"}, {"index": "367", "colour": "orange", "code": "        try:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "368", "colour": "orange", "code": "            pid = os.fork()\n", "error": "none", "author": "tom@organisms.be"}, {"index": "369", "colour": "orange", "code": "            if pid > 0:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "370", "colour": "orange", "code": "                self.bus.log('Forking twice.')\n", "error": "none", "author": "tom@organisms.be"}, {"index": "371", "colour": "green", "code": "                os._exit(0) # Exit second parent\n", "error": "W", "author": "tom@organisms.be"}, {"index": "372", "colour": "orange", "code": "        except OSError:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "373", "colour": "orange", "code": "            exc = sys.exc_info()[1]\n", "error": "none", "author": "tom@organisms.be"}, {"index": "374", "colour": "orange", "code": "            sys.exit(\"%s: fork #2 failed: (%d) %s\\n\"\n", "error": "none", "author": "tom@organisms.be"}, {"index": "375", "colour": "orange", "code": "                     % (sys.argv[0], exc.errno, exc.strerror))\n", "error": "none", "author": "tom@organisms.be"}, {"index": "376", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "377", "colour": "orange", "code": "        os.chdir(\"/\")\n", "error": "none", "author": "tom@organisms.be"}, {"index": "378", "colour": "orange", "code": "        os.umask(0)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "379", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "380", "colour": "orange", "code": "        si = open(self.stdin, \"r\")\n", "error": "none", "author": "tom@organisms.be"}, {"index": "381", "colour": "orange", "code": "        so = open(self.stdout, \"a+\")\n", "error": "none", "author": "tom@organisms.be"}, {"index": "382", "colour": "orange", "code": "        se = open(self.stderr, \"a+\")\n", "error": "none", "author": "tom@organisms.be"}, {"index": "383", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "384", "colour": "orange", "code": "        # os.dup2(fd, fd2) will close fd2 if necessary,\n", "error": "none", "author": "tom@organisms.be"}, {"index": "385", "colour": "orange", "code": "        # so we don't explicitly close stdin/out/err.\n", "error": "none", "author": "tom@organisms.be"}, {"index": "386", "colour": "orange", "code": "        # See http://docs.python.org/lib/os-fd-ops.html\n", "error": "none", "author": "tom@organisms.be"}, {"index": "387", "colour": "orange", "code": "        os.dup2(si.fileno(), sys.stdin.fileno())\n", "error": "none", "author": "tom@organisms.be"}, {"index": "388", "colour": "orange", "code": "        os.dup2(so.fileno(), sys.stdout.fileno())\n", "error": "none", "author": "tom@organisms.be"}, {"index": "389", "colour": "orange", "code": "        os.dup2(se.fileno(), sys.stderr.fileno())\n", "error": "none", "author": "tom@organisms.be"}, {"index": "390", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "391", "colour": "orange", "code": "        self.bus.log('Daemonized to PID: %s' % os.getpid())\n", "error": "none", "author": "tom@organisms.be"}, {"index": "392", "colour": "orange", "code": "        self.finalized = True\n", "error": "none", "author": "tom@organisms.be"}, {"index": "393", "colour": "orange", "code": "    start.priority = 65\n", "error": "none", "author": "tom@organisms.be"}, {"index": "394", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "395", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "396", "colour": "orange", "code": "class PIDFile(SimplePlugin):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "397", "colour": "orange", "code": "    \"\"\"Maintain a PID file via a WSPBus.\"\"\"\n", "error": "none", "author": "tom@organisms.be"}, {"index": "398", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "399", "colour": "orange", "code": "    def __init__(self, bus, pidfile):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "400", "colour": "orange", "code": "        SimplePlugin.__init__(self, bus)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "401", "colour": "orange", "code": "        self.pidfile = pidfile\n", "error": "none", "author": "tom@organisms.be"}, {"index": "402", "colour": "orange", "code": "        self.finalized = False\n", "error": "none", "author": "tom@organisms.be"}, {"index": "403", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "404", "colour": "orange", "code": "    def start(self):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "405", "colour": "orange", "code": "        pid = os.getpid()\n", "error": "none", "author": "tom@organisms.be"}, {"index": "406", "colour": "orange", "code": "        if self.finalized:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "407", "colour": "orange", "code": "            self.bus.log('PID %r already written to %r.' % (pid, self.pidfile))\n", "error": "none", "author": "tom@organisms.be"}, {"index": "408", "colour": "orange", "code": "        else:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "409", "colour": "orange", "code": "            open(self.pidfile, \"wb\").write(ntob(\"%s\" % pid, 'utf8'))\n", "error": "none", "author": "tom@organisms.be"}, {"index": "410", "colour": "orange", "code": "            self.bus.log('PID %r written to %r.' % (pid, self.pidfile))\n", "error": "none", "author": "tom@organisms.be"}, {"index": "411", "colour": "orange", "code": "            self.finalized = True\n", "error": "none", "author": "tom@organisms.be"}, {"index": "412", "colour": "orange", "code": "    start.priority = 70\n", "error": "none", "author": "tom@organisms.be"}, {"index": "413", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "414", "colour": "orange", "code": "    def exit(self):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "415", "colour": "orange", "code": "        try:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "416", "colour": "orange", "code": "            os.remove(self.pidfile)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "417", "colour": "orange", "code": "            self.bus.log('PID file removed: %r.' % self.pidfile)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "418", "colour": "orange", "code": "        except (KeyboardInterrupt, SystemExit):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "419", "colour": "orange", "code": "            raise\n", "error": "none", "author": "tom@organisms.be"}, {"index": "420", "colour": "green", "code": "        except:\n", "error": "W", "author": "tom@organisms.be"}, {"index": "421", "colour": "orange", "code": "            pass\n", "error": "none", "author": "tom@organisms.be"}, {"index": "422", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "423", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "424", "colour": "blue", "code": "class PerpetualTimer(Timer):\n", "error": "R", "author": "tom@organisms.be"}, {"index": "425", "colour": "orange", "code": "    \"\"\"A responsive subclass of threading.Timer whose run() method repeats.\n", "error": "none", "author": "tom@organisms.be"}, {"index": "426", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "427", "colour": "orange", "code": "    Use this timer only when you really need a very interruptible timer;\n", "error": "none", "author": "tom@organisms.be"}, {"index": "428", "colour": "orange", "code": "    this checks its 'finished' condition up to 20 times a second, which can\n", "error": "none", "author": "tom@organisms.be"}, {"index": "429", "colour": "orange", "code": "    results in pretty high CPU usage\n", "error": "none", "author": "tom@organisms.be"}, {"index": "430", "colour": "orange", "code": "    \"\"\"\n", "error": "none", "author": "tom@organisms.be"}, {"index": "431", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "432", "colour": "red", "code": "    def __init__(self, *args, **kwargs):\n", "error": "E", "author": "tom@organisms.be"}, {"index": "433", "colour": "orange", "code": "        \"Override parent constructor to allow 'bus' to be provided.\"\n", "error": "none", "author": "tom@organisms.be"}, {"index": "434", "colour": "orange", "code": "        self.bus = kwargs.pop('bus', None)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "435", "colour": "orange", "code": "        super(PerpetualTimer, self).__init__(*args, **kwargs)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "436", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "437", "colour": "orange", "code": "    def run(self):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "438", "colour": "orange", "code": "        while True:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "439", "colour": "red", "code": "            self.finished.wait(self.interval)\n", "error": "E", "author": "tom@organisms.be"}, {"index": "440", "colour": "red", "code": "            if self.finished.isSet():\n", "error": "E", "author": "tom@organisms.be"}, {"index": "441", "colour": "orange", "code": "                return\n", "error": "none", "author": "tom@organisms.be"}, {"index": "442", "colour": "orange", "code": "            try:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "443", "colour": "red", "code": "                self.function(*self.args, **self.kwargs)\n", "error": "E", "author": "tom@organisms.be"}, {"index": "444", "colour": "orange", "code": "            except Exception:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "445", "colour": "orange", "code": "                if self.bus:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "446", "colour": "orange", "code": "                    self.bus.log(\n", "error": "none", "author": "tom@organisms.be"}, {"index": "447", "colour": "orange", "code": "                        \"Error in perpetual timer thread function %r.\" %\n", "error": "none", "author": "tom@organisms.be"}, {"index": "448", "colour": "red", "code": "                        self.function, level=40, traceback=True)\n", "error": "E", "author": "tom@organisms.be"}, {"index": "449", "colour": "orange", "code": "                # Quit on first error to avoid massive logs.\n", "error": "none", "author": "tom@organisms.be"}, {"index": "450", "colour": "orange", "code": "                raise\n", "error": "none", "author": "tom@organisms.be"}, {"index": "451", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "452", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "453", "colour": "orange", "code": "class BackgroundTask(SetDaemonProperty, threading.Thread):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "454", "colour": "orange", "code": "    \"\"\"A subclass of threading.Thread whose run() method repeats.\n", "error": "none", "author": "tom@organisms.be"}, {"index": "455", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "456", "colour": "orange", "code": "    Use this class for most repeating tasks. It uses time.sleep() to wait\n", "error": "none", "author": "tom@organisms.be"}, {"index": "457", "colour": "orange", "code": "    for each interval, which isn't very responsive; that is, even if you call\n", "error": "none", "author": "tom@organisms.be"}, {"index": "458", "colour": "orange", "code": "    self.cancel(), you'll have to wait until the sleep() call finishes before\n", "error": "none", "author": "tom@organisms.be"}, {"index": "459", "colour": "orange", "code": "    the thread stops. To compensate, it defaults to being daemonic, which means\n", "error": "none", "author": "tom@organisms.be"}, {"index": "460", "colour": "orange", "code": "    it won't delay stopping the whole process.\n", "error": "none", "author": "tom@organisms.be"}, {"index": "461", "colour": "orange", "code": "    \"\"\"\n", "error": "none", "author": "tom@organisms.be"}, {"index": "462", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "463", "colour": "blue", "code": "    def __init__(self, interval, function, args=[], kwargs={}, bus=None):\n", "error": "R", "author": "tom@organisms.be"}, {"index": "464", "colour": "orange", "code": "        threading.Thread.__init__(self)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "465", "colour": "orange", "code": "        self.interval = interval\n", "error": "none", "author": "tom@organisms.be"}, {"index": "466", "colour": "orange", "code": "        self.function = function\n", "error": "none", "author": "tom@organisms.be"}, {"index": "467", "colour": "orange", "code": "        self.args = args\n", "error": "none", "author": "tom@organisms.be"}, {"index": "468", "colour": "orange", "code": "        self.kwargs = kwargs\n", "error": "none", "author": "tom@organisms.be"}, {"index": "469", "colour": "orange", "code": "        self.running = False\n", "error": "none", "author": "tom@organisms.be"}, {"index": "470", "colour": "orange", "code": "        self.bus = bus\n", "error": "none", "author": "tom@organisms.be"}, {"index": "471", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "472", "colour": "orange", "code": "        # default to daemonic\n", "error": "none", "author": "tom@organisms.be"}, {"index": "473", "colour": "orange", "code": "        self.daemon = True\n", "error": "none", "author": "tom@organisms.be"}, {"index": "474", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "475", "colour": "orange", "code": "    def cancel(self):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "476", "colour": "orange", "code": "        self.running = False\n", "error": "none", "author": "tom@organisms.be"}, {"index": "477", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "478", "colour": "orange", "code": "    def run(self):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "479", "colour": "orange", "code": "        self.running = True\n", "error": "none", "author": "tom@organisms.be"}, {"index": "480", "colour": "orange", "code": "        while self.running:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "481", "colour": "orange", "code": "            time.sleep(self.interval)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "482", "colour": "orange", "code": "            if not self.running:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "483", "colour": "orange", "code": "                return\n", "error": "none", "author": "tom@organisms.be"}, {"index": "484", "colour": "orange", "code": "            try:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "485", "colour": "orange", "code": "                self.function(*self.args, **self.kwargs)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "486", "colour": "orange", "code": "            except Exception:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "487", "colour": "orange", "code": "                if self.bus:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "488", "colour": "orange", "code": "                    self.bus.log(\"Error in background task thread function %r.\"\n", "error": "none", "author": "tom@organisms.be"}, {"index": "489", "colour": "orange", "code": "                                 % self.function, level=40, traceback=True)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "490", "colour": "orange", "code": "                # Quit on first error to avoid massive logs.\n", "error": "none", "author": "tom@organisms.be"}, {"index": "491", "colour": "orange", "code": "                raise\n", "error": "none", "author": "tom@organisms.be"}, {"index": "492", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "493", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "494", "colour": "orange", "code": "class Monitor(SimplePlugin):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "495", "colour": "orange", "code": "    \"\"\"WSPBus listener to periodically run a callback in its own thread.\"\"\"\n", "error": "none", "author": "tom@organisms.be"}, {"index": "496", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "497", "colour": "orange", "code": "    callback = None\n", "error": "none", "author": "tom@organisms.be"}, {"index": "498", "colour": "orange", "code": "    \"\"\"The function to call at intervals.\"\"\"\n", "error": "none", "author": "tom@organisms.be"}, {"index": "499", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "500", "colour": "orange", "code": "    frequency = 60\n", "error": "none", "author": "tom@organisms.be"}, {"index": "501", "colour": "orange", "code": "    \"\"\"The time in seconds between callback runs.\"\"\"\n", "error": "none", "author": "tom@organisms.be"}, {"index": "502", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "503", "colour": "orange", "code": "    thread = None\n", "error": "none", "author": "tom@organisms.be"}, {"index": "504", "colour": "orange", "code": "    \"\"\"A :class:`BackgroundTask<cherrypy.process.plugins.BackgroundTask>` thread.\"\"\"\n", "error": "none", "author": "tom@organisms.be"}, {"index": "505", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "506", "colour": "orange", "code": "    def __init__(self, bus, callback, frequency=60, name=None):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "507", "colour": "orange", "code": "        SimplePlugin.__init__(self, bus)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "508", "colour": "orange", "code": "        self.callback = callback\n", "error": "none", "author": "tom@organisms.be"}, {"index": "509", "colour": "orange", "code": "        self.frequency = frequency\n", "error": "none", "author": "tom@organisms.be"}, {"index": "510", "colour": "orange", "code": "        self.thread = None\n", "error": "none", "author": "tom@organisms.be"}, {"index": "511", "colour": "orange", "code": "        self.name = name\n", "error": "none", "author": "tom@organisms.be"}, {"index": "512", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "513", "colour": "orange", "code": "    def start(self):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "514", "colour": "orange", "code": "        \"\"\"Start our callback in its own background thread.\"\"\"\n", "error": "none", "author": "tom@organisms.be"}, {"index": "515", "colour": "orange", "code": "        if self.frequency > 0:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "516", "colour": "orange", "code": "            threadname = self.name or self.__class__.__name__\n", "error": "none", "author": "tom@organisms.be"}, {"index": "517", "colour": "orange", "code": "            if self.thread is None:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "518", "colour": "orange", "code": "                self.thread = BackgroundTask(self.frequency, self.callback,\n", "error": "none", "author": "tom@organisms.be"}, {"index": "519", "colour": "orange", "code": "                                             bus = self.bus)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "520", "colour": "orange", "code": "                self.thread.setName(threadname)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "521", "colour": "orange", "code": "                self.thread.start()\n", "error": "none", "author": "tom@organisms.be"}, {"index": "522", "colour": "orange", "code": "                self.bus.log(\"Started monitor thread %r.\" % threadname)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "523", "colour": "orange", "code": "            else:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "524", "colour": "orange", "code": "                self.bus.log(\"Monitor thread %r already started.\" % threadname)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "525", "colour": "orange", "code": "    start.priority = 70\n", "error": "none", "author": "tom@organisms.be"}, {"index": "526", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "527", "colour": "orange", "code": "    def stop(self):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "528", "colour": "orange", "code": "        \"\"\"Stop our callback's background task thread.\"\"\"\n", "error": "none", "author": "tom@organisms.be"}, {"index": "529", "colour": "orange", "code": "        if self.thread is None:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "530", "colour": "orange", "code": "            self.bus.log(\"No thread running for %s.\" % self.name or self.__class__.__name__)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "531", "colour": "orange", "code": "        else:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "532", "colour": "orange", "code": "            if self.thread is not threading.currentThread():\n", "error": "none", "author": "tom@organisms.be"}, {"index": "533", "colour": "orange", "code": "                name = self.thread.getName()\n", "error": "none", "author": "tom@organisms.be"}, {"index": "534", "colour": "orange", "code": "                self.thread.cancel()\n", "error": "none", "author": "tom@organisms.be"}, {"index": "535", "colour": "orange", "code": "                if not get_daemon(self.thread):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "536", "colour": "orange", "code": "                    self.bus.log(\"Joining %r\" % name)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "537", "colour": "orange", "code": "                    self.thread.join()\n", "error": "none", "author": "tom@organisms.be"}, {"index": "538", "colour": "orange", "code": "                self.bus.log(\"Stopped thread %r.\" % name)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "539", "colour": "orange", "code": "            self.thread = None\n", "error": "none", "author": "tom@organisms.be"}, {"index": "540", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "541", "colour": "orange", "code": "    def graceful(self):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "542", "colour": "orange", "code": "        \"\"\"Stop the callback's background task thread and restart it.\"\"\"\n", "error": "none", "author": "tom@organisms.be"}, {"index": "543", "colour": "orange", "code": "        self.stop()\n", "error": "none", "author": "tom@organisms.be"}, {"index": "544", "colour": "orange", "code": "        self.start()\n", "error": "none", "author": "tom@organisms.be"}, {"index": "545", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "546", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "547", "colour": "orange", "code": "class Autoreloader(Monitor):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "548", "colour": "orange", "code": "    \"\"\"Monitor which re-executes the process when files change.\n", "error": "none", "author": "tom@organisms.be"}, {"index": "549", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "550", "colour": "orange", "code": "    This :ref:`plugin<plugins>` restarts the process (via :func:`os.execv`)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "551", "colour": "orange", "code": "    if any of the files it monitors change (or is deleted). By default, the\n", "error": "none", "author": "tom@organisms.be"}, {"index": "552", "colour": "orange", "code": "    autoreloader monitors all imported modules; you can add to the\n", "error": "none", "author": "tom@organisms.be"}, {"index": "553", "colour": "orange", "code": "    set by adding to ``autoreload.files``::\n", "error": "none", "author": "tom@organisms.be"}, {"index": "554", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "555", "colour": "orange", "code": "        cherrypy.engine.autoreload.files.add(myFile)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "556", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "557", "colour": "orange", "code": "    If there are imported files you do *not* wish to monitor, you can adjust the\n", "error": "none", "author": "tom@organisms.be"}, {"index": "558", "colour": "orange", "code": "    ``match`` attribute, a regular expression. For example, to stop monitoring\n", "error": "none", "author": "tom@organisms.be"}, {"index": "559", "colour": "orange", "code": "    cherrypy itself::\n", "error": "none", "author": "tom@organisms.be"}, {"index": "560", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "561", "colour": "orange", "code": "        cherrypy.engine.autoreload.match = r'^(?!cherrypy).+'\n", "error": "none", "author": "tom@organisms.be"}, {"index": "562", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "563", "colour": "orange", "code": "    Like all :class:`Monitor<cherrypy.process.plugins.Monitor>` plugins,\n", "error": "none", "author": "tom@organisms.be"}, {"index": "564", "colour": "orange", "code": "    the autoreload plugin takes a ``frequency`` argument. The default is\n", "error": "none", "author": "tom@organisms.be"}, {"index": "565", "colour": "orange", "code": "    1 second; that is, the autoreloader will examine files once each second.\n", "error": "none", "author": "tom@organisms.be"}, {"index": "566", "colour": "orange", "code": "    \"\"\"\n", "error": "none", "author": "tom@organisms.be"}, {"index": "567", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "568", "colour": "orange", "code": "    files = None\n", "error": "none", "author": "tom@organisms.be"}, {"index": "569", "colour": "orange", "code": "    \"\"\"The set of files to poll for modifications.\"\"\"\n", "error": "none", "author": "tom@organisms.be"}, {"index": "570", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "571", "colour": "orange", "code": "    frequency = 1\n", "error": "none", "author": "tom@organisms.be"}, {"index": "572", "colour": "orange", "code": "    \"\"\"The interval in seconds at which to poll for modified files.\"\"\"\n", "error": "none", "author": "tom@organisms.be"}, {"index": "573", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "574", "colour": "orange", "code": "    match = '.*'\n", "error": "none", "author": "tom@organisms.be"}, {"index": "575", "colour": "orange", "code": "    \"\"\"A regular expression by which to match filenames.\"\"\"\n", "error": "none", "author": "tom@organisms.be"}, {"index": "576", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "577", "colour": "orange", "code": "    def __init__(self, bus, frequency=1, match='.*'):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "578", "colour": "orange", "code": "        self.mtimes = {}\n", "error": "none", "author": "tom@organisms.be"}, {"index": "579", "colour": "orange", "code": "        self.files = set()\n", "error": "none", "author": "tom@organisms.be"}, {"index": "580", "colour": "orange", "code": "        self.match = match\n", "error": "none", "author": "tom@organisms.be"}, {"index": "581", "colour": "orange", "code": "        Monitor.__init__(self, bus, self.run, frequency)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "582", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "583", "colour": "orange", "code": "    def start(self):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "584", "colour": "orange", "code": "        \"\"\"Start our own background task thread for self.run.\"\"\"\n", "error": "none", "author": "tom@organisms.be"}, {"index": "585", "colour": "orange", "code": "        if self.thread is None:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "586", "colour": "orange", "code": "            self.mtimes = {}\n", "error": "none", "author": "tom@organisms.be"}, {"index": "587", "colour": "orange", "code": "        Monitor.start(self)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "588", "colour": "orange", "code": "    start.priority = 70\n", "error": "none", "author": "tom@organisms.be"}, {"index": "589", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "590", "colour": "orange", "code": "    def sysfiles(self):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "591", "colour": "orange", "code": "        \"\"\"Return a Set of sys.modules filenames to monitor.\"\"\"\n", "error": "none", "author": "tom@organisms.be"}, {"index": "592", "colour": "orange", "code": "        files = set()\n", "error": "none", "author": "tom@organisms.be"}, {"index": "593", "colour": "orange", "code": "        for k, m in sys.modules.items():\n", "error": "none", "author": "tom@organisms.be"}, {"index": "594", "colour": "orange", "code": "            if re.match(self.match, k):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "595", "colour": "orange", "code": "                if hasattr(m, '__loader__') and hasattr(m.__loader__, 'archive'):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "596", "colour": "orange", "code": "                    f = m.__loader__.archive\n", "error": "none", "author": "tom@organisms.be"}, {"index": "597", "colour": "orange", "code": "                else:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "598", "colour": "orange", "code": "                    f = getattr(m, '__file__', None)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "599", "colour": "orange", "code": "                    if f is not None and not os.path.isabs(f):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "600", "colour": "orange", "code": "                        # ensure absolute paths so a os.chdir() in the app doesn't break me\n", "error": "none", "author": "tom@organisms.be"}, {"index": "601", "colour": "orange", "code": "                        f = os.path.normpath(os.path.join(_module__file__base, f))\n", "error": "none", "author": "tom@organisms.be"}, {"index": "602", "colour": "orange", "code": "                files.add(f)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "603", "colour": "orange", "code": "        return files\n", "error": "none", "author": "tom@organisms.be"}, {"index": "604", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "605", "colour": "orange", "code": "    def run(self):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "606", "colour": "orange", "code": "        \"\"\"Reload the process if registered files have been modified.\"\"\"\n", "error": "none", "author": "tom@organisms.be"}, {"index": "607", "colour": "orange", "code": "        for filename in self.sysfiles() | self.files:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "608", "colour": "orange", "code": "            if filename:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "609", "colour": "orange", "code": "                if filename.endswith('.pyc'):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "610", "colour": "orange", "code": "                    filename = filename[:-1]\n", "error": "none", "author": "tom@organisms.be"}, {"index": "611", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "612", "colour": "orange", "code": "                oldtime = self.mtimes.get(filename, 0)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "613", "colour": "orange", "code": "                if oldtime is None:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "614", "colour": "orange", "code": "                    # Module with no .py file. Skip it.\n", "error": "none", "author": "tom@organisms.be"}, {"index": "615", "colour": "orange", "code": "                    continue\n", "error": "none", "author": "tom@organisms.be"}, {"index": "616", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "617", "colour": "orange", "code": "                try:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "618", "colour": "orange", "code": "                    mtime = os.stat(filename).st_mtime\n", "error": "none", "author": "tom@organisms.be"}, {"index": "619", "colour": "orange", "code": "                except OSError:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "620", "colour": "orange", "code": "                    # Either a module with no .py file, or it's been deleted.\n", "error": "none", "author": "tom@organisms.be"}, {"index": "621", "colour": "orange", "code": "                    mtime = None\n", "error": "none", "author": "tom@organisms.be"}, {"index": "622", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "623", "colour": "orange", "code": "                if filename not in self.mtimes:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "624", "colour": "orange", "code": "                    # If a module has no .py file, this will be None.\n", "error": "none", "author": "tom@organisms.be"}, {"index": "625", "colour": "orange", "code": "                    self.mtimes[filename] = mtime\n", "error": "none", "author": "tom@organisms.be"}, {"index": "626", "colour": "orange", "code": "                else:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "627", "colour": "orange", "code": "                    if mtime is None or mtime > oldtime:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "628", "colour": "orange", "code": "                        # The file has been deleted or modified.\n", "error": "none", "author": "tom@organisms.be"}, {"index": "629", "colour": "orange", "code": "                        self.bus.log(\"Restarting because %s changed.\" % filename)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "630", "colour": "orange", "code": "                        self.thread.cancel()\n", "error": "none", "author": "tom@organisms.be"}, {"index": "631", "colour": "orange", "code": "                        self.bus.log(\"Stopped thread %r.\" % self.thread.getName())\n", "error": "none", "author": "tom@organisms.be"}, {"index": "632", "colour": "orange", "code": "                        self.bus.restart()\n", "error": "none", "author": "tom@organisms.be"}, {"index": "633", "colour": "orange", "code": "                        return\n", "error": "none", "author": "tom@organisms.be"}, {"index": "634", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "635", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "636", "colour": "orange", "code": "class ThreadManager(SimplePlugin):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "637", "colour": "orange", "code": "    \"\"\"Manager for HTTP request threads.\n", "error": "none", "author": "tom@organisms.be"}, {"index": "638", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "639", "colour": "orange", "code": "    If you have control over thread creation and destruction, publish to\n", "error": "none", "author": "tom@organisms.be"}, {"index": "640", "colour": "orange", "code": "    the 'acquire_thread' and 'release_thread' channels (for each thread).\n", "error": "none", "author": "tom@organisms.be"}, {"index": "641", "colour": "orange", "code": "    This will register/unregister the current thread and publish to\n", "error": "none", "author": "tom@organisms.be"}, {"index": "642", "colour": "orange", "code": "    'start_thread' and 'stop_thread' listeners in the bus as needed.\n", "error": "none", "author": "tom@organisms.be"}, {"index": "643", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "644", "colour": "orange", "code": "    If threads are created and destroyed by code you do not control\n", "error": "none", "author": "tom@organisms.be"}, {"index": "645", "colour": "orange", "code": "    (e.g., Apache), then, at the beginning of every HTTP request,\n", "error": "none", "author": "tom@organisms.be"}, {"index": "646", "colour": "orange", "code": "    publish to 'acquire_thread' only. You should not publish to\n", "error": "none", "author": "tom@organisms.be"}, {"index": "647", "colour": "orange", "code": "    'release_thread' in this case, since you do not know whether\n", "error": "none", "author": "tom@organisms.be"}, {"index": "648", "colour": "orange", "code": "    the thread will be re-used or not. The bus will call\n", "error": "none", "author": "tom@organisms.be"}, {"index": "649", "colour": "orange", "code": "    'stop_thread' listeners for you when it stops.\n", "error": "none", "author": "tom@organisms.be"}, {"index": "650", "colour": "orange", "code": "    \"\"\"\n", "error": "none", "author": "tom@organisms.be"}, {"index": "651", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "652", "colour": "orange", "code": "    threads = None\n", "error": "none", "author": "tom@organisms.be"}, {"index": "653", "colour": "orange", "code": "    \"\"\"A map of {thread ident: index number} pairs.\"\"\"\n", "error": "none", "author": "tom@organisms.be"}, {"index": "654", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "655", "colour": "orange", "code": "    def __init__(self, bus):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "656", "colour": "orange", "code": "        self.threads = {}\n", "error": "none", "author": "tom@organisms.be"}, {"index": "657", "colour": "orange", "code": "        SimplePlugin.__init__(self, bus)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "658", "colour": "orange", "code": "        self.bus.listeners.setdefault('acquire_thread', set())\n", "error": "none", "author": "tom@organisms.be"}, {"index": "659", "colour": "orange", "code": "        self.bus.listeners.setdefault('start_thread', set())\n", "error": "none", "author": "tom@organisms.be"}, {"index": "660", "colour": "orange", "code": "        self.bus.listeners.setdefault('release_thread', set())\n", "error": "none", "author": "tom@organisms.be"}, {"index": "661", "colour": "orange", "code": "        self.bus.listeners.setdefault('stop_thread', set())\n", "error": "none", "author": "tom@organisms.be"}, {"index": "662", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "663", "colour": "orange", "code": "    def acquire_thread(self):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "664", "colour": "orange", "code": "        \"\"\"Run 'start_thread' listeners for the current thread.\n", "error": "none", "author": "tom@organisms.be"}, {"index": "665", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "666", "colour": "orange", "code": "        If the current thread has already been seen, any 'start_thread'\n", "error": "none", "author": "tom@organisms.be"}, {"index": "667", "colour": "orange", "code": "        listeners will not be run again.\n", "error": "none", "author": "tom@organisms.be"}, {"index": "668", "colour": "orange", "code": "        \"\"\"\n", "error": "none", "author": "tom@organisms.be"}, {"index": "669", "colour": "orange", "code": "        thread_ident = get_thread_ident()\n", "error": "none", "author": "tom@organisms.be"}, {"index": "670", "colour": "orange", "code": "        if thread_ident not in self.threads:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "671", "colour": "orange", "code": "            # We can't just use get_ident as the thread ID\n", "error": "none", "author": "tom@organisms.be"}, {"index": "672", "colour": "orange", "code": "            # because some platforms reuse thread ID's.\n", "error": "none", "author": "tom@organisms.be"}, {"index": "673", "colour": "orange", "code": "            i = len(self.threads) + 1\n", "error": "none", "author": "tom@organisms.be"}, {"index": "674", "colour": "orange", "code": "            self.threads[thread_ident] = i\n", "error": "none", "author": "tom@organisms.be"}, {"index": "675", "colour": "orange", "code": "            self.bus.publish('start_thread', i)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "676", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "677", "colour": "orange", "code": "    def release_thread(self):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "678", "colour": "orange", "code": "        \"\"\"Release the current thread and run 'stop_thread' listeners.\"\"\"\n", "error": "none", "author": "tom@organisms.be"}, {"index": "679", "colour": "orange", "code": "        thread_ident = get_thread_ident()\n", "error": "none", "author": "tom@organisms.be"}, {"index": "680", "colour": "orange", "code": "        i = self.threads.pop(thread_ident, None)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "681", "colour": "orange", "code": "        if i is not None:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "682", "colour": "orange", "code": "            self.bus.publish('stop_thread', i)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "683", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "684", "colour": "orange", "code": "    def stop(self):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "685", "colour": "orange", "code": "        \"\"\"Release all threads and run all 'stop_thread' listeners.\"\"\"\n", "error": "none", "author": "tom@organisms.be"}, {"index": "686", "colour": "green", "code": "        for thread_ident, i in self.threads.items():\n", "error": "W", "author": "tom@organisms.be"}, {"index": "687", "colour": "orange", "code": "            self.bus.publish('stop_thread', i)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "688", "colour": "orange", "code": "        self.threads.clear()\n", "error": "none", "author": "tom@organisms.be"}, {"index": "689", "colour": "orange", "code": "    graceful = stop\n", "error": "none", "author": "tom@organisms.be"}, {"index": "690", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}]}