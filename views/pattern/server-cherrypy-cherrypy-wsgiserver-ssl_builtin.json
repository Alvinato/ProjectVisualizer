{"path": "/home/asumal/git/cs410/pattern/pattern/server/cherrypy/cherrypy/wsgiserver/ssl_builtin.py", "lines": [[{"error": "none", "line": "1", "code": "\"\"\"A library for integrating Python's builtin ``ssl`` library with CherryPy.\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "2", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "3", "code": "The ssl module must be importable for SSL functionality.\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "4", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "5", "code": "To use this module, set ``CherryPyWSGIServer.ssl_adapter`` to an instance of\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "6", "code": "``BuiltinSSLAdapter``.\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "7", "code": "\"\"\"\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "8", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "9", "code": "try:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "10", "code": "    import ssl\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "11", "code": "except ImportError:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "12", "code": "    ssl = None\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "13", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "14", "code": "try:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "15", "code": "    from _pyio import DEFAULT_BUFFER_SIZE\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "16", "code": "except ImportError:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "17", "code": "    try:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "18", "code": "        from io import DEFAULT_BUFFER_SIZE\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "19", "code": "    except ImportError:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "20", "code": "        DEFAULT_BUFFER_SIZE = -1\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "21", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "22", "code": "import sys\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "23", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "24", "code": "from cherrypy import wsgiserver\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "25", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "26", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "27", "code": "class BuiltinSSLAdapter(wsgiserver.SSLAdapter):\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "28", "code": "    \"\"\"A wrapper for integrating Python's builtin ssl module with CherryPy.\"\"\"\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "29", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "30", "code": "    certificate = None\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "31", "code": "    \"\"\"The filename of the server SSL certificate.\"\"\"\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "32", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "33", "code": "    private_key = None\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "34", "code": "    \"\"\"The filename of the server's private key file.\"\"\"\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "35", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "W", "line": "36", "code": "    def __init__(self, certificate, private_key, certificate_chain=None):\n", "colour": "purple", "author": "tom@organisms.be"}, {"error": "none", "line": "37", "code": "        if ssl is None:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "38", "code": "            raise ImportError(\"You must install the ssl module to use HTTPS.\")\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "39", "code": "        self.certificate = certificate\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "40", "code": "        self.private_key = private_key\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "41", "code": "        self.certificate_chain = certificate_chain\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "42", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "R", "line": "43", "code": "    def bind(self, sock):\n", "colour": "green", "author": "tom@organisms.be"}, {"error": "none", "line": "44", "code": "        \"\"\"Wrap and return the given socket.\"\"\"\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "45", "code": "        return sock\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "46", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "47", "code": "    def wrap(self, sock):\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "48", "code": "        \"\"\"Wrap and return the given socket, plus WSGI environ entries.\"\"\"\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "49", "code": "        try:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "50", "code": "            s = ssl.wrap_socket(sock, do_handshake_on_connect=True,\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "C", "line": "51", "code": "                    server_side=True, certfile=self.certificate,\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "C", "line": "52", "code": "                    keyfile=self.private_key, ssl_version=ssl.PROTOCOL_SSLv23)\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "53", "code": "        except ssl.SSLError:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "54", "code": "            e = sys.exc_info()[1]\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "55", "code": "            if e.errno == ssl.SSL_ERROR_EOF:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "56", "code": "                # This is almost certainly due to the cherrypy engine\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "57", "code": "                # 'pinging' the socket to assert it's connectable;\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "58", "code": "                # the 'ping' isn't SSL.\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "59", "code": "                return None, {}\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "60", "code": "            elif e.errno == ssl.SSL_ERROR_SSL:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "61", "code": "                if e.args[1].endswith('http request'):\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "62", "code": "                    # The client is speaking HTTP to an HTTPS server.\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "63", "code": "                    raise wsgiserver.NoSSLError\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "64", "code": "                elif e.args[1].endswith('unknown protocol'):\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "65", "code": "                    # The client is speaking some non-HTTP protocol.\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "66", "code": "                    # Drop the conn.\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "67", "code": "                    return None, {}\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "68", "code": "            raise\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "69", "code": "        return s, self.get_environ(s)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "70", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "W", "line": "71", "code": "    # TODO: fill this out more with mod ssl env\n", "colour": "purple", "author": "tom@organisms.be"}, {"error": "R", "line": "72", "code": "    def get_environ(self, sock):\n", "colour": "green", "author": "tom@organisms.be"}, {"error": "none", "line": "73", "code": "        \"\"\"Create WSGI environ entries to be merged into each request.\"\"\"\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "74", "code": "        cipher = sock.cipher()\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "75", "code": "        ssl_environ = {\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "76", "code": "            \"wsgi.url_scheme\": \"https\",\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "77", "code": "            \"HTTPS\": \"on\",\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "78", "code": "            'SSL_PROTOCOL': cipher[1],\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "79", "code": "            'SSL_CIPHER': cipher[0]\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "80", "code": "##            SSL_VERSION_INTERFACE \tstring \tThe mod_ssl program version\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "81", "code": "##            SSL_VERSION_LIBRARY \tstring \tThe OpenSSL program version\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "82", "code": "            }\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "83", "code": "        return ssl_environ\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "84", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "85", "code": "    if sys.version_info >= (3, 0):\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "86", "code": "        def makefile(self, sock, mode='r', bufsize=DEFAULT_BUFFER_SIZE):\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "E", "line": "87", "code": "            return wsgiserver.CP_makefile(sock, mode, bufsize)\n", "colour": "yellow", "author": "tom@organisms.be"}, {"error": "none", "line": "88", "code": "    else:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "89", "code": "        def makefile(self, sock, mode='r', bufsize=DEFAULT_BUFFER_SIZE):\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "90", "code": "            return wsgiserver.CP_fileobject(sock, mode, bufsize)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "91", "code": "\n", "colour": "black", "author": "tom@organisms.be"}]]}