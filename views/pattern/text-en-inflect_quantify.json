{"path": "/home/asumal/git/cs410/pattern/pattern/text/en/inflect_quantify.py", "lines": [[{"error": "C", "line": "1", "code": "#### PATTERN | EN | QUANTIFY #######################################################################\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "2", "code": "# Copyright (c) 2010 University of Antwerp, Belgium\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "3", "code": "# Author: Tom De Smedt <tom@organisms.be>\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "4", "code": "# License: BSD (see LICENSE.txt for details).\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "5", "code": "\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "C", "line": "6", "code": "####################################################################################################\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "C", "line": "7", "code": "# Transforms numeral strings to numbers, and numbers (int, float) to numeral strings.\n", "colour": "blue", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "8", "code": "# Approximates quantities of objects (\"dozens of chickens\" etc.)\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "9", "code": "\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "10", "code": "import os\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "11", "code": "import sys\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "12", "code": "import re\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "13", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "14", "code": "from math import log, ceil\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "15", "code": "\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "16", "code": "try:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "17", "code": "    MODULE = os.path.dirname(os.path.realpath(__file__))\n", "colour": "black", "author": "tom@alice-2.local"}, {"error": "W", "line": "18", "code": "except:\n", "colour": "purple", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "19", "code": "    MODULE = \"\"\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "20", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "21", "code": "if sys.version > \"3\":\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "22", "code": "    long = int\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "23", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "24", "code": "sys.path.insert(0, os.path.join(MODULE, \"..\", \"..\", \"..\", \"..\"))\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "25", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "26", "code": "from pattern.text.en.inflect import pluralize, referenced\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "27", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "28", "code": "sys.path.pop(0)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "29", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "30", "code": "####################################################################################################\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "31", "code": "\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "32", "code": "NUMERALS = {\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "C", "line": "33", "code": "    \"zero\"  :  0,    \"ten\"       : 10,    \"twenty\"  : 20,\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "C", "line": "34", "code": "    \"one\"   :  1,    \"eleven\"    : 11,    \"thirty\"  : 30,\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "C", "line": "35", "code": "    \"two\"   :  2,    \"twelve\"    : 12,    \"forty\"   : 40,\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "C", "line": "36", "code": "    \"three\" :  3,    \"thirteen\"  : 13,    \"fifty\"   : 50,\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "C", "line": "37", "code": "    \"four\"  :  4,    \"fourteen\"  : 14,    \"sixty\"   : 60,\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "C", "line": "38", "code": "    \"five\"  :  5,    \"fifteen\"   : 15,    \"seventy\" : 70,\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "C", "line": "39", "code": "    \"six\"   :  6,    \"sixteen\"   : 16,    \"eighty\"  : 80,\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "C", "line": "40", "code": "    \"seven\" :  7,    \"seventeen\" : 17,    \"ninety\"  : 90,\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "C", "line": "41", "code": "    \"eight\" :  8,    \"eighteen\"  : 18,\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "C", "line": "42", "code": "    \"nine\"  :  9,    \"nineteen\"  : 19\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "43", "code": "}\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "44", "code": "\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "45", "code": "NUMERALS_INVERSE = dict((i, w) for w, i in NUMERALS.items()) # 0 => \"zero\"\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "46", "code": "NUMERALS_VERBOSE = {\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "47", "code": "    \"half\"  : ( 1, 0.5),\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "48", "code": "    \"dozen\" : (12, 0.0),\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "49", "code": "    \"score\" : (20, 0.0)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "50", "code": "}\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "51", "code": "\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "C", "line": "52", "code": "ORDER  = [\"hundred\", \"thousand\"] + [m+\"illion\" for m in (\"m\", \"b\", \"tr\", \n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "C", "line": "53", "code": "    \"quadr\", \n", "colour": "blue", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "C", "line": "54", "code": "    \"quint\", \n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "C", "line": "55", "code": "    \"sext\", \n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "C", "line": "56", "code": "    \"sept\", \n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "C", "line": "57", "code": "    \"oct\", \n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "C", "line": "58", "code": "    \"non\", \n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "C", "line": "59", "code": "    \"dec\", \n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "C", "line": "60", "code": "    \"undec\", \n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "C", "line": "61", "code": "    \"duodec\", \n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "C", "line": "62", "code": "    \"tredec\", \n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "C", "line": "63", "code": "    \"quattuordec\", \n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "C", "line": "64", "code": "    \"quindec\", \n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "C", "line": "65", "code": "    \"sexdec\", \n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "C", "line": "66", "code": "    \"septemdec\", \n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "C", "line": "67", "code": "    \"octodec\", \n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "C", "line": "68", "code": "    \"novemdec\", \n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "C", "line": "69", "code": "    \"vigint\"\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "C", "line": "70", "code": ")]\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "71", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "72", "code": "# {\"hundred\": 100, \"thousand\": 1000, ...}\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "73", "code": "O = {\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "74", "code": "    ORDER[0]: 100, \n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "75", "code": "    ORDER[1]: 1000\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "76", "code": "}\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "77", "code": "for i, k in enumerate(ORDER[2:]): \n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "78", "code": "    O[k] = 1000000 * 1000 ** i\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "79", "code": "\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "80", "code": "ZERO, MINUS, RADIX, THOUSANDS, CONJUNCTION = \\\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "81", "code": "    \"zero\", \"minus\", \"point\", \",\", \"and\"\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "82", "code": "\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "C", "line": "83", "code": "def zshift(s):\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "C", "line": "84", "code": "    \"\"\" Returns a (string, count)-tuple, with leading zeros strippped from the string and counted.\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "85", "code": "    \"\"\"\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "86", "code": "    s = s.lstrip()\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "W", "line": "87", "code": "    i = 0\n", "colour": "purple", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "88", "code": "    while s.startswith((ZERO, \"0\")):\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "89", "code": "        s = re.sub(r\"^(0|%s)\\s*\" % ZERO, \"\", s, 1)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "90", "code": "        i = i + 1\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "91", "code": "    return s, i\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "92", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "93", "code": "#print zshift(\"zero one\")  # (\"one\", 1)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "94", "code": "#print zshift(\"0 0 seven\") # (\"seven\", 2)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "95", "code": "\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "C", "line": "96", "code": "#--- STRING TO NUMBER ------------------------------------------------------------------------------\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "97", "code": "\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "C", "line": "98", "code": "def number(s):\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "99", "code": "    \"\"\" Returns the given numeric string as a float or an int.\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "100", "code": "        If no number can be parsed from the string, returns 0.\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "101", "code": "        For example:\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "102", "code": "        number(\"five point two million\") => 5200000\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "103", "code": "        number(\"seventy-five point two\") => 75.2\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "104", "code": "        number(\"three thousand and one\") => 3001\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "105", "code": "    \"\"\"\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "106", "code": "    s = s.strip()\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "107", "code": "    s = s.lower()\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "108", "code": "    # Negative number.\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "109", "code": "    if s.startswith(MINUS):\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "110", "code": "        return -number(s.replace(MINUS, \"\", 1))\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "111", "code": "    # Strip commas and dashes (\"seventy-five\").\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "112", "code": "    # Split into integral and fractional part.\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "113", "code": "    s = s.replace(\"&\", \" %s \" % CONJUNCTION)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "114", "code": "    s = s.replace(THOUSANDS, \"\")\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "115", "code": "    s = s.replace(\"-\", \" \")\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "116", "code": "    s = s.split(RADIX)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "117", "code": "    # Process fractional part.\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "118", "code": "    # Extract all the leading zeros.\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "119", "code": "    if len(s) > 1:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "120", "code": "        f = \" \".join(s[1:])      # zero point zero twelve => zero twelve\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "C", "line": "121", "code": "        f, z = zshift(f)              # zero twelve => (1, \"twelve\")\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "C", "line": "122", "code": "        f = float(number(f))          # \"twelve\" => 12.0\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "C", "line": "123", "code": "        f /= 10**(len(str(int(f)))+z) # 10**(len(\"12\")+1) = 1000; 12.0 / 1000 => 0.012\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "124", "code": "    else:\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "C", "line": "125", "code": "        f = 0\n", "colour": "blue", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "C", "line": "126", "code": "    i = n = 0\n", "colour": "blue", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "127", "code": "    s = s[0].split()\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "128", "code": "    for j, x in enumerate(s):\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "129", "code": "        if x in NUMERALS:\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "130", "code": "            # Map words from the dictionary of numerals: \"eleven\" => 11.\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "131", "code": "            i += NUMERALS[x]\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "132", "code": "        elif x in NUMERALS_VERBOSE:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "133", "code": "            # Map words from alternate numerals: \"two dozen\" => 2 * 12\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "134", "code": "            i = i * NUMERALS_VERBOSE[x][0] + NUMERALS_VERBOSE[x][1]\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "135", "code": "        elif x in O: \n", "colour": "blue", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "136", "code": "            # Map thousands from the dictionary of orders.\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "C", "line": "137", "code": "            # When a thousand is encountered, the subtotal is shifted to the total\n", "colour": "blue", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "138", "code": "            # and we start a new subtotal. An exception to this is when we\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "C", "line": "139", "code": "            # encouter two following thousands (e.g. two million vigintillion is one subtotal).\n", "colour": "blue", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "140", "code": "            i *= O[x]\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "C", "line": "141", "code": "            if j < len(s)-1 and s[j+1] in O: \n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "142", "code": "                continue\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "C", "line": "143", "code": "            if O[x] > 100: \n", "colour": "blue", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "C", "line": "144", "code": "                n += i\n", "colour": "blue", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "145", "code": "                i = 0\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "146", "code": "        elif x == CONJUNCTION:\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "147", "code": "            pass\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "148", "code": "        else:\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "C", "line": "149", "code": "            # Words that are not in any dicionary may be numbers (e.g. \"2.5\" => 2.5).\n", "colour": "blue", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "C", "line": "150", "code": "            try: i += \".\" in x and float(x) or int(x)\n", "colour": "blue", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "W", "line": "151", "code": "            except:\n", "colour": "purple", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "152", "code": "                pass\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "153", "code": "    return n + i + f\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "154", "code": "\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "155", "code": "#print number(\"five point two septillion\")\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "156", "code": "#print number(\"seventy-five point two\")\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "157", "code": "#print number(\"three thousand and one\")\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "158", "code": "#print number(\"1.2 million point two\")\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "159", "code": "#print number(\"nothing\")\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "160", "code": "\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "C", "line": "161", "code": "#--- NUMBER TO STRING ------------------------------------------------------------------------------\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "162", "code": "\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "R", "line": "163", "code": "def numerals(n, round=2):\n", "colour": "green", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "164", "code": "    \"\"\" Returns the given int or float as a string of numerals.\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "165", "code": "        By default, the fractional part is rounded to two decimals.\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "166", "code": "        For example:\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "167", "code": "        numerals(4011) => four thousand and eleven\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "168", "code": "        numerals(2.25) => two point twenty-five\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "169", "code": "        numerals(2.249) => two point twenty-five\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "170", "code": "        numerals(2.249, round=3) => two point two hundred and forty-nine\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "171", "code": "    \"\"\"\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "172", "code": "    if isinstance(n, basestring):\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "173", "code": "        if n.isdigit():\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "174", "code": "            n = int(n)\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "175", "code": "        else:\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "C", "line": "176", "code": "            # If the float is given as a string, extract the length of the fractional part.\n", "colour": "blue", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "177", "code": "            if round is None:\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "178", "code": "                round = len(n.split(\".\")[1])\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "179", "code": "            n = float(n)\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "180", "code": "    # For negative numbers, simply prepend minus.\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "181", "code": "    if n < 0:\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "182", "code": "        return \"%s %s\" % (MINUS, numerals(abs(n)))\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "183", "code": "    # Split the number into integral and fractional part.\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "C", "line": "184", "code": "    # Converting the integral part to a long ensures a better accuracy during the recursion.\n", "colour": "blue", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "W", "line": "185", "code": "    i = long(n//1)\n", "colour": "purple", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "C", "line": "186", "code": "    f = n-i\n", "colour": "blue", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "187", "code": "    # The remainder, which we will stringify in recursion.\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "C", "line": "188", "code": "    r = 0\n", "colour": "blue", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "189", "code": "    if i in NUMERALS_INVERSE: # 11 => eleven\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "190", "code": "        # Map numbers from the dictionary to numerals: 11 => \"eleven\".\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "C", "line": "191", "code": "        s = NUMERALS_INVERSE[i]\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "192", "code": "    elif i < 100:\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "193", "code": "        # Map tens + digits: 75 => 70+5 => \"seventy-five\".\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "C", "line": "194", "code": "        s = numerals((i//10)*10) + \"-\" + numerals(i%10)\n", "colour": "blue", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "195", "code": "    elif i < 1000:\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "196", "code": "        # Map hundreds: 500 => 5*100 => \"five hundred\".\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "197", "code": "        # Store the remainders (tens + digits).\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "C", "line": "198", "code": "        s = numerals(i//100) + \" \" + ORDER[0]\n", "colour": "blue", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "C", "line": "199", "code": "        r = i % 100\n", "colour": "blue", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "200", "code": "    else:\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "201", "code": "        # Map thousands by extracting the order (thousand/million/billion/...).\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "202", "code": "        # Store and recurse the remainder.\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "C", "line": "203", "code": "        s = \"\"\n", "colour": "blue", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "C", "line": "204", "code": "        o, base = 1, 1000\n", "colour": "blue", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "205", "code": "        while i > base:\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "C", "line": "206", "code": "            o+=1; base*=1000\n", "colour": "blue", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "207", "code": "        while o > len(ORDER)-1:\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "C", "line": "208", "code": "            s += \" \"+ORDER[-1] # This occurs for consecutive thousands: million vigintillion.\n", "colour": "blue", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "C", "line": "209", "code": "            o -= len(ORDER)-1\n", "colour": "blue", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "C", "line": "210", "code": "        s = \"%s %s%s\" % (numerals(i//(base/1000)), (o>1 and ORDER[o-1] or \"\"), s)\n", "colour": "blue", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "C", "line": "211", "code": "        r = i % (base/1000)\n", "colour": "blue", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "C", "line": "212", "code": "    if f != 0: \n", "colour": "blue", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "213", "code": "        # Map the fractional part: \"two point twenty-five\" => 2.25.\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "214", "code": "        # We cast it to a string first to find all the leading zeros.\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "215", "code": "        # This actually seems more accurate than calculating the leading zeros,\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "216", "code": "        # see also: http://python.org/doc/2.5.1/tut/node16.html.\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "217", "code": "        # Some rounding occurs.\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "C", "line": "218", "code": "        f = (\"%.\" + str(round is None and 2 or round) + \"f\") % f\n", "colour": "blue", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "C", "line": "219", "code": "        f = f.replace(\"0.\",\"\",1).rstrip(\"0\")\n", "colour": "blue", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "C", "line": "220", "code": "        f, z = zshift(f)\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "C", "line": "221", "code": "        f = f and \" %s%s %s\" % (RADIX, \" %s\"%ZERO*z, numerals(long(f))) or \"\"\n", "colour": "blue", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "222", "code": "    else:\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "C", "line": "223", "code": "        f = \"\"\n", "colour": "blue", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "224", "code": "    if r == 0:\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "225", "code": "        return s+f\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "C", "line": "226", "code": "    elif r >= 1000: \n", "colour": "blue", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "C", "line": "227", "code": "        # Separate hundreds and thousands with a comma: two million, three hundred thousand.\n", "colour": "blue", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "228", "code": "        return \"%s%s %s\" % (s, THOUSANDS, numerals(r)+f)\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "C", "line": "229", "code": "    elif r <= 100:  \n", "colour": "blue", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "C", "line": "230", "code": "        # Separate hundreds and tens with \"and\": two thousand three hundred and five.\n", "colour": "blue", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "231", "code": "        return \"%s %s %s\" % (s, CONJUNCTION, numerals(r)+f)\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "232", "code": "    else:\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "233", "code": "        return \"%s %s\" % (s, numerals(r)+f)\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "234", "code": "\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "C", "line": "235", "code": "#--- APPROXIMATE -----------------------------------------------------------------------------------\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "236", "code": "# Based on the Ruby Linguistics module by Michael Granger:\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "237", "code": "# http://www.deveiate.org/projects/Linguistics/wiki/English\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "238", "code": "\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "C", "line": "239", "code": "NONE      = \"no\"          #  0\n", "colour": "blue", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "C", "line": "240", "code": "PAIR      = \"a pair of\"   #  2\n", "colour": "blue", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "C", "line": "241", "code": "SEVERAL   = \"several\"     #  3-7\n", "colour": "blue", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "C", "line": "242", "code": "NUMBER    = \"a number of\" #  8-17\n", "colour": "blue", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "C", "line": "243", "code": "SCORE     = \"a score of\"  # 18-22\n", "colour": "blue", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "C", "line": "244", "code": "DOZENS    = \"dozens of\"   # 22-200\n", "colour": "blue", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "245", "code": "COUNTLESS = \"countless\"\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "246", "code": "\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "C", "line": "247", "code": "quantify_custom_plurals = {}\n", "colour": "blue", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "248", "code": "\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "R", "line": "249", "code": "def approximate(word, amount=1, plural={}):\n", "colour": "green", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "250", "code": "    \"\"\" Returns an approximation of the number of given objects.\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "251", "code": "        Two objects are described as being \"a pair\",\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "252", "code": "        smaller than eight is \"several\",\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "253", "code": "        smaller than twenty is \"a number of\",\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "254", "code": "        smaller than two hundred are \"dozens\",\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "C", "line": "255", "code": "        anything bigger is described as being tens or hundreds of thousands or millions.\n", "colour": "blue", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "256", "code": "        For example: approximate(\"chicken\", 100) => \"dozens of chickens\".\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "257", "code": "    \"\"\"\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "C", "line": "258", "code": "    try: p = pluralize(word, custom=plural)\n", "colour": "blue", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "259", "code": "    except:\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "C", "line": "260", "code": "        raise TypeError(\"can't pluralize %s (not a string)\" % word.__class__.__name__)\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "261", "code": "    # Anything up to 200.\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "C", "line": "262", "code": "    if amount == 0: \n", "colour": "blue", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "263", "code": "        return \"%s %s\" % (NONE, p)\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "C", "line": "264", "code": "    if amount == 1: \n", "colour": "blue", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "265", "code": "        return referenced(word) # \"a\" chicken, \"an\" elephant\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "C", "line": "266", "code": "    if amount == 2: \n", "colour": "blue", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "267", "code": "        return \"%s %s\" % (PAIR, p)\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "C", "line": "268", "code": "    if 3 <= amount < 8: \n", "colour": "blue", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "269", "code": "        return \"%s %s\" % (SEVERAL, p)\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "C", "line": "270", "code": "    if 8 <= amount < 18: \n", "colour": "blue", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "271", "code": "        return \"%s %s\" % (NUMBER, p)\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "C", "line": "272", "code": "    if 18 <= amount < 23: \n", "colour": "blue", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "273", "code": "        return \"%s %s\" % (SCORE, p)\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "C", "line": "274", "code": "    if 23 <= amount < 200: \n", "colour": "blue", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "275", "code": "        return \"%s %s\" % (DOZENS, p)\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "276", "code": "    if amount > 10000000:\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "277", "code": "        return \"%s %s\" % (COUNTLESS, p)\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "278", "code": "    # Hundreds and thousands.\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "279", "code": "    thousands = int(log(amount, 10) / 3)\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "C", "line": "280", "code": "    hundreds  = ceil(log(amount, 10) % 3) - 1\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "C", "line": "281", "code": "    h = hundreds==2 and \"hundreds of \" or (hundreds==1 and \"tens of \" or \"\")\n", "colour": "blue", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "C", "line": "282", "code": "    t = thousands>0 and pluralize(ORDER[thousands])+\" of \" or \"\"\n", "colour": "blue", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "283", "code": "    return \"%s%s%s\" % (h, t, p)\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "C", "line": "284", "code": "        \n", "colour": "blue", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "285", "code": "#print approximate(\"chicken\", 0)\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "286", "code": "#print approximate(\"chicken\", 1)\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "287", "code": "#print approximate(\"chicken\", 2)\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "288", "code": "#print approximate(\"chicken\", 3)\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "289", "code": "#print approximate(\"chicken\", 10)\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "290", "code": "#print approximate(\"chicken\", 100)\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "291", "code": "#print approximate(\"chicken\", 1000)\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "292", "code": "#print approximate(\"chicken\", 10000)\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "293", "code": "#print approximate(\"chicken\", 100000)\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "294", "code": "#print approximate(\"chicken\", 1000000)\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "295", "code": "#print approximate(\"chicken\", 10000000)\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "296", "code": "#print approximate(\"chicken\", 100000000)\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "297", "code": "#print approximate(\"chicken\", 10000000000)\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "298", "code": "\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "C", "line": "299", "code": "#--- COUNT -----------------------------------------------------------------------------------------\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "300", "code": "\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "301", "code": "# count(word, amount, plural={})\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "302", "code": "# count([word1, word2, ...], plural={})\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "303", "code": "# counr({word1:0, word2:0, ...}, plural={})\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "304", "code": "def count(*args, **kwargs):\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "305", "code": "    \"\"\" Returns an approximation of the entire set.\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "C", "line": "306", "code": "        Identical words are grouped and counted and then quantified with an approximation.\n", "colour": "blue", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "307", "code": "    \"\"\"\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "308", "code": "    if len(args) == 2 and isinstance(args[0], basestring):\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "309", "code": "        return approximate(args[0], args[1], kwargs.get(\"plural\", {}))\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "C", "line": "310", "code": "    if len(args) == 1 and isinstance(args[0], basestring) and \"amount\" in kwargs:\n", "colour": "blue", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "311", "code": "        return approximate(args[0], kwargs[\"amount\"], kwargs.get(\"plural\", {}))\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "312", "code": "    if len(args) == 1 and isinstance(args[0], dict):\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "W", "line": "313", "code": "        count = args[0]\n", "colour": "purple", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "314", "code": "    if len(args) == 1 and isinstance(args[0], (list, tuple)):\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "315", "code": "        # Keep a count of each item in the list.\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "316", "code": "        count = {}\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "317", "code": "        for word in args[0]:\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "318", "code": "            try:\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "319", "code": "                count.setdefault(word, 0)\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "320", "code": "                count[word] += 1\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "321", "code": "            except:\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "C", "line": "322", "code": "                raise TypeError(\"can't count %s (not a string)\" % word.__class__.__name__)\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "323", "code": "    # Create an iterator of (count, item) tuples, sorted highest-first.\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "C", "line": "324", "code": "    s = [(count[word], word) for word in count]\n", "colour": "blue", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "W", "line": "325", "code": "    s = max([n for (n,w) in s]) > 1 and reversed(sorted(s)) or s\n", "colour": "purple", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "326", "code": "    # Concatenate approximate quantities of each item,\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "327", "code": "    # starting with the one that has the highest occurence.\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "328", "code": "    phrase = []\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "C", "line": "329", "code": "    for i, (n, word) in enumerate(s):\n", "colour": "blue", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "330", "code": "        phrase.append(approximate(word, n, kwargs.get(\"plural\", {})))\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "C", "line": "331", "code": "        phrase.append(i==len(count)-2 and \" and \" or \", \")\n", "colour": "blue", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "332", "code": "    return \"\".join(phrase[:-1])\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "333", "code": "\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "C", "line": "334", "code": "quantify = count\n", "colour": "blue", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "C", "line": "335", "code": "    \n", "colour": "blue", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "336", "code": "#print count([\"goose\", \"goose\", \"duck\", \"chicken\", \"chicken\", \"chicken\"])\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "337", "code": "#print count([\"penguin\", \"polar bear\"])\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "338", "code": "#print count([\"whale\"])\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "339", "code": "\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "C", "line": "340", "code": "#--- REFLECT ---------------------------------------------------------------------------------------\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "341", "code": "\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "C", "line": "342", "code": "readable_types = (\n", "colour": "blue", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "C", "line": "343", "code": "    (\"^<type '\"        , \"\"),\n", "colour": "blue", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "W", "line": "344", "code": "    (\"^<class '(.*)'\\>\", \"\\\\1 class\"),\n", "colour": "purple", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "C", "line": "345", "code": "    (\"'>\"              , \"\"),\n", "colour": "blue", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "C", "line": "346", "code": "    (\"pyobjc\"          , \"PyObjC\"),\n", "colour": "blue", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "C", "line": "347", "code": "    (\"objc_class\"      , \"Objective-C class\"),\n", "colour": "blue", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "C", "line": "348", "code": "    (\"objc\"            , \"Objective-C\"),\n", "colour": "blue", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "C", "line": "349", "code": "    (\"<objective-c class  (.*) at [0-9][0-9|a-z]*>\" , \"Objective-C \\\\1 class\"),\n", "colour": "blue", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "C", "line": "350", "code": "    (\"bool\"            , \"boolean\"),\n", "colour": "blue", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "C", "line": "351", "code": "    (\"int\"             , \"integer\"),\n", "colour": "blue", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "C", "line": "352", "code": "    (\"long\"            , \"long integer\"),\n", "colour": "blue", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "C", "line": "353", "code": "    (\"float\"           , \"float\"),\n", "colour": "blue", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "C", "line": "354", "code": "    (\"str\"             , \"string\"),\n", "colour": "blue", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "C", "line": "355", "code": "    (\"unicode\"         , \"unicode string\"),\n", "colour": "blue", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "C", "line": "356", "code": "    (\"dict\"            , \"dictionary\"),\n", "colour": "blue", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "C", "line": "357", "code": "    (\"NoneType\"        , \"None type\"),\n", "colour": "blue", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "C", "line": "358", "code": "    (\"instancemethod\"  , \"instance method\"),\n", "colour": "blue", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "C", "line": "359", "code": "    (\"builtin_function_or_method\" , \"built-in function\"),\n", "colour": "blue", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "C", "line": "360", "code": "    (\"classobj\"        , \"class object\"),\n", "colour": "blue", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "W", "line": "361", "code": "    (\"\\.\"              , \" \"),\n", "colour": "purple", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "C", "line": "362", "code": "    (\"_\"               , \" \")        \n", "colour": "blue", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "363", "code": ")\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "364", "code": "\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "R", "line": "365", "code": "def reflect(object, quantify=True, replace=readable_types):\n", "colour": "green", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "366", "code": "    \"\"\" Returns the type of each object in the given object.\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "367", "code": "        - For modules, this means classes and functions etc.\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "368", "code": "        - For list and tuples, means the type of each item in it.\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "369", "code": "        - For other objects, means the type of the object itself.\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "370", "code": "    \"\"\"\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "371", "code": "    _type = lambda object: type(object).__name__\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "372", "code": "    types = []\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "C", "line": "373", "code": "    # Classes and modules with a __dict__ attribute listing methods, functions etc.  \n", "colour": "blue", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "374", "code": "    if hasattr(object, \"__dict__\"):\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "375", "code": "        # Function and method objects.\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "376", "code": "        if _type(object) in (\"function\", \"instancemethod\"):\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "377", "code": "            types.append(_type(object))\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "378", "code": "        # Classes and modules.\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "379", "code": "        else:\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "C", "line": "380", "code": "            for v in object.__dict__.values():\n", "colour": "blue", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "C", "line": "381", "code": "                try: types.append(str(v.__classname__))\n", "colour": "blue", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "W", "line": "382", "code": "                except:\n", "colour": "purple", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "383", "code": "                    # Not a class after all (some stuff like ufunc in Numeric).\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "384", "code": "                    types.append(_type(v))\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "385", "code": "    # Lists and tuples can consist of several types of objects.\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "386", "code": "    elif isinstance(object, (list, tuple, set)):\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "387", "code": "        types += [_type(x) for x in object]\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "388", "code": "    # Dictionaries have keys pointing to objects.\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "389", "code": "    elif isinstance(object, dict):\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "W", "line": "390", "code": "        types += [_type(k) for k in object]\n", "colour": "purple", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "391", "code": "        types += [_type(v) for v in object.values()]\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "392", "code": "    else:\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "393", "code": "        types.append(_type(object))\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "394", "code": "    # Clean up type strings.\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "C", "line": "395", "code": "    m = {}\n", "colour": "blue", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "W", "line": "396", "code": "    for i in range(len(types)):\n", "colour": "purple", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "397", "code": "        k = types[i]\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "398", "code": "        # Execute the regular expressions once only,\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "399", "code": "        # next time we'll have the conversion cached.\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "400", "code": "        if k not in m:\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "C", "line": "401", "code": "            for a,b in replace:\n", "colour": "blue", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "C", "line": "402", "code": "                types[i] = re.sub(a, b, types[i])      \n", "colour": "blue", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "C", "line": "403", "code": "            m[k] = types[i]      \n", "colour": "blue", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "404", "code": "        types[i] = m[k]\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "405", "code": "    if not quantify:\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "C", "line": "406", "code": "        if not isinstance(object, (list, tuple, set, dict)) and not hasattr(object, \"__dict__\"):\n", "colour": "blue", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "407", "code": "            return types[0]\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "408", "code": "        return types\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "409", "code": "    return count(types, plural={\"built-in function\" : \"built-in functions\"})\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "410", "code": "\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "411", "code": "#print reflect(\"hello\")\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "412", "code": "#print reflect([\"hello\", \"goobye\"])\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "413", "code": "#print reflect((1,2,3,4,5))\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "414", "code": "#print reflect({\"name\": \"linguistics\", \"version\": 1.0})\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "415", "code": "#print reflect(reflect)\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "416", "code": "#print reflect(__dict__)\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "417", "code": "#import Foundation; print reflect(Foundation)\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "418", "code": "#import Numeric; print reflect(Numeric)\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}]]}