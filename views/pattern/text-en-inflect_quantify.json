{"path": "/home/asumal/git/cs410/pattern/pattern/text/en/inflect_quantify.py", "lines": [{"index": "1", "colour": "orange", "code": "#### PATTERN | EN | QUANTIFY #######################################################################\n", "error": "none", "author": "tom@organisms.be"}, {"index": "2", "colour": "orange", "code": "# Copyright (c) 2010 University of Antwerp, Belgium\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "3", "colour": "orange", "code": "# Author: Tom De Smedt <tom@organisms.be>\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "4", "colour": "orange", "code": "# License: BSD (see LICENSE.txt for details).\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "5", "colour": "orange", "code": "\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "6", "colour": "orange", "code": "####################################################################################################\n", "error": "none", "author": "tom@organisms.be"}, {"index": "7", "colour": "orange", "code": "# Transforms numeral strings to numbers, and numbers (int, float) to numeral strings.\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "8", "colour": "orange", "code": "# Approximates quantities of objects (\"dozens of chickens\" etc.)\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "9", "colour": "orange", "code": "\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "10", "colour": "orange", "code": "import os\n", "error": "none", "author": "tom@organisms.be"}, {"index": "11", "colour": "orange", "code": "import sys\n", "error": "none", "author": "tom@organisms.be"}, {"index": "12", "colour": "orange", "code": "import re\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "13", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "14", "colour": "orange", "code": "from math import log, ceil\n", "error": "none", "author": "tom@organisms.be"}, {"index": "15", "colour": "orange", "code": "\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "16", "colour": "orange", "code": "try:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "17", "colour": "orange", "code": "    MODULE = os.path.dirname(os.path.realpath(__file__))\n", "error": "none", "author": "tom@alice-2.local"}, {"index": "18", "colour": "green", "code": "except:\n", "error": "W", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "19", "colour": "orange", "code": "    MODULE = \"\"\n", "error": "none", "author": "tom@organisms.be"}, {"index": "20", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "21", "colour": "orange", "code": "if sys.version > \"3\":\n", "error": "none", "author": "tom@organisms.be"}, {"index": "22", "colour": "green", "code": "    long = int\n", "error": "W", "author": "tom@organisms.be"}, {"index": "23", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "24", "colour": "orange", "code": "sys.path.insert(0, os.path.join(MODULE, \"..\", \"..\", \"..\", \"..\"))\n", "error": "none", "author": "tom@organisms.be"}, {"index": "25", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "26", "colour": "orange", "code": "from pattern.text.en.inflect import pluralize, referenced\n", "error": "none", "author": "tom@organisms.be"}, {"index": "27", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "28", "colour": "orange", "code": "sys.path.pop(0)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "29", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "30", "colour": "orange", "code": "####################################################################################################\n", "error": "none", "author": "tom@organisms.be"}, {"index": "31", "colour": "orange", "code": "\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "32", "colour": "orange", "code": "NUMERALS = {\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "33", "colour": "orange", "code": "    \"zero\"  :  0,    \"ten\"       : 10,    \"twenty\"  : 20,\n", "error": "none", "author": "tom@organisms.be"}, {"index": "34", "colour": "orange", "code": "    \"one\"   :  1,    \"eleven\"    : 11,    \"thirty\"  : 30,\n", "error": "none", "author": "tom@organisms.be"}, {"index": "35", "colour": "orange", "code": "    \"two\"   :  2,    \"twelve\"    : 12,    \"forty\"   : 40,\n", "error": "none", "author": "tom@organisms.be"}, {"index": "36", "colour": "orange", "code": "    \"three\" :  3,    \"thirteen\"  : 13,    \"fifty\"   : 50,\n", "error": "none", "author": "tom@organisms.be"}, {"index": "37", "colour": "orange", "code": "    \"four\"  :  4,    \"fourteen\"  : 14,    \"sixty\"   : 60,\n", "error": "none", "author": "tom@organisms.be"}, {"index": "38", "colour": "orange", "code": "    \"five\"  :  5,    \"fifteen\"   : 15,    \"seventy\" : 70,\n", "error": "none", "author": "tom@organisms.be"}, {"index": "39", "colour": "orange", "code": "    \"six\"   :  6,    \"sixteen\"   : 16,    \"eighty\"  : 80,\n", "error": "none", "author": "tom@organisms.be"}, {"index": "40", "colour": "orange", "code": "    \"seven\" :  7,    \"seventeen\" : 17,    \"ninety\"  : 90,\n", "error": "none", "author": "tom@organisms.be"}, {"index": "41", "colour": "orange", "code": "    \"eight\" :  8,    \"eighteen\"  : 18,\n", "error": "none", "author": "tom@organisms.be"}, {"index": "42", "colour": "orange", "code": "    \"nine\"  :  9,    \"nineteen\"  : 19\n", "error": "none", "author": "tom@organisms.be"}, {"index": "43", "colour": "orange", "code": "}\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "44", "colour": "orange", "code": "\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "45", "colour": "orange", "code": "NUMERALS_INVERSE = dict((i, w) for w, i in NUMERALS.items()) # 0 => \"zero\"\n", "error": "none", "author": "tom@organisms.be"}, {"index": "46", "colour": "orange", "code": "NUMERALS_VERBOSE = {\n", "error": "none", "author": "tom@organisms.be"}, {"index": "47", "colour": "orange", "code": "    \"half\"  : ( 1, 0.5),\n", "error": "none", "author": "tom@organisms.be"}, {"index": "48", "colour": "orange", "code": "    \"dozen\" : (12, 0.0),\n", "error": "none", "author": "tom@organisms.be"}, {"index": "49", "colour": "orange", "code": "    \"score\" : (20, 0.0)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "50", "colour": "orange", "code": "}\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "51", "colour": "orange", "code": "\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "52", "colour": "orange", "code": "ORDER  = [\"hundred\", \"thousand\"] + [m+\"illion\" for m in (\"m\", \"b\", \"tr\", \n", "error": "none", "author": "tom@organisms.be"}, {"index": "53", "colour": "orange", "code": "    \"quadr\", \n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "54", "colour": "orange", "code": "    \"quint\", \n", "error": "none", "author": "tom@organisms.be"}, {"index": "55", "colour": "orange", "code": "    \"sext\", \n", "error": "none", "author": "tom@organisms.be"}, {"index": "56", "colour": "orange", "code": "    \"sept\", \n", "error": "none", "author": "tom@organisms.be"}, {"index": "57", "colour": "orange", "code": "    \"oct\", \n", "error": "none", "author": "tom@organisms.be"}, {"index": "58", "colour": "orange", "code": "    \"non\", \n", "error": "none", "author": "tom@organisms.be"}, {"index": "59", "colour": "orange", "code": "    \"dec\", \n", "error": "none", "author": "tom@organisms.be"}, {"index": "60", "colour": "orange", "code": "    \"undec\", \n", "error": "none", "author": "tom@organisms.be"}, {"index": "61", "colour": "orange", "code": "    \"duodec\", \n", "error": "none", "author": "tom@organisms.be"}, {"index": "62", "colour": "orange", "code": "    \"tredec\", \n", "error": "none", "author": "tom@organisms.be"}, {"index": "63", "colour": "orange", "code": "    \"quattuordec\", \n", "error": "none", "author": "tom@organisms.be"}, {"index": "64", "colour": "orange", "code": "    \"quindec\", \n", "error": "none", "author": "tom@organisms.be"}, {"index": "65", "colour": "orange", "code": "    \"sexdec\", \n", "error": "none", "author": "tom@organisms.be"}, {"index": "66", "colour": "orange", "code": "    \"septemdec\", \n", "error": "none", "author": "tom@organisms.be"}, {"index": "67", "colour": "orange", "code": "    \"octodec\", \n", "error": "none", "author": "tom@organisms.be"}, {"index": "68", "colour": "orange", "code": "    \"novemdec\", \n", "error": "none", "author": "tom@organisms.be"}, {"index": "69", "colour": "orange", "code": "    \"vigint\"\n", "error": "none", "author": "tom@organisms.be"}, {"index": "70", "colour": "orange", "code": ")]\n", "error": "none", "author": "tom@organisms.be"}, {"index": "71", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "72", "colour": "orange", "code": "# {\"hundred\": 100, \"thousand\": 1000, ...}\n", "error": "none", "author": "tom@organisms.be"}, {"index": "73", "colour": "orange", "code": "O = {\n", "error": "none", "author": "tom@organisms.be"}, {"index": "74", "colour": "orange", "code": "    ORDER[0]: 100, \n", "error": "none", "author": "tom@organisms.be"}, {"index": "75", "colour": "orange", "code": "    ORDER[1]: 1000\n", "error": "none", "author": "tom@organisms.be"}, {"index": "76", "colour": "orange", "code": "}\n", "error": "none", "author": "tom@organisms.be"}, {"index": "77", "colour": "orange", "code": "for i, k in enumerate(ORDER[2:]): \n", "error": "none", "author": "tom@organisms.be"}, {"index": "78", "colour": "orange", "code": "    O[k] = 1000000 * 1000 ** i\n", "error": "none", "author": "tom@organisms.be"}, {"index": "79", "colour": "orange", "code": "\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "80", "colour": "orange", "code": "ZERO, MINUS, RADIX, THOUSANDS, CONJUNCTION = \\\n", "error": "none", "author": "tom@organisms.be"}, {"index": "81", "colour": "orange", "code": "    \"zero\", \"minus\", \"point\", \",\", \"and\"\n", "error": "none", "author": "tom@organisms.be"}, {"index": "82", "colour": "orange", "code": "\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "83", "colour": "orange", "code": "def zshift(s):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "84", "colour": "orange", "code": "    \"\"\" Returns a (string, count)-tuple, with leading zeros strippped from the string and counted.\n", "error": "none", "author": "tom@organisms.be"}, {"index": "85", "colour": "orange", "code": "    \"\"\"\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "86", "colour": "orange", "code": "    s = s.lstrip()\n", "error": "none", "author": "tom@organisms.be"}, {"index": "87", "colour": "green", "code": "    i = 0\n", "error": "W", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "88", "colour": "orange", "code": "    while s.startswith((ZERO, \"0\")):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "89", "colour": "orange", "code": "        s = re.sub(r\"^(0|%s)\\s*\" % ZERO, \"\", s, 1)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "90", "colour": "orange", "code": "        i = i + 1\n", "error": "none", "author": "tom@organisms.be"}, {"index": "91", "colour": "orange", "code": "    return s, i\n", "error": "none", "author": "tom@organisms.be"}, {"index": "92", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "93", "colour": "orange", "code": "#print zshift(\"zero one\")  # (\"one\", 1)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "94", "colour": "orange", "code": "#print zshift(\"0 0 seven\") # (\"seven\", 2)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "95", "colour": "orange", "code": "\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "96", "colour": "orange", "code": "#--- STRING TO NUMBER ------------------------------------------------------------------------------\n", "error": "none", "author": "tom@organisms.be"}, {"index": "97", "colour": "orange", "code": "\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "98", "colour": "orange", "code": "def number(s):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "99", "colour": "orange", "code": "    \"\"\" Returns the given numeric string as a float or an int.\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "100", "colour": "orange", "code": "        If no number can be parsed from the string, returns 0.\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "101", "colour": "orange", "code": "        For example:\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "102", "colour": "orange", "code": "        number(\"five point two million\") => 5200000\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "103", "colour": "orange", "code": "        number(\"seventy-five point two\") => 75.2\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "104", "colour": "orange", "code": "        number(\"three thousand and one\") => 3001\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "105", "colour": "orange", "code": "    \"\"\"\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "106", "colour": "orange", "code": "    s = s.strip()\n", "error": "none", "author": "tom@organisms.be"}, {"index": "107", "colour": "orange", "code": "    s = s.lower()\n", "error": "none", "author": "tom@organisms.be"}, {"index": "108", "colour": "orange", "code": "    # Negative number.\n", "error": "none", "author": "tom@organisms.be"}, {"index": "109", "colour": "orange", "code": "    if s.startswith(MINUS):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "110", "colour": "orange", "code": "        return -number(s.replace(MINUS, \"\", 1))\n", "error": "none", "author": "tom@organisms.be"}, {"index": "111", "colour": "orange", "code": "    # Strip commas and dashes (\"seventy-five\").\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "112", "colour": "orange", "code": "    # Split into integral and fractional part.\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "113", "colour": "orange", "code": "    s = s.replace(\"&\", \" %s \" % CONJUNCTION)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "114", "colour": "orange", "code": "    s = s.replace(THOUSANDS, \"\")\n", "error": "none", "author": "tom@organisms.be"}, {"index": "115", "colour": "orange", "code": "    s = s.replace(\"-\", \" \")\n", "error": "none", "author": "tom@organisms.be"}, {"index": "116", "colour": "orange", "code": "    s = s.split(RADIX)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "117", "colour": "orange", "code": "    # Process fractional part.\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "118", "colour": "orange", "code": "    # Extract all the leading zeros.\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "119", "colour": "orange", "code": "    if len(s) > 1:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "120", "colour": "orange", "code": "        f = \" \".join(s[1:])      # zero point zero twelve => zero twelve\n", "error": "none", "author": "tom@organisms.be"}, {"index": "121", "colour": "orange", "code": "        f, z = zshift(f)              # zero twelve => (1, \"twelve\")\n", "error": "none", "author": "tom@organisms.be"}, {"index": "122", "colour": "orange", "code": "        f = float(number(f))          # \"twelve\" => 12.0\n", "error": "none", "author": "tom@organisms.be"}, {"index": "123", "colour": "orange", "code": "        f /= 10**(len(str(int(f)))+z) # 10**(len(\"12\")+1) = 1000; 12.0 / 1000 => 0.012\n", "error": "none", "author": "tom@organisms.be"}, {"index": "124", "colour": "orange", "code": "    else:\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "125", "colour": "orange", "code": "        f = 0\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "126", "colour": "green", "code": "    i = n = 0\n", "error": "W", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "127", "colour": "orange", "code": "    s = s[0].split()\n", "error": "none", "author": "tom@organisms.be"}, {"index": "128", "colour": "orange", "code": "    for j, x in enumerate(s):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "129", "colour": "orange", "code": "        if x in NUMERALS:\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "130", "colour": "orange", "code": "            # Map words from the dictionary of numerals: \"eleven\" => 11.\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "131", "colour": "orange", "code": "            i += NUMERALS[x]\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "132", "colour": "orange", "code": "        elif x in NUMERALS_VERBOSE:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "133", "colour": "orange", "code": "            # Map words from alternate numerals: \"two dozen\" => 2 * 12\n", "error": "none", "author": "tom@organisms.be"}, {"index": "134", "colour": "orange", "code": "            i = i * NUMERALS_VERBOSE[x][0] + NUMERALS_VERBOSE[x][1]\n", "error": "none", "author": "tom@organisms.be"}, {"index": "135", "colour": "orange", "code": "        elif x in O: \n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "136", "colour": "orange", "code": "            # Map thousands from the dictionary of orders.\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "137", "colour": "orange", "code": "            # When a thousand is encountered, the subtotal is shifted to the total\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "138", "colour": "orange", "code": "            # and we start a new subtotal. An exception to this is when we\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "139", "colour": "orange", "code": "            # encouter two following thousands (e.g. two million vigintillion is one subtotal).\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "140", "colour": "orange", "code": "            i *= O[x]\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "141", "colour": "orange", "code": "            if j < len(s)-1 and s[j+1] in O: \n", "error": "none", "author": "tom@organisms.be"}, {"index": "142", "colour": "orange", "code": "                continue\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "143", "colour": "orange", "code": "            if O[x] > 100: \n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "144", "colour": "orange", "code": "                n += i\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "145", "colour": "orange", "code": "                i = 0\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "146", "colour": "orange", "code": "        elif x == CONJUNCTION:\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "147", "colour": "orange", "code": "            pass\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "148", "colour": "orange", "code": "        else:\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "149", "colour": "orange", "code": "            # Words that are not in any dicionary may be numbers (e.g. \"2.5\" => 2.5).\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "150", "colour": "orange", "code": "            try: i += \".\" in x and float(x) or int(x)\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "151", "colour": "green", "code": "            except:\n", "error": "W", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "152", "colour": "orange", "code": "                pass\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "153", "colour": "orange", "code": "    return n + i + f\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "154", "colour": "orange", "code": "\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "155", "colour": "orange", "code": "#print number(\"five point two septillion\")\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "156", "colour": "orange", "code": "#print number(\"seventy-five point two\")\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "157", "colour": "orange", "code": "#print number(\"three thousand and one\")\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "158", "colour": "orange", "code": "#print number(\"1.2 million point two\")\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "159", "colour": "orange", "code": "#print number(\"nothing\")\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "160", "colour": "orange", "code": "\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "161", "colour": "orange", "code": "#--- NUMBER TO STRING ------------------------------------------------------------------------------\n", "error": "none", "author": "tom@organisms.be"}, {"index": "162", "colour": "orange", "code": "\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "163", "colour": "blue", "code": "def numerals(n, round=2):\n", "error": "R", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "164", "colour": "orange", "code": "    \"\"\" Returns the given int or float as a string of numerals.\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "165", "colour": "orange", "code": "        By default, the fractional part is rounded to two decimals.\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "166", "colour": "orange", "code": "        For example:\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "167", "colour": "orange", "code": "        numerals(4011) => four thousand and eleven\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "168", "colour": "orange", "code": "        numerals(2.25) => two point twenty-five\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "169", "colour": "orange", "code": "        numerals(2.249) => two point twenty-five\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "170", "colour": "orange", "code": "        numerals(2.249, round=3) => two point two hundred and forty-nine\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "171", "colour": "orange", "code": "    \"\"\"\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "172", "colour": "orange", "code": "    if isinstance(n, basestring):\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "173", "colour": "orange", "code": "        if n.isdigit():\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "174", "colour": "orange", "code": "            n = int(n)\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "175", "colour": "orange", "code": "        else:\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "176", "colour": "orange", "code": "            # If the float is given as a string, extract the length of the fractional part.\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "177", "colour": "orange", "code": "            if round is None:\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "178", "colour": "orange", "code": "                round = len(n.split(\".\")[1])\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "179", "colour": "orange", "code": "            n = float(n)\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "180", "colour": "orange", "code": "    # For negative numbers, simply prepend minus.\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "181", "colour": "orange", "code": "    if n < 0:\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "182", "colour": "orange", "code": "        return \"%s %s\" % (MINUS, numerals(abs(n)))\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "183", "colour": "orange", "code": "    # Split the number into integral and fractional part.\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "184", "colour": "orange", "code": "    # Converting the integral part to a long ensures a better accuracy during the recursion.\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "185", "colour": "green", "code": "    i = long(n//1)\n", "error": "W", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "186", "colour": "orange", "code": "    f = n-i\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "187", "colour": "orange", "code": "    # The remainder, which we will stringify in recursion.\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "188", "colour": "orange", "code": "    r = 0\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "189", "colour": "orange", "code": "    if i in NUMERALS_INVERSE: # 11 => eleven\n", "error": "none", "author": "tom@organisms.be"}, {"index": "190", "colour": "orange", "code": "        # Map numbers from the dictionary to numerals: 11 => \"eleven\".\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "191", "colour": "orange", "code": "        s = NUMERALS_INVERSE[i]\n", "error": "none", "author": "tom@organisms.be"}, {"index": "192", "colour": "orange", "code": "    elif i < 100:\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "193", "colour": "orange", "code": "        # Map tens + digits: 75 => 70+5 => \"seventy-five\".\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "194", "colour": "orange", "code": "        s = numerals((i//10)*10) + \"-\" + numerals(i%10)\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "195", "colour": "orange", "code": "    elif i < 1000:\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "196", "colour": "orange", "code": "        # Map hundreds: 500 => 5*100 => \"five hundred\".\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "197", "colour": "orange", "code": "        # Store the remainders (tens + digits).\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "198", "colour": "orange", "code": "        s = numerals(i//100) + \" \" + ORDER[0]\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "199", "colour": "orange", "code": "        r = i % 100\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "200", "colour": "orange", "code": "    else:\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "201", "colour": "orange", "code": "        # Map thousands by extracting the order (thousand/million/billion/...).\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "202", "colour": "orange", "code": "        # Store and recurse the remainder.\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "203", "colour": "orange", "code": "        s = \"\"\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "204", "colour": "orange", "code": "        o, base = 1, 1000\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "205", "colour": "orange", "code": "        while i > base:\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "206", "colour": "orange", "code": "            o+=1; base*=1000\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "207", "colour": "orange", "code": "        while o > len(ORDER)-1:\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "208", "colour": "orange", "code": "            s += \" \"+ORDER[-1] # This occurs for consecutive thousands: million vigintillion.\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "209", "colour": "orange", "code": "            o -= len(ORDER)-1\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "210", "colour": "orange", "code": "        s = \"%s %s%s\" % (numerals(i//(base/1000)), (o>1 and ORDER[o-1] or \"\"), s)\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "211", "colour": "orange", "code": "        r = i % (base/1000)\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "212", "colour": "orange", "code": "    if f != 0: \n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "213", "colour": "orange", "code": "        # Map the fractional part: \"two point twenty-five\" => 2.25.\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "214", "colour": "orange", "code": "        # We cast it to a string first to find all the leading zeros.\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "215", "colour": "orange", "code": "        # This actually seems more accurate than calculating the leading zeros,\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "216", "colour": "orange", "code": "        # see also: http://python.org/doc/2.5.1/tut/node16.html.\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "217", "colour": "orange", "code": "        # Some rounding occurs.\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "218", "colour": "orange", "code": "        f = (\"%.\" + str(round is None and 2 or round) + \"f\") % f\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "219", "colour": "orange", "code": "        f = f.replace(\"0.\",\"\",1).rstrip(\"0\")\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "220", "colour": "orange", "code": "        f, z = zshift(f)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "221", "colour": "orange", "code": "        f = f and \" %s%s %s\" % (RADIX, \" %s\"%ZERO*z, numerals(long(f))) or \"\"\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "222", "colour": "orange", "code": "    else:\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "223", "colour": "orange", "code": "        f = \"\"\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "224", "colour": "orange", "code": "    if r == 0:\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "225", "colour": "orange", "code": "        return s+f\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "226", "colour": "orange", "code": "    elif r >= 1000: \n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "227", "colour": "orange", "code": "        # Separate hundreds and thousands with a comma: two million, three hundred thousand.\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "228", "colour": "orange", "code": "        return \"%s%s %s\" % (s, THOUSANDS, numerals(r)+f)\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "229", "colour": "orange", "code": "    elif r <= 100:  \n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "230", "colour": "orange", "code": "        # Separate hundreds and tens with \"and\": two thousand three hundred and five.\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "231", "colour": "orange", "code": "        return \"%s %s %s\" % (s, CONJUNCTION, numerals(r)+f)\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "232", "colour": "orange", "code": "    else:\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "233", "colour": "orange", "code": "        return \"%s %s\" % (s, numerals(r)+f)\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "234", "colour": "orange", "code": "\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "235", "colour": "orange", "code": "#--- APPROXIMATE -----------------------------------------------------------------------------------\n", "error": "none", "author": "tom@organisms.be"}, {"index": "236", "colour": "orange", "code": "# Based on the Ruby Linguistics module by Michael Granger:\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "237", "colour": "orange", "code": "# http://www.deveiate.org/projects/Linguistics/wiki/English\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "238", "colour": "orange", "code": "\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "239", "colour": "orange", "code": "NONE      = \"no\"          #  0\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "240", "colour": "orange", "code": "PAIR      = \"a pair of\"   #  2\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "241", "colour": "orange", "code": "SEVERAL   = \"several\"     #  3-7\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "242", "colour": "orange", "code": "NUMBER    = \"a number of\" #  8-17\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "243", "colour": "orange", "code": "SCORE     = \"a score of\"  # 18-22\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "244", "colour": "orange", "code": "DOZENS    = \"dozens of\"   # 22-200\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "245", "colour": "orange", "code": "COUNTLESS = \"countless\"\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "246", "colour": "orange", "code": "\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "247", "colour": "orange", "code": "quantify_custom_plurals = {}\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "248", "colour": "orange", "code": "\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "249", "colour": "blue", "code": "def approximate(word, amount=1, plural={}):\n", "error": "R", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "250", "colour": "orange", "code": "    \"\"\" Returns an approximation of the number of given objects.\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "251", "colour": "orange", "code": "        Two objects are described as being \"a pair\",\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "252", "colour": "orange", "code": "        smaller than eight is \"several\",\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "253", "colour": "orange", "code": "        smaller than twenty is \"a number of\",\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "254", "colour": "orange", "code": "        smaller than two hundred are \"dozens\",\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "255", "colour": "orange", "code": "        anything bigger is described as being tens or hundreds of thousands or millions.\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "256", "colour": "orange", "code": "        For example: approximate(\"chicken\", 100) => \"dozens of chickens\".\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "257", "colour": "orange", "code": "    \"\"\"\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "258", "colour": "orange", "code": "    try: p = pluralize(word, custom=plural)\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "259", "colour": "orange", "code": "    except:\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "260", "colour": "orange", "code": "        raise TypeError(\"can't pluralize %s (not a string)\" % word.__class__.__name__)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "261", "colour": "orange", "code": "    # Anything up to 200.\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "262", "colour": "orange", "code": "    if amount == 0: \n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "263", "colour": "orange", "code": "        return \"%s %s\" % (NONE, p)\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "264", "colour": "orange", "code": "    if amount == 1: \n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "265", "colour": "orange", "code": "        return referenced(word) # \"a\" chicken, \"an\" elephant\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "266", "colour": "orange", "code": "    if amount == 2: \n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "267", "colour": "orange", "code": "        return \"%s %s\" % (PAIR, p)\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "268", "colour": "orange", "code": "    if 3 <= amount < 8: \n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "269", "colour": "orange", "code": "        return \"%s %s\" % (SEVERAL, p)\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "270", "colour": "orange", "code": "    if 8 <= amount < 18: \n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "271", "colour": "orange", "code": "        return \"%s %s\" % (NUMBER, p)\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "272", "colour": "orange", "code": "    if 18 <= amount < 23: \n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "273", "colour": "orange", "code": "        return \"%s %s\" % (SCORE, p)\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "274", "colour": "orange", "code": "    if 23 <= amount < 200: \n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "275", "colour": "orange", "code": "        return \"%s %s\" % (DOZENS, p)\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "276", "colour": "orange", "code": "    if amount > 10000000:\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "277", "colour": "orange", "code": "        return \"%s %s\" % (COUNTLESS, p)\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "278", "colour": "orange", "code": "    # Hundreds and thousands.\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "279", "colour": "orange", "code": "    thousands = int(log(amount, 10) / 3)\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "280", "colour": "orange", "code": "    hundreds  = ceil(log(amount, 10) % 3) - 1\n", "error": "none", "author": "tom@organisms.be"}, {"index": "281", "colour": "orange", "code": "    h = hundreds==2 and \"hundreds of \" or (hundreds==1 and \"tens of \" or \"\")\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "282", "colour": "orange", "code": "    t = thousands>0 and pluralize(ORDER[thousands])+\" of \" or \"\"\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "283", "colour": "orange", "code": "    return \"%s%s%s\" % (h, t, p)\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "284", "colour": "orange", "code": "        \n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "285", "colour": "orange", "code": "#print approximate(\"chicken\", 0)\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "286", "colour": "orange", "code": "#print approximate(\"chicken\", 1)\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "287", "colour": "orange", "code": "#print approximate(\"chicken\", 2)\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "288", "colour": "orange", "code": "#print approximate(\"chicken\", 3)\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "289", "colour": "orange", "code": "#print approximate(\"chicken\", 10)\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "290", "colour": "orange", "code": "#print approximate(\"chicken\", 100)\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "291", "colour": "orange", "code": "#print approximate(\"chicken\", 1000)\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "292", "colour": "orange", "code": "#print approximate(\"chicken\", 10000)\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "293", "colour": "orange", "code": "#print approximate(\"chicken\", 100000)\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "294", "colour": "orange", "code": "#print approximate(\"chicken\", 1000000)\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "295", "colour": "orange", "code": "#print approximate(\"chicken\", 10000000)\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "296", "colour": "orange", "code": "#print approximate(\"chicken\", 100000000)\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "297", "colour": "orange", "code": "#print approximate(\"chicken\", 10000000000)\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "298", "colour": "orange", "code": "\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "299", "colour": "orange", "code": "#--- COUNT -----------------------------------------------------------------------------------------\n", "error": "none", "author": "tom@organisms.be"}, {"index": "300", "colour": "orange", "code": "\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "301", "colour": "orange", "code": "# count(word, amount, plural={})\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "302", "colour": "orange", "code": "# count([word1, word2, ...], plural={})\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "303", "colour": "orange", "code": "# counr({word1:0, word2:0, ...}, plural={})\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "304", "colour": "orange", "code": "def count(*args, **kwargs):\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "305", "colour": "orange", "code": "    \"\"\" Returns an approximation of the entire set.\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "306", "colour": "orange", "code": "        Identical words are grouped and counted and then quantified with an approximation.\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "307", "colour": "orange", "code": "    \"\"\"\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "308", "colour": "orange", "code": "    if len(args) == 2 and isinstance(args[0], basestring):\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "309", "colour": "orange", "code": "        return approximate(args[0], args[1], kwargs.get(\"plural\", {}))\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "310", "colour": "orange", "code": "    if len(args) == 1 and isinstance(args[0], basestring) and \"amount\" in kwargs:\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "311", "colour": "orange", "code": "        return approximate(args[0], kwargs[\"amount\"], kwargs.get(\"plural\", {}))\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "312", "colour": "orange", "code": "    if len(args) == 1 and isinstance(args[0], dict):\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "313", "colour": "green", "code": "        count = args[0]\n", "error": "W", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "314", "colour": "orange", "code": "    if len(args) == 1 and isinstance(args[0], (list, tuple)):\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "315", "colour": "orange", "code": "        # Keep a count of each item in the list.\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "316", "colour": "orange", "code": "        count = {}\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "317", "colour": "orange", "code": "        for word in args[0]:\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "318", "colour": "orange", "code": "            try:\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "319", "colour": "orange", "code": "                count.setdefault(word, 0)\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "320", "colour": "orange", "code": "                count[word] += 1\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "321", "colour": "orange", "code": "            except:\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "322", "colour": "orange", "code": "                raise TypeError(\"can't count %s (not a string)\" % word.__class__.__name__)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "323", "colour": "orange", "code": "    # Create an iterator of (count, item) tuples, sorted highest-first.\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "324", "colour": "orange", "code": "    s = [(count[word], word) for word in count]\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "325", "colour": "green", "code": "    s = max([n for (n,w) in s]) > 1 and reversed(sorted(s)) or s\n", "error": "W", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "326", "colour": "orange", "code": "    # Concatenate approximate quantities of each item,\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "327", "colour": "orange", "code": "    # starting with the one that has the highest occurence.\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "328", "colour": "orange", "code": "    phrase = []\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "329", "colour": "green", "code": "    for i, (n, word) in enumerate(s):\n", "error": "W", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "330", "colour": "orange", "code": "        phrase.append(approximate(word, n, kwargs.get(\"plural\", {})))\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "331", "colour": "orange", "code": "        phrase.append(i==len(count)-2 and \" and \" or \", \")\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "332", "colour": "orange", "code": "    return \"\".join(phrase[:-1])\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "333", "colour": "orange", "code": "\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "334", "colour": "orange", "code": "quantify = count\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "335", "colour": "orange", "code": "    \n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "336", "colour": "orange", "code": "#print count([\"goose\", \"goose\", \"duck\", \"chicken\", \"chicken\", \"chicken\"])\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "337", "colour": "orange", "code": "#print count([\"penguin\", \"polar bear\"])\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "338", "colour": "orange", "code": "#print count([\"whale\"])\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "339", "colour": "orange", "code": "\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "340", "colour": "orange", "code": "#--- REFLECT ---------------------------------------------------------------------------------------\n", "error": "none", "author": "tom@organisms.be"}, {"index": "341", "colour": "orange", "code": "\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "342", "colour": "orange", "code": "readable_types = (\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "343", "colour": "orange", "code": "    (\"^<type '\"        , \"\"),\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "344", "colour": "green", "code": "    (\"^<class '(.*)'\\>\", \"\\\\1 class\"),\n", "error": "W", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "345", "colour": "orange", "code": "    (\"'>\"              , \"\"),\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "346", "colour": "orange", "code": "    (\"pyobjc\"          , \"PyObjC\"),\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "347", "colour": "orange", "code": "    (\"objc_class\"      , \"Objective-C class\"),\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "348", "colour": "orange", "code": "    (\"objc\"            , \"Objective-C\"),\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "349", "colour": "orange", "code": "    (\"<objective-c class  (.*) at [0-9][0-9|a-z]*>\" , \"Objective-C \\\\1 class\"),\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "350", "colour": "orange", "code": "    (\"bool\"            , \"boolean\"),\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "351", "colour": "orange", "code": "    (\"int\"             , \"integer\"),\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "352", "colour": "orange", "code": "    (\"long\"            , \"long integer\"),\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "353", "colour": "orange", "code": "    (\"float\"           , \"float\"),\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "354", "colour": "orange", "code": "    (\"str\"             , \"string\"),\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "355", "colour": "orange", "code": "    (\"unicode\"         , \"unicode string\"),\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "356", "colour": "orange", "code": "    (\"dict\"            , \"dictionary\"),\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "357", "colour": "orange", "code": "    (\"NoneType\"        , \"None type\"),\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "358", "colour": "orange", "code": "    (\"instancemethod\"  , \"instance method\"),\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "359", "colour": "orange", "code": "    (\"builtin_function_or_method\" , \"built-in function\"),\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "360", "colour": "orange", "code": "    (\"classobj\"        , \"class object\"),\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "361", "colour": "green", "code": "    (\"\\.\"              , \" \"),\n", "error": "W", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "362", "colour": "orange", "code": "    (\"_\"               , \" \")        \n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "363", "colour": "orange", "code": ")\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "364", "colour": "orange", "code": "\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "365", "colour": "blue", "code": "def reflect(object, quantify=True, replace=readable_types):\n", "error": "R", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "366", "colour": "orange", "code": "    \"\"\" Returns the type of each object in the given object.\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "367", "colour": "orange", "code": "        - For modules, this means classes and functions etc.\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "368", "colour": "orange", "code": "        - For list and tuples, means the type of each item in it.\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "369", "colour": "orange", "code": "        - For other objects, means the type of the object itself.\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "370", "colour": "orange", "code": "    \"\"\"\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "371", "colour": "orange", "code": "    _type = lambda object: type(object).__name__\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "372", "colour": "orange", "code": "    types = []\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "373", "colour": "orange", "code": "    # Classes and modules with a __dict__ attribute listing methods, functions etc.  \n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "374", "colour": "orange", "code": "    if hasattr(object, \"__dict__\"):\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "375", "colour": "orange", "code": "        # Function and method objects.\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "376", "colour": "orange", "code": "        if _type(object) in (\"function\", \"instancemethod\"):\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "377", "colour": "orange", "code": "            types.append(_type(object))\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "378", "colour": "orange", "code": "        # Classes and modules.\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "379", "colour": "orange", "code": "        else:\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "380", "colour": "orange", "code": "            for v in object.__dict__.values():\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "381", "colour": "orange", "code": "                try: types.append(str(v.__classname__))\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "382", "colour": "green", "code": "                except:\n", "error": "W", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "383", "colour": "orange", "code": "                    # Not a class after all (some stuff like ufunc in Numeric).\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "384", "colour": "orange", "code": "                    types.append(_type(v))\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "385", "colour": "orange", "code": "    # Lists and tuples can consist of several types of objects.\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "386", "colour": "orange", "code": "    elif isinstance(object, (list, tuple, set)):\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "387", "colour": "orange", "code": "        types += [_type(x) for x in object]\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "388", "colour": "orange", "code": "    # Dictionaries have keys pointing to objects.\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "389", "colour": "orange", "code": "    elif isinstance(object, dict):\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "390", "colour": "green", "code": "        types += [_type(k) for k in object]\n", "error": "W", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "391", "colour": "orange", "code": "        types += [_type(v) for v in object.values()]\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "392", "colour": "orange", "code": "    else:\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "393", "colour": "orange", "code": "        types.append(_type(object))\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "394", "colour": "orange", "code": "    # Clean up type strings.\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "395", "colour": "green", "code": "    m = {}\n", "error": "W", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "396", "colour": "green", "code": "    for i in range(len(types)):\n", "error": "W", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "397", "colour": "orange", "code": "        k = types[i]\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "398", "colour": "orange", "code": "        # Execute the regular expressions once only,\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "399", "colour": "orange", "code": "        # next time we'll have the conversion cached.\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "400", "colour": "orange", "code": "        if k not in m:\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "401", "colour": "orange", "code": "            for a,b in replace:\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "402", "colour": "orange", "code": "                types[i] = re.sub(a, b, types[i])      \n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "403", "colour": "orange", "code": "            m[k] = types[i]      \n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "404", "colour": "orange", "code": "        types[i] = m[k]\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "405", "colour": "orange", "code": "    if not quantify:\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "406", "colour": "orange", "code": "        if not isinstance(object, (list, tuple, set, dict)) and not hasattr(object, \"__dict__\"):\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "407", "colour": "orange", "code": "            return types[0]\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "408", "colour": "orange", "code": "        return types\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "409", "colour": "orange", "code": "    return count(types, plural={\"built-in function\" : \"built-in functions\"})\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "410", "colour": "orange", "code": "\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "411", "colour": "orange", "code": "#print reflect(\"hello\")\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "412", "colour": "orange", "code": "#print reflect([\"hello\", \"goobye\"])\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "413", "colour": "orange", "code": "#print reflect((1,2,3,4,5))\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "414", "colour": "orange", "code": "#print reflect({\"name\": \"linguistics\", \"version\": 1.0})\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "415", "colour": "orange", "code": "#print reflect(reflect)\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "416", "colour": "orange", "code": "#print reflect(__dict__)\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "417", "colour": "orange", "code": "#import Foundation; print reflect(Foundation)\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "418", "colour": "orange", "code": "#import Numeric; print reflect(Numeric)\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}]}