{"path": "/home/asumal/git/cs410/pattern/pattern/server/cherrypy/cherrypy/lib/httpauth.py", "lines": [[{"error": "none", "line": "1", "code": "\"\"\"\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "2", "code": "This module defines functions to implement HTTP Digest Authentication (:rfc:`2617`).\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "3", "code": "This has full compliance with 'Digest' and 'Basic' authentication methods. In\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "4", "code": "'Digest' it supports both MD5 and MD5-sess algorithms.\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "5", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "6", "code": "Usage:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "7", "code": "    First use 'doAuth' to request the client authentication for a\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "8", "code": "    certain resource. You should send an httplib.UNAUTHORIZED response to the\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "9", "code": "    client so he knows he has to authenticate itself.\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "10", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "11", "code": "    Then use 'parseAuthorization' to retrieve the 'auth_map' used in\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "12", "code": "    'checkResponse'.\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "13", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "14", "code": "    To use 'checkResponse' you must have already verified the password associated\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "15", "code": "    with the 'username' key in 'auth_map' dict. Then you use the 'checkResponse'\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "16", "code": "    function to verify if the password matches the one sent by the client.\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "17", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "18", "code": "SUPPORTED_ALGORITHM - list of supported 'Digest' algorithms\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "19", "code": "SUPPORTED_QOP - list of supported 'Digest' 'qop'.\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "20", "code": "\"\"\"\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "21", "code": "__version__ = 1, 0, 1\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "22", "code": "__author__ = \"Tiago Cogumbreiro <cogumbreiro@users.sf.net>\"\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "23", "code": "__credits__ = \"\"\"\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "24", "code": "    Peter van Kampen for its recipe which implement most of Digest authentication:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "25", "code": "    http://aspn.activestate.com/ASPN/Cookbook/Python/Recipe/302378\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "26", "code": "\"\"\"\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "27", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "28", "code": "__license__ = \"\"\"\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "29", "code": "Copyright (c) 2005, Tiago Cogumbreiro <cogumbreiro@users.sf.net>\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "30", "code": "All rights reserved.\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "31", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "32", "code": "Redistribution and use in source and binary forms, with or without modification,\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "33", "code": "are permitted provided that the following conditions are met:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "34", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "35", "code": "    * Redistributions of source code must retain the above copyright notice,\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "36", "code": "      this list of conditions and the following disclaimer.\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "37", "code": "    * Redistributions in binary form must reproduce the above copyright notice,\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "38", "code": "      this list of conditions and the following disclaimer in the documentation\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "39", "code": "      and/or other materials provided with the distribution.\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "40", "code": "    * Neither the name of Sylvain Hellegouarch nor the names of his contributors\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "41", "code": "      may be used to endorse or promote products derived from this software\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "42", "code": "      without specific prior written permission.\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "43", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "44", "code": "THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "45", "code": "ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "46", "code": "WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "47", "code": "DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "48", "code": "FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "49", "code": "DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "50", "code": "SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "51", "code": "CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "52", "code": "OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "53", "code": "OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "54", "code": "\"\"\"\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "55", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "56", "code": "__all__ = (\"digestAuth\", \"basicAuth\", \"doAuth\", \"checkResponse\",\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "57", "code": "           \"parseAuthorization\", \"SUPPORTED_ALGORITHM\", \"md5SessionKey\",\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "58", "code": "           \"calculateNonce\", \"SUPPORTED_QOP\")\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "59", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "60", "code": "################################################################################\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "61", "code": "import time\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "62", "code": "from cherrypy._cpcompat import base64_decode, ntob, md5\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "63", "code": "from cherrypy._cpcompat import parse_http_list, parse_keqv_list\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "64", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "65", "code": "MD5 = \"MD5\"\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "66", "code": "MD5_SESS = \"MD5-sess\"\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "67", "code": "AUTH = \"auth\"\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "68", "code": "AUTH_INT = \"auth-int\"\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "69", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "70", "code": "SUPPORTED_ALGORITHM = (MD5, MD5_SESS)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "71", "code": "SUPPORTED_QOP = (AUTH, AUTH_INT)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "72", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "73", "code": "################################################################################\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "74", "code": "# doAuth\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "75", "code": "#\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "76", "code": "DIGEST_AUTH_ENCODERS = {\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "77", "code": "    MD5: lambda val: md5(ntob(val)).hexdigest(),\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "78", "code": "    MD5_SESS: lambda val: md5(ntob(val)).hexdigest(),\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "79", "code": "#    SHA: lambda val: sha.new(ntob(val)).hexdigest (),\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "80", "code": "}\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "81", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "82", "code": "def calculateNonce (realm, algorithm = MD5):\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "83", "code": "    \"\"\"This is an auxaliary function that calculates 'nonce' value. It is used\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "84", "code": "    to handle sessions.\"\"\"\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "85", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "W", "line": "86", "code": "    global SUPPORTED_ALGORITHM, DIGEST_AUTH_ENCODERS\n", "colour": "purple", "author": "tom@organisms.be"}, {"error": "none", "line": "87", "code": "    assert algorithm in SUPPORTED_ALGORITHM\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "88", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "89", "code": "    try:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "90", "code": "        encoder = DIGEST_AUTH_ENCODERS[algorithm]\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "91", "code": "    except KeyError:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "92", "code": "        raise NotImplementedError (\"The chosen algorithm (%s) does not have \"\\\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "93", "code": "                                   \"an implementation yet\" % algorithm)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "94", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "95", "code": "    return encoder (\"%d:%s\" % (time.time(), realm))\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "96", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "97", "code": "def digestAuth (realm, algorithm = MD5, nonce = None, qop = AUTH):\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "98", "code": "    \"\"\"Challenges the client for a Digest authentication.\"\"\"\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "W", "line": "99", "code": "    global SUPPORTED_ALGORITHM, DIGEST_AUTH_ENCODERS, SUPPORTED_QOP\n", "colour": "purple", "author": "tom@organisms.be"}, {"error": "none", "line": "100", "code": "    assert algorithm in SUPPORTED_ALGORITHM\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "101", "code": "    assert qop in SUPPORTED_QOP\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "102", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "103", "code": "    if nonce is None:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "104", "code": "        nonce = calculateNonce (realm, algorithm)\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "105", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "106", "code": "    return 'Digest realm=\"%s\", nonce=\"%s\", algorithm=\"%s\", qop=\"%s\"' % (\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "107", "code": "        realm, nonce, algorithm, qop\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "108", "code": "    )\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "109", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "110", "code": "def basicAuth (realm):\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "111", "code": "    \"\"\"Challengenes the client for a Basic authentication.\"\"\"\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "112", "code": "    assert '\"' not in realm, \"Realms cannot contain the \\\" (quote) character.\"\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "113", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "114", "code": "    return 'Basic realm=\"%s\"' % realm\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "115", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "116", "code": "def doAuth (realm):\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "117", "code": "    \"\"\"'doAuth' function returns the challenge string b giving priority over\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "118", "code": "    Digest and fallback to Basic authentication when the browser doesn't\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "119", "code": "    support the first one.\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "120", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "121", "code": "    This should be set in the HTTP header under the key 'WWW-Authenticate'.\"\"\"\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "122", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "123", "code": "    return digestAuth (realm) + \" \" + basicAuth (realm)\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "124", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "125", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "126", "code": "################################################################################\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "127", "code": "# Parse authorization parameters\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "128", "code": "#\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "129", "code": "def _parseDigestAuthorization (auth_params):\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "130", "code": "    # Convert the auth params to a dict\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "131", "code": "    items = parse_http_list(auth_params)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "132", "code": "    params = parse_keqv_list(items)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "133", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "134", "code": "    # Now validate the params\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "135", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "136", "code": "    # Check for required parameters\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "137", "code": "    required = [\"username\", \"realm\", \"nonce\", \"uri\", \"response\"]\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "138", "code": "    for k in required:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "139", "code": "        if k not in params:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "140", "code": "            return None\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "141", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "142", "code": "    # If qop is sent then cnonce and nc MUST be present\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "143", "code": "    if \"qop\" in params and not (\"cnonce\" in params \\\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "144", "code": "                                      and \"nc\" in params):\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "145", "code": "        return None\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "146", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "147", "code": "    # If qop is not sent, neither cnonce nor nc can be present\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "148", "code": "    if (\"cnonce\" in params or \"nc\" in params) and \\\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "149", "code": "       \"qop\" not in params:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "150", "code": "        return None\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "151", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "152", "code": "    return params\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "153", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "154", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "155", "code": "def _parseBasicAuthorization (auth_params):\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "156", "code": "    username, password = base64_decode(auth_params).split(\":\", 1)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "157", "code": "    return {\"username\": username, \"password\": password}\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "158", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "159", "code": "AUTH_SCHEMES = {\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "160", "code": "    \"basic\": _parseBasicAuthorization,\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "161", "code": "    \"digest\": _parseDigestAuthorization,\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "162", "code": "}\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "163", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "164", "code": "def parseAuthorization (credentials):\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "165", "code": "    \"\"\"parseAuthorization will convert the value of the 'Authorization' key in\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "166", "code": "    the HTTP header to a map itself. If the parsing fails 'None' is returned.\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "167", "code": "    \"\"\"\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "168", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "W", "line": "169", "code": "    global AUTH_SCHEMES\n", "colour": "purple", "author": "tom@organisms.be"}, {"error": "none", "line": "170", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "171", "code": "    auth_scheme, auth_params  = credentials.split(\" \", 1)\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "C", "line": "172", "code": "    auth_scheme = auth_scheme.lower ()\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "173", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "174", "code": "    parser = AUTH_SCHEMES[auth_scheme]\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "175", "code": "    params = parser (auth_params)\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "176", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "177", "code": "    if params is None:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "178", "code": "        return\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "179", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "180", "code": "    assert \"auth_scheme\" not in params\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "181", "code": "    params[\"auth_scheme\"] = auth_scheme\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "182", "code": "    return params\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "183", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "184", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "185", "code": "################################################################################\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "186", "code": "# Check provided response for a valid password\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "187", "code": "#\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "188", "code": "def md5SessionKey (params, password):\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "189", "code": "    \"\"\"\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "190", "code": "    If the \"algorithm\" directive's value is \"MD5-sess\", then A1\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "191", "code": "    [the session key] is calculated only once - on the first request by the\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "192", "code": "    client following receipt of a WWW-Authenticate challenge from the server.\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "193", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "194", "code": "    This creates a 'session key' for the authentication of subsequent\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "195", "code": "    requests and responses which is different for each \"authentication\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "196", "code": "    session\", thus limiting the amount of material hashed with any one\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "197", "code": "    key.\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "198", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "199", "code": "    Because the server need only use the hash of the user\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "200", "code": "    credentials in order to create the A1 value, this construction could\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "201", "code": "    be used in conjunction with a third party authentication service so\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "202", "code": "    that the web server would not need the actual password value.  The\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "203", "code": "    specification of such a protocol is beyond the scope of this\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "204", "code": "    specification.\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "205", "code": "\"\"\"\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "206", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "207", "code": "    keys = (\"username\", \"realm\", \"nonce\", \"cnonce\")\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "208", "code": "    params_copy = {}\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "209", "code": "    for key in keys:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "210", "code": "        params_copy[key] = params[key]\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "211", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "212", "code": "    params_copy[\"algorithm\"] = MD5_SESS\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "213", "code": "    return _A1 (params_copy, password)\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "214", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "215", "code": "def _A1(params, password):\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "C", "line": "216", "code": "    algorithm = params.get (\"algorithm\", MD5)\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "C", "line": "217", "code": "    H = DIGEST_AUTH_ENCODERS[algorithm]\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "218", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "219", "code": "    if algorithm == MD5:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "220", "code": "        # If the \"algorithm\" directive's value is \"MD5\" or is\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "221", "code": "        # unspecified, then A1 is:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "222", "code": "        # A1 = unq(username-value) \":\" unq(realm-value) \":\" passwd\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "223", "code": "        return \"%s:%s:%s\" % (params[\"username\"], params[\"realm\"], password)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "224", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "225", "code": "    elif algorithm == MD5_SESS:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "226", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "227", "code": "        # This is A1 if qop is set\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "228", "code": "        # A1 = H( unq(username-value) \":\" unq(realm-value) \":\" passwd )\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "229", "code": "        #         \":\" unq(nonce-value) \":\" unq(cnonce-value)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "230", "code": "        h_a1 = H (\"%s:%s:%s\" % (params[\"username\"], params[\"realm\"], password))\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "231", "code": "        return \"%s:%s:%s\" % (h_a1, params[\"nonce\"], params[\"cnonce\"])\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "232", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "233", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "234", "code": "def _A2(params, method, kwargs):\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "235", "code": "    # If the \"qop\" directive's value is \"auth\" or is unspecified, then A2 is:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "236", "code": "    # A2 = Method \":\" digest-uri-value\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "237", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "238", "code": "    qop = params.get (\"qop\", \"auth\")\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "239", "code": "    if qop == \"auth\":\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "240", "code": "        return method + \":\" + params[\"uri\"]\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "241", "code": "    elif qop == \"auth-int\":\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "242", "code": "        # If the \"qop\" value is \"auth-int\", then A2 is:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "243", "code": "        # A2 = Method \":\" digest-uri-value \":\" H(entity-body)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "244", "code": "        entity_body = kwargs.get (\"entity_body\", \"\")\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "C", "line": "245", "code": "        H = kwargs[\"H\"]\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "246", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "247", "code": "        return \"%s:%s:%s\" % (\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "248", "code": "            method,\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "249", "code": "            params[\"uri\"],\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "250", "code": "            H(entity_body)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "251", "code": "        )\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "252", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "253", "code": "    else:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "254", "code": "        raise NotImplementedError (\"The 'qop' method is unknown: %s\" % qop)\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "255", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "256", "code": "def _computeDigestResponse(auth_map, password, method = \"GET\", A1 = None,**kwargs):\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "257", "code": "    \"\"\"\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "258", "code": "    Generates a response respecting the algorithm defined in RFC 2617\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "259", "code": "    \"\"\"\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "260", "code": "    params = auth_map\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "261", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "262", "code": "    algorithm = params.get (\"algorithm\", MD5)\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "263", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "264", "code": "    H = DIGEST_AUTH_ENCODERS[algorithm]\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "C", "line": "265", "code": "    KD = lambda secret, data: H(secret + \":\" + data)\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "266", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "267", "code": "    qop = params.get (\"qop\", None)\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "268", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "269", "code": "    H_A2 = H(_A2(params, method, kwargs))\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "270", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "271", "code": "    if algorithm == MD5_SESS and A1 is not None:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "272", "code": "        H_A1 = H(A1)\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "273", "code": "    else:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "274", "code": "        H_A1 = H(_A1(params, password))\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "275", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "276", "code": "    if qop in (\"auth\", \"auth-int\"):\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "277", "code": "        # If the \"qop\" value is \"auth\" or \"auth-int\":\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "278", "code": "        # request-digest  = <\"> < KD ( H(A1),     unq(nonce-value)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "279", "code": "        #                              \":\" nc-value\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "280", "code": "        #                              \":\" unq(cnonce-value)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "281", "code": "        #                              \":\" unq(qop-value)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "282", "code": "        #                              \":\" H(A2)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "283", "code": "        #                      ) <\">\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "284", "code": "        request = \"%s:%s:%s:%s:%s\" % (\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "285", "code": "            params[\"nonce\"],\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "286", "code": "            params[\"nc\"],\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "287", "code": "            params[\"cnonce\"],\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "288", "code": "            params[\"qop\"],\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "289", "code": "            H_A2,\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "290", "code": "        )\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "291", "code": "    elif qop is None:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "292", "code": "        # If the \"qop\" directive is not present (this construction is\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "293", "code": "        # for compatibility with RFC 2069):\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "294", "code": "        # request-digest  =\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "295", "code": "        #         <\"> < KD ( H(A1), unq(nonce-value) \":\" H(A2) ) > <\">\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "296", "code": "        request = \"%s:%s\" % (params[\"nonce\"], H_A2)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "297", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "298", "code": "    return KD(H_A1, request)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "299", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "300", "code": "def _checkDigestResponse(auth_map, password, method = \"GET\", A1 = None, **kwargs):\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "301", "code": "    \"\"\"This function is used to verify the response given by the client when\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "302", "code": "    he tries to authenticate.\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "303", "code": "    Optional arguments:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "304", "code": "     entity_body - when 'qop' is set to 'auth-int' you MUST provide the\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "305", "code": "                   raw data you are going to send to the client (usually the\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "306", "code": "                   HTML page.\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "307", "code": "     request_uri - the uri from the request line compared with the 'uri'\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "308", "code": "                   directive of the authorization map. They must represent\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "309", "code": "                   the same resource (unused at this time).\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "310", "code": "    \"\"\"\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "311", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "312", "code": "    if auth_map['realm'] != kwargs.get('realm', None):\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "313", "code": "        return False\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "314", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "315", "code": "    response =  _computeDigestResponse(auth_map, password, method, A1,**kwargs)\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "316", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "317", "code": "    return response == auth_map[\"response\"]\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "318", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "W", "line": "319", "code": "def _checkBasicResponse (auth_map, password, method='GET', encrypt=None, **kwargs):\n", "colour": "purple", "author": "tom@organisms.be"}, {"error": "none", "line": "320", "code": "    # Note that the Basic response doesn't provide the realm value so we cannot\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "321", "code": "    # test it\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "322", "code": "    try:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "323", "code": "        return encrypt(auth_map[\"password\"], auth_map[\"username\"]) == password\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "324", "code": "    except TypeError:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "325", "code": "        return encrypt(auth_map[\"password\"]) == password\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "326", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "327", "code": "AUTH_RESPONSES = {\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "328", "code": "    \"basic\": _checkBasicResponse,\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "329", "code": "    \"digest\": _checkDigestResponse,\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "330", "code": "}\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "331", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "332", "code": "def checkResponse (auth_map, password, method = \"GET\", encrypt=None, **kwargs):\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "333", "code": "    \"\"\"'checkResponse' compares the auth_map with the password and optionally\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "334", "code": "    other arguments that each implementation might need.\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "335", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "336", "code": "    If the response is of type 'Basic' then the function has the following\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "337", "code": "    signature::\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "338", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "339", "code": "        checkBasicResponse (auth_map, password) -> bool\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "340", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "341", "code": "    If the response is of type 'Digest' then the function has the following\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "342", "code": "    signature::\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "343", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "344", "code": "        checkDigestResponse (auth_map, password, method = 'GET', A1 = None) -> bool\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "345", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "346", "code": "    The 'A1' argument is only used in MD5_SESS algorithm based responses.\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "347", "code": "    Check md5SessionKey() for more info.\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "348", "code": "    \"\"\"\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "349", "code": "    checker = AUTH_RESPONSES[auth_map[\"auth_scheme\"]]\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "350", "code": "    return checker (auth_map, password, method=method, encrypt=encrypt, **kwargs)\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "351", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "352", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "353", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "354", "code": "\n", "colour": "black", "author": "tom@organisms.be"}]]}