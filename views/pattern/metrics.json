{"path": "/home/asumal/git/cs410/pattern/pattern/metrics.py", "lines": [[{"error": "C", "line": "1", "code": "#### PATTERN | METRICS #############################################################################\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "2", "code": "# coding: utf-8\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "3", "code": "# Copyright (c) 2010 University of Antwerp, Belgium\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "4", "code": "# Author: Tom De Smedt <tom@organisms.be>\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "5", "code": "# License: BSD (see LICENSE.txt for details).\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "6", "code": "# http://www.clips.ua.ac.be/pages/pattern\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "7", "code": "\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "8", "code": "import sys\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "9", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "10", "code": "from time import time\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "11", "code": "from math import sqrt, floor, modf, exp, pi, log\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "12", "code": "\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "13", "code": "from collections import defaultdict, deque\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "14", "code": "from itertools   import chain\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "15", "code": "from operator    import itemgetter\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "16", "code": "from heapq       import nlargest\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "17", "code": "from bisect      import bisect_right\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "18", "code": "from random      import gauss\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "19", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "20", "code": "####################################################################################################\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "21", "code": "# Simple implementation of Counter for Python 2.5 and 2.6.\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "22", "code": "# See also: http://code.activestate.com/recipes/576611/\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "23", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "24", "code": "class Counter(dict):\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "C", "line": "25", "code": "    \n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "W", "line": "26", "code": "    def __init__(self, iterable=None, **kwargs):\n", "colour": "purple", "author": "tom@organisms.be"}, {"error": "none", "line": "27", "code": "        self.update(iterable, **kwargs)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "28", "code": "                        \n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "R", "line": "29", "code": "    def __missing__(self, k):\n", "colour": "green", "author": "tom@organisms.be"}, {"error": "none", "line": "30", "code": "        return 0\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "31", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "32", "code": "    def update(self, iterable=None, **kwargs):\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "33", "code": "        \"\"\" Updates counter with the tallies from the given iterable, dictionary or Counter.\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "34", "code": "        \"\"\"\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "35", "code": "        if kwargs:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "36", "code": "            self.update(kwargs)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "37", "code": "        if hasattr(iterable, \"items\"):\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "38", "code": "            for k, v in iterable.items(): \n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "39", "code": "                self[k] = self.get(k, 0) + v\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "40", "code": "        elif hasattr(iterable, \"__getitem__\") \\\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "41", "code": "          or hasattr(iterable, \"__iter__\"):\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "42", "code": "            for k in iterable: \n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "43", "code": "                self[k] = self.get(k, 0) + 1\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "44", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "45", "code": "    def most_common(self, n=None):\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "46", "code": "        \"\"\" Returns a list of the n most common (element, count)-tuples.\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "47", "code": "        \"\"\"\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "48", "code": "        if n is None:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "49", "code": "            return sorted(self.items(), key=itemgetter(1), reverse=True)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "50", "code": "        return nlargest(n, self.items(), key=itemgetter(1))\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "51", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "52", "code": "    def copy(self):\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "53", "code": "        return Counter(self)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "54", "code": "    \n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "55", "code": "    def __delitem__(self, k):\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "56", "code": "        if k in self: \n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "57", "code": "            dict.__delitem__(self, k)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "58", "code": "    \n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "59", "code": "    def __repr__(self):\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "60", "code": "        return \"Counter({%s})\" % \", \".join(\"%r: %r\" % e for e in self.most_common())\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "61", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "62", "code": "try: \n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "63", "code": "    # Import Counter from Python 2.7+ if possible.\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "64", "code": "    from collections import Counter\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "W", "line": "65", "code": "except:\n", "colour": "purple", "author": "tom@organisms.be"}, {"error": "none", "line": "66", "code": "    pass\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "67", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "68", "code": "def cumsum(iterable):\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "69", "code": "    \"\"\" Returns an iterator over the cumulative sum of values in the given list.\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "70", "code": "    \"\"\"\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "71", "code": "    n = 0\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "C", "line": "72", "code": "    for x in iterable:\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "C", "line": "73", "code": "        n += x\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "74", "code": "        yield n\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "75", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "76", "code": "#### PROFILER ######################################################################################\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "77", "code": "\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "78", "code": "def duration(function, *args, **kwargs):\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "79", "code": "    \"\"\" Returns the running time of the given function, in seconds.\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "80", "code": "    \"\"\"\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "C", "line": "81", "code": "    t = time()\n", "colour": "blue", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "82", "code": "    function(*args, **kwargs)\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "83", "code": "    return time() - t\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "84", "code": "\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "85", "code": "def profile(function, *args, **kwargs):\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "C", "line": "86", "code": "    \"\"\" Returns the performance analysis (as a string) of the given Python function.\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "87", "code": "    \"\"\"\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "C", "line": "88", "code": "    def run():\n", "colour": "blue", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "W", "line": "89", "code": "        function(*args, **kwargs)\n", "colour": "purple", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "90", "code": "    if not hasattr(function, \"__call__\"):\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "91", "code": "        raise TypeError(\"%s is not a function\" % type(function))\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "92", "code": "    try:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "W", "line": "93", "code": "        import cProfile as profile\n", "colour": "purple", "author": "tom@organisms.be"}, {"error": "W", "line": "94", "code": "    except:\n", "colour": "purple", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "95", "code": "        import profile\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "96", "code": "    import pstats\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "97", "code": "    import os\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "C", "line": "98", "code": "    import sys; sys.modules[\"__main__\"].__profile_run__ = run\n", "colour": "blue", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "C", "line": "99", "code": "    id = function.__name__ + \"()\"\n", "colour": "blue", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "100", "code": "    profile.run(\"__profile_run__()\", id)\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "C", "line": "101", "code": "    p = pstats.Stats(id)\n", "colour": "blue", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "102", "code": "    p.stream = open(id, \"w\")\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "103", "code": "    p.sort_stats(\"cumulative\").print_stats(30)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "104", "code": "    p.stream.close()\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "C", "line": "105", "code": "    s = open(id).read()\n", "colour": "blue", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "106", "code": "    os.remove(id)\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "107", "code": "    return s\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "108", "code": "\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "W", "line": "109", "code": "def sizeof(object):\n", "colour": "purple", "author": "tom@organisms.be"}, {"error": "none", "line": "110", "code": "    \"\"\" Returns the memory size of the given object (in bytes).\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "111", "code": "    \"\"\"\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "112", "code": "    return sys.getsizeof(object)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "113", "code": "    \n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "W", "line": "114", "code": "def kb(object):\n", "colour": "purple", "author": "tom@organisms.be"}, {"error": "none", "line": "115", "code": "    \"\"\" Returns the memory size of the given object (in kilobytes).\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "116", "code": "    \"\"\"\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "117", "code": "    return sys.getsizeof(object) * 0.01\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "118", "code": "    \n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "C", "line": "119", "code": "#### PRECISION & RECALL ############################################################################\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "120", "code": "\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "C", "line": "121", "code": "ACCURACY, PRECISION, RECALL, F1_SCORE = \"accuracy\", \"precision\", \"recall\", \"F1-score\"\n", "colour": "blue", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "122", "code": "\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "123", "code": "MACRO = \"macro\"\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "124", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "W", "line": "125", "code": "def confusion_matrix(classify=lambda document: False, documents=[(None,False)]):\n", "colour": "purple", "author": "tom@organisms.be"}, {"error": "C", "line": "126", "code": "    \"\"\" Returns the performance of a binary classification task (i.e., predicts True or False)\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "127", "code": "        as a tuple of (TP, TN, FP, FN):\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "128", "code": "        - TP: true positives  = correct hits, \n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "129", "code": "        - TN: true negatives  = correct rejections,\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "130", "code": "        - FP: false positives = false alarm (= type I error), \n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "131", "code": "        - FN: false negatives = misses (= type II error).\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "132", "code": "        The given classify() function returns True or False for a document.\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "133", "code": "        The list of documents contains (document, bool)-tuples for testing,\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "134", "code": "        where True means a document that should be identified as True by classify().\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "135", "code": "    \"\"\"\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "C", "line": "136", "code": "    TN = TP = FN = FP = 0\n", "colour": "blue", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "C", "line": "137", "code": "    for document, b1 in documents:\n", "colour": "blue", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "C", "line": "138", "code": "        b2 = classify(document)\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "139", "code": "        if b1 and b2:\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "C", "line": "140", "code": "            TP += 1 # true positive\n", "colour": "blue", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "141", "code": "        elif not b1 and not b2:\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "C", "line": "142", "code": "            TN += 1 # true negative\n", "colour": "blue", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "143", "code": "        elif not b1 and b2:\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "C", "line": "144", "code": "            FP += 1 # false positive (type I error)\n", "colour": "blue", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "145", "code": "        elif b1 and not b2:\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "C", "line": "146", "code": "            FN += 1 # false negative (type II error)\n", "colour": "blue", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "147", "code": "    return TP, TN, FP, FN\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "148", "code": "\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "W", "line": "149", "code": "def test(classify=lambda document:False, documents=[], average=None):\n", "colour": "purple", "author": "tom@organisms.be"}, {"error": "none", "line": "150", "code": "    \"\"\" Returns an (accuracy, precision, recall, F1-score)-tuple.\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "C", "line": "151", "code": "        With average=None, precision & recall are computed for the positive class (True).\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "C", "line": "152", "code": "        With average=MACRO, precision & recall for positive and negative class are macro-averaged.\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "153", "code": "    \"\"\"\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "C", "line": "154", "code": "    TP, TN, FP, FN = confusion_matrix(classify, documents)\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "C", "line": "155", "code": "    A  = float(TP + TN) / ((TP + TN + FP + FN) or 1)\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "C", "line": "156", "code": "    P1 = float(TP) / ((TP + FP) or 1) # positive class precision\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "C", "line": "157", "code": "    R1 = float(TP) / ((TP + FN) or 1) # positive class recall\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "C", "line": "158", "code": "    P0 = float(TN) / ((TN + FN) or 1) # negative class precision\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "C", "line": "159", "code": "    R0 = float(TN) / ((TN + FP) or 1) # negative class recall\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "160", "code": "    if average is None:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "161", "code": "        P, R = (P1, R1)\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "162", "code": "    if average == MACRO:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "163", "code": "        P, R = ((P1 + P0) / 2,\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "164", "code": "                (R1 + R0) / 2)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "165", "code": "    F1 = 2 * P * R / ((P + R) or 1)\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "166", "code": "    return (A, P, R, F1)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "167", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "W", "line": "168", "code": "def accuracy(classify=lambda document:False, documents=[], average=None):\n", "colour": "purple", "author": "tom@organisms.be"}, {"error": "C", "line": "169", "code": "    \"\"\" Returns the percentage of correct classifications (true positives + true negatives).\n", "colour": "blue", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "170", "code": "    \"\"\"\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "171", "code": "    return test(classify, documents, average)[0]\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "172", "code": "\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "W", "line": "173", "code": "def precision(classify=lambda document:False, documents=[], average=None):\n", "colour": "purple", "author": "tom@organisms.be"}, {"error": "none", "line": "174", "code": "    \"\"\" Returns the percentage of correct positive classifications.\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "175", "code": "    \"\"\"\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "176", "code": "    return test(classify, documents, average)[1]\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "177", "code": "\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "W", "line": "178", "code": "def recall(classify=lambda document:False, documents=[], average=None):\n", "colour": "purple", "author": "tom@organisms.be"}, {"error": "C", "line": "179", "code": "    \"\"\" Returns the percentage of positive cases correctly classified as positive.\n", "colour": "blue", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "180", "code": "    \"\"\"\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "181", "code": "    return test(classify, documents, average)[2]\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "182", "code": "    \n", "colour": "blue", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "C", "line": "183", "code": "def F1(classify=lambda document:False, documents=[], average=None):\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "184", "code": "    \"\"\" Returns the harmonic mean of precision and recall.\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "185", "code": "    \"\"\"\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "186", "code": "    return test(classify, documents, average)[3]\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "187", "code": "    \n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "C", "line": "188", "code": "def F(classify=lambda document:False, documents=[], beta=1, average=None):\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "189", "code": "    \"\"\" Returns the weighted harmonic mean of precision and recall,\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "190", "code": "        where recall is beta times more important than precision.\n", "colour": "black", "author": "peteris.erins@gmail.com"}, {"error": "none", "line": "191", "code": "    \"\"\"\n", "colour": "black", "author": "peteris.erins@gmail.com"}, {"error": "W", "line": "192", "code": "    A, P, R, F1 = test(classify, documents, average)\n", "colour": "purple", "author": "tom@organisms.be"}, {"error": "none", "line": "193", "code": "    return (beta ** 2 + 1) * P * R / ((beta ** 2 * P + R) or 1)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "194", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "195", "code": "#### SENSITIVITY & SPECIFICITY #####################################################################\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "196", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "W", "line": "197", "code": "def sensitivity(classify=lambda document:False, documents=[]):\n", "colour": "purple", "author": "tom@organisms.be"}, {"error": "C", "line": "198", "code": "    \"\"\" Returns the percentage of positive cases correctly classified as positive (= recall).\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "199", "code": "    \"\"\"\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "E", "line": "200", "code": "    return recall(classify, document, average=None)\n", "colour": "yellow", "author": "tom@organisms.be"}, {"error": "C", "line": "201", "code": "    \n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "W", "line": "202", "code": "def specificity(classify=lambda document:False, documents=[]):\n", "colour": "purple", "author": "tom@organisms.be"}, {"error": "C", "line": "203", "code": "    \"\"\" Returns the percentage of negative cases correctly classified as negative.\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "204", "code": "    \"\"\"\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "W", "line": "205", "code": "    TP, TN, FP, FN = confusion_matrix(classify, documents)\n", "colour": "purple", "author": "epdmitry@yandex.ru"}, {"error": "none", "line": "206", "code": "    return float(TN) / ((TN + FP) or 1)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "207", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "208", "code": "TPR = sensitivity # true positive rate\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "209", "code": "TNR = specificity # true negative rate\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "210", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "211", "code": "#### ROC & AUC #####################################################################################\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "212", "code": "# See: Tom Fawcett (2005), An Introduction to ROC analysis.\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "213", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "W", "line": "214", "code": "def roc(tests=[]):\n", "colour": "purple", "author": "tom@organisms.be"}, {"error": "none", "line": "215", "code": "    \"\"\" Returns the ROC curve as an iterator of (x, y)-points,\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "216", "code": "        for the given list of (TP, TN, FP, FN)-tuples.\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "217", "code": "        The x-axis represents FPR = the false positive rate (1 - specificity).\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "218", "code": "        The y-axis represents TPR = the true positive rate.\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "219", "code": "    \"\"\"\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "W", "line": "220", "code": "    x = FPR = lambda TP, TN, FP, FN: float(FP) / ((FP + TN) or 1)\n", "colour": "purple", "author": "tom@organisms.be"}, {"error": "W", "line": "221", "code": "    y = TPR = lambda TP, TN, FP, FN: float(TP) / ((TP + FN) or 1)\n", "colour": "purple", "author": "tom@organisms.be"}, {"error": "W", "line": "222", "code": "    return sorted([(0.0, 0.0), (1.0, 1.0)] + [(x(*m), y(*m)) for m in tests])\n", "colour": "purple", "author": "tom@organisms.be"}, {"error": "none", "line": "223", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "W", "line": "224", "code": "def auc(curve=[]):\n", "colour": "purple", "author": "tom@organisms.be"}, {"error": "none", "line": "225", "code": "    \"\"\" Returns the area under the curve for the given list of (x, y)-points.\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "226", "code": "        The area is calculated using the trapezoidal rule.\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "227", "code": "        For the area under the ROC-curve, \n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "C", "line": "228", "code": "        the return value is the probability (0.0-1.0) that a classifier will rank \n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "C", "line": "229", "code": "        a random positive document (True) higher than a random negative one (False).\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "230", "code": "    \"\"\"\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "231", "code": "    curve = sorted(curve)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "232", "code": "    # Trapzoidal rule: area = (a + b) * h / 2, where a=y0, b=y1 and h=x1-x0.\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "233", "code": "    return sum(0.5 * (x1 - x0) * (y1 + y0) for (x0, y0), (x1, y1) in sorted(zip(curve, curve[1:])))\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "234", "code": "\n", "colour": "black", "author": "peteris.erins@gmail.com"}, {"error": "C", "line": "235", "code": "#### AGREEMENT #####################################################################################\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "236", "code": "# +1.0 = total agreement between voters\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "237", "code": "# +0.0 = votes based on random chance\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "238", "code": "# -1.0 = total disagreement\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "239", "code": "\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "C", "line": "240", "code": "def fleiss_kappa(m):\n", "colour": "blue", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "241", "code": "    \"\"\" Returns the reliability of agreement as a number between -1.0 and +1.0,\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "242", "code": "        for a number of votes per category per task.\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "243", "code": "        The given m is a list in which each row represents a task.\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "244", "code": "        Each task is a list with the number of votes per category.\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "245", "code": "        Each column represents a category.\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "C", "line": "246", "code": "        For example, say 5 people are asked to vote \"cat\" and \"dog\" as \"good\" or \"bad\":\n", "colour": "blue", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "C", "line": "247", "code": "         m = [# + -        \n", "colour": "blue", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "248", "code": "               [3,2], # cat\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "249", "code": "               [5,0]] # dog\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "250", "code": "    \"\"\"\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "C", "line": "251", "code": "    N = len(m)    # Total number of tasks.\n", "colour": "blue", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "C", "line": "252", "code": "    n = sum(m[0]) # The number of votes per task.\n", "colour": "blue", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "253", "code": "    k = len(m[0]) # The number of categories.\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "254", "code": "    if n == 1:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "255", "code": "        return 1.0\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "256", "code": "    assert all(sum(row) == n for row in m[1:]), \"numer of votes for each task differs\"\n", "colour": "blue", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "257", "code": "    # p[j] = the proportion of all assignments which were to the j-th category.\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "C", "line": "258", "code": "    p = [sum(m[i][j] for i in xrange(N)) / float(N*n) for j in xrange(k)]\n", "colour": "blue", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "259", "code": "    # P[i] = the extent to which voters agree for the i-th subject.\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "C", "line": "260", "code": "    P = [(sum(m[i][j]**2 for j in xrange(k)) - n) / float(n * (n-1)) for i in xrange(N)]\n", "colour": "blue", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "261", "code": "    # Pm = the mean of P[i] and Pe.\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "C", "line": "262", "code": "    Pe = sum(pj**2 for pj in p)\n", "colour": "blue", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "C", "line": "263", "code": "    Pm = sum(P) / N\n", "colour": "blue", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "C", "line": "264", "code": "    K = (Pm - Pe) / ((1 - Pe) or 1) # kappa\n", "colour": "blue", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "265", "code": "    return K\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "C", "line": "266", "code": "    \n", "colour": "blue", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "C", "line": "267", "code": "agreement = fleiss_kappa\n", "colour": "blue", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "268", "code": "\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "C", "line": "269", "code": "#### TEXT METRICS ##################################################################################\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "270", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "271", "code": "#--- SIMILARITY ------------------------------------------------------------------------------------\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "272", "code": "\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "273", "code": "def levenshtein(string1, string2):\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "274", "code": "    \"\"\" Measures the amount of difference between two strings.\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "275", "code": "        The return value is the number of operations (insert, delete, replace)\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "276", "code": "        required to transform string a into string b.\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "277", "code": "    \"\"\"\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "278", "code": "    # http://hetland.org/coding/python/levenshtein.py\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "C", "line": "279", "code": "    n, m = len(string1), len(string2)\n", "colour": "blue", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "C", "line": "280", "code": "    if n > m: \n", "colour": "blue", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "281", "code": "        # Make sure n <= m to use O(min(n,m)) space.\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "C", "line": "282", "code": "        string1, string2, n, m = string2, string1, m, n\n", "colour": "blue", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "283", "code": "    current = range(n+1)\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "284", "code": "    for i in xrange(1, m+1):\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "285", "code": "        previous, current = current, [i]+[0]*n\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "286", "code": "        for j in xrange(1, n+1):\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "287", "code": "            insert, delete, replace = previous[j]+1, current[j-1]+1, previous[j-1]\n", "colour": "blue", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "288", "code": "            if string1[j-1] != string2[i-1]:\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "289", "code": "                replace += 1\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "290", "code": "            current[j] = min(insert, delete, replace)\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "291", "code": "    return current[n]\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "C", "line": "292", "code": "    \n", "colour": "blue", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "C", "line": "293", "code": "edit_distance = levenshtein\n", "colour": "blue", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "294", "code": "\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "295", "code": "def levenshtein_similarity(string1, string2):\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "C", "line": "296", "code": "    \"\"\" Returns the similarity of string1 and string2 as a number between 0.0 and 1.0.\n", "colour": "blue", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "297", "code": "    \"\"\"\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "C", "line": "298", "code": "    return 1 - levenshtein(string1, string2) / float(max(len(string1),  len(string2), 1.0))\n", "colour": "blue", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "C", "line": "299", "code": "    \n", "colour": "blue", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "300", "code": "def dice_coefficient(string1, string2):\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "C", "line": "301", "code": "    \"\"\" Returns the similarity between string1 and string1 as a number between 0.0 and 1.0,\n", "colour": "blue", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "C", "line": "302", "code": "        based on the number of shared bigrams, e.g., \"night\" and \"nacht\" have one common bigram \"ht\".\n", "colour": "blue", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "303", "code": "    \"\"\"\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "C", "line": "304", "code": "    def bigrams(s):\n", "colour": "blue", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "305", "code": "        return set(s[i:i+2] for i in xrange(len(s)-1))\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "306", "code": "    nx = bigrams(string1)\n", "colour": "blue", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "C", "line": "307", "code": "    ny = bigrams(string2)\n", "colour": "blue", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "C", "line": "308", "code": "    nt = nx.intersection(ny)\n", "colour": "blue", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "309", "code": "    return 2.0 * len(nt) / ((len(nx) + len(ny)) or 1)\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "310", "code": "\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "311", "code": "LEVENSHTEIN, DICE = \"levenshtein\", \"dice\"\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "312", "code": "def similarity(string1, string2, metric=LEVENSHTEIN):\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "C", "line": "313", "code": "    \"\"\" Returns the similarity of string1 and string2 as a number between 0.0 and 1.0,\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "314", "code": "        using LEVENSHTEIN edit distance or DICE coefficient.\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "315", "code": "    \"\"\"\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "316", "code": "    if metric == LEVENSHTEIN:\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "317", "code": "        return levenshtein_similarity(string1, string2)\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "318", "code": "    if metric == DICE:\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "319", "code": "        return dice_coefficient(string1, string2)\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "320", "code": "\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "C", "line": "321", "code": "#--- READABILITY -----------------------------------------------------------------------------------\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "322", "code": "# 0.9-1.0 = easily understandable by 11-year old.\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "323", "code": "# 0.6-0.7 = easily understandable by 13- to 15-year old.\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "324", "code": "# 0.0-0.3 = best understood by university graduates.\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "325", "code": "\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "326", "code": "def flesch_reading_ease(string):\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "327", "code": "    \"\"\" Returns the readability of the string as a value between 0.0-1.0:\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "328", "code": "        0.30-0.50 (difficult) => 0.60-0.70 (standard) => 0.90-1.00 (very easy).\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "329", "code": "    \"\"\"\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "C", "line": "330", "code": "    def count_syllables(word, vowels=\"aeiouy\"):\n", "colour": "blue", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "C", "line": "331", "code": "        n = 0\n", "colour": "blue", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "C", "line": "332", "code": "        p = False # True if the previous character was a vowel.\n", "colour": "blue", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "C", "line": "333", "code": "        for ch in word.endswith(\"e\") and word[:-1] or word:\n", "colour": "blue", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "C", "line": "334", "code": "            v = ch in vowels\n", "colour": "blue", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "C", "line": "335", "code": "            n += int(v and not p)\n", "colour": "blue", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "C", "line": "336", "code": "            p = v\n", "colour": "blue", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "337", "code": "        return n\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "338", "code": "    if not isinstance(string, basestring):\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "339", "code": "        raise TypeError(\"%s is not a string\" % repr(string))\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "340", "code": "    if len(string) <  3:\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "341", "code": "        return 1.0\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "342", "code": "    if len(string.split(\" \")) < 2:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "343", "code": "        return 1.0\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "344", "code": "    string = string.strip()\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "345", "code": "    string = string.strip(\"\\\"'().\")\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "346", "code": "    string = string.lower()\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "347", "code": "    string = string.replace(\"!\", \".\")\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "348", "code": "    string = string.replace(\"?\", \".\")\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "349", "code": "    string = string.replace(\",\", \" \")\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "350", "code": "    string = \" \".join(string.split())\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "351", "code": "    y = [count_syllables(w) for w in string.split() if w != \"\"]\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "W", "line": "352", "code": "    w = max(1, len([w for w in string.split(\" \") if w != \"\"]))\n", "colour": "purple", "author": "tom@organisms.be"}, {"error": "C", "line": "353", "code": "    s = max(1, len([s for s in string.split(\".\") if len(s) > 2]))\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "354", "code": "    #R = 206.835 - 1.015 * w/s - 84.6 * sum(y)/w\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "355", "code": "    # Use the Farr, Jenkins & Patterson algorithm,\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "356", "code": "    # which uses simpler syllable counting (count_syllables() is the weak point here). \n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "C", "line": "357", "code": "    R = 1.599 * sum(1 for v in y if v == 1) * 100 / w - 1.015 * w / s - 31.517\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "C", "line": "358", "code": "    R = max(0.0, min(R * 0.01, 1.0))\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "359", "code": "    return R\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "360", "code": "\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "C", "line": "361", "code": "readability = flesch_reading_ease\n", "colour": "blue", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "362", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "363", "code": "#--- INTERTEXTUALITY -------------------------------------------------------------------------------\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "364", "code": "# Intertextuality may be useful for plagiarism detection.\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "365", "code": "# For example, on the Corpus of Plagiarised Short Answers (Clough & Stevenson, 2009),\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "366", "code": "# accuracy (F1) is 94.5% with n=3 and intertextuality threshold > 0.1.\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "367", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "368", "code": "PUNCTUATION = \".,;:!?()[]{}`'\\\"@#$^&*+-|=~_\"\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "369", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "W", "line": "370", "code": "def ngrams(string, n=3, punctuation=PUNCTUATION, **kwargs):\n", "colour": "purple", "author": "tom@organisms.be"}, {"error": "C", "line": "371", "code": "    \"\"\" Returns a list of n-grams (tuples of n successive words) from the given string.\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "372", "code": "        Punctuation marks are stripped from words.\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "373", "code": "    \"\"\"\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "374", "code": "    s = string\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "C", "line": "375", "code": "    s = s.replace(\".\", \" .\")\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "C", "line": "376", "code": "    s = s.replace(\"?\", \" ?\")\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "C", "line": "377", "code": "    s = s.replace(\"!\", \" !\")\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "C", "line": "378", "code": "    s = [w.strip(punctuation) for w in s.split()]\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "C", "line": "379", "code": "    s = [w.strip() for w in s if w.strip()]\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "380", "code": "    return [tuple(s[i:i+n]) for i in xrange(len(s) - n + 1)]\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "381", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "382", "code": "class Weight(float):\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "383", "code": "    \"\"\" A float with a magic \"assessments\" property,\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "384", "code": "        which is the set of all n-grams contributing to the weight.\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "385", "code": "    \"\"\"\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "W", "line": "386", "code": "    def __new__(self, value=0.0, assessments=[]):\n", "colour": "purple", "author": "tom@organisms.be"}, {"error": "none", "line": "387", "code": "        return float.__new__(self, value)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "W", "line": "388", "code": "    def __init__(self, value=0.0, assessments=[]):\n", "colour": "purple", "author": "tom@organisms.be"}, {"error": "none", "line": "389", "code": "        self.assessments = set(assessments)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "390", "code": "    def __iadd__(self, value):\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "391", "code": "        return Weight(self + value, self.assessments)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "392", "code": "    def __isub__(self, value):\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "393", "code": "        return Weight(self - value, self.assessments)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "394", "code": "    def __imul__(self, value):\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "395", "code": "        return Weight(self * value, self.assessments)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "396", "code": "    def __idiv__(self, value):\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "397", "code": "        return Weight(self / value, self.assessments)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "398", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "399", "code": "def intertextuality(texts=[], n=5, weight=lambda ngram: 1.0, **kwargs):\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "400", "code": "    \"\"\" Returns a dictionary of (i, j) => float.\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "401", "code": "        For indices i and j in the given list of texts,\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "402", "code": "        the corresponding float is the percentage of text i that is also in text j.\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "C", "line": "403", "code": "        Overlap is measured by matching n-grams (by default, 5 successive words).\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "C", "line": "404", "code": "        An optional weight function can be used to supply the weight of each n-gram.\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "405", "code": "    \"\"\"\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "W", "line": "406", "code": "    map = {} # n-gram => text id's\n", "colour": "purple", "author": "tom@organisms.be"}, {"error": "W", "line": "407", "code": "    sum = {} # text id => sum of weight(n-gram)\n", "colour": "purple", "author": "tom@organisms.be"}, {"error": "none", "line": "408", "code": "    for i, txt in enumerate(texts):\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "409", "code": "        for j, ngram in enumerate(ngrams(txt, n, **kwargs)):\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "410", "code": "            if ngram not in map:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "411", "code": "                map[ngram] = set()\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "412", "code": "            map[ngram].add(i)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "413", "code": "            sum[i] = sum.get(i, 0) + weight(ngram)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "414", "code": "    w = defaultdict(Weight) # (id1, id2) => percentage of id1 that overlaps with id2\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "415", "code": "    for ngram in map:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "416", "code": "        for i in map[ngram]:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "417", "code": "            for j in map[ngram]:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "418", "code": "                if i != j:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "419", "code": "                    if (i,j) not in w:\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "C", "line": "420", "code": "                        w[i,j] = Weight(0.0)\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "C", "line": "421", "code": "                    w[i,j] += weight(ngram)\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "C", "line": "422", "code": "                    w[i,j].assessments.add(ngram)\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "423", "code": "    for i, j in w:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "424", "code": "        w[i,j] /= float(sum[i])\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "C", "line": "425", "code": "        w[i,j]  = min(w[i,j], Weight(1.0))\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "426", "code": "    return w\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "427", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "428", "code": "#--- WORD TYPE-TOKEN RATIO -------------------------------------------------------------------------\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "429", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "430", "code": "def type_token_ratio(string, n=100, punctuation=PUNCTUATION):\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "C", "line": "431", "code": "    \"\"\" Returns the percentage of unique words in the given string as a number between 0.0-1.0,\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "C", "line": "432", "code": "        as opposed to the total number of words (= lexical diversity, vocabulary richness).\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "433", "code": "    \"\"\"\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "434", "code": "    def window(a, n=100):\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "435", "code": "        if n > 0:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "436", "code": "            for i in xrange(max(len(a) - n + 1, 1)):\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "437", "code": "                yield a[i:i+n]\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "438", "code": "    s = string.lower().split()\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "C", "line": "439", "code": "    s = [w.strip(punctuation) for w in s]\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "440", "code": "    # Covington & McFall moving average TTR algorithm.\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "441", "code": "    return mean(1.0 * len(set(x)) / len(x) for x in window(s, n))\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "442", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "443", "code": "ttr = type_token_ratio\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "444", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "445", "code": "#--- WORD INFLECTION -------------------------------------------------------------------------------\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "446", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "447", "code": "def suffixes(inflections=[], n=3, top=10, reverse=True):\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "448", "code": "    \"\"\" For a given list of (base, inflection)-tuples,\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "449", "code": "        returns a list of (count, inflected suffix, [(base suffix, frequency), ... ]):\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "C", "line": "450", "code": "        suffixes([(\"beau\", \"beaux\"), (\"jeune\", \"jeunes\"), (\"hautain\", \"hautaines\")], n=3) =>\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "451", "code": "        [(2, \"nes\", [(\"ne\", 0.5), (\"n\", 0.5)]), (1, \"aux\", [(\"au\", 1.0)])]\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "452", "code": "    \"\"\"\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "453", "code": "    # This is utility function we use to train singularize() and lemma()\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "454", "code": "    # in pattern.de, pattern.es, pattern.fr, etc.\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "455", "code": "    d = {}\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "C", "line": "456", "code": "    for x, y in (reverse and (y, x) or (x, y) for x, y in inflections):\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "C", "line": "457", "code": "        x0 = x[:-n]      # be-   jeu-  hautai-\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "C", "line": "458", "code": "        x1 = x[-n:]      # -aux  -nes  -nes\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "C", "line": "459", "code": "        y1 = y[len(x0):] # -au   -ne   -n\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "460", "code": "        if x0 + y1 != y:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "461", "code": "            continue\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "462", "code": "        if x1 not in d:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "463", "code": "            d[x1] = {}\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "464", "code": "        if y1 not in d[x1]:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "465", "code": "            d[x1][y1] = 0.0\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "466", "code": "        d[x1][y1] += 1.0\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "467", "code": "    # Sort by frequency of inflected suffix: 2x -nes, 1x -aux.\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "468", "code": "    # Sort by frequency of base suffixes for each inflection:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "469", "code": "    # [(2, \"nes\", [(\"ne\", 0.5), (\"n\", 0.5)]), (1, \"aux\", [(\"au\", 1.0)])]\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "470", "code": "    d = [(int(sum(y.values())), x, y.items()) for x, y in d.items()]\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "C", "line": "471", "code": "    d = sorted(d, reverse=True)\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "C", "line": "472", "code": "    d = ((n, x, (sorted(y, key=itemgetter(1)))) for n, x, y in d)\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "C", "line": "473", "code": "    d = ((n, x, [(y, m / n) for y, m in y]) for n, x, y in d)\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "474", "code": "    return list(d)[:top]\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "475", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "476", "code": "#--- WORD CO-OCCURRENCE ----------------------------------------------------------------------------\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "477", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "R", "line": "478", "code": "class Sentinel(object):\n", "colour": "green", "author": "tom@organisms.be"}, {"error": "none", "line": "479", "code": "    pass\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "480", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "481", "code": "def isplit(string, sep=\"\\t\\n\\x0b\\x0c\\r \"):\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "482", "code": "    \"\"\" Returns an iterator over string.split().\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "483", "code": "        This is efficient in combination with cooccurrence(), \n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "484", "code": "        since the string may be very long (e.g., Brown corpus).\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "485", "code": "    \"\"\"\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "486", "code": "    a = []\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "C", "line": "487", "code": "    for ch in string:\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "C", "line": "488", "code": "        if ch not in sep: \n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "489", "code": "            a.append(ch)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "490", "code": "            continue\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "491", "code": "        if a: yield \"\".join(a); a=[]\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "C", "line": "492", "code": "    if a: yield \"\".join(a)\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "493", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "R", "line": "494", "code": "def cooccurrence(iterable, window=(-1,-1), term1=lambda x: True, term2=lambda x: True, normalize=lambda x: x, matrix=None, update=None):\n", "colour": "green", "author": "tom@organisms.be"}, {"error": "C", "line": "495", "code": "    \"\"\" Returns the co-occurence matrix of terms in the given iterable, string, file or file list,\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "496", "code": "        as a dictionary: {term1: {term2: count, term3: count, ...}}.\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "497", "code": "        The window specifies the size of the co-occurence window.\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "498", "code": "        The term1() function defines anchors.\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "499", "code": "        The term2() function defines co-occurring terms to count.\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "500", "code": "        The normalize() function can be used to remove punctuation, lowercase words, etc.\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "501", "code": "        Optionally, a user-defined matrix to update can be given.\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "502", "code": "        Optionally, a user-defined update(matrix, term1, term2, index2) function can be given.\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "503", "code": "    \"\"\"\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "504", "code": "    if not isinstance(matrix, dict):\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "505", "code": "        matrix = {}\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "506", "code": "    # Memory-efficient iteration:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "507", "code": "    if isinstance(iterable, basestring):\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "508", "code": "        iterable = isplit(iterable)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "509", "code": "    if isinstance(iterable, (list, tuple)) and all(hasattr(f, \"read\") for f in iterable):\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "W", "line": "510", "code": "        iterable = chain(*(isplit(chain(*x)) for x in iterable))\n", "colour": "purple", "author": "tom@organisms.be"}, {"error": "none", "line": "511", "code": "    if hasattr(iterable, \"read\"):\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "W", "line": "512", "code": "        iterable = isplit(chain(*iterable))\n", "colour": "purple", "author": "tom@organisms.be"}, {"error": "none", "line": "513", "code": "    # Window of terms before and after the search term.\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "514", "code": "    # Deque is more efficient than list.pop(0).\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "515", "code": "    q = deque()\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "516", "code": "    # Window size of terms alongside the search term.\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "517", "code": "    # Note that window=(0,0) will return a dictionary of search term frequency\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "518", "code": "    # (since it counts co-occurence with itself).\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "519", "code": "    n = -min(0, window[0]) + max(window[1], 0)\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "C", "line": "520", "code": "    m = matrix\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "C", "line": "521", "code": "    # Search terms may fall outside the co-occurrence window, e.g., window=(-3,-2).\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "522", "code": "    # We add sentinel markers at the start and end of the given iterable.\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "523", "code": "    for x in chain([Sentinel()] * n, iterable, [Sentinel()] * n):\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "524", "code": "        q.append(x)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "525", "code": "        if len(q) > n:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "526", "code": "            # Given window q size and offset,\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "527", "code": "            # find the index of the candidate term:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "528", "code": "            if window[1] >= 0:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "529", "code": "                i = -1 - window[1]\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "530", "code": "            if window[1] < 0:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "531", "code": "                i = len(q) - 1\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "532", "code": "            if i < 0:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "533", "code": "                i = len(q) + i\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "534", "code": "            x1 = q[i]\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "535", "code": "            if not isinstance(x1, Sentinel):\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "536", "code": "                x1 = normalize(x1)\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "537", "code": "                if term1(x1):\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "538", "code": "                    # Iterate the window and filter co-occurent terms.\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "539", "code": "                    for j, x2 in enumerate(list(q).__getslice__(i+window[0], i+window[1]+1)):\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "540", "code": "                        if not isinstance(x2, Sentinel):\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "541", "code": "                            x2 = normalize(x2)\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "542", "code": "                            if term2(x2):\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "543", "code": "                                if update:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "544", "code": "                                    update(matrix, x1, x2, j); continue\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "545", "code": "                                if x1 not in m:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "546", "code": "                                    m[x1] = {}\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "547", "code": "                                if x2 not in m[x1]:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "548", "code": "                                    m[x1][x2] = 0\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "549", "code": "                                m[x1][x2] += 1\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "550", "code": "            # Slide window.\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "551", "code": "            q.popleft()\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "552", "code": "    return m\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "553", "code": "    \n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "C", "line": "554", "code": "co_occurrence = cooccurrence\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "555", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "556", "code": "## Words occuring before and after the word \"cat\":\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "557", "code": "## {\"cat\": {\"sat\": 1, \"black\": 1, \"cat\": 1}}\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "558", "code": "#s = \"The black cat sat on the mat.\"\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "559", "code": "#print(cooccurrence(s, window=(-1,1), \n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "560", "code": "#       search = lambda w: w in (\"cat\",),\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "561", "code": "#    normalize = lambda w: w.lower().strip(\".:;,!?()[]'\\\"\")))\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "562", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "563", "code": "## Adjectives preceding nouns:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "564", "code": "## {(\"cat\", \"NN\"): {(\"black\", \"JJ\"): 1}}\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "565", "code": "#s = [(\"The\",\"DT\"), (\"black\",\"JJ\"), (\"cat\",\"NN\"), (\"sat\",\"VB\"), (\"on\",\"IN\"), (\"the\",\"DT\"), (\"mat\",\"NN\")]\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "C", "line": "566", "code": "#print(cooccurrence(s, window=(-2,-1), \n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "567", "code": "#       search = lambda token: token[1].startswith(\"NN\"),\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "568", "code": "#       filter = lambda token: token[1].startswith(\"JJ\")))\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "569", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "570", "code": "# Adjectives preceding nouns:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "571", "code": "# {(\"cat\", \"NN\"): {(\"black\", \"JJ\"): 1}}\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "572", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "573", "code": "#### STATISTICS ####################################################################################\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "574", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "575", "code": "#--- MEAN ------------------------------------------------------------------------------------------\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "576", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "577", "code": "def mean(iterable):\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "578", "code": "    \"\"\" Returns the arithmetic mean of the given list of values.\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "579", "code": "        For example: mean([1,2,3,4]) = 10/4 = 2.5.\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "580", "code": "    \"\"\"\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "581", "code": "    a = iterable if isinstance(iterable, list) else list(iterable)\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "582", "code": "    return float(sum(a)) / (len(a) or 1)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "583", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "584", "code": "avg = mean\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "585", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "586", "code": "def hmean(iterable):\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "587", "code": "    \"\"\" Returns the harmonic mean of the given list of values.\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "588", "code": "    \"\"\"\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "589", "code": "    a = iterable if isinstance(iterable, list) else list(iterable)\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "590", "code": "    return float(len(a)) / sum(1.0 / x for x in a)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "591", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "592", "code": "def median(iterable, sort=True):\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "593", "code": "    \"\"\" Returns the value that separates the lower half from the higher half of values in the list.\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "594", "code": "    \"\"\"\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "595", "code": "    s = sorted(iterable) if sort is True else list(iterable)\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "C", "line": "596", "code": "    n = len(s)\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "597", "code": "    if n == 0:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "598", "code": "        raise ValueError(\"median() arg is an empty sequence\")\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "599", "code": "    if n % 2 == 0:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "600", "code": "        return float(s[(n // 2) - 1] + s[n // 2]) / 2\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "601", "code": "    return s[n // 2]\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "602", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "603", "code": "def variance(iterable, sample=False):\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "604", "code": "    \"\"\" Returns the variance of the given list of values.\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "605", "code": "        The variance is the average of squared deviations from the mean.\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "606", "code": "    \"\"\"\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "607", "code": "    # Sample variance = E((xi-m)^2) / (n-1)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "608", "code": "    # Population variance = E((xi-m)^2) / n\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "609", "code": "    a = iterable if isinstance(iterable, list) else list(iterable)\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "C", "line": "610", "code": "    m = mean(a)\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "611", "code": "    return sum((x - m) ** 2 for x in a) / (len(a) - int(sample) or 1)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "612", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "613", "code": "def standard_deviation(iterable, *args, **kwargs):\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "614", "code": "    \"\"\" Returns the standard deviation of the given list of values.\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "615", "code": "        Low standard deviation => values are close to the mean.\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "616", "code": "        High standard deviation => values are spread out over a large range.\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "617", "code": "    \"\"\"\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "618", "code": "    return sqrt(variance(iterable, *args, **kwargs))\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "619", "code": "    \n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "C", "line": "620", "code": "stdev = standard_deviation\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "621", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "622", "code": "def simple_moving_average(iterable, k=10):\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "623", "code": "    \"\"\" Returns an iterator over the simple moving average of the given list of values.\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "624", "code": "    \"\"\"\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "625", "code": "    a = iterable if isinstance(iterable, list) else list(iterable)\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "C", "line": "626", "code": "    for m in xrange(len(a)):\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "627", "code": "        i = m - k\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "628", "code": "        j = m + k + 1\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "629", "code": "        w = a[max(0,i):j]\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "630", "code": "        yield float(sum(w)) / (len(w) or 1)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "631", "code": "      \n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "C", "line": "632", "code": "sma = simple_moving_average\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "633", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "W", "line": "634", "code": "def histogram(iterable, k=10, range=None):\n", "colour": "purple", "author": "tom@organisms.be"}, {"error": "none", "line": "635", "code": "    \"\"\" Returns a dictionary with k items: {(start, stop): [values], ...},\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "636", "code": "        with equal (start, stop) intervals between min(list) => max(list).\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "637", "code": "    \"\"\"\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "638", "code": "    # To loop through the intervals in sorted order, use:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "639", "code": "    # for (i, j), values in sorted(histogram(iterable).items()):\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "640", "code": "    #     m = i + (j - i) / 2 # midpoint\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "641", "code": "    #     print(i, j, m, values)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "642", "code": "    a = iterable if isinstance(iterable, list) else list(iterable)\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "C", "line": "643", "code": "    r = range or (min(a), max(a))\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "644", "code": "    k = max(int(k), 1)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "645", "code": "    w = float(r[1] - r[0] + 0.000001) / k # interval (bin width)\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "C", "line": "646", "code": "    h = [[] for i in xrange(k)]\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "C", "line": "647", "code": "    for x in a:\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "648", "code": "        i = int(floor((x - r[0]) / w))\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "649", "code": "        if 0 <= i < len(h): \n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "650", "code": "            #print(x, i, \"(%.2f, %.2f)\" % (r[0] + w * i, r[0] + w + w * i))\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "651", "code": "            h[i].append(x)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "652", "code": "    return dict(((r[0] + w * i, r[0] + w + w * i), v) for i, v in enumerate(h))\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "653", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "654", "code": "#--- MOMENT ----------------------------------------------------------------------------------------\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "655", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "656", "code": "def moment(iterable, n=2, sample=False):\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "657", "code": "    \"\"\" Returns the n-th central moment of the given list of values\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "658", "code": "        (2nd central moment = variance, 3rd and 4th are used to define skewness and kurtosis).\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "659", "code": "    \"\"\"\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "660", "code": "    if n == 1:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "661", "code": "        return 0.0\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "662", "code": "    a = iterable if isinstance(iterable, list) else list(iterable)\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "C", "line": "663", "code": "    m = mean(a)\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "664", "code": "    return sum((x - m) ** n for x in a) / (len(a) - int(sample) or 1)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "665", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "666", "code": "def skewness(iterable, sample=False):\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "667", "code": "    \"\"\" Returns the degree of asymmetry of the given list of values:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "668", "code": "        > 0.0 => relatively few values are higher than mean(list),\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "669", "code": "        < 0.0 => relatively few values are lower than mean(list),\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "670", "code": "        = 0.0 => evenly distributed on both sides of the mean (= normal distribution).\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "671", "code": "    \"\"\"\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "672", "code": "    # Distributions with skew and kurtosis between -1 and +1 \n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "673", "code": "    # can be considered normal by approximation.\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "674", "code": "    a = iterable if isinstance(iterable, list) else list(iterable)\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "675", "code": "    return moment(a, 3, sample) / (moment(a, 2, sample) ** 1.5 or 1)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "676", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "677", "code": "skew = skewness\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "678", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "679", "code": "def kurtosis(iterable, sample=False):\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "680", "code": "    \"\"\" Returns the degree of peakedness of the given list of values:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "681", "code": "        > 0.0 => sharper peak around mean(list) = more infrequent, extreme values,\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "682", "code": "        < 0.0 => wider peak around mean(list),\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "683", "code": "        = 0.0 => normal distribution,\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "684", "code": "        =  -3 => flat\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "685", "code": "    \"\"\"\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "686", "code": "    a = iterable if isinstance(iterable, list) else list(iterable)\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "687", "code": "    return moment(a, 4, sample) / (moment(a, 2, sample) ** 2.0 or 1) - 3\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "688", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "689", "code": "#a = 1\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "690", "code": "#b = 1000\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "691", "code": "#U = [float(i-a)/(b-a) for i in range(a,b)] # uniform distribution\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "692", "code": "#print(abs(-1.2 - kurtosis(U)) < 0.0001)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "693", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "694", "code": "#--- QUANTILE --------------------------------------------------------------------------------------\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "695", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "R", "line": "696", "code": "def quantile(iterable, p=0.5, sort=True, a=1, b=-1, c=0, d=1):\n", "colour": "green", "author": "tom@organisms.be"}, {"error": "none", "line": "697", "code": "    \"\"\" Returns the value from the sorted list at point p (0.0-1.0).\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "698", "code": "        If p falls between two items in the list, the return value is interpolated.\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "699", "code": "        For example, quantile(list, p=0.5) = median(list)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "700", "code": "    \"\"\"\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "701", "code": "    # Based on: Ernesto P. Adorio, http://adorio-research.org/wordpress/?p=125\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "702", "code": "    # Parameters a, b, c, d refer to the algorithm by Hyndman and Fan (1996):\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "703", "code": "    # http://stat.ethz.ch/R-manual/R-patched/library/stats/html/quantile.html\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "704", "code": "    s = sorted(iterable) if sort is True else list(iterable)\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "C", "line": "705", "code": "    n = len(s)\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "C", "line": "706", "code": "    f, i = modf(a + (b+n) * p - 1)\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "707", "code": "    if n == 0:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "708", "code": "        raise ValueError(\"quantile() arg is an empty sequence\")\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "709", "code": "    if f == 0: \n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "710", "code": "        return float(s[int(i)])\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "711", "code": "    if i < 0: \n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "712", "code": "        return float(s[int(i)])\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "713", "code": "    if i >= n: \n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "714", "code": "        return float(s[-1])\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "715", "code": "    i = int(floor(i))\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "716", "code": "    return s[i] + (s[i+1] - s[i]) * (c + d * f)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "717", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "718", "code": "#print(quantile(range(10), p=0.5) == median(range(10)))\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "719", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "720", "code": "def boxplot(iterable, **kwargs):\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "721", "code": "    \"\"\" Returns a tuple (min(list), Q1, Q2, Q3, max(list)) for the given list of values.\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "722", "code": "        Q1, Q2, Q3 are the quantiles at 0.25, 0.5, 0.75 respectively.\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "723", "code": "    \"\"\"\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "724", "code": "    # http://en.wikipedia.org/wiki/Box_plot\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "725", "code": "    kwargs.pop(\"p\", None)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "726", "code": "    kwargs.pop(\"sort\", None)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "727", "code": "    s = sorted(iterable)\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "C", "line": "728", "code": "    Q1 = quantile(s, p=0.25, sort=False, **kwargs)\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "C", "line": "729", "code": "    Q2 = quantile(s, p=0.50, sort=False, **kwargs)\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "C", "line": "730", "code": "    Q3 = quantile(s, p=0.75, sort=False, **kwargs)\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "731", "code": "    return float(min(s)), Q1, Q2, Q3, float(max(s))\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "732", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "733", "code": "#### STATISTICAL TESTS #############################################################################\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "734", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "735", "code": "#--- FISHER'S EXACT TEST ---------------------------------------------------------------------------\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "736", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "W", "line": "737", "code": "def fisher_exact_test(a, b, c, d, **kwargs):\n", "colour": "purple", "author": "tom@organisms.be"}, {"error": "none", "line": "738", "code": "    \"\"\" Fast implementation of Fisher's exact test (two-tailed).\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "739", "code": "        Returns the significance p for the given 2 x 2 contingency table:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "740", "code": "        p < 0.05: significant\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "741", "code": "        p < 0.01: very significant\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "742", "code": "        The following test shows a very significant correlation between gender & dieting:\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "743", "code": "        -----------------------------\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "744", "code": "        |             | men | women |\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "745", "code": "        |     dieting |  1  |   9   |\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "746", "code": "        | non-dieting | 11  |   3   |\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "747", "code": "        -----------------------------\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "748", "code": "        fisher_exact_test(a=1, b=9, c=11, d=3) => 0.0028\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "749", "code": "    \"\"\"\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "750", "code": "    _cache = {}\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "751", "code": "    # Hypergeometric distribution.\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "752", "code": "    # (a+b)!(c+d)!(a+c)!(b+d)! / a!b!c!d!n! for n=a+b+c+d\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "753", "code": "    def p(a, b, c, d):\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "754", "code": "        return C(a + b, a) * C(c + d, c) / C(a + b + c + d, a + c)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "755", "code": "    # Binomial coefficient.\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "756", "code": "    # n! / k!(n-k)! for 0 <= k <= n\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "757", "code": "    def C(n, k):\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "758", "code": "        if len(_cache) > 10000:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "759", "code": "            _cache.clear()\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "760", "code": "        if k > n - k: # 2x speedup.\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "761", "code": "            k = n - k\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "762", "code": "        if 0 <= k <= n and (n, k) not in _cache:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "763", "code": "            c = 1.0\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "764", "code": "            for i in xrange(1, int(k + 1)):\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "765", "code": "                c *= n - k + i\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "C", "line": "766", "code": "                c /= i\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "767", "code": "            _cache[(n, k)] = c # 3x speedup.\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "768", "code": "        return _cache.get((n, k), 0.0)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "769", "code": "    # Probability of the given data.\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "770", "code": "    cutoff = p(a, b, c, d)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "771", "code": "    # Probabilities of \"more extreme\" data, in both directions (two-tailed).\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "772", "code": "    # Based on: http://www.koders.com/java/fid868948AD5196B75C4C39FEA15A0D6EAF34920B55.aspx?s=252\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "C", "line": "773", "code": "    s = [cutoff] + \\\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "774", "code": "        [p(a+i, b-i, c-i, d+i) for i in xrange(1, min(int(b), int(c)) + 1)] + \\\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "775", "code": "        [p(a-i, b+i, c+i, d-i) for i in xrange(1, min(int(a), int(d)) + 1)]\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "776", "code": "    return sum(v for v in s if v <= cutoff) or 0.0\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "777", "code": "    \n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "C", "line": "778", "code": "fisher = fisher_test = fisher_exact_test\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "779", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "780", "code": "#--- PEARSON'S CHI-SQUARED TEST --------------------------------------------------------------------\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "781", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "782", "code": "LOWER = \"lower\"\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "783", "code": "UPPER = \"upper\" \n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "784", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "785", "code": "def _expected(observed):\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "786", "code": "    \"\"\" Returns the table of (absolute) expected frequencies\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "787", "code": "        from the given table of observed frequencies.\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "788", "code": "    \"\"\"\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "789", "code": "    o = observed\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "790", "code": "    if len(o) == 0:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "791", "code": "        return []\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "792", "code": "    if len(o) == 1:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "793", "code": "        return [[sum(o[0]) / float(len(o[0]))] * len(o[0])]\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "794", "code": "    n = [sum(o[i]) for i in xrange(len(o))]\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "C", "line": "795", "code": "    m = [sum(o[i][j] for i in xrange(len(o))) for j in xrange(len(o[0]))]\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "C", "line": "796", "code": "    s = float(sum(n))\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "797", "code": "    # Each cell = row sum * column sum / total.\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "798", "code": "    return [[n[i] * m[j] / s for j in xrange(len(o[i]))] for i in xrange(len(o))]\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "799", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "800", "code": "def pearson_chi_squared_test(observed=[], expected=[], df=None, tail=UPPER):\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "C", "line": "801", "code": "    \"\"\" Returns (x2, p) for the n x m observed and expected data (containing absolute frequencies).\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "802", "code": "        If expected is None, an equal distribution over all classes is assumed.\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "803", "code": "        If df is None, it is (n-1) * (m-1).\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "804", "code": "        p < 0.05: significant\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "805", "code": "        p < 0.01: very significant\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "806", "code": "        This means that if p < 5%, the data is unevenly distributed (e.g., biased).\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "807", "code": "        The following test shows that the die is fair:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "808", "code": "        ---------------------------------------\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "809", "code": "        |       | 1  | 2  | 3  | 4  | 5  | 6  | \n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "810", "code": "        | rolls | 22 | 21 | 22 | 27 | 22 | 36 |\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "811", "code": "        ---------------------------------------\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "812", "code": "        chi2([[22, 21, 22, 27, 22, 36]]) => (6.72, 0.24)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "813", "code": "    \"\"\"\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "814", "code": "    # The p-value (upper tail area) is obtained from the incomplete gamma integral:\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "815", "code": "    # p(x2 | v) = gammai(v/2, x/2) with v degrees of freedom.\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "816", "code": "    # See: Cephes, https://github.com/scipy/scipy/blob/master/scipy/special/cephes/chdtr.c\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "C", "line": "817", "code": "    o  = list(observed)\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "C", "line": "818", "code": "    e  = list(expected) or _expected(o)\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "C", "line": "819", "code": "    n  = len(o)\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "C", "line": "820", "code": "    m  = len(o[0]) if o else 0\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "821", "code": "    df = df or (n-1) * (m-1)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "822", "code": "    df = df or (m == 1 and n-1 or m-1)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "823", "code": "    x2 = 0.0\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "824", "code": "    for i in xrange(n):\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "825", "code": "        for j in xrange(m):\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "826", "code": "            if o[i][j] != 0 and e[i][j] != 0:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "827", "code": "                x2 += (o[i][j] - e[i][j]) ** 2.0 / e[i][j]  \n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "C", "line": "828", "code": "    p = gammai(df * 0.5, x2 * 0.5, tail)\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "829", "code": "    return (x2, p)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "830", "code": "    \n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "C", "line": "831", "code": "X2 = x2 = chi2 = chi_square = chi_squared = pearson_chi_squared_test\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "832", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "W", "line": "833", "code": "def chi2p(x2, df=1, tail=UPPER):\n", "colour": "purple", "author": "tom@organisms.be"}, {"error": "none", "line": "834", "code": "    \"\"\" Returns p-value for given x2 and degrees of freedom.\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "835", "code": "    \"\"\"\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "836", "code": "    return gammai(df * 0.5, x2 * 0.5, tail)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "837", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "838", "code": "#o, e = [[44, 56]], [[50, 50]]\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "839", "code": "#assert round(chi_squared(o, e)[0], 4)  == 1.4400\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "840", "code": "#assert round(chi_squared(o, e)[1], 4)  == 0.2301\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "841", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "842", "code": "#--- PEARSON'S LOG LIKELIHOOD RATIO APPROXIMATION --------------------------------------------------\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "843", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "844", "code": "def pearson_log_likelihood_ratio(observed=[], expected=[], df=None, tail=UPPER):\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "C", "line": "845", "code": "    \"\"\" Returns (g, p) for the n x m observed and expected data (containing absolute frequencies).\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "846", "code": "        If expected is None, an equal distribution over all classes is assumed.\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "847", "code": "        If df is None, it is (n-1) * (m-1).\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "848", "code": "        p < 0.05: significant\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "849", "code": "        p < 0.01: very significant\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "850", "code": "    \"\"\"\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "851", "code": "    o  = list(observed)\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "C", "line": "852", "code": "    e  = list(expected) or _expected(o)\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "C", "line": "853", "code": "    n  = len(o)\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "C", "line": "854", "code": "    m  = len(o[0]) if o else 0\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "855", "code": "    df = df or (n-1) * (m-1)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "856", "code": "    df = df or (m == 1 and n-1 or m-1)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "857", "code": "    g  = 0.0\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "858", "code": "    for i in xrange(n):\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "859", "code": "        for j in xrange(m):\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "860", "code": "            if o[i][j] != 0 and e[i][j] != 0:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "861", "code": "                g += o[i][j] * log(o[i][j] / e[i][j])\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "C", "line": "862", "code": "    g = g * 2\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "C", "line": "863", "code": "    p = gammai(df * 0.5, g * 0.5, tail)\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "864", "code": "    return (g, p)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "865", "code": "    \n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "C", "line": "866", "code": "llr = likelihood = pearson_log_likelihood_ratio\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "867", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "868", "code": "#--- KOLMOGOROV-SMIRNOV TWO SAMPLE TEST ------------------------------------------------------------\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "869", "code": "# Based on: https://github.com/scipy/scipy/blob/master/scipy/stats/stats.py\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "870", "code": "# Thanks to prof. F. De Smedt for additional information.\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "871", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "872", "code": "NORMAL = \"normal\"\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "873", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "874", "code": "def kolmogorov_smirnov_two_sample_test(a1, a2=NORMAL, n=1000):\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "C", "line": "875", "code": "    \"\"\" Returns the likelihood that two independent samples are drawn from the same distribution.\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "876", "code": "        Returns a (d, p)-tuple with maximum distance d and two-tailed p-value.\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "877", "code": "        By default, the second sample is the normal distribution.\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "878", "code": "    \"\"\"\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "879", "code": "    if a2 == NORMAL:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "880", "code": "        a2 = norm(max(n, len(a1)), mean(a1), stdev(a1))\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "881", "code": "    n1 = float(len(a1))\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "C", "line": "882", "code": "    n2 = float(len(a2))\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "883", "code": "    a1 = sorted(a1) # [1, 2, 5]\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "884", "code": "    a2 = sorted(a2) # [3, 4, 6]\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "885", "code": "    a3 = a1 + a2    # [1, 2, 5, 3, 4, 6]\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "C", "line": "886", "code": "    # Find the indices in a1 so that, \n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "887", "code": "    # if the values in a3 were inserted before these indices,\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "888", "code": "    # the order of a1 would be preserved:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "889", "code": "    cdf1 = [bisect_right(a1, v) for v in a3] # [1, 2, 3, 2, 2, 3]\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "890", "code": "    cdf2 = [bisect_right(a2, v) for v in a3]\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "891", "code": "    # Cumulative distributions.\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "892", "code": "    cdf1 = [v / n1 for v in cdf1]\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "893", "code": "    cdf2 = [v / n2 for v in cdf2]\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "894", "code": "    # Compute maximum deviation between cumulative distributions.\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "895", "code": "    d = max(abs(v1 - v2) for v1, v2 in zip(cdf1, cdf2))\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "896", "code": "    # Compute p-value.\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "897", "code": "    e = sqrt(n1 * n2 / (n1 + n2))\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "C", "line": "898", "code": "    p = kolmogorov((e + 0.12 + 0.11 / e) * d)\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "899", "code": "    return d, p\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "900", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "901", "code": "ks2 = kolmogorov_smirnov_two_sample_test\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "902", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "903", "code": "#### SPECIAL FUNCTIONS #############################################################################\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "904", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "905", "code": "#--- GAMMA FUNCTION --------------------------------------------------------------------------------\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "906", "code": "# Based on: http://www.johnkerl.org/python/sp_funcs_m.py.txt, Tom Loredo\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "907", "code": "# See also: http://www.mhtl.uwaterloo.ca/courses/me755/web_chap1.pdf\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "908", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "909", "code": "def gamma(x):\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "910", "code": "    \"\"\" Returns the gamma function at x.\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "911", "code": "    \"\"\"\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "912", "code": "    return exp(gammaln(x))\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "913", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "914", "code": "def gammaln(x):\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "915", "code": "    \"\"\" Returns the natural logarithm of the gamma function at x.\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "916", "code": "    \"\"\"\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "917", "code": "    x = x - 1.0\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "918", "code": "    y = x + 5.5\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "C", "line": "919", "code": "    y = (x + 0.5) * log(y) - y\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "C", "line": "920", "code": "    n = 1.0\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "921", "code": "    for i in range(6):\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "922", "code": "        x += 1\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "923", "code": "        n += (\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "C", "line": "924", "code": "          76.18009173, \n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "C", "line": "925", "code": "         -86.50532033, \n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "C", "line": "926", "code": "          24.01409822, \n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "C", "line": "927", "code": "          -1.231739516e0, \n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "C", "line": "928", "code": "           0.120858003e-2, \n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "C", "line": "929", "code": "          -0.536382e-5)[i] / x\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "930", "code": "    return y + log(2.50662827465 * n)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "931", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "932", "code": "lgamma = gammaln\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "933", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "R", "line": "934", "code": "def gammai(a, x, tail=UPPER):\n", "colour": "green", "author": "tom@organisms.be"}, {"error": "none", "line": "935", "code": "    \"\"\" Returns the incomplete gamma function for LOWER or UPPER tail.\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "936", "code": "    \"\"\"\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "937", "code": "    \n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "938", "code": "    # Series approximation.\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "939", "code": "    def _gs(a, x, epsilon=3.e-7, iterations=700):\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "C", "line": "940", "code": "        ln = gammaln(a)\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "C", "line": "941", "code": "        s = 1.0 / a\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "C", "line": "942", "code": "        d = 1.0 / a\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "943", "code": "        for i in xrange(1, iterations):\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "944", "code": "            d = d * x / (a + i)\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "C", "line": "945", "code": "            s = s + d\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "946", "code": "            if abs(d) < abs(s) * epsilon:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "947", "code": "                return (s * exp(-x + a * log(x) - ln), ln)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "948", "code": "        raise StopIteration(abs(d), abs(s) * epsilon)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "949", "code": "    \n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "950", "code": "    # Continued fraction approximation.\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "951", "code": "    def _gf(a, x, epsilon=3.e-7, iterations=200):\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "C", "line": "952", "code": "        ln = gammaln(a)\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "C", "line": "953", "code": "        g0 = 0.0\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "C", "line": "954", "code": "        a0 = 1.0\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "C", "line": "955", "code": "        b0 = 0.0\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "C", "line": "956", "code": "        a1 = x\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "C", "line": "957", "code": "        b1 = 1.0\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "C", "line": "958", "code": "        f  = 1.0\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "959", "code": "        for i in xrange(1, iterations):\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "960", "code": "            a0 = (a1 + a0 * (i - a)) * f\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "C", "line": "961", "code": "            b0 = (b1 + b0 * (i - a)) * f\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "C", "line": "962", "code": "            a1 = x * a0 + a1 * i * f\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "C", "line": "963", "code": "            b1 = x * b0 + b1 * i * f\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "964", "code": "            if a1 != 0.0:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "965", "code": "                f = 1.0 / a1\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "C", "line": "966", "code": "                g = b1 * f\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "967", "code": "                if abs((g - g0) / g) < epsilon:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "968", "code": "                    return (g * exp(-x + a * log(x) - ln), ln)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "969", "code": "                g0 = g\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "970", "code": "        raise StopIteration(abs((g-g0) / g))\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "971", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "972", "code": "    if a <= 0.0:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "973", "code": "        return 1.0\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "974", "code": "    if x <= 0.0:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "975", "code": "        return 1.0\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "976", "code": "    if x < a + 1:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "977", "code": "        if tail == LOWER:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "978", "code": "            return _gs(a, x)[0]\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "979", "code": "        return 1 - _gs(a, x)[0]\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "980", "code": "    else:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "981", "code": "        if tail == UPPER:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "982", "code": "            return _gf(a, x)[0]\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "983", "code": "        return 1 - _gf(a, x)[0]\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "984", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "985", "code": "#--- ERROR FUNCTION --------------------------------------------------------------------------------\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "986", "code": "# Based on: http://www.johnkerl.org/python/sp_funcs_m.py.txt, Tom Loredo\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "987", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "988", "code": "def erf(x):\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "989", "code": "    \"\"\" Returns the error function at x.\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "990", "code": "    \"\"\"\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "991", "code": "    return 1.0 - erfc(x)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "992", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "993", "code": "def erfc(x):\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "994", "code": "    \"\"\" Returns the complementary error function at x.\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "995", "code": "    \"\"\"\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "996", "code": "    z = abs(x)\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "C", "line": "997", "code": "    t = 1.0 / (1 + 0.5 * z)\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "C", "line": "998", "code": "    r = 0.0\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "C", "line": "999", "code": "    for y in (\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "C", "line": "1000", "code": "      0.17087277, \n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "C", "line": "1001", "code": "     -0.82215223, \n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "C", "line": "1002", "code": "      1.48851587, \n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "C", "line": "1003", "code": "     -1.13520398, \n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "C", "line": "1004", "code": "      0.27886807, \n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "C", "line": "1005", "code": "     -0.18628806, \n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "C", "line": "1006", "code": "      0.09678418, \n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "C", "line": "1007", "code": "      0.37409196, \n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "C", "line": "1008", "code": "      1.00002368, \n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "C", "line": "1009", "code": "     -1.26551223):\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "C", "line": "1010", "code": "        r = y + t * r\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "C", "line": "1011", "code": "    r = t * exp(-z ** 2 + r)\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "1012", "code": "    if x >= 0:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1013", "code": "        return r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1014", "code": "    return 2.0 - r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1015", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "1016", "code": "#--- NORMAL DISTRIBUTION ---------------------------------------------------------------------------\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "1017", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "W", "line": "1018", "code": "def cdf(x, mean=0.0, stdev=1.0):\n", "colour": "purple", "author": "tom@organisms.be"}, {"error": "none", "line": "1019", "code": "    \"\"\" Returns the cumulative distribution function at x.\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1020", "code": "    \"\"\"\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1021", "code": "    return min(1.0, 0.5 * erfc((-x + mean) / (stdev * 2**0.5)))\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1022", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "W", "line": "1023", "code": "def pdf(x, mean=0.0, stdev=1.0):\n", "colour": "purple", "author": "tom@organisms.be"}, {"error": "none", "line": "1024", "code": "    \"\"\" Returns the probability density function at x:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "1025", "code": "        the likelihood of x in a distribution with given mean and standard deviation.\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "1026", "code": "    \"\"\"\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "1027", "code": "    u = float(x - mean) / abs(stdev)\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "1028", "code": "    return (1 / (sqrt(2*pi) * abs(stdev))) * exp(-u*u / 2)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "1029", "code": "    \n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "C", "line": "1030", "code": "normpdf = pdf\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "1031", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "W", "line": "1032", "code": "def norm(n, mean=0.0, stdev=1.0):\n", "colour": "purple", "author": "tom@organisms.be"}, {"error": "none", "line": "1033", "code": "    \"\"\" Returns a list of n random samples from the normal distribution.\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1034", "code": "    \"\"\"\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "W", "line": "1035", "code": "    return [gauss(mean, stdev) for i in xrange(n)]\n", "colour": "purple", "author": "tom@organisms.be"}, {"error": "none", "line": "1036", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "1037", "code": "#--- KOLMOGOROV DISTRIBUTION -----------------------------------------------------------------------\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "C", "line": "1038", "code": "# Based on: http://www.math.ucla.edu/~tom/distributions/Kolmogorov.html, Thomas Ferguson\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "1039", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "1040", "code": "def kolmogorov(x):\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "C", "line": "1041", "code": "    \"\"\" Returns the approximation of Kolmogorov's distribution of the two-sample test.\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "1042", "code": "        For a sample of size m and a sample of size n,\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1043", "code": "        it is the probability that the maximum deviation > x / sqrt(m+n).\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1044", "code": "    \"\"\"\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1045", "code": "    if x < 0.27:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1046", "code": "        return 1.0\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1047", "code": "    if x > 3.2:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1048", "code": "        return 0.0\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1049", "code": "    x = -2.0 * x * x\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1050", "code": "    k = 0\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1051", "code": "    for i in reversed(range(1, 27+1, 2)): # 27 25 23 ... 1\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1052", "code": "        k = (1 - k) * exp(x * i)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1053", "code": "    return 2.0 * k\n", "colour": "black", "author": "tom@organisms.be"}]]}