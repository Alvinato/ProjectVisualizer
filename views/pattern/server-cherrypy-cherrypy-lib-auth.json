{"path": "/home/asumal/git/cs410/pattern/pattern/server/cherrypy/cherrypy/lib/auth.py", "lines": [[{"error": "C", "line": "1", "code": "import cherrypy\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "2", "code": "from cherrypy.lib import httpauth\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "3", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "4", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "5", "code": "def check_auth(users, encrypt=None, realm=None):\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "6", "code": "    \"\"\"If an authorization header contains credentials, return True, else False.\"\"\"\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "7", "code": "    request = cherrypy.serving.request\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "8", "code": "    if 'authorization' in request.headers:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "9", "code": "        # make sure the provided credentials are correctly set\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "10", "code": "        ah = httpauth.parseAuthorization(request.headers['authorization'])\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "11", "code": "        if ah is None:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "12", "code": "            raise cherrypy.HTTPError(400, 'Bad Request')\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "13", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "14", "code": "        if not encrypt:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "15", "code": "            encrypt = httpauth.DIGEST_AUTH_ENCODERS[httpauth.MD5]\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "16", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "17", "code": "        if hasattr(users, '__call__'):\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "18", "code": "            try:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "19", "code": "                # backward compatibility\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "20", "code": "                users = users() # expect it to return a dictionary\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "21", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "22", "code": "                if not isinstance(users, dict):\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "23", "code": "                    raise ValueError(\"Authentication users must be a dictionary\")\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "24", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "25", "code": "                # fetch the user password\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "26", "code": "                password = users.get(ah[\"username\"], None)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "27", "code": "            except TypeError:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "28", "code": "                # returns a password (encrypted or clear text)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "29", "code": "                password = users(ah[\"username\"])\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "30", "code": "        else:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "31", "code": "            if not isinstance(users, dict):\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "32", "code": "                raise ValueError(\"Authentication users must be a dictionary\")\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "33", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "34", "code": "            # fetch the user password\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "35", "code": "            password = users.get(ah[\"username\"], None)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "36", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "37", "code": "        # validate the authorization by re-computing it here\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "38", "code": "        # and compare it with what the user-agent provided\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "39", "code": "        if httpauth.checkResponse(ah, password, method=request.method,\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "40", "code": "                                  encrypt=encrypt, realm=realm):\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "41", "code": "            request.login = ah[\"username\"]\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "42", "code": "            return True\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "43", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "44", "code": "        request.login = False\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "45", "code": "    return False\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "46", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "47", "code": "def basic_auth(realm, users, encrypt=None, debug=False):\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "48", "code": "    \"\"\"If auth fails, raise 401 with a basic authentication header.\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "49", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "50", "code": "    realm\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "51", "code": "        A string containing the authentication realm.\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "52", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "53", "code": "    users\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "54", "code": "        A dict of the form: {username: password} or a callable returning a dict.\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "55", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "56", "code": "    encrypt\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "57", "code": "        callable used to encrypt the password returned from the user-agent.\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "58", "code": "        if None it defaults to a md5 encryption.\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "59", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "60", "code": "    \"\"\"\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "61", "code": "    if check_auth(users, encrypt):\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "62", "code": "        if debug:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "63", "code": "            cherrypy.log('Auth successful', 'TOOLS.BASIC_AUTH')\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "64", "code": "        return\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "65", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "66", "code": "    # inform the user-agent this path is protected\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "67", "code": "    cherrypy.serving.response.headers['www-authenticate'] = httpauth.basicAuth(realm)\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "68", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "69", "code": "    raise cherrypy.HTTPError(401, \"You are not authorized to access that resource\")\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "70", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "71", "code": "def digest_auth(realm, users, debug=False):\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "72", "code": "    \"\"\"If auth fails, raise 401 with a digest authentication header.\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "73", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "74", "code": "    realm\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "75", "code": "        A string containing the authentication realm.\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "76", "code": "    users\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "77", "code": "        A dict of the form: {username: password} or a callable returning a dict.\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "78", "code": "    \"\"\"\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "79", "code": "    if check_auth(users, realm=realm):\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "80", "code": "        if debug:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "81", "code": "            cherrypy.log('Auth successful', 'TOOLS.DIGEST_AUTH')\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "82", "code": "        return\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "83", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "84", "code": "    # inform the user-agent this path is protected\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "85", "code": "    cherrypy.serving.response.headers['www-authenticate'] = httpauth.digestAuth(realm)\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "86", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "87", "code": "    raise cherrypy.HTTPError(401, \"You are not authorized to access that resource\")\n", "colour": "blue", "author": "tom@organisms.be"}]]}