{"path": "/home/asumal/git/cs410/pattern/pattern/web/pdf/pdfparser.py", "lines": [{"index": "1", "colour": "orange", "code": "#!/usr/bin/env python2\n", "error": "none", "author": "tom@organisms.be"}, {"index": "2", "colour": "orange", "code": "import sys\n", "error": "none", "author": "tom@organisms.be"}, {"index": "3", "colour": "orange", "code": "import re\n", "error": "none", "author": "tom@organisms.be"}, {"index": "4", "colour": "orange", "code": "import struct\n", "error": "none", "author": "tom@organisms.be"}, {"index": "5", "colour": "orange", "code": "try:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "6", "colour": "orange", "code": "    import hashlib as md5\n", "error": "none", "author": "tom@organisms.be"}, {"index": "7", "colour": "orange", "code": "except ImportError:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "8", "colour": "orange", "code": "    import md5\n", "error": "none", "author": "tom@organisms.be"}, {"index": "9", "colour": "orange", "code": "try:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "10", "colour": "orange", "code": "    from cStringIO import StringIO\n", "error": "none", "author": "tom@organisms.be"}, {"index": "11", "colour": "orange", "code": "except ImportError:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "12", "colour": "orange", "code": "    from StringIO import StringIO\n", "error": "none", "author": "tom@organisms.be"}, {"index": "13", "colour": "green", "code": "from psparser import PSStackParser\n", "error": "W", "author": "tom@organisms.be"}, {"index": "14", "colour": "green", "code": "from psparser import PSSyntaxError, PSEOF\n", "error": "W", "author": "tom@organisms.be"}, {"index": "15", "colour": "green", "code": "from psparser import literal_name\n", "error": "W", "author": "tom@organisms.be"}, {"index": "16", "colour": "green", "code": "from psparser import LIT, KWD, STRICT\n", "error": "W", "author": "tom@organisms.be"}, {"index": "17", "colour": "green", "code": "from pdftypes import PDFException, PDFTypeError, PDFNotImplementedError\n", "error": "W", "author": "tom@organisms.be"}, {"index": "18", "colour": "green", "code": "from pdftypes import PDFStream, PDFObjRef\n", "error": "W", "author": "tom@organisms.be"}, {"index": "19", "colour": "green", "code": "from pdftypes import resolve1, decipher_all\n", "error": "W", "author": "tom@organisms.be"}, {"index": "20", "colour": "green", "code": "from pdftypes import int_value, float_value, num_value\n", "error": "W", "author": "tom@organisms.be"}, {"index": "21", "colour": "green", "code": "from pdftypes import str_value, list_value, dict_value, stream_value\n", "error": "W", "author": "tom@organisms.be"}, {"index": "22", "colour": "green", "code": "from arcfour import Arcfour\n", "error": "W", "author": "tom@organisms.be"}, {"index": "23", "colour": "green", "code": "from utils import choplist, nunpack\n", "error": "W", "author": "tom@organisms.be"}, {"index": "24", "colour": "green", "code": "from utils import decode_text, ObjIdRange\n", "error": "W", "author": "tom@organisms.be"}, {"index": "25", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "26", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "27", "colour": "orange", "code": "##  Exceptions\n", "error": "none", "author": "tom@organisms.be"}, {"index": "28", "colour": "orange", "code": "##\n", "error": "none", "author": "tom@organisms.be"}, {"index": "29", "colour": "orange", "code": "class PDFSyntaxError(PDFException): pass\n", "error": "none", "author": "tom@organisms.be"}, {"index": "30", "colour": "orange", "code": "class PDFNoValidXRef(PDFSyntaxError): pass\n", "error": "none", "author": "tom@organisms.be"}, {"index": "31", "colour": "orange", "code": "class PDFNoOutlines(PDFException): pass\n", "error": "none", "author": "tom@organisms.be"}, {"index": "32", "colour": "orange", "code": "class PDFDestinationNotFound(PDFException): pass\n", "error": "none", "author": "tom@organisms.be"}, {"index": "33", "colour": "orange", "code": "class PDFEncryptionError(PDFException): pass\n", "error": "none", "author": "tom@organisms.be"}, {"index": "34", "colour": "orange", "code": "class PDFPasswordIncorrect(PDFEncryptionError): pass\n", "error": "none", "author": "tom@organisms.be"}, {"index": "35", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "36", "colour": "orange", "code": "# some predefined literals and keywords.\n", "error": "none", "author": "tom@organisms.be"}, {"index": "37", "colour": "orange", "code": "LITERAL_OBJSTM = LIT('ObjStm')\n", "error": "none", "author": "tom@organisms.be"}, {"index": "38", "colour": "orange", "code": "LITERAL_XREF = LIT('XRef')\n", "error": "none", "author": "tom@organisms.be"}, {"index": "39", "colour": "orange", "code": "LITERAL_PAGE = LIT('Page')\n", "error": "none", "author": "tom@organisms.be"}, {"index": "40", "colour": "orange", "code": "LITERAL_PAGES = LIT('Pages')\n", "error": "none", "author": "tom@organisms.be"}, {"index": "41", "colour": "orange", "code": "LITERAL_CATALOG = LIT('Catalog')\n", "error": "none", "author": "tom@organisms.be"}, {"index": "42", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "43", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "44", "colour": "orange", "code": "##  XRefs\n", "error": "none", "author": "tom@organisms.be"}, {"index": "45", "colour": "orange", "code": "##\n", "error": "none", "author": "tom@organisms.be"}, {"index": "46", "colour": "orange", "code": "class PDFBaseXRef(object):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "47", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "48", "colour": "orange", "code": "    def get_trailer(self):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "49", "colour": "orange", "code": "        raise NotImplementedError\n", "error": "none", "author": "tom@organisms.be"}, {"index": "50", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "51", "colour": "blue", "code": "    def get_objids(self):\n", "error": "R", "author": "tom@organisms.be"}, {"index": "52", "colour": "orange", "code": "        return []\n", "error": "none", "author": "tom@organisms.be"}, {"index": "53", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "54", "colour": "blue", "code": "    def get_pos(self, objid):\n", "error": "R", "author": "tom@organisms.be"}, {"index": "55", "colour": "orange", "code": "        raise KeyError(objid)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "56", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "57", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "58", "colour": "orange", "code": "##  PDFXRef\n", "error": "none", "author": "tom@organisms.be"}, {"index": "59", "colour": "orange", "code": "##\n", "error": "none", "author": "tom@organisms.be"}, {"index": "60", "colour": "orange", "code": "class PDFXRef(PDFBaseXRef):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "61", "colour": "orange", "code": "    \n", "error": "none", "author": "tom@organisms.be"}, {"index": "62", "colour": "orange", "code": "    def __init__(self):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "63", "colour": "orange", "code": "        self.offsets = {}\n", "error": "none", "author": "tom@organisms.be"}, {"index": "64", "colour": "orange", "code": "        self.trailer = {}\n", "error": "none", "author": "tom@organisms.be"}, {"index": "65", "colour": "orange", "code": "        return\n", "error": "none", "author": "tom@organisms.be"}, {"index": "66", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "67", "colour": "orange", "code": "    def load(self, parser, debug=0):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "68", "colour": "orange", "code": "        while 1:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "69", "colour": "orange", "code": "            try:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "70", "colour": "orange", "code": "                (pos, line) = parser.nextline()\n", "error": "none", "author": "tom@organisms.be"}, {"index": "71", "colour": "orange", "code": "                if not line.strip(): continue\n", "error": "none", "author": "tom@organisms.be"}, {"index": "72", "colour": "orange", "code": "            except PSEOF:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "73", "colour": "orange", "code": "                raise PDFNoValidXRef('Unexpected EOF - file corrupted?')\n", "error": "none", "author": "tom@organisms.be"}, {"index": "74", "colour": "orange", "code": "            if not line:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "75", "colour": "orange", "code": "                raise PDFNoValidXRef('Premature eof: %r' % parser)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "76", "colour": "orange", "code": "            if line.startswith('trailer'):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "77", "colour": "orange", "code": "                parser.seek(pos)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "78", "colour": "orange", "code": "                break\n", "error": "none", "author": "tom@organisms.be"}, {"index": "79", "colour": "orange", "code": "            f = line.strip().split(' ')\n", "error": "none", "author": "tom@organisms.be"}, {"index": "80", "colour": "orange", "code": "            if len(f) != 2:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "81", "colour": "orange", "code": "                raise PDFNoValidXRef('Trailer not found: %r: line=%r' % (parser, line))\n", "error": "none", "author": "tom@organisms.be"}, {"index": "82", "colour": "orange", "code": "            try:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "83", "colour": "green", "code": "                (start, nobjs) = map(long, f)\n", "error": "W", "author": "tom@organisms.be"}, {"index": "84", "colour": "orange", "code": "            except ValueError:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "85", "colour": "orange", "code": "                raise PDFNoValidXRef('Invalid line: %r: line=%r' % (parser, line))\n", "error": "none", "author": "tom@organisms.be"}, {"index": "86", "colour": "orange", "code": "            for objid in xrange(start, start+nobjs):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "87", "colour": "orange", "code": "                try:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "88", "colour": "orange", "code": "                    (_, line) = parser.nextline()\n", "error": "none", "author": "tom@organisms.be"}, {"index": "89", "colour": "orange", "code": "                except PSEOF:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "90", "colour": "orange", "code": "                    raise PDFNoValidXRef('Unexpected EOF - file corrupted?')\n", "error": "none", "author": "tom@organisms.be"}, {"index": "91", "colour": "orange", "code": "                f = line.strip().split(' ')\n", "error": "none", "author": "tom@organisms.be"}, {"index": "92", "colour": "orange", "code": "                if len(f) != 3:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "93", "colour": "orange", "code": "                    raise PDFNoValidXRef('Invalid XRef format: %r, line=%r' % (parser, line))\n", "error": "none", "author": "tom@organisms.be"}, {"index": "94", "colour": "orange", "code": "                (pos, genno, use) = f\n", "error": "none", "author": "tom@organisms.be"}, {"index": "95", "colour": "orange", "code": "                if use != 'n': continue\n", "error": "none", "author": "tom@organisms.be"}, {"index": "96", "colour": "orange", "code": "                self.offsets[objid] = (int(genno), long(pos))\n", "error": "none", "author": "tom@organisms.be"}, {"index": "97", "colour": "orange", "code": "        if 1 <= debug:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "98", "colour": "orange", "code": "            print >>sys.stderr, 'xref objects:', self.offsets\n", "error": "none", "author": "tom@organisms.be"}, {"index": "99", "colour": "orange", "code": "        self.load_trailer(parser)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "100", "colour": "orange", "code": "        return\n", "error": "none", "author": "tom@organisms.be"}, {"index": "101", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "102", "colour": "orange", "code": "    KEYWORD_TRAILER = KWD('trailer')\n", "error": "none", "author": "tom@organisms.be"}, {"index": "103", "colour": "orange", "code": "    def load_trailer(self, parser):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "104", "colour": "orange", "code": "        try:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "105", "colour": "orange", "code": "            (_,kwd) = parser.nexttoken()\n", "error": "none", "author": "tom@organisms.be"}, {"index": "106", "colour": "orange", "code": "            assert kwd is self.KEYWORD_TRAILER\n", "error": "none", "author": "tom@organisms.be"}, {"index": "107", "colour": "orange", "code": "            (_,dic) = parser.nextobject()\n", "error": "none", "author": "tom@organisms.be"}, {"index": "108", "colour": "orange", "code": "        except PSEOF:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "109", "colour": "orange", "code": "            x = parser.pop(1)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "110", "colour": "orange", "code": "            if not x:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "111", "colour": "orange", "code": "                raise PDFNoValidXRef('Unexpected EOF - file corrupted')\n", "error": "none", "author": "tom@organisms.be"}, {"index": "112", "colour": "orange", "code": "            (_,dic) = x[0]\n", "error": "none", "author": "tom@organisms.be"}, {"index": "113", "colour": "orange", "code": "        self.trailer.update(dict_value(dic))\n", "error": "none", "author": "tom@organisms.be"}, {"index": "114", "colour": "orange", "code": "        return\n", "error": "none", "author": "tom@organisms.be"}, {"index": "115", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "116", "colour": "orange", "code": "    PDFOBJ_CUE = re.compile(r'^(\\d+)\\s+(\\d+)\\s+obj\\b')\n", "error": "none", "author": "tom@organisms.be"}, {"index": "117", "colour": "orange", "code": "    def load_fallback(self, parser, debug=0):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "118", "colour": "orange", "code": "        parser.seek(0)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "119", "colour": "orange", "code": "        while 1:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "120", "colour": "orange", "code": "            try:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "121", "colour": "orange", "code": "                (pos, line) = parser.nextline()\n", "error": "none", "author": "tom@organisms.be"}, {"index": "122", "colour": "orange", "code": "            except PSEOF:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "123", "colour": "orange", "code": "                break\n", "error": "none", "author": "tom@organisms.be"}, {"index": "124", "colour": "orange", "code": "            if line.startswith('trailer'):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "125", "colour": "orange", "code": "                parser.seek(pos)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "126", "colour": "orange", "code": "                self.load_trailer(parser)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "127", "colour": "orange", "code": "                if 1 <= debug:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "128", "colour": "orange", "code": "                    print >>sys.stderr, 'trailer: %r' % self.get_trailer()\n", "error": "none", "author": "tom@organisms.be"}, {"index": "129", "colour": "orange", "code": "                break\n", "error": "none", "author": "tom@organisms.be"}, {"index": "130", "colour": "orange", "code": "            m = self.PDFOBJ_CUE.match(line)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "131", "colour": "orange", "code": "            if not m: continue\n", "error": "none", "author": "tom@organisms.be"}, {"index": "132", "colour": "green", "code": "            (objid, genno) = m.groups()\n", "error": "W", "author": "tom@organisms.be"}, {"index": "133", "colour": "orange", "code": "            self.offsets[int(objid)] = (0, pos)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "134", "colour": "orange", "code": "        return\n", "error": "none", "author": "tom@organisms.be"}, {"index": "135", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "136", "colour": "orange", "code": "    def get_trailer(self):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "137", "colour": "orange", "code": "        return self.trailer\n", "error": "none", "author": "tom@organisms.be"}, {"index": "138", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "139", "colour": "orange", "code": "    def get_objids(self):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "140", "colour": "orange", "code": "        return self.offsets.iterkeys()\n", "error": "none", "author": "tom@organisms.be"}, {"index": "141", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "142", "colour": "orange", "code": "    def get_pos(self, objid):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "143", "colour": "orange", "code": "        try:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "144", "colour": "green", "code": "            (genno, pos) = self.offsets[objid]\n", "error": "W", "author": "tom@organisms.be"}, {"index": "145", "colour": "orange", "code": "        except KeyError:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "146", "colour": "orange", "code": "            raise\n", "error": "none", "author": "tom@organisms.be"}, {"index": "147", "colour": "orange", "code": "        return (None, pos)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "148", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "149", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "150", "colour": "orange", "code": "##  PDFXRefStream\n", "error": "none", "author": "tom@organisms.be"}, {"index": "151", "colour": "orange", "code": "##\n", "error": "none", "author": "tom@organisms.be"}, {"index": "152", "colour": "orange", "code": "class PDFXRefStream(PDFBaseXRef):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "153", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "154", "colour": "orange", "code": "    def __init__(self):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "155", "colour": "orange", "code": "        self.data = None\n", "error": "none", "author": "tom@organisms.be"}, {"index": "156", "colour": "orange", "code": "        self.entlen = None\n", "error": "none", "author": "tom@organisms.be"}, {"index": "157", "colour": "orange", "code": "        self.fl1 = self.fl2 = self.fl3 = None\n", "error": "none", "author": "tom@organisms.be"}, {"index": "158", "colour": "orange", "code": "        self.objid_ranges = []\n", "error": "none", "author": "tom@organisms.be"}, {"index": "159", "colour": "orange", "code": "        return\n", "error": "none", "author": "tom@organisms.be"}, {"index": "160", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "161", "colour": "orange", "code": "    def __repr__(self):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "162", "colour": "orange", "code": "        return '<PDFXRefStream: fields=%d,%d,%d>' % (self.fl1, self.fl2, self.fl3)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "163", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "164", "colour": "orange", "code": "    def load(self, parser, debug=0):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "165", "colour": "green", "code": "        (_,objid) = parser.nexttoken() # ignored\n", "error": "W", "author": "tom@organisms.be"}, {"index": "166", "colour": "green", "code": "        (_,genno) = parser.nexttoken() # ignored\n", "error": "W", "author": "tom@organisms.be"}, {"index": "167", "colour": "green", "code": "        (_,kwd) = parser.nexttoken()\n", "error": "W", "author": "tom@organisms.be"}, {"index": "168", "colour": "orange", "code": "        (_,stream) = parser.nextobject()\n", "error": "none", "author": "tom@organisms.be"}, {"index": "169", "colour": "orange", "code": "        if not isinstance(stream, PDFStream) or stream['Type'] is not LITERAL_XREF:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "170", "colour": "orange", "code": "            raise PDFNoValidXRef('Invalid PDF stream spec.')\n", "error": "none", "author": "tom@organisms.be"}, {"index": "171", "colour": "orange", "code": "        size = stream['Size']\n", "error": "none", "author": "tom@organisms.be"}, {"index": "172", "colour": "orange", "code": "        index_array = stream.get('Index', (0,size))\n", "error": "none", "author": "tom@organisms.be"}, {"index": "173", "colour": "orange", "code": "        if len(index_array) % 2 != 0:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "174", "colour": "orange", "code": "            raise PDFSyntaxError('Invalid index number')\n", "error": "none", "author": "tom@organisms.be"}, {"index": "175", "colour": "orange", "code": "        self.objid_ranges.extend( ObjIdRange(start, nobjs) \n", "error": "none", "author": "tom@organisms.be"}, {"index": "176", "colour": "orange", "code": "                                  for (start,nobjs) in choplist(2, index_array) )\n", "error": "none", "author": "tom@organisms.be"}, {"index": "177", "colour": "orange", "code": "        (self.fl1, self.fl2, self.fl3) = stream['W']\n", "error": "none", "author": "tom@organisms.be"}, {"index": "178", "colour": "orange", "code": "        self.data = stream.get_data()\n", "error": "none", "author": "tom@organisms.be"}, {"index": "179", "colour": "orange", "code": "        self.entlen = self.fl1+self.fl2+self.fl3\n", "error": "none", "author": "tom@organisms.be"}, {"index": "180", "colour": "green", "code": "        self.trailer = stream.attrs\n", "error": "W", "author": "tom@organisms.be"}, {"index": "181", "colour": "orange", "code": "        if 1 <= debug:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "182", "colour": "orange", "code": "            print >>sys.stderr, ('xref stream: objid=%s, fields=%d,%d,%d' %\n", "error": "none", "author": "tom@organisms.be"}, {"index": "183", "colour": "green", "code": "                             (', '.join(map(repr, self.objid_ranges)),\n", "error": "W", "author": "tom@organisms.be"}, {"index": "184", "colour": "orange", "code": "                              self.fl1, self.fl2, self.fl3))\n", "error": "none", "author": "tom@organisms.be"}, {"index": "185", "colour": "orange", "code": "        return\n", "error": "none", "author": "tom@organisms.be"}, {"index": "186", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "187", "colour": "orange", "code": "    def get_trailer(self):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "188", "colour": "orange", "code": "        return self.trailer\n", "error": "none", "author": "tom@organisms.be"}, {"index": "189", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "190", "colour": "orange", "code": "    def get_objids(self):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "191", "colour": "orange", "code": "        for objid_range in self.objid_ranges:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "192", "colour": "orange", "code": "            for x in xrange(objid_range.get_start_id(), objid_range.get_end_id()+1):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "193", "colour": "orange", "code": "                yield x\n", "error": "none", "author": "tom@organisms.be"}, {"index": "194", "colour": "orange", "code": "        return\n", "error": "none", "author": "tom@organisms.be"}, {"index": "195", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "196", "colour": "orange", "code": "    def get_pos(self, objid):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "197", "colour": "orange", "code": "        offset = 0\n", "error": "none", "author": "tom@organisms.be"}, {"index": "198", "colour": "orange", "code": "        found = False\n", "error": "none", "author": "tom@organisms.be"}, {"index": "199", "colour": "orange", "code": "        for objid_range in self.objid_ranges:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "200", "colour": "orange", "code": "            if objid >= objid_range.get_start_id() and objid <= objid_range.get_end_id():\n", "error": "none", "author": "tom@organisms.be"}, {"index": "201", "colour": "orange", "code": "                offset += objid - objid_range.get_start_id()\n", "error": "none", "author": "tom@organisms.be"}, {"index": "202", "colour": "orange", "code": "                found = True\n", "error": "none", "author": "tom@organisms.be"}, {"index": "203", "colour": "orange", "code": "                break\n", "error": "none", "author": "tom@organisms.be"}, {"index": "204", "colour": "orange", "code": "            else:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "205", "colour": "orange", "code": "                offset += objid_range.get_nobjs()\n", "error": "none", "author": "tom@organisms.be"}, {"index": "206", "colour": "orange", "code": "        if not found: raise KeyError(objid)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "207", "colour": "orange", "code": "        i = self.entlen * offset\n", "error": "none", "author": "tom@organisms.be"}, {"index": "208", "colour": "orange", "code": "        ent = self.data[i:i+self.entlen]\n", "error": "none", "author": "tom@organisms.be"}, {"index": "209", "colour": "orange", "code": "        f1 = nunpack(ent[:self.fl1], 1)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "210", "colour": "orange", "code": "        if f1 == 1:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "211", "colour": "orange", "code": "            pos = nunpack(ent[self.fl1:self.fl1+self.fl2])\n", "error": "none", "author": "tom@organisms.be"}, {"index": "212", "colour": "green", "code": "            genno = nunpack(ent[self.fl1+self.fl2:])\n", "error": "W", "author": "tom@organisms.be"}, {"index": "213", "colour": "orange", "code": "            return (None, pos)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "214", "colour": "orange", "code": "        elif f1 == 2:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "215", "colour": "orange", "code": "            objid = nunpack(ent[self.fl1:self.fl1+self.fl2])\n", "error": "none", "author": "tom@organisms.be"}, {"index": "216", "colour": "orange", "code": "            index = nunpack(ent[self.fl1+self.fl2:])\n", "error": "none", "author": "tom@organisms.be"}, {"index": "217", "colour": "orange", "code": "            return (objid, index)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "218", "colour": "orange", "code": "        # this is a free object\n", "error": "none", "author": "tom@organisms.be"}, {"index": "219", "colour": "orange", "code": "        raise KeyError(objid)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "220", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "221", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "222", "colour": "orange", "code": "##  PDFPage\n", "error": "none", "author": "tom@organisms.be"}, {"index": "223", "colour": "orange", "code": "##\n", "error": "none", "author": "tom@organisms.be"}, {"index": "224", "colour": "blue", "code": "class PDFPage(object):\n", "error": "R", "author": "tom@organisms.be"}, {"index": "225", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "226", "colour": "orange", "code": "    \"\"\"An object that holds the information about a page.\n", "error": "none", "author": "tom@organisms.be"}, {"index": "227", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "228", "colour": "orange", "code": "    A PDFPage object is merely a convenience class that has a set\n", "error": "none", "author": "tom@organisms.be"}, {"index": "229", "colour": "orange", "code": "    of keys and values, which describe the properties of a page\n", "error": "none", "author": "tom@organisms.be"}, {"index": "230", "colour": "orange", "code": "    and point to its contents.\n", "error": "none", "author": "tom@organisms.be"}, {"index": "231", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "232", "colour": "orange", "code": "    Attributes:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "233", "colour": "orange", "code": "      doc: a PDFDocument object.\n", "error": "none", "author": "tom@organisms.be"}, {"index": "234", "colour": "orange", "code": "      pageid: any Python object that can uniquely identify the page.\n", "error": "none", "author": "tom@organisms.be"}, {"index": "235", "colour": "orange", "code": "      attrs: a dictionary of page attributes.\n", "error": "none", "author": "tom@organisms.be"}, {"index": "236", "colour": "orange", "code": "      contents: a list of PDFStream objects that represents the page content.\n", "error": "none", "author": "tom@organisms.be"}, {"index": "237", "colour": "orange", "code": "      lastmod: the last modified time of the page.\n", "error": "none", "author": "tom@organisms.be"}, {"index": "238", "colour": "orange", "code": "      resources: a list of resources used by the page.\n", "error": "none", "author": "tom@organisms.be"}, {"index": "239", "colour": "orange", "code": "      mediabox: the physical size of the page.\n", "error": "none", "author": "tom@organisms.be"}, {"index": "240", "colour": "orange", "code": "      cropbox: the crop rectangle of the page.\n", "error": "none", "author": "tom@organisms.be"}, {"index": "241", "colour": "orange", "code": "      rotate: the page rotation (in degree).\n", "error": "none", "author": "tom@organisms.be"}, {"index": "242", "colour": "orange", "code": "      annots: the page annotations.\n", "error": "none", "author": "tom@organisms.be"}, {"index": "243", "colour": "orange", "code": "      beads: a chain that represents natural reading order.\n", "error": "none", "author": "tom@organisms.be"}, {"index": "244", "colour": "orange", "code": "    \"\"\"\n", "error": "none", "author": "tom@organisms.be"}, {"index": "245", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "246", "colour": "orange", "code": "    def __init__(self, doc, pageid, attrs):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "247", "colour": "orange", "code": "        \"\"\"Initialize a page object.\n", "error": "none", "author": "tom@organisms.be"}, {"index": "248", "colour": "orange", "code": "        \n", "error": "none", "author": "tom@organisms.be"}, {"index": "249", "colour": "orange", "code": "        doc: a PDFDocument object.\n", "error": "none", "author": "tom@organisms.be"}, {"index": "250", "colour": "orange", "code": "        pageid: any Python object that can uniquely identify the page.\n", "error": "none", "author": "tom@organisms.be"}, {"index": "251", "colour": "orange", "code": "        attrs: a dictionary of page attributes.\n", "error": "none", "author": "tom@organisms.be"}, {"index": "252", "colour": "orange", "code": "        \"\"\"\n", "error": "none", "author": "tom@organisms.be"}, {"index": "253", "colour": "orange", "code": "        self.doc = doc\n", "error": "none", "author": "tom@organisms.be"}, {"index": "254", "colour": "orange", "code": "        self.pageid = pageid\n", "error": "none", "author": "tom@organisms.be"}, {"index": "255", "colour": "orange", "code": "        self.attrs = dict_value(attrs)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "256", "colour": "orange", "code": "        self.lastmod = resolve1(self.attrs.get('LastModified'))\n", "error": "none", "author": "tom@organisms.be"}, {"index": "257", "colour": "orange", "code": "        self.resources = resolve1(self.attrs['Resources'])\n", "error": "none", "author": "tom@organisms.be"}, {"index": "258", "colour": "orange", "code": "        self.mediabox = resolve1(self.attrs['MediaBox'])\n", "error": "none", "author": "tom@organisms.be"}, {"index": "259", "colour": "orange", "code": "        if 'CropBox' in self.attrs:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "260", "colour": "orange", "code": "            self.cropbox = resolve1(self.attrs['CropBox'])\n", "error": "none", "author": "tom@organisms.be"}, {"index": "261", "colour": "orange", "code": "        else:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "262", "colour": "orange", "code": "            self.cropbox = self.mediabox\n", "error": "none", "author": "tom@organisms.be"}, {"index": "263", "colour": "orange", "code": "        self.rotate = (self.attrs.get('Rotate', 0)+360) % 360\n", "error": "none", "author": "tom@organisms.be"}, {"index": "264", "colour": "orange", "code": "        self.annots = self.attrs.get('Annots')\n", "error": "none", "author": "tom@organisms.be"}, {"index": "265", "colour": "orange", "code": "        self.beads = self.attrs.get('B')\n", "error": "none", "author": "tom@organisms.be"}, {"index": "266", "colour": "orange", "code": "        if 'Contents' in self.attrs:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "267", "colour": "orange", "code": "            contents = resolve1(self.attrs['Contents'])\n", "error": "none", "author": "tom@organisms.be"}, {"index": "268", "colour": "orange", "code": "        else:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "269", "colour": "orange", "code": "            contents = []\n", "error": "none", "author": "tom@organisms.be"}, {"index": "270", "colour": "orange", "code": "        if not isinstance(contents, list):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "271", "colour": "orange", "code": "            contents = [ contents ]\n", "error": "none", "author": "tom@organisms.be"}, {"index": "272", "colour": "orange", "code": "        self.contents = contents\n", "error": "none", "author": "tom@organisms.be"}, {"index": "273", "colour": "orange", "code": "        return\n", "error": "none", "author": "tom@organisms.be"}, {"index": "274", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "275", "colour": "orange", "code": "    def __repr__(self):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "276", "colour": "orange", "code": "        return '<PDFPage: Resources=%r, MediaBox=%r>' % (self.resources, self.mediabox)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "277", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "278", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "279", "colour": "orange", "code": "##  PDFDocument\n", "error": "none", "author": "tom@organisms.be"}, {"index": "280", "colour": "orange", "code": "##\n", "error": "none", "author": "tom@organisms.be"}, {"index": "281", "colour": "blue", "code": "class PDFDocument(object):\n", "error": "R", "author": "tom@organisms.be"}, {"index": "282", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "283", "colour": "orange", "code": "    \"\"\"PDFDocument object represents a PDF document.\n", "error": "none", "author": "tom@organisms.be"}, {"index": "284", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "285", "colour": "orange", "code": "    Since a PDF file can be very big, normally it is not loaded at\n", "error": "none", "author": "tom@organisms.be"}, {"index": "286", "colour": "orange", "code": "    once. So PDF document has to cooperate with a PDF parser in order to\n", "error": "none", "author": "tom@organisms.be"}, {"index": "287", "colour": "orange", "code": "    dynamically import the data as processing goes.\n", "error": "none", "author": "tom@organisms.be"}, {"index": "288", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "289", "colour": "orange", "code": "    Typical usage:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "290", "colour": "orange", "code": "      doc = PDFDocument()\n", "error": "none", "author": "tom@organisms.be"}, {"index": "291", "colour": "orange", "code": "      doc.set_parser(parser)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "292", "colour": "orange", "code": "      doc.initialize(password)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "293", "colour": "orange", "code": "      obj = doc.getobj(objid)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "294", "colour": "orange", "code": "    \n", "error": "none", "author": "tom@organisms.be"}, {"index": "295", "colour": "orange", "code": "    \"\"\"\n", "error": "none", "author": "tom@organisms.be"}, {"index": "296", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "297", "colour": "orange", "code": "    debug = 0\n", "error": "none", "author": "tom@organisms.be"}, {"index": "298", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "299", "colour": "orange", "code": "    def __init__(self, caching=True):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "300", "colour": "orange", "code": "        self.caching = caching\n", "error": "none", "author": "tom@organisms.be"}, {"index": "301", "colour": "orange", "code": "        self.xrefs = []\n", "error": "none", "author": "tom@organisms.be"}, {"index": "302", "colour": "orange", "code": "        self.info = []\n", "error": "none", "author": "tom@organisms.be"}, {"index": "303", "colour": "orange", "code": "        self.catalog = None\n", "error": "none", "author": "tom@organisms.be"}, {"index": "304", "colour": "orange", "code": "        self.encryption = None\n", "error": "none", "author": "tom@organisms.be"}, {"index": "305", "colour": "orange", "code": "        self.decipher = None\n", "error": "none", "author": "tom@organisms.be"}, {"index": "306", "colour": "orange", "code": "        self._parser = None\n", "error": "none", "author": "tom@organisms.be"}, {"index": "307", "colour": "orange", "code": "        self._cached_objs = {}\n", "error": "none", "author": "tom@organisms.be"}, {"index": "308", "colour": "orange", "code": "        self._parsed_objs = {}\n", "error": "none", "author": "tom@organisms.be"}, {"index": "309", "colour": "orange", "code": "        return\n", "error": "none", "author": "tom@organisms.be"}, {"index": "310", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "311", "colour": "orange", "code": "    def set_parser(self, parser):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "312", "colour": "orange", "code": "        \"Set the document to use a given PDFParser object.\"\n", "error": "none", "author": "tom@organisms.be"}, {"index": "313", "colour": "orange", "code": "        if self._parser: return\n", "error": "none", "author": "tom@organisms.be"}, {"index": "314", "colour": "orange", "code": "        self._parser = parser\n", "error": "none", "author": "tom@organisms.be"}, {"index": "315", "colour": "orange", "code": "        # Retrieve the information of each header that was appended\n", "error": "none", "author": "tom@organisms.be"}, {"index": "316", "colour": "orange", "code": "        # (maybe multiple times) at the end of the document.\n", "error": "none", "author": "tom@organisms.be"}, {"index": "317", "colour": "orange", "code": "        self.xrefs = parser.read_xref()\n", "error": "none", "author": "tom@organisms.be"}, {"index": "318", "colour": "orange", "code": "        for xref in self.xrefs:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "319", "colour": "orange", "code": "            trailer = xref.get_trailer()\n", "error": "none", "author": "tom@organisms.be"}, {"index": "320", "colour": "orange", "code": "            if not trailer: continue\n", "error": "none", "author": "tom@organisms.be"}, {"index": "321", "colour": "orange", "code": "            # If there's an encryption info, remember it.\n", "error": "none", "author": "tom@organisms.be"}, {"index": "322", "colour": "orange", "code": "            if 'Encrypt' in trailer:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "323", "colour": "orange", "code": "                #assert not self.encryption\n", "error": "none", "author": "tom@organisms.be"}, {"index": "324", "colour": "orange", "code": "                self.encryption = (list_value(trailer['ID']),\n", "error": "none", "author": "tom@organisms.be"}, {"index": "325", "colour": "orange", "code": "                                   dict_value(trailer['Encrypt']))\n", "error": "none", "author": "tom@organisms.be"}, {"index": "326", "colour": "orange", "code": "            if 'Info' in trailer:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "327", "colour": "orange", "code": "                self.info.append(dict_value(trailer['Info']))\n", "error": "none", "author": "tom@organisms.be"}, {"index": "328", "colour": "orange", "code": "            if 'Root' in trailer:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "329", "colour": "orange", "code": "                #  Every PDF file must have exactly one /Root dictionary.\n", "error": "none", "author": "tom@organisms.be"}, {"index": "330", "colour": "orange", "code": "                self.catalog = dict_value(trailer['Root'])\n", "error": "none", "author": "tom@organisms.be"}, {"index": "331", "colour": "orange", "code": "                break\n", "error": "none", "author": "tom@organisms.be"}, {"index": "332", "colour": "orange", "code": "        else:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "333", "colour": "orange", "code": "            raise PDFSyntaxError('No /Root object! - Is this really a PDF?')\n", "error": "none", "author": "tom@organisms.be"}, {"index": "334", "colour": "orange", "code": "        if self.catalog.get('Type') is not LITERAL_CATALOG:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "335", "colour": "orange", "code": "            if STRICT:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "336", "colour": "orange", "code": "                raise PDFSyntaxError('Catalog not found!')\n", "error": "none", "author": "tom@organisms.be"}, {"index": "337", "colour": "orange", "code": "        return\n", "error": "none", "author": "tom@organisms.be"}, {"index": "338", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "339", "colour": "orange", "code": "    # initialize(password='')\n", "error": "none", "author": "tom@organisms.be"}, {"index": "340", "colour": "orange", "code": "    #   Perform the initialization with a given password.\n", "error": "none", "author": "tom@organisms.be"}, {"index": "341", "colour": "orange", "code": "    #   This step is mandatory even if there's no password associated\n", "error": "none", "author": "tom@organisms.be"}, {"index": "342", "colour": "orange", "code": "    #   with the document.\n", "error": "none", "author": "tom@organisms.be"}, {"index": "343", "colour": "orange", "code": "    PASSWORD_PADDING = '(\\xbfN^Nu\\x8aAd\\x00NV\\xff\\xfa\\x01\\x08..\\x00\\xb6\\xd0h>\\x80/\\x0c\\xa9\\xfedSiz'\n", "error": "none", "author": "tom@organisms.be"}, {"index": "344", "colour": "blue", "code": "    def initialize(self, password=''):\n", "error": "R", "author": "tom@organisms.be"}, {"index": "345", "colour": "orange", "code": "        if not self.encryption:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "346", "colour": "green", "code": "            self.is_printable = self.is_modifiable = self.is_extractable = True\n", "error": "W", "author": "tom@organisms.be"}, {"index": "347", "colour": "orange", "code": "            return\n", "error": "none", "author": "tom@organisms.be"}, {"index": "348", "colour": "green", "code": "        (docid, param) = self.encryption\n", "error": "W", "author": "tom@organisms.be"}, {"index": "349", "colour": "orange", "code": "        if literal_name(param.get('Filter')) != 'Standard':\n", "error": "none", "author": "tom@organisms.be"}, {"index": "350", "colour": "orange", "code": "            raise PDFEncryptionError('Unknown filter: param=%r' % param)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "351", "colour": "orange", "code": "        V = int_value(param.get('V', 0))\n", "error": "none", "author": "tom@organisms.be"}, {"index": "352", "colour": "orange", "code": "        if not (V == 1 or V == 2):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "353", "colour": "orange", "code": "            raise PDFEncryptionError('Unknown algorithm: param=%r' % param)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "354", "colour": "orange", "code": "        length = int_value(param.get('Length', 40)) # Key length (bits)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "355", "colour": "orange", "code": "        O = str_value(param['O'])\n", "error": "none", "author": "tom@organisms.be"}, {"index": "356", "colour": "orange", "code": "        R = int_value(param['R']) # Revision\n", "error": "none", "author": "tom@organisms.be"}, {"index": "357", "colour": "orange", "code": "        if 5 <= R:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "358", "colour": "orange", "code": "            raise PDFEncryptionError('Unknown revision: %r' % R)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "359", "colour": "orange", "code": "        U = str_value(param['U'])\n", "error": "none", "author": "tom@organisms.be"}, {"index": "360", "colour": "orange", "code": "        P = int_value(param['P'])\n", "error": "none", "author": "tom@organisms.be"}, {"index": "361", "colour": "green", "code": "        self.is_printable = bool(P & 4)\n", "error": "W", "author": "tom@organisms.be"}, {"index": "362", "colour": "green", "code": "        self.is_modifiable = bool(P & 8)\n", "error": "W", "author": "tom@organisms.be"}, {"index": "363", "colour": "green", "code": "        self.is_extractable = bool(P & 16)\n", "error": "W", "author": "tom@organisms.be"}, {"index": "364", "colour": "orange", "code": "        # Algorithm 3.2\n", "error": "none", "author": "tom@organisms.be"}, {"index": "365", "colour": "orange", "code": "        password = (password+self.PASSWORD_PADDING)[:32] # 1\n", "error": "none", "author": "tom@organisms.be"}, {"index": "366", "colour": "green", "code": "        hash = md5.md5(password) # 2\n", "error": "W", "author": "tom@organisms.be"}, {"index": "367", "colour": "orange", "code": "        hash.update(O) # 3\n", "error": "none", "author": "tom@organisms.be"}, {"index": "368", "colour": "orange", "code": "        hash.update(struct.pack('<l', P)) # 4\n", "error": "none", "author": "tom@organisms.be"}, {"index": "369", "colour": "orange", "code": "        hash.update(docid[0]) # 5\n", "error": "none", "author": "tom@organisms.be"}, {"index": "370", "colour": "orange", "code": "        if 4 <= R:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "371", "colour": "orange", "code": "            # 6\n", "error": "none", "author": "tom@organisms.be"}, {"index": "372", "colour": "orange", "code": "            raise PDFNotImplementedError('Revision 4 encryption is currently unsupported')\n", "error": "none", "author": "tom@organisms.be"}, {"index": "373", "colour": "orange", "code": "        if 3 <= R:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "374", "colour": "orange", "code": "            # 8\n", "error": "none", "author": "tom@organisms.be"}, {"index": "375", "colour": "orange", "code": "            for _ in xrange(50):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "376", "colour": "orange", "code": "                hash = md5.md5(hash.digest()[:length/8])\n", "error": "none", "author": "tom@organisms.be"}, {"index": "377", "colour": "orange", "code": "        key = hash.digest()[:length/8]\n", "error": "none", "author": "tom@organisms.be"}, {"index": "378", "colour": "orange", "code": "        if R == 2:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "379", "colour": "orange", "code": "            # Algorithm 3.4\n", "error": "none", "author": "tom@organisms.be"}, {"index": "380", "colour": "orange", "code": "            u1 = Arcfour(key).process(self.PASSWORD_PADDING)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "381", "colour": "orange", "code": "        elif R == 3:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "382", "colour": "orange", "code": "            # Algorithm 3.5\n", "error": "none", "author": "tom@organisms.be"}, {"index": "383", "colour": "orange", "code": "            hash = md5.md5(self.PASSWORD_PADDING) # 2\n", "error": "none", "author": "tom@organisms.be"}, {"index": "384", "colour": "orange", "code": "            hash.update(docid[0]) # 3\n", "error": "none", "author": "tom@organisms.be"}, {"index": "385", "colour": "orange", "code": "            x = Arcfour(key).process(hash.digest()[:16]) # 4\n", "error": "none", "author": "tom@organisms.be"}, {"index": "386", "colour": "orange", "code": "            for i in xrange(1,19+1):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "387", "colour": "orange", "code": "                k = ''.join( chr(ord(c) ^ i) for c in key )\n", "error": "none", "author": "tom@organisms.be"}, {"index": "388", "colour": "orange", "code": "                x = Arcfour(k).process(x)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "389", "colour": "orange", "code": "            u1 = x+x # 32bytes total\n", "error": "none", "author": "tom@organisms.be"}, {"index": "390", "colour": "orange", "code": "        if R == 2:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "391", "colour": "orange", "code": "            is_authenticated = (u1 == U)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "392", "colour": "orange", "code": "        else:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "393", "colour": "orange", "code": "            is_authenticated = (u1[:16] == U[:16])\n", "error": "none", "author": "tom@organisms.be"}, {"index": "394", "colour": "orange", "code": "        if not is_authenticated:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "395", "colour": "orange", "code": "            raise PDFPasswordIncorrect\n", "error": "none", "author": "tom@organisms.be"}, {"index": "396", "colour": "green", "code": "        self.decrypt_key = key\n", "error": "W", "author": "tom@organisms.be"}, {"index": "397", "colour": "green", "code": "        self.decipher = self.decrypt_rc4  # XXX may be AES\n", "error": "W", "author": "tom@organisms.be"}, {"index": "398", "colour": "orange", "code": "        return\n", "error": "none", "author": "tom@organisms.be"}, {"index": "399", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "400", "colour": "orange", "code": "    def decrypt_rc4(self, objid, genno, data):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "401", "colour": "orange", "code": "        key = self.decrypt_key + struct.pack('<L',objid)[:3]+struct.pack('<L',genno)[:2]\n", "error": "none", "author": "tom@organisms.be"}, {"index": "402", "colour": "green", "code": "        hash = md5.md5(key)\n", "error": "W", "author": "tom@organisms.be"}, {"index": "403", "colour": "orange", "code": "        key = hash.digest()[:min(len(key),16)]\n", "error": "none", "author": "tom@organisms.be"}, {"index": "404", "colour": "orange", "code": "        return Arcfour(key).process(data)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "405", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "406", "colour": "orange", "code": "    KEYWORD_OBJ = KWD('obj')\n", "error": "none", "author": "tom@organisms.be"}, {"index": "407", "colour": "blue", "code": "    def getobj(self, objid):\n", "error": "R", "author": "tom@organisms.be"}, {"index": "408", "colour": "orange", "code": "        if not self.xrefs:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "409", "colour": "orange", "code": "            raise PDFException('PDFDocument is not initialized')\n", "error": "none", "author": "tom@organisms.be"}, {"index": "410", "colour": "orange", "code": "        if 2 <= self.debug:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "411", "colour": "orange", "code": "            print >>sys.stderr, 'getobj: objid=%r' % (objid)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "412", "colour": "orange", "code": "        if objid in self._cached_objs:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "413", "colour": "orange", "code": "            genno = 0\n", "error": "none", "author": "tom@organisms.be"}, {"index": "414", "colour": "orange", "code": "            obj = self._cached_objs[objid]\n", "error": "none", "author": "tom@organisms.be"}, {"index": "415", "colour": "orange", "code": "        else:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "416", "colour": "orange", "code": "            for xref in self.xrefs:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "417", "colour": "orange", "code": "                try:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "418", "colour": "orange", "code": "                    (strmid, index) = xref.get_pos(objid)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "419", "colour": "orange", "code": "                    break\n", "error": "none", "author": "tom@organisms.be"}, {"index": "420", "colour": "orange", "code": "                except KeyError:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "421", "colour": "orange", "code": "                    pass\n", "error": "none", "author": "tom@organisms.be"}, {"index": "422", "colour": "orange", "code": "            else:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "423", "colour": "orange", "code": "                if STRICT:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "424", "colour": "orange", "code": "                    raise PDFSyntaxError('Cannot locate objid=%r' % objid)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "425", "colour": "orange", "code": "                # return null for a nonexistent reference.\n", "error": "none", "author": "tom@organisms.be"}, {"index": "426", "colour": "orange", "code": "                return None\n", "error": "none", "author": "tom@organisms.be"}, {"index": "427", "colour": "orange", "code": "            if strmid:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "428", "colour": "orange", "code": "                stream = stream_value(self.getobj(strmid))\n", "error": "none", "author": "tom@organisms.be"}, {"index": "429", "colour": "orange", "code": "                if stream.get('Type') is not LITERAL_OBJSTM:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "430", "colour": "orange", "code": "                    if STRICT:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "431", "colour": "orange", "code": "                        raise PDFSyntaxError('Not a stream object: %r' % stream)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "432", "colour": "orange", "code": "                try:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "433", "colour": "orange", "code": "                    n = stream['N']\n", "error": "none", "author": "tom@organisms.be"}, {"index": "434", "colour": "orange", "code": "                except KeyError:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "435", "colour": "orange", "code": "                    if STRICT:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "436", "colour": "orange", "code": "                        raise PDFSyntaxError('N is not defined: %r' % stream)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "437", "colour": "orange", "code": "                    n = 0\n", "error": "none", "author": "tom@organisms.be"}, {"index": "438", "colour": "orange", "code": "                if strmid in self._parsed_objs:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "439", "colour": "orange", "code": "                    objs = self._parsed_objs[strmid]\n", "error": "none", "author": "tom@organisms.be"}, {"index": "440", "colour": "orange", "code": "                else:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "441", "colour": "orange", "code": "                    parser = PDFStreamParser(stream.get_data())\n", "error": "none", "author": "tom@organisms.be"}, {"index": "442", "colour": "orange", "code": "                    parser.set_document(self)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "443", "colour": "orange", "code": "                    objs = []\n", "error": "none", "author": "tom@organisms.be"}, {"index": "444", "colour": "orange", "code": "                    try:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "445", "colour": "orange", "code": "                        while 1:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "446", "colour": "orange", "code": "                            (_,obj) = parser.nextobject()\n", "error": "none", "author": "tom@organisms.be"}, {"index": "447", "colour": "orange", "code": "                            objs.append(obj)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "448", "colour": "orange", "code": "                    except PSEOF:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "449", "colour": "orange", "code": "                        pass\n", "error": "none", "author": "tom@organisms.be"}, {"index": "450", "colour": "orange", "code": "                    if self.caching:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "451", "colour": "orange", "code": "                        self._parsed_objs[strmid] = objs\n", "error": "none", "author": "tom@organisms.be"}, {"index": "452", "colour": "orange", "code": "                genno = 0\n", "error": "none", "author": "tom@organisms.be"}, {"index": "453", "colour": "orange", "code": "                i = n*2+index\n", "error": "none", "author": "tom@organisms.be"}, {"index": "454", "colour": "orange", "code": "                try:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "455", "colour": "orange", "code": "                    obj = objs[i]\n", "error": "none", "author": "tom@organisms.be"}, {"index": "456", "colour": "orange", "code": "                except IndexError:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "457", "colour": "orange", "code": "                    raise PDFSyntaxError('Invalid object number: objid=%r' % (objid))\n", "error": "none", "author": "tom@organisms.be"}, {"index": "458", "colour": "orange", "code": "                if isinstance(obj, PDFStream):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "459", "colour": "orange", "code": "                    obj.set_objid(objid, 0)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "460", "colour": "orange", "code": "            else:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "461", "colour": "orange", "code": "                self._parser.seek(index)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "462", "colour": "orange", "code": "                (_,objid1) = self._parser.nexttoken() # objid\n", "error": "none", "author": "tom@organisms.be"}, {"index": "463", "colour": "orange", "code": "                (_,genno) = self._parser.nexttoken() # genno\n", "error": "none", "author": "tom@organisms.be"}, {"index": "464", "colour": "orange", "code": "                (_,kwd) = self._parser.nexttoken()\n", "error": "none", "author": "tom@organisms.be"}, {"index": "465", "colour": "orange", "code": "                # #### hack around malformed pdf files\n", "error": "none", "author": "tom@organisms.be"}, {"index": "466", "colour": "orange", "code": "                #assert objid1 == objid, (objid, objid1)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "467", "colour": "orange", "code": "                if objid1 != objid:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "468", "colour": "orange", "code": "                    x = []\n", "error": "none", "author": "tom@organisms.be"}, {"index": "469", "colour": "orange", "code": "                    while kwd is not self.KEYWORD_OBJ:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "470", "colour": "orange", "code": "                        (_,kwd) = self._parser.nexttoken()\n", "error": "none", "author": "tom@organisms.be"}, {"index": "471", "colour": "orange", "code": "                        x.append(kwd)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "472", "colour": "orange", "code": "                    if x:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "473", "colour": "orange", "code": "                        objid1 = x[-2]\n", "error": "none", "author": "tom@organisms.be"}, {"index": "474", "colour": "orange", "code": "                        genno = x[-1]\n", "error": "none", "author": "tom@organisms.be"}, {"index": "475", "colour": "orange", "code": "                # #### end hack around malformed pdf files\n", "error": "none", "author": "tom@organisms.be"}, {"index": "476", "colour": "orange", "code": "                if kwd is not self.KEYWORD_OBJ:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "477", "colour": "orange", "code": "                    raise PDFSyntaxError('Invalid object spec: offset=%r' % index)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "478", "colour": "orange", "code": "                try:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "479", "colour": "orange", "code": "                    (_,obj) = self._parser.nextobject()\n", "error": "none", "author": "tom@organisms.be"}, {"index": "480", "colour": "orange", "code": "                    if isinstance(obj, PDFStream):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "481", "colour": "orange", "code": "                        obj.set_objid(objid, genno)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "482", "colour": "orange", "code": "                except PSEOF:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "483", "colour": "orange", "code": "                    return None\n", "error": "none", "author": "tom@organisms.be"}, {"index": "484", "colour": "orange", "code": "            if 2 <= self.debug:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "485", "colour": "orange", "code": "                print >>sys.stderr, 'register: objid=%r: %r' % (objid, obj)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "486", "colour": "orange", "code": "            if self.caching:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "487", "colour": "orange", "code": "                self._cached_objs[objid] = obj\n", "error": "none", "author": "tom@organisms.be"}, {"index": "488", "colour": "orange", "code": "        if self.decipher:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "489", "colour": "orange", "code": "            obj = decipher_all(self.decipher, objid, genno, obj)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "490", "colour": "orange", "code": "        return obj\n", "error": "none", "author": "tom@organisms.be"}, {"index": "491", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "492", "colour": "orange", "code": "    INHERITABLE_ATTRS = set(['Resources', 'MediaBox', 'CropBox', 'Rotate'])\n", "error": "none", "author": "tom@organisms.be"}, {"index": "493", "colour": "blue", "code": "    def get_pages(self):\n", "error": "R", "author": "tom@organisms.be"}, {"index": "494", "colour": "orange", "code": "        if not self.xrefs:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "495", "colour": "orange", "code": "            raise PDFException('PDFDocument is not initialized')\n", "error": "none", "author": "tom@organisms.be"}, {"index": "496", "colour": "orange", "code": "        def search(obj, parent):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "497", "colour": "orange", "code": "            if isinstance(obj, int):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "498", "colour": "orange", "code": "                objid = obj\n", "error": "none", "author": "tom@organisms.be"}, {"index": "499", "colour": "orange", "code": "                tree = dict_value(self.getobj(objid)).copy()\n", "error": "none", "author": "tom@organisms.be"}, {"index": "500", "colour": "orange", "code": "            else:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "501", "colour": "orange", "code": "                objid = obj.objid\n", "error": "none", "author": "tom@organisms.be"}, {"index": "502", "colour": "orange", "code": "                tree = dict_value(obj).copy()\n", "error": "none", "author": "tom@organisms.be"}, {"index": "503", "colour": "orange", "code": "            for (k,v) in parent.iteritems():\n", "error": "none", "author": "tom@organisms.be"}, {"index": "504", "colour": "orange", "code": "                if k in self.INHERITABLE_ATTRS and k not in tree:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "505", "colour": "orange", "code": "                    tree[k] = v\n", "error": "none", "author": "tom@organisms.be"}, {"index": "506", "colour": "orange", "code": "            if tree.get('Type') is LITERAL_PAGES and 'Kids' in tree:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "507", "colour": "orange", "code": "                if 1 <= self.debug:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "508", "colour": "orange", "code": "                    print >>sys.stderr, 'Pages: Kids=%r' % tree['Kids']\n", "error": "none", "author": "tom@organisms.be"}, {"index": "509", "colour": "orange", "code": "                for c in list_value(tree['Kids']):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "510", "colour": "orange", "code": "                    for x in search(c, tree):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "511", "colour": "orange", "code": "                        yield x\n", "error": "none", "author": "tom@organisms.be"}, {"index": "512", "colour": "orange", "code": "            elif tree.get('Type') is LITERAL_PAGE:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "513", "colour": "orange", "code": "                if 1 <= self.debug:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "514", "colour": "orange", "code": "                    print >>sys.stderr, 'Page: %r' % tree\n", "error": "none", "author": "tom@organisms.be"}, {"index": "515", "colour": "orange", "code": "                yield (objid, tree)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "516", "colour": "orange", "code": "        if 'Pages' not in self.catalog: return\n", "error": "none", "author": "tom@organisms.be"}, {"index": "517", "colour": "orange", "code": "        for (pageid,tree) in search(self.catalog['Pages'], self.catalog):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "518", "colour": "orange", "code": "            yield PDFPage(self, pageid, tree)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "519", "colour": "orange", "code": "        return\n", "error": "none", "author": "tom@organisms.be"}, {"index": "520", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "521", "colour": "orange", "code": "    def get_outlines(self):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "522", "colour": "orange", "code": "        if 'Outlines' not in self.catalog:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "523", "colour": "orange", "code": "            raise PDFNoOutlines\n", "error": "none", "author": "tom@organisms.be"}, {"index": "524", "colour": "orange", "code": "        def search(entry, level):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "525", "colour": "orange", "code": "            entry = dict_value(entry)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "526", "colour": "orange", "code": "            if 'Title' in entry:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "527", "colour": "orange", "code": "                if 'A' in entry or 'Dest' in entry:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "528", "colour": "orange", "code": "                    title = decode_text(str_value(entry['Title']))\n", "error": "none", "author": "tom@organisms.be"}, {"index": "529", "colour": "orange", "code": "                    dest = entry.get('Dest')\n", "error": "none", "author": "tom@organisms.be"}, {"index": "530", "colour": "orange", "code": "                    action = entry.get('A')\n", "error": "none", "author": "tom@organisms.be"}, {"index": "531", "colour": "orange", "code": "                    se = entry.get('SE')\n", "error": "none", "author": "tom@organisms.be"}, {"index": "532", "colour": "orange", "code": "                    yield (level, title, dest, action, se)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "533", "colour": "orange", "code": "            if 'First' in entry and 'Last' in entry:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "534", "colour": "orange", "code": "                for x in search(entry['First'], level+1):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "535", "colour": "orange", "code": "                    yield x\n", "error": "none", "author": "tom@organisms.be"}, {"index": "536", "colour": "orange", "code": "            if 'Next' in entry:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "537", "colour": "orange", "code": "                for x in search(entry['Next'], level):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "538", "colour": "orange", "code": "                    yield x\n", "error": "none", "author": "tom@organisms.be"}, {"index": "539", "colour": "orange", "code": "            return\n", "error": "none", "author": "tom@organisms.be"}, {"index": "540", "colour": "orange", "code": "        return search(self.catalog['Outlines'], 0)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "541", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "542", "colour": "orange", "code": "    def lookup_name(self, cat, key):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "543", "colour": "orange", "code": "        try:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "544", "colour": "orange", "code": "            names = dict_value(self.catalog['Names'])\n", "error": "none", "author": "tom@organisms.be"}, {"index": "545", "colour": "orange", "code": "        except (PDFTypeError, KeyError):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "546", "colour": "orange", "code": "            raise KeyError((cat,key))\n", "error": "none", "author": "tom@organisms.be"}, {"index": "547", "colour": "orange", "code": "        # may raise KeyError\n", "error": "none", "author": "tom@organisms.be"}, {"index": "548", "colour": "orange", "code": "        d0 = dict_value(names[cat])\n", "error": "none", "author": "tom@organisms.be"}, {"index": "549", "colour": "orange", "code": "        def lookup(d):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "550", "colour": "orange", "code": "            if 'Limits' in d:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "551", "colour": "green", "code": "                (k1,k2) = list_value(d['Limits'])\n", "error": "W", "author": "tom@organisms.be"}, {"index": "552", "colour": "orange", "code": "                if key < k1 or k2 < key: return None\n", "error": "none", "author": "tom@organisms.be"}, {"index": "553", "colour": "orange", "code": "                if 'Names' in d:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "554", "colour": "orange", "code": "                    objs = list_value(d['Names'])\n", "error": "none", "author": "tom@organisms.be"}, {"index": "555", "colour": "orange", "code": "                    names = dict(choplist(2, objs))\n", "error": "none", "author": "tom@organisms.be"}, {"index": "556", "colour": "orange", "code": "                    return names[key]\n", "error": "none", "author": "tom@organisms.be"}, {"index": "557", "colour": "orange", "code": "            if 'Kids' in d:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "558", "colour": "orange", "code": "                for c in list_value(d['Kids']):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "559", "colour": "orange", "code": "                    v = lookup(dict_value(c))\n", "error": "none", "author": "tom@organisms.be"}, {"index": "560", "colour": "orange", "code": "                    if v: return v\n", "error": "none", "author": "tom@organisms.be"}, {"index": "561", "colour": "orange", "code": "            raise KeyError((cat,key))\n", "error": "none", "author": "tom@organisms.be"}, {"index": "562", "colour": "orange", "code": "        return lookup(d0)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "563", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "564", "colour": "orange", "code": "    def get_dest(self, name):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "565", "colour": "orange", "code": "        try:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "566", "colour": "orange", "code": "            # PDF-1.2 or later\n", "error": "none", "author": "tom@organisms.be"}, {"index": "567", "colour": "orange", "code": "            obj = self.lookup_name('Dests', name)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "568", "colour": "orange", "code": "        except KeyError:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "569", "colour": "orange", "code": "            # PDF-1.1 or prior\n", "error": "none", "author": "tom@organisms.be"}, {"index": "570", "colour": "orange", "code": "            if 'Dests' not in self.catalog:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "571", "colour": "orange", "code": "                raise PDFDestinationNotFound(name)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "572", "colour": "orange", "code": "            d0 = dict_value(self.catalog['Dests'])\n", "error": "none", "author": "tom@organisms.be"}, {"index": "573", "colour": "orange", "code": "            if name not in d0:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "574", "colour": "orange", "code": "                raise PDFDestinationNotFound(name)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "575", "colour": "orange", "code": "            obj = d0[name]\n", "error": "none", "author": "tom@organisms.be"}, {"index": "576", "colour": "orange", "code": "        return obj\n", "error": "none", "author": "tom@organisms.be"}, {"index": "577", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "578", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "579", "colour": "orange", "code": "##  PDFParser\n", "error": "none", "author": "tom@organisms.be"}, {"index": "580", "colour": "orange", "code": "##\n", "error": "none", "author": "tom@organisms.be"}, {"index": "581", "colour": "blue", "code": "class PDFParser(PSStackParser):\n", "error": "R", "author": "tom@organisms.be"}, {"index": "582", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "583", "colour": "orange", "code": "    \"\"\"\n", "error": "none", "author": "tom@organisms.be"}, {"index": "584", "colour": "orange", "code": "    PDFParser fetch PDF objects from a file stream.\n", "error": "none", "author": "tom@organisms.be"}, {"index": "585", "colour": "orange", "code": "    It can handle indirect references by referring to\n", "error": "none", "author": "tom@organisms.be"}, {"index": "586", "colour": "orange", "code": "    a PDF document set by set_document method.\n", "error": "none", "author": "tom@organisms.be"}, {"index": "587", "colour": "orange", "code": "    It also reads XRefs at the end of every PDF file.\n", "error": "none", "author": "tom@organisms.be"}, {"index": "588", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "589", "colour": "orange", "code": "    Typical usage:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "590", "colour": "orange", "code": "      parser = PDFParser(fp)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "591", "colour": "orange", "code": "      parser.read_xref()\n", "error": "none", "author": "tom@organisms.be"}, {"index": "592", "colour": "orange", "code": "      parser.set_document(doc)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "593", "colour": "orange", "code": "      parser.seek(offset)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "594", "colour": "orange", "code": "      parser.nextobject()\n", "error": "none", "author": "tom@organisms.be"}, {"index": "595", "colour": "orange", "code": "    \n", "error": "none", "author": "tom@organisms.be"}, {"index": "596", "colour": "orange", "code": "    \"\"\"\n", "error": "none", "author": "tom@organisms.be"}, {"index": "597", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "598", "colour": "orange", "code": "    def __init__(self, fp):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "599", "colour": "orange", "code": "        PSStackParser.__init__(self, fp)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "600", "colour": "orange", "code": "        self.doc = None\n", "error": "none", "author": "tom@organisms.be"}, {"index": "601", "colour": "orange", "code": "        self.fallback = False\n", "error": "none", "author": "tom@organisms.be"}, {"index": "602", "colour": "orange", "code": "        return\n", "error": "none", "author": "tom@organisms.be"}, {"index": "603", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "604", "colour": "orange", "code": "    def set_document(self, doc):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "605", "colour": "orange", "code": "        \"\"\"Associates the parser with a PDFDocument object.\"\"\"\n", "error": "none", "author": "tom@organisms.be"}, {"index": "606", "colour": "orange", "code": "        self.doc = doc\n", "error": "none", "author": "tom@organisms.be"}, {"index": "607", "colour": "orange", "code": "        return\n", "error": "none", "author": "tom@organisms.be"}, {"index": "608", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "609", "colour": "orange", "code": "    KEYWORD_R = KWD('R')\n", "error": "none", "author": "tom@organisms.be"}, {"index": "610", "colour": "orange", "code": "    KEYWORD_NULL = KWD('null')\n", "error": "none", "author": "tom@organisms.be"}, {"index": "611", "colour": "orange", "code": "    KEYWORD_ENDOBJ = KWD('endobj')\n", "error": "none", "author": "tom@organisms.be"}, {"index": "612", "colour": "orange", "code": "    KEYWORD_STREAM = KWD('stream')\n", "error": "none", "author": "tom@organisms.be"}, {"index": "613", "colour": "orange", "code": "    KEYWORD_XREF = KWD('xref')\n", "error": "none", "author": "tom@organisms.be"}, {"index": "614", "colour": "orange", "code": "    KEYWORD_STARTXREF = KWD('startxref')\n", "error": "none", "author": "tom@organisms.be"}, {"index": "615", "colour": "blue", "code": "    def do_keyword(self, pos, token):\n", "error": "R", "author": "tom@organisms.be"}, {"index": "616", "colour": "orange", "code": "        \"\"\"Handles PDF-related keywords.\"\"\"\n", "error": "none", "author": "tom@organisms.be"}, {"index": "617", "colour": "orange", "code": "        \n", "error": "none", "author": "tom@organisms.be"}, {"index": "618", "colour": "orange", "code": "        if token in (self.KEYWORD_XREF, self.KEYWORD_STARTXREF):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "619", "colour": "orange", "code": "            self.add_results(*self.pop(1))\n", "error": "none", "author": "tom@organisms.be"}, {"index": "620", "colour": "orange", "code": "        \n", "error": "none", "author": "tom@organisms.be"}, {"index": "621", "colour": "orange", "code": "        elif token is self.KEYWORD_ENDOBJ:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "622", "colour": "orange", "code": "            self.add_results(*self.pop(4))\n", "error": "none", "author": "tom@organisms.be"}, {"index": "623", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "624", "colour": "orange", "code": "        elif token is self.KEYWORD_NULL:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "625", "colour": "orange", "code": "            # null object\n", "error": "none", "author": "tom@organisms.be"}, {"index": "626", "colour": "orange", "code": "            self.push((pos, None))\n", "error": "none", "author": "tom@organisms.be"}, {"index": "627", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "628", "colour": "orange", "code": "        elif token is self.KEYWORD_R:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "629", "colour": "orange", "code": "            # reference to indirect object\n", "error": "none", "author": "tom@organisms.be"}, {"index": "630", "colour": "orange", "code": "            try:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "631", "colour": "orange", "code": "                ((_,objid), (_,genno)) = self.pop(2)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "632", "colour": "orange", "code": "                (objid, genno) = (int(objid), int(genno))\n", "error": "none", "author": "tom@organisms.be"}, {"index": "633", "colour": "orange", "code": "                obj = PDFObjRef(self.doc, objid, genno)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "634", "colour": "orange", "code": "                self.push((pos, obj))\n", "error": "none", "author": "tom@organisms.be"}, {"index": "635", "colour": "orange", "code": "            except PSSyntaxError:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "636", "colour": "orange", "code": "                pass\n", "error": "none", "author": "tom@organisms.be"}, {"index": "637", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "638", "colour": "orange", "code": "        elif token is self.KEYWORD_STREAM:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "639", "colour": "orange", "code": "            # stream object\n", "error": "none", "author": "tom@organisms.be"}, {"index": "640", "colour": "orange", "code": "            ((_,dic),) = self.pop(1)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "641", "colour": "orange", "code": "            dic = dict_value(dic)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "642", "colour": "orange", "code": "            objlen = 0\n", "error": "none", "author": "tom@organisms.be"}, {"index": "643", "colour": "orange", "code": "            if not self.fallback:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "644", "colour": "orange", "code": "                try:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "645", "colour": "orange", "code": "                    objlen = int_value(dic['Length'])\n", "error": "none", "author": "tom@organisms.be"}, {"index": "646", "colour": "orange", "code": "                except KeyError:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "647", "colour": "orange", "code": "                    if STRICT:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "648", "colour": "orange", "code": "                        raise PDFSyntaxError('/Length is undefined: %r' % dic)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "649", "colour": "orange", "code": "            self.seek(pos)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "650", "colour": "orange", "code": "            try:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "651", "colour": "orange", "code": "                (_, line) = self.nextline()  # 'stream'\n", "error": "none", "author": "tom@organisms.be"}, {"index": "652", "colour": "orange", "code": "            except PSEOF:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "653", "colour": "orange", "code": "                if STRICT:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "654", "colour": "orange", "code": "                    raise PDFSyntaxError('Unexpected EOF')\n", "error": "none", "author": "tom@organisms.be"}, {"index": "655", "colour": "orange", "code": "                return\n", "error": "none", "author": "tom@organisms.be"}, {"index": "656", "colour": "orange", "code": "            pos += len(line)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "657", "colour": "orange", "code": "            self.fp.seek(pos)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "658", "colour": "orange", "code": "            data = self.fp.read(objlen)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "659", "colour": "orange", "code": "            self.seek(pos+objlen)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "660", "colour": "orange", "code": "            while 1:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "661", "colour": "orange", "code": "                try:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "662", "colour": "green", "code": "                    (linepos, line) = self.nextline()\n", "error": "W", "author": "tom@organisms.be"}, {"index": "663", "colour": "orange", "code": "                except PSEOF:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "664", "colour": "orange", "code": "                    if STRICT:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "665", "colour": "orange", "code": "                        raise PDFSyntaxError('Unexpected EOF')\n", "error": "none", "author": "tom@organisms.be"}, {"index": "666", "colour": "orange", "code": "                    break\n", "error": "none", "author": "tom@organisms.be"}, {"index": "667", "colour": "orange", "code": "                if 'endstream' in line:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "668", "colour": "orange", "code": "                    i = line.index('endstream')\n", "error": "none", "author": "tom@organisms.be"}, {"index": "669", "colour": "orange", "code": "                    objlen += i\n", "error": "none", "author": "tom@organisms.be"}, {"index": "670", "colour": "orange", "code": "                    data += line[:i]\n", "error": "none", "author": "tom@organisms.be"}, {"index": "671", "colour": "orange", "code": "                    break\n", "error": "none", "author": "tom@organisms.be"}, {"index": "672", "colour": "orange", "code": "                objlen += len(line)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "673", "colour": "orange", "code": "                data += line\n", "error": "none", "author": "tom@organisms.be"}, {"index": "674", "colour": "orange", "code": "            self.seek(pos+objlen)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "675", "colour": "green", "code": "            # XXX limit objlen not to exceed object boundary\n", "error": "W", "author": "tom@organisms.be"}, {"index": "676", "colour": "orange", "code": "            if 2 <= self.debug:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "677", "colour": "orange", "code": "                print >>sys.stderr, 'Stream: pos=%d, objlen=%d, dic=%r, data=%r...' % \\\n", "error": "none", "author": "tom@organisms.be"}, {"index": "678", "colour": "orange", "code": "                      (pos, objlen, dic, data[:10])\n", "error": "none", "author": "tom@organisms.be"}, {"index": "679", "colour": "orange", "code": "            obj = PDFStream(dic, data, self.doc.decipher)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "680", "colour": "orange", "code": "            self.push((pos, obj))\n", "error": "none", "author": "tom@organisms.be"}, {"index": "681", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "682", "colour": "orange", "code": "        else:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "683", "colour": "orange", "code": "            # others\n", "error": "none", "author": "tom@organisms.be"}, {"index": "684", "colour": "orange", "code": "            self.push((pos, token))\n", "error": "none", "author": "tom@organisms.be"}, {"index": "685", "colour": "orange", "code": "        \n", "error": "none", "author": "tom@organisms.be"}, {"index": "686", "colour": "orange", "code": "        return\n", "error": "none", "author": "tom@organisms.be"}, {"index": "687", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "688", "colour": "orange", "code": "    def find_xref(self):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "689", "colour": "orange", "code": "        \"\"\"Internal function used to locate the first XRef.\"\"\"\n", "error": "none", "author": "tom@organisms.be"}, {"index": "690", "colour": "orange", "code": "        # search the last xref table by scanning the file backwards.\n", "error": "none", "author": "tom@organisms.be"}, {"index": "691", "colour": "orange", "code": "        prev = None\n", "error": "none", "author": "tom@organisms.be"}, {"index": "692", "colour": "orange", "code": "        for line in self.revreadlines():\n", "error": "none", "author": "tom@organisms.be"}, {"index": "693", "colour": "orange", "code": "            line = line.strip()\n", "error": "none", "author": "tom@organisms.be"}, {"index": "694", "colour": "orange", "code": "            if 2 <= self.debug:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "695", "colour": "orange", "code": "                print >>sys.stderr, 'find_xref: %r' % line\n", "error": "none", "author": "tom@organisms.be"}, {"index": "696", "colour": "orange", "code": "            if line == 'startxref': break\n", "error": "none", "author": "tom@organisms.be"}, {"index": "697", "colour": "orange", "code": "            if line:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "698", "colour": "orange", "code": "                prev = line\n", "error": "none", "author": "tom@organisms.be"}, {"index": "699", "colour": "orange", "code": "        else:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "700", "colour": "orange", "code": "            raise PDFNoValidXRef('Unexpected EOF')\n", "error": "none", "author": "tom@organisms.be"}, {"index": "701", "colour": "orange", "code": "        if 1 <= self.debug:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "702", "colour": "orange", "code": "            print >>sys.stderr, 'xref found: pos=%r' % prev\n", "error": "none", "author": "tom@organisms.be"}, {"index": "703", "colour": "orange", "code": "        return long(prev)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "704", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "705", "colour": "orange", "code": "    # read xref table\n", "error": "none", "author": "tom@organisms.be"}, {"index": "706", "colour": "orange", "code": "    def read_xref_from(self, start, xrefs):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "707", "colour": "orange", "code": "        \"\"\"Reads XRefs from the given location.\"\"\"\n", "error": "none", "author": "tom@organisms.be"}, {"index": "708", "colour": "orange", "code": "        self.seek(start)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "709", "colour": "orange", "code": "        self.reset()\n", "error": "none", "author": "tom@organisms.be"}, {"index": "710", "colour": "orange", "code": "        try:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "711", "colour": "orange", "code": "            (pos, token) = self.nexttoken()\n", "error": "none", "author": "tom@organisms.be"}, {"index": "712", "colour": "orange", "code": "        except PSEOF:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "713", "colour": "orange", "code": "            raise PDFNoValidXRef('Unexpected EOF')\n", "error": "none", "author": "tom@organisms.be"}, {"index": "714", "colour": "orange", "code": "        if 2 <= self.debug:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "715", "colour": "orange", "code": "            print >>sys.stderr, 'read_xref_from: start=%d, token=%r' % (start, token)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "716", "colour": "orange", "code": "        if isinstance(token, int):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "717", "colour": "orange", "code": "            # XRefStream: PDF-1.5\n", "error": "none", "author": "tom@organisms.be"}, {"index": "718", "colour": "orange", "code": "            self.seek(pos)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "719", "colour": "orange", "code": "            self.reset()\n", "error": "none", "author": "tom@organisms.be"}, {"index": "720", "colour": "orange", "code": "            xref = PDFXRefStream()\n", "error": "none", "author": "tom@organisms.be"}, {"index": "721", "colour": "orange", "code": "            xref.load(self, debug=self.debug)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "722", "colour": "orange", "code": "        else:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "723", "colour": "orange", "code": "            if token is self.KEYWORD_XREF:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "724", "colour": "orange", "code": "                self.nextline()\n", "error": "none", "author": "tom@organisms.be"}, {"index": "725", "colour": "orange", "code": "            xref = PDFXRef()\n", "error": "none", "author": "tom@organisms.be"}, {"index": "726", "colour": "orange", "code": "            xref.load(self, debug=self.debug)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "727", "colour": "orange", "code": "        xrefs.append(xref)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "728", "colour": "orange", "code": "        trailer = xref.get_trailer()\n", "error": "none", "author": "tom@organisms.be"}, {"index": "729", "colour": "orange", "code": "        if 1 <= self.debug:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "730", "colour": "orange", "code": "            print >>sys.stderr, 'trailer: %r' % trailer\n", "error": "none", "author": "tom@organisms.be"}, {"index": "731", "colour": "orange", "code": "        if 'XRefStm' in trailer:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "732", "colour": "orange", "code": "            pos = int_value(trailer['XRefStm'])\n", "error": "none", "author": "tom@organisms.be"}, {"index": "733", "colour": "orange", "code": "            self.read_xref_from(pos, xrefs)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "734", "colour": "orange", "code": "        if 'Prev' in trailer:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "735", "colour": "orange", "code": "            # find previous xref\n", "error": "none", "author": "tom@organisms.be"}, {"index": "736", "colour": "orange", "code": "            pos = int_value(trailer['Prev'])\n", "error": "none", "author": "tom@organisms.be"}, {"index": "737", "colour": "orange", "code": "            self.read_xref_from(pos, xrefs)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "738", "colour": "orange", "code": "        return\n", "error": "none", "author": "tom@organisms.be"}, {"index": "739", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "740", "colour": "orange", "code": "    # read xref tables and trailers\n", "error": "none", "author": "tom@organisms.be"}, {"index": "741", "colour": "orange", "code": "    def read_xref(self):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "742", "colour": "orange", "code": "        \"\"\"Reads all the XRefs in the PDF file and returns them.\"\"\"\n", "error": "none", "author": "tom@organisms.be"}, {"index": "743", "colour": "orange", "code": "        xrefs = []\n", "error": "none", "author": "tom@organisms.be"}, {"index": "744", "colour": "orange", "code": "        try:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "745", "colour": "orange", "code": "            pos = self.find_xref()\n", "error": "none", "author": "tom@organisms.be"}, {"index": "746", "colour": "orange", "code": "            self.read_xref_from(pos, xrefs)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "747", "colour": "orange", "code": "        except PDFNoValidXRef:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "748", "colour": "orange", "code": "            # fallback\n", "error": "none", "author": "tom@organisms.be"}, {"index": "749", "colour": "orange", "code": "            if 1 <= self.debug:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "750", "colour": "orange", "code": "                print >>sys.stderr, 'no xref, fallback'\n", "error": "none", "author": "tom@organisms.be"}, {"index": "751", "colour": "orange", "code": "            self.fallback = True\n", "error": "none", "author": "tom@organisms.be"}, {"index": "752", "colour": "orange", "code": "            xref = PDFXRef()\n", "error": "none", "author": "tom@organisms.be"}, {"index": "753", "colour": "orange", "code": "            xref.load_fallback(self)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "754", "colour": "orange", "code": "            xrefs.append(xref)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "755", "colour": "orange", "code": "        return xrefs\n", "error": "none", "author": "tom@organisms.be"}, {"index": "756", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "757", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "758", "colour": "orange", "code": "##  PDFStreamParser\n", "error": "none", "author": "tom@organisms.be"}, {"index": "759", "colour": "orange", "code": "##\n", "error": "none", "author": "tom@organisms.be"}, {"index": "760", "colour": "blue", "code": "class PDFStreamParser(PDFParser):\n", "error": "R", "author": "tom@organisms.be"}, {"index": "761", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "762", "colour": "orange", "code": "    \"\"\"\n", "error": "none", "author": "tom@organisms.be"}, {"index": "763", "colour": "orange", "code": "    PDFStreamParser is used to parse PDF content streams\n", "error": "none", "author": "tom@organisms.be"}, {"index": "764", "colour": "orange", "code": "    that is contained in each page and has instructions\n", "error": "none", "author": "tom@organisms.be"}, {"index": "765", "colour": "orange", "code": "    for rendering the page. A reference to a PDF document is\n", "error": "none", "author": "tom@organisms.be"}, {"index": "766", "colour": "orange", "code": "    needed because a PDF content stream can also have\n", "error": "none", "author": "tom@organisms.be"}, {"index": "767", "colour": "orange", "code": "    indirect references to other objects in the same document.\n", "error": "none", "author": "tom@organisms.be"}, {"index": "768", "colour": "orange", "code": "    \"\"\"\n", "error": "none", "author": "tom@organisms.be"}, {"index": "769", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "770", "colour": "orange", "code": "    def __init__(self, data):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "771", "colour": "orange", "code": "        PDFParser.__init__(self, StringIO(data))\n", "error": "none", "author": "tom@organisms.be"}, {"index": "772", "colour": "orange", "code": "        return\n", "error": "none", "author": "tom@organisms.be"}, {"index": "773", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "774", "colour": "orange", "code": "    def flush(self):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "775", "colour": "orange", "code": "        self.add_results(*self.popall())\n", "error": "none", "author": "tom@organisms.be"}, {"index": "776", "colour": "orange", "code": "        return\n", "error": "none", "author": "tom@organisms.be"}, {"index": "777", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "778", "colour": "orange", "code": "    def do_keyword(self, pos, token):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "779", "colour": "orange", "code": "        if token is self.KEYWORD_R:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "780", "colour": "orange", "code": "            # reference to indirect object\n", "error": "none", "author": "tom@organisms.be"}, {"index": "781", "colour": "orange", "code": "            try:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "782", "colour": "orange", "code": "                ((_,objid), (_,genno)) = self.pop(2)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "783", "colour": "orange", "code": "                (objid, genno) = (int(objid), int(genno))\n", "error": "none", "author": "tom@organisms.be"}, {"index": "784", "colour": "orange", "code": "                obj = PDFObjRef(self.doc, objid, genno)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "785", "colour": "orange", "code": "                self.push((pos, obj))\n", "error": "none", "author": "tom@organisms.be"}, {"index": "786", "colour": "orange", "code": "            except PSSyntaxError:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "787", "colour": "orange", "code": "                pass\n", "error": "none", "author": "tom@organisms.be"}, {"index": "788", "colour": "orange", "code": "            return\n", "error": "none", "author": "tom@organisms.be"}, {"index": "789", "colour": "orange", "code": "        # others\n", "error": "none", "author": "tom@organisms.be"}, {"index": "790", "colour": "orange", "code": "        self.push((pos, token))\n", "error": "none", "author": "tom@organisms.be"}, {"index": "791", "colour": "orange", "code": "        return\n", "error": "none", "author": "tom@organisms.be"}]}