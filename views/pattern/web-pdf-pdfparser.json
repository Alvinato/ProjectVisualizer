{"path": "/home/asumal/git/cs410/pattern/pattern/web/pdf/pdfparser.py", "lines": [[{"error": "C", "line": "1", "code": "#!/usr/bin/env python2\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "2", "code": "import sys\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "3", "code": "import re\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "4", "code": "import struct\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "5", "code": "try:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "6", "code": "    import hashlib as md5\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "7", "code": "except ImportError:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "8", "code": "    import md5\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "9", "code": "try:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "10", "code": "    from cStringIO import StringIO\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "11", "code": "except ImportError:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "12", "code": "    from StringIO import StringIO\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "W", "line": "13", "code": "from psparser import PSStackParser\n", "colour": "purple", "author": "tom@organisms.be"}, {"error": "W", "line": "14", "code": "from psparser import PSSyntaxError, PSEOF\n", "colour": "purple", "author": "tom@organisms.be"}, {"error": "W", "line": "15", "code": "from psparser import literal_name\n", "colour": "purple", "author": "tom@organisms.be"}, {"error": "W", "line": "16", "code": "from psparser import LIT, KWD, STRICT\n", "colour": "purple", "author": "tom@organisms.be"}, {"error": "W", "line": "17", "code": "from pdftypes import PDFException, PDFTypeError, PDFNotImplementedError\n", "colour": "purple", "author": "tom@organisms.be"}, {"error": "W", "line": "18", "code": "from pdftypes import PDFStream, PDFObjRef\n", "colour": "purple", "author": "tom@organisms.be"}, {"error": "W", "line": "19", "code": "from pdftypes import resolve1, decipher_all\n", "colour": "purple", "author": "tom@organisms.be"}, {"error": "W", "line": "20", "code": "from pdftypes import int_value, float_value, num_value\n", "colour": "purple", "author": "tom@organisms.be"}, {"error": "W", "line": "21", "code": "from pdftypes import str_value, list_value, dict_value, stream_value\n", "colour": "purple", "author": "tom@organisms.be"}, {"error": "W", "line": "22", "code": "from arcfour import Arcfour\n", "colour": "purple", "author": "tom@organisms.be"}, {"error": "W", "line": "23", "code": "from utils import choplist, nunpack\n", "colour": "purple", "author": "tom@organisms.be"}, {"error": "W", "line": "24", "code": "from utils import decode_text, ObjIdRange\n", "colour": "purple", "author": "tom@organisms.be"}, {"error": "none", "line": "25", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "26", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "27", "code": "##  Exceptions\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "28", "code": "##\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "29", "code": "class PDFSyntaxError(PDFException): pass\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "C", "line": "30", "code": "class PDFNoValidXRef(PDFSyntaxError): pass\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "C", "line": "31", "code": "class PDFNoOutlines(PDFException): pass\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "C", "line": "32", "code": "class PDFDestinationNotFound(PDFException): pass\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "C", "line": "33", "code": "class PDFEncryptionError(PDFException): pass\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "C", "line": "34", "code": "class PDFPasswordIncorrect(PDFEncryptionError): pass\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "35", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "36", "code": "# some predefined literals and keywords.\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "37", "code": "LITERAL_OBJSTM = LIT('ObjStm')\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "38", "code": "LITERAL_XREF = LIT('XRef')\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "39", "code": "LITERAL_PAGE = LIT('Page')\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "40", "code": "LITERAL_PAGES = LIT('Pages')\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "41", "code": "LITERAL_CATALOG = LIT('Catalog')\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "42", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "43", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "44", "code": "##  XRefs\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "45", "code": "##\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "46", "code": "class PDFBaseXRef(object):\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "47", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "48", "code": "    def get_trailer(self):\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "49", "code": "        raise NotImplementedError\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "50", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "R", "line": "51", "code": "    def get_objids(self):\n", "colour": "green", "author": "tom@organisms.be"}, {"error": "none", "line": "52", "code": "        return []\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "53", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "R", "line": "54", "code": "    def get_pos(self, objid):\n", "colour": "green", "author": "tom@organisms.be"}, {"error": "none", "line": "55", "code": "        raise KeyError(objid)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "56", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "57", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "58", "code": "##  PDFXRef\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "59", "code": "##\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "60", "code": "class PDFXRef(PDFBaseXRef):\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "C", "line": "61", "code": "    \n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "62", "code": "    def __init__(self):\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "63", "code": "        self.offsets = {}\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "64", "code": "        self.trailer = {}\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "65", "code": "        return\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "66", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "67", "code": "    def load(self, parser, debug=0):\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "68", "code": "        while 1:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "69", "code": "            try:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "70", "code": "                (pos, line) = parser.nextline()\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "71", "code": "                if not line.strip(): continue\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "72", "code": "            except PSEOF:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "73", "code": "                raise PDFNoValidXRef('Unexpected EOF - file corrupted?')\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "74", "code": "            if not line:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "75", "code": "                raise PDFNoValidXRef('Premature eof: %r' % parser)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "76", "code": "            if line.startswith('trailer'):\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "77", "code": "                parser.seek(pos)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "78", "code": "                break\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "79", "code": "            f = line.strip().split(' ')\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "80", "code": "            if len(f) != 2:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "81", "code": "                raise PDFNoValidXRef('Trailer not found: %r: line=%r' % (parser, line))\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "82", "code": "            try:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "W", "line": "83", "code": "                (start, nobjs) = map(long, f)\n", "colour": "purple", "author": "tom@organisms.be"}, {"error": "none", "line": "84", "code": "            except ValueError:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "85", "code": "                raise PDFNoValidXRef('Invalid line: %r: line=%r' % (parser, line))\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "86", "code": "            for objid in xrange(start, start+nobjs):\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "87", "code": "                try:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "88", "code": "                    (_, line) = parser.nextline()\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "89", "code": "                except PSEOF:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "90", "code": "                    raise PDFNoValidXRef('Unexpected EOF - file corrupted?')\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "91", "code": "                f = line.strip().split(' ')\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "92", "code": "                if len(f) != 3:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "93", "code": "                    raise PDFNoValidXRef('Invalid XRef format: %r, line=%r' % (parser, line))\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "94", "code": "                (pos, genno, use) = f\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "95", "code": "                if use != 'n': continue\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "96", "code": "                self.offsets[objid] = (int(genno), long(pos))\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "97", "code": "        if 1 <= debug:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "98", "code": "            print >>sys.stderr, 'xref objects:', self.offsets\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "99", "code": "        self.load_trailer(parser)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "100", "code": "        return\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "101", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "102", "code": "    KEYWORD_TRAILER = KWD('trailer')\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "103", "code": "    def load_trailer(self, parser):\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "104", "code": "        try:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "105", "code": "            (_,kwd) = parser.nexttoken()\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "106", "code": "            assert kwd is self.KEYWORD_TRAILER\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "107", "code": "            (_,dic) = parser.nextobject()\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "108", "code": "        except PSEOF:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "109", "code": "            x = parser.pop(1)\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "110", "code": "            if not x:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "111", "code": "                raise PDFNoValidXRef('Unexpected EOF - file corrupted')\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "112", "code": "            (_,dic) = x[0]\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "113", "code": "        self.trailer.update(dict_value(dic))\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "114", "code": "        return\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "115", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "116", "code": "    PDFOBJ_CUE = re.compile(r'^(\\d+)\\s+(\\d+)\\s+obj\\b')\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "117", "code": "    def load_fallback(self, parser, debug=0):\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "118", "code": "        parser.seek(0)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "119", "code": "        while 1:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "120", "code": "            try:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "121", "code": "                (pos, line) = parser.nextline()\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "122", "code": "            except PSEOF:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "123", "code": "                break\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "124", "code": "            if line.startswith('trailer'):\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "125", "code": "                parser.seek(pos)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "126", "code": "                self.load_trailer(parser)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "127", "code": "                if 1 <= debug:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "128", "code": "                    print >>sys.stderr, 'trailer: %r' % self.get_trailer()\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "129", "code": "                break\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "130", "code": "            m = self.PDFOBJ_CUE.match(line)\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "C", "line": "131", "code": "            if not m: continue\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "W", "line": "132", "code": "            (objid, genno) = m.groups()\n", "colour": "purple", "author": "tom@organisms.be"}, {"error": "none", "line": "133", "code": "            self.offsets[int(objid)] = (0, pos)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "134", "code": "        return\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "135", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "136", "code": "    def get_trailer(self):\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "137", "code": "        return self.trailer\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "138", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "139", "code": "    def get_objids(self):\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "140", "code": "        return self.offsets.iterkeys()\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "141", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "142", "code": "    def get_pos(self, objid):\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "143", "code": "        try:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "W", "line": "144", "code": "            (genno, pos) = self.offsets[objid]\n", "colour": "purple", "author": "tom@organisms.be"}, {"error": "none", "line": "145", "code": "        except KeyError:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "146", "code": "            raise\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "147", "code": "        return (None, pos)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "148", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "149", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "150", "code": "##  PDFXRefStream\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "151", "code": "##\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "152", "code": "class PDFXRefStream(PDFBaseXRef):\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "153", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "154", "code": "    def __init__(self):\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "155", "code": "        self.data = None\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "156", "code": "        self.entlen = None\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "157", "code": "        self.fl1 = self.fl2 = self.fl3 = None\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "158", "code": "        self.objid_ranges = []\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "159", "code": "        return\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "160", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "161", "code": "    def __repr__(self):\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "162", "code": "        return '<PDFXRefStream: fields=%d,%d,%d>' % (self.fl1, self.fl2, self.fl3)\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "163", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "164", "code": "    def load(self, parser, debug=0):\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "W", "line": "165", "code": "        (_,objid) = parser.nexttoken() # ignored\n", "colour": "purple", "author": "tom@organisms.be"}, {"error": "W", "line": "166", "code": "        (_,genno) = parser.nexttoken() # ignored\n", "colour": "purple", "author": "tom@organisms.be"}, {"error": "W", "line": "167", "code": "        (_,kwd) = parser.nexttoken()\n", "colour": "purple", "author": "tom@organisms.be"}, {"error": "C", "line": "168", "code": "        (_,stream) = parser.nextobject()\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "C", "line": "169", "code": "        if not isinstance(stream, PDFStream) or stream['Type'] is not LITERAL_XREF:\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "170", "code": "            raise PDFNoValidXRef('Invalid PDF stream spec.')\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "171", "code": "        size = stream['Size']\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "172", "code": "        index_array = stream.get('Index', (0,size))\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "173", "code": "        if len(index_array) % 2 != 0:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "174", "code": "            raise PDFSyntaxError('Invalid index number')\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "175", "code": "        self.objid_ranges.extend( ObjIdRange(start, nobjs) \n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "C", "line": "176", "code": "                                  for (start,nobjs) in choplist(2, index_array) )\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "177", "code": "        (self.fl1, self.fl2, self.fl3) = stream['W']\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "178", "code": "        self.data = stream.get_data()\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "179", "code": "        self.entlen = self.fl1+self.fl2+self.fl3\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "W", "line": "180", "code": "        self.trailer = stream.attrs\n", "colour": "purple", "author": "tom@organisms.be"}, {"error": "none", "line": "181", "code": "        if 1 <= debug:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "182", "code": "            print >>sys.stderr, ('xref stream: objid=%s, fields=%d,%d,%d' %\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "W", "line": "183", "code": "                             (', '.join(map(repr, self.objid_ranges)),\n", "colour": "purple", "author": "tom@organisms.be"}, {"error": "none", "line": "184", "code": "                              self.fl1, self.fl2, self.fl3))\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "185", "code": "        return\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "186", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "187", "code": "    def get_trailer(self):\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "188", "code": "        return self.trailer\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "189", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "190", "code": "    def get_objids(self):\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "191", "code": "        for objid_range in self.objid_ranges:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "192", "code": "            for x in xrange(objid_range.get_start_id(), objid_range.get_end_id()+1):\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "193", "code": "                yield x\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "194", "code": "        return\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "195", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "196", "code": "    def get_pos(self, objid):\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "197", "code": "        offset = 0\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "198", "code": "        found = False\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "199", "code": "        for objid_range in self.objid_ranges:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "200", "code": "            if objid >= objid_range.get_start_id() and objid <= objid_range.get_end_id():\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "201", "code": "                offset += objid - objid_range.get_start_id()\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "202", "code": "                found = True\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "203", "code": "                break\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "204", "code": "            else:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "205", "code": "                offset += objid_range.get_nobjs()\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "206", "code": "        if not found: raise KeyError(objid)\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "207", "code": "        i = self.entlen * offset\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "208", "code": "        ent = self.data[i:i+self.entlen]\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "209", "code": "        f1 = nunpack(ent[:self.fl1], 1)\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "210", "code": "        if f1 == 1:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "211", "code": "            pos = nunpack(ent[self.fl1:self.fl1+self.fl2])\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "W", "line": "212", "code": "            genno = nunpack(ent[self.fl1+self.fl2:])\n", "colour": "purple", "author": "tom@organisms.be"}, {"error": "none", "line": "213", "code": "            return (None, pos)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "214", "code": "        elif f1 == 2:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "215", "code": "            objid = nunpack(ent[self.fl1:self.fl1+self.fl2])\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "216", "code": "            index = nunpack(ent[self.fl1+self.fl2:])\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "217", "code": "            return (objid, index)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "218", "code": "        # this is a free object\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "219", "code": "        raise KeyError(objid)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "220", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "221", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "222", "code": "##  PDFPage\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "223", "code": "##\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "R", "line": "224", "code": "class PDFPage(object):\n", "colour": "green", "author": "tom@organisms.be"}, {"error": "none", "line": "225", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "226", "code": "    \"\"\"An object that holds the information about a page.\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "227", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "228", "code": "    A PDFPage object is merely a convenience class that has a set\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "229", "code": "    of keys and values, which describe the properties of a page\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "230", "code": "    and point to its contents.\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "231", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "232", "code": "    Attributes:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "233", "code": "      doc: a PDFDocument object.\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "234", "code": "      pageid: any Python object that can uniquely identify the page.\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "235", "code": "      attrs: a dictionary of page attributes.\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "236", "code": "      contents: a list of PDFStream objects that represents the page content.\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "237", "code": "      lastmod: the last modified time of the page.\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "238", "code": "      resources: a list of resources used by the page.\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "239", "code": "      mediabox: the physical size of the page.\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "240", "code": "      cropbox: the crop rectangle of the page.\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "241", "code": "      rotate: the page rotation (in degree).\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "242", "code": "      annots: the page annotations.\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "243", "code": "      beads: a chain that represents natural reading order.\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "244", "code": "    \"\"\"\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "245", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "246", "code": "    def __init__(self, doc, pageid, attrs):\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "247", "code": "        \"\"\"Initialize a page object.\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "248", "code": "        \n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "249", "code": "        doc: a PDFDocument object.\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "250", "code": "        pageid: any Python object that can uniquely identify the page.\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "251", "code": "        attrs: a dictionary of page attributes.\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "252", "code": "        \"\"\"\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "253", "code": "        self.doc = doc\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "254", "code": "        self.pageid = pageid\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "255", "code": "        self.attrs = dict_value(attrs)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "256", "code": "        self.lastmod = resolve1(self.attrs.get('LastModified'))\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "257", "code": "        self.resources = resolve1(self.attrs['Resources'])\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "258", "code": "        self.mediabox = resolve1(self.attrs['MediaBox'])\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "259", "code": "        if 'CropBox' in self.attrs:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "260", "code": "            self.cropbox = resolve1(self.attrs['CropBox'])\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "261", "code": "        else:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "262", "code": "            self.cropbox = self.mediabox\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "263", "code": "        self.rotate = (self.attrs.get('Rotate', 0)+360) % 360\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "264", "code": "        self.annots = self.attrs.get('Annots')\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "265", "code": "        self.beads = self.attrs.get('B')\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "266", "code": "        if 'Contents' in self.attrs:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "267", "code": "            contents = resolve1(self.attrs['Contents'])\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "268", "code": "        else:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "269", "code": "            contents = []\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "270", "code": "        if not isinstance(contents, list):\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "271", "code": "            contents = [ contents ]\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "272", "code": "        self.contents = contents\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "273", "code": "        return\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "274", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "275", "code": "    def __repr__(self):\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "276", "code": "        return '<PDFPage: Resources=%r, MediaBox=%r>' % (self.resources, self.mediabox)\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "277", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "278", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "279", "code": "##  PDFDocument\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "280", "code": "##\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "R", "line": "281", "code": "class PDFDocument(object):\n", "colour": "green", "author": "tom@organisms.be"}, {"error": "none", "line": "282", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "283", "code": "    \"\"\"PDFDocument object represents a PDF document.\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "284", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "285", "code": "    Since a PDF file can be very big, normally it is not loaded at\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "286", "code": "    once. So PDF document has to cooperate with a PDF parser in order to\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "287", "code": "    dynamically import the data as processing goes.\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "288", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "289", "code": "    Typical usage:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "290", "code": "      doc = PDFDocument()\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "291", "code": "      doc.set_parser(parser)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "292", "code": "      doc.initialize(password)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "293", "code": "      obj = doc.getobj(objid)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "294", "code": "    \n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "295", "code": "    \"\"\"\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "296", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "297", "code": "    debug = 0\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "298", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "299", "code": "    def __init__(self, caching=True):\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "300", "code": "        self.caching = caching\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "301", "code": "        self.xrefs = []\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "302", "code": "        self.info = []\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "303", "code": "        self.catalog = None\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "304", "code": "        self.encryption = None\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "305", "code": "        self.decipher = None\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "306", "code": "        self._parser = None\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "307", "code": "        self._cached_objs = {}\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "308", "code": "        self._parsed_objs = {}\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "309", "code": "        return\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "310", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "311", "code": "    def set_parser(self, parser):\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "312", "code": "        \"Set the document to use a given PDFParser object.\"\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "313", "code": "        if self._parser: return\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "314", "code": "        self._parser = parser\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "315", "code": "        # Retrieve the information of each header that was appended\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "316", "code": "        # (maybe multiple times) at the end of the document.\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "317", "code": "        self.xrefs = parser.read_xref()\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "318", "code": "        for xref in self.xrefs:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "319", "code": "            trailer = xref.get_trailer()\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "320", "code": "            if not trailer: continue\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "321", "code": "            # If there's an encryption info, remember it.\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "322", "code": "            if 'Encrypt' in trailer:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "323", "code": "                #assert not self.encryption\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "324", "code": "                self.encryption = (list_value(trailer['ID']),\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "325", "code": "                                   dict_value(trailer['Encrypt']))\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "326", "code": "            if 'Info' in trailer:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "327", "code": "                self.info.append(dict_value(trailer['Info']))\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "328", "code": "            if 'Root' in trailer:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "329", "code": "                #  Every PDF file must have exactly one /Root dictionary.\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "330", "code": "                self.catalog = dict_value(trailer['Root'])\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "331", "code": "                break\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "332", "code": "        else:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "333", "code": "            raise PDFSyntaxError('No /Root object! - Is this really a PDF?')\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "334", "code": "        if self.catalog.get('Type') is not LITERAL_CATALOG:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "335", "code": "            if STRICT:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "336", "code": "                raise PDFSyntaxError('Catalog not found!')\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "337", "code": "        return\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "338", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "339", "code": "    # initialize(password='')\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "340", "code": "    #   Perform the initialization with a given password.\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "341", "code": "    #   This step is mandatory even if there's no password associated\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "342", "code": "    #   with the document.\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "343", "code": "    PASSWORD_PADDING = '(\\xbfN^Nu\\x8aAd\\x00NV\\xff\\xfa\\x01\\x08..\\x00\\xb6\\xd0h>\\x80/\\x0c\\xa9\\xfedSiz'\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "R", "line": "344", "code": "    def initialize(self, password=''):\n", "colour": "green", "author": "tom@organisms.be"}, {"error": "none", "line": "345", "code": "        if not self.encryption:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "W", "line": "346", "code": "            self.is_printable = self.is_modifiable = self.is_extractable = True\n", "colour": "purple", "author": "tom@organisms.be"}, {"error": "none", "line": "347", "code": "            return\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "W", "line": "348", "code": "        (docid, param) = self.encryption\n", "colour": "purple", "author": "tom@organisms.be"}, {"error": "none", "line": "349", "code": "        if literal_name(param.get('Filter')) != 'Standard':\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "350", "code": "            raise PDFEncryptionError('Unknown filter: param=%r' % param)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "351", "code": "        V = int_value(param.get('V', 0))\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "352", "code": "        if not (V == 1 or V == 2):\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "353", "code": "            raise PDFEncryptionError('Unknown algorithm: param=%r' % param)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "354", "code": "        length = int_value(param.get('Length', 40)) # Key length (bits)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "355", "code": "        O = str_value(param['O'])\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "C", "line": "356", "code": "        R = int_value(param['R']) # Revision\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "357", "code": "        if 5 <= R:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "358", "code": "            raise PDFEncryptionError('Unknown revision: %r' % R)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "359", "code": "        U = str_value(param['U'])\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "C", "line": "360", "code": "        P = int_value(param['P'])\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "W", "line": "361", "code": "        self.is_printable = bool(P & 4)\n", "colour": "purple", "author": "tom@organisms.be"}, {"error": "W", "line": "362", "code": "        self.is_modifiable = bool(P & 8)\n", "colour": "purple", "author": "tom@organisms.be"}, {"error": "W", "line": "363", "code": "        self.is_extractable = bool(P & 16)\n", "colour": "purple", "author": "tom@organisms.be"}, {"error": "none", "line": "364", "code": "        # Algorithm 3.2\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "365", "code": "        password = (password+self.PASSWORD_PADDING)[:32] # 1\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "W", "line": "366", "code": "        hash = md5.md5(password) # 2\n", "colour": "purple", "author": "tom@organisms.be"}, {"error": "none", "line": "367", "code": "        hash.update(O) # 3\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "368", "code": "        hash.update(struct.pack('<l', P)) # 4\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "369", "code": "        hash.update(docid[0]) # 5\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "370", "code": "        if 4 <= R:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "371", "code": "            # 6\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "372", "code": "            raise PDFNotImplementedError('Revision 4 encryption is currently unsupported')\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "373", "code": "        if 3 <= R:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "374", "code": "            # 8\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "375", "code": "            for _ in xrange(50):\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "376", "code": "                hash = md5.md5(hash.digest()[:length/8])\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "377", "code": "        key = hash.digest()[:length/8]\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "378", "code": "        if R == 2:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "379", "code": "            # Algorithm 3.4\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "380", "code": "            u1 = Arcfour(key).process(self.PASSWORD_PADDING)\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "381", "code": "        elif R == 3:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "382", "code": "            # Algorithm 3.5\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "383", "code": "            hash = md5.md5(self.PASSWORD_PADDING) # 2\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "384", "code": "            hash.update(docid[0]) # 3\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "385", "code": "            x = Arcfour(key).process(hash.digest()[:16]) # 4\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "C", "line": "386", "code": "            for i in xrange(1,19+1):\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "C", "line": "387", "code": "                k = ''.join( chr(ord(c) ^ i) for c in key )\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "C", "line": "388", "code": "                x = Arcfour(k).process(x)\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "C", "line": "389", "code": "            u1 = x+x # 32bytes total\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "390", "code": "        if R == 2:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "391", "code": "            is_authenticated = (u1 == U)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "392", "code": "        else:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "393", "code": "            is_authenticated = (u1[:16] == U[:16])\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "394", "code": "        if not is_authenticated:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "395", "code": "            raise PDFPasswordIncorrect\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "W", "line": "396", "code": "        self.decrypt_key = key\n", "colour": "purple", "author": "tom@organisms.be"}, {"error": "W", "line": "397", "code": "        self.decipher = self.decrypt_rc4  # XXX may be AES\n", "colour": "purple", "author": "tom@organisms.be"}, {"error": "none", "line": "398", "code": "        return\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "399", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "400", "code": "    def decrypt_rc4(self, objid, genno, data):\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "C", "line": "401", "code": "        key = self.decrypt_key + struct.pack('<L',objid)[:3]+struct.pack('<L',genno)[:2]\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "W", "line": "402", "code": "        hash = md5.md5(key)\n", "colour": "purple", "author": "tom@organisms.be"}, {"error": "C", "line": "403", "code": "        key = hash.digest()[:min(len(key),16)]\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "404", "code": "        return Arcfour(key).process(data)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "405", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "406", "code": "    KEYWORD_OBJ = KWD('obj')\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "R", "line": "407", "code": "    def getobj(self, objid):\n", "colour": "green", "author": "tom@organisms.be"}, {"error": "none", "line": "408", "code": "        if not self.xrefs:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "409", "code": "            raise PDFException('PDFDocument is not initialized')\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "410", "code": "        if 2 <= self.debug:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "411", "code": "            print >>sys.stderr, 'getobj: objid=%r' % (objid)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "412", "code": "        if objid in self._cached_objs:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "413", "code": "            genno = 0\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "414", "code": "            obj = self._cached_objs[objid]\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "415", "code": "        else:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "416", "code": "            for xref in self.xrefs:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "417", "code": "                try:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "418", "code": "                    (strmid, index) = xref.get_pos(objid)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "419", "code": "                    break\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "420", "code": "                except KeyError:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "421", "code": "                    pass\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "422", "code": "            else:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "423", "code": "                if STRICT:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "424", "code": "                    raise PDFSyntaxError('Cannot locate objid=%r' % objid)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "425", "code": "                # return null for a nonexistent reference.\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "426", "code": "                return None\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "427", "code": "            if strmid:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "428", "code": "                stream = stream_value(self.getobj(strmid))\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "429", "code": "                if stream.get('Type') is not LITERAL_OBJSTM:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "430", "code": "                    if STRICT:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "431", "code": "                        raise PDFSyntaxError('Not a stream object: %r' % stream)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "432", "code": "                try:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "433", "code": "                    n = stream['N']\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "434", "code": "                except KeyError:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "435", "code": "                    if STRICT:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "436", "code": "                        raise PDFSyntaxError('N is not defined: %r' % stream)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "437", "code": "                    n = 0\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "438", "code": "                if strmid in self._parsed_objs:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "439", "code": "                    objs = self._parsed_objs[strmid]\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "440", "code": "                else:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "441", "code": "                    parser = PDFStreamParser(stream.get_data())\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "442", "code": "                    parser.set_document(self)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "443", "code": "                    objs = []\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "444", "code": "                    try:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "445", "code": "                        while 1:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "446", "code": "                            (_,obj) = parser.nextobject()\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "447", "code": "                            objs.append(obj)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "448", "code": "                    except PSEOF:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "449", "code": "                        pass\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "450", "code": "                    if self.caching:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "451", "code": "                        self._parsed_objs[strmid] = objs\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "452", "code": "                genno = 0\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "453", "code": "                i = n*2+index\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "454", "code": "                try:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "455", "code": "                    obj = objs[i]\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "456", "code": "                except IndexError:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "457", "code": "                    raise PDFSyntaxError('Invalid object number: objid=%r' % (objid))\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "458", "code": "                if isinstance(obj, PDFStream):\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "459", "code": "                    obj.set_objid(objid, 0)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "460", "code": "            else:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "461", "code": "                self._parser.seek(index)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "462", "code": "                (_,objid1) = self._parser.nexttoken() # objid\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "C", "line": "463", "code": "                (_,genno) = self._parser.nexttoken() # genno\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "C", "line": "464", "code": "                (_,kwd) = self._parser.nexttoken()\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "465", "code": "                # #### hack around malformed pdf files\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "466", "code": "                #assert objid1 == objid, (objid, objid1)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "467", "code": "                if objid1 != objid:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "468", "code": "                    x = []\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "469", "code": "                    while kwd is not self.KEYWORD_OBJ:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "470", "code": "                        (_,kwd) = self._parser.nexttoken()\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "471", "code": "                        x.append(kwd)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "472", "code": "                    if x:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "473", "code": "                        objid1 = x[-2]\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "474", "code": "                        genno = x[-1]\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "475", "code": "                # #### end hack around malformed pdf files\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "476", "code": "                if kwd is not self.KEYWORD_OBJ:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "477", "code": "                    raise PDFSyntaxError('Invalid object spec: offset=%r' % index)\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "478", "code": "                try:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "479", "code": "                    (_,obj) = self._parser.nextobject()\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "480", "code": "                    if isinstance(obj, PDFStream):\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "481", "code": "                        obj.set_objid(objid, genno)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "482", "code": "                except PSEOF:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "483", "code": "                    return None\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "484", "code": "            if 2 <= self.debug:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "485", "code": "                print >>sys.stderr, 'register: objid=%r: %r' % (objid, obj)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "486", "code": "            if self.caching:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "487", "code": "                self._cached_objs[objid] = obj\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "488", "code": "        if self.decipher:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "489", "code": "            obj = decipher_all(self.decipher, objid, genno, obj)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "490", "code": "        return obj\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "491", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "492", "code": "    INHERITABLE_ATTRS = set(['Resources', 'MediaBox', 'CropBox', 'Rotate'])\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "R", "line": "493", "code": "    def get_pages(self):\n", "colour": "green", "author": "tom@organisms.be"}, {"error": "none", "line": "494", "code": "        if not self.xrefs:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "495", "code": "            raise PDFException('PDFDocument is not initialized')\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "496", "code": "        def search(obj, parent):\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "497", "code": "            if isinstance(obj, int):\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "498", "code": "                objid = obj\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "499", "code": "                tree = dict_value(self.getobj(objid)).copy()\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "500", "code": "            else:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "501", "code": "                objid = obj.objid\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "502", "code": "                tree = dict_value(obj).copy()\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "503", "code": "            for (k,v) in parent.iteritems():\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "504", "code": "                if k in self.INHERITABLE_ATTRS and k not in tree:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "505", "code": "                    tree[k] = v\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "506", "code": "            if tree.get('Type') is LITERAL_PAGES and 'Kids' in tree:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "507", "code": "                if 1 <= self.debug:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "508", "code": "                    print >>sys.stderr, 'Pages: Kids=%r' % tree['Kids']\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "509", "code": "                for c in list_value(tree['Kids']):\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "C", "line": "510", "code": "                    for x in search(c, tree):\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "511", "code": "                        yield x\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "512", "code": "            elif tree.get('Type') is LITERAL_PAGE:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "513", "code": "                if 1 <= self.debug:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "514", "code": "                    print >>sys.stderr, 'Page: %r' % tree\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "515", "code": "                yield (objid, tree)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "516", "code": "        if 'Pages' not in self.catalog: return\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "C", "line": "517", "code": "        for (pageid,tree) in search(self.catalog['Pages'], self.catalog):\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "518", "code": "            yield PDFPage(self, pageid, tree)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "519", "code": "        return\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "520", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "521", "code": "    def get_outlines(self):\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "522", "code": "        if 'Outlines' not in self.catalog:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "523", "code": "            raise PDFNoOutlines\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "524", "code": "        def search(entry, level):\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "525", "code": "            entry = dict_value(entry)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "526", "code": "            if 'Title' in entry:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "527", "code": "                if 'A' in entry or 'Dest' in entry:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "528", "code": "                    title = decode_text(str_value(entry['Title']))\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "529", "code": "                    dest = entry.get('Dest')\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "530", "code": "                    action = entry.get('A')\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "531", "code": "                    se = entry.get('SE')\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "532", "code": "                    yield (level, title, dest, action, se)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "533", "code": "            if 'First' in entry and 'Last' in entry:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "534", "code": "                for x in search(entry['First'], level+1):\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "535", "code": "                    yield x\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "536", "code": "            if 'Next' in entry:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "537", "code": "                for x in search(entry['Next'], level):\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "538", "code": "                    yield x\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "539", "code": "            return\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "540", "code": "        return search(self.catalog['Outlines'], 0)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "541", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "542", "code": "    def lookup_name(self, cat, key):\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "543", "code": "        try:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "544", "code": "            names = dict_value(self.catalog['Names'])\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "545", "code": "        except (PDFTypeError, KeyError):\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "546", "code": "            raise KeyError((cat,key))\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "547", "code": "        # may raise KeyError\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "548", "code": "        d0 = dict_value(names[cat])\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "C", "line": "549", "code": "        def lookup(d):\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "550", "code": "            if 'Limits' in d:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "551", "code": "                (k1,k2) = list_value(d['Limits'])\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "C", "line": "552", "code": "                if key < k1 or k2 < key: return None\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "553", "code": "                if 'Names' in d:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "554", "code": "                    objs = list_value(d['Names'])\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "555", "code": "                    names = dict(choplist(2, objs))\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "556", "code": "                    return names[key]\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "557", "code": "            if 'Kids' in d:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "558", "code": "                for c in list_value(d['Kids']):\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "C", "line": "559", "code": "                    v = lookup(dict_value(c))\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "C", "line": "560", "code": "                    if v: return v\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "C", "line": "561", "code": "            raise KeyError((cat,key))\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "562", "code": "        return lookup(d0)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "563", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "564", "code": "    def get_dest(self, name):\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "565", "code": "        try:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "566", "code": "            # PDF-1.2 or later\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "567", "code": "            obj = self.lookup_name('Dests', name)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "568", "code": "        except KeyError:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "569", "code": "            # PDF-1.1 or prior\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "570", "code": "            if 'Dests' not in self.catalog:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "571", "code": "                raise PDFDestinationNotFound(name)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "572", "code": "            d0 = dict_value(self.catalog['Dests'])\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "573", "code": "            if name not in d0:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "574", "code": "                raise PDFDestinationNotFound(name)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "575", "code": "            obj = d0[name]\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "576", "code": "        return obj\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "577", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "578", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "579", "code": "##  PDFParser\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "580", "code": "##\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "R", "line": "581", "code": "class PDFParser(PSStackParser):\n", "colour": "green", "author": "tom@organisms.be"}, {"error": "none", "line": "582", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "583", "code": "    \"\"\"\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "584", "code": "    PDFParser fetch PDF objects from a file stream.\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "585", "code": "    It can handle indirect references by referring to\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "586", "code": "    a PDF document set by set_document method.\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "587", "code": "    It also reads XRefs at the end of every PDF file.\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "588", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "589", "code": "    Typical usage:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "590", "code": "      parser = PDFParser(fp)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "591", "code": "      parser.read_xref()\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "592", "code": "      parser.set_document(doc)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "593", "code": "      parser.seek(offset)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "594", "code": "      parser.nextobject()\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "595", "code": "    \n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "596", "code": "    \"\"\"\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "597", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "598", "code": "    def __init__(self, fp):\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "599", "code": "        PSStackParser.__init__(self, fp)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "600", "code": "        self.doc = None\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "601", "code": "        self.fallback = False\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "602", "code": "        return\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "603", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "604", "code": "    def set_document(self, doc):\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "605", "code": "        \"\"\"Associates the parser with a PDFDocument object.\"\"\"\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "606", "code": "        self.doc = doc\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "607", "code": "        return\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "608", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "609", "code": "    KEYWORD_R = KWD('R')\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "610", "code": "    KEYWORD_NULL = KWD('null')\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "611", "code": "    KEYWORD_ENDOBJ = KWD('endobj')\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "612", "code": "    KEYWORD_STREAM = KWD('stream')\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "613", "code": "    KEYWORD_XREF = KWD('xref')\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "614", "code": "    KEYWORD_STARTXREF = KWD('startxref')\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "R", "line": "615", "code": "    def do_keyword(self, pos, token):\n", "colour": "green", "author": "tom@organisms.be"}, {"error": "none", "line": "616", "code": "        \"\"\"Handles PDF-related keywords.\"\"\"\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "617", "code": "        \n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "618", "code": "        if token in (self.KEYWORD_XREF, self.KEYWORD_STARTXREF):\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "619", "code": "            self.add_results(*self.pop(1))\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "620", "code": "        \n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "621", "code": "        elif token is self.KEYWORD_ENDOBJ:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "622", "code": "            self.add_results(*self.pop(4))\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "623", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "624", "code": "        elif token is self.KEYWORD_NULL:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "625", "code": "            # null object\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "626", "code": "            self.push((pos, None))\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "627", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "628", "code": "        elif token is self.KEYWORD_R:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "629", "code": "            # reference to indirect object\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "630", "code": "            try:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "631", "code": "                ((_,objid), (_,genno)) = self.pop(2)\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "632", "code": "                (objid, genno) = (int(objid), int(genno))\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "633", "code": "                obj = PDFObjRef(self.doc, objid, genno)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "634", "code": "                self.push((pos, obj))\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "635", "code": "            except PSSyntaxError:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "636", "code": "                pass\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "637", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "638", "code": "        elif token is self.KEYWORD_STREAM:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "639", "code": "            # stream object\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "640", "code": "            ((_,dic),) = self.pop(1)\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "641", "code": "            dic = dict_value(dic)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "642", "code": "            objlen = 0\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "643", "code": "            if not self.fallback:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "644", "code": "                try:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "645", "code": "                    objlen = int_value(dic['Length'])\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "646", "code": "                except KeyError:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "647", "code": "                    if STRICT:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "648", "code": "                        raise PDFSyntaxError('/Length is undefined: %r' % dic)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "649", "code": "            self.seek(pos)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "650", "code": "            try:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "651", "code": "                (_, line) = self.nextline()  # 'stream'\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "652", "code": "            except PSEOF:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "653", "code": "                if STRICT:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "654", "code": "                    raise PDFSyntaxError('Unexpected EOF')\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "655", "code": "                return\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "656", "code": "            pos += len(line)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "657", "code": "            self.fp.seek(pos)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "658", "code": "            data = self.fp.read(objlen)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "659", "code": "            self.seek(pos+objlen)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "660", "code": "            while 1:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "661", "code": "                try:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "W", "line": "662", "code": "                    (linepos, line) = self.nextline()\n", "colour": "purple", "author": "tom@organisms.be"}, {"error": "none", "line": "663", "code": "                except PSEOF:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "664", "code": "                    if STRICT:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "665", "code": "                        raise PDFSyntaxError('Unexpected EOF')\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "666", "code": "                    break\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "667", "code": "                if 'endstream' in line:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "668", "code": "                    i = line.index('endstream')\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "669", "code": "                    objlen += i\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "670", "code": "                    data += line[:i]\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "671", "code": "                    break\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "672", "code": "                objlen += len(line)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "673", "code": "                data += line\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "674", "code": "            self.seek(pos+objlen)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "W", "line": "675", "code": "            # XXX limit objlen not to exceed object boundary\n", "colour": "purple", "author": "tom@organisms.be"}, {"error": "none", "line": "676", "code": "            if 2 <= self.debug:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "677", "code": "                print >>sys.stderr, 'Stream: pos=%d, objlen=%d, dic=%r, data=%r...' % \\\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "678", "code": "                      (pos, objlen, dic, data[:10])\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "679", "code": "            obj = PDFStream(dic, data, self.doc.decipher)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "680", "code": "            self.push((pos, obj))\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "681", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "682", "code": "        else:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "683", "code": "            # others\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "684", "code": "            self.push((pos, token))\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "685", "code": "        \n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "686", "code": "        return\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "687", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "688", "code": "    def find_xref(self):\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "689", "code": "        \"\"\"Internal function used to locate the first XRef.\"\"\"\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "690", "code": "        # search the last xref table by scanning the file backwards.\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "691", "code": "        prev = None\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "692", "code": "        for line in self.revreadlines():\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "693", "code": "            line = line.strip()\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "694", "code": "            if 2 <= self.debug:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "695", "code": "                print >>sys.stderr, 'find_xref: %r' % line\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "696", "code": "            if line == 'startxref': break\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "697", "code": "            if line:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "698", "code": "                prev = line\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "699", "code": "        else:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "700", "code": "            raise PDFNoValidXRef('Unexpected EOF')\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "701", "code": "        if 1 <= self.debug:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "702", "code": "            print >>sys.stderr, 'xref found: pos=%r' % prev\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "703", "code": "        return long(prev)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "704", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "705", "code": "    # read xref table\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "706", "code": "    def read_xref_from(self, start, xrefs):\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "707", "code": "        \"\"\"Reads XRefs from the given location.\"\"\"\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "708", "code": "        self.seek(start)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "709", "code": "        self.reset()\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "710", "code": "        try:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "711", "code": "            (pos, token) = self.nexttoken()\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "712", "code": "        except PSEOF:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "713", "code": "            raise PDFNoValidXRef('Unexpected EOF')\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "714", "code": "        if 2 <= self.debug:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "715", "code": "            print >>sys.stderr, 'read_xref_from: start=%d, token=%r' % (start, token)\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "716", "code": "        if isinstance(token, int):\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "717", "code": "            # XRefStream: PDF-1.5\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "718", "code": "            self.seek(pos)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "719", "code": "            self.reset()\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "720", "code": "            xref = PDFXRefStream()\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "721", "code": "            xref.load(self, debug=self.debug)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "722", "code": "        else:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "723", "code": "            if token is self.KEYWORD_XREF:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "724", "code": "                self.nextline()\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "725", "code": "            xref = PDFXRef()\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "726", "code": "            xref.load(self, debug=self.debug)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "727", "code": "        xrefs.append(xref)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "728", "code": "        trailer = xref.get_trailer()\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "729", "code": "        if 1 <= self.debug:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "730", "code": "            print >>sys.stderr, 'trailer: %r' % trailer\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "731", "code": "        if 'XRefStm' in trailer:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "732", "code": "            pos = int_value(trailer['XRefStm'])\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "733", "code": "            self.read_xref_from(pos, xrefs)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "734", "code": "        if 'Prev' in trailer:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "735", "code": "            # find previous xref\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "736", "code": "            pos = int_value(trailer['Prev'])\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "737", "code": "            self.read_xref_from(pos, xrefs)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "738", "code": "        return\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "739", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "740", "code": "    # read xref tables and trailers\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "741", "code": "    def read_xref(self):\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "742", "code": "        \"\"\"Reads all the XRefs in the PDF file and returns them.\"\"\"\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "743", "code": "        xrefs = []\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "744", "code": "        try:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "745", "code": "            pos = self.find_xref()\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "746", "code": "            self.read_xref_from(pos, xrefs)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "747", "code": "        except PDFNoValidXRef:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "748", "code": "            # fallback\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "749", "code": "            if 1 <= self.debug:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "750", "code": "                print >>sys.stderr, 'no xref, fallback'\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "751", "code": "            self.fallback = True\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "752", "code": "            xref = PDFXRef()\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "753", "code": "            xref.load_fallback(self)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "754", "code": "            xrefs.append(xref)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "755", "code": "        return xrefs\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "756", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "757", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "758", "code": "##  PDFStreamParser\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "759", "code": "##\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "R", "line": "760", "code": "class PDFStreamParser(PDFParser):\n", "colour": "green", "author": "tom@organisms.be"}, {"error": "none", "line": "761", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "762", "code": "    \"\"\"\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "763", "code": "    PDFStreamParser is used to parse PDF content streams\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "764", "code": "    that is contained in each page and has instructions\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "765", "code": "    for rendering the page. A reference to a PDF document is\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "766", "code": "    needed because a PDF content stream can also have\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "767", "code": "    indirect references to other objects in the same document.\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "768", "code": "    \"\"\"\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "769", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "770", "code": "    def __init__(self, data):\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "771", "code": "        PDFParser.__init__(self, StringIO(data))\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "772", "code": "        return\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "773", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "774", "code": "    def flush(self):\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "775", "code": "        self.add_results(*self.popall())\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "776", "code": "        return\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "777", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "778", "code": "    def do_keyword(self, pos, token):\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "779", "code": "        if token is self.KEYWORD_R:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "780", "code": "            # reference to indirect object\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "781", "code": "            try:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "782", "code": "                ((_,objid), (_,genno)) = self.pop(2)\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "783", "code": "                (objid, genno) = (int(objid), int(genno))\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "784", "code": "                obj = PDFObjRef(self.doc, objid, genno)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "785", "code": "                self.push((pos, obj))\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "786", "code": "            except PSSyntaxError:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "787", "code": "                pass\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "788", "code": "            return\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "789", "code": "        # others\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "790", "code": "        self.push((pos, token))\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "791", "code": "        return\n", "colour": "black", "author": "tom@organisms.be"}]]}