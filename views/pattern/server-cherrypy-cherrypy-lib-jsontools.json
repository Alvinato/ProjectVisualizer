{"path": "/home/asumal/git/cs410/pattern/pattern/server/cherrypy/cherrypy/lib/jsontools.py", "lines": [[{"error": "W", "line": "1", "code": "import sys\n", "colour": "purple", "author": "tom@organisms.be"}, {"error": "none", "line": "2", "code": "import cherrypy\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "W", "line": "3", "code": "from cherrypy._cpcompat import basestring, ntou, json, json_encode, json_decode\n", "colour": "purple", "author": "tom@organisms.be"}, {"error": "none", "line": "4", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "5", "code": "def json_processor(entity):\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "6", "code": "    \"\"\"Read application/json data into request.json.\"\"\"\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "7", "code": "    if not entity.headers.get(ntou(\"Content-Length\"), ntou(\"\")):\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "8", "code": "        raise cherrypy.HTTPError(411)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "9", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "10", "code": "    body = entity.fp.read()\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "11", "code": "    try:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "12", "code": "        cherrypy.serving.request.json = json_decode(body.decode('utf-8'))\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "13", "code": "    except ValueError:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "14", "code": "        raise cherrypy.HTTPError(400, 'Invalid JSON document')\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "15", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "W", "line": "16", "code": "def json_in(content_type=[ntou('application/json'), ntou('text/javascript')],\n", "colour": "purple", "author": "tom@organisms.be"}, {"error": "C", "line": "17", "code": "            force=True, debug=False, processor = json_processor):\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "18", "code": "    \"\"\"Add a processor to parse JSON request entities:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "19", "code": "    The default processor places the parsed data into request.json.\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "20", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "21", "code": "    Incoming request entities which match the given content_type(s) will\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "22", "code": "    be deserialized from JSON to the Python equivalent, and the result\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "23", "code": "    stored at cherrypy.request.json. The 'content_type' argument may\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "24", "code": "    be a Content-Type string or a list of allowable Content-Type strings.\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "25", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "26", "code": "    If the 'force' argument is True (the default), then entities of other\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "27", "code": "    content types will not be allowed; \"415 Unsupported Media Type\" is\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "28", "code": "    raised instead.\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "29", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "30", "code": "    Supply your own processor to use a custom decoder, or to handle the parsed\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "31", "code": "    data differently.  The processor can be configured via\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "32", "code": "    tools.json_in.processor or via the decorator method.\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "33", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "34", "code": "    Note that the deserializer requires the client send a Content-Length\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "35", "code": "    request header, or it will raise \"411 Length Required\". If for any\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "36", "code": "    other reason the request entity cannot be deserialized from JSON,\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "37", "code": "    it will raise \"400 Bad Request: Invalid JSON document\".\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "38", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "39", "code": "    You must be using Python 2.6 or greater, or have the 'simplejson'\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "40", "code": "    package importable; otherwise, ValueError is raised during processing.\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "41", "code": "    \"\"\"\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "42", "code": "    request = cherrypy.serving.request\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "43", "code": "    if isinstance(content_type, basestring):\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "44", "code": "        content_type = [content_type]\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "45", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "46", "code": "    if force:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "47", "code": "        if debug:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "48", "code": "            cherrypy.log('Removing body processors %s' %\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "49", "code": "                         repr(request.body.processors.keys()), 'TOOLS.JSON_IN')\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "50", "code": "        request.body.processors.clear()\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "51", "code": "        request.body.default_proc = cherrypy.HTTPError(\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "52", "code": "            415, 'Expected an entity of content type %s' %\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "53", "code": "            ', '.join(content_type))\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "54", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "55", "code": "    for ct in content_type:\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "56", "code": "        if debug:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "57", "code": "            cherrypy.log('Adding body processor for %s' % ct, 'TOOLS.JSON_IN')\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "58", "code": "        request.body.processors[ct] = processor\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "59", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "60", "code": "def json_handler(*args, **kwargs):\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "W", "line": "61", "code": "    value = cherrypy.serving.request._json_inner_handler(*args, **kwargs)\n", "colour": "purple", "author": "tom@organisms.be"}, {"error": "none", "line": "62", "code": "    return json_encode(value)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "63", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "64", "code": "def json_out(content_type='application/json', debug=False, handler=json_handler):\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "65", "code": "    \"\"\"Wrap request.handler to serialize its output to JSON. Sets Content-Type.\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "66", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "67", "code": "    If the given content_type is None, the Content-Type response header\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "68", "code": "    is not set.\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "69", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "70", "code": "    Provide your own handler to use a custom encoder.  For example\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "71", "code": "    cherrypy.config['tools.json_out.handler'] = <function>, or\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "72", "code": "    @json_out(handler=function).\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "73", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "74", "code": "    You must be using Python 2.6 or greater, or have the 'simplejson'\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "75", "code": "    package importable; otherwise, ValueError is raised during processing.\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "76", "code": "    \"\"\"\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "77", "code": "    request = cherrypy.serving.request\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "78", "code": "    if debug:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "79", "code": "        cherrypy.log('Replacing %s with JSON handler' % request.handler,\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "80", "code": "                     'TOOLS.JSON_OUT')\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "W", "line": "81", "code": "    request._json_inner_handler = request.handler\n", "colour": "purple", "author": "tom@organisms.be"}, {"error": "none", "line": "82", "code": "    request.handler = handler\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "83", "code": "    if content_type is not None:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "84", "code": "        if debug:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "85", "code": "            cherrypy.log('Setting Content-Type to %s' % content_type, 'TOOLS.JSON_OUT')\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "86", "code": "        cherrypy.serving.response.headers['Content-Type'] = content_type\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "87", "code": "\n", "colour": "black", "author": "tom@organisms.be"}]]}