{"path": "/home/asumal/git/cs410/pattern/pattern/server/cherrypy/cherrypy/lib/covercp.py", "lines": [[{"error": "none", "line": "1", "code": "\"\"\"Code-coverage tools for CherryPy.\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "2", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "3", "code": "To use this module, or the coverage tools in the test suite,\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "4", "code": "you need to download 'coverage.py', either Gareth Rees' `original\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "5", "code": "implementation <http://www.garethrees.org/2001/12/04/python-coverage/>`_\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "6", "code": "or Ned Batchelder's `enhanced version:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "7", "code": "<http://www.nedbatchelder.com/code/modules/coverage.html>`_\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "8", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "9", "code": "To turn on coverage tracing, use the following code::\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "10", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "11", "code": "    cherrypy.engine.subscribe('start', covercp.start)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "12", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "13", "code": "DO NOT subscribe anything on the 'start_thread' channel, as previously\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "14", "code": "recommended. Calling start once in the main thread should be sufficient\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "15", "code": "to start coverage on all threads. Calling start again in each thread\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "16", "code": "effectively clears any coverage data gathered up to that point.\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "17", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "18", "code": "Run your code, then use the ``covercp.serve()`` function to browse the\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "19", "code": "results in a web browser. If you run this module from the command line,\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "20", "code": "it will call ``serve()`` for you.\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "21", "code": "\"\"\"\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "22", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "23", "code": "import re\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "24", "code": "import sys\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "25", "code": "import cgi\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "26", "code": "from cherrypy._cpcompat import quote_plus\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "27", "code": "import os, os.path\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "28", "code": "localFile = os.path.join(os.path.dirname(__file__), \"coverage.cache\")\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "29", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "30", "code": "the_coverage = None\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "31", "code": "try:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "F", "line": "32", "code": "    from coverage import coverage\n", "colour": "red", "author": "tom@organisms.be"}, {"error": "C", "line": "33", "code": "    the_coverage = coverage(data_file=localFile)\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "C", "line": "34", "code": "    def start():\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "35", "code": "        the_coverage.start()\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "36", "code": "except ImportError:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "37", "code": "    # Setting the_coverage to None will raise errors\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "38", "code": "    # that need to be trapped downstream.\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "39", "code": "    the_coverage = None\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "40", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "41", "code": "    import warnings\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "42", "code": "    warnings.warn(\"No code coverage will be performed; coverage.py could not be imported.\")\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "43", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "44", "code": "    def start():\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "45", "code": "        pass\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "46", "code": "start.priority = 20\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "47", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "48", "code": "TEMPLATE_MENU = \"\"\"<html>\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "49", "code": "<head>\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "50", "code": "    <title>CherryPy Coverage Menu</title>\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "51", "code": "    <style>\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "52", "code": "        body {font: 9pt Arial, serif;}\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "53", "code": "        #tree {\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "54", "code": "            font-size: 8pt;\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "55", "code": "            font-family: Andale Mono, monospace;\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "56", "code": "            white-space: pre;\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "57", "code": "            }\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "58", "code": "        #tree a:active, a:focus {\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "59", "code": "            background-color: black;\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "60", "code": "            padding: 1px;\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "61", "code": "            color: white;\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "62", "code": "            border: 0px solid #9999FF;\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "63", "code": "            -moz-outline-style: none;\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "64", "code": "            }\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "65", "code": "        .fail { color: red;}\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "66", "code": "        .pass { color: #888;}\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "67", "code": "        #pct { text-align: right;}\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "68", "code": "        h3 {\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "69", "code": "            font-size: small;\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "70", "code": "            font-weight: bold;\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "71", "code": "            font-style: italic;\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "72", "code": "            margin-top: 5px;\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "73", "code": "            }\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "74", "code": "        input { border: 1px solid #ccc; padding: 2px; }\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "75", "code": "        .directory {\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "76", "code": "            color: #933;\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "77", "code": "            font-style: italic;\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "78", "code": "            font-weight: bold;\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "79", "code": "            font-size: 10pt;\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "80", "code": "            }\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "81", "code": "        .file {\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "82", "code": "            color: #400;\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "83", "code": "            }\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "84", "code": "        a { text-decoration: none; }\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "85", "code": "        #crumbs {\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "86", "code": "            color: white;\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "87", "code": "            font-size: 8pt;\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "88", "code": "            font-family: Andale Mono, monospace;\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "89", "code": "            width: 100%;\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "90", "code": "            background-color: black;\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "91", "code": "            }\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "92", "code": "        #crumbs a {\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "93", "code": "            color: #f88;\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "94", "code": "            }\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "95", "code": "        #options {\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "96", "code": "            line-height: 2.3em;\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "97", "code": "            border: 1px solid black;\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "98", "code": "            background-color: #eee;\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "99", "code": "            padding: 4px;\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "100", "code": "            }\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "101", "code": "        #exclude {\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "102", "code": "            width: 100%;\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "103", "code": "            margin-bottom: 3px;\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "104", "code": "            border: 1px solid #999;\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "105", "code": "            }\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "106", "code": "        #submit {\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "107", "code": "            background-color: black;\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "108", "code": "            color: white;\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "109", "code": "            border: 0;\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "110", "code": "            margin-bottom: -9px;\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "111", "code": "            }\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "112", "code": "    </style>\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "113", "code": "</head>\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "114", "code": "<body>\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "115", "code": "<h2>CherryPy Coverage</h2>\"\"\"\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "116", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "117", "code": "TEMPLATE_FORM = \"\"\"\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "118", "code": "<div id=\"options\">\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "119", "code": "<form action='menu' method=GET>\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "120", "code": "    <input type='hidden' name='base' value='%(base)s' />\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "121", "code": "    Show percentages <input type='checkbox' %(showpct)s name='showpct' value='checked' /><br />\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "122", "code": "    Hide files over <input type='text' id='pct' name='pct' value='%(pct)s' size='3' />%%<br />\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "123", "code": "    Exclude files matching<br />\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "124", "code": "    <input type='text' id='exclude' name='exclude' value='%(exclude)s' size='20' />\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "125", "code": "    <br />\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "126", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "127", "code": "    <input type='submit' value='Change view' id=\"submit\"/>\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "128", "code": "</form>\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "129", "code": "</div>\"\"\"\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "130", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "131", "code": "TEMPLATE_FRAMESET = \"\"\"<html>\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "132", "code": "<head><title>CherryPy coverage data</title></head>\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "133", "code": "<frameset cols='250, 1*'>\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "134", "code": "    <frame src='menu?base=%s' />\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "135", "code": "    <frame name='main' src='' />\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "136", "code": "</frameset>\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "137", "code": "</html>\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "138", "code": "\"\"\"\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "139", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "140", "code": "TEMPLATE_COVERAGE = \"\"\"<html>\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "141", "code": "<head>\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "142", "code": "    <title>Coverage for %(name)s</title>\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "143", "code": "    <style>\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "144", "code": "        h2 { margin-bottom: .25em; }\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "145", "code": "        p { margin: .25em; }\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "146", "code": "        .covered { color: #000; background-color: #fff; }\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "147", "code": "        .notcovered { color: #fee; background-color: #500; }\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "148", "code": "        .excluded { color: #00f; background-color: #fff; }\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "149", "code": "         table .covered, table .notcovered, table .excluded\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "150", "code": "             { font-family: Andale Mono, monospace;\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "151", "code": "               font-size: 10pt; white-space: pre; }\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "152", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "153", "code": "         .lineno { background-color: #eee;}\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "154", "code": "         .notcovered .lineno { background-color: #000;}\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "155", "code": "         table { border-collapse: collapse;\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "156", "code": "    </style>\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "157", "code": "</head>\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "158", "code": "<body>\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "159", "code": "<h2>%(name)s</h2>\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "160", "code": "<p>%(fullpath)s</p>\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "161", "code": "<p>Coverage: %(pc)s%%</p>\"\"\"\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "162", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "163", "code": "TEMPLATE_LOC_COVERED = \"\"\"<tr class=\"covered\">\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "164", "code": "    <td class=\"lineno\">%s&nbsp;</td>\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "165", "code": "    <td>%s</td>\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "166", "code": "</tr>\\n\"\"\"\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "167", "code": "TEMPLATE_LOC_NOT_COVERED = \"\"\"<tr class=\"notcovered\">\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "168", "code": "    <td class=\"lineno\">%s&nbsp;</td>\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "169", "code": "    <td>%s</td>\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "170", "code": "</tr>\\n\"\"\"\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "171", "code": "TEMPLATE_LOC_EXCLUDED = \"\"\"<tr class=\"excluded\">\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "172", "code": "    <td class=\"lineno\">%s&nbsp;</td>\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "173", "code": "    <td>%s</td>\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "174", "code": "</tr>\\n\"\"\"\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "175", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "176", "code": "TEMPLATE_ITEM = \"%s%s<a class='file' href='report?name=%s' target='main'>%s</a>\\n\"\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "177", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "178", "code": "def _percent(statements, missing):\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "C", "line": "179", "code": "    s = len(statements)\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "C", "line": "180", "code": "    e = s - len(missing)\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "181", "code": "    if s > 0:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "182", "code": "        return int(round(100.0 * e / s))\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "183", "code": "    return 0\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "184", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "R", "line": "185", "code": "def _show_branch(root, base, path, pct=0, showpct=False, exclude=\"\",\n", "colour": "green", "author": "tom@organisms.be"}, {"error": "W", "line": "186", "code": "                 coverage=the_coverage):\n", "colour": "purple", "author": "tom@organisms.be"}, {"error": "none", "line": "187", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "188", "code": "    # Show the directory name and any of our children\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "189", "code": "    dirs = [k for k, v in root.items() if v]\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "190", "code": "    dirs.sort()\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "191", "code": "    for name in dirs:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "192", "code": "        newpath = os.path.join(path, name)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "193", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "194", "code": "        if newpath.lower().startswith(base):\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "195", "code": "            relpath = newpath[len(base):]\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "196", "code": "            yield \"| \" * relpath.count(os.sep)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "197", "code": "            yield \"<a class='directory' href='menu?base=%s&exclude=%s'>%s</a>\\n\" % \\\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "198", "code": "                   (newpath, quote_plus(exclude), name)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "199", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "200", "code": "        for chunk in _show_branch(root[name], base, newpath, pct, showpct, exclude, coverage=coverage):\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "201", "code": "            yield chunk\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "202", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "203", "code": "    # Now list the files\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "204", "code": "    if path.lower().startswith(base):\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "205", "code": "        relpath = path[len(base):]\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "206", "code": "        files = [k for k, v in root.items() if not v]\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "207", "code": "        files.sort()\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "208", "code": "        for name in files:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "209", "code": "            newpath = os.path.join(path, name)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "210", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "211", "code": "            pc_str = \"\"\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "212", "code": "            if showpct:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "213", "code": "                try:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "214", "code": "                    _, statements, _, missing, _ = coverage.analysis2(newpath)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "W", "line": "215", "code": "                except:\n", "colour": "purple", "author": "tom@organisms.be"}, {"error": "none", "line": "216", "code": "                    # Yes, we really want to pass on all errors.\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "217", "code": "                    pass\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "218", "code": "                else:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "219", "code": "                    pc = _percent(statements, missing)\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "C", "line": "220", "code": "                    pc_str = (\"%3d%% \" % pc).replace(' ','&nbsp;')\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "221", "code": "                    if pc < float(pct) or pc == -1:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "222", "code": "                        pc_str = \"<span class='fail'>%s</span>\" % pc_str\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "223", "code": "                    else:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "224", "code": "                        pc_str = \"<span class='pass'>%s</span>\" % pc_str\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "225", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "226", "code": "            yield TEMPLATE_ITEM % (\"| \" * (relpath.count(os.sep) + 1),\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "227", "code": "                                   pc_str, newpath, name)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "228", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "229", "code": "def _skip_file(path, exclude):\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "230", "code": "    if exclude:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "231", "code": "        return bool(re.search(exclude, path))\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "232", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "233", "code": "def _graft(path, tree):\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "C", "line": "234", "code": "    d = tree\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "235", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "236", "code": "    p = path\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "237", "code": "    atoms = []\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "238", "code": "    while True:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "239", "code": "        p, tail = os.path.split(p)\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "240", "code": "        if not tail:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "241", "code": "            break\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "242", "code": "        atoms.append(tail)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "243", "code": "    atoms.append(p)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "244", "code": "    if p != \"/\":\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "245", "code": "        atoms.append(\"/\")\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "246", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "247", "code": "    atoms.reverse()\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "248", "code": "    for node in atoms:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "249", "code": "        if node:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "250", "code": "            d = d.setdefault(node, {})\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "251", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "W", "line": "252", "code": "def get_tree(base, exclude, coverage=the_coverage):\n", "colour": "purple", "author": "tom@organisms.be"}, {"error": "none", "line": "253", "code": "    \"\"\"Return covered module names as a nested dict.\"\"\"\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "254", "code": "    tree = {}\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "255", "code": "    runs = coverage.data.executed_files()\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "256", "code": "    for path in runs:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "257", "code": "        if not _skip_file(path, exclude) and not os.path.isdir(path):\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "258", "code": "            _graft(path, tree)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "259", "code": "    return tree\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "260", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "261", "code": "class CoverStats(object):\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "262", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "W", "line": "263", "code": "    def __init__(self, coverage, root=None):\n", "colour": "purple", "author": "tom@organisms.be"}, {"error": "none", "line": "264", "code": "        self.coverage = coverage\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "265", "code": "        if root is None:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "266", "code": "            # Guess initial depth. Files outside this path will not be\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "267", "code": "            # reachable from the web interface.\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "268", "code": "            import cherrypy\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "269", "code": "            root = os.path.dirname(cherrypy.__file__)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "270", "code": "        self.root = root\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "271", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "272", "code": "    def index(self):\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "273", "code": "        return TEMPLATE_FRAMESET % self.root.lower()\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "274", "code": "    index.exposed = True\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "275", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "276", "code": "    def menu(self, base=\"/\", pct=\"50\", showpct=\"\",\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "277", "code": "             exclude=r'python\\d\\.\\d|test|tut\\d|tutorial'):\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "278", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "279", "code": "        # The coverage module uses all-lower-case names.\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "280", "code": "        base = base.lower().rstrip(os.sep)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "281", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "282", "code": "        yield TEMPLATE_MENU\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "283", "code": "        yield TEMPLATE_FORM % locals()\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "284", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "285", "code": "        # Start by showing links for parent paths\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "286", "code": "        yield \"<div id='crumbs'>\"\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "287", "code": "        path = \"\"\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "288", "code": "        atoms = base.split(os.sep)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "289", "code": "        atoms.pop()\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "290", "code": "        for atom in atoms:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "291", "code": "            path += atom + os.sep\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "292", "code": "            yield (\"<a href='menu?base=%s&exclude=%s'>%s</a> %s\"\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "293", "code": "                   % (path, quote_plus(exclude), atom, os.sep))\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "294", "code": "        yield \"</div>\"\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "295", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "296", "code": "        yield \"<div id='tree'>\"\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "297", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "298", "code": "        # Then display the tree\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "299", "code": "        tree = get_tree(base, exclude, self.coverage)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "300", "code": "        if not tree:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "301", "code": "            yield \"<p>No modules covered.</p>\"\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "302", "code": "        else:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "303", "code": "            for chunk in _show_branch(tree, base, \"/\", pct,\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "304", "code": "                                      showpct=='checked', exclude, coverage=self.coverage):\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "305", "code": "                yield chunk\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "306", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "307", "code": "        yield \"</div>\"\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "308", "code": "        yield \"</body></html>\"\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "309", "code": "    menu.exposed = True\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "310", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "R", "line": "311", "code": "    def annotated_file(self, filename, statements, excluded, missing):\n", "colour": "green", "author": "tom@organisms.be"}, {"error": "none", "line": "312", "code": "        source = open(filename, 'r')\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "W", "line": "313", "code": "        buffer = []\n", "colour": "purple", "author": "tom@organisms.be"}, {"error": "none", "line": "314", "code": "        for lineno, line in enumerate(source.readlines()):\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "315", "code": "            lineno += 1\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "316", "code": "            line = line.strip(\"\\n\\r\")\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "317", "code": "            empty_the_buffer = True\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "318", "code": "            if lineno in excluded:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "319", "code": "                template = TEMPLATE_LOC_EXCLUDED\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "320", "code": "            elif lineno in missing:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "321", "code": "                template = TEMPLATE_LOC_NOT_COVERED\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "322", "code": "            elif lineno in statements:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "323", "code": "                template = TEMPLATE_LOC_COVERED\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "324", "code": "            else:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "325", "code": "                empty_the_buffer = False\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "326", "code": "                buffer.append((lineno, line))\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "327", "code": "            if empty_the_buffer:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "328", "code": "                for lno, pastline in buffer:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "329", "code": "                    yield template % (lno, cgi.escape(pastline))\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "330", "code": "                buffer = []\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "331", "code": "                yield template % (lineno, cgi.escape(line))\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "332", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "333", "code": "    def report(self, name):\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "C", "line": "334", "code": "        filename, statements, excluded, missing, _ = self.coverage.analysis2(name)\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "C", "line": "335", "code": "        pc = _percent(statements, missing)\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "336", "code": "        yield TEMPLATE_COVERAGE % dict(name=os.path.basename(name),\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "337", "code": "                                       fullpath=name,\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "338", "code": "                                       pc=pc)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "339", "code": "        yield '<table>\\n'\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "340", "code": "        for line in self.annotated_file(filename, statements, excluded,\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "341", "code": "                                        missing):\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "342", "code": "            yield line\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "343", "code": "        yield '</table>'\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "344", "code": "        yield '</body>'\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "345", "code": "        yield '</html>'\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "346", "code": "    report.exposed = True\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "347", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "348", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "349", "code": "def serve(path=localFile, port=8080, root=None):\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "350", "code": "    if coverage is None:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "351", "code": "        raise ImportError(\"The coverage module could not be imported.\")\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "F", "line": "352", "code": "    from coverage import coverage\n", "colour": "red", "author": "tom@organisms.be"}, {"error": "C", "line": "353", "code": "    cov = coverage(data_file = path)\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "354", "code": "    cov.load()\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "355", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "356", "code": "    import cherrypy\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "357", "code": "    cherrypy.config.update({'server.socket_port': int(port),\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "358", "code": "                            'server.thread_pool': 10,\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "359", "code": "                            'environment': \"production\",\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "360", "code": "                            })\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "361", "code": "    cherrypy.quickstart(CoverStats(cov, root))\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "362", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "363", "code": "if __name__ == \"__main__\":\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "W", "line": "364", "code": "    serve(*tuple(sys.argv[1:]))\n", "colour": "purple", "author": "tom@organisms.be"}, {"error": "none", "line": "365", "code": "\n", "colour": "black", "author": "tom@organisms.be"}]]}