{"path": "/home/asumal/git/cs410/pattern/pattern/server/cherrypy/cherrypy/_cperror.py", "lines": [[{"error": "none", "line": "1", "code": "\"\"\"Exception classes for CherryPy.\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "2", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "3", "code": "CherryPy provides (and uses) exceptions for declaring that the HTTP response\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "4", "code": "should be a status other than the default \"200 OK\". You can ``raise`` them like\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "5", "code": "normal Python exceptions. You can also call them and they will raise themselves;\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "6", "code": "this means you can set an :class:`HTTPError<cherrypy._cperror.HTTPError>`\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "7", "code": "or :class:`HTTPRedirect<cherrypy._cperror.HTTPRedirect>` as the\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "8", "code": ":attr:`request.handler<cherrypy._cprequest.Request.handler>`.\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "9", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "10", "code": ".. _redirectingpost:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "11", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "12", "code": "Redirecting POST\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "13", "code": "================\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "14", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "15", "code": "When you GET a resource and are redirected by the server to another Location,\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "16", "code": "there's generally no problem since GET is both a \"safe method\" (there should\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "17", "code": "be no side-effects) and an \"idempotent method\" (multiple calls are no different\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "18", "code": "than a single call).\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "19", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "20", "code": "POST, however, is neither safe nor idempotent--if you\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "21", "code": "charge a credit card, you don't want to be charged twice by a redirect!\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "22", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "23", "code": "For this reason, *none* of the 3xx responses permit a user-agent (browser) to\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "24", "code": "resubmit a POST on redirection without first confirming the action with the user:\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "25", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "26", "code": "=====    =================================    ===========\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "27", "code": "300      Multiple Choices                     Confirm with the user\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "28", "code": "301      Moved Permanently                    Confirm with the user\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "29", "code": "302      Found (Object moved temporarily)     Confirm with the user\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "30", "code": "303      See Other                            GET the new URI--no confirmation\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "31", "code": "304      Not modified                         (for conditional GET only--POST should not raise this error)\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "32", "code": "305      Use Proxy                            Confirm with the user\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "33", "code": "307      Temporary Redirect                   Confirm with the user\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "34", "code": "=====    =================================    ===========\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "35", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "36", "code": "However, browsers have historically implemented these restrictions poorly;\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "37", "code": "in particular, many browsers do not force the user to confirm 301, 302\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "38", "code": "or 307 when redirecting POST. For this reason, CherryPy defaults to 303,\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "39", "code": "which most user-agents appear to have implemented correctly. Therefore, if\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "40", "code": "you raise HTTPRedirect for a POST request, the user-agent will most likely\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "41", "code": "attempt to GET the new URI (without asking for confirmation from the user).\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "42", "code": "We realize this is confusing for developers, but it's the safest thing we\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "43", "code": "could do. You are of course free to raise ``HTTPRedirect(uri, status=302)``\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "44", "code": "or any other 3xx status if you know what you're doing, but given the\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "45", "code": "environment, we couldn't let any of those be the default.\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "46", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "47", "code": "Custom Error Handling\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "48", "code": "=====================\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "49", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "50", "code": ".. image:: /refman/cperrors.gif\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "51", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "52", "code": "Anticipated HTTP responses\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "53", "code": "--------------------------\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "54", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "55", "code": "The 'error_page' config namespace can be used to provide custom HTML output for\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "56", "code": "expected responses (like 404 Not Found). Supply a filename from which the output\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "57", "code": "will be read. The contents will be interpolated with the values %(status)s,\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "58", "code": "%(message)s, %(traceback)s, and %(version)s using plain old Python\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "59", "code": "`string formatting <http://www.python.org/doc/2.6.4/library/stdtypes.html#string-formatting-operations>`_.\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "60", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "61", "code": "::\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "62", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "63", "code": "    _cp_config = {'error_page.404': os.path.join(localDir, \"static/index.html\")}\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "64", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "65", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "66", "code": "Beginning in version 3.1, you may also provide a function or other callable as\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "67", "code": "an error_page entry. It will be passed the same status, message, traceback and\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "68", "code": "version arguments that are interpolated into templates::\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "69", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "70", "code": "    def error_page_402(status, message, traceback, version):\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "71", "code": "        return \"Error %s - Well, I'm very sorry but you haven't paid!\" % status\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "72", "code": "    cherrypy.config.update({'error_page.402': error_page_402})\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "73", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "74", "code": "Also in 3.1, in addition to the numbered error codes, you may also supply\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "75", "code": "\"error_page.default\" to handle all codes which do not have their own error_page entry.\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "76", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "77", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "78", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "79", "code": "Unanticipated errors\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "80", "code": "--------------------\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "81", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "82", "code": "CherryPy also has a generic error handling mechanism: whenever an unanticipated\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "83", "code": "error occurs in your code, it will call\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "84", "code": ":func:`Request.error_response<cherrypy._cprequest.Request.error_response>` to set\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "85", "code": "the response status, headers, and body. By default, this is the same output as\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "86", "code": ":class:`HTTPError(500) <cherrypy._cperror.HTTPError>`. If you want to provide\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "87", "code": "some other behavior, you generally replace \"request.error_response\".\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "88", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "89", "code": "Here is some sample code that shows how to display a custom error message and\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "90", "code": "send an e-mail containing the error::\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "91", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "92", "code": "    from cherrypy import _cperror\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "93", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "94", "code": "    def handle_error():\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "95", "code": "        cherrypy.response.status = 500\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "96", "code": "        cherrypy.response.body = [\"<html><body>Sorry, an error occured</body></html>\"]\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "C", "line": "97", "code": "        sendMail('error@domain.com', 'Error in your web app', _cperror.format_exc())\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "98", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "99", "code": "    class Root:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "100", "code": "        _cp_config = {'request.error_response': handle_error}\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "101", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "102", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "103", "code": "Note that you have to explicitly set :attr:`response.body <cherrypy._cprequest.Response.body>`\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "104", "code": "and not simply return an error message as a result.\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "105", "code": "\"\"\"\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "106", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "107", "code": "from cgi import escape as _escape\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "108", "code": "from sys import exc_info as _exc_info\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "109", "code": "from traceback import format_exception as _format_exception\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "W", "line": "110", "code": "from cherrypy._cpcompat import basestring, bytestr, iteritems, ntob, tonative, urljoin as _urljoin\n", "colour": "purple", "author": "tom@organisms.be"}, {"error": "none", "line": "111", "code": "from cherrypy.lib import httputil as _httputil\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "112", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "113", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "114", "code": "class CherryPyException(Exception):\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "115", "code": "    \"\"\"A base class for CherryPy exceptions.\"\"\"\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "116", "code": "    pass\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "117", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "118", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "119", "code": "class TimeoutError(CherryPyException):\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "120", "code": "    \"\"\"Exception raised when Response.timed_out is detected.\"\"\"\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "121", "code": "    pass\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "122", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "123", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "124", "code": "class InternalRedirect(CherryPyException):\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "125", "code": "    \"\"\"Exception raised to switch to the handler for a different URL.\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "126", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "127", "code": "    This exception will redirect processing to another path within the site\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "128", "code": "    (without informing the client). Provide the new path as an argument when\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "129", "code": "    raising the exception. Provide any params in the querystring for the new URL.\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "130", "code": "    \"\"\"\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "131", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "132", "code": "    def __init__(self, path, query_string=\"\"):\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "133", "code": "        import cherrypy\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "134", "code": "        self.request = cherrypy.serving.request\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "135", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "136", "code": "        self.query_string = query_string\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "137", "code": "        if \"?\" in path:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "138", "code": "            # Separate any params included in the path\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "139", "code": "            path, self.query_string = path.split(\"?\", 1)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "140", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "141", "code": "        # Note that urljoin will \"do the right thing\" whether url is:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "142", "code": "        #  1. a URL relative to root (e.g. \"/dummy\")\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "143", "code": "        #  2. a URL relative to the current path\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "144", "code": "        # Note that any query string will be discarded.\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "145", "code": "        path = _urljoin(self.request.path_info, path)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "146", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "147", "code": "        # Set a 'path' member attribute so that code which traps this\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "148", "code": "        # error can have access to it.\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "149", "code": "        self.path = path\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "150", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "151", "code": "        CherryPyException.__init__(self, path, self.query_string)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "152", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "153", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "154", "code": "class HTTPRedirect(CherryPyException):\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "155", "code": "    \"\"\"Exception raised when the request should be redirected.\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "156", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "157", "code": "    This exception will force a HTTP redirect to the URL or URL's you give it.\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "158", "code": "    The new URL must be passed as the first argument to the Exception,\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "159", "code": "    e.g., HTTPRedirect(newUrl). Multiple URLs are allowed in a list.\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "160", "code": "    If a URL is absolute, it will be used as-is. If it is relative, it is\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "161", "code": "    assumed to be relative to the current cherrypy.request.path_info.\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "162", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "163", "code": "    If one of the provided URL is a unicode object, it will be encoded\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "164", "code": "    using the default encoding or the one passed in parameter.\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "165", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "166", "code": "    There are multiple types of redirect, from which you can select via the\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "167", "code": "    ``status`` argument. If you do not provide a ``status`` arg, it defaults to\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "168", "code": "    303 (or 302 if responding with HTTP/1.0).\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "169", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "170", "code": "    Examples::\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "171", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "172", "code": "        raise cherrypy.HTTPRedirect(\"\")\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "173", "code": "        raise cherrypy.HTTPRedirect(\"/abs/path\", 307)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "174", "code": "        raise cherrypy.HTTPRedirect([\"path1\", \"path2?a=1&b=2\"], 301)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "175", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "176", "code": "    See :ref:`redirectingpost` for additional caveats.\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "177", "code": "    \"\"\"\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "178", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "179", "code": "    status = None\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "180", "code": "    \"\"\"The integer HTTP status code to emit.\"\"\"\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "181", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "182", "code": "    urls = None\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "183", "code": "    \"\"\"The list of URL's to emit.\"\"\"\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "184", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "185", "code": "    encoding = 'utf-8'\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "186", "code": "    \"\"\"The encoding when passed urls are not native strings\"\"\"\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "187", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "188", "code": "    def __init__(self, urls, status=None, encoding=None):\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "189", "code": "        import cherrypy\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "190", "code": "        request = cherrypy.serving.request\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "191", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "192", "code": "        if isinstance(urls, basestring):\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "193", "code": "            urls = [urls]\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "194", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "195", "code": "        abs_urls = []\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "196", "code": "        for url in urls:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "197", "code": "            url = tonative(url, encoding or self.encoding)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "198", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "199", "code": "            # Note that urljoin will \"do the right thing\" whether url is:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "200", "code": "            #  1. a complete URL with host (e.g. \"http://www.example.com/test\")\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "201", "code": "            #  2. a URL relative to root (e.g. \"/dummy\")\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "202", "code": "            #  3. a URL relative to the current path\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "203", "code": "            # Note that any query string in cherrypy.request is discarded.\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "204", "code": "            url = _urljoin(cherrypy.url(), url)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "205", "code": "            abs_urls.append(url)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "206", "code": "        self.urls = abs_urls\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "207", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "208", "code": "        # RFC 2616 indicates a 301 response code fits our goal; however,\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "209", "code": "        # browser support for 301 is quite messy. Do 302/303 instead. See\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "210", "code": "        # http://www.alanflavell.org.uk/www/post-redirect.html\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "211", "code": "        if status is None:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "212", "code": "            if request.protocol >= (1, 1):\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "213", "code": "                status = 303\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "214", "code": "            else:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "215", "code": "                status = 302\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "216", "code": "        else:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "217", "code": "            status = int(status)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "218", "code": "            if status < 300 or status > 399:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "219", "code": "                raise ValueError(\"status must be between 300 and 399.\")\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "220", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "221", "code": "        self.status = status\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "222", "code": "        CherryPyException.__init__(self, abs_urls, status)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "223", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "224", "code": "    def set_response(self):\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "225", "code": "        \"\"\"Modify cherrypy.response status, headers, and body to represent self.\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "226", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "227", "code": "        CherryPy uses this internally, but you can also use it to create an\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "228", "code": "        HTTPRedirect object and set its output without *raising* the exception.\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "229", "code": "        \"\"\"\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "230", "code": "        import cherrypy\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "231", "code": "        response = cherrypy.serving.response\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "232", "code": "        response.status = status = self.status\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "233", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "234", "code": "        if status in (300, 301, 302, 303, 307):\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "235", "code": "            response.headers['Content-Type'] = \"text/html;charset=utf-8\"\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "236", "code": "            # \"The ... URI SHOULD be given by the Location field\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "237", "code": "            # in the response.\"\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "238", "code": "            response.headers['Location'] = self.urls[0]\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "239", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "240", "code": "            # \"Unless the request method was HEAD, the entity of the response\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "241", "code": "            # SHOULD contain a short hypertext note with a hyperlink to the\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "242", "code": "            # new URI(s).\"\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "243", "code": "            msg = {300: \"This resource can be found at <a href='%s'>%s</a>.\",\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "244", "code": "                   301: \"This resource has permanently moved to <a href='%s'>%s</a>.\",\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "C", "line": "245", "code": "                   302: \"This resource resides temporarily at <a href='%s'>%s</a>.\",\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "246", "code": "                   303: \"This resource can be found at <a href='%s'>%s</a>.\",\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "247", "code": "                   307: \"This resource has moved temporarily to <a href='%s'>%s</a>.\",\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "C", "line": "248", "code": "                   }[status]\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "249", "code": "            msgs = [msg % (u, u) for u in self.urls]\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "250", "code": "            response.body = ntob(\"<br />\\n\".join(msgs), 'utf-8')\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "251", "code": "            # Previous code may have set C-L, so we have to reset it\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "252", "code": "            # (allow finalize to set it).\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "253", "code": "            response.headers.pop('Content-Length', None)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "254", "code": "        elif status == 304:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "255", "code": "            # Not Modified.\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "256", "code": "            # \"The response MUST include the following header fields:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "257", "code": "            # Date, unless its omission is required by section 14.18.1\"\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "258", "code": "            # The \"Date\" header should have been set in Response.__init__\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "259", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "260", "code": "            # \"...the response SHOULD NOT include other entity-headers.\"\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "261", "code": "            for key in ('Allow', 'Content-Encoding', 'Content-Language',\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "262", "code": "                        'Content-Length', 'Content-Location', 'Content-MD5',\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "263", "code": "                        'Content-Range', 'Content-Type', 'Expires',\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "264", "code": "                        'Last-Modified'):\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "265", "code": "                if key in response.headers:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "266", "code": "                    del response.headers[key]\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "267", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "268", "code": "            # \"The 304 response MUST NOT contain a message-body.\"\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "269", "code": "            response.body = None\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "270", "code": "            # Previous code may have set C-L, so we have to reset it.\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "271", "code": "            response.headers.pop('Content-Length', None)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "272", "code": "        elif status == 305:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "273", "code": "            # Use Proxy.\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "274", "code": "            # self.urls[0] should be the URI of the proxy.\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "275", "code": "            response.headers['Location'] = self.urls[0]\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "276", "code": "            response.body = None\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "277", "code": "            # Previous code may have set C-L, so we have to reset it.\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "278", "code": "            response.headers.pop('Content-Length', None)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "279", "code": "        else:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "280", "code": "            raise ValueError(\"The %s status code is unknown.\" % status)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "281", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "282", "code": "    def __call__(self):\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "283", "code": "        \"\"\"Use this exception as a request.handler (raise self).\"\"\"\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "284", "code": "        raise self\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "285", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "286", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "287", "code": "def clean_headers(status):\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "288", "code": "    \"\"\"Remove any headers which should not apply to an error response.\"\"\"\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "289", "code": "    import cherrypy\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "290", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "291", "code": "    response = cherrypy.serving.response\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "292", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "293", "code": "    # Remove headers which applied to the original content,\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "294", "code": "    # but do not apply to the error page.\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "295", "code": "    respheaders = response.headers\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "296", "code": "    for key in [\"Accept-Ranges\", \"Age\", \"ETag\", \"Location\", \"Retry-After\",\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "297", "code": "                \"Vary\", \"Content-Encoding\", \"Content-Length\", \"Expires\",\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "298", "code": "                \"Content-Location\", \"Content-MD5\", \"Last-Modified\"]:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "299", "code": "        if key in respheaders:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "300", "code": "            del respheaders[key]\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "301", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "302", "code": "    if status != 416:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "303", "code": "        # A server sending a response with status code 416 (Requested\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "304", "code": "        # range not satisfiable) SHOULD include a Content-Range field\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "305", "code": "        # with a byte-range-resp-spec of \"*\". The instance-length\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "306", "code": "        # specifies the current length of the selected resource.\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "307", "code": "        # A response with status code 206 (Partial Content) MUST NOT\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "308", "code": "        # include a Content-Range field with a byte-range- resp-spec of \"*\".\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "309", "code": "        if \"Content-Range\" in respheaders:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "310", "code": "            del respheaders[\"Content-Range\"]\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "311", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "312", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "313", "code": "class HTTPError(CherryPyException):\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "314", "code": "    \"\"\"Exception used to return an HTTP error code (4xx-5xx) to the client.\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "315", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "316", "code": "    This exception can be used to automatically send a response using a http status\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "317", "code": "    code, with an appropriate error page. It takes an optional\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "318", "code": "    ``status`` argument (which must be between 400 and 599); it defaults to 500\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "319", "code": "    (\"Internal Server Error\"). It also takes an optional ``message`` argument,\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "320", "code": "    which will be returned in the response body. See\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "321", "code": "    `RFC 2616 <http://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html#sec10.4>`_\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "322", "code": "    for a complete list of available error codes and when to use them.\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "323", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "324", "code": "    Examples::\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "325", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "326", "code": "        raise cherrypy.HTTPError(403)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "327", "code": "        raise cherrypy.HTTPError(\"403 Forbidden\", \"You are not allowed to access this resource.\")\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "328", "code": "    \"\"\"\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "329", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "330", "code": "    status = None\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "331", "code": "    \"\"\"The HTTP status code. May be of type int or str (with a Reason-Phrase).\"\"\"\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "332", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "333", "code": "    code = None\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "334", "code": "    \"\"\"The integer HTTP status code.\"\"\"\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "335", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "336", "code": "    reason = None\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "337", "code": "    \"\"\"The HTTP Reason-Phrase string.\"\"\"\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "338", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "339", "code": "    def __init__(self, status=500, message=None):\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "340", "code": "        self.status = status\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "341", "code": "        try:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "342", "code": "            self.code, self.reason, defaultmsg = _httputil.valid_status(status)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "343", "code": "        except ValueError:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "344", "code": "            raise self.__class__(500, _exc_info()[1].args[0])\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "345", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "346", "code": "        if self.code < 400 or self.code > 599:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "347", "code": "            raise ValueError(\"status must be between 400 and 599.\")\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "348", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "349", "code": "        # See http://www.python.org/dev/peps/pep-0352/\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "350", "code": "        # self.message = message\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "351", "code": "        self._message = message or defaultmsg\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "352", "code": "        CherryPyException.__init__(self, status, message)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "353", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "354", "code": "    def set_response(self):\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "355", "code": "        \"\"\"Modify cherrypy.response status, headers, and body to represent self.\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "356", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "357", "code": "        CherryPy uses this internally, but you can also use it to create an\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "358", "code": "        HTTPError object and set its output without *raising* the exception.\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "359", "code": "        \"\"\"\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "360", "code": "        import cherrypy\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "361", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "362", "code": "        response = cherrypy.serving.response\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "363", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "364", "code": "        clean_headers(self.code)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "365", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "366", "code": "        # In all cases, finalize will be called after this method,\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "367", "code": "        # so don't bother cleaning up response values here.\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "368", "code": "        response.status = self.status\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "369", "code": "        tb = None\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "370", "code": "        if cherrypy.serving.request.show_tracebacks:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "371", "code": "            tb = format_exc()\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "372", "code": "        response.headers['Content-Type'] = \"text/html;charset=utf-8\"\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "373", "code": "        response.headers.pop('Content-Length', None)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "374", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "375", "code": "        content = self.get_error_page(self.status, traceback=tb,\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "376", "code": "            message=self._message).encode('utf-8')\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "377", "code": "        response.body = content\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "378", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "379", "code": "        _be_ie_unfriendly(self.code)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "380", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "R", "line": "381", "code": "    def get_error_page(self, *args, **kwargs):\n", "colour": "green", "author": "tom@organisms.be"}, {"error": "none", "line": "382", "code": "        return get_error_page(*args, **kwargs)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "383", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "384", "code": "    def __call__(self):\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "385", "code": "        \"\"\"Use this exception as a request.handler (raise self).\"\"\"\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "386", "code": "        raise self\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "387", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "388", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "389", "code": "class NotFound(HTTPError):\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "390", "code": "    \"\"\"Exception raised when a URL could not be mapped to any handler (404).\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "391", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "392", "code": "    This is equivalent to raising\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "393", "code": "    :class:`HTTPError(\"404 Not Found\") <cherrypy._cperror.HTTPError>`.\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "394", "code": "    \"\"\"\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "395", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "396", "code": "    def __init__(self, path=None):\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "397", "code": "        if path is None:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "398", "code": "            import cherrypy\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "399", "code": "            request = cherrypy.serving.request\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "400", "code": "            path = request.script_name + request.path_info\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "401", "code": "        self.args = (path,)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "402", "code": "        HTTPError.__init__(self, 404, \"The path '%s' was not found.\" % path)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "403", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "404", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "405", "code": "_HTTPErrorTemplate = '''<!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Transitional//EN\"\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "406", "code": "\"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd\">\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "407", "code": "<html>\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "408", "code": "<head>\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "409", "code": "    <meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\"></meta>\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "410", "code": "    <title>%(status)s</title>\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "411", "code": "    <style type=\"text/css\">\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "412", "code": "    #powered_by {\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "413", "code": "        margin-top: 20px;\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "414", "code": "        border-top: 2px solid black;\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "415", "code": "        font-style: italic;\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "416", "code": "    }\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "417", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "418", "code": "    #traceback {\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "419", "code": "        color: red;\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "420", "code": "    }\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "421", "code": "    </style>\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "422", "code": "</head>\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "423", "code": "    <body>\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "424", "code": "        <h2>%(status)s</h2>\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "425", "code": "        <p>%(message)s</p>\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "426", "code": "        <pre id=\"traceback\">%(traceback)s</pre>\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "427", "code": "    <div id=\"powered_by\">\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "428", "code": "    <span>Powered by <a href=\"http://www.cherrypy.org\">CherryPy %(version)s</a></span>\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "429", "code": "    </div>\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "430", "code": "    </body>\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "431", "code": "</html>\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "432", "code": "'''\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "433", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "R", "line": "434", "code": "def get_error_page(status, **kwargs):\n", "colour": "green", "author": "tom@organisms.be"}, {"error": "none", "line": "435", "code": "    \"\"\"Return an HTML page, containing a pretty error response.\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "436", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "437", "code": "    status should be an int or a str.\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "438", "code": "    kwargs will be interpolated into the page template.\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "439", "code": "    \"\"\"\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "440", "code": "    import cherrypy\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "441", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "442", "code": "    try:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "443", "code": "        code, reason, message = _httputil.valid_status(status)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "444", "code": "    except ValueError:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "445", "code": "        raise cherrypy.HTTPError(500, _exc_info()[1].args[0])\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "446", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "447", "code": "    # We can't use setdefault here, because some\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "448", "code": "    # callers send None for kwarg values.\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "449", "code": "    if kwargs.get('status') is None:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "450", "code": "        kwargs['status'] = \"%s %s\" % (code, reason)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "451", "code": "    if kwargs.get('message') is None:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "452", "code": "        kwargs['message'] = message\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "453", "code": "    if kwargs.get('traceback') is None:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "454", "code": "        kwargs['traceback'] = ''\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "455", "code": "    if kwargs.get('version') is None:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "456", "code": "        kwargs['version'] = cherrypy.__version__\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "457", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "458", "code": "    for k, v in iteritems(kwargs):\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "459", "code": "        if v is None:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "460", "code": "            kwargs[k] = \"\"\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "461", "code": "        else:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "462", "code": "            kwargs[k] = _escape(kwargs[k])\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "463", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "464", "code": "    # Use a custom template or callable for the error page?\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "465", "code": "    pages = cherrypy.serving.request.error_page\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "466", "code": "    error_page = pages.get(code) or pages.get('default')\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "467", "code": "    if error_page:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "468", "code": "        try:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "469", "code": "            if hasattr(error_page, '__call__'):\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "470", "code": "                return error_page(**kwargs)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "471", "code": "            else:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "472", "code": "                data = open(error_page, 'rb').read()\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "473", "code": "                return tonative(data) % kwargs\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "W", "line": "474", "code": "        except:\n", "colour": "purple", "author": "tom@organisms.be"}, {"error": "C", "line": "475", "code": "            e = _format_exception(*_exc_info())[-1]\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "C", "line": "476", "code": "            m = kwargs['message']\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "477", "code": "            if m:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "478", "code": "                m += \"<br />\"\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "C", "line": "479", "code": "            m += \"In addition, the custom error page failed:\\n<br />%s\" % e\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "480", "code": "            kwargs['message'] = m\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "481", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "482", "code": "    return _HTTPErrorTemplate % kwargs\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "483", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "484", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "485", "code": "_ie_friendly_error_sizes = {\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "486", "code": "    400: 512, 403: 256, 404: 512, 405: 256,\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "487", "code": "    406: 512, 408: 512, 409: 512, 410: 256,\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "488", "code": "    500: 512, 501: 512, 505: 512,\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "489", "code": "    }\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "490", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "491", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "492", "code": "def _be_ie_unfriendly(status):\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "493", "code": "    import cherrypy\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "494", "code": "    response = cherrypy.serving.response\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "495", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "496", "code": "    # For some statuses, Internet Explorer 5+ shows \"friendly error\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "497", "code": "    # messages\" instead of our response.body if the body is smaller\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "498", "code": "    # than a given size. Fix this by returning a body over that size\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "499", "code": "    # (by adding whitespace).\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "500", "code": "    # See http://support.microsoft.com/kb/q218155/\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "501", "code": "    s = _ie_friendly_error_sizes.get(status, 0)\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "502", "code": "    if s:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "503", "code": "        s += 1\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "504", "code": "        # Since we are issuing an HTTP error status, we assume that\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "505", "code": "        # the entity is short, and we should just collapse it.\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "506", "code": "        content = response.collapse_body()\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "507", "code": "        l = len(content)\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "508", "code": "        if l and l < s:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "509", "code": "            # IN ADDITION: the response must be written to IE\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "510", "code": "            # in one chunk or it will still get replaced! Bah.\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "511", "code": "            content = content + (ntob(\" \") * (s - l))\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "512", "code": "        response.body = content\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "513", "code": "        response.headers['Content-Length'] = str(len(content))\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "514", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "515", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "516", "code": "def format_exc(exc=None):\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "517", "code": "    \"\"\"Return exc (or sys.exc_info if None), formatted.\"\"\"\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "518", "code": "    try:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "519", "code": "        if exc is None:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "520", "code": "            exc = _exc_info()\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "521", "code": "        if exc == (None, None, None):\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "522", "code": "            return \"\"\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "523", "code": "        import traceback\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "W", "line": "524", "code": "        return \"\".join(traceback.format_exception(*exc))\n", "colour": "purple", "author": "tom@organisms.be"}, {"error": "none", "line": "525", "code": "    finally:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "526", "code": "        del exc\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "527", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "528", "code": "def bare_error(extrabody=None):\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "529", "code": "    \"\"\"Produce status, headers, body for a critical error.\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "530", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "531", "code": "    Returns a triple without calling any other questionable functions,\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "532", "code": "    so it should be as error-free as possible. Call it from an HTTP server\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "533", "code": "    if you get errors outside of the request.\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "534", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "535", "code": "    If extrabody is None, a friendly but rather unhelpful error message\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "536", "code": "    is set in the body. If extrabody is a string, it will be appended\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "537", "code": "    as-is to the body.\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "538", "code": "    \"\"\"\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "539", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "540", "code": "    # The whole point of this function is to be a last line-of-defense\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "541", "code": "    # in handling errors. That is, it must not raise any errors itself;\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "542", "code": "    # it cannot be allowed to fail. Therefore, don't add to it!\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "543", "code": "    # In particular, don't call any other CP functions.\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "544", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "545", "code": "    body = ntob(\"Unrecoverable error in the server.\")\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "546", "code": "    if extrabody is not None:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "547", "code": "        if not isinstance(extrabody, bytestr):\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "548", "code": "            extrabody = extrabody.encode('utf-8')\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "549", "code": "        body += ntob(\"\\n\") + extrabody\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "550", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "551", "code": "    return (ntob(\"500 Internal Server Error\"),\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "552", "code": "            [(ntob('Content-Type'), ntob('text/plain')),\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "553", "code": "             (ntob('Content-Length'), ntob(str(len(body)),'ISO-8859-1'))],\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "554", "code": "            [body])\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "555", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "556", "code": "\n", "colour": "black", "author": "tom@organisms.be"}]]}