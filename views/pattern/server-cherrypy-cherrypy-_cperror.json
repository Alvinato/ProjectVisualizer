{"path": "/home/asumal/git/cs410/pattern/pattern/server/cherrypy/cherrypy/_cperror.py", "lines": [{"index": "1", "colour": "orange", "code": "\"\"\"Exception classes for CherryPy.\n", "error": "none", "author": "tom@organisms.be"}, {"index": "2", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "3", "colour": "orange", "code": "CherryPy provides (and uses) exceptions for declaring that the HTTP response\n", "error": "none", "author": "tom@organisms.be"}, {"index": "4", "colour": "orange", "code": "should be a status other than the default \"200 OK\". You can ``raise`` them like\n", "error": "none", "author": "tom@organisms.be"}, {"index": "5", "colour": "orange", "code": "normal Python exceptions. You can also call them and they will raise themselves;\n", "error": "none", "author": "tom@organisms.be"}, {"index": "6", "colour": "orange", "code": "this means you can set an :class:`HTTPError<cherrypy._cperror.HTTPError>`\n", "error": "none", "author": "tom@organisms.be"}, {"index": "7", "colour": "orange", "code": "or :class:`HTTPRedirect<cherrypy._cperror.HTTPRedirect>` as the\n", "error": "none", "author": "tom@organisms.be"}, {"index": "8", "colour": "orange", "code": ":attr:`request.handler<cherrypy._cprequest.Request.handler>`.\n", "error": "none", "author": "tom@organisms.be"}, {"index": "9", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "10", "colour": "orange", "code": ".. _redirectingpost:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "11", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "12", "colour": "orange", "code": "Redirecting POST\n", "error": "none", "author": "tom@organisms.be"}, {"index": "13", "colour": "orange", "code": "================\n", "error": "none", "author": "tom@organisms.be"}, {"index": "14", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "15", "colour": "orange", "code": "When you GET a resource and are redirected by the server to another Location,\n", "error": "none", "author": "tom@organisms.be"}, {"index": "16", "colour": "orange", "code": "there's generally no problem since GET is both a \"safe method\" (there should\n", "error": "none", "author": "tom@organisms.be"}, {"index": "17", "colour": "orange", "code": "be no side-effects) and an \"idempotent method\" (multiple calls are no different\n", "error": "none", "author": "tom@organisms.be"}, {"index": "18", "colour": "orange", "code": "than a single call).\n", "error": "none", "author": "tom@organisms.be"}, {"index": "19", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "20", "colour": "orange", "code": "POST, however, is neither safe nor idempotent--if you\n", "error": "none", "author": "tom@organisms.be"}, {"index": "21", "colour": "orange", "code": "charge a credit card, you don't want to be charged twice by a redirect!\n", "error": "none", "author": "tom@organisms.be"}, {"index": "22", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "23", "colour": "orange", "code": "For this reason, *none* of the 3xx responses permit a user-agent (browser) to\n", "error": "none", "author": "tom@organisms.be"}, {"index": "24", "colour": "orange", "code": "resubmit a POST on redirection without first confirming the action with the user:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "25", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "26", "colour": "orange", "code": "=====    =================================    ===========\n", "error": "none", "author": "tom@organisms.be"}, {"index": "27", "colour": "orange", "code": "300      Multiple Choices                     Confirm with the user\n", "error": "none", "author": "tom@organisms.be"}, {"index": "28", "colour": "orange", "code": "301      Moved Permanently                    Confirm with the user\n", "error": "none", "author": "tom@organisms.be"}, {"index": "29", "colour": "orange", "code": "302      Found (Object moved temporarily)     Confirm with the user\n", "error": "none", "author": "tom@organisms.be"}, {"index": "30", "colour": "orange", "code": "303      See Other                            GET the new URI--no confirmation\n", "error": "none", "author": "tom@organisms.be"}, {"index": "31", "colour": "orange", "code": "304      Not modified                         (for conditional GET only--POST should not raise this error)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "32", "colour": "orange", "code": "305      Use Proxy                            Confirm with the user\n", "error": "none", "author": "tom@organisms.be"}, {"index": "33", "colour": "orange", "code": "307      Temporary Redirect                   Confirm with the user\n", "error": "none", "author": "tom@organisms.be"}, {"index": "34", "colour": "orange", "code": "=====    =================================    ===========\n", "error": "none", "author": "tom@organisms.be"}, {"index": "35", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "36", "colour": "orange", "code": "However, browsers have historically implemented these restrictions poorly;\n", "error": "none", "author": "tom@organisms.be"}, {"index": "37", "colour": "orange", "code": "in particular, many browsers do not force the user to confirm 301, 302\n", "error": "none", "author": "tom@organisms.be"}, {"index": "38", "colour": "orange", "code": "or 307 when redirecting POST. For this reason, CherryPy defaults to 303,\n", "error": "none", "author": "tom@organisms.be"}, {"index": "39", "colour": "orange", "code": "which most user-agents appear to have implemented correctly. Therefore, if\n", "error": "none", "author": "tom@organisms.be"}, {"index": "40", "colour": "orange", "code": "you raise HTTPRedirect for a POST request, the user-agent will most likely\n", "error": "none", "author": "tom@organisms.be"}, {"index": "41", "colour": "orange", "code": "attempt to GET the new URI (without asking for confirmation from the user).\n", "error": "none", "author": "tom@organisms.be"}, {"index": "42", "colour": "orange", "code": "We realize this is confusing for developers, but it's the safest thing we\n", "error": "none", "author": "tom@organisms.be"}, {"index": "43", "colour": "orange", "code": "could do. You are of course free to raise ``HTTPRedirect(uri, status=302)``\n", "error": "none", "author": "tom@organisms.be"}, {"index": "44", "colour": "orange", "code": "or any other 3xx status if you know what you're doing, but given the\n", "error": "none", "author": "tom@organisms.be"}, {"index": "45", "colour": "orange", "code": "environment, we couldn't let any of those be the default.\n", "error": "none", "author": "tom@organisms.be"}, {"index": "46", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "47", "colour": "orange", "code": "Custom Error Handling\n", "error": "none", "author": "tom@organisms.be"}, {"index": "48", "colour": "orange", "code": "=====================\n", "error": "none", "author": "tom@organisms.be"}, {"index": "49", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "50", "colour": "orange", "code": ".. image:: /refman/cperrors.gif\n", "error": "none", "author": "tom@organisms.be"}, {"index": "51", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "52", "colour": "orange", "code": "Anticipated HTTP responses\n", "error": "none", "author": "tom@organisms.be"}, {"index": "53", "colour": "orange", "code": "--------------------------\n", "error": "none", "author": "tom@organisms.be"}, {"index": "54", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "55", "colour": "orange", "code": "The 'error_page' config namespace can be used to provide custom HTML output for\n", "error": "none", "author": "tom@organisms.be"}, {"index": "56", "colour": "orange", "code": "expected responses (like 404 Not Found). Supply a filename from which the output\n", "error": "none", "author": "tom@organisms.be"}, {"index": "57", "colour": "orange", "code": "will be read. The contents will be interpolated with the values %(status)s,\n", "error": "none", "author": "tom@organisms.be"}, {"index": "58", "colour": "orange", "code": "%(message)s, %(traceback)s, and %(version)s using plain old Python\n", "error": "none", "author": "tom@organisms.be"}, {"index": "59", "colour": "orange", "code": "`string formatting <http://www.python.org/doc/2.6.4/library/stdtypes.html#string-formatting-operations>`_.\n", "error": "none", "author": "tom@organisms.be"}, {"index": "60", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "61", "colour": "orange", "code": "::\n", "error": "none", "author": "tom@organisms.be"}, {"index": "62", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "63", "colour": "orange", "code": "    _cp_config = {'error_page.404': os.path.join(localDir, \"static/index.html\")}\n", "error": "none", "author": "tom@organisms.be"}, {"index": "64", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "65", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "66", "colour": "orange", "code": "Beginning in version 3.1, you may also provide a function or other callable as\n", "error": "none", "author": "tom@organisms.be"}, {"index": "67", "colour": "orange", "code": "an error_page entry. It will be passed the same status, message, traceback and\n", "error": "none", "author": "tom@organisms.be"}, {"index": "68", "colour": "orange", "code": "version arguments that are interpolated into templates::\n", "error": "none", "author": "tom@organisms.be"}, {"index": "69", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "70", "colour": "orange", "code": "    def error_page_402(status, message, traceback, version):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "71", "colour": "orange", "code": "        return \"Error %s - Well, I'm very sorry but you haven't paid!\" % status\n", "error": "none", "author": "tom@organisms.be"}, {"index": "72", "colour": "orange", "code": "    cherrypy.config.update({'error_page.402': error_page_402})\n", "error": "none", "author": "tom@organisms.be"}, {"index": "73", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "74", "colour": "orange", "code": "Also in 3.1, in addition to the numbered error codes, you may also supply\n", "error": "none", "author": "tom@organisms.be"}, {"index": "75", "colour": "orange", "code": "\"error_page.default\" to handle all codes which do not have their own error_page entry.\n", "error": "none", "author": "tom@organisms.be"}, {"index": "76", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "77", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "78", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "79", "colour": "orange", "code": "Unanticipated errors\n", "error": "none", "author": "tom@organisms.be"}, {"index": "80", "colour": "orange", "code": "--------------------\n", "error": "none", "author": "tom@organisms.be"}, {"index": "81", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "82", "colour": "orange", "code": "CherryPy also has a generic error handling mechanism: whenever an unanticipated\n", "error": "none", "author": "tom@organisms.be"}, {"index": "83", "colour": "orange", "code": "error occurs in your code, it will call\n", "error": "none", "author": "tom@organisms.be"}, {"index": "84", "colour": "orange", "code": ":func:`Request.error_response<cherrypy._cprequest.Request.error_response>` to set\n", "error": "none", "author": "tom@organisms.be"}, {"index": "85", "colour": "orange", "code": "the response status, headers, and body. By default, this is the same output as\n", "error": "none", "author": "tom@organisms.be"}, {"index": "86", "colour": "orange", "code": ":class:`HTTPError(500) <cherrypy._cperror.HTTPError>`. If you want to provide\n", "error": "none", "author": "tom@organisms.be"}, {"index": "87", "colour": "orange", "code": "some other behavior, you generally replace \"request.error_response\".\n", "error": "none", "author": "tom@organisms.be"}, {"index": "88", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "89", "colour": "orange", "code": "Here is some sample code that shows how to display a custom error message and\n", "error": "none", "author": "tom@organisms.be"}, {"index": "90", "colour": "orange", "code": "send an e-mail containing the error::\n", "error": "none", "author": "tom@organisms.be"}, {"index": "91", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "92", "colour": "orange", "code": "    from cherrypy import _cperror\n", "error": "none", "author": "tom@organisms.be"}, {"index": "93", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "94", "colour": "orange", "code": "    def handle_error():\n", "error": "none", "author": "tom@organisms.be"}, {"index": "95", "colour": "orange", "code": "        cherrypy.response.status = 500\n", "error": "none", "author": "tom@organisms.be"}, {"index": "96", "colour": "orange", "code": "        cherrypy.response.body = [\"<html><body>Sorry, an error occured</body></html>\"]\n", "error": "none", "author": "tom@organisms.be"}, {"index": "97", "colour": "orange", "code": "        sendMail('error@domain.com', 'Error in your web app', _cperror.format_exc())\n", "error": "none", "author": "tom@organisms.be"}, {"index": "98", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "99", "colour": "orange", "code": "    class Root:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "100", "colour": "orange", "code": "        _cp_config = {'request.error_response': handle_error}\n", "error": "none", "author": "tom@organisms.be"}, {"index": "101", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "102", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "103", "colour": "orange", "code": "Note that you have to explicitly set :attr:`response.body <cherrypy._cprequest.Response.body>`\n", "error": "none", "author": "tom@organisms.be"}, {"index": "104", "colour": "orange", "code": "and not simply return an error message as a result.\n", "error": "none", "author": "tom@organisms.be"}, {"index": "105", "colour": "orange", "code": "\"\"\"\n", "error": "none", "author": "tom@organisms.be"}, {"index": "106", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "107", "colour": "orange", "code": "from cgi import escape as _escape\n", "error": "none", "author": "tom@organisms.be"}, {"index": "108", "colour": "orange", "code": "from sys import exc_info as _exc_info\n", "error": "none", "author": "tom@organisms.be"}, {"index": "109", "colour": "orange", "code": "from traceback import format_exception as _format_exception\n", "error": "none", "author": "tom@organisms.be"}, {"index": "110", "colour": "green", "code": "from cherrypy._cpcompat import basestring, bytestr, iteritems, ntob, tonative, urljoin as _urljoin\n", "error": "W", "author": "tom@organisms.be"}, {"index": "111", "colour": "orange", "code": "from cherrypy.lib import httputil as _httputil\n", "error": "none", "author": "tom@organisms.be"}, {"index": "112", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "113", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "114", "colour": "orange", "code": "class CherryPyException(Exception):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "115", "colour": "orange", "code": "    \"\"\"A base class for CherryPy exceptions.\"\"\"\n", "error": "none", "author": "tom@organisms.be"}, {"index": "116", "colour": "orange", "code": "    pass\n", "error": "none", "author": "tom@organisms.be"}, {"index": "117", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "118", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "119", "colour": "orange", "code": "class TimeoutError(CherryPyException):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "120", "colour": "orange", "code": "    \"\"\"Exception raised when Response.timed_out is detected.\"\"\"\n", "error": "none", "author": "tom@organisms.be"}, {"index": "121", "colour": "orange", "code": "    pass\n", "error": "none", "author": "tom@organisms.be"}, {"index": "122", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "123", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "124", "colour": "orange", "code": "class InternalRedirect(CherryPyException):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "125", "colour": "orange", "code": "    \"\"\"Exception raised to switch to the handler for a different URL.\n", "error": "none", "author": "tom@organisms.be"}, {"index": "126", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "127", "colour": "orange", "code": "    This exception will redirect processing to another path within the site\n", "error": "none", "author": "tom@organisms.be"}, {"index": "128", "colour": "orange", "code": "    (without informing the client). Provide the new path as an argument when\n", "error": "none", "author": "tom@organisms.be"}, {"index": "129", "colour": "orange", "code": "    raising the exception. Provide any params in the querystring for the new URL.\n", "error": "none", "author": "tom@organisms.be"}, {"index": "130", "colour": "orange", "code": "    \"\"\"\n", "error": "none", "author": "tom@organisms.be"}, {"index": "131", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "132", "colour": "orange", "code": "    def __init__(self, path, query_string=\"\"):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "133", "colour": "orange", "code": "        import cherrypy\n", "error": "none", "author": "tom@organisms.be"}, {"index": "134", "colour": "orange", "code": "        self.request = cherrypy.serving.request\n", "error": "none", "author": "tom@organisms.be"}, {"index": "135", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "136", "colour": "orange", "code": "        self.query_string = query_string\n", "error": "none", "author": "tom@organisms.be"}, {"index": "137", "colour": "orange", "code": "        if \"?\" in path:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "138", "colour": "orange", "code": "            # Separate any params included in the path\n", "error": "none", "author": "tom@organisms.be"}, {"index": "139", "colour": "orange", "code": "            path, self.query_string = path.split(\"?\", 1)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "140", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "141", "colour": "orange", "code": "        # Note that urljoin will \"do the right thing\" whether url is:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "142", "colour": "orange", "code": "        #  1. a URL relative to root (e.g. \"/dummy\")\n", "error": "none", "author": "tom@organisms.be"}, {"index": "143", "colour": "orange", "code": "        #  2. a URL relative to the current path\n", "error": "none", "author": "tom@organisms.be"}, {"index": "144", "colour": "orange", "code": "        # Note that any query string will be discarded.\n", "error": "none", "author": "tom@organisms.be"}, {"index": "145", "colour": "orange", "code": "        path = _urljoin(self.request.path_info, path)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "146", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "147", "colour": "orange", "code": "        # Set a 'path' member attribute so that code which traps this\n", "error": "none", "author": "tom@organisms.be"}, {"index": "148", "colour": "orange", "code": "        # error can have access to it.\n", "error": "none", "author": "tom@organisms.be"}, {"index": "149", "colour": "orange", "code": "        self.path = path\n", "error": "none", "author": "tom@organisms.be"}, {"index": "150", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "151", "colour": "orange", "code": "        CherryPyException.__init__(self, path, self.query_string)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "152", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "153", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "154", "colour": "orange", "code": "class HTTPRedirect(CherryPyException):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "155", "colour": "orange", "code": "    \"\"\"Exception raised when the request should be redirected.\n", "error": "none", "author": "tom@organisms.be"}, {"index": "156", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "157", "colour": "orange", "code": "    This exception will force a HTTP redirect to the URL or URL's you give it.\n", "error": "none", "author": "tom@organisms.be"}, {"index": "158", "colour": "orange", "code": "    The new URL must be passed as the first argument to the Exception,\n", "error": "none", "author": "tom@organisms.be"}, {"index": "159", "colour": "orange", "code": "    e.g., HTTPRedirect(newUrl). Multiple URLs are allowed in a list.\n", "error": "none", "author": "tom@organisms.be"}, {"index": "160", "colour": "orange", "code": "    If a URL is absolute, it will be used as-is. If it is relative, it is\n", "error": "none", "author": "tom@organisms.be"}, {"index": "161", "colour": "orange", "code": "    assumed to be relative to the current cherrypy.request.path_info.\n", "error": "none", "author": "tom@organisms.be"}, {"index": "162", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "163", "colour": "orange", "code": "    If one of the provided URL is a unicode object, it will be encoded\n", "error": "none", "author": "tom@organisms.be"}, {"index": "164", "colour": "orange", "code": "    using the default encoding or the one passed in parameter.\n", "error": "none", "author": "tom@organisms.be"}, {"index": "165", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "166", "colour": "orange", "code": "    There are multiple types of redirect, from which you can select via the\n", "error": "none", "author": "tom@organisms.be"}, {"index": "167", "colour": "orange", "code": "    ``status`` argument. If you do not provide a ``status`` arg, it defaults to\n", "error": "none", "author": "tom@organisms.be"}, {"index": "168", "colour": "orange", "code": "    303 (or 302 if responding with HTTP/1.0).\n", "error": "none", "author": "tom@organisms.be"}, {"index": "169", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "170", "colour": "orange", "code": "    Examples::\n", "error": "none", "author": "tom@organisms.be"}, {"index": "171", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "172", "colour": "orange", "code": "        raise cherrypy.HTTPRedirect(\"\")\n", "error": "none", "author": "tom@organisms.be"}, {"index": "173", "colour": "orange", "code": "        raise cherrypy.HTTPRedirect(\"/abs/path\", 307)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "174", "colour": "orange", "code": "        raise cherrypy.HTTPRedirect([\"path1\", \"path2?a=1&b=2\"], 301)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "175", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "176", "colour": "orange", "code": "    See :ref:`redirectingpost` for additional caveats.\n", "error": "none", "author": "tom@organisms.be"}, {"index": "177", "colour": "orange", "code": "    \"\"\"\n", "error": "none", "author": "tom@organisms.be"}, {"index": "178", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "179", "colour": "orange", "code": "    status = None\n", "error": "none", "author": "tom@organisms.be"}, {"index": "180", "colour": "orange", "code": "    \"\"\"The integer HTTP status code to emit.\"\"\"\n", "error": "none", "author": "tom@organisms.be"}, {"index": "181", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "182", "colour": "orange", "code": "    urls = None\n", "error": "none", "author": "tom@organisms.be"}, {"index": "183", "colour": "orange", "code": "    \"\"\"The list of URL's to emit.\"\"\"\n", "error": "none", "author": "tom@organisms.be"}, {"index": "184", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "185", "colour": "orange", "code": "    encoding = 'utf-8'\n", "error": "none", "author": "tom@organisms.be"}, {"index": "186", "colour": "orange", "code": "    \"\"\"The encoding when passed urls are not native strings\"\"\"\n", "error": "none", "author": "tom@organisms.be"}, {"index": "187", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "188", "colour": "orange", "code": "    def __init__(self, urls, status=None, encoding=None):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "189", "colour": "orange", "code": "        import cherrypy\n", "error": "none", "author": "tom@organisms.be"}, {"index": "190", "colour": "orange", "code": "        request = cherrypy.serving.request\n", "error": "none", "author": "tom@organisms.be"}, {"index": "191", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "192", "colour": "orange", "code": "        if isinstance(urls, basestring):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "193", "colour": "orange", "code": "            urls = [urls]\n", "error": "none", "author": "tom@organisms.be"}, {"index": "194", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "195", "colour": "orange", "code": "        abs_urls = []\n", "error": "none", "author": "tom@organisms.be"}, {"index": "196", "colour": "orange", "code": "        for url in urls:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "197", "colour": "orange", "code": "            url = tonative(url, encoding or self.encoding)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "198", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "199", "colour": "orange", "code": "            # Note that urljoin will \"do the right thing\" whether url is:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "200", "colour": "orange", "code": "            #  1. a complete URL with host (e.g. \"http://www.example.com/test\")\n", "error": "none", "author": "tom@organisms.be"}, {"index": "201", "colour": "orange", "code": "            #  2. a URL relative to root (e.g. \"/dummy\")\n", "error": "none", "author": "tom@organisms.be"}, {"index": "202", "colour": "orange", "code": "            #  3. a URL relative to the current path\n", "error": "none", "author": "tom@organisms.be"}, {"index": "203", "colour": "orange", "code": "            # Note that any query string in cherrypy.request is discarded.\n", "error": "none", "author": "tom@organisms.be"}, {"index": "204", "colour": "orange", "code": "            url = _urljoin(cherrypy.url(), url)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "205", "colour": "orange", "code": "            abs_urls.append(url)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "206", "colour": "orange", "code": "        self.urls = abs_urls\n", "error": "none", "author": "tom@organisms.be"}, {"index": "207", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "208", "colour": "orange", "code": "        # RFC 2616 indicates a 301 response code fits our goal; however,\n", "error": "none", "author": "tom@organisms.be"}, {"index": "209", "colour": "orange", "code": "        # browser support for 301 is quite messy. Do 302/303 instead. See\n", "error": "none", "author": "tom@organisms.be"}, {"index": "210", "colour": "orange", "code": "        # http://www.alanflavell.org.uk/www/post-redirect.html\n", "error": "none", "author": "tom@organisms.be"}, {"index": "211", "colour": "orange", "code": "        if status is None:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "212", "colour": "orange", "code": "            if request.protocol >= (1, 1):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "213", "colour": "orange", "code": "                status = 303\n", "error": "none", "author": "tom@organisms.be"}, {"index": "214", "colour": "orange", "code": "            else:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "215", "colour": "orange", "code": "                status = 302\n", "error": "none", "author": "tom@organisms.be"}, {"index": "216", "colour": "orange", "code": "        else:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "217", "colour": "orange", "code": "            status = int(status)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "218", "colour": "orange", "code": "            if status < 300 or status > 399:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "219", "colour": "orange", "code": "                raise ValueError(\"status must be between 300 and 399.\")\n", "error": "none", "author": "tom@organisms.be"}, {"index": "220", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "221", "colour": "orange", "code": "        self.status = status\n", "error": "none", "author": "tom@organisms.be"}, {"index": "222", "colour": "orange", "code": "        CherryPyException.__init__(self, abs_urls, status)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "223", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "224", "colour": "orange", "code": "    def set_response(self):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "225", "colour": "orange", "code": "        \"\"\"Modify cherrypy.response status, headers, and body to represent self.\n", "error": "none", "author": "tom@organisms.be"}, {"index": "226", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "227", "colour": "orange", "code": "        CherryPy uses this internally, but you can also use it to create an\n", "error": "none", "author": "tom@organisms.be"}, {"index": "228", "colour": "orange", "code": "        HTTPRedirect object and set its output without *raising* the exception.\n", "error": "none", "author": "tom@organisms.be"}, {"index": "229", "colour": "orange", "code": "        \"\"\"\n", "error": "none", "author": "tom@organisms.be"}, {"index": "230", "colour": "orange", "code": "        import cherrypy\n", "error": "none", "author": "tom@organisms.be"}, {"index": "231", "colour": "orange", "code": "        response = cherrypy.serving.response\n", "error": "none", "author": "tom@organisms.be"}, {"index": "232", "colour": "orange", "code": "        response.status = status = self.status\n", "error": "none", "author": "tom@organisms.be"}, {"index": "233", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "234", "colour": "orange", "code": "        if status in (300, 301, 302, 303, 307):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "235", "colour": "orange", "code": "            response.headers['Content-Type'] = \"text/html;charset=utf-8\"\n", "error": "none", "author": "tom@organisms.be"}, {"index": "236", "colour": "orange", "code": "            # \"The ... URI SHOULD be given by the Location field\n", "error": "none", "author": "tom@organisms.be"}, {"index": "237", "colour": "orange", "code": "            # in the response.\"\n", "error": "none", "author": "tom@organisms.be"}, {"index": "238", "colour": "orange", "code": "            response.headers['Location'] = self.urls[0]\n", "error": "none", "author": "tom@organisms.be"}, {"index": "239", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "240", "colour": "orange", "code": "            # \"Unless the request method was HEAD, the entity of the response\n", "error": "none", "author": "tom@organisms.be"}, {"index": "241", "colour": "orange", "code": "            # SHOULD contain a short hypertext note with a hyperlink to the\n", "error": "none", "author": "tom@organisms.be"}, {"index": "242", "colour": "orange", "code": "            # new URI(s).\"\n", "error": "none", "author": "tom@organisms.be"}, {"index": "243", "colour": "orange", "code": "            msg = {300: \"This resource can be found at <a href='%s'>%s</a>.\",\n", "error": "none", "author": "tom@organisms.be"}, {"index": "244", "colour": "orange", "code": "                   301: \"This resource has permanently moved to <a href='%s'>%s</a>.\",\n", "error": "none", "author": "tom@organisms.be"}, {"index": "245", "colour": "orange", "code": "                   302: \"This resource resides temporarily at <a href='%s'>%s</a>.\",\n", "error": "none", "author": "tom@organisms.be"}, {"index": "246", "colour": "orange", "code": "                   303: \"This resource can be found at <a href='%s'>%s</a>.\",\n", "error": "none", "author": "tom@organisms.be"}, {"index": "247", "colour": "orange", "code": "                   307: \"This resource has moved temporarily to <a href='%s'>%s</a>.\",\n", "error": "none", "author": "tom@organisms.be"}, {"index": "248", "colour": "orange", "code": "                   }[status]\n", "error": "none", "author": "tom@organisms.be"}, {"index": "249", "colour": "orange", "code": "            msgs = [msg % (u, u) for u in self.urls]\n", "error": "none", "author": "tom@organisms.be"}, {"index": "250", "colour": "orange", "code": "            response.body = ntob(\"<br />\\n\".join(msgs), 'utf-8')\n", "error": "none", "author": "tom@organisms.be"}, {"index": "251", "colour": "orange", "code": "            # Previous code may have set C-L, so we have to reset it\n", "error": "none", "author": "tom@organisms.be"}, {"index": "252", "colour": "orange", "code": "            # (allow finalize to set it).\n", "error": "none", "author": "tom@organisms.be"}, {"index": "253", "colour": "orange", "code": "            response.headers.pop('Content-Length', None)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "254", "colour": "orange", "code": "        elif status == 304:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "255", "colour": "orange", "code": "            # Not Modified.\n", "error": "none", "author": "tom@organisms.be"}, {"index": "256", "colour": "orange", "code": "            # \"The response MUST include the following header fields:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "257", "colour": "orange", "code": "            # Date, unless its omission is required by section 14.18.1\"\n", "error": "none", "author": "tom@organisms.be"}, {"index": "258", "colour": "orange", "code": "            # The \"Date\" header should have been set in Response.__init__\n", "error": "none", "author": "tom@organisms.be"}, {"index": "259", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "260", "colour": "orange", "code": "            # \"...the response SHOULD NOT include other entity-headers.\"\n", "error": "none", "author": "tom@organisms.be"}, {"index": "261", "colour": "orange", "code": "            for key in ('Allow', 'Content-Encoding', 'Content-Language',\n", "error": "none", "author": "tom@organisms.be"}, {"index": "262", "colour": "orange", "code": "                        'Content-Length', 'Content-Location', 'Content-MD5',\n", "error": "none", "author": "tom@organisms.be"}, {"index": "263", "colour": "orange", "code": "                        'Content-Range', 'Content-Type', 'Expires',\n", "error": "none", "author": "tom@organisms.be"}, {"index": "264", "colour": "orange", "code": "                        'Last-Modified'):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "265", "colour": "orange", "code": "                if key in response.headers:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "266", "colour": "orange", "code": "                    del response.headers[key]\n", "error": "none", "author": "tom@organisms.be"}, {"index": "267", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "268", "colour": "orange", "code": "            # \"The 304 response MUST NOT contain a message-body.\"\n", "error": "none", "author": "tom@organisms.be"}, {"index": "269", "colour": "orange", "code": "            response.body = None\n", "error": "none", "author": "tom@organisms.be"}, {"index": "270", "colour": "orange", "code": "            # Previous code may have set C-L, so we have to reset it.\n", "error": "none", "author": "tom@organisms.be"}, {"index": "271", "colour": "orange", "code": "            response.headers.pop('Content-Length', None)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "272", "colour": "orange", "code": "        elif status == 305:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "273", "colour": "orange", "code": "            # Use Proxy.\n", "error": "none", "author": "tom@organisms.be"}, {"index": "274", "colour": "orange", "code": "            # self.urls[0] should be the URI of the proxy.\n", "error": "none", "author": "tom@organisms.be"}, {"index": "275", "colour": "orange", "code": "            response.headers['Location'] = self.urls[0]\n", "error": "none", "author": "tom@organisms.be"}, {"index": "276", "colour": "orange", "code": "            response.body = None\n", "error": "none", "author": "tom@organisms.be"}, {"index": "277", "colour": "orange", "code": "            # Previous code may have set C-L, so we have to reset it.\n", "error": "none", "author": "tom@organisms.be"}, {"index": "278", "colour": "orange", "code": "            response.headers.pop('Content-Length', None)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "279", "colour": "orange", "code": "        else:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "280", "colour": "orange", "code": "            raise ValueError(\"The %s status code is unknown.\" % status)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "281", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "282", "colour": "orange", "code": "    def __call__(self):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "283", "colour": "orange", "code": "        \"\"\"Use this exception as a request.handler (raise self).\"\"\"\n", "error": "none", "author": "tom@organisms.be"}, {"index": "284", "colour": "orange", "code": "        raise self\n", "error": "none", "author": "tom@organisms.be"}, {"index": "285", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "286", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "287", "colour": "orange", "code": "def clean_headers(status):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "288", "colour": "orange", "code": "    \"\"\"Remove any headers which should not apply to an error response.\"\"\"\n", "error": "none", "author": "tom@organisms.be"}, {"index": "289", "colour": "orange", "code": "    import cherrypy\n", "error": "none", "author": "tom@organisms.be"}, {"index": "290", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "291", "colour": "orange", "code": "    response = cherrypy.serving.response\n", "error": "none", "author": "tom@organisms.be"}, {"index": "292", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "293", "colour": "orange", "code": "    # Remove headers which applied to the original content,\n", "error": "none", "author": "tom@organisms.be"}, {"index": "294", "colour": "orange", "code": "    # but do not apply to the error page.\n", "error": "none", "author": "tom@organisms.be"}, {"index": "295", "colour": "orange", "code": "    respheaders = response.headers\n", "error": "none", "author": "tom@organisms.be"}, {"index": "296", "colour": "orange", "code": "    for key in [\"Accept-Ranges\", \"Age\", \"ETag\", \"Location\", \"Retry-After\",\n", "error": "none", "author": "tom@organisms.be"}, {"index": "297", "colour": "orange", "code": "                \"Vary\", \"Content-Encoding\", \"Content-Length\", \"Expires\",\n", "error": "none", "author": "tom@organisms.be"}, {"index": "298", "colour": "orange", "code": "                \"Content-Location\", \"Content-MD5\", \"Last-Modified\"]:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "299", "colour": "orange", "code": "        if key in respheaders:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "300", "colour": "orange", "code": "            del respheaders[key]\n", "error": "none", "author": "tom@organisms.be"}, {"index": "301", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "302", "colour": "orange", "code": "    if status != 416:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "303", "colour": "orange", "code": "        # A server sending a response with status code 416 (Requested\n", "error": "none", "author": "tom@organisms.be"}, {"index": "304", "colour": "orange", "code": "        # range not satisfiable) SHOULD include a Content-Range field\n", "error": "none", "author": "tom@organisms.be"}, {"index": "305", "colour": "orange", "code": "        # with a byte-range-resp-spec of \"*\". The instance-length\n", "error": "none", "author": "tom@organisms.be"}, {"index": "306", "colour": "orange", "code": "        # specifies the current length of the selected resource.\n", "error": "none", "author": "tom@organisms.be"}, {"index": "307", "colour": "orange", "code": "        # A response with status code 206 (Partial Content) MUST NOT\n", "error": "none", "author": "tom@organisms.be"}, {"index": "308", "colour": "orange", "code": "        # include a Content-Range field with a byte-range- resp-spec of \"*\".\n", "error": "none", "author": "tom@organisms.be"}, {"index": "309", "colour": "orange", "code": "        if \"Content-Range\" in respheaders:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "310", "colour": "orange", "code": "            del respheaders[\"Content-Range\"]\n", "error": "none", "author": "tom@organisms.be"}, {"index": "311", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "312", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "313", "colour": "orange", "code": "class HTTPError(CherryPyException):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "314", "colour": "orange", "code": "    \"\"\"Exception used to return an HTTP error code (4xx-5xx) to the client.\n", "error": "none", "author": "tom@organisms.be"}, {"index": "315", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "316", "colour": "orange", "code": "    This exception can be used to automatically send a response using a http status\n", "error": "none", "author": "tom@organisms.be"}, {"index": "317", "colour": "orange", "code": "    code, with an appropriate error page. It takes an optional\n", "error": "none", "author": "tom@organisms.be"}, {"index": "318", "colour": "orange", "code": "    ``status`` argument (which must be between 400 and 599); it defaults to 500\n", "error": "none", "author": "tom@organisms.be"}, {"index": "319", "colour": "orange", "code": "    (\"Internal Server Error\"). It also takes an optional ``message`` argument,\n", "error": "none", "author": "tom@organisms.be"}, {"index": "320", "colour": "orange", "code": "    which will be returned in the response body. See\n", "error": "none", "author": "tom@organisms.be"}, {"index": "321", "colour": "orange", "code": "    `RFC 2616 <http://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html#sec10.4>`_\n", "error": "none", "author": "tom@organisms.be"}, {"index": "322", "colour": "orange", "code": "    for a complete list of available error codes and when to use them.\n", "error": "none", "author": "tom@organisms.be"}, {"index": "323", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "324", "colour": "orange", "code": "    Examples::\n", "error": "none", "author": "tom@organisms.be"}, {"index": "325", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "326", "colour": "orange", "code": "        raise cherrypy.HTTPError(403)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "327", "colour": "orange", "code": "        raise cherrypy.HTTPError(\"403 Forbidden\", \"You are not allowed to access this resource.\")\n", "error": "none", "author": "tom@organisms.be"}, {"index": "328", "colour": "orange", "code": "    \"\"\"\n", "error": "none", "author": "tom@organisms.be"}, {"index": "329", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "330", "colour": "orange", "code": "    status = None\n", "error": "none", "author": "tom@organisms.be"}, {"index": "331", "colour": "orange", "code": "    \"\"\"The HTTP status code. May be of type int or str (with a Reason-Phrase).\"\"\"\n", "error": "none", "author": "tom@organisms.be"}, {"index": "332", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "333", "colour": "orange", "code": "    code = None\n", "error": "none", "author": "tom@organisms.be"}, {"index": "334", "colour": "orange", "code": "    \"\"\"The integer HTTP status code.\"\"\"\n", "error": "none", "author": "tom@organisms.be"}, {"index": "335", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "336", "colour": "orange", "code": "    reason = None\n", "error": "none", "author": "tom@organisms.be"}, {"index": "337", "colour": "orange", "code": "    \"\"\"The HTTP Reason-Phrase string.\"\"\"\n", "error": "none", "author": "tom@organisms.be"}, {"index": "338", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "339", "colour": "orange", "code": "    def __init__(self, status=500, message=None):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "340", "colour": "orange", "code": "        self.status = status\n", "error": "none", "author": "tom@organisms.be"}, {"index": "341", "colour": "orange", "code": "        try:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "342", "colour": "orange", "code": "            self.code, self.reason, defaultmsg = _httputil.valid_status(status)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "343", "colour": "orange", "code": "        except ValueError:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "344", "colour": "orange", "code": "            raise self.__class__(500, _exc_info()[1].args[0])\n", "error": "none", "author": "tom@organisms.be"}, {"index": "345", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "346", "colour": "orange", "code": "        if self.code < 400 or self.code > 599:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "347", "colour": "orange", "code": "            raise ValueError(\"status must be between 400 and 599.\")\n", "error": "none", "author": "tom@organisms.be"}, {"index": "348", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "349", "colour": "orange", "code": "        # See http://www.python.org/dev/peps/pep-0352/\n", "error": "none", "author": "tom@organisms.be"}, {"index": "350", "colour": "orange", "code": "        # self.message = message\n", "error": "none", "author": "tom@organisms.be"}, {"index": "351", "colour": "orange", "code": "        self._message = message or defaultmsg\n", "error": "none", "author": "tom@organisms.be"}, {"index": "352", "colour": "orange", "code": "        CherryPyException.__init__(self, status, message)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "353", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "354", "colour": "orange", "code": "    def set_response(self):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "355", "colour": "orange", "code": "        \"\"\"Modify cherrypy.response status, headers, and body to represent self.\n", "error": "none", "author": "tom@organisms.be"}, {"index": "356", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "357", "colour": "orange", "code": "        CherryPy uses this internally, but you can also use it to create an\n", "error": "none", "author": "tom@organisms.be"}, {"index": "358", "colour": "orange", "code": "        HTTPError object and set its output without *raising* the exception.\n", "error": "none", "author": "tom@organisms.be"}, {"index": "359", "colour": "orange", "code": "        \"\"\"\n", "error": "none", "author": "tom@organisms.be"}, {"index": "360", "colour": "orange", "code": "        import cherrypy\n", "error": "none", "author": "tom@organisms.be"}, {"index": "361", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "362", "colour": "orange", "code": "        response = cherrypy.serving.response\n", "error": "none", "author": "tom@organisms.be"}, {"index": "363", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "364", "colour": "orange", "code": "        clean_headers(self.code)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "365", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "366", "colour": "orange", "code": "        # In all cases, finalize will be called after this method,\n", "error": "none", "author": "tom@organisms.be"}, {"index": "367", "colour": "orange", "code": "        # so don't bother cleaning up response values here.\n", "error": "none", "author": "tom@organisms.be"}, {"index": "368", "colour": "orange", "code": "        response.status = self.status\n", "error": "none", "author": "tom@organisms.be"}, {"index": "369", "colour": "orange", "code": "        tb = None\n", "error": "none", "author": "tom@organisms.be"}, {"index": "370", "colour": "orange", "code": "        if cherrypy.serving.request.show_tracebacks:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "371", "colour": "orange", "code": "            tb = format_exc()\n", "error": "none", "author": "tom@organisms.be"}, {"index": "372", "colour": "orange", "code": "        response.headers['Content-Type'] = \"text/html;charset=utf-8\"\n", "error": "none", "author": "tom@organisms.be"}, {"index": "373", "colour": "orange", "code": "        response.headers.pop('Content-Length', None)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "374", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "375", "colour": "orange", "code": "        content = self.get_error_page(self.status, traceback=tb,\n", "error": "none", "author": "tom@organisms.be"}, {"index": "376", "colour": "orange", "code": "            message=self._message).encode('utf-8')\n", "error": "none", "author": "tom@organisms.be"}, {"index": "377", "colour": "orange", "code": "        response.body = content\n", "error": "none", "author": "tom@organisms.be"}, {"index": "378", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "379", "colour": "orange", "code": "        _be_ie_unfriendly(self.code)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "380", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "381", "colour": "blue", "code": "    def get_error_page(self, *args, **kwargs):\n", "error": "R", "author": "tom@organisms.be"}, {"index": "382", "colour": "orange", "code": "        return get_error_page(*args, **kwargs)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "383", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "384", "colour": "orange", "code": "    def __call__(self):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "385", "colour": "orange", "code": "        \"\"\"Use this exception as a request.handler (raise self).\"\"\"\n", "error": "none", "author": "tom@organisms.be"}, {"index": "386", "colour": "orange", "code": "        raise self\n", "error": "none", "author": "tom@organisms.be"}, {"index": "387", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "388", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "389", "colour": "orange", "code": "class NotFound(HTTPError):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "390", "colour": "orange", "code": "    \"\"\"Exception raised when a URL could not be mapped to any handler (404).\n", "error": "none", "author": "tom@organisms.be"}, {"index": "391", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "392", "colour": "orange", "code": "    This is equivalent to raising\n", "error": "none", "author": "tom@organisms.be"}, {"index": "393", "colour": "orange", "code": "    :class:`HTTPError(\"404 Not Found\") <cherrypy._cperror.HTTPError>`.\n", "error": "none", "author": "tom@organisms.be"}, {"index": "394", "colour": "orange", "code": "    \"\"\"\n", "error": "none", "author": "tom@organisms.be"}, {"index": "395", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "396", "colour": "orange", "code": "    def __init__(self, path=None):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "397", "colour": "orange", "code": "        if path is None:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "398", "colour": "orange", "code": "            import cherrypy\n", "error": "none", "author": "tom@organisms.be"}, {"index": "399", "colour": "orange", "code": "            request = cherrypy.serving.request\n", "error": "none", "author": "tom@organisms.be"}, {"index": "400", "colour": "orange", "code": "            path = request.script_name + request.path_info\n", "error": "none", "author": "tom@organisms.be"}, {"index": "401", "colour": "orange", "code": "        self.args = (path,)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "402", "colour": "orange", "code": "        HTTPError.__init__(self, 404, \"The path '%s' was not found.\" % path)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "403", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "404", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "405", "colour": "orange", "code": "_HTTPErrorTemplate = '''<!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Transitional//EN\"\n", "error": "none", "author": "tom@organisms.be"}, {"index": "406", "colour": "orange", "code": "\"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd\">\n", "error": "none", "author": "tom@organisms.be"}, {"index": "407", "colour": "orange", "code": "<html>\n", "error": "none", "author": "tom@organisms.be"}, {"index": "408", "colour": "orange", "code": "<head>\n", "error": "none", "author": "tom@organisms.be"}, {"index": "409", "colour": "orange", "code": "    <meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\"></meta>\n", "error": "none", "author": "tom@organisms.be"}, {"index": "410", "colour": "orange", "code": "    <title>%(status)s</title>\n", "error": "none", "author": "tom@organisms.be"}, {"index": "411", "colour": "orange", "code": "    <style type=\"text/css\">\n", "error": "none", "author": "tom@organisms.be"}, {"index": "412", "colour": "orange", "code": "    #powered_by {\n", "error": "none", "author": "tom@organisms.be"}, {"index": "413", "colour": "orange", "code": "        margin-top: 20px;\n", "error": "none", "author": "tom@organisms.be"}, {"index": "414", "colour": "orange", "code": "        border-top: 2px solid black;\n", "error": "none", "author": "tom@organisms.be"}, {"index": "415", "colour": "orange", "code": "        font-style: italic;\n", "error": "none", "author": "tom@organisms.be"}, {"index": "416", "colour": "orange", "code": "    }\n", "error": "none", "author": "tom@organisms.be"}, {"index": "417", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "418", "colour": "orange", "code": "    #traceback {\n", "error": "none", "author": "tom@organisms.be"}, {"index": "419", "colour": "orange", "code": "        color: red;\n", "error": "none", "author": "tom@organisms.be"}, {"index": "420", "colour": "orange", "code": "    }\n", "error": "none", "author": "tom@organisms.be"}, {"index": "421", "colour": "orange", "code": "    </style>\n", "error": "none", "author": "tom@organisms.be"}, {"index": "422", "colour": "orange", "code": "</head>\n", "error": "none", "author": "tom@organisms.be"}, {"index": "423", "colour": "orange", "code": "    <body>\n", "error": "none", "author": "tom@organisms.be"}, {"index": "424", "colour": "orange", "code": "        <h2>%(status)s</h2>\n", "error": "none", "author": "tom@organisms.be"}, {"index": "425", "colour": "orange", "code": "        <p>%(message)s</p>\n", "error": "none", "author": "tom@organisms.be"}, {"index": "426", "colour": "orange", "code": "        <pre id=\"traceback\">%(traceback)s</pre>\n", "error": "none", "author": "tom@organisms.be"}, {"index": "427", "colour": "orange", "code": "    <div id=\"powered_by\">\n", "error": "none", "author": "tom@organisms.be"}, {"index": "428", "colour": "orange", "code": "    <span>Powered by <a href=\"http://www.cherrypy.org\">CherryPy %(version)s</a></span>\n", "error": "none", "author": "tom@organisms.be"}, {"index": "429", "colour": "orange", "code": "    </div>\n", "error": "none", "author": "tom@organisms.be"}, {"index": "430", "colour": "orange", "code": "    </body>\n", "error": "none", "author": "tom@organisms.be"}, {"index": "431", "colour": "orange", "code": "</html>\n", "error": "none", "author": "tom@organisms.be"}, {"index": "432", "colour": "orange", "code": "'''\n", "error": "none", "author": "tom@organisms.be"}, {"index": "433", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "434", "colour": "blue", "code": "def get_error_page(status, **kwargs):\n", "error": "R", "author": "tom@organisms.be"}, {"index": "435", "colour": "orange", "code": "    \"\"\"Return an HTML page, containing a pretty error response.\n", "error": "none", "author": "tom@organisms.be"}, {"index": "436", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "437", "colour": "orange", "code": "    status should be an int or a str.\n", "error": "none", "author": "tom@organisms.be"}, {"index": "438", "colour": "orange", "code": "    kwargs will be interpolated into the page template.\n", "error": "none", "author": "tom@organisms.be"}, {"index": "439", "colour": "orange", "code": "    \"\"\"\n", "error": "none", "author": "tom@organisms.be"}, {"index": "440", "colour": "orange", "code": "    import cherrypy\n", "error": "none", "author": "tom@organisms.be"}, {"index": "441", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "442", "colour": "orange", "code": "    try:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "443", "colour": "orange", "code": "        code, reason, message = _httputil.valid_status(status)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "444", "colour": "orange", "code": "    except ValueError:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "445", "colour": "orange", "code": "        raise cherrypy.HTTPError(500, _exc_info()[1].args[0])\n", "error": "none", "author": "tom@organisms.be"}, {"index": "446", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "447", "colour": "orange", "code": "    # We can't use setdefault here, because some\n", "error": "none", "author": "tom@organisms.be"}, {"index": "448", "colour": "orange", "code": "    # callers send None for kwarg values.\n", "error": "none", "author": "tom@organisms.be"}, {"index": "449", "colour": "orange", "code": "    if kwargs.get('status') is None:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "450", "colour": "orange", "code": "        kwargs['status'] = \"%s %s\" % (code, reason)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "451", "colour": "orange", "code": "    if kwargs.get('message') is None:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "452", "colour": "orange", "code": "        kwargs['message'] = message\n", "error": "none", "author": "tom@organisms.be"}, {"index": "453", "colour": "orange", "code": "    if kwargs.get('traceback') is None:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "454", "colour": "orange", "code": "        kwargs['traceback'] = ''\n", "error": "none", "author": "tom@organisms.be"}, {"index": "455", "colour": "orange", "code": "    if kwargs.get('version') is None:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "456", "colour": "orange", "code": "        kwargs['version'] = cherrypy.__version__\n", "error": "none", "author": "tom@organisms.be"}, {"index": "457", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "458", "colour": "orange", "code": "    for k, v in iteritems(kwargs):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "459", "colour": "orange", "code": "        if v is None:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "460", "colour": "orange", "code": "            kwargs[k] = \"\"\n", "error": "none", "author": "tom@organisms.be"}, {"index": "461", "colour": "orange", "code": "        else:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "462", "colour": "orange", "code": "            kwargs[k] = _escape(kwargs[k])\n", "error": "none", "author": "tom@organisms.be"}, {"index": "463", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "464", "colour": "orange", "code": "    # Use a custom template or callable for the error page?\n", "error": "none", "author": "tom@organisms.be"}, {"index": "465", "colour": "orange", "code": "    pages = cherrypy.serving.request.error_page\n", "error": "none", "author": "tom@organisms.be"}, {"index": "466", "colour": "orange", "code": "    error_page = pages.get(code) or pages.get('default')\n", "error": "none", "author": "tom@organisms.be"}, {"index": "467", "colour": "orange", "code": "    if error_page:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "468", "colour": "orange", "code": "        try:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "469", "colour": "orange", "code": "            if hasattr(error_page, '__call__'):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "470", "colour": "orange", "code": "                return error_page(**kwargs)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "471", "colour": "orange", "code": "            else:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "472", "colour": "orange", "code": "                data = open(error_page, 'rb').read()\n", "error": "none", "author": "tom@organisms.be"}, {"index": "473", "colour": "orange", "code": "                return tonative(data) % kwargs\n", "error": "none", "author": "tom@organisms.be"}, {"index": "474", "colour": "green", "code": "        except:\n", "error": "W", "author": "tom@organisms.be"}, {"index": "475", "colour": "orange", "code": "            e = _format_exception(*_exc_info())[-1]\n", "error": "none", "author": "tom@organisms.be"}, {"index": "476", "colour": "orange", "code": "            m = kwargs['message']\n", "error": "none", "author": "tom@organisms.be"}, {"index": "477", "colour": "orange", "code": "            if m:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "478", "colour": "orange", "code": "                m += \"<br />\"\n", "error": "none", "author": "tom@organisms.be"}, {"index": "479", "colour": "orange", "code": "            m += \"In addition, the custom error page failed:\\n<br />%s\" % e\n", "error": "none", "author": "tom@organisms.be"}, {"index": "480", "colour": "orange", "code": "            kwargs['message'] = m\n", "error": "none", "author": "tom@organisms.be"}, {"index": "481", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "482", "colour": "orange", "code": "    return _HTTPErrorTemplate % kwargs\n", "error": "none", "author": "tom@organisms.be"}, {"index": "483", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "484", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "485", "colour": "orange", "code": "_ie_friendly_error_sizes = {\n", "error": "none", "author": "tom@organisms.be"}, {"index": "486", "colour": "orange", "code": "    400: 512, 403: 256, 404: 512, 405: 256,\n", "error": "none", "author": "tom@organisms.be"}, {"index": "487", "colour": "orange", "code": "    406: 512, 408: 512, 409: 512, 410: 256,\n", "error": "none", "author": "tom@organisms.be"}, {"index": "488", "colour": "orange", "code": "    500: 512, 501: 512, 505: 512,\n", "error": "none", "author": "tom@organisms.be"}, {"index": "489", "colour": "orange", "code": "    }\n", "error": "none", "author": "tom@organisms.be"}, {"index": "490", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "491", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "492", "colour": "orange", "code": "def _be_ie_unfriendly(status):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "493", "colour": "orange", "code": "    import cherrypy\n", "error": "none", "author": "tom@organisms.be"}, {"index": "494", "colour": "orange", "code": "    response = cherrypy.serving.response\n", "error": "none", "author": "tom@organisms.be"}, {"index": "495", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "496", "colour": "orange", "code": "    # For some statuses, Internet Explorer 5+ shows \"friendly error\n", "error": "none", "author": "tom@organisms.be"}, {"index": "497", "colour": "orange", "code": "    # messages\" instead of our response.body if the body is smaller\n", "error": "none", "author": "tom@organisms.be"}, {"index": "498", "colour": "orange", "code": "    # than a given size. Fix this by returning a body over that size\n", "error": "none", "author": "tom@organisms.be"}, {"index": "499", "colour": "orange", "code": "    # (by adding whitespace).\n", "error": "none", "author": "tom@organisms.be"}, {"index": "500", "colour": "orange", "code": "    # See http://support.microsoft.com/kb/q218155/\n", "error": "none", "author": "tom@organisms.be"}, {"index": "501", "colour": "orange", "code": "    s = _ie_friendly_error_sizes.get(status, 0)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "502", "colour": "orange", "code": "    if s:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "503", "colour": "orange", "code": "        s += 1\n", "error": "none", "author": "tom@organisms.be"}, {"index": "504", "colour": "orange", "code": "        # Since we are issuing an HTTP error status, we assume that\n", "error": "none", "author": "tom@organisms.be"}, {"index": "505", "colour": "orange", "code": "        # the entity is short, and we should just collapse it.\n", "error": "none", "author": "tom@organisms.be"}, {"index": "506", "colour": "orange", "code": "        content = response.collapse_body()\n", "error": "none", "author": "tom@organisms.be"}, {"index": "507", "colour": "orange", "code": "        l = len(content)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "508", "colour": "orange", "code": "        if l and l < s:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "509", "colour": "orange", "code": "            # IN ADDITION: the response must be written to IE\n", "error": "none", "author": "tom@organisms.be"}, {"index": "510", "colour": "orange", "code": "            # in one chunk or it will still get replaced! Bah.\n", "error": "none", "author": "tom@organisms.be"}, {"index": "511", "colour": "orange", "code": "            content = content + (ntob(\" \") * (s - l))\n", "error": "none", "author": "tom@organisms.be"}, {"index": "512", "colour": "orange", "code": "        response.body = content\n", "error": "none", "author": "tom@organisms.be"}, {"index": "513", "colour": "orange", "code": "        response.headers['Content-Length'] = str(len(content))\n", "error": "none", "author": "tom@organisms.be"}, {"index": "514", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "515", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "516", "colour": "orange", "code": "def format_exc(exc=None):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "517", "colour": "orange", "code": "    \"\"\"Return exc (or sys.exc_info if None), formatted.\"\"\"\n", "error": "none", "author": "tom@organisms.be"}, {"index": "518", "colour": "orange", "code": "    try:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "519", "colour": "orange", "code": "        if exc is None:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "520", "colour": "orange", "code": "            exc = _exc_info()\n", "error": "none", "author": "tom@organisms.be"}, {"index": "521", "colour": "orange", "code": "        if exc == (None, None, None):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "522", "colour": "orange", "code": "            return \"\"\n", "error": "none", "author": "tom@organisms.be"}, {"index": "523", "colour": "orange", "code": "        import traceback\n", "error": "none", "author": "tom@organisms.be"}, {"index": "524", "colour": "green", "code": "        return \"\".join(traceback.format_exception(*exc))\n", "error": "W", "author": "tom@organisms.be"}, {"index": "525", "colour": "orange", "code": "    finally:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "526", "colour": "orange", "code": "        del exc\n", "error": "none", "author": "tom@organisms.be"}, {"index": "527", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "528", "colour": "orange", "code": "def bare_error(extrabody=None):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "529", "colour": "orange", "code": "    \"\"\"Produce status, headers, body for a critical error.\n", "error": "none", "author": "tom@organisms.be"}, {"index": "530", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "531", "colour": "orange", "code": "    Returns a triple without calling any other questionable functions,\n", "error": "none", "author": "tom@organisms.be"}, {"index": "532", "colour": "orange", "code": "    so it should be as error-free as possible. Call it from an HTTP server\n", "error": "none", "author": "tom@organisms.be"}, {"index": "533", "colour": "orange", "code": "    if you get errors outside of the request.\n", "error": "none", "author": "tom@organisms.be"}, {"index": "534", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "535", "colour": "orange", "code": "    If extrabody is None, a friendly but rather unhelpful error message\n", "error": "none", "author": "tom@organisms.be"}, {"index": "536", "colour": "orange", "code": "    is set in the body. If extrabody is a string, it will be appended\n", "error": "none", "author": "tom@organisms.be"}, {"index": "537", "colour": "orange", "code": "    as-is to the body.\n", "error": "none", "author": "tom@organisms.be"}, {"index": "538", "colour": "orange", "code": "    \"\"\"\n", "error": "none", "author": "tom@organisms.be"}, {"index": "539", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "540", "colour": "orange", "code": "    # The whole point of this function is to be a last line-of-defense\n", "error": "none", "author": "tom@organisms.be"}, {"index": "541", "colour": "orange", "code": "    # in handling errors. That is, it must not raise any errors itself;\n", "error": "none", "author": "tom@organisms.be"}, {"index": "542", "colour": "orange", "code": "    # it cannot be allowed to fail. Therefore, don't add to it!\n", "error": "none", "author": "tom@organisms.be"}, {"index": "543", "colour": "orange", "code": "    # In particular, don't call any other CP functions.\n", "error": "none", "author": "tom@organisms.be"}, {"index": "544", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "545", "colour": "orange", "code": "    body = ntob(\"Unrecoverable error in the server.\")\n", "error": "none", "author": "tom@organisms.be"}, {"index": "546", "colour": "orange", "code": "    if extrabody is not None:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "547", "colour": "orange", "code": "        if not isinstance(extrabody, bytestr):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "548", "colour": "orange", "code": "            extrabody = extrabody.encode('utf-8')\n", "error": "none", "author": "tom@organisms.be"}, {"index": "549", "colour": "orange", "code": "        body += ntob(\"\\n\") + extrabody\n", "error": "none", "author": "tom@organisms.be"}, {"index": "550", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "551", "colour": "orange", "code": "    return (ntob(\"500 Internal Server Error\"),\n", "error": "none", "author": "tom@organisms.be"}, {"index": "552", "colour": "orange", "code": "            [(ntob('Content-Type'), ntob('text/plain')),\n", "error": "none", "author": "tom@organisms.be"}, {"index": "553", "colour": "orange", "code": "             (ntob('Content-Length'), ntob(str(len(body)),'ISO-8859-1'))],\n", "error": "none", "author": "tom@organisms.be"}, {"index": "554", "colour": "orange", "code": "            [body])\n", "error": "none", "author": "tom@organisms.be"}, {"index": "555", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "556", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}]}