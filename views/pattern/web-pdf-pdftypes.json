{"path": "/home/asumal/git/cs410/pattern/pattern/web/pdf/pdftypes.py", "lines": [[{"error": "C", "line": "1", "code": "#!/usr/bin/env python2\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "W", "line": "2", "code": "import sys\n", "colour": "purple", "author": "tom@organisms.be"}, {"error": "none", "line": "3", "code": "import zlib\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "W", "line": "4", "code": "from lzw import lzwdecode\n", "colour": "purple", "author": "tom@organisms.be"}, {"error": "W", "line": "5", "code": "from ascii85 import ascii85decode, asciihexdecode\n", "colour": "purple", "author": "tom@organisms.be"}, {"error": "W", "line": "6", "code": "from runlength import rldecode\n", "colour": "purple", "author": "tom@organisms.be"}, {"error": "W", "line": "7", "code": "from psparser import PSException, PSObject\n", "colour": "purple", "author": "tom@organisms.be"}, {"error": "W", "line": "8", "code": "from psparser import LIT, KWD, STRICT\n", "colour": "purple", "author": "tom@organisms.be"}, {"error": "none", "line": "9", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "10", "code": "LITERAL_CRYPT = LIT('Crypt')\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "11", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "12", "code": "# Abbreviation of Filter names in PDF 4.8.6. \"Inline Images\"\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "13", "code": "LITERALS_FLATE_DECODE = (LIT('FlateDecode'), LIT('Fl'))\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "14", "code": "LITERALS_LZW_DECODE = (LIT('LZWDecode'), LIT('LZW'))\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "15", "code": "LITERALS_ASCII85_DECODE = (LIT('ASCII85Decode'), LIT('A85'))\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "16", "code": "LITERALS_ASCIIHEX_DECODE = (LIT('ASCIIHexDecode'), LIT('AHx'))\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "17", "code": "LITERALS_RUNLENGTH_DECODE = (LIT('RunLengthDecode'), LIT('RL'))\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "18", "code": "LITERALS_CCITTFAX_DECODE = (LIT('CCITTFaxDecode'), LIT('CCF'))\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "19", "code": "LITERALS_DCT_DECODE = (LIT('DCTDecode'), LIT('DCT'))\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "20", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "21", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "22", "code": "##  PDF Objects\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "23", "code": "##\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "R", "line": "24", "code": "class PDFObject(PSObject): pass\n", "colour": "green", "author": "tom@organisms.be"}, {"error": "none", "line": "25", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "26", "code": "class PDFException(PSException): pass\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "C", "line": "27", "code": "class PDFTypeError(PDFException): pass\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "C", "line": "28", "code": "class PDFValueError(PDFException): pass\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "C", "line": "29", "code": "class PDFNotImplementedError(PSException): pass\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "30", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "31", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "32", "code": "##  PDFObjRef\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "33", "code": "##\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "R", "line": "34", "code": "class PDFObjRef(PDFObject):\n", "colour": "green", "author": "tom@organisms.be"}, {"error": "none", "line": "35", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "36", "code": "    def __init__(self, doc, objid, _):\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "37", "code": "        if objid == 0:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "38", "code": "            if STRICT:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "39", "code": "                raise PDFValueError('PDF object id cannot be 0.')\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "40", "code": "        self.doc = doc\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "41", "code": "        self.objid = objid\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "42", "code": "        #self.genno = genno  # Never used.\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "43", "code": "        return\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "44", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "45", "code": "    def __repr__(self):\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "46", "code": "        return '<PDFObjRef:%d>' % (self.objid)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "47", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "48", "code": "    def resolve(self):\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "49", "code": "        return self.doc.getobj(self.objid)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "50", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "51", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "52", "code": "# resolve\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "53", "code": "def resolve1(x):\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "54", "code": "    \"\"\"Resolves an object.\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "55", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "56", "code": "    If this is an array or dictionary, it may still contains\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "57", "code": "    some indirect objects inside.\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "58", "code": "    \"\"\"\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "59", "code": "    while isinstance(x, PDFObjRef):\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "60", "code": "        x = x.resolve()\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "61", "code": "    return x\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "62", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "63", "code": "def resolve_all(x):\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "64", "code": "    \"\"\"Recursively resolves the given object and all the internals.\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "65", "code": "    \n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "66", "code": "    Make sure there is no indirect reference within the nested object.\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "67", "code": "    This procedure might be slow.\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "68", "code": "    \"\"\"\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "69", "code": "    while isinstance(x, PDFObjRef):\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "70", "code": "        x = x.resolve()\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "71", "code": "    if isinstance(x, list):\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "72", "code": "        x = [ resolve_all(v) for v in x ]\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "73", "code": "    elif isinstance(x, dict):\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "74", "code": "        for (k,v) in x.iteritems():\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "75", "code": "            x[k] = resolve_all(v)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "76", "code": "    return x\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "77", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "78", "code": "def decipher_all(decipher, objid, genno, x):\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "79", "code": "    \"\"\"Recursively deciphers the given object.\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "80", "code": "    \"\"\"\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "81", "code": "    if isinstance(x, str):\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "82", "code": "        return decipher(objid, genno, x)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "83", "code": "    if isinstance(x, list):\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "84", "code": "        x = [ decipher_all(decipher, objid, genno, v) for v in x ]\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "85", "code": "    elif isinstance(x, dict):\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "86", "code": "        for (k,v) in x.iteritems():\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "87", "code": "            x[k] = decipher_all(decipher, objid, genno, v)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "88", "code": "    return x\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "89", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "90", "code": "# Type cheking\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "91", "code": "def int_value(x):\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "92", "code": "    x = resolve1(x)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "93", "code": "    if not isinstance(x, int):\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "94", "code": "        if STRICT:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "95", "code": "            raise PDFTypeError('Integer required: %r' % x)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "96", "code": "        return 0\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "97", "code": "    return x\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "98", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "99", "code": "def float_value(x):\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "100", "code": "    x = resolve1(x)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "101", "code": "    if not isinstance(x, float):\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "102", "code": "        if STRICT:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "103", "code": "            raise PDFTypeError('Float required: %r' % x)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "104", "code": "        return 0.0\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "105", "code": "    return x\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "106", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "107", "code": "def num_value(x):\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "108", "code": "    x = resolve1(x)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "109", "code": "    if not (isinstance(x, int) or isinstance(x, float)):\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "110", "code": "        if STRICT:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "111", "code": "            raise PDFTypeError('Int or Float required: %r' % x)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "112", "code": "        return 0\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "113", "code": "    return x\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "114", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "115", "code": "def str_value(x):\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "116", "code": "    x = resolve1(x)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "117", "code": "    if not isinstance(x, str):\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "118", "code": "        if STRICT:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "119", "code": "            raise PDFTypeError('String required: %r' % x)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "120", "code": "        return ''\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "121", "code": "    return x\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "122", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "123", "code": "def list_value(x):\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "124", "code": "    x = resolve1(x)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "125", "code": "    if not (isinstance(x, list) or isinstance(x, tuple)):\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "126", "code": "        if STRICT:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "127", "code": "            raise PDFTypeError('List required: %r' % x)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "128", "code": "        return []\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "129", "code": "    return x\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "130", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "131", "code": "def dict_value(x):\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "132", "code": "    x = resolve1(x)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "133", "code": "    if not isinstance(x, dict):\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "134", "code": "        if STRICT:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "135", "code": "            raise PDFTypeError('Dict required: %r' % x)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "136", "code": "        return {}\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "137", "code": "    return x\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "138", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "139", "code": "def stream_value(x):\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "140", "code": "    x = resolve1(x)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "141", "code": "    if not isinstance(x, PDFStream):\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "142", "code": "        if STRICT:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "143", "code": "            raise PDFTypeError('PDFStream required: %r' % x)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "144", "code": "        return PDFStream({}, '')\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "145", "code": "    return x\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "146", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "147", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "148", "code": "##  PDFStream type\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "149", "code": "##\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "150", "code": "class PDFStream(PDFObject):\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "151", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "152", "code": "    def __init__(self, attrs, rawdata, decipher=None):\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "153", "code": "        assert isinstance(attrs, dict)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "154", "code": "        self.attrs = attrs\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "155", "code": "        self.rawdata = rawdata\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "156", "code": "        self.decipher = decipher\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "157", "code": "        self.data = None\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "158", "code": "        self.objid = None\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "159", "code": "        self.genno = None\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "160", "code": "        return\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "161", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "162", "code": "    def set_objid(self, objid, genno):\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "163", "code": "        self.objid = objid\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "164", "code": "        self.genno = genno\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "165", "code": "        return\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "166", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "167", "code": "    def __repr__(self):\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "168", "code": "        if self.data is None:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "169", "code": "            assert self.rawdata is not None\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "170", "code": "            return '<PDFStream(%r): raw=%d, %r>' % (self.objid, len(self.rawdata), self.attrs)\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "171", "code": "        else:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "172", "code": "            assert self.data is not None\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "173", "code": "            return '<PDFStream(%r): len=%d, %r>' % (self.objid, len(self.data), self.attrs)\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "174", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "175", "code": "    def __contains__(self, name):\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "176", "code": "        return name in self.attrs\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "177", "code": "    \n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "178", "code": "    def __getitem__(self, name):\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "179", "code": "        return self.attrs[name]\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "180", "code": "    \n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "C", "line": "181", "code": "    def get(self, name, default=None):\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "182", "code": "        return self.attrs.get(name, default)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "183", "code": "    \n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "C", "line": "184", "code": "    def get_any(self, names, default=None):\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "185", "code": "        for name in names:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "186", "code": "            if name in self.attrs:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "187", "code": "                return self.attrs[name]\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "188", "code": "        return default\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "189", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "190", "code": "    def get_filters(self):\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "191", "code": "        filters = self.get_any(('F', 'Filter'))\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "192", "code": "        if not filters: return []\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "C", "line": "193", "code": "        if isinstance(filters, list): return filters\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "C", "line": "194", "code": "        return [ filters ]\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "195", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "R", "line": "196", "code": "    def decode(self):\n", "colour": "green", "author": "tom@organisms.be"}, {"error": "none", "line": "197", "code": "        assert self.data is None and self.rawdata != None\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "198", "code": "        data = self.rawdata\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "199", "code": "        if self.decipher:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "200", "code": "            # Handle encryption\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "201", "code": "            data = self.decipher(self.objid, self.genno, data)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "202", "code": "        filters = self.get_filters()\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "203", "code": "        if not filters:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "204", "code": "            self.data = data\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "205", "code": "            self.rawdata = None\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "206", "code": "            return\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "207", "code": "        for f in filters:\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "208", "code": "            if f in LITERALS_FLATE_DECODE:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "209", "code": "                # will get errors if the document is encrypted.\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "210", "code": "                try:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "211", "code": "                    data = zlib.decompress(data)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "212", "code": "                except zlib.error as e:\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "213", "code": "                    if STRICT:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "214", "code": "                        raise PDFException('Invalid zlib bytes: %r, %r' % (e, data))\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "215", "code": "                    data = ''\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "216", "code": "            elif f in LITERALS_LZW_DECODE:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "217", "code": "                data = lzwdecode(data)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "218", "code": "            elif f in LITERALS_ASCII85_DECODE:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "219", "code": "                data = ascii85decode(data)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "220", "code": "            elif f in LITERALS_ASCIIHEX_DECODE:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "221", "code": "                data = asciihexdecode(data)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "222", "code": "            elif f in LITERALS_RUNLENGTH_DECODE:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "223", "code": "                data = rldecode(data)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "224", "code": "            elif f in LITERALS_CCITTFAX_DECODE:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "225", "code": "                #data = ccittfaxdecode(data)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "226", "code": "                raise PDFNotImplementedError('Unsupported filter: %r' % f)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "227", "code": "            elif f == LITERAL_CRYPT:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "228", "code": "                # not yet..\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "229", "code": "                raise PDFNotImplementedError('/Crypt filter is unsupported')\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "230", "code": "            else:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "231", "code": "                raise PDFNotImplementedError('Unsupported filter: %r' % f)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "232", "code": "            # apply predictors\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "233", "code": "            params = self.get_any(('DP', 'DecodeParms', 'FDecodeParms'), {})\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "234", "code": "            if 'Predictor' in params and 'Columns' in params:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "235", "code": "                pred = int_value(params['Predictor'])\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "236", "code": "                columns = int_value(params['Columns'])\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "237", "code": "                if pred:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "238", "code": "                    if pred != 12:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "239", "code": "                        raise PDFNotImplementedError('Unsupported predictor: %r' % pred)\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "240", "code": "                    buf = ''\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "241", "code": "                    ent0 = '\\x00' * columns\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "242", "code": "                    for i in xrange(0, len(data), columns+1):\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "243", "code": "                        pred = data[i]\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "244", "code": "                        ent1 = data[i+1:i+1+columns]\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "245", "code": "                        if pred == '\\x02':\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "246", "code": "                            ent1 = ''.join( chr((ord(a)+ord(b)) & 255) for (a,b) in zip(ent0,ent1) )\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "247", "code": "                        buf += ent1\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "248", "code": "                        ent0 = ent1\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "249", "code": "                    data = buf\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "250", "code": "        self.data = data\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "251", "code": "        self.rawdata = None\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "252", "code": "        return\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "253", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "254", "code": "    def get_data(self):\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "255", "code": "        if self.data is None:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "256", "code": "            self.decode()\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "257", "code": "        return self.data\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "258", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "259", "code": "    def get_rawdata(self):\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "260", "code": "        return self.rawdata\n", "colour": "black", "author": "tom@organisms.be"}]]}