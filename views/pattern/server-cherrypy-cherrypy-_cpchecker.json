{"path": "/home/asumal/git/cs410/pattern/pattern/server/cherrypy/cherrypy/_cpchecker.py", "lines": [[{"index": "1", "colour": "orange", "code": "import os\n", "error": "none", "author": "tom@organisms.be"}, {"index": "2", "colour": "orange", "code": "import warnings\n", "error": "none", "author": "tom@organisms.be"}, {"index": "3", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "4", "colour": "orange", "code": "import cherrypy\n", "error": "none", "author": "tom@organisms.be"}, {"index": "5", "colour": "orange", "code": "from cherrypy._cpcompat import iteritems, copykeys, builtins\n", "error": "none", "author": "tom@organisms.be"}, {"index": "6", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "7", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "8", "colour": "orange", "code": "class Checker(object):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "9", "colour": "orange", "code": "    \"\"\"A checker for CherryPy sites and their mounted applications.\n", "error": "none", "author": "tom@organisms.be"}, {"index": "10", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "11", "colour": "orange", "code": "    When this object is called at engine startup, it executes each\n", "error": "none", "author": "tom@organisms.be"}, {"index": "12", "colour": "orange", "code": "    of its own methods whose names start with ``check_``. If you wish\n", "error": "none", "author": "tom@organisms.be"}, {"index": "13", "colour": "orange", "code": "    to disable selected checks, simply add a line in your global\n", "error": "none", "author": "tom@organisms.be"}, {"index": "14", "colour": "orange", "code": "    config which sets the appropriate method to False::\n", "error": "none", "author": "tom@organisms.be"}, {"index": "15", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "16", "colour": "orange", "code": "        [global]\n", "error": "none", "author": "tom@organisms.be"}, {"index": "17", "colour": "orange", "code": "        checker.check_skipped_app_config = False\n", "error": "none", "author": "tom@organisms.be"}, {"index": "18", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "19", "colour": "orange", "code": "    You may also dynamically add or replace ``check_*`` methods in this way.\n", "error": "none", "author": "tom@organisms.be"}, {"index": "20", "colour": "orange", "code": "    \"\"\"\n", "error": "none", "author": "tom@organisms.be"}, {"index": "21", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "22", "colour": "orange", "code": "    on = True\n", "error": "none", "author": "tom@organisms.be"}, {"index": "23", "colour": "orange", "code": "    \"\"\"If True (the default), run all checks; if False, turn off all checks.\"\"\"\n", "error": "none", "author": "tom@organisms.be"}, {"index": "24", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "25", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "26", "colour": "orange", "code": "    def __init__(self):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "27", "colour": "orange", "code": "        self._populate_known_types()\n", "error": "none", "author": "tom@organisms.be"}, {"index": "28", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "29", "colour": "orange", "code": "    def __call__(self):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "30", "colour": "orange", "code": "        \"\"\"Run all check_* methods.\"\"\"\n", "error": "none", "author": "tom@organisms.be"}, {"index": "31", "colour": "orange", "code": "        if self.on:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "32", "colour": "orange", "code": "            oldformatwarning = warnings.formatwarning\n", "error": "none", "author": "tom@organisms.be"}, {"index": "33", "colour": "orange", "code": "            warnings.formatwarning = self.formatwarning\n", "error": "none", "author": "tom@organisms.be"}, {"index": "34", "colour": "orange", "code": "            try:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "35", "colour": "orange", "code": "                for name in dir(self):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "36", "colour": "orange", "code": "                    if name.startswith(\"check_\"):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "37", "colour": "orange", "code": "                        method = getattr(self, name)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "38", "colour": "orange", "code": "                        if method and hasattr(method, '__call__'):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "39", "colour": "orange", "code": "                            method()\n", "error": "none", "author": "tom@organisms.be"}, {"index": "40", "colour": "orange", "code": "            finally:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "41", "colour": "orange", "code": "                warnings.formatwarning = oldformatwarning\n", "error": "none", "author": "tom@organisms.be"}, {"index": "42", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "43", "colour": "blue", "code": "    def formatwarning(self, message, category, filename, lineno, line=None):\n", "error": "R", "author": "tom@organisms.be"}, {"index": "44", "colour": "orange", "code": "        \"\"\"Function to format a warning.\"\"\"\n", "error": "none", "author": "tom@organisms.be"}, {"index": "45", "colour": "orange", "code": "        return \"CherryPy Checker:\\n%s\\n\\n\" % message\n", "error": "none", "author": "tom@organisms.be"}, {"index": "46", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "47", "colour": "orange", "code": "    # This value should be set inside _cpconfig.\n", "error": "none", "author": "tom@organisms.be"}, {"index": "48", "colour": "orange", "code": "    global_config_contained_paths = False\n", "error": "none", "author": "tom@organisms.be"}, {"index": "49", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "50", "colour": "blue", "code": "    def check_app_config_entries_dont_start_with_script_name(self):\n", "error": "R", "author": "tom@organisms.be"}, {"index": "51", "colour": "orange", "code": "        \"\"\"Check for Application config with sections that repeat script_name.\"\"\"\n", "error": "none", "author": "tom@organisms.be"}, {"index": "52", "colour": "orange", "code": "        for sn, app in cherrypy.tree.apps.items():\n", "error": "none", "author": "tom@organisms.be"}, {"index": "53", "colour": "orange", "code": "            if not isinstance(app, cherrypy.Application):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "54", "colour": "orange", "code": "                continue\n", "error": "none", "author": "tom@organisms.be"}, {"index": "55", "colour": "orange", "code": "            if not app.config:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "56", "colour": "orange", "code": "                continue\n", "error": "none", "author": "tom@organisms.be"}, {"index": "57", "colour": "orange", "code": "            if sn == '':\n", "error": "none", "author": "tom@organisms.be"}, {"index": "58", "colour": "orange", "code": "                continue\n", "error": "none", "author": "tom@organisms.be"}, {"index": "59", "colour": "orange", "code": "            sn_atoms = sn.strip(\"/\").split(\"/\")\n", "error": "none", "author": "tom@organisms.be"}, {"index": "60", "colour": "orange", "code": "            for key in app.config.keys():\n", "error": "none", "author": "tom@organisms.be"}, {"index": "61", "colour": "orange", "code": "                key_atoms = key.strip(\"/\").split(\"/\")\n", "error": "none", "author": "tom@organisms.be"}, {"index": "62", "colour": "orange", "code": "                if key_atoms[:len(sn_atoms)] == sn_atoms:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "63", "colour": "orange", "code": "                    warnings.warn(\n", "error": "none", "author": "tom@organisms.be"}, {"index": "64", "colour": "orange", "code": "                        \"The application mounted at %r has config \" \\\n", "error": "none", "author": "tom@organisms.be"}, {"index": "65", "colour": "orange", "code": "                        \"entries that start with its script name: %r\" % (sn, key))\n", "error": "none", "author": "tom@organisms.be"}, {"index": "66", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "67", "colour": "blue", "code": "    def check_site_config_entries_in_app_config(self):\n", "error": "R", "author": "tom@organisms.be"}, {"index": "68", "colour": "orange", "code": "        \"\"\"Check for mounted Applications that have site-scoped config.\"\"\"\n", "error": "none", "author": "tom@organisms.be"}, {"index": "69", "colour": "orange", "code": "        for sn, app in iteritems(cherrypy.tree.apps):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "70", "colour": "orange", "code": "            if not isinstance(app, cherrypy.Application):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "71", "colour": "orange", "code": "                continue\n", "error": "none", "author": "tom@organisms.be"}, {"index": "72", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "73", "colour": "orange", "code": "            msg = []\n", "error": "none", "author": "tom@organisms.be"}, {"index": "74", "colour": "orange", "code": "            for section, entries in iteritems(app.config):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "75", "colour": "orange", "code": "                if section.startswith('/'):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "76", "colour": "orange", "code": "                    for key, value in iteritems(entries):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "77", "colour": "orange", "code": "                        for n in (\"engine.\", \"server.\", \"tree.\", \"checker.\"):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "78", "colour": "orange", "code": "                            if key.startswith(n):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "79", "colour": "orange", "code": "                                msg.append(\"[%s] %s = %s\" % (section, key, value))\n", "error": "none", "author": "tom@organisms.be"}, {"index": "80", "colour": "orange", "code": "            if msg:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "81", "colour": "orange", "code": "                msg.insert(0,\n", "error": "none", "author": "tom@organisms.be"}, {"index": "82", "colour": "orange", "code": "                    \"The application mounted at %r contains the following \"\n", "error": "none", "author": "tom@organisms.be"}, {"index": "83", "colour": "orange", "code": "                    \"config entries, which are only allowed in site-wide \"\n", "error": "none", "author": "tom@organisms.be"}, {"index": "84", "colour": "orange", "code": "                    \"config. Move them to a [global] section and pass them \"\n", "error": "none", "author": "tom@organisms.be"}, {"index": "85", "colour": "orange", "code": "                    \"to cherrypy.config.update() instead of tree.mount().\" % sn)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "86", "colour": "orange", "code": "                warnings.warn(os.linesep.join(msg))\n", "error": "none", "author": "tom@organisms.be"}, {"index": "87", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "88", "colour": "orange", "code": "    def check_skipped_app_config(self):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "89", "colour": "orange", "code": "        \"\"\"Check for mounted Applications that have no config.\"\"\"\n", "error": "none", "author": "tom@organisms.be"}, {"index": "90", "colour": "orange", "code": "        for sn, app in cherrypy.tree.apps.items():\n", "error": "none", "author": "tom@organisms.be"}, {"index": "91", "colour": "orange", "code": "            if not isinstance(app, cherrypy.Application):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "92", "colour": "orange", "code": "                continue\n", "error": "none", "author": "tom@organisms.be"}, {"index": "93", "colour": "orange", "code": "            if not app.config:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "94", "colour": "orange", "code": "                msg = \"The Application mounted at %r has an empty config.\" % sn\n", "error": "none", "author": "tom@organisms.be"}, {"index": "95", "colour": "orange", "code": "                if self.global_config_contained_paths:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "96", "colour": "orange", "code": "                    msg += (\" It looks like the config you passed to \"\n", "error": "none", "author": "tom@organisms.be"}, {"index": "97", "colour": "orange", "code": "                            \"cherrypy.config.update() contains application-\"\n", "error": "none", "author": "tom@organisms.be"}, {"index": "98", "colour": "orange", "code": "                            \"specific sections. You must explicitly pass \"\n", "error": "none", "author": "tom@organisms.be"}, {"index": "99", "colour": "orange", "code": "                            \"application config via \"\n", "error": "none", "author": "tom@organisms.be"}, {"index": "100", "colour": "orange", "code": "                            \"cherrypy.tree.mount(..., config=app_config)\")\n", "error": "none", "author": "tom@organisms.be"}, {"index": "101", "colour": "orange", "code": "                warnings.warn(msg)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "102", "colour": "orange", "code": "                return\n", "error": "none", "author": "tom@organisms.be"}, {"index": "103", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "104", "colour": "blue", "code": "    def check_app_config_brackets(self):\n", "error": "R", "author": "tom@organisms.be"}, {"index": "105", "colour": "orange", "code": "        \"\"\"Check for Application config with extraneous brackets in section names.\"\"\"\n", "error": "none", "author": "tom@organisms.be"}, {"index": "106", "colour": "orange", "code": "        for sn, app in cherrypy.tree.apps.items():\n", "error": "none", "author": "tom@organisms.be"}, {"index": "107", "colour": "orange", "code": "            if not isinstance(app, cherrypy.Application):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "108", "colour": "orange", "code": "                continue\n", "error": "none", "author": "tom@organisms.be"}, {"index": "109", "colour": "orange", "code": "            if not app.config:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "110", "colour": "orange", "code": "                continue\n", "error": "none", "author": "tom@organisms.be"}, {"index": "111", "colour": "orange", "code": "            for key in app.config.keys():\n", "error": "none", "author": "tom@organisms.be"}, {"index": "112", "colour": "orange", "code": "                if key.startswith(\"[\") or key.endswith(\"]\"):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "113", "colour": "orange", "code": "                    warnings.warn(\n", "error": "none", "author": "tom@organisms.be"}, {"index": "114", "colour": "orange", "code": "                        \"The application mounted at %r has config \" \\\n", "error": "none", "author": "tom@organisms.be"}, {"index": "115", "colour": "orange", "code": "                        \"section names with extraneous brackets: %r. \"\n", "error": "none", "author": "tom@organisms.be"}, {"index": "116", "colour": "orange", "code": "                        \"Config *files* need brackets; config *dicts* \"\n", "error": "none", "author": "tom@organisms.be"}, {"index": "117", "colour": "orange", "code": "                        \"(e.g. passed to tree.mount) do not.\" % (sn, key))\n", "error": "none", "author": "tom@organisms.be"}, {"index": "118", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "119", "colour": "blue", "code": "    def check_static_paths(self):\n", "error": "R", "author": "tom@organisms.be"}, {"index": "120", "colour": "orange", "code": "        \"\"\"Check Application config for incorrect static paths.\"\"\"\n", "error": "none", "author": "tom@organisms.be"}, {"index": "121", "colour": "orange", "code": "        # Use the dummy Request object in the main thread.\n", "error": "none", "author": "tom@organisms.be"}, {"index": "122", "colour": "orange", "code": "        request = cherrypy.request\n", "error": "none", "author": "tom@organisms.be"}, {"index": "123", "colour": "green", "code": "        for sn, app in cherrypy.tree.apps.items():\n", "error": "W", "author": "tom@organisms.be"}, {"index": "124", "colour": "orange", "code": "            if not isinstance(app, cherrypy.Application):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "125", "colour": "orange", "code": "                continue\n", "error": "none", "author": "tom@organisms.be"}, {"index": "126", "colour": "orange", "code": "            request.app = app\n", "error": "none", "author": "tom@organisms.be"}, {"index": "127", "colour": "orange", "code": "            for section in app.config:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "128", "colour": "orange", "code": "                # get_resource will populate request.config\n", "error": "none", "author": "tom@organisms.be"}, {"index": "129", "colour": "orange", "code": "                request.get_resource(section + \"/dummy.html\")\n", "error": "none", "author": "tom@organisms.be"}, {"index": "130", "colour": "orange", "code": "                conf = request.config.get\n", "error": "none", "author": "tom@organisms.be"}, {"index": "131", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "132", "colour": "orange", "code": "                if conf(\"tools.staticdir.on\", False):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "133", "colour": "orange", "code": "                    msg = \"\"\n", "error": "none", "author": "tom@organisms.be"}, {"index": "134", "colour": "orange", "code": "                    root = conf(\"tools.staticdir.root\")\n", "error": "none", "author": "tom@organisms.be"}, {"index": "135", "colour": "green", "code": "                    dir = conf(\"tools.staticdir.dir\")\n", "error": "W", "author": "tom@organisms.be"}, {"index": "136", "colour": "orange", "code": "                    if dir is None:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "137", "colour": "orange", "code": "                        msg = \"tools.staticdir.dir is not set.\"\n", "error": "none", "author": "tom@organisms.be"}, {"index": "138", "colour": "orange", "code": "                    else:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "139", "colour": "orange", "code": "                        fulldir = \"\"\n", "error": "none", "author": "tom@organisms.be"}, {"index": "140", "colour": "orange", "code": "                        if os.path.isabs(dir):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "141", "colour": "orange", "code": "                            fulldir = dir\n", "error": "none", "author": "tom@organisms.be"}, {"index": "142", "colour": "orange", "code": "                            if root:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "143", "colour": "orange", "code": "                                msg = (\"dir is an absolute path, even \"\n", "error": "none", "author": "tom@organisms.be"}, {"index": "144", "colour": "orange", "code": "                                       \"though a root is provided.\")\n", "error": "none", "author": "tom@organisms.be"}, {"index": "145", "colour": "orange", "code": "                                testdir = os.path.join(root, dir[1:])\n", "error": "none", "author": "tom@organisms.be"}, {"index": "146", "colour": "orange", "code": "                                if os.path.exists(testdir):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "147", "colour": "orange", "code": "                                    msg += (\"\\nIf you meant to serve the \"\n", "error": "none", "author": "tom@organisms.be"}, {"index": "148", "colour": "orange", "code": "                                            \"filesystem folder at %r, remove \"\n", "error": "none", "author": "tom@organisms.be"}, {"index": "149", "colour": "orange", "code": "                                            \"the leading slash from dir.\" % testdir)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "150", "colour": "orange", "code": "                        else:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "151", "colour": "orange", "code": "                            if not root:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "152", "colour": "orange", "code": "                                msg = \"dir is a relative path and no root provided.\"\n", "error": "none", "author": "tom@organisms.be"}, {"index": "153", "colour": "orange", "code": "                            else:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "154", "colour": "orange", "code": "                                fulldir = os.path.join(root, dir)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "155", "colour": "orange", "code": "                                if not os.path.isabs(fulldir):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "156", "colour": "orange", "code": "                                    msg = \"%r is not an absolute path.\" % fulldir\n", "error": "none", "author": "tom@organisms.be"}, {"index": "157", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "158", "colour": "orange", "code": "                        if fulldir and not os.path.exists(fulldir):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "159", "colour": "orange", "code": "                            if msg:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "160", "colour": "orange", "code": "                                msg += \"\\n\"\n", "error": "none", "author": "tom@organisms.be"}, {"index": "161", "colour": "orange", "code": "                            msg += (\"%r (root + dir) is not an existing \"\n", "error": "none", "author": "tom@organisms.be"}, {"index": "162", "colour": "orange", "code": "                                    \"filesystem path.\" % fulldir)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "163", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "164", "colour": "orange", "code": "                    if msg:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "165", "colour": "orange", "code": "                        warnings.warn(\"%s\\nsection: [%s]\\nroot: %r\\ndir: %r\"\n", "error": "none", "author": "tom@organisms.be"}, {"index": "166", "colour": "orange", "code": "                                      % (msg, section, root, dir))\n", "error": "none", "author": "tom@organisms.be"}, {"index": "167", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "168", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "169", "colour": "orange", "code": "    # -------------------------- Compatibility -------------------------- #\n", "error": "none", "author": "tom@organisms.be"}, {"index": "170", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "171", "colour": "orange", "code": "    obsolete = {\n", "error": "none", "author": "tom@organisms.be"}, {"index": "172", "colour": "orange", "code": "        'server.default_content_type': 'tools.response_headers.headers',\n", "error": "none", "author": "tom@organisms.be"}, {"index": "173", "colour": "orange", "code": "        'log_access_file': 'log.access_file',\n", "error": "none", "author": "tom@organisms.be"}, {"index": "174", "colour": "orange", "code": "        'log_config_options': None,\n", "error": "none", "author": "tom@organisms.be"}, {"index": "175", "colour": "orange", "code": "        'log_file': 'log.error_file',\n", "error": "none", "author": "tom@organisms.be"}, {"index": "176", "colour": "orange", "code": "        'log_file_not_found': None,\n", "error": "none", "author": "tom@organisms.be"}, {"index": "177", "colour": "orange", "code": "        'log_request_headers': 'tools.log_headers.on',\n", "error": "none", "author": "tom@organisms.be"}, {"index": "178", "colour": "orange", "code": "        'log_to_screen': 'log.screen',\n", "error": "none", "author": "tom@organisms.be"}, {"index": "179", "colour": "orange", "code": "        'show_tracebacks': 'request.show_tracebacks',\n", "error": "none", "author": "tom@organisms.be"}, {"index": "180", "colour": "orange", "code": "        'throw_errors': 'request.throw_errors',\n", "error": "none", "author": "tom@organisms.be"}, {"index": "181", "colour": "orange", "code": "        'profiler.on': ('cherrypy.tree.mount(profiler.make_app('\n", "error": "none", "author": "tom@organisms.be"}, {"index": "182", "colour": "orange", "code": "                        'cherrypy.Application(Root())))'),\n", "error": "none", "author": "tom@organisms.be"}, {"index": "183", "colour": "orange", "code": "        }\n", "error": "none", "author": "tom@organisms.be"}, {"index": "184", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "185", "colour": "orange", "code": "    deprecated = {}\n", "error": "none", "author": "tom@organisms.be"}, {"index": "186", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "187", "colour": "orange", "code": "    def _compat(self, config):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "188", "colour": "orange", "code": "        \"\"\"Process config and warn on each obsolete or deprecated entry.\"\"\"\n", "error": "none", "author": "tom@organisms.be"}, {"index": "189", "colour": "orange", "code": "        for section, conf in config.items():\n", "error": "none", "author": "tom@organisms.be"}, {"index": "190", "colour": "orange", "code": "            if isinstance(conf, dict):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "191", "colour": "green", "code": "                for k, v in conf.items():\n", "error": "W", "author": "tom@organisms.be"}, {"index": "192", "colour": "orange", "code": "                    if k in self.obsolete:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "193", "colour": "orange", "code": "                        warnings.warn(\"%r is obsolete. Use %r instead.\\n\"\n", "error": "none", "author": "tom@organisms.be"}, {"index": "194", "colour": "orange", "code": "                                      \"section: [%s]\" %\n", "error": "none", "author": "tom@organisms.be"}, {"index": "195", "colour": "orange", "code": "                                      (k, self.obsolete[k], section))\n", "error": "none", "author": "tom@organisms.be"}, {"index": "196", "colour": "orange", "code": "                    elif k in self.deprecated:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "197", "colour": "orange", "code": "                        warnings.warn(\"%r is deprecated. Use %r instead.\\n\"\n", "error": "none", "author": "tom@organisms.be"}, {"index": "198", "colour": "orange", "code": "                                      \"section: [%s]\" %\n", "error": "none", "author": "tom@organisms.be"}, {"index": "199", "colour": "orange", "code": "                                      (k, self.deprecated[k], section))\n", "error": "none", "author": "tom@organisms.be"}, {"index": "200", "colour": "orange", "code": "            else:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "201", "colour": "orange", "code": "                if section in self.obsolete:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "202", "colour": "orange", "code": "                    warnings.warn(\"%r is obsolete. Use %r instead.\"\n", "error": "none", "author": "tom@organisms.be"}, {"index": "203", "colour": "orange", "code": "                                  % (section, self.obsolete[section]))\n", "error": "none", "author": "tom@organisms.be"}, {"index": "204", "colour": "orange", "code": "                elif section in self.deprecated:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "205", "colour": "orange", "code": "                    warnings.warn(\"%r is deprecated. Use %r instead.\"\n", "error": "none", "author": "tom@organisms.be"}, {"index": "206", "colour": "orange", "code": "                                  % (section, self.deprecated[section]))\n", "error": "none", "author": "tom@organisms.be"}, {"index": "207", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "208", "colour": "orange", "code": "    def check_compatibility(self):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "209", "colour": "orange", "code": "        \"\"\"Process config and warn on each obsolete or deprecated entry.\"\"\"\n", "error": "none", "author": "tom@organisms.be"}, {"index": "210", "colour": "orange", "code": "        self._compat(cherrypy.config)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "211", "colour": "green", "code": "        for sn, app in cherrypy.tree.apps.items():\n", "error": "W", "author": "tom@organisms.be"}, {"index": "212", "colour": "orange", "code": "            if not isinstance(app, cherrypy.Application):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "213", "colour": "orange", "code": "                continue\n", "error": "none", "author": "tom@organisms.be"}, {"index": "214", "colour": "orange", "code": "            self._compat(app.config)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "215", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "216", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "217", "colour": "orange", "code": "    # ------------------------ Known Namespaces ------------------------ #\n", "error": "none", "author": "tom@organisms.be"}, {"index": "218", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "219", "colour": "orange", "code": "    extra_config_namespaces = []\n", "error": "none", "author": "tom@organisms.be"}, {"index": "220", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "221", "colour": "orange", "code": "    def _known_ns(self, app):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "222", "colour": "orange", "code": "        ns = [\"wsgi\"]\n", "error": "none", "author": "tom@organisms.be"}, {"index": "223", "colour": "orange", "code": "        ns.extend(copykeys(app.toolboxes))\n", "error": "none", "author": "tom@organisms.be"}, {"index": "224", "colour": "orange", "code": "        ns.extend(copykeys(app.namespaces))\n", "error": "none", "author": "tom@organisms.be"}, {"index": "225", "colour": "orange", "code": "        ns.extend(copykeys(app.request_class.namespaces))\n", "error": "none", "author": "tom@organisms.be"}, {"index": "226", "colour": "orange", "code": "        ns.extend(copykeys(cherrypy.config.namespaces))\n", "error": "none", "author": "tom@organisms.be"}, {"index": "227", "colour": "orange", "code": "        ns += self.extra_config_namespaces\n", "error": "none", "author": "tom@organisms.be"}, {"index": "228", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "229", "colour": "orange", "code": "        for section, conf in app.config.items():\n", "error": "none", "author": "tom@organisms.be"}, {"index": "230", "colour": "orange", "code": "            is_path_section = section.startswith(\"/\")\n", "error": "none", "author": "tom@organisms.be"}, {"index": "231", "colour": "orange", "code": "            if is_path_section and isinstance(conf, dict):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "232", "colour": "green", "code": "                for k, v in conf.items():\n", "error": "W", "author": "tom@organisms.be"}, {"index": "233", "colour": "orange", "code": "                    atoms = k.split(\".\")\n", "error": "none", "author": "tom@organisms.be"}, {"index": "234", "colour": "orange", "code": "                    if len(atoms) > 1:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "235", "colour": "orange", "code": "                        if atoms[0] not in ns:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "236", "colour": "orange", "code": "                            # Spit out a special warning if a known\n", "error": "none", "author": "tom@organisms.be"}, {"index": "237", "colour": "orange", "code": "                            # namespace is preceded by \"cherrypy.\"\n", "error": "none", "author": "tom@organisms.be"}, {"index": "238", "colour": "orange", "code": "                            if (atoms[0] == \"cherrypy\" and atoms[1] in ns):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "239", "colour": "orange", "code": "                                msg = (\"The config entry %r is invalid; \"\n", "error": "none", "author": "tom@organisms.be"}, {"index": "240", "colour": "orange", "code": "                                       \"try %r instead.\\nsection: [%s]\"\n", "error": "none", "author": "tom@organisms.be"}, {"index": "241", "colour": "orange", "code": "                                       % (k, \".\".join(atoms[1:]), section))\n", "error": "none", "author": "tom@organisms.be"}, {"index": "242", "colour": "orange", "code": "                            else:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "243", "colour": "orange", "code": "                                msg = (\"The config entry %r is invalid, because \"\n", "error": "none", "author": "tom@organisms.be"}, {"index": "244", "colour": "orange", "code": "                                       \"the %r config namespace is unknown.\\n\"\n", "error": "none", "author": "tom@organisms.be"}, {"index": "245", "colour": "orange", "code": "                                       \"section: [%s]\" % (k, atoms[0], section))\n", "error": "none", "author": "tom@organisms.be"}, {"index": "246", "colour": "orange", "code": "                            warnings.warn(msg)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "247", "colour": "orange", "code": "                        elif atoms[0] == \"tools\":\n", "error": "none", "author": "tom@organisms.be"}, {"index": "248", "colour": "orange", "code": "                            if atoms[1] not in dir(cherrypy.tools):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "249", "colour": "orange", "code": "                                msg = (\"The config entry %r may be invalid, \"\n", "error": "none", "author": "tom@organisms.be"}, {"index": "250", "colour": "orange", "code": "                                       \"because the %r tool was not found.\\n\"\n", "error": "none", "author": "tom@organisms.be"}, {"index": "251", "colour": "orange", "code": "                                       \"section: [%s]\" % (k, atoms[1], section))\n", "error": "none", "author": "tom@organisms.be"}, {"index": "252", "colour": "orange", "code": "                                warnings.warn(msg)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "253", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "254", "colour": "orange", "code": "    def check_config_namespaces(self):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "255", "colour": "orange", "code": "        \"\"\"Process config and warn on each unknown config namespace.\"\"\"\n", "error": "none", "author": "tom@organisms.be"}, {"index": "256", "colour": "green", "code": "        for sn, app in cherrypy.tree.apps.items():\n", "error": "W", "author": "tom@organisms.be"}, {"index": "257", "colour": "orange", "code": "            if not isinstance(app, cherrypy.Application):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "258", "colour": "orange", "code": "                continue\n", "error": "none", "author": "tom@organisms.be"}, {"index": "259", "colour": "orange", "code": "            self._known_ns(app)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "260", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "261", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "262", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "263", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "264", "colour": "orange", "code": "    # -------------------------- Config Types -------------------------- #\n", "error": "none", "author": "tom@organisms.be"}, {"index": "265", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "266", "colour": "orange", "code": "    known_config_types = {}\n", "error": "none", "author": "tom@organisms.be"}, {"index": "267", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "268", "colour": "orange", "code": "    def _populate_known_types(self):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "269", "colour": "orange", "code": "        b = [x for x in vars(builtins).values()\n", "error": "none", "author": "tom@organisms.be"}, {"index": "270", "colour": "orange", "code": "             if type(x) is type(str)]\n", "error": "none", "author": "tom@organisms.be"}, {"index": "271", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "272", "colour": "orange", "code": "        def traverse(obj, namespace):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "273", "colour": "orange", "code": "            for name in dir(obj):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "274", "colour": "orange", "code": "                # Hack for 3.2's warning about body_params\n", "error": "none", "author": "tom@organisms.be"}, {"index": "275", "colour": "orange", "code": "                if name == 'body_params':\n", "error": "none", "author": "tom@organisms.be"}, {"index": "276", "colour": "orange", "code": "                    continue\n", "error": "none", "author": "tom@organisms.be"}, {"index": "277", "colour": "orange", "code": "                vtype = type(getattr(obj, name, None))\n", "error": "none", "author": "tom@organisms.be"}, {"index": "278", "colour": "orange", "code": "                if vtype in b:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "279", "colour": "orange", "code": "                    self.known_config_types[namespace + \".\" + name] = vtype\n", "error": "none", "author": "tom@organisms.be"}, {"index": "280", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "281", "colour": "orange", "code": "        traverse(cherrypy.request, \"request\")\n", "error": "none", "author": "tom@organisms.be"}, {"index": "282", "colour": "orange", "code": "        traverse(cherrypy.response, \"response\")\n", "error": "none", "author": "tom@organisms.be"}, {"index": "283", "colour": "orange", "code": "        traverse(cherrypy.server, \"server\")\n", "error": "none", "author": "tom@organisms.be"}, {"index": "284", "colour": "orange", "code": "        traverse(cherrypy.engine, \"engine\")\n", "error": "none", "author": "tom@organisms.be"}, {"index": "285", "colour": "orange", "code": "        traverse(cherrypy.log, \"log\")\n", "error": "none", "author": "tom@organisms.be"}, {"index": "286", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "287", "colour": "orange", "code": "    def _known_types(self, config):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "288", "colour": "orange", "code": "        msg = (\"The config entry %r in section %r is of type %r, \"\n", "error": "none", "author": "tom@organisms.be"}, {"index": "289", "colour": "orange", "code": "               \"which does not match the expected type %r.\")\n", "error": "none", "author": "tom@organisms.be"}, {"index": "290", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "291", "colour": "orange", "code": "        for section, conf in config.items():\n", "error": "none", "author": "tom@organisms.be"}, {"index": "292", "colour": "orange", "code": "            if isinstance(conf, dict):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "293", "colour": "orange", "code": "                for k, v in conf.items():\n", "error": "none", "author": "tom@organisms.be"}, {"index": "294", "colour": "orange", "code": "                    if v is not None:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "295", "colour": "orange", "code": "                        expected_type = self.known_config_types.get(k, None)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "296", "colour": "orange", "code": "                        vtype = type(v)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "297", "colour": "orange", "code": "                        if expected_type and vtype != expected_type:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "298", "colour": "orange", "code": "                            warnings.warn(msg % (k, section, vtype.__name__,\n", "error": "none", "author": "tom@organisms.be"}, {"index": "299", "colour": "orange", "code": "                                                 expected_type.__name__))\n", "error": "none", "author": "tom@organisms.be"}, {"index": "300", "colour": "orange", "code": "            else:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "301", "colour": "orange", "code": "                k, v = section, conf\n", "error": "none", "author": "tom@organisms.be"}, {"index": "302", "colour": "orange", "code": "                if v is not None:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "303", "colour": "orange", "code": "                    expected_type = self.known_config_types.get(k, None)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "304", "colour": "orange", "code": "                    vtype = type(v)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "305", "colour": "orange", "code": "                    if expected_type and vtype != expected_type:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "306", "colour": "orange", "code": "                        warnings.warn(msg % (k, section, vtype.__name__,\n", "error": "none", "author": "tom@organisms.be"}, {"index": "307", "colour": "orange", "code": "                                             expected_type.__name__))\n", "error": "none", "author": "tom@organisms.be"}, {"index": "308", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "309", "colour": "orange", "code": "    def check_config_types(self):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "310", "colour": "orange", "code": "        \"\"\"Assert that config values are of the same type as default values.\"\"\"\n", "error": "none", "author": "tom@organisms.be"}, {"index": "311", "colour": "orange", "code": "        self._known_types(cherrypy.config)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "312", "colour": "green", "code": "        for sn, app in cherrypy.tree.apps.items():\n", "error": "W", "author": "tom@organisms.be"}, {"index": "313", "colour": "orange", "code": "            if not isinstance(app, cherrypy.Application):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "314", "colour": "orange", "code": "                continue\n", "error": "none", "author": "tom@organisms.be"}, {"index": "315", "colour": "orange", "code": "            self._known_types(app.config)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "316", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "317", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "318", "colour": "orange", "code": "    # -------------------- Specific config warnings -------------------- #\n", "error": "none", "author": "tom@organisms.be"}, {"index": "319", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "320", "colour": "blue", "code": "    def check_localhost(self):\n", "error": "R", "author": "tom@organisms.be"}, {"index": "321", "colour": "orange", "code": "        \"\"\"Warn if any socket_host is 'localhost'. See #711.\"\"\"\n", "error": "none", "author": "tom@organisms.be"}, {"index": "322", "colour": "orange", "code": "        for k, v in cherrypy.config.items():\n", "error": "none", "author": "tom@organisms.be"}, {"index": "323", "colour": "orange", "code": "            if k == 'server.socket_host' and v == 'localhost':\n", "error": "none", "author": "tom@organisms.be"}, {"index": "324", "colour": "orange", "code": "                warnings.warn(\"The use of 'localhost' as a socket host can \"\n", "error": "none", "author": "tom@organisms.be"}, {"index": "325", "colour": "orange", "code": "                    \"cause problems on newer systems, since 'localhost' can \"\n", "error": "none", "author": "tom@organisms.be"}, {"index": "326", "colour": "orange", "code": "                    \"map to either an IPv4 or an IPv6 address. You should \"\n", "error": "none", "author": "tom@organisms.be"}, {"index": "327", "colour": "orange", "code": "                    \"use '127.0.0.1' or '[::1]' instead.\")\n", "error": "none", "author": "tom@organisms.be"}]]}