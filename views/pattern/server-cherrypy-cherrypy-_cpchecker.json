{"path": "/home/asumal/git/cs410/pattern/pattern/server/cherrypy/cherrypy/_cpchecker.py", "lines": [[{"error": "C", "line": "1", "code": "import os\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "2", "code": "import warnings\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "3", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "4", "code": "import cherrypy\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "5", "code": "from cherrypy._cpcompat import iteritems, copykeys, builtins\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "6", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "7", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "8", "code": "class Checker(object):\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "9", "code": "    \"\"\"A checker for CherryPy sites and their mounted applications.\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "10", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "11", "code": "    When this object is called at engine startup, it executes each\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "12", "code": "    of its own methods whose names start with ``check_``. If you wish\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "13", "code": "    to disable selected checks, simply add a line in your global\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "14", "code": "    config which sets the appropriate method to False::\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "15", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "16", "code": "        [global]\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "17", "code": "        checker.check_skipped_app_config = False\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "18", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "19", "code": "    You may also dynamically add or replace ``check_*`` methods in this way.\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "20", "code": "    \"\"\"\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "21", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "22", "code": "    on = True\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "23", "code": "    \"\"\"If True (the default), run all checks; if False, turn off all checks.\"\"\"\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "24", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "25", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "26", "code": "    def __init__(self):\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "27", "code": "        self._populate_known_types()\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "28", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "29", "code": "    def __call__(self):\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "30", "code": "        \"\"\"Run all check_* methods.\"\"\"\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "31", "code": "        if self.on:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "32", "code": "            oldformatwarning = warnings.formatwarning\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "33", "code": "            warnings.formatwarning = self.formatwarning\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "34", "code": "            try:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "35", "code": "                for name in dir(self):\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "36", "code": "                    if name.startswith(\"check_\"):\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "37", "code": "                        method = getattr(self, name)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "38", "code": "                        if method and hasattr(method, '__call__'):\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "39", "code": "                            method()\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "40", "code": "            finally:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "41", "code": "                warnings.formatwarning = oldformatwarning\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "42", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "R", "line": "43", "code": "    def formatwarning(self, message, category, filename, lineno, line=None):\n", "colour": "green", "author": "tom@organisms.be"}, {"error": "none", "line": "44", "code": "        \"\"\"Function to format a warning.\"\"\"\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "45", "code": "        return \"CherryPy Checker:\\n%s\\n\\n\" % message\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "46", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "47", "code": "    # This value should be set inside _cpconfig.\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "48", "code": "    global_config_contained_paths = False\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "49", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "R", "line": "50", "code": "    def check_app_config_entries_dont_start_with_script_name(self):\n", "colour": "green", "author": "tom@organisms.be"}, {"error": "C", "line": "51", "code": "        \"\"\"Check for Application config with sections that repeat script_name.\"\"\"\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "C", "line": "52", "code": "        for sn, app in cherrypy.tree.apps.items():\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "53", "code": "            if not isinstance(app, cherrypy.Application):\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "54", "code": "                continue\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "55", "code": "            if not app.config:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "56", "code": "                continue\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "57", "code": "            if sn == '':\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "58", "code": "                continue\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "59", "code": "            sn_atoms = sn.strip(\"/\").split(\"/\")\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "60", "code": "            for key in app.config.keys():\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "61", "code": "                key_atoms = key.strip(\"/\").split(\"/\")\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "62", "code": "                if key_atoms[:len(sn_atoms)] == sn_atoms:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "63", "code": "                    warnings.warn(\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "64", "code": "                        \"The application mounted at %r has config \" \\\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "65", "code": "                        \"entries that start with its script name: %r\" % (sn, key))\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "66", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "R", "line": "67", "code": "    def check_site_config_entries_in_app_config(self):\n", "colour": "green", "author": "tom@organisms.be"}, {"error": "none", "line": "68", "code": "        \"\"\"Check for mounted Applications that have site-scoped config.\"\"\"\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "69", "code": "        for sn, app in iteritems(cherrypy.tree.apps):\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "70", "code": "            if not isinstance(app, cherrypy.Application):\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "71", "code": "                continue\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "72", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "73", "code": "            msg = []\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "74", "code": "            for section, entries in iteritems(app.config):\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "75", "code": "                if section.startswith('/'):\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "76", "code": "                    for key, value in iteritems(entries):\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "77", "code": "                        for n in (\"engine.\", \"server.\", \"tree.\", \"checker.\"):\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "78", "code": "                            if key.startswith(n):\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "79", "code": "                                msg.append(\"[%s] %s = %s\" % (section, key, value))\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "80", "code": "            if msg:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "81", "code": "                msg.insert(0,\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "82", "code": "                    \"The application mounted at %r contains the following \"\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "83", "code": "                    \"config entries, which are only allowed in site-wide \"\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "84", "code": "                    \"config. Move them to a [global] section and pass them \"\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "85", "code": "                    \"to cherrypy.config.update() instead of tree.mount().\" % sn)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "86", "code": "                warnings.warn(os.linesep.join(msg))\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "87", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "88", "code": "    def check_skipped_app_config(self):\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "89", "code": "        \"\"\"Check for mounted Applications that have no config.\"\"\"\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "90", "code": "        for sn, app in cherrypy.tree.apps.items():\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "91", "code": "            if not isinstance(app, cherrypy.Application):\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "92", "code": "                continue\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "93", "code": "            if not app.config:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "94", "code": "                msg = \"The Application mounted at %r has an empty config.\" % sn\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "95", "code": "                if self.global_config_contained_paths:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "96", "code": "                    msg += (\" It looks like the config you passed to \"\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "97", "code": "                            \"cherrypy.config.update() contains application-\"\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "98", "code": "                            \"specific sections. You must explicitly pass \"\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "99", "code": "                            \"application config via \"\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "100", "code": "                            \"cherrypy.tree.mount(..., config=app_config)\")\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "101", "code": "                warnings.warn(msg)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "102", "code": "                return\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "103", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "R", "line": "104", "code": "    def check_app_config_brackets(self):\n", "colour": "green", "author": "tom@organisms.be"}, {"error": "C", "line": "105", "code": "        \"\"\"Check for Application config with extraneous brackets in section names.\"\"\"\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "C", "line": "106", "code": "        for sn, app in cherrypy.tree.apps.items():\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "107", "code": "            if not isinstance(app, cherrypy.Application):\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "108", "code": "                continue\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "109", "code": "            if not app.config:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "110", "code": "                continue\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "111", "code": "            for key in app.config.keys():\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "112", "code": "                if key.startswith(\"[\") or key.endswith(\"]\"):\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "113", "code": "                    warnings.warn(\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "114", "code": "                        \"The application mounted at %r has config \" \\\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "115", "code": "                        \"section names with extraneous brackets: %r. \"\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "116", "code": "                        \"Config *files* need brackets; config *dicts* \"\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "117", "code": "                        \"(e.g. passed to tree.mount) do not.\" % (sn, key))\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "118", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "R", "line": "119", "code": "    def check_static_paths(self):\n", "colour": "green", "author": "tom@organisms.be"}, {"error": "none", "line": "120", "code": "        \"\"\"Check Application config for incorrect static paths.\"\"\"\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "121", "code": "        # Use the dummy Request object in the main thread.\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "122", "code": "        request = cherrypy.request\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "W", "line": "123", "code": "        for sn, app in cherrypy.tree.apps.items():\n", "colour": "purple", "author": "tom@organisms.be"}, {"error": "none", "line": "124", "code": "            if not isinstance(app, cherrypy.Application):\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "125", "code": "                continue\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "126", "code": "            request.app = app\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "127", "code": "            for section in app.config:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "128", "code": "                # get_resource will populate request.config\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "129", "code": "                request.get_resource(section + \"/dummy.html\")\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "130", "code": "                conf = request.config.get\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "131", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "132", "code": "                if conf(\"tools.staticdir.on\", False):\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "133", "code": "                    msg = \"\"\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "134", "code": "                    root = conf(\"tools.staticdir.root\")\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "W", "line": "135", "code": "                    dir = conf(\"tools.staticdir.dir\")\n", "colour": "purple", "author": "tom@organisms.be"}, {"error": "none", "line": "136", "code": "                    if dir is None:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "137", "code": "                        msg = \"tools.staticdir.dir is not set.\"\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "138", "code": "                    else:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "139", "code": "                        fulldir = \"\"\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "140", "code": "                        if os.path.isabs(dir):\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "141", "code": "                            fulldir = dir\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "142", "code": "                            if root:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "143", "code": "                                msg = (\"dir is an absolute path, even \"\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "144", "code": "                                       \"though a root is provided.\")\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "145", "code": "                                testdir = os.path.join(root, dir[1:])\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "146", "code": "                                if os.path.exists(testdir):\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "147", "code": "                                    msg += (\"\\nIf you meant to serve the \"\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "148", "code": "                                            \"filesystem folder at %r, remove \"\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "149", "code": "                                            \"the leading slash from dir.\" % testdir)\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "150", "code": "                        else:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "151", "code": "                            if not root:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "152", "code": "                                msg = \"dir is a relative path and no root provided.\"\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "153", "code": "                            else:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "154", "code": "                                fulldir = os.path.join(root, dir)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "155", "code": "                                if not os.path.isabs(fulldir):\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "156", "code": "                                    msg = \"%r is not an absolute path.\" % fulldir\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "157", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "158", "code": "                        if fulldir and not os.path.exists(fulldir):\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "159", "code": "                            if msg:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "160", "code": "                                msg += \"\\n\"\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "161", "code": "                            msg += (\"%r (root + dir) is not an existing \"\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "162", "code": "                                    \"filesystem path.\" % fulldir)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "163", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "164", "code": "                    if msg:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "165", "code": "                        warnings.warn(\"%s\\nsection: [%s]\\nroot: %r\\ndir: %r\"\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "166", "code": "                                      % (msg, section, root, dir))\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "167", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "168", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "169", "code": "    # -------------------------- Compatibility -------------------------- #\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "170", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "171", "code": "    obsolete = {\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "172", "code": "        'server.default_content_type': 'tools.response_headers.headers',\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "173", "code": "        'log_access_file': 'log.access_file',\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "174", "code": "        'log_config_options': None,\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "175", "code": "        'log_file': 'log.error_file',\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "176", "code": "        'log_file_not_found': None,\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "177", "code": "        'log_request_headers': 'tools.log_headers.on',\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "178", "code": "        'log_to_screen': 'log.screen',\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "179", "code": "        'show_tracebacks': 'request.show_tracebacks',\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "180", "code": "        'throw_errors': 'request.throw_errors',\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "181", "code": "        'profiler.on': ('cherrypy.tree.mount(profiler.make_app('\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "182", "code": "                        'cherrypy.Application(Root())))'),\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "183", "code": "        }\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "184", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "185", "code": "    deprecated = {}\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "186", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "187", "code": "    def _compat(self, config):\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "188", "code": "        \"\"\"Process config and warn on each obsolete or deprecated entry.\"\"\"\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "189", "code": "        for section, conf in config.items():\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "190", "code": "            if isinstance(conf, dict):\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "W", "line": "191", "code": "                for k, v in conf.items():\n", "colour": "purple", "author": "tom@organisms.be"}, {"error": "none", "line": "192", "code": "                    if k in self.obsolete:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "193", "code": "                        warnings.warn(\"%r is obsolete. Use %r instead.\\n\"\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "194", "code": "                                      \"section: [%s]\" %\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "195", "code": "                                      (k, self.obsolete[k], section))\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "196", "code": "                    elif k in self.deprecated:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "197", "code": "                        warnings.warn(\"%r is deprecated. Use %r instead.\\n\"\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "198", "code": "                                      \"section: [%s]\" %\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "199", "code": "                                      (k, self.deprecated[k], section))\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "200", "code": "            else:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "201", "code": "                if section in self.obsolete:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "202", "code": "                    warnings.warn(\"%r is obsolete. Use %r instead.\"\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "203", "code": "                                  % (section, self.obsolete[section]))\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "204", "code": "                elif section in self.deprecated:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "205", "code": "                    warnings.warn(\"%r is deprecated. Use %r instead.\"\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "206", "code": "                                  % (section, self.deprecated[section]))\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "207", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "208", "code": "    def check_compatibility(self):\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "209", "code": "        \"\"\"Process config and warn on each obsolete or deprecated entry.\"\"\"\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "210", "code": "        self._compat(cherrypy.config)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "W", "line": "211", "code": "        for sn, app in cherrypy.tree.apps.items():\n", "colour": "purple", "author": "tom@organisms.be"}, {"error": "none", "line": "212", "code": "            if not isinstance(app, cherrypy.Application):\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "213", "code": "                continue\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "214", "code": "            self._compat(app.config)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "215", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "216", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "217", "code": "    # ------------------------ Known Namespaces ------------------------ #\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "218", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "219", "code": "    extra_config_namespaces = []\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "220", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "221", "code": "    def _known_ns(self, app):\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "C", "line": "222", "code": "        ns = [\"wsgi\"]\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "223", "code": "        ns.extend(copykeys(app.toolboxes))\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "224", "code": "        ns.extend(copykeys(app.namespaces))\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "225", "code": "        ns.extend(copykeys(app.request_class.namespaces))\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "226", "code": "        ns.extend(copykeys(cherrypy.config.namespaces))\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "227", "code": "        ns += self.extra_config_namespaces\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "228", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "229", "code": "        for section, conf in app.config.items():\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "230", "code": "            is_path_section = section.startswith(\"/\")\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "231", "code": "            if is_path_section and isinstance(conf, dict):\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "W", "line": "232", "code": "                for k, v in conf.items():\n", "colour": "purple", "author": "tom@organisms.be"}, {"error": "none", "line": "233", "code": "                    atoms = k.split(\".\")\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "234", "code": "                    if len(atoms) > 1:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "235", "code": "                        if atoms[0] not in ns:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "236", "code": "                            # Spit out a special warning if a known\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "237", "code": "                            # namespace is preceded by \"cherrypy.\"\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "238", "code": "                            if (atoms[0] == \"cherrypy\" and atoms[1] in ns):\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "239", "code": "                                msg = (\"The config entry %r is invalid; \"\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "240", "code": "                                       \"try %r instead.\\nsection: [%s]\"\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "241", "code": "                                       % (k, \".\".join(atoms[1:]), section))\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "242", "code": "                            else:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "243", "code": "                                msg = (\"The config entry %r is invalid, because \"\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "244", "code": "                                       \"the %r config namespace is unknown.\\n\"\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "245", "code": "                                       \"section: [%s]\" % (k, atoms[0], section))\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "246", "code": "                            warnings.warn(msg)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "247", "code": "                        elif atoms[0] == \"tools\":\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "248", "code": "                            if atoms[1] not in dir(cherrypy.tools):\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "249", "code": "                                msg = (\"The config entry %r may be invalid, \"\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "250", "code": "                                       \"because the %r tool was not found.\\n\"\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "251", "code": "                                       \"section: [%s]\" % (k, atoms[1], section))\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "252", "code": "                                warnings.warn(msg)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "253", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "254", "code": "    def check_config_namespaces(self):\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "255", "code": "        \"\"\"Process config and warn on each unknown config namespace.\"\"\"\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "W", "line": "256", "code": "        for sn, app in cherrypy.tree.apps.items():\n", "colour": "purple", "author": "tom@organisms.be"}, {"error": "none", "line": "257", "code": "            if not isinstance(app, cherrypy.Application):\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "258", "code": "                continue\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "259", "code": "            self._known_ns(app)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "260", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "261", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "262", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "263", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "264", "code": "    # -------------------------- Config Types -------------------------- #\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "265", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "266", "code": "    known_config_types = {}\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "267", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "268", "code": "    def _populate_known_types(self):\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "C", "line": "269", "code": "        b = [x for x in vars(builtins).values()\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "270", "code": "             if type(x) is type(str)]\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "271", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "272", "code": "        def traverse(obj, namespace):\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "273", "code": "            for name in dir(obj):\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "274", "code": "                # Hack for 3.2's warning about body_params\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "275", "code": "                if name == 'body_params':\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "276", "code": "                    continue\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "277", "code": "                vtype = type(getattr(obj, name, None))\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "278", "code": "                if vtype in b:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "279", "code": "                    self.known_config_types[namespace + \".\" + name] = vtype\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "280", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "281", "code": "        traverse(cherrypy.request, \"request\")\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "282", "code": "        traverse(cherrypy.response, \"response\")\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "283", "code": "        traverse(cherrypy.server, \"server\")\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "284", "code": "        traverse(cherrypy.engine, \"engine\")\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "285", "code": "        traverse(cherrypy.log, \"log\")\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "286", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "287", "code": "    def _known_types(self, config):\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "288", "code": "        msg = (\"The config entry %r in section %r is of type %r, \"\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "289", "code": "               \"which does not match the expected type %r.\")\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "290", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "291", "code": "        for section, conf in config.items():\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "292", "code": "            if isinstance(conf, dict):\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "293", "code": "                for k, v in conf.items():\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "294", "code": "                    if v is not None:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "295", "code": "                        expected_type = self.known_config_types.get(k, None)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "296", "code": "                        vtype = type(v)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "297", "code": "                        if expected_type and vtype != expected_type:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "298", "code": "                            warnings.warn(msg % (k, section, vtype.__name__,\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "299", "code": "                                                 expected_type.__name__))\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "300", "code": "            else:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "301", "code": "                k, v = section, conf\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "302", "code": "                if v is not None:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "303", "code": "                    expected_type = self.known_config_types.get(k, None)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "304", "code": "                    vtype = type(v)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "305", "code": "                    if expected_type and vtype != expected_type:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "306", "code": "                        warnings.warn(msg % (k, section, vtype.__name__,\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "307", "code": "                                             expected_type.__name__))\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "308", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "309", "code": "    def check_config_types(self):\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "310", "code": "        \"\"\"Assert that config values are of the same type as default values.\"\"\"\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "311", "code": "        self._known_types(cherrypy.config)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "W", "line": "312", "code": "        for sn, app in cherrypy.tree.apps.items():\n", "colour": "purple", "author": "tom@organisms.be"}, {"error": "none", "line": "313", "code": "            if not isinstance(app, cherrypy.Application):\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "314", "code": "                continue\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "315", "code": "            self._known_types(app.config)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "316", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "317", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "318", "code": "    # -------------------- Specific config warnings -------------------- #\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "319", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "R", "line": "320", "code": "    def check_localhost(self):\n", "colour": "green", "author": "tom@organisms.be"}, {"error": "none", "line": "321", "code": "        \"\"\"Warn if any socket_host is 'localhost'. See #711.\"\"\"\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "322", "code": "        for k, v in cherrypy.config.items():\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "323", "code": "            if k == 'server.socket_host' and v == 'localhost':\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "324", "code": "                warnings.warn(\"The use of 'localhost' as a socket host can \"\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "325", "code": "                    \"cause problems on newer systems, since 'localhost' can \"\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "326", "code": "                    \"map to either an IPv4 or an IPv6 address. You should \"\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "327", "code": "                    \"use '127.0.0.1' or '[::1]' instead.\")\n", "colour": "black", "author": "tom@organisms.be"}]]}