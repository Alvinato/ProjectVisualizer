{"path": "/home/asumal/git/cs410/pattern/pattern/server/cherrypy/cherrypy/lib/auth_digest.py", "lines": [[{"index": "1", "colour": "orange", "code": "# This file is part of CherryPy <http://www.cherrypy.org/>\n", "error": "none", "author": "tom@organisms.be"}, {"index": "2", "colour": "orange", "code": "# -*- coding: utf-8 -*-\n", "error": "none", "author": "tom@organisms.be"}, {"index": "3", "colour": "orange", "code": "# vim:ts=4:sw=4:expandtab:fileencoding=utf-8\n", "error": "none", "author": "tom@organisms.be"}, {"index": "4", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "5", "colour": "green", "code": "__doc__ = \"\"\"An implementation of the server-side of HTTP Digest Access\n", "error": "W", "author": "tom@organisms.be"}, {"index": "6", "colour": "orange", "code": "Authentication, which is described in :rfc:`2617`.\n", "error": "none", "author": "tom@organisms.be"}, {"index": "7", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "8", "colour": "orange", "code": "Example usage, using the built-in get_ha1_dict_plain function which uses a dict\n", "error": "none", "author": "tom@organisms.be"}, {"index": "9", "colour": "orange", "code": "of plaintext passwords as the credentials store::\n", "error": "none", "author": "tom@organisms.be"}, {"index": "10", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "11", "colour": "orange", "code": "    userpassdict = {'alice' : '4x5istwelve'}\n", "error": "none", "author": "tom@organisms.be"}, {"index": "12", "colour": "orange", "code": "    get_ha1 = cherrypy.lib.auth_digest.get_ha1_dict_plain(userpassdict)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "13", "colour": "orange", "code": "    digest_auth = {'tools.auth_digest.on': True,\n", "error": "none", "author": "tom@organisms.be"}, {"index": "14", "colour": "orange", "code": "                   'tools.auth_digest.realm': 'wonderland',\n", "error": "none", "author": "tom@organisms.be"}, {"index": "15", "colour": "orange", "code": "                   'tools.auth_digest.get_ha1': get_ha1,\n", "error": "none", "author": "tom@organisms.be"}, {"index": "16", "colour": "orange", "code": "                   'tools.auth_digest.key': 'a565c27146791cfb',\n", "error": "none", "author": "tom@organisms.be"}, {"index": "17", "colour": "orange", "code": "    }\n", "error": "none", "author": "tom@organisms.be"}, {"index": "18", "colour": "orange", "code": "    app_config = { '/' : digest_auth }\n", "error": "none", "author": "tom@organisms.be"}, {"index": "19", "colour": "orange", "code": "\"\"\"\n", "error": "none", "author": "tom@organisms.be"}, {"index": "20", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "21", "colour": "orange", "code": "__author__ = 'visteya'\n", "error": "none", "author": "tom@organisms.be"}, {"index": "22", "colour": "orange", "code": "__date__ = 'April 2009'\n", "error": "none", "author": "tom@organisms.be"}, {"index": "23", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "24", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "25", "colour": "orange", "code": "import time\n", "error": "none", "author": "tom@organisms.be"}, {"index": "26", "colour": "orange", "code": "from cherrypy._cpcompat import parse_http_list, parse_keqv_list\n", "error": "none", "author": "tom@organisms.be"}, {"index": "27", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "28", "colour": "orange", "code": "import cherrypy\n", "error": "none", "author": "tom@organisms.be"}, {"index": "29", "colour": "orange", "code": "from cherrypy._cpcompat import md5, ntob\n", "error": "none", "author": "tom@organisms.be"}, {"index": "30", "colour": "orange", "code": "md5_hex = lambda s: md5(ntob(s)).hexdigest()\n", "error": "none", "author": "tom@organisms.be"}, {"index": "31", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "32", "colour": "orange", "code": "qop_auth = 'auth'\n", "error": "none", "author": "tom@organisms.be"}, {"index": "33", "colour": "orange", "code": "qop_auth_int = 'auth-int'\n", "error": "none", "author": "tom@organisms.be"}, {"index": "34", "colour": "orange", "code": "valid_qops = (qop_auth, qop_auth_int)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "35", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "36", "colour": "orange", "code": "valid_algorithms = ('MD5', 'MD5-sess')\n", "error": "none", "author": "tom@organisms.be"}, {"index": "37", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "38", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "39", "colour": "orange", "code": "def TRACE(msg):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "40", "colour": "orange", "code": "    cherrypy.log(msg, context='TOOLS.AUTH_DIGEST')\n", "error": "none", "author": "tom@organisms.be"}, {"index": "41", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "42", "colour": "orange", "code": "# Three helper functions for users of the tool, providing three variants\n", "error": "none", "author": "tom@organisms.be"}, {"index": "43", "colour": "orange", "code": "# of get_ha1() functions for three different kinds of credential stores.\n", "error": "none", "author": "tom@organisms.be"}, {"index": "44", "colour": "orange", "code": "def get_ha1_dict_plain(user_password_dict):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "45", "colour": "orange", "code": "    \"\"\"Returns a get_ha1 function which obtains a plaintext password from a\n", "error": "none", "author": "tom@organisms.be"}, {"index": "46", "colour": "orange", "code": "    dictionary of the form: {username : password}.\n", "error": "none", "author": "tom@organisms.be"}, {"index": "47", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "48", "colour": "orange", "code": "    If you want a simple dictionary-based authentication scheme, with plaintext\n", "error": "none", "author": "tom@organisms.be"}, {"index": "49", "colour": "orange", "code": "    passwords, use get_ha1_dict_plain(my_userpass_dict) as the value for the\n", "error": "none", "author": "tom@organisms.be"}, {"index": "50", "colour": "orange", "code": "    get_ha1 argument to digest_auth().\n", "error": "none", "author": "tom@organisms.be"}, {"index": "51", "colour": "orange", "code": "    \"\"\"\n", "error": "none", "author": "tom@organisms.be"}, {"index": "52", "colour": "orange", "code": "    def get_ha1(realm, username):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "53", "colour": "orange", "code": "        password = user_password_dict.get(username)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "54", "colour": "orange", "code": "        if password:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "55", "colour": "orange", "code": "            return md5_hex('%s:%s:%s' % (username, realm, password))\n", "error": "none", "author": "tom@organisms.be"}, {"index": "56", "colour": "orange", "code": "        return None\n", "error": "none", "author": "tom@organisms.be"}, {"index": "57", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "58", "colour": "orange", "code": "    return get_ha1\n", "error": "none", "author": "tom@organisms.be"}, {"index": "59", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "60", "colour": "orange", "code": "def get_ha1_dict(user_ha1_dict):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "61", "colour": "orange", "code": "    \"\"\"Returns a get_ha1 function which obtains a HA1 password hash from a\n", "error": "none", "author": "tom@organisms.be"}, {"index": "62", "colour": "orange", "code": "    dictionary of the form: {username : HA1}.\n", "error": "none", "author": "tom@organisms.be"}, {"index": "63", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "64", "colour": "orange", "code": "    If you want a dictionary-based authentication scheme, but with\n", "error": "none", "author": "tom@organisms.be"}, {"index": "65", "colour": "orange", "code": "    pre-computed HA1 hashes instead of plain-text passwords, use\n", "error": "none", "author": "tom@organisms.be"}, {"index": "66", "colour": "orange", "code": "    get_ha1_dict(my_userha1_dict) as the value for the get_ha1\n", "error": "none", "author": "tom@organisms.be"}, {"index": "67", "colour": "orange", "code": "    argument to digest_auth().\n", "error": "none", "author": "tom@organisms.be"}, {"index": "68", "colour": "orange", "code": "    \"\"\"\n", "error": "none", "author": "tom@organisms.be"}, {"index": "69", "colour": "green", "code": "    def get_ha1(realm, username):\n", "error": "W", "author": "tom@organisms.be"}, {"index": "70", "colour": "red", "code": "        return user_ha1_dict.get(user)\n", "error": "E", "author": "tom@organisms.be"}, {"index": "71", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "72", "colour": "orange", "code": "    return get_ha1\n", "error": "none", "author": "tom@organisms.be"}, {"index": "73", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "74", "colour": "orange", "code": "def get_ha1_file_htdigest(filename):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "75", "colour": "orange", "code": "    \"\"\"Returns a get_ha1 function which obtains a HA1 password hash from a\n", "error": "none", "author": "tom@organisms.be"}, {"index": "76", "colour": "orange", "code": "    flat file with lines of the same format as that produced by the Apache\n", "error": "none", "author": "tom@organisms.be"}, {"index": "77", "colour": "orange", "code": "    htdigest utility. For example, for realm 'wonderland', username 'alice',\n", "error": "none", "author": "tom@organisms.be"}, {"index": "78", "colour": "orange", "code": "    and password '4x5istwelve', the htdigest line would be::\n", "error": "none", "author": "tom@organisms.be"}, {"index": "79", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "80", "colour": "orange", "code": "        alice:wonderland:3238cdfe91a8b2ed8e39646921a02d4c\n", "error": "none", "author": "tom@organisms.be"}, {"index": "81", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "82", "colour": "orange", "code": "    If you want to use an Apache htdigest file as the credentials store,\n", "error": "none", "author": "tom@organisms.be"}, {"index": "83", "colour": "orange", "code": "    then use get_ha1_file_htdigest(my_htdigest_file) as the value for the\n", "error": "none", "author": "tom@organisms.be"}, {"index": "84", "colour": "orange", "code": "    get_ha1 argument to digest_auth().  It is recommended that the filename\n", "error": "none", "author": "tom@organisms.be"}, {"index": "85", "colour": "orange", "code": "    argument be an absolute path, to avoid problems.\n", "error": "none", "author": "tom@organisms.be"}, {"index": "86", "colour": "orange", "code": "    \"\"\"\n", "error": "none", "author": "tom@organisms.be"}, {"index": "87", "colour": "orange", "code": "    def get_ha1(realm, username):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "88", "colour": "orange", "code": "        result = None\n", "error": "none", "author": "tom@organisms.be"}, {"index": "89", "colour": "orange", "code": "        f = open(filename, 'r')\n", "error": "none", "author": "tom@organisms.be"}, {"index": "90", "colour": "orange", "code": "        for line in f:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "91", "colour": "orange", "code": "            u, r, ha1 = line.rstrip().split(':')\n", "error": "none", "author": "tom@organisms.be"}, {"index": "92", "colour": "orange", "code": "            if u == username and r == realm:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "93", "colour": "orange", "code": "                result = ha1\n", "error": "none", "author": "tom@organisms.be"}, {"index": "94", "colour": "orange", "code": "                break\n", "error": "none", "author": "tom@organisms.be"}, {"index": "95", "colour": "orange", "code": "        f.close()\n", "error": "none", "author": "tom@organisms.be"}, {"index": "96", "colour": "orange", "code": "        return result\n", "error": "none", "author": "tom@organisms.be"}, {"index": "97", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "98", "colour": "orange", "code": "    return get_ha1\n", "error": "none", "author": "tom@organisms.be"}, {"index": "99", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "100", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "101", "colour": "orange", "code": "def synthesize_nonce(s, key, timestamp=None):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "102", "colour": "orange", "code": "    \"\"\"Synthesize a nonce value which resists spoofing and can be checked for staleness.\n", "error": "none", "author": "tom@organisms.be"}, {"index": "103", "colour": "orange", "code": "    Returns a string suitable as the value for 'nonce' in the www-authenticate header.\n", "error": "none", "author": "tom@organisms.be"}, {"index": "104", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "105", "colour": "orange", "code": "    s\n", "error": "none", "author": "tom@organisms.be"}, {"index": "106", "colour": "orange", "code": "        A string related to the resource, such as the hostname of the server.\n", "error": "none", "author": "tom@organisms.be"}, {"index": "107", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "108", "colour": "orange", "code": "    key\n", "error": "none", "author": "tom@organisms.be"}, {"index": "109", "colour": "orange", "code": "        A secret string known only to the server.\n", "error": "none", "author": "tom@organisms.be"}, {"index": "110", "colour": "orange", "code": "    \n", "error": "none", "author": "tom@organisms.be"}, {"index": "111", "colour": "orange", "code": "    timestamp\n", "error": "none", "author": "tom@organisms.be"}, {"index": "112", "colour": "orange", "code": "        An integer seconds-since-the-epoch timestamp\n", "error": "none", "author": "tom@organisms.be"}, {"index": "113", "colour": "orange", "code": "    \n", "error": "none", "author": "tom@organisms.be"}, {"index": "114", "colour": "orange", "code": "    \"\"\"\n", "error": "none", "author": "tom@organisms.be"}, {"index": "115", "colour": "orange", "code": "    if timestamp is None:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "116", "colour": "orange", "code": "        timestamp = int(time.time())\n", "error": "none", "author": "tom@organisms.be"}, {"index": "117", "colour": "orange", "code": "    h = md5_hex('%s:%s:%s' % (timestamp, s, key))\n", "error": "none", "author": "tom@organisms.be"}, {"index": "118", "colour": "orange", "code": "    nonce = '%s:%s' % (timestamp, h)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "119", "colour": "orange", "code": "    return nonce\n", "error": "none", "author": "tom@organisms.be"}, {"index": "120", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "121", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "122", "colour": "orange", "code": "def H(s):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "123", "colour": "orange", "code": "    \"\"\"The hash function H\"\"\"\n", "error": "none", "author": "tom@organisms.be"}, {"index": "124", "colour": "orange", "code": "    return md5_hex(s)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "125", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "126", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "127", "colour": "blue", "code": "class HttpDigestAuthorization (object):\n", "error": "R", "author": "tom@organisms.be"}, {"index": "128", "colour": "orange", "code": "    \"\"\"Class to parse a Digest Authorization header and perform re-calculation\n", "error": "none", "author": "tom@organisms.be"}, {"index": "129", "colour": "orange", "code": "    of the digest.\n", "error": "none", "author": "tom@organisms.be"}, {"index": "130", "colour": "orange", "code": "    \"\"\"\n", "error": "none", "author": "tom@organisms.be"}, {"index": "131", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "132", "colour": "blue", "code": "    def errmsg(self, s):\n", "error": "R", "author": "tom@organisms.be"}, {"index": "133", "colour": "orange", "code": "        return 'Digest Authorization header: %s' % s\n", "error": "none", "author": "tom@organisms.be"}, {"index": "134", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "135", "colour": "orange", "code": "    def __init__(self, auth_header, http_method, debug=False):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "136", "colour": "orange", "code": "        self.http_method = http_method\n", "error": "none", "author": "tom@organisms.be"}, {"index": "137", "colour": "orange", "code": "        self.debug = debug\n", "error": "none", "author": "tom@organisms.be"}, {"index": "138", "colour": "orange", "code": "        scheme, params  = auth_header.split(\" \", 1)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "139", "colour": "orange", "code": "        self.scheme = scheme.lower()\n", "error": "none", "author": "tom@organisms.be"}, {"index": "140", "colour": "orange", "code": "        if self.scheme != 'digest':\n", "error": "none", "author": "tom@organisms.be"}, {"index": "141", "colour": "orange", "code": "            raise ValueError('Authorization scheme is not \"Digest\"')\n", "error": "none", "author": "tom@organisms.be"}, {"index": "142", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "143", "colour": "orange", "code": "        self.auth_header = auth_header\n", "error": "none", "author": "tom@organisms.be"}, {"index": "144", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "145", "colour": "orange", "code": "        # make a dict of the params\n", "error": "none", "author": "tom@organisms.be"}, {"index": "146", "colour": "orange", "code": "        items = parse_http_list(params)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "147", "colour": "orange", "code": "        paramsd = parse_keqv_list(items)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "148", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "149", "colour": "orange", "code": "        self.realm = paramsd.get('realm')\n", "error": "none", "author": "tom@organisms.be"}, {"index": "150", "colour": "orange", "code": "        self.username = paramsd.get('username')\n", "error": "none", "author": "tom@organisms.be"}, {"index": "151", "colour": "orange", "code": "        self.nonce = paramsd.get('nonce')\n", "error": "none", "author": "tom@organisms.be"}, {"index": "152", "colour": "orange", "code": "        self.uri = paramsd.get('uri')\n", "error": "none", "author": "tom@organisms.be"}, {"index": "153", "colour": "orange", "code": "        self.method = paramsd.get('method')\n", "error": "none", "author": "tom@organisms.be"}, {"index": "154", "colour": "orange", "code": "        self.response = paramsd.get('response') # the response digest\n", "error": "none", "author": "tom@organisms.be"}, {"index": "155", "colour": "orange", "code": "        self.algorithm = paramsd.get('algorithm', 'MD5')\n", "error": "none", "author": "tom@organisms.be"}, {"index": "156", "colour": "orange", "code": "        self.cnonce = paramsd.get('cnonce')\n", "error": "none", "author": "tom@organisms.be"}, {"index": "157", "colour": "orange", "code": "        self.opaque = paramsd.get('opaque')\n", "error": "none", "author": "tom@organisms.be"}, {"index": "158", "colour": "orange", "code": "        self.qop = paramsd.get('qop') # qop\n", "error": "none", "author": "tom@organisms.be"}, {"index": "159", "colour": "orange", "code": "        self.nc = paramsd.get('nc') # nonce count\n", "error": "none", "author": "tom@organisms.be"}, {"index": "160", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "161", "colour": "orange", "code": "        # perform some correctness checks\n", "error": "none", "author": "tom@organisms.be"}, {"index": "162", "colour": "orange", "code": "        if self.algorithm not in valid_algorithms:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "163", "colour": "orange", "code": "            raise ValueError(self.errmsg(\"Unsupported value for algorithm: '%s'\" % self.algorithm))\n", "error": "none", "author": "tom@organisms.be"}, {"index": "164", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "165", "colour": "orange", "code": "        has_reqd = self.username and \\\n", "error": "none", "author": "tom@organisms.be"}, {"index": "166", "colour": "orange", "code": "                   self.realm and \\\n", "error": "none", "author": "tom@organisms.be"}, {"index": "167", "colour": "orange", "code": "                   self.nonce and \\\n", "error": "none", "author": "tom@organisms.be"}, {"index": "168", "colour": "orange", "code": "                   self.uri and \\\n", "error": "none", "author": "tom@organisms.be"}, {"index": "169", "colour": "orange", "code": "                   self.response\n", "error": "none", "author": "tom@organisms.be"}, {"index": "170", "colour": "orange", "code": "        if not has_reqd:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "171", "colour": "orange", "code": "            raise ValueError(self.errmsg(\"Not all required parameters are present.\"))\n", "error": "none", "author": "tom@organisms.be"}, {"index": "172", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "173", "colour": "orange", "code": "        if self.qop:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "174", "colour": "orange", "code": "            if self.qop not in valid_qops:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "175", "colour": "orange", "code": "                raise ValueError(self.errmsg(\"Unsupported value for qop: '%s'\" % self.qop))\n", "error": "none", "author": "tom@organisms.be"}, {"index": "176", "colour": "orange", "code": "            if not (self.cnonce and self.nc):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "177", "colour": "orange", "code": "                raise ValueError(self.errmsg(\"If qop is sent then cnonce and nc MUST be present\"))\n", "error": "none", "author": "tom@organisms.be"}, {"index": "178", "colour": "orange", "code": "        else:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "179", "colour": "orange", "code": "            if self.cnonce or self.nc:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "180", "colour": "orange", "code": "                raise ValueError(self.errmsg(\"If qop is not sent, neither cnonce nor nc can be present\"))\n", "error": "none", "author": "tom@organisms.be"}, {"index": "181", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "182", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "183", "colour": "orange", "code": "    def __str__(self):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "184", "colour": "orange", "code": "        return 'authorization : %s' % self.auth_header\n", "error": "none", "author": "tom@organisms.be"}, {"index": "185", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "186", "colour": "orange", "code": "    def validate_nonce(self, s, key):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "187", "colour": "orange", "code": "        \"\"\"Validate the nonce.\n", "error": "none", "author": "tom@organisms.be"}, {"index": "188", "colour": "orange", "code": "        Returns True if nonce was generated by synthesize_nonce() and the timestamp\n", "error": "none", "author": "tom@organisms.be"}, {"index": "189", "colour": "orange", "code": "        is not spoofed, else returns False.\n", "error": "none", "author": "tom@organisms.be"}, {"index": "190", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "191", "colour": "orange", "code": "        s\n", "error": "none", "author": "tom@organisms.be"}, {"index": "192", "colour": "orange", "code": "            A string related to the resource, such as the hostname of the server.\n", "error": "none", "author": "tom@organisms.be"}, {"index": "193", "colour": "orange", "code": "            \n", "error": "none", "author": "tom@organisms.be"}, {"index": "194", "colour": "orange", "code": "        key\n", "error": "none", "author": "tom@organisms.be"}, {"index": "195", "colour": "orange", "code": "            A secret string known only to the server.\n", "error": "none", "author": "tom@organisms.be"}, {"index": "196", "colour": "orange", "code": "        \n", "error": "none", "author": "tom@organisms.be"}, {"index": "197", "colour": "orange", "code": "        Both s and key must be the same values which were used to synthesize the nonce\n", "error": "none", "author": "tom@organisms.be"}, {"index": "198", "colour": "orange", "code": "        we are trying to validate.\n", "error": "none", "author": "tom@organisms.be"}, {"index": "199", "colour": "orange", "code": "        \"\"\"\n", "error": "none", "author": "tom@organisms.be"}, {"index": "200", "colour": "orange", "code": "        try:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "201", "colour": "orange", "code": "            timestamp, hashpart = self.nonce.split(':', 1)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "202", "colour": "green", "code": "            s_timestamp, s_hashpart = synthesize_nonce(s, key, timestamp).split(':', 1)\n", "error": "W", "author": "tom@organisms.be"}, {"index": "203", "colour": "orange", "code": "            is_valid = s_hashpart == hashpart\n", "error": "none", "author": "tom@organisms.be"}, {"index": "204", "colour": "orange", "code": "            if self.debug:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "205", "colour": "orange", "code": "                TRACE('validate_nonce: %s' % is_valid)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "206", "colour": "orange", "code": "            return is_valid\n", "error": "none", "author": "tom@organisms.be"}, {"index": "207", "colour": "orange", "code": "        except ValueError: # split() error\n", "error": "none", "author": "tom@organisms.be"}, {"index": "208", "colour": "orange", "code": "            pass\n", "error": "none", "author": "tom@organisms.be"}, {"index": "209", "colour": "orange", "code": "        return False\n", "error": "none", "author": "tom@organisms.be"}, {"index": "210", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "211", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "212", "colour": "orange", "code": "    def is_nonce_stale(self, max_age_seconds=600):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "213", "colour": "orange", "code": "        \"\"\"Returns True if a validated nonce is stale. The nonce contains a\n", "error": "none", "author": "tom@organisms.be"}, {"index": "214", "colour": "orange", "code": "        timestamp in plaintext and also a secure hash of the timestamp. You should\n", "error": "none", "author": "tom@organisms.be"}, {"index": "215", "colour": "orange", "code": "        first validate the nonce to ensure the plaintext timestamp is not spoofed.\n", "error": "none", "author": "tom@organisms.be"}, {"index": "216", "colour": "orange", "code": "        \"\"\"\n", "error": "none", "author": "tom@organisms.be"}, {"index": "217", "colour": "orange", "code": "        try:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "218", "colour": "green", "code": "            timestamp, hashpart = self.nonce.split(':', 1)\n", "error": "W", "author": "tom@organisms.be"}, {"index": "219", "colour": "orange", "code": "            if int(timestamp) + max_age_seconds > int(time.time()):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "220", "colour": "orange", "code": "                return False\n", "error": "none", "author": "tom@organisms.be"}, {"index": "221", "colour": "orange", "code": "        except ValueError: # int() error\n", "error": "none", "author": "tom@organisms.be"}, {"index": "222", "colour": "orange", "code": "            pass\n", "error": "none", "author": "tom@organisms.be"}, {"index": "223", "colour": "orange", "code": "        if self.debug:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "224", "colour": "orange", "code": "            TRACE(\"nonce is stale\")\n", "error": "none", "author": "tom@organisms.be"}, {"index": "225", "colour": "orange", "code": "        return True\n", "error": "none", "author": "tom@organisms.be"}, {"index": "226", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "227", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "228", "colour": "orange", "code": "    def HA2(self, entity_body=''):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "229", "colour": "orange", "code": "        \"\"\"Returns the H(A2) string. See :rfc:`2617` section 3.2.2.3.\"\"\"\n", "error": "none", "author": "tom@organisms.be"}, {"index": "230", "colour": "orange", "code": "        # RFC 2617 3.2.2.3\n", "error": "none", "author": "tom@organisms.be"}, {"index": "231", "colour": "orange", "code": "        # If the \"qop\" directive's value is \"auth\" or is unspecified, then A2 is:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "232", "colour": "orange", "code": "        #    A2 = method \":\" digest-uri-value\n", "error": "none", "author": "tom@organisms.be"}, {"index": "233", "colour": "orange", "code": "        #\n", "error": "none", "author": "tom@organisms.be"}, {"index": "234", "colour": "orange", "code": "        # If the \"qop\" value is \"auth-int\", then A2 is:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "235", "colour": "orange", "code": "        #    A2 = method \":\" digest-uri-value \":\" H(entity-body)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "236", "colour": "orange", "code": "        if self.qop is None or self.qop == \"auth\":\n", "error": "none", "author": "tom@organisms.be"}, {"index": "237", "colour": "orange", "code": "            a2 = '%s:%s' % (self.http_method, self.uri)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "238", "colour": "orange", "code": "        elif self.qop == \"auth-int\":\n", "error": "none", "author": "tom@organisms.be"}, {"index": "239", "colour": "orange", "code": "            a2 = \"%s:%s:%s\" % (self.http_method, self.uri, H(entity_body))\n", "error": "none", "author": "tom@organisms.be"}, {"index": "240", "colour": "orange", "code": "        else:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "241", "colour": "orange", "code": "            # in theory, this should never happen, since I validate qop in __init__()\n", "error": "none", "author": "tom@organisms.be"}, {"index": "242", "colour": "orange", "code": "            raise ValueError(self.errmsg(\"Unrecognized value for qop!\"))\n", "error": "none", "author": "tom@organisms.be"}, {"index": "243", "colour": "orange", "code": "        return H(a2)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "244", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "245", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "246", "colour": "orange", "code": "    def request_digest(self, ha1, entity_body=''):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "247", "colour": "orange", "code": "        \"\"\"Calculates the Request-Digest. See :rfc:`2617` section 3.2.2.1.\n", "error": "none", "author": "tom@organisms.be"}, {"index": "248", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "249", "colour": "orange", "code": "        ha1\n", "error": "none", "author": "tom@organisms.be"}, {"index": "250", "colour": "orange", "code": "            The HA1 string obtained from the credentials store.\n", "error": "none", "author": "tom@organisms.be"}, {"index": "251", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "252", "colour": "orange", "code": "        entity_body\n", "error": "none", "author": "tom@organisms.be"}, {"index": "253", "colour": "orange", "code": "            If 'qop' is set to 'auth-int', then A2 includes a hash\n", "error": "none", "author": "tom@organisms.be"}, {"index": "254", "colour": "orange", "code": "            of the \"entity body\".  The entity body is the part of the\n", "error": "none", "author": "tom@organisms.be"}, {"index": "255", "colour": "orange", "code": "            message which follows the HTTP headers. See :rfc:`2617` section\n", "error": "none", "author": "tom@organisms.be"}, {"index": "256", "colour": "orange", "code": "            4.3.  This refers to the entity the user agent sent in the request which\n", "error": "none", "author": "tom@organisms.be"}, {"index": "257", "colour": "orange", "code": "            has the Authorization header. Typically GET requests don't have an entity,\n", "error": "none", "author": "tom@organisms.be"}, {"index": "258", "colour": "orange", "code": "            and POST requests do.\n", "error": "none", "author": "tom@organisms.be"}, {"index": "259", "colour": "orange", "code": "        \n", "error": "none", "author": "tom@organisms.be"}, {"index": "260", "colour": "orange", "code": "        \"\"\"\n", "error": "none", "author": "tom@organisms.be"}, {"index": "261", "colour": "orange", "code": "        ha2 = self.HA2(entity_body)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "262", "colour": "orange", "code": "        # Request-Digest -- RFC 2617 3.2.2.1\n", "error": "none", "author": "tom@organisms.be"}, {"index": "263", "colour": "orange", "code": "        if self.qop:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "264", "colour": "orange", "code": "            req = \"%s:%s:%s:%s:%s\" % (self.nonce, self.nc, self.cnonce, self.qop, ha2)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "265", "colour": "orange", "code": "        else:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "266", "colour": "orange", "code": "            req = \"%s:%s\" % (self.nonce, ha2)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "267", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "268", "colour": "orange", "code": "        # RFC 2617 3.2.2.2\n", "error": "none", "author": "tom@organisms.be"}, {"index": "269", "colour": "orange", "code": "        #\n", "error": "none", "author": "tom@organisms.be"}, {"index": "270", "colour": "orange", "code": "        # If the \"algorithm\" directive's value is \"MD5\" or is unspecified, then A1 is:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "271", "colour": "orange", "code": "        # A1 = unq(username-value) \":\" unq(realm-value) \":\" passwd\n", "error": "none", "author": "tom@organisms.be"}, {"index": "272", "colour": "orange", "code": "        #\n", "error": "none", "author": "tom@organisms.be"}, {"index": "273", "colour": "orange", "code": "        # If the \"algorithm\" directive's value is \"MD5-sess\", then A1 is\n", "error": "none", "author": "tom@organisms.be"}, {"index": "274", "colour": "orange", "code": "        # calculated only once - on the first request by the client following\n", "error": "none", "author": "tom@organisms.be"}, {"index": "275", "colour": "orange", "code": "        # receipt of a WWW-Authenticate challenge from the server.\n", "error": "none", "author": "tom@organisms.be"}, {"index": "276", "colour": "orange", "code": "        # A1 = H( unq(username-value) \":\" unq(realm-value) \":\" passwd )\n", "error": "none", "author": "tom@organisms.be"}, {"index": "277", "colour": "orange", "code": "        #         \":\" unq(nonce-value) \":\" unq(cnonce-value)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "278", "colour": "orange", "code": "        if self.algorithm == 'MD5-sess':\n", "error": "none", "author": "tom@organisms.be"}, {"index": "279", "colour": "orange", "code": "            ha1 = H('%s:%s:%s' % (ha1, self.nonce, self.cnonce))\n", "error": "none", "author": "tom@organisms.be"}, {"index": "280", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "281", "colour": "orange", "code": "        digest = H('%s:%s' % (ha1, req))\n", "error": "none", "author": "tom@organisms.be"}, {"index": "282", "colour": "orange", "code": "        return digest\n", "error": "none", "author": "tom@organisms.be"}, {"index": "283", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "284", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "285", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "286", "colour": "blue", "code": "def www_authenticate(realm, key, algorithm='MD5', nonce=None, qop=qop_auth, stale=False):\n", "error": "R", "author": "tom@organisms.be"}, {"index": "287", "colour": "orange", "code": "    \"\"\"Constructs a WWW-Authenticate header for Digest authentication.\"\"\"\n", "error": "none", "author": "tom@organisms.be"}, {"index": "288", "colour": "orange", "code": "    if qop not in valid_qops:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "289", "colour": "orange", "code": "        raise ValueError(\"Unsupported value for qop: '%s'\" % qop)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "290", "colour": "orange", "code": "    if algorithm not in valid_algorithms:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "291", "colour": "orange", "code": "        raise ValueError(\"Unsupported value for algorithm: '%s'\" % algorithm)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "292", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "293", "colour": "orange", "code": "    if nonce is None:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "294", "colour": "orange", "code": "        nonce = synthesize_nonce(realm, key)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "295", "colour": "orange", "code": "    s = 'Digest realm=\"%s\", nonce=\"%s\", algorithm=\"%s\", qop=\"%s\"' % (\n", "error": "none", "author": "tom@organisms.be"}, {"index": "296", "colour": "orange", "code": "                realm, nonce, algorithm, qop)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "297", "colour": "orange", "code": "    if stale:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "298", "colour": "orange", "code": "        s += ', stale=\"true\"'\n", "error": "none", "author": "tom@organisms.be"}, {"index": "299", "colour": "orange", "code": "    return s\n", "error": "none", "author": "tom@organisms.be"}, {"index": "300", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "301", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "302", "colour": "orange", "code": "def digest_auth(realm, get_ha1, key, debug=False):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "303", "colour": "orange", "code": "    \"\"\"A CherryPy tool which hooks at before_handler to perform\n", "error": "none", "author": "tom@organisms.be"}, {"index": "304", "colour": "orange", "code": "    HTTP Digest Access Authentication, as specified in :rfc:`2617`.\n", "error": "none", "author": "tom@organisms.be"}, {"index": "305", "colour": "orange", "code": "    \n", "error": "none", "author": "tom@organisms.be"}, {"index": "306", "colour": "orange", "code": "    If the request has an 'authorization' header with a 'Digest' scheme, this\n", "error": "none", "author": "tom@organisms.be"}, {"index": "307", "colour": "orange", "code": "    tool authenticates the credentials supplied in that header.  If\n", "error": "none", "author": "tom@organisms.be"}, {"index": "308", "colour": "orange", "code": "    the request has no 'authorization' header, or if it does but the scheme is\n", "error": "none", "author": "tom@organisms.be"}, {"index": "309", "colour": "orange", "code": "    not \"Digest\", or if authentication fails, the tool sends a 401 response with\n", "error": "none", "author": "tom@organisms.be"}, {"index": "310", "colour": "orange", "code": "    a 'WWW-Authenticate' Digest header.\n", "error": "none", "author": "tom@organisms.be"}, {"index": "311", "colour": "orange", "code": "    \n", "error": "none", "author": "tom@organisms.be"}, {"index": "312", "colour": "orange", "code": "    realm\n", "error": "none", "author": "tom@organisms.be"}, {"index": "313", "colour": "orange", "code": "        A string containing the authentication realm.\n", "error": "none", "author": "tom@organisms.be"}, {"index": "314", "colour": "orange", "code": "    \n", "error": "none", "author": "tom@organisms.be"}, {"index": "315", "colour": "orange", "code": "    get_ha1\n", "error": "none", "author": "tom@organisms.be"}, {"index": "316", "colour": "orange", "code": "        A callable which looks up a username in a credentials store\n", "error": "none", "author": "tom@organisms.be"}, {"index": "317", "colour": "orange", "code": "        and returns the HA1 string, which is defined in the RFC to be\n", "error": "none", "author": "tom@organisms.be"}, {"index": "318", "colour": "orange", "code": "        MD5(username : realm : password).  The function's signature is:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "319", "colour": "orange", "code": "        ``get_ha1(realm, username)``\n", "error": "none", "author": "tom@organisms.be"}, {"index": "320", "colour": "orange", "code": "        where username is obtained from the request's 'authorization' header.\n", "error": "none", "author": "tom@organisms.be"}, {"index": "321", "colour": "orange", "code": "        If username is not found in the credentials store, get_ha1() returns\n", "error": "none", "author": "tom@organisms.be"}, {"index": "322", "colour": "orange", "code": "        None.\n", "error": "none", "author": "tom@organisms.be"}, {"index": "323", "colour": "orange", "code": "    \n", "error": "none", "author": "tom@organisms.be"}, {"index": "324", "colour": "orange", "code": "    key\n", "error": "none", "author": "tom@organisms.be"}, {"index": "325", "colour": "orange", "code": "        A secret string known only to the server, used in the synthesis of nonces.\n", "error": "none", "author": "tom@organisms.be"}, {"index": "326", "colour": "orange", "code": "    \n", "error": "none", "author": "tom@organisms.be"}, {"index": "327", "colour": "orange", "code": "    \"\"\"\n", "error": "none", "author": "tom@organisms.be"}, {"index": "328", "colour": "orange", "code": "    request = cherrypy.serving.request\n", "error": "none", "author": "tom@organisms.be"}, {"index": "329", "colour": "orange", "code": "    \n", "error": "none", "author": "tom@organisms.be"}, {"index": "330", "colour": "orange", "code": "    auth_header = request.headers.get('authorization')\n", "error": "none", "author": "tom@organisms.be"}, {"index": "331", "colour": "orange", "code": "    nonce_is_stale = False\n", "error": "none", "author": "tom@organisms.be"}, {"index": "332", "colour": "orange", "code": "    if auth_header is not None:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "333", "colour": "orange", "code": "        try:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "334", "colour": "orange", "code": "            auth = HttpDigestAuthorization(auth_header, request.method, debug=debug)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "335", "colour": "orange", "code": "        except ValueError:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "336", "colour": "orange", "code": "            raise cherrypy.HTTPError(400, \"The Authorization header could not be parsed.\")\n", "error": "none", "author": "tom@organisms.be"}, {"index": "337", "colour": "orange", "code": "        \n", "error": "none", "author": "tom@organisms.be"}, {"index": "338", "colour": "orange", "code": "        if debug:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "339", "colour": "orange", "code": "            TRACE(str(auth))\n", "error": "none", "author": "tom@organisms.be"}, {"index": "340", "colour": "orange", "code": "        \n", "error": "none", "author": "tom@organisms.be"}, {"index": "341", "colour": "orange", "code": "        if auth.validate_nonce(realm, key):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "342", "colour": "orange", "code": "            ha1 = get_ha1(realm, auth.username)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "343", "colour": "orange", "code": "            if ha1 is not None:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "344", "colour": "orange", "code": "                # note that for request.body to be available we need to hook in at\n", "error": "none", "author": "tom@organisms.be"}, {"index": "345", "colour": "orange", "code": "                # before_handler, not on_start_resource like 3.1.x digest_auth does.\n", "error": "none", "author": "tom@organisms.be"}, {"index": "346", "colour": "orange", "code": "                digest = auth.request_digest(ha1, entity_body=request.body)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "347", "colour": "orange", "code": "                if digest == auth.response: # authenticated\n", "error": "none", "author": "tom@organisms.be"}, {"index": "348", "colour": "orange", "code": "                    if debug:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "349", "colour": "orange", "code": "                        TRACE(\"digest matches auth.response\")\n", "error": "none", "author": "tom@organisms.be"}, {"index": "350", "colour": "orange", "code": "                    # Now check if nonce is stale.\n", "error": "none", "author": "tom@organisms.be"}, {"index": "351", "colour": "orange", "code": "                    # The choice of ten minutes' lifetime for nonce is somewhat arbitrary\n", "error": "none", "author": "tom@organisms.be"}, {"index": "352", "colour": "orange", "code": "                    nonce_is_stale = auth.is_nonce_stale(max_age_seconds=600)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "353", "colour": "orange", "code": "                    if not nonce_is_stale:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "354", "colour": "orange", "code": "                        request.login = auth.username\n", "error": "none", "author": "tom@organisms.be"}, {"index": "355", "colour": "orange", "code": "                        if debug:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "356", "colour": "orange", "code": "                            TRACE(\"authentication of %s successful\" % auth.username)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "357", "colour": "orange", "code": "                        return\n", "error": "none", "author": "tom@organisms.be"}, {"index": "358", "colour": "orange", "code": "    \n", "error": "none", "author": "tom@organisms.be"}, {"index": "359", "colour": "orange", "code": "    # Respond with 401 status and a WWW-Authenticate header\n", "error": "none", "author": "tom@organisms.be"}, {"index": "360", "colour": "orange", "code": "    header = www_authenticate(realm, key, stale=nonce_is_stale)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "361", "colour": "orange", "code": "    if debug:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "362", "colour": "orange", "code": "        TRACE(header)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "363", "colour": "orange", "code": "    cherrypy.serving.response.headers['WWW-Authenticate'] = header\n", "error": "none", "author": "tom@organisms.be"}, {"index": "364", "colour": "orange", "code": "    raise cherrypy.HTTPError(401, \"You are not authorized to access that resource\")\n", "error": "none", "author": "tom@organisms.be"}, {"index": "365", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}]]}