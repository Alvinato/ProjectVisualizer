{"path": "/home/asumal/git/cs410/pattern/pattern/server/cherrypy/cherrypy/_cprequest.py", "lines": [{"index": "1", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "2", "colour": "green", "code": "import os\n", "error": "W", "author": "tom@organisms.be"}, {"index": "3", "colour": "orange", "code": "import sys\n", "error": "none", "author": "tom@organisms.be"}, {"index": "4", "colour": "orange", "code": "import time\n", "error": "none", "author": "tom@organisms.be"}, {"index": "5", "colour": "orange", "code": "import warnings\n", "error": "none", "author": "tom@organisms.be"}, {"index": "6", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "7", "colour": "orange", "code": "import cherrypy\n", "error": "none", "author": "tom@organisms.be"}, {"index": "8", "colour": "green", "code": "from cherrypy._cpcompat import basestring, copykeys, ntob, unicodestr\n", "error": "W", "author": "tom@organisms.be"}, {"index": "9", "colour": "orange", "code": "from cherrypy._cpcompat import SimpleCookie, CookieError, py3k\n", "error": "none", "author": "tom@organisms.be"}, {"index": "10", "colour": "orange", "code": "from cherrypy import _cpreqbody, _cpconfig\n", "error": "none", "author": "tom@organisms.be"}, {"index": "11", "colour": "orange", "code": "from cherrypy._cperror import format_exc, bare_error\n", "error": "none", "author": "tom@organisms.be"}, {"index": "12", "colour": "orange", "code": "from cherrypy.lib import httputil, file_generator\n", "error": "none", "author": "tom@organisms.be"}, {"index": "13", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "14", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "15", "colour": "blue", "code": "class Hook(object):\n", "error": "R", "author": "tom@organisms.be"}, {"index": "16", "colour": "orange", "code": "    \"\"\"A callback and its metadata: failsafe, priority, and kwargs.\"\"\"\n", "error": "none", "author": "tom@organisms.be"}, {"index": "17", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "18", "colour": "orange", "code": "    callback = None\n", "error": "none", "author": "tom@organisms.be"}, {"index": "19", "colour": "orange", "code": "    \"\"\"\n", "error": "none", "author": "tom@organisms.be"}, {"index": "20", "colour": "orange", "code": "    The bare callable that this Hook object is wrapping, which will\n", "error": "none", "author": "tom@organisms.be"}, {"index": "21", "colour": "orange", "code": "    be called when the Hook is called.\"\"\"\n", "error": "none", "author": "tom@organisms.be"}, {"index": "22", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "23", "colour": "orange", "code": "    failsafe = False\n", "error": "none", "author": "tom@organisms.be"}, {"index": "24", "colour": "orange", "code": "    \"\"\"\n", "error": "none", "author": "tom@organisms.be"}, {"index": "25", "colour": "orange", "code": "    If True, the callback is guaranteed to run even if other callbacks\n", "error": "none", "author": "tom@organisms.be"}, {"index": "26", "colour": "orange", "code": "    from the same call point raise exceptions.\"\"\"\n", "error": "none", "author": "tom@organisms.be"}, {"index": "27", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "28", "colour": "orange", "code": "    priority = 50\n", "error": "none", "author": "tom@organisms.be"}, {"index": "29", "colour": "orange", "code": "    \"\"\"\n", "error": "none", "author": "tom@organisms.be"}, {"index": "30", "colour": "orange", "code": "    Defines the order of execution for a list of Hooks. Priority numbers\n", "error": "none", "author": "tom@organisms.be"}, {"index": "31", "colour": "orange", "code": "    should be limited to the closed interval [0, 100], but values outside\n", "error": "none", "author": "tom@organisms.be"}, {"index": "32", "colour": "orange", "code": "    this range are acceptable, as are fractional values.\"\"\"\n", "error": "none", "author": "tom@organisms.be"}, {"index": "33", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "34", "colour": "orange", "code": "    kwargs = {}\n", "error": "none", "author": "tom@organisms.be"}, {"index": "35", "colour": "orange", "code": "    \"\"\"\n", "error": "none", "author": "tom@organisms.be"}, {"index": "36", "colour": "orange", "code": "    A set of keyword arguments that will be passed to the\n", "error": "none", "author": "tom@organisms.be"}, {"index": "37", "colour": "orange", "code": "    callable on each call.\"\"\"\n", "error": "none", "author": "tom@organisms.be"}, {"index": "38", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "39", "colour": "orange", "code": "    def __init__(self, callback, failsafe=None, priority=None, **kwargs):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "40", "colour": "orange", "code": "        self.callback = callback\n", "error": "none", "author": "tom@organisms.be"}, {"index": "41", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "42", "colour": "orange", "code": "        if failsafe is None:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "43", "colour": "orange", "code": "            failsafe = getattr(callback, \"failsafe\", False)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "44", "colour": "orange", "code": "        self.failsafe = failsafe\n", "error": "none", "author": "tom@organisms.be"}, {"index": "45", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "46", "colour": "orange", "code": "        if priority is None:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "47", "colour": "orange", "code": "            priority = getattr(callback, \"priority\", 50)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "48", "colour": "orange", "code": "        self.priority = priority\n", "error": "none", "author": "tom@organisms.be"}, {"index": "49", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "50", "colour": "orange", "code": "        self.kwargs = kwargs\n", "error": "none", "author": "tom@organisms.be"}, {"index": "51", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "52", "colour": "orange", "code": "    def __lt__(self, other):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "53", "colour": "orange", "code": "        # Python 3\n", "error": "none", "author": "tom@organisms.be"}, {"index": "54", "colour": "orange", "code": "        return self.priority < other.priority\n", "error": "none", "author": "tom@organisms.be"}, {"index": "55", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "56", "colour": "orange", "code": "    def __cmp__(self, other):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "57", "colour": "orange", "code": "        # Python 2\n", "error": "none", "author": "tom@organisms.be"}, {"index": "58", "colour": "orange", "code": "        return cmp(self.priority, other.priority)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "59", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "60", "colour": "orange", "code": "    def __call__(self):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "61", "colour": "orange", "code": "        \"\"\"Run self.callback(**self.kwargs).\"\"\"\n", "error": "none", "author": "tom@organisms.be"}, {"index": "62", "colour": "orange", "code": "        return self.callback(**self.kwargs)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "63", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "64", "colour": "orange", "code": "    def __repr__(self):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "65", "colour": "orange", "code": "        cls = self.__class__\n", "error": "none", "author": "tom@organisms.be"}, {"index": "66", "colour": "orange", "code": "        return (\"%s.%s(callback=%r, failsafe=%r, priority=%r, %s)\"\n", "error": "none", "author": "tom@organisms.be"}, {"index": "67", "colour": "orange", "code": "                % (cls.__module__, cls.__name__, self.callback,\n", "error": "none", "author": "tom@organisms.be"}, {"index": "68", "colour": "orange", "code": "                   self.failsafe, self.priority,\n", "error": "none", "author": "tom@organisms.be"}, {"index": "69", "colour": "orange", "code": "                   \", \".join(['%s=%r' % (k, v)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "70", "colour": "orange", "code": "                              for k, v in self.kwargs.items()])))\n", "error": "none", "author": "tom@organisms.be"}, {"index": "71", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "72", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "73", "colour": "orange", "code": "class HookMap(dict):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "74", "colour": "orange", "code": "    \"\"\"A map of call points to lists of callbacks (Hook objects).\"\"\"\n", "error": "none", "author": "tom@organisms.be"}, {"index": "75", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "76", "colour": "orange", "code": "    def __new__(cls, points=None):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "77", "colour": "orange", "code": "        d = dict.__new__(cls)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "78", "colour": "orange", "code": "        for p in points or []:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "79", "colour": "orange", "code": "            d[p] = []\n", "error": "none", "author": "tom@organisms.be"}, {"index": "80", "colour": "orange", "code": "        return d\n", "error": "none", "author": "tom@organisms.be"}, {"index": "81", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "82", "colour": "green", "code": "    def __init__(self, *a, **kw):\n", "error": "W", "author": "tom@organisms.be"}, {"index": "83", "colour": "orange", "code": "        pass\n", "error": "none", "author": "tom@organisms.be"}, {"index": "84", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "85", "colour": "orange", "code": "    def attach(self, point, callback, failsafe=None, priority=None, **kwargs):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "86", "colour": "orange", "code": "        \"\"\"Append a new Hook made from the supplied arguments.\"\"\"\n", "error": "none", "author": "tom@organisms.be"}, {"index": "87", "colour": "orange", "code": "        self[point].append(Hook(callback, failsafe, priority, **kwargs))\n", "error": "none", "author": "tom@organisms.be"}, {"index": "88", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "89", "colour": "orange", "code": "    def run(self, point):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "90", "colour": "orange", "code": "        \"\"\"Execute all registered Hooks (callbacks) for the given point.\"\"\"\n", "error": "none", "author": "tom@organisms.be"}, {"index": "91", "colour": "orange", "code": "        exc = None\n", "error": "none", "author": "tom@organisms.be"}, {"index": "92", "colour": "orange", "code": "        hooks = self[point]\n", "error": "none", "author": "tom@organisms.be"}, {"index": "93", "colour": "orange", "code": "        hooks.sort()\n", "error": "none", "author": "tom@organisms.be"}, {"index": "94", "colour": "orange", "code": "        for hook in hooks:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "95", "colour": "orange", "code": "            # Some hooks are guaranteed to run even if others at\n", "error": "none", "author": "tom@organisms.be"}, {"index": "96", "colour": "orange", "code": "            # the same hookpoint fail. We will still log the failure,\n", "error": "none", "author": "tom@organisms.be"}, {"index": "97", "colour": "orange", "code": "            # but proceed on to the next hook. The only way\n", "error": "none", "author": "tom@organisms.be"}, {"index": "98", "colour": "orange", "code": "            # to stop all processing from one of these hooks is\n", "error": "none", "author": "tom@organisms.be"}, {"index": "99", "colour": "orange", "code": "            # to raise SystemExit and stop the whole server.\n", "error": "none", "author": "tom@organisms.be"}, {"index": "100", "colour": "orange", "code": "            if exc is None or hook.failsafe:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "101", "colour": "orange", "code": "                try:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "102", "colour": "orange", "code": "                    hook()\n", "error": "none", "author": "tom@organisms.be"}, {"index": "103", "colour": "orange", "code": "                except (KeyboardInterrupt, SystemExit):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "104", "colour": "orange", "code": "                    raise\n", "error": "none", "author": "tom@organisms.be"}, {"index": "105", "colour": "orange", "code": "                except (cherrypy.HTTPError, cherrypy.HTTPRedirect,\n", "error": "none", "author": "tom@organisms.be"}, {"index": "106", "colour": "orange", "code": "                        cherrypy.InternalRedirect):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "107", "colour": "orange", "code": "                    exc = sys.exc_info()[1]\n", "error": "none", "author": "tom@organisms.be"}, {"index": "108", "colour": "green", "code": "                except:\n", "error": "W", "author": "tom@organisms.be"}, {"index": "109", "colour": "orange", "code": "                    exc = sys.exc_info()[1]\n", "error": "none", "author": "tom@organisms.be"}, {"index": "110", "colour": "orange", "code": "                    cherrypy.log(traceback=True, severity=40)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "111", "colour": "orange", "code": "        if exc:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "112", "colour": "red", "code": "            raise exc\n", "error": "E", "author": "tom@organisms.be"}, {"index": "113", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "114", "colour": "orange", "code": "    def __copy__(self):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "115", "colour": "orange", "code": "        newmap = self.__class__()\n", "error": "none", "author": "tom@organisms.be"}, {"index": "116", "colour": "orange", "code": "        # We can't just use 'update' because we want copies of the\n", "error": "none", "author": "tom@organisms.be"}, {"index": "117", "colour": "orange", "code": "        # mutable values (each is a list) as well.\n", "error": "none", "author": "tom@organisms.be"}, {"index": "118", "colour": "orange", "code": "        for k, v in self.items():\n", "error": "none", "author": "tom@organisms.be"}, {"index": "119", "colour": "orange", "code": "            newmap[k] = v[:]\n", "error": "none", "author": "tom@organisms.be"}, {"index": "120", "colour": "orange", "code": "        return newmap\n", "error": "none", "author": "tom@organisms.be"}, {"index": "121", "colour": "orange", "code": "    copy = __copy__\n", "error": "none", "author": "tom@organisms.be"}, {"index": "122", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "123", "colour": "orange", "code": "    def __repr__(self):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "124", "colour": "orange", "code": "        cls = self.__class__\n", "error": "none", "author": "tom@organisms.be"}, {"index": "125", "colour": "orange", "code": "        return \"%s.%s(points=%r)\" % (cls.__module__, cls.__name__, copykeys(self))\n", "error": "none", "author": "tom@organisms.be"}, {"index": "126", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "127", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "128", "colour": "orange", "code": "# Config namespace handlers\n", "error": "none", "author": "tom@organisms.be"}, {"index": "129", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "130", "colour": "orange", "code": "def hooks_namespace(k, v):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "131", "colour": "orange", "code": "    \"\"\"Attach bare hooks declared in config.\"\"\"\n", "error": "none", "author": "tom@organisms.be"}, {"index": "132", "colour": "orange", "code": "    # Use split again to allow multiple hooks for a single\n", "error": "none", "author": "tom@organisms.be"}, {"index": "133", "colour": "orange", "code": "    # hookpoint per path (e.g. \"hooks.before_handler.1\").\n", "error": "none", "author": "tom@organisms.be"}, {"index": "134", "colour": "orange", "code": "    # Little-known fact you only get from reading source ;)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "135", "colour": "orange", "code": "    hookpoint = k.split(\".\", 1)[0]\n", "error": "none", "author": "tom@organisms.be"}, {"index": "136", "colour": "orange", "code": "    if isinstance(v, basestring):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "137", "colour": "orange", "code": "        v = cherrypy.lib.attributes(v)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "138", "colour": "orange", "code": "    if not isinstance(v, Hook):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "139", "colour": "orange", "code": "        v = Hook(v)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "140", "colour": "orange", "code": "    cherrypy.serving.request.hooks[hookpoint].append(v)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "141", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "142", "colour": "orange", "code": "def request_namespace(k, v):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "143", "colour": "orange", "code": "    \"\"\"Attach request attributes declared in config.\"\"\"\n", "error": "none", "author": "tom@organisms.be"}, {"index": "144", "colour": "orange", "code": "    # Provides config entries to set request.body attrs (like attempt_charsets).\n", "error": "none", "author": "tom@organisms.be"}, {"index": "145", "colour": "orange", "code": "    if k[:5] == 'body.':\n", "error": "none", "author": "tom@organisms.be"}, {"index": "146", "colour": "orange", "code": "        setattr(cherrypy.serving.request.body, k[5:], v)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "147", "colour": "orange", "code": "    else:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "148", "colour": "orange", "code": "        setattr(cherrypy.serving.request, k, v)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "149", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "150", "colour": "orange", "code": "def response_namespace(k, v):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "151", "colour": "orange", "code": "    \"\"\"Attach response attributes declared in config.\"\"\"\n", "error": "none", "author": "tom@organisms.be"}, {"index": "152", "colour": "orange", "code": "    # Provides config entries to set default response headers\n", "error": "none", "author": "tom@organisms.be"}, {"index": "153", "colour": "orange", "code": "    # http://cherrypy.org/ticket/889\n", "error": "none", "author": "tom@organisms.be"}, {"index": "154", "colour": "orange", "code": "    if k[:8] == 'headers.':\n", "error": "none", "author": "tom@organisms.be"}, {"index": "155", "colour": "orange", "code": "        cherrypy.serving.response.headers[k.split('.', 1)[1]] = v\n", "error": "none", "author": "tom@organisms.be"}, {"index": "156", "colour": "orange", "code": "    else:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "157", "colour": "orange", "code": "        setattr(cherrypy.serving.response, k, v)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "158", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "159", "colour": "orange", "code": "def error_page_namespace(k, v):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "160", "colour": "orange", "code": "    \"\"\"Attach error pages declared in config.\"\"\"\n", "error": "none", "author": "tom@organisms.be"}, {"index": "161", "colour": "orange", "code": "    if k != 'default':\n", "error": "none", "author": "tom@organisms.be"}, {"index": "162", "colour": "orange", "code": "        k = int(k)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "163", "colour": "orange", "code": "    cherrypy.serving.request.error_page[k] = v\n", "error": "none", "author": "tom@organisms.be"}, {"index": "164", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "165", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "166", "colour": "orange", "code": "hookpoints = ['on_start_resource', 'before_request_body',\n", "error": "none", "author": "tom@organisms.be"}, {"index": "167", "colour": "orange", "code": "              'before_handler', 'before_finalize',\n", "error": "none", "author": "tom@organisms.be"}, {"index": "168", "colour": "orange", "code": "              'on_end_resource', 'on_end_request',\n", "error": "none", "author": "tom@organisms.be"}, {"index": "169", "colour": "orange", "code": "              'before_error_response', 'after_error_response']\n", "error": "none", "author": "tom@organisms.be"}, {"index": "170", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "171", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "172", "colour": "blue", "code": "class Request(object):\n", "error": "R", "author": "tom@organisms.be"}, {"index": "173", "colour": "orange", "code": "    \"\"\"An HTTP request.\n", "error": "none", "author": "tom@organisms.be"}, {"index": "174", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "175", "colour": "orange", "code": "    This object represents the metadata of an HTTP request message;\n", "error": "none", "author": "tom@organisms.be"}, {"index": "176", "colour": "orange", "code": "    that is, it contains attributes which describe the environment\n", "error": "none", "author": "tom@organisms.be"}, {"index": "177", "colour": "orange", "code": "    in which the request URL, headers, and body were sent (if you\n", "error": "none", "author": "tom@organisms.be"}, {"index": "178", "colour": "orange", "code": "    want tools to interpret the headers and body, those are elsewhere,\n", "error": "none", "author": "tom@organisms.be"}, {"index": "179", "colour": "orange", "code": "    mostly in Tools). This 'metadata' consists of socket data,\n", "error": "none", "author": "tom@organisms.be"}, {"index": "180", "colour": "orange", "code": "    transport characteristics, and the Request-Line. This object\n", "error": "none", "author": "tom@organisms.be"}, {"index": "181", "colour": "orange", "code": "    also contains data regarding the configuration in effect for\n", "error": "none", "author": "tom@organisms.be"}, {"index": "182", "colour": "orange", "code": "    the given URL, and the execution plan for generating a response.\n", "error": "none", "author": "tom@organisms.be"}, {"index": "183", "colour": "orange", "code": "    \"\"\"\n", "error": "none", "author": "tom@organisms.be"}, {"index": "184", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "185", "colour": "orange", "code": "    prev = None\n", "error": "none", "author": "tom@organisms.be"}, {"index": "186", "colour": "orange", "code": "    \"\"\"\n", "error": "none", "author": "tom@organisms.be"}, {"index": "187", "colour": "orange", "code": "    The previous Request object (if any). This should be None\n", "error": "none", "author": "tom@organisms.be"}, {"index": "188", "colour": "orange", "code": "    unless we are processing an InternalRedirect.\"\"\"\n", "error": "none", "author": "tom@organisms.be"}, {"index": "189", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "190", "colour": "orange", "code": "    # Conversation/connection attributes\n", "error": "none", "author": "tom@organisms.be"}, {"index": "191", "colour": "orange", "code": "    local = httputil.Host(\"127.0.0.1\", 80)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "192", "colour": "orange", "code": "    \"An httputil.Host(ip, port, hostname) object for the server socket.\"\n", "error": "none", "author": "tom@organisms.be"}, {"index": "193", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "194", "colour": "orange", "code": "    remote = httputil.Host(\"127.0.0.1\", 1111)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "195", "colour": "orange", "code": "    \"An httputil.Host(ip, port, hostname) object for the client socket.\"\n", "error": "none", "author": "tom@organisms.be"}, {"index": "196", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "197", "colour": "orange", "code": "    scheme = \"http\"\n", "error": "none", "author": "tom@organisms.be"}, {"index": "198", "colour": "orange", "code": "    \"\"\"\n", "error": "none", "author": "tom@organisms.be"}, {"index": "199", "colour": "orange", "code": "    The protocol used between client and server. In most cases,\n", "error": "none", "author": "tom@organisms.be"}, {"index": "200", "colour": "orange", "code": "    this will be either 'http' or 'https'.\"\"\"\n", "error": "none", "author": "tom@organisms.be"}, {"index": "201", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "202", "colour": "orange", "code": "    server_protocol = \"HTTP/1.1\"\n", "error": "none", "author": "tom@organisms.be"}, {"index": "203", "colour": "orange", "code": "    \"\"\"\n", "error": "none", "author": "tom@organisms.be"}, {"index": "204", "colour": "orange", "code": "    The HTTP version for which the HTTP server is at least\n", "error": "none", "author": "tom@organisms.be"}, {"index": "205", "colour": "orange", "code": "    conditionally compliant.\"\"\"\n", "error": "none", "author": "tom@organisms.be"}, {"index": "206", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "207", "colour": "orange", "code": "    base = \"\"\n", "error": "none", "author": "tom@organisms.be"}, {"index": "208", "colour": "orange", "code": "    \"\"\"The (scheme://host) portion of the requested URL.\n", "error": "none", "author": "tom@organisms.be"}, {"index": "209", "colour": "orange", "code": "    In some cases (e.g. when proxying via mod_rewrite), this may contain\n", "error": "none", "author": "tom@organisms.be"}, {"index": "210", "colour": "orange", "code": "    path segments which cherrypy.url uses when constructing url's, but\n", "error": "none", "author": "tom@organisms.be"}, {"index": "211", "colour": "orange", "code": "    which otherwise are ignored by CherryPy. Regardless, this value\n", "error": "none", "author": "tom@organisms.be"}, {"index": "212", "colour": "orange", "code": "    MUST NOT end in a slash.\"\"\"\n", "error": "none", "author": "tom@organisms.be"}, {"index": "213", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "214", "colour": "orange", "code": "    # Request-Line attributes\n", "error": "none", "author": "tom@organisms.be"}, {"index": "215", "colour": "orange", "code": "    request_line = \"\"\n", "error": "none", "author": "tom@organisms.be"}, {"index": "216", "colour": "orange", "code": "    \"\"\"\n", "error": "none", "author": "tom@organisms.be"}, {"index": "217", "colour": "orange", "code": "    The complete Request-Line received from the client. This is a\n", "error": "none", "author": "tom@organisms.be"}, {"index": "218", "colour": "orange", "code": "    single string consisting of the request method, URI, and protocol\n", "error": "none", "author": "tom@organisms.be"}, {"index": "219", "colour": "orange", "code": "    version (joined by spaces). Any final CRLF is removed.\"\"\"\n", "error": "none", "author": "tom@organisms.be"}, {"index": "220", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "221", "colour": "orange", "code": "    method = \"GET\"\n", "error": "none", "author": "tom@organisms.be"}, {"index": "222", "colour": "orange", "code": "    \"\"\"\n", "error": "none", "author": "tom@organisms.be"}, {"index": "223", "colour": "orange", "code": "    Indicates the HTTP method to be performed on the resource identified\n", "error": "none", "author": "tom@organisms.be"}, {"index": "224", "colour": "orange", "code": "    by the Request-URI. Common methods include GET, HEAD, POST, PUT, and\n", "error": "none", "author": "tom@organisms.be"}, {"index": "225", "colour": "orange", "code": "    DELETE. CherryPy allows any extension method; however, various HTTP\n", "error": "none", "author": "tom@organisms.be"}, {"index": "226", "colour": "orange", "code": "    servers and gateways may restrict the set of allowable methods.\n", "error": "none", "author": "tom@organisms.be"}, {"index": "227", "colour": "orange", "code": "    CherryPy applications SHOULD restrict the set (on a per-URI basis).\"\"\"\n", "error": "none", "author": "tom@organisms.be"}, {"index": "228", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "229", "colour": "orange", "code": "    query_string = \"\"\n", "error": "none", "author": "tom@organisms.be"}, {"index": "230", "colour": "orange", "code": "    \"\"\"\n", "error": "none", "author": "tom@organisms.be"}, {"index": "231", "colour": "orange", "code": "    The query component of the Request-URI, a string of information to be\n", "error": "none", "author": "tom@organisms.be"}, {"index": "232", "colour": "orange", "code": "    interpreted by the resource. The query portion of a URI follows the\n", "error": "none", "author": "tom@organisms.be"}, {"index": "233", "colour": "orange", "code": "    path component, and is separated by a '?'. For example, the URI\n", "error": "none", "author": "tom@organisms.be"}, {"index": "234", "colour": "orange", "code": "    'http://www.cherrypy.org/wiki?a=3&b=4' has the query component,\n", "error": "none", "author": "tom@organisms.be"}, {"index": "235", "colour": "orange", "code": "    'a=3&b=4'.\"\"\"\n", "error": "none", "author": "tom@organisms.be"}, {"index": "236", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "237", "colour": "orange", "code": "    query_string_encoding = 'utf8'\n", "error": "none", "author": "tom@organisms.be"}, {"index": "238", "colour": "orange", "code": "    \"\"\"\n", "error": "none", "author": "tom@organisms.be"}, {"index": "239", "colour": "orange", "code": "    The encoding expected for query string arguments after % HEX HEX decoding).\n", "error": "none", "author": "tom@organisms.be"}, {"index": "240", "colour": "orange", "code": "    If a query string is provided that cannot be decoded with this encoding,\n", "error": "none", "author": "tom@organisms.be"}, {"index": "241", "colour": "orange", "code": "    404 is raised (since technically it's a different URI). If you want\n", "error": "none", "author": "tom@organisms.be"}, {"index": "242", "colour": "orange", "code": "    arbitrary encodings to not error, set this to 'Latin-1'; you can then\n", "error": "none", "author": "tom@organisms.be"}, {"index": "243", "colour": "orange", "code": "    encode back to bytes and re-decode to whatever encoding you like later.\n", "error": "none", "author": "tom@organisms.be"}, {"index": "244", "colour": "orange", "code": "    \"\"\"\n", "error": "none", "author": "tom@organisms.be"}, {"index": "245", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "246", "colour": "orange", "code": "    protocol = (1, 1)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "247", "colour": "orange", "code": "    \"\"\"The HTTP protocol version corresponding to the set\n", "error": "none", "author": "tom@organisms.be"}, {"index": "248", "colour": "orange", "code": "    of features which should be allowed in the response. If BOTH\n", "error": "none", "author": "tom@organisms.be"}, {"index": "249", "colour": "orange", "code": "    the client's request message AND the server's level of HTTP\n", "error": "none", "author": "tom@organisms.be"}, {"index": "250", "colour": "orange", "code": "    compliance is HTTP/1.1, this attribute will be the tuple (1, 1).\n", "error": "none", "author": "tom@organisms.be"}, {"index": "251", "colour": "orange", "code": "    If either is 1.0, this attribute will be the tuple (1, 0).\n", "error": "none", "author": "tom@organisms.be"}, {"index": "252", "colour": "orange", "code": "    Lower HTTP protocol versions are not explicitly supported.\"\"\"\n", "error": "none", "author": "tom@organisms.be"}, {"index": "253", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "254", "colour": "orange", "code": "    params = {}\n", "error": "none", "author": "tom@organisms.be"}, {"index": "255", "colour": "orange", "code": "    \"\"\"\n", "error": "none", "author": "tom@organisms.be"}, {"index": "256", "colour": "orange", "code": "    A dict which combines query string (GET) and request entity (POST)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "257", "colour": "orange", "code": "    variables. This is populated in two stages: GET params are added\n", "error": "none", "author": "tom@organisms.be"}, {"index": "258", "colour": "orange", "code": "    before the 'on_start_resource' hook, and POST params are added\n", "error": "none", "author": "tom@organisms.be"}, {"index": "259", "colour": "orange", "code": "    between the 'before_request_body' and 'before_handler' hooks.\"\"\"\n", "error": "none", "author": "tom@organisms.be"}, {"index": "260", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "261", "colour": "orange", "code": "    # Message attributes\n", "error": "none", "author": "tom@organisms.be"}, {"index": "262", "colour": "orange", "code": "    header_list = []\n", "error": "none", "author": "tom@organisms.be"}, {"index": "263", "colour": "orange", "code": "    \"\"\"\n", "error": "none", "author": "tom@organisms.be"}, {"index": "264", "colour": "orange", "code": "    A list of the HTTP request headers as (name, value) tuples.\n", "error": "none", "author": "tom@organisms.be"}, {"index": "265", "colour": "orange", "code": "    In general, you should use request.headers (a dict) instead.\"\"\"\n", "error": "none", "author": "tom@organisms.be"}, {"index": "266", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "267", "colour": "orange", "code": "    headers = httputil.HeaderMap()\n", "error": "none", "author": "tom@organisms.be"}, {"index": "268", "colour": "orange", "code": "    \"\"\"\n", "error": "none", "author": "tom@organisms.be"}, {"index": "269", "colour": "orange", "code": "    A dict-like object containing the request headers. Keys are header\n", "error": "none", "author": "tom@organisms.be"}, {"index": "270", "colour": "orange", "code": "    names (in Title-Case format); however, you may get and set them in\n", "error": "none", "author": "tom@organisms.be"}, {"index": "271", "colour": "orange", "code": "    a case-insensitive manner. That is, headers['Content-Type'] and\n", "error": "none", "author": "tom@organisms.be"}, {"index": "272", "colour": "orange", "code": "    headers['content-type'] refer to the same value. Values are header\n", "error": "none", "author": "tom@organisms.be"}, {"index": "273", "colour": "orange", "code": "    values (decoded according to :rfc:`2047` if necessary). See also:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "274", "colour": "orange", "code": "    httputil.HeaderMap, httputil.HeaderElement.\"\"\"\n", "error": "none", "author": "tom@organisms.be"}, {"index": "275", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "276", "colour": "orange", "code": "    cookie = SimpleCookie()\n", "error": "none", "author": "tom@organisms.be"}, {"index": "277", "colour": "orange", "code": "    \"\"\"See help(Cookie).\"\"\"\n", "error": "none", "author": "tom@organisms.be"}, {"index": "278", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "279", "colour": "orange", "code": "    rfile = None\n", "error": "none", "author": "tom@organisms.be"}, {"index": "280", "colour": "orange", "code": "    \"\"\"\n", "error": "none", "author": "tom@organisms.be"}, {"index": "281", "colour": "orange", "code": "    If the request included an entity (body), it will be available\n", "error": "none", "author": "tom@organisms.be"}, {"index": "282", "colour": "orange", "code": "    as a stream in this attribute. However, the rfile will normally\n", "error": "none", "author": "tom@organisms.be"}, {"index": "283", "colour": "orange", "code": "    be read for you between the 'before_request_body' hook and the\n", "error": "none", "author": "tom@organisms.be"}, {"index": "284", "colour": "orange", "code": "    'before_handler' hook, and the resulting string is placed into\n", "error": "none", "author": "tom@organisms.be"}, {"index": "285", "colour": "orange", "code": "    either request.params or the request.body attribute.\n", "error": "none", "author": "tom@organisms.be"}, {"index": "286", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "287", "colour": "orange", "code": "    You may disable the automatic consumption of the rfile by setting\n", "error": "none", "author": "tom@organisms.be"}, {"index": "288", "colour": "orange", "code": "    request.process_request_body to False, either in config for the desired\n", "error": "none", "author": "tom@organisms.be"}, {"index": "289", "colour": "orange", "code": "    path, or in an 'on_start_resource' or 'before_request_body' hook.\n", "error": "none", "author": "tom@organisms.be"}, {"index": "290", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "291", "colour": "orange", "code": "    WARNING: In almost every case, you should not attempt to read from the\n", "error": "none", "author": "tom@organisms.be"}, {"index": "292", "colour": "orange", "code": "    rfile stream after CherryPy's automatic mechanism has read it. If you\n", "error": "none", "author": "tom@organisms.be"}, {"index": "293", "colour": "orange", "code": "    turn off the automatic parsing of rfile, you should read exactly the\n", "error": "none", "author": "tom@organisms.be"}, {"index": "294", "colour": "orange", "code": "    number of bytes specified in request.headers['Content-Length'].\n", "error": "none", "author": "tom@organisms.be"}, {"index": "295", "colour": "orange", "code": "    Ignoring either of these warnings may result in a hung request thread\n", "error": "none", "author": "tom@organisms.be"}, {"index": "296", "colour": "orange", "code": "    or in corruption of the next (pipelined) request.\n", "error": "none", "author": "tom@organisms.be"}, {"index": "297", "colour": "orange", "code": "    \"\"\"\n", "error": "none", "author": "tom@organisms.be"}, {"index": "298", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "299", "colour": "orange", "code": "    process_request_body = True\n", "error": "none", "author": "tom@organisms.be"}, {"index": "300", "colour": "orange", "code": "    \"\"\"\n", "error": "none", "author": "tom@organisms.be"}, {"index": "301", "colour": "orange", "code": "    If True, the rfile (if any) is automatically read and parsed,\n", "error": "none", "author": "tom@organisms.be"}, {"index": "302", "colour": "orange", "code": "    and the result placed into request.params or request.body.\"\"\"\n", "error": "none", "author": "tom@organisms.be"}, {"index": "303", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "304", "colour": "orange", "code": "    methods_with_bodies = (\"POST\", \"PUT\")\n", "error": "none", "author": "tom@organisms.be"}, {"index": "305", "colour": "orange", "code": "    \"\"\"\n", "error": "none", "author": "tom@organisms.be"}, {"index": "306", "colour": "orange", "code": "    A sequence of HTTP methods for which CherryPy will automatically\n", "error": "none", "author": "tom@organisms.be"}, {"index": "307", "colour": "orange", "code": "    attempt to read a body from the rfile.\"\"\"\n", "error": "none", "author": "tom@organisms.be"}, {"index": "308", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "309", "colour": "orange", "code": "    body = None\n", "error": "none", "author": "tom@organisms.be"}, {"index": "310", "colour": "orange", "code": "    \"\"\"\n", "error": "none", "author": "tom@organisms.be"}, {"index": "311", "colour": "orange", "code": "    If the request Content-Type is 'application/x-www-form-urlencoded'\n", "error": "none", "author": "tom@organisms.be"}, {"index": "312", "colour": "orange", "code": "    or multipart, this will be None. Otherwise, this will be an instance\n", "error": "none", "author": "tom@organisms.be"}, {"index": "313", "colour": "orange", "code": "    of :class:`RequestBody<cherrypy._cpreqbody.RequestBody>` (which you\n", "error": "none", "author": "tom@organisms.be"}, {"index": "314", "colour": "orange", "code": "    can .read()); this value is set between the 'before_request_body' and\n", "error": "none", "author": "tom@organisms.be"}, {"index": "315", "colour": "orange", "code": "    'before_handler' hooks (assuming that process_request_body is True).\"\"\"\n", "error": "none", "author": "tom@organisms.be"}, {"index": "316", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "317", "colour": "orange", "code": "    # Dispatch attributes\n", "error": "none", "author": "tom@organisms.be"}, {"index": "318", "colour": "orange", "code": "    dispatch = cherrypy.dispatch.Dispatcher()\n", "error": "none", "author": "tom@organisms.be"}, {"index": "319", "colour": "orange", "code": "    \"\"\"\n", "error": "none", "author": "tom@organisms.be"}, {"index": "320", "colour": "orange", "code": "    The object which looks up the 'page handler' callable and collects\n", "error": "none", "author": "tom@organisms.be"}, {"index": "321", "colour": "orange", "code": "    config for the current request based on the path_info, other\n", "error": "none", "author": "tom@organisms.be"}, {"index": "322", "colour": "orange", "code": "    request attributes, and the application architecture. The core\n", "error": "none", "author": "tom@organisms.be"}, {"index": "323", "colour": "orange", "code": "    calls the dispatcher as early as possible, passing it a 'path_info'\n", "error": "none", "author": "tom@organisms.be"}, {"index": "324", "colour": "orange", "code": "    argument.\n", "error": "none", "author": "tom@organisms.be"}, {"index": "325", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "326", "colour": "orange", "code": "    The default dispatcher discovers the page handler by matching path_info\n", "error": "none", "author": "tom@organisms.be"}, {"index": "327", "colour": "orange", "code": "    to a hierarchical arrangement of objects, starting at request.app.root.\n", "error": "none", "author": "tom@organisms.be"}, {"index": "328", "colour": "orange", "code": "    See help(cherrypy.dispatch) for more information.\"\"\"\n", "error": "none", "author": "tom@organisms.be"}, {"index": "329", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "330", "colour": "orange", "code": "    script_name = \"\"\n", "error": "none", "author": "tom@organisms.be"}, {"index": "331", "colour": "orange", "code": "    \"\"\"\n", "error": "none", "author": "tom@organisms.be"}, {"index": "332", "colour": "orange", "code": "    The 'mount point' of the application which is handling this request.\n", "error": "none", "author": "tom@organisms.be"}, {"index": "333", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "334", "colour": "orange", "code": "    This attribute MUST NOT end in a slash. If the script_name refers to\n", "error": "none", "author": "tom@organisms.be"}, {"index": "335", "colour": "orange", "code": "    the root of the URI, it MUST be an empty string (not \"/\").\n", "error": "none", "author": "tom@organisms.be"}, {"index": "336", "colour": "orange", "code": "    \"\"\"\n", "error": "none", "author": "tom@organisms.be"}, {"index": "337", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "338", "colour": "orange", "code": "    path_info = \"/\"\n", "error": "none", "author": "tom@organisms.be"}, {"index": "339", "colour": "orange", "code": "    \"\"\"\n", "error": "none", "author": "tom@organisms.be"}, {"index": "340", "colour": "orange", "code": "    The 'relative path' portion of the Request-URI. This is relative\n", "error": "none", "author": "tom@organisms.be"}, {"index": "341", "colour": "orange", "code": "    to the script_name ('mount point') of the application which is\n", "error": "none", "author": "tom@organisms.be"}, {"index": "342", "colour": "orange", "code": "    handling this request.\"\"\"\n", "error": "none", "author": "tom@organisms.be"}, {"index": "343", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "344", "colour": "orange", "code": "    login = None\n", "error": "none", "author": "tom@organisms.be"}, {"index": "345", "colour": "orange", "code": "    \"\"\"\n", "error": "none", "author": "tom@organisms.be"}, {"index": "346", "colour": "orange", "code": "    When authentication is used during the request processing this is\n", "error": "none", "author": "tom@organisms.be"}, {"index": "347", "colour": "orange", "code": "    set to 'False' if it failed and to the 'username' value if it succeeded.\n", "error": "none", "author": "tom@organisms.be"}, {"index": "348", "colour": "orange", "code": "    The default 'None' implies that no authentication happened.\"\"\"\n", "error": "none", "author": "tom@organisms.be"}, {"index": "349", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "350", "colour": "orange", "code": "    # Note that cherrypy.url uses \"if request.app:\" to determine whether\n", "error": "none", "author": "tom@organisms.be"}, {"index": "351", "colour": "orange", "code": "    # the call is during a real HTTP request or not. So leave this None.\n", "error": "none", "author": "tom@organisms.be"}, {"index": "352", "colour": "orange", "code": "    app = None\n", "error": "none", "author": "tom@organisms.be"}, {"index": "353", "colour": "orange", "code": "    \"\"\"The cherrypy.Application object which is handling this request.\"\"\"\n", "error": "none", "author": "tom@organisms.be"}, {"index": "354", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "355", "colour": "orange", "code": "    handler = None\n", "error": "none", "author": "tom@organisms.be"}, {"index": "356", "colour": "orange", "code": "    \"\"\"\n", "error": "none", "author": "tom@organisms.be"}, {"index": "357", "colour": "orange", "code": "    The function, method, or other callable which CherryPy will call to\n", "error": "none", "author": "tom@organisms.be"}, {"index": "358", "colour": "orange", "code": "    produce the response. The discovery of the handler and the arguments\n", "error": "none", "author": "tom@organisms.be"}, {"index": "359", "colour": "orange", "code": "    it will receive are determined by the request.dispatch object.\n", "error": "none", "author": "tom@organisms.be"}, {"index": "360", "colour": "orange", "code": "    By default, the handler is discovered by walking a tree of objects\n", "error": "none", "author": "tom@organisms.be"}, {"index": "361", "colour": "orange", "code": "    starting at request.app.root, and is then passed all HTTP params\n", "error": "none", "author": "tom@organisms.be"}, {"index": "362", "colour": "orange", "code": "    (from the query string and POST body) as keyword arguments.\"\"\"\n", "error": "none", "author": "tom@organisms.be"}, {"index": "363", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "364", "colour": "orange", "code": "    toolmaps = {}\n", "error": "none", "author": "tom@organisms.be"}, {"index": "365", "colour": "orange", "code": "    \"\"\"\n", "error": "none", "author": "tom@organisms.be"}, {"index": "366", "colour": "orange", "code": "    A nested dict of all Toolboxes and Tools in effect for this request,\n", "error": "none", "author": "tom@organisms.be"}, {"index": "367", "colour": "orange", "code": "    of the form: {Toolbox.namespace: {Tool.name: config dict}}.\"\"\"\n", "error": "none", "author": "tom@organisms.be"}, {"index": "368", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "369", "colour": "orange", "code": "    config = None\n", "error": "none", "author": "tom@organisms.be"}, {"index": "370", "colour": "orange", "code": "    \"\"\"\n", "error": "none", "author": "tom@organisms.be"}, {"index": "371", "colour": "orange", "code": "    A flat dict of all configuration entries which apply to the\n", "error": "none", "author": "tom@organisms.be"}, {"index": "372", "colour": "orange", "code": "    current request. These entries are collected from global config,\n", "error": "none", "author": "tom@organisms.be"}, {"index": "373", "colour": "orange", "code": "    application config (based on request.path_info), and from handler\n", "error": "none", "author": "tom@organisms.be"}, {"index": "374", "colour": "orange", "code": "    config (exactly how is governed by the request.dispatch object in\n", "error": "none", "author": "tom@organisms.be"}, {"index": "375", "colour": "orange", "code": "    effect for this request; by default, handler config can be attached\n", "error": "none", "author": "tom@organisms.be"}, {"index": "376", "colour": "orange", "code": "    anywhere in the tree between request.app.root and the final handler,\n", "error": "none", "author": "tom@organisms.be"}, {"index": "377", "colour": "orange", "code": "    and inherits downward).\"\"\"\n", "error": "none", "author": "tom@organisms.be"}, {"index": "378", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "379", "colour": "orange", "code": "    is_index = None\n", "error": "none", "author": "tom@organisms.be"}, {"index": "380", "colour": "orange", "code": "    \"\"\"\n", "error": "none", "author": "tom@organisms.be"}, {"index": "381", "colour": "orange", "code": "    This will be True if the current request is mapped to an 'index'\n", "error": "none", "author": "tom@organisms.be"}, {"index": "382", "colour": "orange", "code": "    resource handler (also, a 'default' handler if path_info ends with\n", "error": "none", "author": "tom@organisms.be"}, {"index": "383", "colour": "orange", "code": "    a slash). The value may be used to automatically redirect the\n", "error": "none", "author": "tom@organisms.be"}, {"index": "384", "colour": "orange", "code": "    user-agent to a 'more canonical' URL which either adds or removes\n", "error": "none", "author": "tom@organisms.be"}, {"index": "385", "colour": "orange", "code": "    the trailing slash. See cherrypy.tools.trailing_slash.\"\"\"\n", "error": "none", "author": "tom@organisms.be"}, {"index": "386", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "387", "colour": "orange", "code": "    hooks = HookMap(hookpoints)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "388", "colour": "orange", "code": "    \"\"\"\n", "error": "none", "author": "tom@organisms.be"}, {"index": "389", "colour": "orange", "code": "    A HookMap (dict-like object) of the form: {hookpoint: [hook, ...]}.\n", "error": "none", "author": "tom@organisms.be"}, {"index": "390", "colour": "orange", "code": "    Each key is a str naming the hook point, and each value is a list\n", "error": "none", "author": "tom@organisms.be"}, {"index": "391", "colour": "orange", "code": "    of hooks which will be called at that hook point during this request.\n", "error": "none", "author": "tom@organisms.be"}, {"index": "392", "colour": "orange", "code": "    The list of hooks is generally populated as early as possible (mostly\n", "error": "none", "author": "tom@organisms.be"}, {"index": "393", "colour": "orange", "code": "    from Tools specified in config), but may be extended at any time.\n", "error": "none", "author": "tom@organisms.be"}, {"index": "394", "colour": "orange", "code": "    See also: _cprequest.Hook, _cprequest.HookMap, and cherrypy.tools.\"\"\"\n", "error": "none", "author": "tom@organisms.be"}, {"index": "395", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "396", "colour": "orange", "code": "    error_response = cherrypy.HTTPError(500).set_response\n", "error": "none", "author": "tom@organisms.be"}, {"index": "397", "colour": "orange", "code": "    \"\"\"\n", "error": "none", "author": "tom@organisms.be"}, {"index": "398", "colour": "orange", "code": "    The no-arg callable which will handle unexpected, untrapped errors\n", "error": "none", "author": "tom@organisms.be"}, {"index": "399", "colour": "orange", "code": "    during request processing. This is not used for expected exceptions\n", "error": "none", "author": "tom@organisms.be"}, {"index": "400", "colour": "orange", "code": "    (like NotFound, HTTPError, or HTTPRedirect) which are raised in\n", "error": "none", "author": "tom@organisms.be"}, {"index": "401", "colour": "orange", "code": "    response to expected conditions (those should be customized either\n", "error": "none", "author": "tom@organisms.be"}, {"index": "402", "colour": "orange", "code": "    via request.error_page or by overriding HTTPError.set_response).\n", "error": "none", "author": "tom@organisms.be"}, {"index": "403", "colour": "orange", "code": "    By default, error_response uses HTTPError(500) to return a generic\n", "error": "none", "author": "tom@organisms.be"}, {"index": "404", "colour": "orange", "code": "    error response to the user-agent.\"\"\"\n", "error": "none", "author": "tom@organisms.be"}, {"index": "405", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "406", "colour": "orange", "code": "    error_page = {}\n", "error": "none", "author": "tom@organisms.be"}, {"index": "407", "colour": "orange", "code": "    \"\"\"\n", "error": "none", "author": "tom@organisms.be"}, {"index": "408", "colour": "orange", "code": "    A dict of {error code: response filename or callable} pairs.\n", "error": "none", "author": "tom@organisms.be"}, {"index": "409", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "410", "colour": "orange", "code": "    The error code must be an int representing a given HTTP error code,\n", "error": "none", "author": "tom@organisms.be"}, {"index": "411", "colour": "orange", "code": "    or the string 'default', which will be used if no matching entry\n", "error": "none", "author": "tom@organisms.be"}, {"index": "412", "colour": "orange", "code": "    is found for a given numeric code.\n", "error": "none", "author": "tom@organisms.be"}, {"index": "413", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "414", "colour": "orange", "code": "    If a filename is provided, the file should contain a Python string-\n", "error": "none", "author": "tom@organisms.be"}, {"index": "415", "colour": "orange", "code": "    formatting template, and can expect by default to receive format\n", "error": "none", "author": "tom@organisms.be"}, {"index": "416", "colour": "orange", "code": "    values with the mapping keys %(status)s, %(message)s, %(traceback)s,\n", "error": "none", "author": "tom@organisms.be"}, {"index": "417", "colour": "orange", "code": "    and %(version)s. The set of format mappings can be extended by\n", "error": "none", "author": "tom@organisms.be"}, {"index": "418", "colour": "orange", "code": "    overriding HTTPError.set_response.\n", "error": "none", "author": "tom@organisms.be"}, {"index": "419", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "420", "colour": "orange", "code": "    If a callable is provided, it will be called by default with keyword\n", "error": "none", "author": "tom@organisms.be"}, {"index": "421", "colour": "orange", "code": "    arguments 'status', 'message', 'traceback', and 'version', as for a\n", "error": "none", "author": "tom@organisms.be"}, {"index": "422", "colour": "orange", "code": "    string-formatting template. The callable must return a string or iterable of\n", "error": "none", "author": "tom@organisms.be"}, {"index": "423", "colour": "orange", "code": "    strings which will be set to response.body. It may also override headers or\n", "error": "none", "author": "tom@organisms.be"}, {"index": "424", "colour": "orange", "code": "    perform any other processing.\n", "error": "none", "author": "tom@organisms.be"}, {"index": "425", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "426", "colour": "orange", "code": "    If no entry is given for an error code, and no 'default' entry exists,\n", "error": "none", "author": "tom@organisms.be"}, {"index": "427", "colour": "orange", "code": "    a default template will be used.\n", "error": "none", "author": "tom@organisms.be"}, {"index": "428", "colour": "orange", "code": "    \"\"\"\n", "error": "none", "author": "tom@organisms.be"}, {"index": "429", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "430", "colour": "orange", "code": "    show_tracebacks = True\n", "error": "none", "author": "tom@organisms.be"}, {"index": "431", "colour": "orange", "code": "    \"\"\"\n", "error": "none", "author": "tom@organisms.be"}, {"index": "432", "colour": "orange", "code": "    If True, unexpected errors encountered during request processing will\n", "error": "none", "author": "tom@organisms.be"}, {"index": "433", "colour": "orange", "code": "    include a traceback in the response body.\"\"\"\n", "error": "none", "author": "tom@organisms.be"}, {"index": "434", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "435", "colour": "orange", "code": "    show_mismatched_params = True\n", "error": "none", "author": "tom@organisms.be"}, {"index": "436", "colour": "orange", "code": "    \"\"\"\n", "error": "none", "author": "tom@organisms.be"}, {"index": "437", "colour": "orange", "code": "    If True, mismatched parameters encountered during PageHandler invocation\n", "error": "none", "author": "tom@organisms.be"}, {"index": "438", "colour": "orange", "code": "    processing will be included in the response body.\"\"\"\n", "error": "none", "author": "tom@organisms.be"}, {"index": "439", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "440", "colour": "orange", "code": "    throws = (KeyboardInterrupt, SystemExit, cherrypy.InternalRedirect)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "441", "colour": "orange", "code": "    \"\"\"The sequence of exceptions which Request.run does not trap.\"\"\"\n", "error": "none", "author": "tom@organisms.be"}, {"index": "442", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "443", "colour": "orange", "code": "    throw_errors = False\n", "error": "none", "author": "tom@organisms.be"}, {"index": "444", "colour": "orange", "code": "    \"\"\"\n", "error": "none", "author": "tom@organisms.be"}, {"index": "445", "colour": "orange", "code": "    If True, Request.run will not trap any errors (except HTTPRedirect and\n", "error": "none", "author": "tom@organisms.be"}, {"index": "446", "colour": "orange", "code": "    HTTPError, which are more properly called 'exceptions', not errors).\"\"\"\n", "error": "none", "author": "tom@organisms.be"}, {"index": "447", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "448", "colour": "orange", "code": "    closed = False\n", "error": "none", "author": "tom@organisms.be"}, {"index": "449", "colour": "orange", "code": "    \"\"\"True once the close method has been called, False otherwise.\"\"\"\n", "error": "none", "author": "tom@organisms.be"}, {"index": "450", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "451", "colour": "orange", "code": "    stage = None\n", "error": "none", "author": "tom@organisms.be"}, {"index": "452", "colour": "orange", "code": "    \"\"\"\n", "error": "none", "author": "tom@organisms.be"}, {"index": "453", "colour": "orange", "code": "    A string containing the stage reached in the request-handling process.\n", "error": "none", "author": "tom@organisms.be"}, {"index": "454", "colour": "orange", "code": "    This is useful when debugging a live server with hung requests.\"\"\"\n", "error": "none", "author": "tom@organisms.be"}, {"index": "455", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "456", "colour": "green", "code": "    namespaces = _cpconfig.NamespaceSet(\n", "error": "W", "author": "tom@organisms.be"}, {"index": "457", "colour": "orange", "code": "        **{\"hooks\": hooks_namespace,\n", "error": "none", "author": "tom@organisms.be"}, {"index": "458", "colour": "orange", "code": "           \"request\": request_namespace,\n", "error": "none", "author": "tom@organisms.be"}, {"index": "459", "colour": "orange", "code": "           \"response\": response_namespace,\n", "error": "none", "author": "tom@organisms.be"}, {"index": "460", "colour": "orange", "code": "           \"error_page\": error_page_namespace,\n", "error": "none", "author": "tom@organisms.be"}, {"index": "461", "colour": "orange", "code": "           \"tools\": cherrypy.tools,\n", "error": "none", "author": "tom@organisms.be"}, {"index": "462", "colour": "orange", "code": "           })\n", "error": "none", "author": "tom@organisms.be"}, {"index": "463", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "464", "colour": "orange", "code": "    def __init__(self, local_host, remote_host, scheme=\"http\",\n", "error": "none", "author": "tom@organisms.be"}, {"index": "465", "colour": "orange", "code": "                 server_protocol=\"HTTP/1.1\"):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "466", "colour": "orange", "code": "        \"\"\"Populate a new Request object.\n", "error": "none", "author": "tom@organisms.be"}, {"index": "467", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "468", "colour": "orange", "code": "        local_host should be an httputil.Host object with the server info.\n", "error": "none", "author": "tom@organisms.be"}, {"index": "469", "colour": "orange", "code": "        remote_host should be an httputil.Host object with the client info.\n", "error": "none", "author": "tom@organisms.be"}, {"index": "470", "colour": "orange", "code": "        scheme should be a string, either \"http\" or \"https\".\n", "error": "none", "author": "tom@organisms.be"}, {"index": "471", "colour": "orange", "code": "        \"\"\"\n", "error": "none", "author": "tom@organisms.be"}, {"index": "472", "colour": "orange", "code": "        self.local = local_host\n", "error": "none", "author": "tom@organisms.be"}, {"index": "473", "colour": "orange", "code": "        self.remote = remote_host\n", "error": "none", "author": "tom@organisms.be"}, {"index": "474", "colour": "orange", "code": "        self.scheme = scheme\n", "error": "none", "author": "tom@organisms.be"}, {"index": "475", "colour": "orange", "code": "        self.server_protocol = server_protocol\n", "error": "none", "author": "tom@organisms.be"}, {"index": "476", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "477", "colour": "orange", "code": "        self.closed = False\n", "error": "none", "author": "tom@organisms.be"}, {"index": "478", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "479", "colour": "orange", "code": "        # Put a *copy* of the class error_page into self.\n", "error": "none", "author": "tom@organisms.be"}, {"index": "480", "colour": "orange", "code": "        self.error_page = self.error_page.copy()\n", "error": "none", "author": "tom@organisms.be"}, {"index": "481", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "482", "colour": "orange", "code": "        # Put a *copy* of the class namespaces into self.\n", "error": "none", "author": "tom@organisms.be"}, {"index": "483", "colour": "orange", "code": "        self.namespaces = self.namespaces.copy()\n", "error": "none", "author": "tom@organisms.be"}, {"index": "484", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "485", "colour": "orange", "code": "        self.stage = None\n", "error": "none", "author": "tom@organisms.be"}, {"index": "486", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "487", "colour": "orange", "code": "    def close(self):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "488", "colour": "orange", "code": "        \"\"\"Run cleanup code. (Core)\"\"\"\n", "error": "none", "author": "tom@organisms.be"}, {"index": "489", "colour": "orange", "code": "        if not self.closed:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "490", "colour": "orange", "code": "            self.closed = True\n", "error": "none", "author": "tom@organisms.be"}, {"index": "491", "colour": "orange", "code": "            self.stage = 'on_end_request'\n", "error": "none", "author": "tom@organisms.be"}, {"index": "492", "colour": "orange", "code": "            self.hooks.run('on_end_request')\n", "error": "none", "author": "tom@organisms.be"}, {"index": "493", "colour": "orange", "code": "            self.stage = 'close'\n", "error": "none", "author": "tom@organisms.be"}, {"index": "494", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "495", "colour": "blue", "code": "    def run(self, method, path, query_string, req_protocol, headers, rfile):\n", "error": "R", "author": "tom@organisms.be"}, {"index": "496", "colour": "orange", "code": "        r\"\"\"Process the Request. (Core)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "497", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "498", "colour": "orange", "code": "        method, path, query_string, and req_protocol should be pulled directly\n", "error": "none", "author": "tom@organisms.be"}, {"index": "499", "colour": "orange", "code": "        from the Request-Line (e.g. \"GET /path?key=val HTTP/1.0\").\n", "error": "none", "author": "tom@organisms.be"}, {"index": "500", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "501", "colour": "orange", "code": "        path\n", "error": "none", "author": "tom@organisms.be"}, {"index": "502", "colour": "orange", "code": "            This should be %XX-unquoted, but query_string should not be.\n", "error": "none", "author": "tom@organisms.be"}, {"index": "503", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "504", "colour": "orange", "code": "            When using Python 2, they both MUST be byte strings,\n", "error": "none", "author": "tom@organisms.be"}, {"index": "505", "colour": "orange", "code": "            not unicode strings.\n", "error": "none", "author": "tom@organisms.be"}, {"index": "506", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "507", "colour": "orange", "code": "            When using Python 3, they both MUST be unicode strings,\n", "error": "none", "author": "tom@organisms.be"}, {"index": "508", "colour": "orange", "code": "            not byte strings, and preferably not bytes \\x00-\\xFF\n", "error": "none", "author": "tom@organisms.be"}, {"index": "509", "colour": "orange", "code": "            disguised as unicode.\n", "error": "none", "author": "tom@organisms.be"}, {"index": "510", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "511", "colour": "orange", "code": "        headers\n", "error": "none", "author": "tom@organisms.be"}, {"index": "512", "colour": "orange", "code": "            A list of (name, value) tuples.\n", "error": "none", "author": "tom@organisms.be"}, {"index": "513", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "514", "colour": "orange", "code": "        rfile\n", "error": "none", "author": "tom@organisms.be"}, {"index": "515", "colour": "orange", "code": "            A file-like object containing the HTTP request entity.\n", "error": "none", "author": "tom@organisms.be"}, {"index": "516", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "517", "colour": "orange", "code": "        When run() is done, the returned object should have 3 attributes:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "518", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "519", "colour": "orange", "code": "          * status, e.g. \"200 OK\"\n", "error": "none", "author": "tom@organisms.be"}, {"index": "520", "colour": "orange", "code": "          * header_list, a list of (name, value) tuples\n", "error": "none", "author": "tom@organisms.be"}, {"index": "521", "colour": "orange", "code": "          * body, an iterable yielding strings\n", "error": "none", "author": "tom@organisms.be"}, {"index": "522", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "523", "colour": "orange", "code": "        Consumer code (HTTP servers) should then access these response\n", "error": "none", "author": "tom@organisms.be"}, {"index": "524", "colour": "orange", "code": "        attributes to build the outbound stream.\n", "error": "none", "author": "tom@organisms.be"}, {"index": "525", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "526", "colour": "orange", "code": "        \"\"\"\n", "error": "none", "author": "tom@organisms.be"}, {"index": "527", "colour": "orange", "code": "        response = cherrypy.serving.response\n", "error": "none", "author": "tom@organisms.be"}, {"index": "528", "colour": "orange", "code": "        self.stage = 'run'\n", "error": "none", "author": "tom@organisms.be"}, {"index": "529", "colour": "orange", "code": "        try:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "530", "colour": "orange", "code": "            self.error_response = cherrypy.HTTPError(500).set_response\n", "error": "none", "author": "tom@organisms.be"}, {"index": "531", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "532", "colour": "orange", "code": "            self.method = method\n", "error": "none", "author": "tom@organisms.be"}, {"index": "533", "colour": "orange", "code": "            path = path or \"/\"\n", "error": "none", "author": "tom@organisms.be"}, {"index": "534", "colour": "orange", "code": "            self.query_string = query_string or ''\n", "error": "none", "author": "tom@organisms.be"}, {"index": "535", "colour": "orange", "code": "            self.params = {}\n", "error": "none", "author": "tom@organisms.be"}, {"index": "536", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "537", "colour": "orange", "code": "            # Compare request and server HTTP protocol versions, in case our\n", "error": "none", "author": "tom@organisms.be"}, {"index": "538", "colour": "orange", "code": "            # server does not support the requested protocol. Limit our output\n", "error": "none", "author": "tom@organisms.be"}, {"index": "539", "colour": "orange", "code": "            # to min(req, server). We want the following output:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "540", "colour": "orange", "code": "            #     request    server     actual written   supported response\n", "error": "none", "author": "tom@organisms.be"}, {"index": "541", "colour": "orange", "code": "            #     protocol   protocol  response protocol    feature set\n", "error": "none", "author": "tom@organisms.be"}, {"index": "542", "colour": "orange", "code": "            # a     1.0        1.0           1.0                1.0\n", "error": "none", "author": "tom@organisms.be"}, {"index": "543", "colour": "orange", "code": "            # b     1.0        1.1           1.1                1.0\n", "error": "none", "author": "tom@organisms.be"}, {"index": "544", "colour": "orange", "code": "            # c     1.1        1.0           1.0                1.0\n", "error": "none", "author": "tom@organisms.be"}, {"index": "545", "colour": "orange", "code": "            # d     1.1        1.1           1.1                1.1\n", "error": "none", "author": "tom@organisms.be"}, {"index": "546", "colour": "orange", "code": "            # Notice that, in (b), the response will be \"HTTP/1.1\" even though\n", "error": "none", "author": "tom@organisms.be"}, {"index": "547", "colour": "orange", "code": "            # the client only understands 1.0. RFC 2616 10.5.6 says we should\n", "error": "none", "author": "tom@organisms.be"}, {"index": "548", "colour": "orange", "code": "            # only return 505 if the _major_ version is different.\n", "error": "none", "author": "tom@organisms.be"}, {"index": "549", "colour": "orange", "code": "            rp = int(req_protocol[5]), int(req_protocol[7])\n", "error": "none", "author": "tom@organisms.be"}, {"index": "550", "colour": "orange", "code": "            sp = int(self.server_protocol[5]), int(self.server_protocol[7])\n", "error": "none", "author": "tom@organisms.be"}, {"index": "551", "colour": "orange", "code": "            self.protocol = min(rp, sp)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "552", "colour": "orange", "code": "            response.headers.protocol = self.protocol\n", "error": "none", "author": "tom@organisms.be"}, {"index": "553", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "554", "colour": "orange", "code": "            # Rebuild first line of the request (e.g. \"GET /path HTTP/1.0\").\n", "error": "none", "author": "tom@organisms.be"}, {"index": "555", "colour": "orange", "code": "            url = path\n", "error": "none", "author": "tom@organisms.be"}, {"index": "556", "colour": "orange", "code": "            if query_string:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "557", "colour": "orange", "code": "                url += '?' + query_string\n", "error": "none", "author": "tom@organisms.be"}, {"index": "558", "colour": "orange", "code": "            self.request_line = '%s %s %s' % (method, url, req_protocol)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "559", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "560", "colour": "orange", "code": "            self.header_list = list(headers)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "561", "colour": "orange", "code": "            self.headers = httputil.HeaderMap()\n", "error": "none", "author": "tom@organisms.be"}, {"index": "562", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "563", "colour": "orange", "code": "            self.rfile = rfile\n", "error": "none", "author": "tom@organisms.be"}, {"index": "564", "colour": "orange", "code": "            self.body = None\n", "error": "none", "author": "tom@organisms.be"}, {"index": "565", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "566", "colour": "orange", "code": "            self.cookie = SimpleCookie()\n", "error": "none", "author": "tom@organisms.be"}, {"index": "567", "colour": "orange", "code": "            self.handler = None\n", "error": "none", "author": "tom@organisms.be"}, {"index": "568", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "569", "colour": "orange", "code": "            # path_info should be the path from the\n", "error": "none", "author": "tom@organisms.be"}, {"index": "570", "colour": "orange", "code": "            # app root (script_name) to the handler.\n", "error": "none", "author": "tom@organisms.be"}, {"index": "571", "colour": "orange", "code": "            self.script_name = self.app.script_name\n", "error": "none", "author": "tom@organisms.be"}, {"index": "572", "colour": "orange", "code": "            self.path_info = pi = path[len(self.script_name):]\n", "error": "none", "author": "tom@organisms.be"}, {"index": "573", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "574", "colour": "orange", "code": "            self.stage = 'respond'\n", "error": "none", "author": "tom@organisms.be"}, {"index": "575", "colour": "orange", "code": "            self.respond(pi)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "576", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "577", "colour": "orange", "code": "        except self.throws:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "578", "colour": "orange", "code": "            raise\n", "error": "none", "author": "tom@organisms.be"}, {"index": "579", "colour": "green", "code": "        except:\n", "error": "W", "author": "tom@organisms.be"}, {"index": "580", "colour": "orange", "code": "            if self.throw_errors:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "581", "colour": "orange", "code": "                raise\n", "error": "none", "author": "tom@organisms.be"}, {"index": "582", "colour": "orange", "code": "            else:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "583", "colour": "orange", "code": "                # Failure in setup, error handler or finalize. Bypass them.\n", "error": "none", "author": "tom@organisms.be"}, {"index": "584", "colour": "orange", "code": "                # Can't use handle_error because we may not have hooks yet.\n", "error": "none", "author": "tom@organisms.be"}, {"index": "585", "colour": "orange", "code": "                cherrypy.log(traceback=True, severity=40)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "586", "colour": "orange", "code": "                if self.show_tracebacks:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "587", "colour": "orange", "code": "                    body = format_exc()\n", "error": "none", "author": "tom@organisms.be"}, {"index": "588", "colour": "orange", "code": "                else:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "589", "colour": "orange", "code": "                    body = \"\"\n", "error": "none", "author": "tom@organisms.be"}, {"index": "590", "colour": "orange", "code": "                r = bare_error(body)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "591", "colour": "orange", "code": "                response.output_status, response.header_list, response.body = r\n", "error": "none", "author": "tom@organisms.be"}, {"index": "592", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "593", "colour": "orange", "code": "        if self.method == \"HEAD\":\n", "error": "none", "author": "tom@organisms.be"}, {"index": "594", "colour": "orange", "code": "            # HEAD requests MUST NOT return a message-body in the response.\n", "error": "none", "author": "tom@organisms.be"}, {"index": "595", "colour": "orange", "code": "            response.body = []\n", "error": "none", "author": "tom@organisms.be"}, {"index": "596", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "597", "colour": "orange", "code": "        try:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "598", "colour": "orange", "code": "            cherrypy.log.access()\n", "error": "none", "author": "tom@organisms.be"}, {"index": "599", "colour": "green", "code": "        except:\n", "error": "W", "author": "tom@organisms.be"}, {"index": "600", "colour": "orange", "code": "            cherrypy.log.error(traceback=True)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "601", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "602", "colour": "orange", "code": "        if response.timed_out:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "603", "colour": "orange", "code": "            raise cherrypy.TimeoutError()\n", "error": "none", "author": "tom@organisms.be"}, {"index": "604", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "605", "colour": "orange", "code": "        return response\n", "error": "none", "author": "tom@organisms.be"}, {"index": "606", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "607", "colour": "orange", "code": "    # Uncomment for stage debugging\n", "error": "none", "author": "tom@organisms.be"}, {"index": "608", "colour": "orange", "code": "    # stage = property(lambda self: self._stage, lambda self, v: print(v))\n", "error": "none", "author": "tom@organisms.be"}, {"index": "609", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "610", "colour": "orange", "code": "    def respond(self, path_info):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "611", "colour": "orange", "code": "        \"\"\"Generate a response for the resource at self.path_info. (Core)\"\"\"\n", "error": "none", "author": "tom@organisms.be"}, {"index": "612", "colour": "orange", "code": "        response = cherrypy.serving.response\n", "error": "none", "author": "tom@organisms.be"}, {"index": "613", "colour": "orange", "code": "        try:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "614", "colour": "orange", "code": "            try:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "615", "colour": "orange", "code": "                try:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "616", "colour": "orange", "code": "                    if self.app is None:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "617", "colour": "orange", "code": "                        raise cherrypy.NotFound()\n", "error": "none", "author": "tom@organisms.be"}, {"index": "618", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "619", "colour": "orange", "code": "                    # Get the 'Host' header, so we can HTTPRedirect properly.\n", "error": "none", "author": "tom@organisms.be"}, {"index": "620", "colour": "orange", "code": "                    self.stage = 'process_headers'\n", "error": "none", "author": "tom@organisms.be"}, {"index": "621", "colour": "orange", "code": "                    self.process_headers()\n", "error": "none", "author": "tom@organisms.be"}, {"index": "622", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "623", "colour": "orange", "code": "                    # Make a copy of the class hooks\n", "error": "none", "author": "tom@organisms.be"}, {"index": "624", "colour": "orange", "code": "                    self.hooks = self.__class__.hooks.copy()\n", "error": "none", "author": "tom@organisms.be"}, {"index": "625", "colour": "orange", "code": "                    self.toolmaps = {}\n", "error": "none", "author": "tom@organisms.be"}, {"index": "626", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "627", "colour": "orange", "code": "                    self.stage = 'get_resource'\n", "error": "none", "author": "tom@organisms.be"}, {"index": "628", "colour": "orange", "code": "                    self.get_resource(path_info)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "629", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "630", "colour": "orange", "code": "                    self.body = _cpreqbody.RequestBody(\n", "error": "none", "author": "tom@organisms.be"}, {"index": "631", "colour": "orange", "code": "                        self.rfile, self.headers, request_params=self.params)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "632", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "633", "colour": "orange", "code": "                    self.namespaces(self.config)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "634", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "635", "colour": "orange", "code": "                    self.stage = 'on_start_resource'\n", "error": "none", "author": "tom@organisms.be"}, {"index": "636", "colour": "orange", "code": "                    self.hooks.run('on_start_resource')\n", "error": "none", "author": "tom@organisms.be"}, {"index": "637", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "638", "colour": "orange", "code": "                    # Parse the querystring\n", "error": "none", "author": "tom@organisms.be"}, {"index": "639", "colour": "orange", "code": "                    self.stage = 'process_query_string'\n", "error": "none", "author": "tom@organisms.be"}, {"index": "640", "colour": "orange", "code": "                    self.process_query_string()\n", "error": "none", "author": "tom@organisms.be"}, {"index": "641", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "642", "colour": "orange", "code": "                    # Process the body\n", "error": "none", "author": "tom@organisms.be"}, {"index": "643", "colour": "orange", "code": "                    if self.process_request_body:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "644", "colour": "orange", "code": "                        if self.method not in self.methods_with_bodies:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "645", "colour": "orange", "code": "                            self.process_request_body = False\n", "error": "none", "author": "tom@organisms.be"}, {"index": "646", "colour": "orange", "code": "                    self.stage = 'before_request_body'\n", "error": "none", "author": "tom@organisms.be"}, {"index": "647", "colour": "orange", "code": "                    self.hooks.run('before_request_body')\n", "error": "none", "author": "tom@organisms.be"}, {"index": "648", "colour": "orange", "code": "                    if self.process_request_body:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "649", "colour": "orange", "code": "                        self.body.process()\n", "error": "none", "author": "tom@organisms.be"}, {"index": "650", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "651", "colour": "orange", "code": "                    # Run the handler\n", "error": "none", "author": "tom@organisms.be"}, {"index": "652", "colour": "orange", "code": "                    self.stage = 'before_handler'\n", "error": "none", "author": "tom@organisms.be"}, {"index": "653", "colour": "orange", "code": "                    self.hooks.run('before_handler')\n", "error": "none", "author": "tom@organisms.be"}, {"index": "654", "colour": "orange", "code": "                    if self.handler:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "655", "colour": "orange", "code": "                        self.stage = 'handler'\n", "error": "none", "author": "tom@organisms.be"}, {"index": "656", "colour": "red", "code": "                        response.body = self.handler()\n", "error": "E", "author": "tom@organisms.be"}, {"index": "657", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "658", "colour": "orange", "code": "                    # Finalize\n", "error": "none", "author": "tom@organisms.be"}, {"index": "659", "colour": "orange", "code": "                    self.stage = 'before_finalize'\n", "error": "none", "author": "tom@organisms.be"}, {"index": "660", "colour": "orange", "code": "                    self.hooks.run('before_finalize')\n", "error": "none", "author": "tom@organisms.be"}, {"index": "661", "colour": "orange", "code": "                    response.finalize()\n", "error": "none", "author": "tom@organisms.be"}, {"index": "662", "colour": "orange", "code": "                except (cherrypy.HTTPRedirect, cherrypy.HTTPError):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "663", "colour": "orange", "code": "                    inst = sys.exc_info()[1]\n", "error": "none", "author": "tom@organisms.be"}, {"index": "664", "colour": "orange", "code": "                    inst.set_response()\n", "error": "none", "author": "tom@organisms.be"}, {"index": "665", "colour": "orange", "code": "                    self.stage = 'before_finalize (HTTPError)'\n", "error": "none", "author": "tom@organisms.be"}, {"index": "666", "colour": "orange", "code": "                    self.hooks.run('before_finalize')\n", "error": "none", "author": "tom@organisms.be"}, {"index": "667", "colour": "orange", "code": "                    response.finalize()\n", "error": "none", "author": "tom@organisms.be"}, {"index": "668", "colour": "orange", "code": "            finally:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "669", "colour": "orange", "code": "                self.stage = 'on_end_resource'\n", "error": "none", "author": "tom@organisms.be"}, {"index": "670", "colour": "orange", "code": "                self.hooks.run('on_end_resource')\n", "error": "none", "author": "tom@organisms.be"}, {"index": "671", "colour": "orange", "code": "        except self.throws:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "672", "colour": "orange", "code": "            raise\n", "error": "none", "author": "tom@organisms.be"}, {"index": "673", "colour": "green", "code": "        except:\n", "error": "W", "author": "tom@organisms.be"}, {"index": "674", "colour": "orange", "code": "            if self.throw_errors:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "675", "colour": "orange", "code": "                raise\n", "error": "none", "author": "tom@organisms.be"}, {"index": "676", "colour": "orange", "code": "            self.handle_error()\n", "error": "none", "author": "tom@organisms.be"}, {"index": "677", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "678", "colour": "orange", "code": "    def process_query_string(self):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "679", "colour": "orange", "code": "        \"\"\"Parse the query string into Python structures. (Core)\"\"\"\n", "error": "none", "author": "tom@organisms.be"}, {"index": "680", "colour": "orange", "code": "        try:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "681", "colour": "orange", "code": "            p = httputil.parse_query_string(\n", "error": "none", "author": "tom@organisms.be"}, {"index": "682", "colour": "orange", "code": "                self.query_string, encoding=self.query_string_encoding)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "683", "colour": "orange", "code": "        except UnicodeDecodeError:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "684", "colour": "orange", "code": "            raise cherrypy.HTTPError(\n", "error": "none", "author": "tom@organisms.be"}, {"index": "685", "colour": "orange", "code": "                404, \"The given query string could not be processed. Query \"\n", "error": "none", "author": "tom@organisms.be"}, {"index": "686", "colour": "orange", "code": "                \"strings for this resource must be encoded with %r.\" %\n", "error": "none", "author": "tom@organisms.be"}, {"index": "687", "colour": "orange", "code": "                self.query_string_encoding)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "688", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "689", "colour": "orange", "code": "        # Python 2 only: keyword arguments must be byte strings (type 'str').\n", "error": "none", "author": "tom@organisms.be"}, {"index": "690", "colour": "orange", "code": "        if not py3k:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "691", "colour": "orange", "code": "            for key, value in p.items():\n", "error": "none", "author": "tom@organisms.be"}, {"index": "692", "colour": "orange", "code": "                if isinstance(key, unicode):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "693", "colour": "orange", "code": "                    del p[key]\n", "error": "none", "author": "tom@organisms.be"}, {"index": "694", "colour": "orange", "code": "                    p[key.encode(self.query_string_encoding)] = value\n", "error": "none", "author": "tom@organisms.be"}, {"index": "695", "colour": "orange", "code": "        self.params.update(p)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "696", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "697", "colour": "orange", "code": "    def process_headers(self):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "698", "colour": "orange", "code": "        \"\"\"Parse HTTP header data into Python structures. (Core)\"\"\"\n", "error": "none", "author": "tom@organisms.be"}, {"index": "699", "colour": "orange", "code": "        # Process the headers into self.headers\n", "error": "none", "author": "tom@organisms.be"}, {"index": "700", "colour": "orange", "code": "        headers = self.headers\n", "error": "none", "author": "tom@organisms.be"}, {"index": "701", "colour": "orange", "code": "        for name, value in self.header_list:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "702", "colour": "orange", "code": "            # Call title() now (and use dict.__method__(headers))\n", "error": "none", "author": "tom@organisms.be"}, {"index": "703", "colour": "orange", "code": "            # so title doesn't have to be called twice.\n", "error": "none", "author": "tom@organisms.be"}, {"index": "704", "colour": "orange", "code": "            name = name.title()\n", "error": "none", "author": "tom@organisms.be"}, {"index": "705", "colour": "orange", "code": "            value = value.strip()\n", "error": "none", "author": "tom@organisms.be"}, {"index": "706", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "707", "colour": "orange", "code": "            # Warning: if there is more than one header entry for cookies (AFAIK,\n", "error": "none", "author": "tom@organisms.be"}, {"index": "708", "colour": "orange", "code": "            # only Konqueror does that), only the last one will remain in headers\n", "error": "none", "author": "tom@organisms.be"}, {"index": "709", "colour": "orange", "code": "            # (but they will be correctly stored in request.cookie).\n", "error": "none", "author": "tom@organisms.be"}, {"index": "710", "colour": "orange", "code": "            if \"=?\" in value:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "711", "colour": "orange", "code": "                dict.__setitem__(headers, name, httputil.decode_TEXT(value))\n", "error": "none", "author": "tom@organisms.be"}, {"index": "712", "colour": "orange", "code": "            else:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "713", "colour": "orange", "code": "                dict.__setitem__(headers, name, value)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "714", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "715", "colour": "orange", "code": "            # Handle cookies differently because on Konqueror, multiple\n", "error": "none", "author": "tom@organisms.be"}, {"index": "716", "colour": "orange", "code": "            # cookies come on different lines with the same key\n", "error": "none", "author": "tom@organisms.be"}, {"index": "717", "colour": "orange", "code": "            if name == 'Cookie':\n", "error": "none", "author": "tom@organisms.be"}, {"index": "718", "colour": "orange", "code": "                try:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "719", "colour": "orange", "code": "                    self.cookie.load(value)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "720", "colour": "orange", "code": "                except CookieError:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "721", "colour": "orange", "code": "                    msg = \"Illegal cookie name %s\" % value.split('=')[0]\n", "error": "none", "author": "tom@organisms.be"}, {"index": "722", "colour": "orange", "code": "                    raise cherrypy.HTTPError(400, msg)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "723", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "724", "colour": "orange", "code": "        if not dict.__contains__(headers, 'Host'):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "725", "colour": "orange", "code": "            # All Internet-based HTTP/1.1 servers MUST respond with a 400\n", "error": "none", "author": "tom@organisms.be"}, {"index": "726", "colour": "orange", "code": "            # (Bad Request) status code to any HTTP/1.1 request message\n", "error": "none", "author": "tom@organisms.be"}, {"index": "727", "colour": "orange", "code": "            # which lacks a Host header field.\n", "error": "none", "author": "tom@organisms.be"}, {"index": "728", "colour": "orange", "code": "            if self.protocol >= (1, 1):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "729", "colour": "orange", "code": "                msg = \"HTTP/1.1 requires a 'Host' request header.\"\n", "error": "none", "author": "tom@organisms.be"}, {"index": "730", "colour": "orange", "code": "                raise cherrypy.HTTPError(400, msg)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "731", "colour": "orange", "code": "        host = dict.get(headers, 'Host')\n", "error": "none", "author": "tom@organisms.be"}, {"index": "732", "colour": "orange", "code": "        if not host:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "733", "colour": "orange", "code": "            host = self.local.name or self.local.ip\n", "error": "none", "author": "tom@organisms.be"}, {"index": "734", "colour": "orange", "code": "        self.base = \"%s://%s\" % (self.scheme, host)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "735", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "736", "colour": "orange", "code": "    def get_resource(self, path):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "737", "colour": "orange", "code": "        \"\"\"Call a dispatcher (which sets self.handler and .config). (Core)\"\"\"\n", "error": "none", "author": "tom@organisms.be"}, {"index": "738", "colour": "orange", "code": "        # First, see if there is a custom dispatch at this URI. Custom\n", "error": "none", "author": "tom@organisms.be"}, {"index": "739", "colour": "orange", "code": "        # dispatchers can only be specified in app.config, not in _cp_config\n", "error": "none", "author": "tom@organisms.be"}, {"index": "740", "colour": "orange", "code": "        # (since custom dispatchers may not even have an app.root).\n", "error": "none", "author": "tom@organisms.be"}, {"index": "741", "colour": "orange", "code": "        dispatch = self.app.find_config(path, \"request.dispatch\", self.dispatch)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "742", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "743", "colour": "orange", "code": "        # dispatch() should set self.handler and self.config\n", "error": "none", "author": "tom@organisms.be"}, {"index": "744", "colour": "orange", "code": "        dispatch(path)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "745", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "746", "colour": "orange", "code": "    def handle_error(self):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "747", "colour": "orange", "code": "        \"\"\"Handle the last unanticipated exception. (Core)\"\"\"\n", "error": "none", "author": "tom@organisms.be"}, {"index": "748", "colour": "orange", "code": "        try:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "749", "colour": "orange", "code": "            self.hooks.run(\"before_error_response\")\n", "error": "none", "author": "tom@organisms.be"}, {"index": "750", "colour": "orange", "code": "            if self.error_response:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "751", "colour": "orange", "code": "                self.error_response()\n", "error": "none", "author": "tom@organisms.be"}, {"index": "752", "colour": "orange", "code": "            self.hooks.run(\"after_error_response\")\n", "error": "none", "author": "tom@organisms.be"}, {"index": "753", "colour": "orange", "code": "            cherrypy.serving.response.finalize()\n", "error": "none", "author": "tom@organisms.be"}, {"index": "754", "colour": "orange", "code": "        except cherrypy.HTTPRedirect:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "755", "colour": "orange", "code": "            inst = sys.exc_info()[1]\n", "error": "none", "author": "tom@organisms.be"}, {"index": "756", "colour": "orange", "code": "            inst.set_response()\n", "error": "none", "author": "tom@organisms.be"}, {"index": "757", "colour": "orange", "code": "            cherrypy.serving.response.finalize()\n", "error": "none", "author": "tom@organisms.be"}, {"index": "758", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "759", "colour": "orange", "code": "    # ------------------------- Properties ------------------------- #\n", "error": "none", "author": "tom@organisms.be"}, {"index": "760", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "761", "colour": "orange", "code": "    def _get_body_params(self):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "762", "colour": "orange", "code": "        warnings.warn(\n", "error": "none", "author": "tom@organisms.be"}, {"index": "763", "colour": "orange", "code": "                \"body_params is deprecated in CherryPy 3.2, will be removed in \"\n", "error": "none", "author": "tom@organisms.be"}, {"index": "764", "colour": "orange", "code": "                \"CherryPy 3.3.\",\n", "error": "none", "author": "tom@organisms.be"}, {"index": "765", "colour": "orange", "code": "                DeprecationWarning\n", "error": "none", "author": "tom@organisms.be"}, {"index": "766", "colour": "orange", "code": "            )\n", "error": "none", "author": "tom@organisms.be"}, {"index": "767", "colour": "orange", "code": "        return self.body.params\n", "error": "none", "author": "tom@organisms.be"}, {"index": "768", "colour": "orange", "code": "    body_params = property(_get_body_params,\n", "error": "none", "author": "tom@organisms.be"}, {"index": "769", "colour": "orange", "code": "                      doc= \"\"\"\n", "error": "none", "author": "tom@organisms.be"}, {"index": "770", "colour": "orange", "code": "    If the request Content-Type is 'application/x-www-form-urlencoded' or\n", "error": "none", "author": "tom@organisms.be"}, {"index": "771", "colour": "orange", "code": "    multipart, this will be a dict of the params pulled from the entity\n", "error": "none", "author": "tom@organisms.be"}, {"index": "772", "colour": "orange", "code": "    body; that is, it will be the portion of request.params that come\n", "error": "none", "author": "tom@organisms.be"}, {"index": "773", "colour": "orange", "code": "    from the message body (sometimes called \"POST params\", although they\n", "error": "none", "author": "tom@organisms.be"}, {"index": "774", "colour": "orange", "code": "    can be sent with various HTTP method verbs). This value is set between\n", "error": "none", "author": "tom@organisms.be"}, {"index": "775", "colour": "orange", "code": "    the 'before_request_body' and 'before_handler' hooks (assuming that\n", "error": "none", "author": "tom@organisms.be"}, {"index": "776", "colour": "orange", "code": "    process_request_body is True).\n", "error": "none", "author": "tom@organisms.be"}, {"index": "777", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "778", "colour": "orange", "code": "    Deprecated in 3.2, will be removed for 3.3 in favor of\n", "error": "none", "author": "tom@organisms.be"}, {"index": "779", "colour": "orange", "code": "    :attr:`request.body.params<cherrypy._cprequest.RequestBody.params>`.\"\"\")\n", "error": "none", "author": "tom@organisms.be"}, {"index": "780", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "781", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "782", "colour": "blue", "code": "class ResponseBody(object):\n", "error": "R", "author": "tom@organisms.be"}, {"index": "783", "colour": "orange", "code": "    \"\"\"The body of the HTTP response (the response entity).\"\"\"\n", "error": "none", "author": "tom@organisms.be"}, {"index": "784", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "785", "colour": "orange", "code": "    if py3k:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "786", "colour": "orange", "code": "        unicode_err = (\"Page handlers MUST return bytes. Use tools.encode \"\n", "error": "none", "author": "tom@organisms.be"}, {"index": "787", "colour": "orange", "code": "                       \"if you wish to return unicode.\")\n", "error": "none", "author": "tom@organisms.be"}, {"index": "788", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "789", "colour": "orange", "code": "    def __get__(self, obj, objclass=None):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "790", "colour": "orange", "code": "        if obj is None:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "791", "colour": "orange", "code": "            # When calling on the class instead of an instance...\n", "error": "none", "author": "tom@organisms.be"}, {"index": "792", "colour": "orange", "code": "            return self\n", "error": "none", "author": "tom@organisms.be"}, {"index": "793", "colour": "orange", "code": "        else:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "794", "colour": "green", "code": "            return obj._body\n", "error": "W", "author": "tom@organisms.be"}, {"index": "795", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "796", "colour": "orange", "code": "    def __set__(self, obj, value):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "797", "colour": "orange", "code": "        # Convert the given value to an iterable object.\n", "error": "none", "author": "tom@organisms.be"}, {"index": "798", "colour": "orange", "code": "        if py3k and isinstance(value, str):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "799", "colour": "orange", "code": "            raise ValueError(self.unicode_err)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "800", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "801", "colour": "orange", "code": "        if isinstance(value, basestring):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "802", "colour": "orange", "code": "            # strings get wrapped in a list because iterating over a single\n", "error": "none", "author": "tom@organisms.be"}, {"index": "803", "colour": "orange", "code": "            # item list is much faster than iterating over every character\n", "error": "none", "author": "tom@organisms.be"}, {"index": "804", "colour": "orange", "code": "            # in a long string.\n", "error": "none", "author": "tom@organisms.be"}, {"index": "805", "colour": "orange", "code": "            if value:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "806", "colour": "orange", "code": "                value = [value]\n", "error": "none", "author": "tom@organisms.be"}, {"index": "807", "colour": "orange", "code": "            else:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "808", "colour": "orange", "code": "                # [''] doesn't evaluate to False, so replace it with [].\n", "error": "none", "author": "tom@organisms.be"}, {"index": "809", "colour": "orange", "code": "                value = []\n", "error": "none", "author": "tom@organisms.be"}, {"index": "810", "colour": "orange", "code": "        elif py3k and isinstance(value, list):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "811", "colour": "orange", "code": "            # every item in a list must be bytes...\n", "error": "none", "author": "tom@organisms.be"}, {"index": "812", "colour": "green", "code": "            for i, item in enumerate(value):\n", "error": "W", "author": "tom@organisms.be"}, {"index": "813", "colour": "orange", "code": "                if isinstance(item, str):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "814", "colour": "orange", "code": "                    raise ValueError(self.unicode_err)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "815", "colour": "orange", "code": "        # Don't use isinstance here; io.IOBase which has an ABC takes\n", "error": "none", "author": "tom@organisms.be"}, {"index": "816", "colour": "orange", "code": "        # 1000 times as long as, say, isinstance(value, str)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "817", "colour": "orange", "code": "        elif hasattr(value, 'read'):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "818", "colour": "orange", "code": "            value = file_generator(value)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "819", "colour": "orange", "code": "        elif value is None:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "820", "colour": "orange", "code": "            value = []\n", "error": "none", "author": "tom@organisms.be"}, {"index": "821", "colour": "green", "code": "        obj._body = value\n", "error": "W", "author": "tom@organisms.be"}, {"index": "822", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "823", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "824", "colour": "blue", "code": "class Response(object):\n", "error": "R", "author": "tom@organisms.be"}, {"index": "825", "colour": "orange", "code": "    \"\"\"An HTTP Response, including status, headers, and body.\"\"\"\n", "error": "none", "author": "tom@organisms.be"}, {"index": "826", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "827", "colour": "orange", "code": "    status = \"\"\n", "error": "none", "author": "tom@organisms.be"}, {"index": "828", "colour": "orange", "code": "    \"\"\"The HTTP Status-Code and Reason-Phrase.\"\"\"\n", "error": "none", "author": "tom@organisms.be"}, {"index": "829", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "830", "colour": "orange", "code": "    header_list = []\n", "error": "none", "author": "tom@organisms.be"}, {"index": "831", "colour": "orange", "code": "    \"\"\"\n", "error": "none", "author": "tom@organisms.be"}, {"index": "832", "colour": "orange", "code": "    A list of the HTTP response headers as (name, value) tuples.\n", "error": "none", "author": "tom@organisms.be"}, {"index": "833", "colour": "orange", "code": "    In general, you should use response.headers (a dict) instead. This\n", "error": "none", "author": "tom@organisms.be"}, {"index": "834", "colour": "orange", "code": "    attribute is generated from response.headers and is not valid until\n", "error": "none", "author": "tom@organisms.be"}, {"index": "835", "colour": "orange", "code": "    after the finalize phase.\"\"\"\n", "error": "none", "author": "tom@organisms.be"}, {"index": "836", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "837", "colour": "orange", "code": "    headers = httputil.HeaderMap()\n", "error": "none", "author": "tom@organisms.be"}, {"index": "838", "colour": "orange", "code": "    \"\"\"\n", "error": "none", "author": "tom@organisms.be"}, {"index": "839", "colour": "orange", "code": "    A dict-like object containing the response headers. Keys are header\n", "error": "none", "author": "tom@organisms.be"}, {"index": "840", "colour": "orange", "code": "    names (in Title-Case format); however, you may get and set them in\n", "error": "none", "author": "tom@organisms.be"}, {"index": "841", "colour": "orange", "code": "    a case-insensitive manner. That is, headers['Content-Type'] and\n", "error": "none", "author": "tom@organisms.be"}, {"index": "842", "colour": "orange", "code": "    headers['content-type'] refer to the same value. Values are header\n", "error": "none", "author": "tom@organisms.be"}, {"index": "843", "colour": "orange", "code": "    values (decoded according to :rfc:`2047` if necessary).\n", "error": "none", "author": "tom@organisms.be"}, {"index": "844", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "845", "colour": "orange", "code": "    .. seealso:: classes :class:`HeaderMap`, :class:`HeaderElement`\n", "error": "none", "author": "tom@organisms.be"}, {"index": "846", "colour": "orange", "code": "    \"\"\"\n", "error": "none", "author": "tom@organisms.be"}, {"index": "847", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "848", "colour": "orange", "code": "    cookie = SimpleCookie()\n", "error": "none", "author": "tom@organisms.be"}, {"index": "849", "colour": "orange", "code": "    \"\"\"See help(Cookie).\"\"\"\n", "error": "none", "author": "tom@organisms.be"}, {"index": "850", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "851", "colour": "orange", "code": "    body = ResponseBody()\n", "error": "none", "author": "tom@organisms.be"}, {"index": "852", "colour": "orange", "code": "    \"\"\"The body (entity) of the HTTP response.\"\"\"\n", "error": "none", "author": "tom@organisms.be"}, {"index": "853", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "854", "colour": "orange", "code": "    time = None\n", "error": "none", "author": "tom@organisms.be"}, {"index": "855", "colour": "orange", "code": "    \"\"\"The value of time.time() when created. Use in HTTP dates.\"\"\"\n", "error": "none", "author": "tom@organisms.be"}, {"index": "856", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "857", "colour": "orange", "code": "    timeout = 300\n", "error": "none", "author": "tom@organisms.be"}, {"index": "858", "colour": "orange", "code": "    \"\"\"Seconds after which the response will be aborted.\"\"\"\n", "error": "none", "author": "tom@organisms.be"}, {"index": "859", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "860", "colour": "orange", "code": "    timed_out = False\n", "error": "none", "author": "tom@organisms.be"}, {"index": "861", "colour": "orange", "code": "    \"\"\"\n", "error": "none", "author": "tom@organisms.be"}, {"index": "862", "colour": "orange", "code": "    Flag to indicate the response should be aborted, because it has\n", "error": "none", "author": "tom@organisms.be"}, {"index": "863", "colour": "orange", "code": "    exceeded its timeout.\"\"\"\n", "error": "none", "author": "tom@organisms.be"}, {"index": "864", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "865", "colour": "orange", "code": "    stream = False\n", "error": "none", "author": "tom@organisms.be"}, {"index": "866", "colour": "orange", "code": "    \"\"\"If False, buffer the response body.\"\"\"\n", "error": "none", "author": "tom@organisms.be"}, {"index": "867", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "868", "colour": "orange", "code": "    def __init__(self):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "869", "colour": "orange", "code": "        self.status = None\n", "error": "none", "author": "tom@organisms.be"}, {"index": "870", "colour": "orange", "code": "        self.header_list = None\n", "error": "none", "author": "tom@organisms.be"}, {"index": "871", "colour": "orange", "code": "        self._body = []\n", "error": "none", "author": "tom@organisms.be"}, {"index": "872", "colour": "orange", "code": "        self.time = time.time()\n", "error": "none", "author": "tom@organisms.be"}, {"index": "873", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "874", "colour": "orange", "code": "        self.headers = httputil.HeaderMap()\n", "error": "none", "author": "tom@organisms.be"}, {"index": "875", "colour": "orange", "code": "        # Since we know all our keys are titled strings, we can\n", "error": "none", "author": "tom@organisms.be"}, {"index": "876", "colour": "orange", "code": "        # bypass HeaderMap.update and get a big speed boost.\n", "error": "none", "author": "tom@organisms.be"}, {"index": "877", "colour": "orange", "code": "        dict.update(self.headers, {\n", "error": "none", "author": "tom@organisms.be"}, {"index": "878", "colour": "orange", "code": "            \"Content-Type\": 'text/html',\n", "error": "none", "author": "tom@organisms.be"}, {"index": "879", "colour": "orange", "code": "            \"Server\": \"CherryPy/\" + cherrypy.__version__,\n", "error": "none", "author": "tom@organisms.be"}, {"index": "880", "colour": "orange", "code": "            \"Date\": httputil.HTTPDate(self.time),\n", "error": "none", "author": "tom@organisms.be"}, {"index": "881", "colour": "orange", "code": "        })\n", "error": "none", "author": "tom@organisms.be"}, {"index": "882", "colour": "orange", "code": "        self.cookie = SimpleCookie()\n", "error": "none", "author": "tom@organisms.be"}, {"index": "883", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "884", "colour": "orange", "code": "    def collapse_body(self):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "885", "colour": "orange", "code": "        \"\"\"Collapse self.body to a single string; replace it and return it.\"\"\"\n", "error": "none", "author": "tom@organisms.be"}, {"index": "886", "colour": "orange", "code": "        if isinstance(self.body, basestring):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "887", "colour": "orange", "code": "            return self.body\n", "error": "none", "author": "tom@organisms.be"}, {"index": "888", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "889", "colour": "orange", "code": "        newbody = []\n", "error": "none", "author": "tom@organisms.be"}, {"index": "890", "colour": "orange", "code": "        for chunk in self.body:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "891", "colour": "orange", "code": "            if py3k and not isinstance(chunk, bytes):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "892", "colour": "orange", "code": "                raise TypeError(\"Chunk %s is not of type 'bytes'.\" % repr(chunk))\n", "error": "none", "author": "tom@organisms.be"}, {"index": "893", "colour": "orange", "code": "            newbody.append(chunk)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "894", "colour": "orange", "code": "        newbody = ntob('').join(newbody)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "895", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "896", "colour": "orange", "code": "        self.body = newbody\n", "error": "none", "author": "tom@organisms.be"}, {"index": "897", "colour": "orange", "code": "        return newbody\n", "error": "none", "author": "tom@organisms.be"}, {"index": "898", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "899", "colour": "orange", "code": "    def finalize(self):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "900", "colour": "orange", "code": "        \"\"\"Transform headers (and cookies) into self.header_list. (Core)\"\"\"\n", "error": "none", "author": "tom@organisms.be"}, {"index": "901", "colour": "orange", "code": "        try:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "902", "colour": "orange", "code": "            code, reason, _ = httputil.valid_status(self.status)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "903", "colour": "orange", "code": "        except ValueError:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "904", "colour": "orange", "code": "            raise cherrypy.HTTPError(500, sys.exc_info()[1].args[0])\n", "error": "none", "author": "tom@organisms.be"}, {"index": "905", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "906", "colour": "orange", "code": "        headers = self.headers\n", "error": "none", "author": "tom@organisms.be"}, {"index": "907", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "908", "colour": "orange", "code": "        self.status = \"%s %s\" % (code, reason)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "909", "colour": "green", "code": "        self.output_status = ntob(str(code), 'ascii') + ntob(\" \") + headers.encode(reason)\n", "error": "W", "author": "tom@organisms.be"}, {"index": "910", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "911", "colour": "orange", "code": "        if self.stream:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "912", "colour": "orange", "code": "            # The upshot: wsgiserver will chunk the response if\n", "error": "none", "author": "tom@organisms.be"}, {"index": "913", "colour": "orange", "code": "            # you pop Content-Length (or set it explicitly to None).\n", "error": "none", "author": "tom@organisms.be"}, {"index": "914", "colour": "orange", "code": "            # Note that lib.static sets C-L to the file's st_size.\n", "error": "none", "author": "tom@organisms.be"}, {"index": "915", "colour": "orange", "code": "            if dict.get(headers, 'Content-Length') is None:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "916", "colour": "orange", "code": "                dict.pop(headers, 'Content-Length', None)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "917", "colour": "orange", "code": "        elif code < 200 or code in (204, 205, 304):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "918", "colour": "orange", "code": "            # \"All 1xx (informational), 204 (no content),\n", "error": "none", "author": "tom@organisms.be"}, {"index": "919", "colour": "orange", "code": "            # and 304 (not modified) responses MUST NOT\n", "error": "none", "author": "tom@organisms.be"}, {"index": "920", "colour": "orange", "code": "            # include a message-body.\"\n", "error": "none", "author": "tom@organisms.be"}, {"index": "921", "colour": "orange", "code": "            dict.pop(headers, 'Content-Length', None)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "922", "colour": "orange", "code": "            self.body = ntob(\"\")\n", "error": "none", "author": "tom@organisms.be"}, {"index": "923", "colour": "orange", "code": "        else:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "924", "colour": "orange", "code": "            # Responses which are not streamed should have a Content-Length,\n", "error": "none", "author": "tom@organisms.be"}, {"index": "925", "colour": "orange", "code": "            # but allow user code to set Content-Length if desired.\n", "error": "none", "author": "tom@organisms.be"}, {"index": "926", "colour": "orange", "code": "            if dict.get(headers, 'Content-Length') is None:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "927", "colour": "orange", "code": "                content = self.collapse_body()\n", "error": "none", "author": "tom@organisms.be"}, {"index": "928", "colour": "orange", "code": "                dict.__setitem__(headers, 'Content-Length', len(content))\n", "error": "none", "author": "tom@organisms.be"}, {"index": "929", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "930", "colour": "orange", "code": "        # Transform our header dict into a list of tuples.\n", "error": "none", "author": "tom@organisms.be"}, {"index": "931", "colour": "orange", "code": "        self.header_list = h = headers.output()\n", "error": "none", "author": "tom@organisms.be"}, {"index": "932", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "933", "colour": "orange", "code": "        cookie = self.cookie.output()\n", "error": "none", "author": "tom@organisms.be"}, {"index": "934", "colour": "orange", "code": "        if cookie:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "935", "colour": "orange", "code": "            for line in cookie.split(\"\\n\"):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "936", "colour": "orange", "code": "                if line.endswith(\"\\r\"):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "937", "colour": "orange", "code": "                    # Python 2.4 emits cookies joined by LF but 2.5+ by CRLF.\n", "error": "none", "author": "tom@organisms.be"}, {"index": "938", "colour": "orange", "code": "                    line = line[:-1]\n", "error": "none", "author": "tom@organisms.be"}, {"index": "939", "colour": "orange", "code": "                name, value = line.split(\": \", 1)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "940", "colour": "orange", "code": "                if isinstance(name, unicodestr):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "941", "colour": "orange", "code": "                    name = name.encode(\"ISO-8859-1\")\n", "error": "none", "author": "tom@organisms.be"}, {"index": "942", "colour": "orange", "code": "                if isinstance(value, unicodestr):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "943", "colour": "orange", "code": "                    value = headers.encode(value)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "944", "colour": "orange", "code": "                h.append((name, value))\n", "error": "none", "author": "tom@organisms.be"}, {"index": "945", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "946", "colour": "orange", "code": "    def check_timeout(self):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "947", "colour": "orange", "code": "        \"\"\"If now > self.time + self.timeout, set self.timed_out.\n", "error": "none", "author": "tom@organisms.be"}, {"index": "948", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "949", "colour": "orange", "code": "        This purposefully sets a flag, rather than raising an error,\n", "error": "none", "author": "tom@organisms.be"}, {"index": "950", "colour": "orange", "code": "        so that a monitor thread can interrupt the Response thread.\n", "error": "none", "author": "tom@organisms.be"}, {"index": "951", "colour": "orange", "code": "        \"\"\"\n", "error": "none", "author": "tom@organisms.be"}, {"index": "952", "colour": "orange", "code": "        if time.time() > self.time + self.timeout:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "953", "colour": "orange", "code": "            self.timed_out = True\n", "error": "none", "author": "tom@organisms.be"}, {"index": "954", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "955", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "956", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}]}