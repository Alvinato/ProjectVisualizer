{"path": "/home/asumal/git/cs410/pattern/pattern/server/cherrypy/cherrypy/lib/profiler.py", "lines": [[{"error": "none", "line": "1", "code": "\"\"\"Profiler tools for CherryPy.\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "2", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "3", "code": "CherryPy users\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "4", "code": "==============\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "5", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "6", "code": "You can profile any of your pages as follows::\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "7", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "8", "code": "    from cherrypy.lib import profiler\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "9", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "10", "code": "    class Root:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "11", "code": "        p = profile.Profiler(\"/path/to/profile/dir\")\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "12", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "13", "code": "        def index(self):\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "14", "code": "            self.p.run(self._index)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "15", "code": "        index.exposed = True\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "16", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "17", "code": "        def _index(self):\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "18", "code": "            return \"Hello, world!\"\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "19", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "20", "code": "    cherrypy.tree.mount(Root())\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "21", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "22", "code": "You can also turn on profiling for all requests\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "23", "code": "using the ``make_app`` function as WSGI middleware.\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "24", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "25", "code": "CherryPy developers\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "26", "code": "===================\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "27", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "28", "code": "This module can be used whenever you make changes to CherryPy,\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "29", "code": "to get a quick sanity-check on overall CP performance. Use the\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "30", "code": "``--profile`` flag when running the test suite. Then, use the ``serve()``\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "31", "code": "function to browse the results in a web browser. If you run this\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "32", "code": "module from the command line, it will call ``serve()`` for you.\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "33", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "34", "code": "\"\"\"\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "35", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "36", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "37", "code": "def new_func_strip_path(func_name):\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "38", "code": "    \"\"\"Make profiler output more readable by adding ``__init__`` modules' parents\"\"\"\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "39", "code": "    filename, line, name = func_name\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "40", "code": "    if filename.endswith(\"__init__.py\"):\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "41", "code": "        return os.path.basename(filename[:-12]) + filename[-12:], line, name\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "42", "code": "    return os.path.basename(filename), line, name\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "43", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "44", "code": "try:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "45", "code": "    import profile\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "46", "code": "    import pstats\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "47", "code": "    pstats.func_strip_path = new_func_strip_path\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "48", "code": "except ImportError:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "49", "code": "    profile = None\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "C", "line": "50", "code": "    pstats = None\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "51", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "52", "code": "import os, os.path\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "53", "code": "import sys\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "54", "code": "import warnings\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "55", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "56", "code": "from cherrypy._cpcompat import BytesIO\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "57", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "58", "code": "_count = 0\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "59", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "60", "code": "class Profiler(object):\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "61", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "62", "code": "    def __init__(self, path=None):\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "63", "code": "        if not path:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "64", "code": "            path = os.path.join(os.path.dirname(__file__), \"profile\")\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "65", "code": "        self.path = path\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "66", "code": "        if not os.path.exists(path):\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "67", "code": "            os.makedirs(path)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "68", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "69", "code": "    def run(self, func, *args, **params):\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "70", "code": "        \"\"\"Dump profile data into self.path.\"\"\"\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "W", "line": "71", "code": "        global _count\n", "colour": "purple", "author": "tom@organisms.be"}, {"error": "C", "line": "72", "code": "        c = _count = _count + 1\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "73", "code": "        path = os.path.join(self.path, \"cp_%04d.prof\" % c)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "74", "code": "        prof = profile.Profile()\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "75", "code": "        result = prof.runcall(func, *args, **params)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "76", "code": "        prof.dump_stats(path)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "77", "code": "        return result\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "78", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "79", "code": "    def statfiles(self):\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "80", "code": "        \"\"\":rtype: list of available profiles.\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "81", "code": "        \"\"\"\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "82", "code": "        return [f for f in os.listdir(self.path)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "83", "code": "                if f.startswith(\"cp_\") and f.endswith(\".prof\")]\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "84", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "85", "code": "    def stats(self, filename, sortby='cumulative'):\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "86", "code": "        \"\"\":rtype stats(index): output of print_stats() for the given profile.\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "87", "code": "        \"\"\"\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "88", "code": "        sio = BytesIO()\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "89", "code": "        if sys.version_info >= (2, 5):\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "90", "code": "            s = pstats.Stats(os.path.join(self.path, filename), stream=sio)\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "91", "code": "            s.strip_dirs()\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "92", "code": "            s.sort_stats(sortby)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "93", "code": "            s.print_stats()\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "94", "code": "        else:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "95", "code": "            # pstats.Stats before Python 2.5 didn't take a 'stream' arg,\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "96", "code": "            # but just printed to stdout. So re-route stdout.\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "97", "code": "            s = pstats.Stats(os.path.join(self.path, filename))\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "98", "code": "            s.strip_dirs()\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "99", "code": "            s.sort_stats(sortby)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "100", "code": "            oldout = sys.stdout\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "101", "code": "            try:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "102", "code": "                sys.stdout = sio\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "103", "code": "                s.print_stats()\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "104", "code": "            finally:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "105", "code": "                sys.stdout = oldout\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "106", "code": "        response = sio.getvalue()\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "107", "code": "        sio.close()\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "108", "code": "        return response\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "109", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "R", "line": "110", "code": "    def index(self):\n", "colour": "green", "author": "tom@organisms.be"}, {"error": "none", "line": "111", "code": "        return \"\"\"<html>\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "112", "code": "        <head><title>CherryPy profile data</title></head>\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "113", "code": "        <frameset cols='200, 1*'>\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "114", "code": "            <frame src='menu' />\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "115", "code": "            <frame name='main' src='' />\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "116", "code": "        </frameset>\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "117", "code": "        </html>\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "118", "code": "        \"\"\"\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "119", "code": "    index.exposed = True\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "120", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "121", "code": "    def menu(self):\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "122", "code": "        yield \"<h2>Profiling runs</h2>\"\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "123", "code": "        yield \"<p>Click on one of the runs below to see profiling data.</p>\"\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "124", "code": "        runs = self.statfiles()\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "125", "code": "        runs.sort()\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "126", "code": "        for i in runs:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "127", "code": "            yield \"<a href='report?filename=%s' target='main'>%s</a><br />\" % (i, i)\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "128", "code": "    menu.exposed = True\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "129", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "130", "code": "    def report(self, filename):\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "131", "code": "        import cherrypy\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "132", "code": "        cherrypy.response.headers['Content-Type'] = 'text/plain'\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "133", "code": "        return self.stats(filename)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "134", "code": "    report.exposed = True\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "135", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "136", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "137", "code": "class ProfileAggregator(Profiler):\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "138", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "139", "code": "    def __init__(self, path=None):\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "140", "code": "        Profiler.__init__(self, path)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "W", "line": "141", "code": "        global _count\n", "colour": "purple", "author": "tom@organisms.be"}, {"error": "none", "line": "142", "code": "        self.count = _count = _count + 1\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "143", "code": "        self.profiler = profile.Profile()\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "144", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "145", "code": "    def run(self, func, *args):\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "146", "code": "        path = os.path.join(self.path, \"cp_%04d.prof\" % self.count)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "147", "code": "        result = self.profiler.runcall(func, *args)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "148", "code": "        self.profiler.dump_stats(path)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "149", "code": "        return result\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "150", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "151", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "R", "line": "152", "code": "class make_app:\n", "colour": "green", "author": "tom@organisms.be"}, {"error": "none", "line": "153", "code": "    def __init__(self, nextapp, path=None, aggregate=False):\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "154", "code": "        \"\"\"Make a WSGI middleware app which wraps 'nextapp' with profiling.\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "155", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "156", "code": "        nextapp\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "157", "code": "            the WSGI application to wrap, usually an instance of\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "158", "code": "            cherrypy.Application.\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "159", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "160", "code": "        path\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "161", "code": "            where to dump the profiling output.\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "162", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "163", "code": "        aggregate\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "164", "code": "            if True, profile data for all HTTP requests will go in\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "165", "code": "            a single file. If False (the default), each HTTP request will\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "166", "code": "            dump its profile data into a separate file.\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "167", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "168", "code": "        \"\"\"\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "169", "code": "        if profile is None or pstats is None:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "170", "code": "            msg = (\"Your installation of Python does not have a profile module. \"\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "C", "line": "171", "code": "                   \"If you're on Debian, try `sudo apt-get install python-profiler`. \"\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "C", "line": "172", "code": "                   \"See http://www.cherrypy.org/wiki/ProfilingOnDebian for details.\")\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "173", "code": "            warnings.warn(msg)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "174", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "175", "code": "        self.nextapp = nextapp\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "176", "code": "        self.aggregate = aggregate\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "177", "code": "        if aggregate:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "178", "code": "            self.profiler = ProfileAggregator(path)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "179", "code": "        else:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "180", "code": "            self.profiler = Profiler(path)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "181", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "182", "code": "    def __call__(self, environ, start_response):\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "183", "code": "        def gather():\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "184", "code": "            result = []\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "185", "code": "            for line in self.nextapp(environ, start_response):\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "186", "code": "                result.append(line)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "187", "code": "            return result\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "188", "code": "        return self.profiler.run(gather)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "189", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "190", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "191", "code": "def serve(path=None, port=8080):\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "192", "code": "    if profile is None or pstats is None:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "193", "code": "        msg = (\"Your installation of Python does not have a profile module. \"\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "194", "code": "               \"If you're on Debian, try `sudo apt-get install python-profiler`. \"\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "C", "line": "195", "code": "               \"See http://www.cherrypy.org/wiki/ProfilingOnDebian for details.\")\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "196", "code": "        warnings.warn(msg)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "197", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "198", "code": "    import cherrypy\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "199", "code": "    cherrypy.config.update({'server.socket_port': int(port),\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "200", "code": "                            'server.thread_pool': 10,\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "201", "code": "                            'environment': \"production\",\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "202", "code": "                            })\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "203", "code": "    cherrypy.quickstart(Profiler(path))\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "204", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "205", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "206", "code": "if __name__ == \"__main__\":\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "W", "line": "207", "code": "    serve(*tuple(sys.argv[1:]))\n", "colour": "purple", "author": "tom@organisms.be"}, {"error": "none", "line": "208", "code": "\n", "colour": "black", "author": "tom@organisms.be"}]]}