{"path": "/home/asumal/git/cs410/pattern/pattern/server/cherrypy/cherrypy/_cptree.py", "lines": [[{"error": "none", "line": "1", "code": "\"\"\"CherryPy Application and Tree objects.\"\"\"\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "2", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "3", "code": "import os\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "W", "line": "4", "code": "import sys\n", "colour": "purple", "author": "tom@organisms.be"}, {"error": "none", "line": "5", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "6", "code": "import cherrypy\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "7", "code": "from cherrypy._cpcompat import ntou, py3k\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "8", "code": "from cherrypy import _cpconfig, _cplogging, _cprequest, _cpwsgi, tools\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "9", "code": "from cherrypy.lib import httputil\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "10", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "11", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "12", "code": "class Application(object):\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "13", "code": "    \"\"\"A CherryPy Application.\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "14", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "15", "code": "    Servers and gateways should not instantiate Request objects directly.\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "16", "code": "    Instead, they should ask an Application object for a request object.\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "17", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "18", "code": "    An instance of this class may also be used as a WSGI callable\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "19", "code": "    (WSGI application object) for itself.\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "20", "code": "    \"\"\"\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "21", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "22", "code": "    root = None\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "23", "code": "    \"\"\"The top-most container of page handlers for this app. Handlers should\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "24", "code": "    be arranged in a hierarchy of attributes, matching the expected URI\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "25", "code": "    hierarchy; the default dispatcher then searches this hierarchy for a\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "26", "code": "    matching handler. When using a dispatcher other than the default,\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "27", "code": "    this value may be None.\"\"\"\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "28", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "29", "code": "    config = {}\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "30", "code": "    \"\"\"A dict of {path: pathconf} pairs, where 'pathconf' is itself a dict\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "31", "code": "    of {key: value} pairs.\"\"\"\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "32", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "33", "code": "    namespaces = _cpconfig.NamespaceSet()\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "34", "code": "    toolboxes = {'tools': cherrypy.tools}\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "35", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "36", "code": "    log = None\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "37", "code": "    \"\"\"A LogManager instance. See _cplogging.\"\"\"\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "38", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "39", "code": "    wsgiapp = None\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "40", "code": "    \"\"\"A CPWSGIApp instance. See _cpwsgi.\"\"\"\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "41", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "42", "code": "    request_class = _cprequest.Request\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "43", "code": "    response_class = _cprequest.Response\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "44", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "45", "code": "    relative_urls = False\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "46", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "47", "code": "    def __init__(self, root, script_name=\"\", config=None):\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "48", "code": "        self.log = _cplogging.LogManager(id(self), cherrypy.log.logger_root)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "49", "code": "        self.root = root\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "50", "code": "        self.script_name = script_name\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "51", "code": "        self.wsgiapp = _cpwsgi.CPWSGIApp(self)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "52", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "53", "code": "        self.namespaces = self.namespaces.copy()\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "54", "code": "        self.namespaces[\"log\"] = lambda k, v: setattr(self.log, k, v)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "55", "code": "        self.namespaces[\"wsgi\"] = self.wsgiapp.namespace_handler\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "56", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "57", "code": "        self.config = self.__class__.config.copy()\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "58", "code": "        if config:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "59", "code": "            self.merge(config)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "60", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "61", "code": "    def __repr__(self):\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "62", "code": "        return \"%s.%s(%r, %r)\" % (self.__module__, self.__class__.__name__,\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "63", "code": "                                  self.root, self.script_name)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "64", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "65", "code": "    script_name_doc = \"\"\"The URI \"mount point\" for this app. A mount point is that portion of\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "66", "code": "    the URI which is constant for all URIs that are serviced by this\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "67", "code": "    application; it does not include scheme, host, or proxy (\"virtual host\")\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "68", "code": "    portions of the URI.\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "69", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "70", "code": "    For example, if script_name is \"/my/cool/app\", then the URL\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "71", "code": "    \"http://www.example.com/my/cool/app/page1\" might be handled by a\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "72", "code": "    \"page1\" method on the root object.\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "73", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "74", "code": "    The value of script_name MUST NOT end in a slash. If the script_name\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "75", "code": "    refers to the root of the URI, it MUST be an empty string (not \"/\").\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "76", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "77", "code": "    If script_name is explicitly set to None, then the script_name will be\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "78", "code": "    provided for each call from request.wsgi_environ['SCRIPT_NAME'].\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "79", "code": "    \"\"\"\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "80", "code": "    def _get_script_name(self):\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "81", "code": "        if self._script_name is None:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "82", "code": "            # None signals that the script name should be pulled from WSGI environ.\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "C", "line": "83", "code": "            return cherrypy.serving.request.wsgi_environ['SCRIPT_NAME'].rstrip(\"/\")\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "84", "code": "        return self._script_name\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "85", "code": "    def _set_script_name(self, value):\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "86", "code": "        if value:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "87", "code": "            value = value.rstrip(\"/\")\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "W", "line": "88", "code": "        self._script_name = value\n", "colour": "purple", "author": "tom@organisms.be"}, {"error": "none", "line": "89", "code": "    script_name = property(fget=_get_script_name, fset=_set_script_name,\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "90", "code": "                           doc=script_name_doc)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "91", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "92", "code": "    def merge(self, config):\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "93", "code": "        \"\"\"Merge the given config into self.config.\"\"\"\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "94", "code": "        _cpconfig.merge(self.config, config)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "95", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "96", "code": "        # Handle namespaces specified in config.\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "97", "code": "        self.namespaces(self.config.get(\"/\", {}))\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "98", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "99", "code": "    def find_config(self, path, key, default=None):\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "100", "code": "        \"\"\"Return the most-specific value for key along path, or default.\"\"\"\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "101", "code": "        trail = path or \"/\"\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "102", "code": "        while trail:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "103", "code": "            nodeconf = self.config.get(trail, {})\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "104", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "105", "code": "            if key in nodeconf:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "106", "code": "                return nodeconf[key]\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "107", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "108", "code": "            lastslash = trail.rfind(\"/\")\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "109", "code": "            if lastslash == -1:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "110", "code": "                break\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "111", "code": "            elif lastslash == 0 and trail != \"/\":\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "112", "code": "                trail = \"/\"\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "113", "code": "            else:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "114", "code": "                trail = trail[:lastslash]\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "115", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "116", "code": "        return default\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "117", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "118", "code": "    def get_serving(self, local, remote, scheme, sproto):\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "119", "code": "        \"\"\"Create and return a Request and Response object.\"\"\"\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "120", "code": "        req = self.request_class(local, remote, scheme, sproto)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "121", "code": "        req.app = self\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "122", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "123", "code": "        for name, toolbox in self.toolboxes.items():\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "124", "code": "            req.namespaces[name] = toolbox\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "125", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "126", "code": "        resp = self.response_class()\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "127", "code": "        cherrypy.serving.load(req, resp)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "128", "code": "        cherrypy.engine.publish('acquire_thread')\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "129", "code": "        cherrypy.engine.publish('before_request')\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "130", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "131", "code": "        return req, resp\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "132", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "R", "line": "133", "code": "    def release_serving(self):\n", "colour": "green", "author": "tom@organisms.be"}, {"error": "none", "line": "134", "code": "        \"\"\"Release the current serving (request and response).\"\"\"\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "135", "code": "        req = cherrypy.serving.request\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "136", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "137", "code": "        cherrypy.engine.publish('after_request')\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "138", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "139", "code": "        try:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "140", "code": "            req.close()\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "W", "line": "141", "code": "        except:\n", "colour": "purple", "author": "tom@organisms.be"}, {"error": "none", "line": "142", "code": "            cherrypy.log(traceback=True, severity=40)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "143", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "144", "code": "        cherrypy.serving.clear()\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "145", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "146", "code": "    def __call__(self, environ, start_response):\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "147", "code": "        return self.wsgiapp(environ, start_response)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "148", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "149", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "150", "code": "class Tree(object):\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "151", "code": "    \"\"\"A registry of CherryPy applications, mounted at diverse points.\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "152", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "153", "code": "    An instance of this class may also be used as a WSGI callable\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "154", "code": "    (WSGI application object), in which case it dispatches to all\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "155", "code": "    mounted apps.\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "156", "code": "    \"\"\"\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "157", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "158", "code": "    apps = {}\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "159", "code": "    \"\"\"\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "160", "code": "    A dict of the form {script name: application}, where \"script name\"\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "161", "code": "    is a string declaring the URI mount point (no trailing slash), and\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "162", "code": "    \"application\" is an instance of cherrypy.Application (or an arbitrary\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "163", "code": "    WSGI callable if you happen to be using a WSGI server).\"\"\"\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "164", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "165", "code": "    def __init__(self):\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "166", "code": "        self.apps = {}\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "167", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "168", "code": "    def mount(self, root, script_name=\"\", config=None):\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "169", "code": "        \"\"\"Mount a new app from a root object, script_name, and config.\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "170", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "171", "code": "        root\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "172", "code": "            An instance of a \"controller class\" (a collection of page\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "173", "code": "            handler methods) which represents the root of the application.\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "174", "code": "            This may also be an Application instance, or None if using\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "175", "code": "            a dispatcher other than the default.\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "176", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "177", "code": "        script_name\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "178", "code": "            A string containing the \"mount point\" of the application.\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "179", "code": "            This should start with a slash, and be the path portion of the\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "180", "code": "            URL at which to mount the given root. For example, if root.index()\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "181", "code": "            will handle requests to \"http://www.example.com:8080/dept/app1/\",\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "182", "code": "            then the script_name argument would be \"/dept/app1\".\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "183", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "184", "code": "            It MUST NOT end in a slash. If the script_name refers to the\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "185", "code": "            root of the URI, it MUST be an empty string (not \"/\").\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "186", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "187", "code": "        config\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "188", "code": "            A file or dict containing application config.\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "189", "code": "        \"\"\"\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "190", "code": "        if script_name is None:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "191", "code": "            raise TypeError(\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "192", "code": "                \"The 'script_name' argument may not be None. Application \"\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "193", "code": "                \"objects may, however, possess a script_name of None (in \"\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "194", "code": "                \"order to inpect the WSGI environ for SCRIPT_NAME upon each \"\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "195", "code": "                \"request). You cannot mount such Applications on this Tree; \"\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "196", "code": "                \"you must pass them to a WSGI server interface directly.\")\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "197", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "198", "code": "        # Next line both 1) strips trailing slash and 2) maps \"/\" -> \"\".\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "199", "code": "        script_name = script_name.rstrip(\"/\")\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "200", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "201", "code": "        if isinstance(root, Application):\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "202", "code": "            app = root\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "203", "code": "            if script_name != \"\" and script_name != app.script_name:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "204", "code": "                raise ValueError(\"Cannot specify a different script name and \"\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "205", "code": "                                 \"pass an Application instance to cherrypy.mount\")\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "206", "code": "            script_name = app.script_name\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "207", "code": "        else:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "208", "code": "            app = Application(root, script_name)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "209", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "210", "code": "            # If mounted at \"\", add favicon.ico\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "211", "code": "            if (script_name == \"\" and root is not None\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "212", "code": "                    and not hasattr(root, \"favicon_ico\")):\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "213", "code": "                favicon = os.path.join(os.getcwd(), os.path.dirname(__file__),\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "214", "code": "                                       \"favicon.ico\")\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "215", "code": "                root.favicon_ico = tools.staticfile.handler(favicon)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "216", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "217", "code": "        if config:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "218", "code": "            app.merge(config)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "219", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "220", "code": "        self.apps[script_name] = app\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "221", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "222", "code": "        return app\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "223", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "224", "code": "    def graft(self, wsgi_callable, script_name=\"\"):\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "225", "code": "        \"\"\"Mount a wsgi callable at the given script_name.\"\"\"\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "226", "code": "        # Next line both 1) strips trailing slash and 2) maps \"/\" -> \"\".\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "227", "code": "        script_name = script_name.rstrip(\"/\")\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "228", "code": "        self.apps[script_name] = wsgi_callable\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "229", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "230", "code": "    def script_name(self, path=None):\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "231", "code": "        \"\"\"The script_name of the app at the given path, or None.\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "232", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "233", "code": "        If path is None, cherrypy.request is used.\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "234", "code": "        \"\"\"\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "235", "code": "        if path is None:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "236", "code": "            try:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "237", "code": "                request = cherrypy.serving.request\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "238", "code": "                path = httputil.urljoin(request.script_name,\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "239", "code": "                                        request.path_info)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "240", "code": "            except AttributeError:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "241", "code": "                return None\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "242", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "243", "code": "        while True:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "244", "code": "            if path in self.apps:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "245", "code": "                return path\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "246", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "247", "code": "            if path == \"\":\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "248", "code": "                return None\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "249", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "250", "code": "            # Move one node up the tree and try again.\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "251", "code": "            path = path[:path.rfind(\"/\")]\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "252", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "253", "code": "    def __call__(self, environ, start_response):\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "254", "code": "        # If you're calling this, then you're probably setting SCRIPT_NAME\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "255", "code": "        # to '' (some WSGI servers always set SCRIPT_NAME to '').\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "256", "code": "        # Try to look up the app using the full path.\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "257", "code": "        env1x = environ\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "258", "code": "        if environ.get(ntou('wsgi.version')) == (ntou('u'), 0):\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "259", "code": "            env1x = _cpwsgi.downgrade_wsgi_ux_to_1x(environ)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "260", "code": "        path = httputil.urljoin(env1x.get('SCRIPT_NAME', ''),\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "261", "code": "                                env1x.get('PATH_INFO', ''))\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "262", "code": "        sn = self.script_name(path or \"/\")\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "263", "code": "        if sn is None:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "264", "code": "            start_response('404 Not Found', [])\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "265", "code": "            return []\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "266", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "267", "code": "        app = self.apps[sn]\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "268", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "269", "code": "        # Correct the SCRIPT_NAME and PATH_INFO environ entries.\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "270", "code": "        environ = environ.copy()\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "271", "code": "        if not py3k:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "272", "code": "            if environ.get(ntou('wsgi.version')) == (ntou('u'), 0):\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "273", "code": "                # Python 2/WSGI u.0: all strings MUST be of type unicode\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "274", "code": "                enc = environ[ntou('wsgi.url_encoding')]\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "275", "code": "                environ[ntou('SCRIPT_NAME')] = sn.decode(enc)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "276", "code": "                environ[ntou('PATH_INFO')] = path[len(sn.rstrip(\"/\")):].decode(enc)\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "277", "code": "            else:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "278", "code": "                # Python 2/WSGI 1.x: all strings MUST be of type str\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "279", "code": "                environ['SCRIPT_NAME'] = sn\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "280", "code": "                environ['PATH_INFO'] = path[len(sn.rstrip(\"/\")):]\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "281", "code": "        else:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "282", "code": "            if environ.get(ntou('wsgi.version')) == (ntou('u'), 0):\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "283", "code": "                # Python 3/WSGI u.0: all strings MUST be full unicode\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "284", "code": "                environ['SCRIPT_NAME'] = sn\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "285", "code": "                environ['PATH_INFO'] = path[len(sn.rstrip(\"/\")):]\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "286", "code": "            else:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "287", "code": "                # Python 3/WSGI 1.x: all strings MUST be ISO-8859-1 str\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "288", "code": "                environ['SCRIPT_NAME'] = sn.encode('utf-8').decode('ISO-8859-1')\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "289", "code": "                environ['PATH_INFO'] = path[len(sn.rstrip(\"/\")):].encode('utf-8').decode('ISO-8859-1')\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "290", "code": "        return app(environ, start_response)\n", "colour": "black", "author": "tom@organisms.be"}]]}