{"path": "/home/asumal/git/cs410/pattern/pattern/web/pdf/ascii85.py", "lines": [[{"error": "none", "line": "1", "code": "#!/usr/bin/env python2\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "2", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "3", "code": "\"\"\" Python implementation of ASCII85/ASCIIHex decoder (Adobe version).\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "4", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "5", "code": "This code is in the public domain.\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "6", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "7", "code": "\"\"\"\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "8", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "9", "code": "import re\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "10", "code": "import struct\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "11", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "12", "code": "# ascii85decode(data)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "13", "code": "def ascii85decode(data):\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "14", "code": "    \"\"\"\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "15", "code": "    In ASCII85 encoding, every four bytes are encoded with five ASCII\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "16", "code": "    letters, using 85 different types of characters (as 256**4 < 85**5).\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "17", "code": "    When the length of the original bytes is not a multiple of 4, a special\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "18", "code": "    rule is used for round up.\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "19", "code": "    \n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "20", "code": "    The Adobe's ASCII85 implementation is slightly different from\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "21", "code": "    its original in handling the last characters.\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "22", "code": "    \n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "23", "code": "    The sample string is taken from:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "24", "code": "      http://en.wikipedia.org/w/index.php?title=Ascii85\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "25", "code": "    \n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "26", "code": "    >>> ascii85decode('9jqo^BlbD-BleB1DJ+*+F(f,q')\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "27", "code": "    'Man is distinguished'\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "28", "code": "    >>> ascii85decode('E,9)oF*2M7/c~>')\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "29", "code": "    'pleasure.'\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "30", "code": "    \"\"\"\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "31", "code": "    n = b = 0\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "32", "code": "    out = ''\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "33", "code": "    for c in data:\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "34", "code": "        if '!' <= c and c <= 'u':\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "35", "code": "            n += 1\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "C", "line": "36", "code": "            b = b*85+(ord(c)-33)\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "37", "code": "            if n == 5:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "38", "code": "                out += struct.pack('>L',b)\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "C", "line": "39", "code": "                n = b = 0\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "40", "code": "        elif c == 'z':\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "41", "code": "            assert n == 0\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "42", "code": "            out += '\\0\\0\\0\\0'\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "43", "code": "        elif c == '~':\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "44", "code": "            if n:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "45", "code": "                for _ in range(5-n):\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "46", "code": "                    b = b*85+84\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "C", "line": "47", "code": "                out += struct.pack('>L',b)[:n-1]\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "48", "code": "            break\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "49", "code": "    return out\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "50", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "51", "code": "# asciihexdecode(data)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "52", "code": "hex_re = re.compile(r'([a-f\\d]{2})', re.IGNORECASE)\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "C", "line": "53", "code": "trail_re = re.compile(r'^(?:[a-f\\d]{2}|\\s)*([a-f\\d])[\\s>]*$', re.IGNORECASE)\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "54", "code": "def asciihexdecode(data):\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "55", "code": "    \"\"\"\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "56", "code": "    ASCIIHexDecode filter: PDFReference v1.4 section 3.3.1\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "57", "code": "    For each pair of ASCII hexadecimal digits (0-9 and A-F or a-f), the\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "58", "code": "    ASCIIHexDecode filter produces one byte of binary data. All white-space\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "59", "code": "    characters are ignored. A right angle bracket character (>) indicates\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "60", "code": "    EOD. Any other characters will cause an error. If the filter encounters\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "61", "code": "    the EOD marker after reading an odd number of hexadecimal digits, it\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "62", "code": "    will behave as if a 0 followed the last digit.\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "63", "code": "    \n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "64", "code": "    >>> asciihexdecode('61 62 2e6364   65')\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "65", "code": "    'ab.cde'\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "66", "code": "    >>> asciihexdecode('61 62 2e6364   657>')\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "67", "code": "    'ab.cdep'\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "68", "code": "    >>> asciihexdecode('7>')\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "69", "code": "    'p'\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "70", "code": "    \"\"\"\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "71", "code": "    decode = (lambda hx: chr(int(hx, 16)))\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "W", "line": "72", "code": "    out = map(decode, hex_re.findall(data))\n", "colour": "purple", "author": "tom@organisms.be"}, {"error": "C", "line": "73", "code": "    m = trail_re.search(data)\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "74", "code": "    if m:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "75", "code": "        out.append(decode(\"%c0\" % m.group(1)))\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "76", "code": "    return ''.join(out)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "77", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "78", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "79", "code": "if __name__ == '__main__':\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "80", "code": "    import doctest\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "81", "code": "    doctest.testmod()\n", "colour": "black", "author": "tom@organisms.be"}]]}