{"path": "/home/asumal/git/cs410/pattern/pattern/server/cherrypy/cherrypy/process/win32.py", "lines": [[{"index": "1", "colour": "orange", "code": "\"\"\"Windows service. Requires pywin32.\"\"\"\n", "error": "none", "author": "tom@organisms.be"}, {"index": "2", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "3", "colour": "orange", "code": "import os\n", "error": "none", "author": "tom@organisms.be"}, {"index": "4", "colour": "orange", "code": "import win32api\n", "error": "none", "author": "tom@organisms.be"}, {"index": "5", "colour": "orange", "code": "import win32con\n", "error": "none", "author": "tom@organisms.be"}, {"index": "6", "colour": "orange", "code": "import win32event\n", "error": "none", "author": "tom@organisms.be"}, {"index": "7", "colour": "orange", "code": "import win32service\n", "error": "none", "author": "tom@organisms.be"}, {"index": "8", "colour": "orange", "code": "import win32serviceutil\n", "error": "none", "author": "tom@organisms.be"}, {"index": "9", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "10", "colour": "orange", "code": "from cherrypy.process import wspbus, plugins\n", "error": "none", "author": "tom@organisms.be"}, {"index": "11", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "12", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "13", "colour": "orange", "code": "class ConsoleCtrlHandler(plugins.SimplePlugin):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "14", "colour": "orange", "code": "    \"\"\"A WSPBus plugin for handling Win32 console events (like Ctrl-C).\"\"\"\n", "error": "none", "author": "tom@organisms.be"}, {"index": "15", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "16", "colour": "orange", "code": "    def __init__(self, bus):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "17", "colour": "orange", "code": "        self.is_set = False\n", "error": "none", "author": "tom@organisms.be"}, {"index": "18", "colour": "orange", "code": "        plugins.SimplePlugin.__init__(self, bus)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "19", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "20", "colour": "orange", "code": "    def start(self):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "21", "colour": "orange", "code": "        if self.is_set:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "22", "colour": "orange", "code": "            self.bus.log('Handler for console events already set.', level=40)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "23", "colour": "orange", "code": "            return\n", "error": "none", "author": "tom@organisms.be"}, {"index": "24", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "25", "colour": "orange", "code": "        result = win32api.SetConsoleCtrlHandler(self.handle, 1)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "26", "colour": "orange", "code": "        if result == 0:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "27", "colour": "orange", "code": "            self.bus.log('Could not SetConsoleCtrlHandler (error %r)' %\n", "error": "none", "author": "tom@organisms.be"}, {"index": "28", "colour": "orange", "code": "                         win32api.GetLastError(), level=40)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "29", "colour": "orange", "code": "        else:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "30", "colour": "orange", "code": "            self.bus.log('Set handler for console events.', level=40)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "31", "colour": "orange", "code": "            self.is_set = True\n", "error": "none", "author": "tom@organisms.be"}, {"index": "32", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "33", "colour": "orange", "code": "    def stop(self):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "34", "colour": "orange", "code": "        if not self.is_set:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "35", "colour": "orange", "code": "            self.bus.log('Handler for console events already off.', level=40)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "36", "colour": "orange", "code": "            return\n", "error": "none", "author": "tom@organisms.be"}, {"index": "37", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "38", "colour": "orange", "code": "        try:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "39", "colour": "orange", "code": "            result = win32api.SetConsoleCtrlHandler(self.handle, 0)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "40", "colour": "orange", "code": "        except ValueError:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "41", "colour": "orange", "code": "            # \"ValueError: The object has not been registered\"\n", "error": "none", "author": "tom@organisms.be"}, {"index": "42", "colour": "orange", "code": "            result = 1\n", "error": "none", "author": "tom@organisms.be"}, {"index": "43", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "44", "colour": "orange", "code": "        if result == 0:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "45", "colour": "orange", "code": "            self.bus.log('Could not remove SetConsoleCtrlHandler (error %r)' %\n", "error": "none", "author": "tom@organisms.be"}, {"index": "46", "colour": "orange", "code": "                         win32api.GetLastError(), level=40)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "47", "colour": "orange", "code": "        else:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "48", "colour": "orange", "code": "            self.bus.log('Removed handler for console events.', level=40)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "49", "colour": "orange", "code": "            self.is_set = False\n", "error": "none", "author": "tom@organisms.be"}, {"index": "50", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "51", "colour": "orange", "code": "    def handle(self, event):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "52", "colour": "orange", "code": "        \"\"\"Handle console control events (like Ctrl-C).\"\"\"\n", "error": "none", "author": "tom@organisms.be"}, {"index": "53", "colour": "orange", "code": "        if event in (win32con.CTRL_C_EVENT, win32con.CTRL_LOGOFF_EVENT,\n", "error": "none", "author": "tom@organisms.be"}, {"index": "54", "colour": "orange", "code": "                     win32con.CTRL_BREAK_EVENT, win32con.CTRL_SHUTDOWN_EVENT,\n", "error": "none", "author": "tom@organisms.be"}, {"index": "55", "colour": "orange", "code": "                     win32con.CTRL_CLOSE_EVENT):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "56", "colour": "orange", "code": "            self.bus.log('Console event %s: shutting down bus' % event)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "57", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "58", "colour": "orange", "code": "            # Remove self immediately so repeated Ctrl-C doesn't re-call it.\n", "error": "none", "author": "tom@organisms.be"}, {"index": "59", "colour": "orange", "code": "            try:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "60", "colour": "orange", "code": "                self.stop()\n", "error": "none", "author": "tom@organisms.be"}, {"index": "61", "colour": "orange", "code": "            except ValueError:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "62", "colour": "orange", "code": "                pass\n", "error": "none", "author": "tom@organisms.be"}, {"index": "63", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "64", "colour": "orange", "code": "            self.bus.exit()\n", "error": "none", "author": "tom@organisms.be"}, {"index": "65", "colour": "orange", "code": "            # 'First to return True stops the calls'\n", "error": "none", "author": "tom@organisms.be"}, {"index": "66", "colour": "orange", "code": "            return 1\n", "error": "none", "author": "tom@organisms.be"}, {"index": "67", "colour": "orange", "code": "        return 0\n", "error": "none", "author": "tom@organisms.be"}, {"index": "68", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "69", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "70", "colour": "blue", "code": "class Win32Bus(wspbus.Bus):\n", "error": "R", "author": "tom@organisms.be"}, {"index": "71", "colour": "orange", "code": "    \"\"\"A Web Site Process Bus implementation for Win32.\n", "error": "none", "author": "tom@organisms.be"}, {"index": "72", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "73", "colour": "orange", "code": "    Instead of time.sleep, this bus blocks using native win32event objects.\n", "error": "none", "author": "tom@organisms.be"}, {"index": "74", "colour": "orange", "code": "    \"\"\"\n", "error": "none", "author": "tom@organisms.be"}, {"index": "75", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "76", "colour": "orange", "code": "    def __init__(self):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "77", "colour": "orange", "code": "        self.events = {}\n", "error": "none", "author": "tom@organisms.be"}, {"index": "78", "colour": "orange", "code": "        wspbus.Bus.__init__(self)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "79", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "80", "colour": "orange", "code": "    def _get_state_event(self, state):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "81", "colour": "orange", "code": "        \"\"\"Return a win32event for the given state (creating it if needed).\"\"\"\n", "error": "none", "author": "tom@organisms.be"}, {"index": "82", "colour": "orange", "code": "        try:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "83", "colour": "orange", "code": "            return self.events[state]\n", "error": "none", "author": "tom@organisms.be"}, {"index": "84", "colour": "orange", "code": "        except KeyError:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "85", "colour": "orange", "code": "            event = win32event.CreateEvent(None, 0, 0,\n", "error": "none", "author": "tom@organisms.be"}, {"index": "86", "colour": "orange", "code": "                                           \"WSPBus %s Event (pid=%r)\" %\n", "error": "none", "author": "tom@organisms.be"}, {"index": "87", "colour": "orange", "code": "                                           (state.name, os.getpid()))\n", "error": "none", "author": "tom@organisms.be"}, {"index": "88", "colour": "orange", "code": "            self.events[state] = event\n", "error": "none", "author": "tom@organisms.be"}, {"index": "89", "colour": "orange", "code": "            return event\n", "error": "none", "author": "tom@organisms.be"}, {"index": "90", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "91", "colour": "orange", "code": "    def _get_state(self):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "92", "colour": "orange", "code": "        return self._state\n", "error": "none", "author": "tom@organisms.be"}, {"index": "93", "colour": "orange", "code": "    def _set_state(self, value):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "94", "colour": "green", "code": "        self._state = value\n", "error": "W", "author": "tom@organisms.be"}, {"index": "95", "colour": "orange", "code": "        event = self._get_state_event(value)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "96", "colour": "orange", "code": "        win32event.PulseEvent(event)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "97", "colour": "orange", "code": "    state = property(_get_state, _set_state)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "98", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "99", "colour": "orange", "code": "    def wait(self, state, interval=0.1, channel=None):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "100", "colour": "orange", "code": "        \"\"\"Wait for the given state(s), KeyboardInterrupt or SystemExit.\n", "error": "none", "author": "tom@organisms.be"}, {"index": "101", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "102", "colour": "orange", "code": "        Since this class uses native win32event objects, the interval\n", "error": "none", "author": "tom@organisms.be"}, {"index": "103", "colour": "orange", "code": "        argument is ignored.\n", "error": "none", "author": "tom@organisms.be"}, {"index": "104", "colour": "orange", "code": "        \"\"\"\n", "error": "none", "author": "tom@organisms.be"}, {"index": "105", "colour": "orange", "code": "        if isinstance(state, (tuple, list)):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "106", "colour": "orange", "code": "            # Don't wait for an event that beat us to the punch ;)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "107", "colour": "orange", "code": "            if self.state not in state:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "108", "colour": "orange", "code": "                events = tuple([self._get_state_event(s) for s in state])\n", "error": "none", "author": "tom@organisms.be"}, {"index": "109", "colour": "orange", "code": "                win32event.WaitForMultipleObjects(events, 0, win32event.INFINITE)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "110", "colour": "orange", "code": "        else:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "111", "colour": "orange", "code": "            # Don't wait for an event that beat us to the punch ;)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "112", "colour": "orange", "code": "            if self.state != state:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "113", "colour": "orange", "code": "                event = self._get_state_event(state)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "114", "colour": "orange", "code": "                win32event.WaitForSingleObject(event, win32event.INFINITE)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "115", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "116", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "117", "colour": "orange", "code": "class _ControlCodes(dict):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "118", "colour": "orange", "code": "    \"\"\"Control codes used to \"signal\" a service via ControlService.\n", "error": "none", "author": "tom@organisms.be"}, {"index": "119", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "120", "colour": "orange", "code": "    User-defined control codes are in the range 128-255. We generally use\n", "error": "none", "author": "tom@organisms.be"}, {"index": "121", "colour": "orange", "code": "    the standard Python value for the Linux signal and add 128. Example:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "122", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "123", "colour": "orange", "code": "        >>> signal.SIGUSR1\n", "error": "none", "author": "tom@organisms.be"}, {"index": "124", "colour": "orange", "code": "        10\n", "error": "none", "author": "tom@organisms.be"}, {"index": "125", "colour": "orange", "code": "        control_codes['graceful'] = 128 + 10\n", "error": "none", "author": "tom@organisms.be"}, {"index": "126", "colour": "orange", "code": "    \"\"\"\n", "error": "none", "author": "tom@organisms.be"}, {"index": "127", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "128", "colour": "orange", "code": "    def key_for(self, obj):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "129", "colour": "orange", "code": "        \"\"\"For the given value, return its corresponding key.\"\"\"\n", "error": "none", "author": "tom@organisms.be"}, {"index": "130", "colour": "orange", "code": "        for key, val in self.items():\n", "error": "none", "author": "tom@organisms.be"}, {"index": "131", "colour": "orange", "code": "            if val is obj:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "132", "colour": "orange", "code": "                return key\n", "error": "none", "author": "tom@organisms.be"}, {"index": "133", "colour": "orange", "code": "        raise ValueError(\"The given object could not be found: %r\" % obj)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "134", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "135", "colour": "orange", "code": "control_codes = _ControlCodes({'graceful': 138})\n", "error": "none", "author": "tom@organisms.be"}, {"index": "136", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "137", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "138", "colour": "orange", "code": "def signal_child(service, command):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "139", "colour": "orange", "code": "    if command == 'stop':\n", "error": "none", "author": "tom@organisms.be"}, {"index": "140", "colour": "orange", "code": "        win32serviceutil.StopService(service)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "141", "colour": "orange", "code": "    elif command == 'restart':\n", "error": "none", "author": "tom@organisms.be"}, {"index": "142", "colour": "orange", "code": "        win32serviceutil.RestartService(service)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "143", "colour": "orange", "code": "    else:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "144", "colour": "orange", "code": "        win32serviceutil.ControlService(service, control_codes[command])\n", "error": "none", "author": "tom@organisms.be"}, {"index": "145", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "146", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "147", "colour": "green", "code": "class PyWebService(win32serviceutil.ServiceFramework):\n", "error": "W", "author": "tom@organisms.be"}, {"index": "148", "colour": "orange", "code": "    \"\"\"Python Web Service.\"\"\"\n", "error": "none", "author": "tom@organisms.be"}, {"index": "149", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "150", "colour": "orange", "code": "    _svc_name_ = \"Python Web Service\"\n", "error": "none", "author": "tom@organisms.be"}, {"index": "151", "colour": "orange", "code": "    _svc_display_name_ = \"Python Web Service\"\n", "error": "none", "author": "tom@organisms.be"}, {"index": "152", "colour": "orange", "code": "    _svc_deps_ = None        # sequence of service names on which this depends\n", "error": "none", "author": "tom@organisms.be"}, {"index": "153", "colour": "orange", "code": "    _exe_name_ = \"pywebsvc\"\n", "error": "none", "author": "tom@organisms.be"}, {"index": "154", "colour": "orange", "code": "    _exe_args_ = None        # Default to no arguments\n", "error": "none", "author": "tom@organisms.be"}, {"index": "155", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "156", "colour": "orange", "code": "    # Only exists on Windows 2000 or later, ignored on windows NT\n", "error": "none", "author": "tom@organisms.be"}, {"index": "157", "colour": "orange", "code": "    _svc_description_ = \"Python Web Service\"\n", "error": "none", "author": "tom@organisms.be"}, {"index": "158", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "159", "colour": "blue", "code": "    def SvcDoRun(self):\n", "error": "R", "author": "tom@organisms.be"}, {"index": "160", "colour": "orange", "code": "        from cherrypy import process\n", "error": "none", "author": "tom@organisms.be"}, {"index": "161", "colour": "orange", "code": "        process.bus.start()\n", "error": "none", "author": "tom@organisms.be"}, {"index": "162", "colour": "orange", "code": "        process.bus.block()\n", "error": "none", "author": "tom@organisms.be"}, {"index": "163", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "164", "colour": "orange", "code": "    def SvcStop(self):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "165", "colour": "orange", "code": "        from cherrypy import process\n", "error": "none", "author": "tom@organisms.be"}, {"index": "166", "colour": "red", "code": "        self.ReportServiceStatus(win32service.SERVICE_STOP_PENDING)\n", "error": "E", "author": "tom@organisms.be"}, {"index": "167", "colour": "orange", "code": "        process.bus.exit()\n", "error": "none", "author": "tom@organisms.be"}, {"index": "168", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "169", "colour": "blue", "code": "    def SvcOther(self, control):\n", "error": "R", "author": "tom@organisms.be"}, {"index": "170", "colour": "red", "code": "        process.bus.publish(control_codes.key_for(control))\n", "error": "E", "author": "tom@organisms.be"}, {"index": "171", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "172", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "173", "colour": "orange", "code": "if __name__ == '__main__':\n", "error": "none", "author": "tom@organisms.be"}, {"index": "174", "colour": "orange", "code": "    win32serviceutil.HandleCommandLine(PyWebService)\n", "error": "none", "author": "tom@organisms.be"}]]}