{"path": "/home/asumal/git/cs410/pattern/pattern/server/cherrypy/cherrypy/process/win32.py", "lines": [[{"error": "none", "line": "1", "code": "\"\"\"Windows service. Requires pywin32.\"\"\"\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "2", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "3", "code": "import os\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "F", "line": "4", "code": "import win32api\n", "colour": "red", "author": "tom@organisms.be"}, {"error": "F", "line": "5", "code": "import win32con\n", "colour": "red", "author": "tom@organisms.be"}, {"error": "F", "line": "6", "code": "import win32event\n", "colour": "red", "author": "tom@organisms.be"}, {"error": "F", "line": "7", "code": "import win32service\n", "colour": "red", "author": "tom@organisms.be"}, {"error": "F", "line": "8", "code": "import win32serviceutil\n", "colour": "red", "author": "tom@organisms.be"}, {"error": "none", "line": "9", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "10", "code": "from cherrypy.process import wspbus, plugins\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "11", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "12", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "13", "code": "class ConsoleCtrlHandler(plugins.SimplePlugin):\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "14", "code": "    \"\"\"A WSPBus plugin for handling Win32 console events (like Ctrl-C).\"\"\"\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "15", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "16", "code": "    def __init__(self, bus):\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "17", "code": "        self.is_set = False\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "18", "code": "        plugins.SimplePlugin.__init__(self, bus)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "19", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "20", "code": "    def start(self):\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "21", "code": "        if self.is_set:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "22", "code": "            self.bus.log('Handler for console events already set.', level=40)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "23", "code": "            return\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "24", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "25", "code": "        result = win32api.SetConsoleCtrlHandler(self.handle, 1)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "26", "code": "        if result == 0:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "27", "code": "            self.bus.log('Could not SetConsoleCtrlHandler (error %r)' %\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "28", "code": "                         win32api.GetLastError(), level=40)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "29", "code": "        else:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "30", "code": "            self.bus.log('Set handler for console events.', level=40)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "31", "code": "            self.is_set = True\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "32", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "33", "code": "    def stop(self):\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "34", "code": "        if not self.is_set:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "35", "code": "            self.bus.log('Handler for console events already off.', level=40)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "36", "code": "            return\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "37", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "38", "code": "        try:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "39", "code": "            result = win32api.SetConsoleCtrlHandler(self.handle, 0)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "40", "code": "        except ValueError:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "41", "code": "            # \"ValueError: The object has not been registered\"\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "42", "code": "            result = 1\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "43", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "44", "code": "        if result == 0:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "45", "code": "            self.bus.log('Could not remove SetConsoleCtrlHandler (error %r)' %\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "46", "code": "                         win32api.GetLastError(), level=40)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "47", "code": "        else:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "48", "code": "            self.bus.log('Removed handler for console events.', level=40)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "49", "code": "            self.is_set = False\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "50", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "51", "code": "    def handle(self, event):\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "52", "code": "        \"\"\"Handle console control events (like Ctrl-C).\"\"\"\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "53", "code": "        if event in (win32con.CTRL_C_EVENT, win32con.CTRL_LOGOFF_EVENT,\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "54", "code": "                     win32con.CTRL_BREAK_EVENT, win32con.CTRL_SHUTDOWN_EVENT,\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "55", "code": "                     win32con.CTRL_CLOSE_EVENT):\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "56", "code": "            self.bus.log('Console event %s: shutting down bus' % event)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "57", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "58", "code": "            # Remove self immediately so repeated Ctrl-C doesn't re-call it.\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "59", "code": "            try:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "60", "code": "                self.stop()\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "61", "code": "            except ValueError:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "62", "code": "                pass\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "63", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "64", "code": "            self.bus.exit()\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "65", "code": "            # 'First to return True stops the calls'\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "66", "code": "            return 1\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "67", "code": "        return 0\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "68", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "69", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "R", "line": "70", "code": "class Win32Bus(wspbus.Bus):\n", "colour": "green", "author": "tom@organisms.be"}, {"error": "none", "line": "71", "code": "    \"\"\"A Web Site Process Bus implementation for Win32.\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "72", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "73", "code": "    Instead of time.sleep, this bus blocks using native win32event objects.\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "74", "code": "    \"\"\"\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "75", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "76", "code": "    def __init__(self):\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "77", "code": "        self.events = {}\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "78", "code": "        wspbus.Bus.__init__(self)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "79", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "80", "code": "    def _get_state_event(self, state):\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "81", "code": "        \"\"\"Return a win32event for the given state (creating it if needed).\"\"\"\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "82", "code": "        try:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "83", "code": "            return self.events[state]\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "84", "code": "        except KeyError:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "85", "code": "            event = win32event.CreateEvent(None, 0, 0,\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "86", "code": "                                           \"WSPBus %s Event (pid=%r)\" %\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "87", "code": "                                           (state.name, os.getpid()))\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "88", "code": "            self.events[state] = event\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "89", "code": "            return event\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "90", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "91", "code": "    def _get_state(self):\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "92", "code": "        return self._state\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "93", "code": "    def _set_state(self, value):\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "W", "line": "94", "code": "        self._state = value\n", "colour": "purple", "author": "tom@organisms.be"}, {"error": "none", "line": "95", "code": "        event = self._get_state_event(value)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "96", "code": "        win32event.PulseEvent(event)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "97", "code": "    state = property(_get_state, _set_state)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "98", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "99", "code": "    def wait(self, state, interval=0.1, channel=None):\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "100", "code": "        \"\"\"Wait for the given state(s), KeyboardInterrupt or SystemExit.\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "101", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "102", "code": "        Since this class uses native win32event objects, the interval\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "103", "code": "        argument is ignored.\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "104", "code": "        \"\"\"\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "105", "code": "        if isinstance(state, (tuple, list)):\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "106", "code": "            # Don't wait for an event that beat us to the punch ;)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "107", "code": "            if self.state not in state:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "108", "code": "                events = tuple([self._get_state_event(s) for s in state])\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "109", "code": "                win32event.WaitForMultipleObjects(events, 0, win32event.INFINITE)\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "110", "code": "        else:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "111", "code": "            # Don't wait for an event that beat us to the punch ;)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "112", "code": "            if self.state != state:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "113", "code": "                event = self._get_state_event(state)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "114", "code": "                win32event.WaitForSingleObject(event, win32event.INFINITE)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "115", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "116", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "117", "code": "class _ControlCodes(dict):\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "118", "code": "    \"\"\"Control codes used to \"signal\" a service via ControlService.\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "119", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "120", "code": "    User-defined control codes are in the range 128-255. We generally use\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "121", "code": "    the standard Python value for the Linux signal and add 128. Example:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "122", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "123", "code": "        >>> signal.SIGUSR1\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "124", "code": "        10\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "125", "code": "        control_codes['graceful'] = 128 + 10\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "126", "code": "    \"\"\"\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "127", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "128", "code": "    def key_for(self, obj):\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "129", "code": "        \"\"\"For the given value, return its corresponding key.\"\"\"\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "130", "code": "        for key, val in self.items():\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "131", "code": "            if val is obj:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "132", "code": "                return key\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "133", "code": "        raise ValueError(\"The given object could not be found: %r\" % obj)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "134", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "135", "code": "control_codes = _ControlCodes({'graceful': 138})\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "136", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "137", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "138", "code": "def signal_child(service, command):\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "139", "code": "    if command == 'stop':\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "140", "code": "        win32serviceutil.StopService(service)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "141", "code": "    elif command == 'restart':\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "142", "code": "        win32serviceutil.RestartService(service)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "143", "code": "    else:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "144", "code": "        win32serviceutil.ControlService(service, control_codes[command])\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "145", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "146", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "W", "line": "147", "code": "class PyWebService(win32serviceutil.ServiceFramework):\n", "colour": "purple", "author": "tom@organisms.be"}, {"error": "none", "line": "148", "code": "    \"\"\"Python Web Service.\"\"\"\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "149", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "150", "code": "    _svc_name_ = \"Python Web Service\"\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "151", "code": "    _svc_display_name_ = \"Python Web Service\"\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "152", "code": "    _svc_deps_ = None        # sequence of service names on which this depends\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "153", "code": "    _exe_name_ = \"pywebsvc\"\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "154", "code": "    _exe_args_ = None        # Default to no arguments\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "155", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "156", "code": "    # Only exists on Windows 2000 or later, ignored on windows NT\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "157", "code": "    _svc_description_ = \"Python Web Service\"\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "158", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "R", "line": "159", "code": "    def SvcDoRun(self):\n", "colour": "green", "author": "tom@organisms.be"}, {"error": "none", "line": "160", "code": "        from cherrypy import process\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "161", "code": "        process.bus.start()\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "162", "code": "        process.bus.block()\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "163", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "164", "code": "    def SvcStop(self):\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "165", "code": "        from cherrypy import process\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "E", "line": "166", "code": "        self.ReportServiceStatus(win32service.SERVICE_STOP_PENDING)\n", "colour": "yellow", "author": "tom@organisms.be"}, {"error": "none", "line": "167", "code": "        process.bus.exit()\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "168", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "R", "line": "169", "code": "    def SvcOther(self, control):\n", "colour": "green", "author": "tom@organisms.be"}, {"error": "E", "line": "170", "code": "        process.bus.publish(control_codes.key_for(control))\n", "colour": "yellow", "author": "tom@organisms.be"}, {"error": "none", "line": "171", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "172", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "173", "code": "if __name__ == '__main__':\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "174", "code": "    win32serviceutil.HandleCommandLine(PyWebService)\n", "colour": "black", "author": "tom@organisms.be"}]]}