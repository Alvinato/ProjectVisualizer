{"path": "/home/asumal/git/cs410/pattern/pattern/web/json/ordered_dict.py", "lines": [[{"error": "none", "line": "1", "code": "\"\"\"Drop-in replacement for collections.OrderedDict by Raymond Hettinger\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "2", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "3", "code": "http://code.activestate.com/recipes/576693/\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "4", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "5", "code": "\"\"\"\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "6", "code": "from UserDict import DictMixin\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "7", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "8", "code": "# Modified from original to support Python 2.4, see\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "9", "code": "# http://code.google.com/p/simplejson/issues/detail?id=53\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "10", "code": "try:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "11", "code": "    all\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "12", "code": "except NameError:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "13", "code": "    def all(seq):\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "14", "code": "        for elem in seq:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "15", "code": "            if not elem:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "16", "code": "                return False\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "17", "code": "        return True\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "18", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "19", "code": "class OrderedDict(dict, DictMixin):\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "20", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "W", "line": "21", "code": "    def __init__(self, *args, **kwds):\n", "colour": "purple", "author": "tom@organisms.be"}, {"error": "none", "line": "22", "code": "        if len(args) > 1:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "23", "code": "            raise TypeError('expected at most 1 arguments, got %d' % len(args))\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "24", "code": "        try:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "25", "code": "            self.__end\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "26", "code": "        except AttributeError:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "27", "code": "            self.clear()\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "28", "code": "        self.update(*args, **kwds)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "29", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "30", "code": "    def clear(self):\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "W", "line": "31", "code": "        self.__end = end = []\n", "colour": "purple", "author": "tom@organisms.be"}, {"error": "none", "line": "32", "code": "        end += [None, end, end]         # sentinel node for doubly linked list\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "W", "line": "33", "code": "        self.__map = {}                 # key --> [key, prev, next]\n", "colour": "purple", "author": "tom@organisms.be"}, {"error": "none", "line": "34", "code": "        dict.clear(self)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "35", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "36", "code": "    def __setitem__(self, key, value):\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "37", "code": "        if key not in self:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "38", "code": "            end = self.__end\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "39", "code": "            curr = end[1]\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "40", "code": "            curr[2] = end[1] = self.__map[key] = [key, curr, end]\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "41", "code": "        dict.__setitem__(self, key, value)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "42", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "43", "code": "    def __delitem__(self, key):\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "44", "code": "        dict.__delitem__(self, key)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "W", "line": "45", "code": "        key, prev, next = self.__map.pop(key)\n", "colour": "purple", "author": "tom@organisms.be"}, {"error": "none", "line": "46", "code": "        prev[2] = next\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "47", "code": "        next[1] = prev\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "48", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "49", "code": "    def __iter__(self):\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "50", "code": "        end = self.__end\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "51", "code": "        curr = end[2]\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "52", "code": "        while curr is not end:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "53", "code": "            yield curr[0]\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "54", "code": "            curr = curr[2]\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "55", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "56", "code": "    def __reversed__(self):\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "57", "code": "        end = self.__end\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "58", "code": "        curr = end[1]\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "59", "code": "        while curr is not end:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "60", "code": "            yield curr[0]\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "61", "code": "            curr = curr[1]\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "62", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "63", "code": "    def popitem(self, last=True):\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "64", "code": "        if not self:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "65", "code": "            raise KeyError('dictionary is empty')\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "66", "code": "        # Modified from original to support Python 2.4, see\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "67", "code": "        # http://code.google.com/p/simplejson/issues/detail?id=53\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "68", "code": "        if last:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "E", "line": "69", "code": "            key = reversed(self).next()\n", "colour": "yellow", "author": "tom@organisms.be"}, {"error": "none", "line": "70", "code": "        else:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "71", "code": "            key = iter(self).next()\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "72", "code": "        value = self.pop(key)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "73", "code": "        return key, value\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "74", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "75", "code": "    def __reduce__(self):\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "76", "code": "        items = [[k, self[k]] for k in self]\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "77", "code": "        tmp = self.__map, self.__end\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "78", "code": "        del self.__map, self.__end\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "79", "code": "        inst_dict = vars(self).copy()\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "W", "line": "80", "code": "        self.__map, self.__end = tmp\n", "colour": "purple", "author": "tom@organisms.be"}, {"error": "none", "line": "81", "code": "        if inst_dict:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "82", "code": "            return (self.__class__, (items,), inst_dict)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "83", "code": "        return self.__class__, (items,)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "84", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "85", "code": "    def keys(self):\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "86", "code": "        return list(self)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "87", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "88", "code": "    setdefault = DictMixin.setdefault\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "89", "code": "    update = DictMixin.update\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "90", "code": "    pop = DictMixin.pop\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "91", "code": "    values = DictMixin.values\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "92", "code": "    items = DictMixin.items\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "93", "code": "    iterkeys = DictMixin.iterkeys\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "94", "code": "    itervalues = DictMixin.itervalues\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "95", "code": "    iteritems = DictMixin.iteritems\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "96", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "97", "code": "    def __repr__(self):\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "98", "code": "        if not self:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "99", "code": "            return '%s()' % (self.__class__.__name__,)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "100", "code": "        return '%s(%r)' % (self.__class__.__name__, self.items())\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "101", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "102", "code": "    def copy(self):\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "103", "code": "        return self.__class__(self)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "104", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "105", "code": "    @classmethod\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "106", "code": "    def fromkeys(cls, iterable, value=None):\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "C", "line": "107", "code": "        d = cls()\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "108", "code": "        for key in iterable:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "109", "code": "            d[key] = value\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "110", "code": "        return d\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "111", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "112", "code": "    def __eq__(self, other):\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "113", "code": "        if isinstance(other, OrderedDict):\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "114", "code": "            return len(self)==len(other) and \\\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "C", "line": "115", "code": "                   all(p==q for p, q in  zip(self.items(), other.items()))\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "116", "code": "        return dict.__eq__(self, other)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "117", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "118", "code": "    def __ne__(self, other):\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "119", "code": "        return not self == other\n", "colour": "black", "author": "tom@organisms.be"}]]}