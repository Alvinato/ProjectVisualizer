{"path": "/home/asumal/git/cs410/pattern/pattern/server/cherrypy/cherrypy/process/wspbus.py", "lines": [{"index": "1", "colour": "green", "code": "\"\"\"An implementation of the Web Site Process Bus.\n", "error": "W", "author": "tom@organisms.be"}, {"index": "2", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "3", "colour": "orange", "code": "This module is completely standalone, depending only on the stdlib.\n", "error": "none", "author": "tom@organisms.be"}, {"index": "4", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "5", "colour": "orange", "code": "Web Site Process Bus\n", "error": "none", "author": "tom@organisms.be"}, {"index": "6", "colour": "orange", "code": "--------------------\n", "error": "none", "author": "tom@organisms.be"}, {"index": "7", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "8", "colour": "orange", "code": "A Bus object is used to contain and manage site-wide behavior:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "9", "colour": "orange", "code": "daemonization, HTTP server start/stop, process reload, signal handling,\n", "error": "none", "author": "tom@organisms.be"}, {"index": "10", "colour": "orange", "code": "drop privileges, PID file management, logging for all of these,\n", "error": "none", "author": "tom@organisms.be"}, {"index": "11", "colour": "orange", "code": "and many more.\n", "error": "none", "author": "tom@organisms.be"}, {"index": "12", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "13", "colour": "orange", "code": "In addition, a Bus object provides a place for each web framework\n", "error": "none", "author": "tom@organisms.be"}, {"index": "14", "colour": "orange", "code": "to register code that runs in response to site-wide events (like\n", "error": "none", "author": "tom@organisms.be"}, {"index": "15", "colour": "orange", "code": "process start and stop), or which controls or otherwise interacts with\n", "error": "none", "author": "tom@organisms.be"}, {"index": "16", "colour": "orange", "code": "the site-wide components mentioned above. For example, a framework which\n", "error": "none", "author": "tom@organisms.be"}, {"index": "17", "colour": "orange", "code": "uses file-based templates would add known template filenames to an\n", "error": "none", "author": "tom@organisms.be"}, {"index": "18", "colour": "orange", "code": "autoreload component.\n", "error": "none", "author": "tom@organisms.be"}, {"index": "19", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "20", "colour": "orange", "code": "Ideally, a Bus object will be flexible enough to be useful in a variety\n", "error": "none", "author": "tom@organisms.be"}, {"index": "21", "colour": "orange", "code": "of invocation scenarios:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "22", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "23", "colour": "orange", "code": " 1. The deployer starts a site from the command line via a\n", "error": "none", "author": "tom@organisms.be"}, {"index": "24", "colour": "orange", "code": "    framework-neutral deployment script; applications from multiple frameworks\n", "error": "none", "author": "tom@organisms.be"}, {"index": "25", "colour": "orange", "code": "    are mixed in a single site. Command-line arguments and configuration\n", "error": "none", "author": "tom@organisms.be"}, {"index": "26", "colour": "orange", "code": "    files are used to define site-wide components such as the HTTP server,\n", "error": "none", "author": "tom@organisms.be"}, {"index": "27", "colour": "orange", "code": "    WSGI component graph, autoreload behavior, signal handling, etc.\n", "error": "none", "author": "tom@organisms.be"}, {"index": "28", "colour": "orange", "code": " 2. The deployer starts a site via some other process, such as Apache;\n", "error": "none", "author": "tom@organisms.be"}, {"index": "29", "colour": "orange", "code": "    applications from multiple frameworks are mixed in a single site.\n", "error": "none", "author": "tom@organisms.be"}, {"index": "30", "colour": "orange", "code": "    Autoreload and signal handling (from Python at least) are disabled.\n", "error": "none", "author": "tom@organisms.be"}, {"index": "31", "colour": "orange", "code": " 3. The deployer starts a site via a framework-specific mechanism;\n", "error": "none", "author": "tom@organisms.be"}, {"index": "32", "colour": "orange", "code": "    for example, when running tests, exploring tutorials, or deploying\n", "error": "none", "author": "tom@organisms.be"}, {"index": "33", "colour": "orange", "code": "    single applications from a single framework. The framework controls\n", "error": "none", "author": "tom@organisms.be"}, {"index": "34", "colour": "orange", "code": "    which site-wide components are enabled as it sees fit.\n", "error": "none", "author": "tom@organisms.be"}, {"index": "35", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "36", "colour": "orange", "code": "The Bus object in this package uses topic-based publish-subscribe\n", "error": "none", "author": "tom@organisms.be"}, {"index": "37", "colour": "orange", "code": "messaging to accomplish all this. A few topic channels are built in\n", "error": "none", "author": "tom@organisms.be"}, {"index": "38", "colour": "orange", "code": "('start', 'stop', 'exit', 'graceful', 'log', and 'main'). Frameworks and\n", "error": "none", "author": "tom@organisms.be"}, {"index": "39", "colour": "orange", "code": "site containers are free to define their own. If a message is sent to a\n", "error": "none", "author": "tom@organisms.be"}, {"index": "40", "colour": "orange", "code": "channel that has not been defined or has no listeners, there is no effect.\n", "error": "none", "author": "tom@organisms.be"}, {"index": "41", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "42", "colour": "orange", "code": "In general, there should only ever be a single Bus object per process.\n", "error": "none", "author": "tom@organisms.be"}, {"index": "43", "colour": "orange", "code": "Frameworks and site containers share a single Bus object by publishing\n", "error": "none", "author": "tom@organisms.be"}, {"index": "44", "colour": "orange", "code": "messages and subscribing listeners.\n", "error": "none", "author": "tom@organisms.be"}, {"index": "45", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "46", "colour": "orange", "code": "The Bus object works as a finite state machine which models the current\n", "error": "none", "author": "tom@organisms.be"}, {"index": "47", "colour": "orange", "code": "state of the process. Bus methods move it from one state to another;\n", "error": "none", "author": "tom@organisms.be"}, {"index": "48", "colour": "orange", "code": "those methods then publish to subscribed listeners on the channel for\n", "error": "none", "author": "tom@organisms.be"}, {"index": "49", "colour": "orange", "code": "the new state.::\n", "error": "none", "author": "tom@organisms.be"}, {"index": "50", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "51", "colour": "orange", "code": "                        O\n", "error": "none", "author": "tom@organisms.be"}, {"index": "52", "colour": "orange", "code": "                        |\n", "error": "none", "author": "tom@organisms.be"}, {"index": "53", "colour": "orange", "code": "                        V\n", "error": "none", "author": "tom@organisms.be"}, {"index": "54", "colour": "orange", "code": "       STOPPING --> STOPPED --> EXITING -> X\n", "error": "none", "author": "tom@organisms.be"}, {"index": "55", "colour": "orange", "code": "          A   A         |\n", "error": "none", "author": "tom@organisms.be"}, {"index": "56", "colour": "orange", "code": "          |    \\___     |\n", "error": "none", "author": "tom@organisms.be"}, {"index": "57", "colour": "orange", "code": "          |        \\    |\n", "error": "none", "author": "tom@organisms.be"}, {"index": "58", "colour": "orange", "code": "          |         V   V\n", "error": "none", "author": "tom@organisms.be"}, {"index": "59", "colour": "orange", "code": "        STARTED <-- STARTING\n", "error": "none", "author": "tom@organisms.be"}, {"index": "60", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "61", "colour": "orange", "code": "\"\"\"\n", "error": "none", "author": "tom@organisms.be"}, {"index": "62", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "63", "colour": "orange", "code": "import atexit\n", "error": "none", "author": "tom@organisms.be"}, {"index": "64", "colour": "orange", "code": "import os\n", "error": "none", "author": "tom@organisms.be"}, {"index": "65", "colour": "orange", "code": "import sys\n", "error": "none", "author": "tom@organisms.be"}, {"index": "66", "colour": "orange", "code": "import threading\n", "error": "none", "author": "tom@organisms.be"}, {"index": "67", "colour": "orange", "code": "import time\n", "error": "none", "author": "tom@organisms.be"}, {"index": "68", "colour": "orange", "code": "import traceback as _traceback\n", "error": "none", "author": "tom@organisms.be"}, {"index": "69", "colour": "orange", "code": "import warnings\n", "error": "none", "author": "tom@organisms.be"}, {"index": "70", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "71", "colour": "green", "code": "from cherrypy._cpcompat import set\n", "error": "W", "author": "tom@organisms.be"}, {"index": "72", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "73", "colour": "orange", "code": "# Here I save the value of os.getcwd(), which, if I am imported early enough,\n", "error": "none", "author": "tom@organisms.be"}, {"index": "74", "colour": "orange", "code": "# will be the directory from which the startup script was run.  This is needed\n", "error": "none", "author": "tom@organisms.be"}, {"index": "75", "colour": "orange", "code": "# by _do_execv(), to change back to the original directory before execv()ing a\n", "error": "none", "author": "tom@organisms.be"}, {"index": "76", "colour": "orange", "code": "# new process.  This is a defense against the application having changed the\n", "error": "none", "author": "tom@organisms.be"}, {"index": "77", "colour": "orange", "code": "# current working directory (which could make sys.executable \"not found\" if\n", "error": "none", "author": "tom@organisms.be"}, {"index": "78", "colour": "orange", "code": "# sys.executable is a relative-path, and/or cause other problems).\n", "error": "none", "author": "tom@organisms.be"}, {"index": "79", "colour": "orange", "code": "_startup_cwd = os.getcwd()\n", "error": "none", "author": "tom@organisms.be"}, {"index": "80", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "81", "colour": "orange", "code": "class ChannelFailures(Exception):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "82", "colour": "orange", "code": "    \"\"\"Exception raised when errors occur in a listener during Bus.publish().\"\"\"\n", "error": "none", "author": "tom@organisms.be"}, {"index": "83", "colour": "orange", "code": "    delimiter = '\\n'\n", "error": "none", "author": "tom@organisms.be"}, {"index": "84", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "85", "colour": "orange", "code": "    def __init__(self, *args, **kwargs):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "86", "colour": "orange", "code": "        # Don't use 'super' here; Exceptions are old-style in Py2.4\n", "error": "none", "author": "tom@organisms.be"}, {"index": "87", "colour": "orange", "code": "        # See http://www.cherrypy.org/ticket/959\n", "error": "none", "author": "tom@organisms.be"}, {"index": "88", "colour": "orange", "code": "        Exception.__init__(self, *args, **kwargs)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "89", "colour": "orange", "code": "        self._exceptions = list()\n", "error": "none", "author": "tom@organisms.be"}, {"index": "90", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "91", "colour": "orange", "code": "    def handle_exception(self):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "92", "colour": "orange", "code": "        \"\"\"Append the current exception to self.\"\"\"\n", "error": "none", "author": "tom@organisms.be"}, {"index": "93", "colour": "orange", "code": "        self._exceptions.append(sys.exc_info()[1])\n", "error": "none", "author": "tom@organisms.be"}, {"index": "94", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "95", "colour": "orange", "code": "    def get_instances(self):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "96", "colour": "orange", "code": "        \"\"\"Return a list of seen exception instances.\"\"\"\n", "error": "none", "author": "tom@organisms.be"}, {"index": "97", "colour": "orange", "code": "        return self._exceptions[:]\n", "error": "none", "author": "tom@organisms.be"}, {"index": "98", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "99", "colour": "orange", "code": "    def __str__(self):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "100", "colour": "green", "code": "        exception_strings = map(repr, self.get_instances())\n", "error": "W", "author": "tom@organisms.be"}, {"index": "101", "colour": "orange", "code": "        return self.delimiter.join(exception_strings)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "102", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "103", "colour": "orange", "code": "    __repr__ = __str__\n", "error": "none", "author": "tom@organisms.be"}, {"index": "104", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "105", "colour": "orange", "code": "    def __bool__(self):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "106", "colour": "orange", "code": "        return bool(self._exceptions)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "107", "colour": "orange", "code": "    __nonzero__ = __bool__\n", "error": "none", "author": "tom@organisms.be"}, {"index": "108", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "109", "colour": "orange", "code": "# Use a flag to indicate the state of the bus.\n", "error": "none", "author": "tom@organisms.be"}, {"index": "110", "colour": "blue", "code": "class _StateEnum(object):\n", "error": "R", "author": "tom@organisms.be"}, {"index": "111", "colour": "blue", "code": "    class State(object):\n", "error": "R", "author": "tom@organisms.be"}, {"index": "112", "colour": "orange", "code": "        name = None\n", "error": "none", "author": "tom@organisms.be"}, {"index": "113", "colour": "orange", "code": "        def __repr__(self):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "114", "colour": "orange", "code": "            return \"states.%s\" % self.name\n", "error": "none", "author": "tom@organisms.be"}, {"index": "115", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "116", "colour": "orange", "code": "    def __setattr__(self, key, value):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "117", "colour": "orange", "code": "        if isinstance(value, self.State):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "118", "colour": "orange", "code": "            value.name = key\n", "error": "none", "author": "tom@organisms.be"}, {"index": "119", "colour": "orange", "code": "        object.__setattr__(self, key, value)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "120", "colour": "orange", "code": "states = _StateEnum()\n", "error": "none", "author": "tom@organisms.be"}, {"index": "121", "colour": "green", "code": "states.STOPPED = states.State()\n", "error": "W", "author": "tom@organisms.be"}, {"index": "122", "colour": "green", "code": "states.STARTING = states.State()\n", "error": "W", "author": "tom@organisms.be"}, {"index": "123", "colour": "green", "code": "states.STARTED = states.State()\n", "error": "W", "author": "tom@organisms.be"}, {"index": "124", "colour": "green", "code": "states.STOPPING = states.State()\n", "error": "W", "author": "tom@organisms.be"}, {"index": "125", "colour": "green", "code": "states.EXITING = states.State()\n", "error": "W", "author": "tom@organisms.be"}, {"index": "126", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "127", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "128", "colour": "orange", "code": "try:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "129", "colour": "orange", "code": "    import fcntl\n", "error": "none", "author": "tom@organisms.be"}, {"index": "130", "colour": "orange", "code": "except ImportError:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "131", "colour": "orange", "code": "    max_files = 0\n", "error": "none", "author": "tom@organisms.be"}, {"index": "132", "colour": "orange", "code": "else:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "133", "colour": "orange", "code": "    try:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "134", "colour": "orange", "code": "        max_files = os.sysconf('SC_OPEN_MAX')\n", "error": "none", "author": "tom@organisms.be"}, {"index": "135", "colour": "orange", "code": "    except AttributeError:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "136", "colour": "orange", "code": "        max_files = 1024\n", "error": "none", "author": "tom@organisms.be"}, {"index": "137", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "138", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "139", "colour": "blue", "code": "class Bus(object):\n", "error": "R", "author": "tom@organisms.be"}, {"index": "140", "colour": "orange", "code": "    \"\"\"Process state-machine and messenger for HTTP site deployment.\n", "error": "none", "author": "tom@organisms.be"}, {"index": "141", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "142", "colour": "orange", "code": "    All listeners for a given channel are guaranteed to be called even\n", "error": "none", "author": "tom@organisms.be"}, {"index": "143", "colour": "orange", "code": "    if others at the same channel fail. Each failure is logged, but\n", "error": "none", "author": "tom@organisms.be"}, {"index": "144", "colour": "orange", "code": "    execution proceeds on to the next listener. The only way to stop all\n", "error": "none", "author": "tom@organisms.be"}, {"index": "145", "colour": "orange", "code": "    processing from inside a listener is to raise SystemExit and stop the\n", "error": "none", "author": "tom@organisms.be"}, {"index": "146", "colour": "orange", "code": "    whole server.\n", "error": "none", "author": "tom@organisms.be"}, {"index": "147", "colour": "orange", "code": "    \"\"\"\n", "error": "none", "author": "tom@organisms.be"}, {"index": "148", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "149", "colour": "orange", "code": "    states = states\n", "error": "none", "author": "tom@organisms.be"}, {"index": "150", "colour": "orange", "code": "    state = states.STOPPED\n", "error": "none", "author": "tom@organisms.be"}, {"index": "151", "colour": "orange", "code": "    execv = False\n", "error": "none", "author": "tom@organisms.be"}, {"index": "152", "colour": "orange", "code": "    max_cloexec_files = max_files\n", "error": "none", "author": "tom@organisms.be"}, {"index": "153", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "154", "colour": "orange", "code": "    def __init__(self):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "155", "colour": "orange", "code": "        self.execv = False\n", "error": "none", "author": "tom@organisms.be"}, {"index": "156", "colour": "orange", "code": "        self.state = states.STOPPED\n", "error": "none", "author": "tom@organisms.be"}, {"index": "157", "colour": "orange", "code": "        self.listeners = dict(\n", "error": "none", "author": "tom@organisms.be"}, {"index": "158", "colour": "orange", "code": "            [(channel, set()) for channel\n", "error": "none", "author": "tom@organisms.be"}, {"index": "159", "colour": "orange", "code": "             in ('start', 'stop', 'exit', 'graceful', 'log', 'main')])\n", "error": "none", "author": "tom@organisms.be"}, {"index": "160", "colour": "orange", "code": "        self._priorities = {}\n", "error": "none", "author": "tom@organisms.be"}, {"index": "161", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "162", "colour": "orange", "code": "    def subscribe(self, channel, callback, priority=None):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "163", "colour": "orange", "code": "        \"\"\"Add the given callback at the given channel (if not present).\"\"\"\n", "error": "none", "author": "tom@organisms.be"}, {"index": "164", "colour": "orange", "code": "        if channel not in self.listeners:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "165", "colour": "orange", "code": "            self.listeners[channel] = set()\n", "error": "none", "author": "tom@organisms.be"}, {"index": "166", "colour": "orange", "code": "        self.listeners[channel].add(callback)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "167", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "168", "colour": "orange", "code": "        if priority is None:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "169", "colour": "orange", "code": "            priority = getattr(callback, 'priority', 50)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "170", "colour": "orange", "code": "        self._priorities[(channel, callback)] = priority\n", "error": "none", "author": "tom@organisms.be"}, {"index": "171", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "172", "colour": "orange", "code": "    def unsubscribe(self, channel, callback):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "173", "colour": "orange", "code": "        \"\"\"Discard the given callback (if present).\"\"\"\n", "error": "none", "author": "tom@organisms.be"}, {"index": "174", "colour": "orange", "code": "        listeners = self.listeners.get(channel)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "175", "colour": "orange", "code": "        if listeners and callback in listeners:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "176", "colour": "orange", "code": "            listeners.discard(callback)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "177", "colour": "orange", "code": "            del self._priorities[(channel, callback)]\n", "error": "none", "author": "tom@organisms.be"}, {"index": "178", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "179", "colour": "orange", "code": "    def publish(self, channel, *args, **kwargs):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "180", "colour": "orange", "code": "        \"\"\"Return output of all subscribers for the given channel.\"\"\"\n", "error": "none", "author": "tom@organisms.be"}, {"index": "181", "colour": "orange", "code": "        if channel not in self.listeners:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "182", "colour": "orange", "code": "            return []\n", "error": "none", "author": "tom@organisms.be"}, {"index": "183", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "184", "colour": "orange", "code": "        exc = ChannelFailures()\n", "error": "none", "author": "tom@organisms.be"}, {"index": "185", "colour": "orange", "code": "        output = []\n", "error": "none", "author": "tom@organisms.be"}, {"index": "186", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "187", "colour": "orange", "code": "        items = [(self._priorities[(channel, listener)], listener)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "188", "colour": "orange", "code": "                 for listener in self.listeners[channel]]\n", "error": "none", "author": "tom@organisms.be"}, {"index": "189", "colour": "orange", "code": "        try:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "190", "colour": "orange", "code": "            items.sort(key=lambda item: item[0])\n", "error": "none", "author": "tom@organisms.be"}, {"index": "191", "colour": "orange", "code": "        except TypeError:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "192", "colour": "orange", "code": "            # Python 2.3 had no 'key' arg, but that doesn't matter\n", "error": "none", "author": "tom@organisms.be"}, {"index": "193", "colour": "orange", "code": "            # since it could sort dissimilar types just fine.\n", "error": "none", "author": "tom@organisms.be"}, {"index": "194", "colour": "orange", "code": "            items.sort()\n", "error": "none", "author": "tom@organisms.be"}, {"index": "195", "colour": "green", "code": "        for priority, listener in items:\n", "error": "W", "author": "tom@organisms.be"}, {"index": "196", "colour": "orange", "code": "            try:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "197", "colour": "orange", "code": "                output.append(listener(*args, **kwargs))\n", "error": "none", "author": "tom@organisms.be"}, {"index": "198", "colour": "orange", "code": "            except KeyboardInterrupt:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "199", "colour": "orange", "code": "                raise\n", "error": "none", "author": "tom@organisms.be"}, {"index": "200", "colour": "orange", "code": "            except SystemExit:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "201", "colour": "orange", "code": "                e = sys.exc_info()[1]\n", "error": "none", "author": "tom@organisms.be"}, {"index": "202", "colour": "orange", "code": "                # If we have previous errors ensure the exit code is non-zero\n", "error": "none", "author": "tom@organisms.be"}, {"index": "203", "colour": "orange", "code": "                if exc and e.code == 0:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "204", "colour": "orange", "code": "                    e.code = 1\n", "error": "none", "author": "tom@organisms.be"}, {"index": "205", "colour": "orange", "code": "                raise\n", "error": "none", "author": "tom@organisms.be"}, {"index": "206", "colour": "green", "code": "            except:\n", "error": "W", "author": "tom@organisms.be"}, {"index": "207", "colour": "orange", "code": "                exc.handle_exception()\n", "error": "none", "author": "tom@organisms.be"}, {"index": "208", "colour": "orange", "code": "                if channel == 'log':\n", "error": "none", "author": "tom@organisms.be"}, {"index": "209", "colour": "orange", "code": "                    # Assume any further messages to 'log' will fail.\n", "error": "none", "author": "tom@organisms.be"}, {"index": "210", "colour": "orange", "code": "                    pass\n", "error": "none", "author": "tom@organisms.be"}, {"index": "211", "colour": "orange", "code": "                else:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "212", "colour": "orange", "code": "                    self.log(\"Error in %r listener %r\" % (channel, listener),\n", "error": "none", "author": "tom@organisms.be"}, {"index": "213", "colour": "orange", "code": "                             level=40, traceback=True)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "214", "colour": "orange", "code": "        if exc:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "215", "colour": "orange", "code": "            raise exc\n", "error": "none", "author": "tom@organisms.be"}, {"index": "216", "colour": "orange", "code": "        return output\n", "error": "none", "author": "tom@organisms.be"}, {"index": "217", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "218", "colour": "orange", "code": "    def _clean_exit(self):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "219", "colour": "orange", "code": "        \"\"\"An atexit handler which asserts the Bus is not running.\"\"\"\n", "error": "none", "author": "tom@organisms.be"}, {"index": "220", "colour": "orange", "code": "        if self.state != states.EXITING:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "221", "colour": "orange", "code": "            warnings.warn(\n", "error": "none", "author": "tom@organisms.be"}, {"index": "222", "colour": "orange", "code": "                \"The main thread is exiting, but the Bus is in the %r state; \"\n", "error": "none", "author": "tom@organisms.be"}, {"index": "223", "colour": "orange", "code": "                \"shutting it down automatically now. You must either call \"\n", "error": "none", "author": "tom@organisms.be"}, {"index": "224", "colour": "orange", "code": "                \"bus.block() after start(), or call bus.exit() before the \"\n", "error": "none", "author": "tom@organisms.be"}, {"index": "225", "colour": "orange", "code": "                \"main thread exits.\" % self.state, RuntimeWarning)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "226", "colour": "orange", "code": "            self.exit()\n", "error": "none", "author": "tom@organisms.be"}, {"index": "227", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "228", "colour": "orange", "code": "    def start(self):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "229", "colour": "orange", "code": "        \"\"\"Start all services.\"\"\"\n", "error": "none", "author": "tom@organisms.be"}, {"index": "230", "colour": "orange", "code": "        atexit.register(self._clean_exit)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "231", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "232", "colour": "orange", "code": "        self.state = states.STARTING\n", "error": "none", "author": "tom@organisms.be"}, {"index": "233", "colour": "orange", "code": "        self.log('Bus STARTING')\n", "error": "none", "author": "tom@organisms.be"}, {"index": "234", "colour": "orange", "code": "        try:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "235", "colour": "orange", "code": "            self.publish('start')\n", "error": "none", "author": "tom@organisms.be"}, {"index": "236", "colour": "orange", "code": "            self.state = states.STARTED\n", "error": "none", "author": "tom@organisms.be"}, {"index": "237", "colour": "orange", "code": "            self.log('Bus STARTED')\n", "error": "none", "author": "tom@organisms.be"}, {"index": "238", "colour": "orange", "code": "        except (KeyboardInterrupt, SystemExit):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "239", "colour": "orange", "code": "            raise\n", "error": "none", "author": "tom@organisms.be"}, {"index": "240", "colour": "orange", "code": "        except:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "241", "colour": "orange", "code": "            self.log(\"Shutting down due to error in start listener:\",\n", "error": "none", "author": "tom@organisms.be"}, {"index": "242", "colour": "orange", "code": "                     level=40, traceback=True)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "243", "colour": "orange", "code": "            e_info = sys.exc_info()[1]\n", "error": "none", "author": "tom@organisms.be"}, {"index": "244", "colour": "orange", "code": "            try:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "245", "colour": "orange", "code": "                self.exit()\n", "error": "none", "author": "tom@organisms.be"}, {"index": "246", "colour": "green", "code": "            except:\n", "error": "W", "author": "tom@organisms.be"}, {"index": "247", "colour": "orange", "code": "                # Any stop/exit errors will be logged inside publish().\n", "error": "none", "author": "tom@organisms.be"}, {"index": "248", "colour": "orange", "code": "                pass\n", "error": "none", "author": "tom@organisms.be"}, {"index": "249", "colour": "orange", "code": "            # Re-raise the original error\n", "error": "none", "author": "tom@organisms.be"}, {"index": "250", "colour": "orange", "code": "            raise e_info\n", "error": "none", "author": "tom@organisms.be"}, {"index": "251", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "252", "colour": "orange", "code": "    def exit(self):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "253", "colour": "orange", "code": "        \"\"\"Stop all services and prepare to exit the process.\"\"\"\n", "error": "none", "author": "tom@organisms.be"}, {"index": "254", "colour": "orange", "code": "        exitstate = self.state\n", "error": "none", "author": "tom@organisms.be"}, {"index": "255", "colour": "orange", "code": "        try:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "256", "colour": "orange", "code": "            self.stop()\n", "error": "none", "author": "tom@organisms.be"}, {"index": "257", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "258", "colour": "orange", "code": "            self.state = states.EXITING\n", "error": "none", "author": "tom@organisms.be"}, {"index": "259", "colour": "orange", "code": "            self.log('Bus EXITING')\n", "error": "none", "author": "tom@organisms.be"}, {"index": "260", "colour": "orange", "code": "            self.publish('exit')\n", "error": "none", "author": "tom@organisms.be"}, {"index": "261", "colour": "orange", "code": "            # This isn't strictly necessary, but it's better than seeing\n", "error": "none", "author": "tom@organisms.be"}, {"index": "262", "colour": "orange", "code": "            # \"Waiting for child threads to terminate...\" and then nothing.\n", "error": "none", "author": "tom@organisms.be"}, {"index": "263", "colour": "orange", "code": "            self.log('Bus EXITED')\n", "error": "none", "author": "tom@organisms.be"}, {"index": "264", "colour": "green", "code": "        except:\n", "error": "W", "author": "tom@organisms.be"}, {"index": "265", "colour": "orange", "code": "            # This method is often called asynchronously (whether thread,\n", "error": "none", "author": "tom@organisms.be"}, {"index": "266", "colour": "orange", "code": "            # signal handler, console handler, or atexit handler), so we\n", "error": "none", "author": "tom@organisms.be"}, {"index": "267", "colour": "orange", "code": "            # can't just let exceptions propagate out unhandled.\n", "error": "none", "author": "tom@organisms.be"}, {"index": "268", "colour": "orange", "code": "            # Assume it's been logged and just die.\n", "error": "none", "author": "tom@organisms.be"}, {"index": "269", "colour": "green", "code": "            os._exit(70) # EX_SOFTWARE\n", "error": "W", "author": "tom@organisms.be"}, {"index": "270", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "271", "colour": "orange", "code": "        if exitstate == states.STARTING:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "272", "colour": "orange", "code": "            # exit() was called before start() finished, possibly due to\n", "error": "none", "author": "tom@organisms.be"}, {"index": "273", "colour": "orange", "code": "            # Ctrl-C because a start listener got stuck. In this case,\n", "error": "none", "author": "tom@organisms.be"}, {"index": "274", "colour": "orange", "code": "            # we could get stuck in a loop where Ctrl-C never exits the\n", "error": "none", "author": "tom@organisms.be"}, {"index": "275", "colour": "orange", "code": "            # process, so we just call os.exit here.\n", "error": "none", "author": "tom@organisms.be"}, {"index": "276", "colour": "green", "code": "            os._exit(70) # EX_SOFTWARE\n", "error": "W", "author": "tom@organisms.be"}, {"index": "277", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "278", "colour": "orange", "code": "    def restart(self):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "279", "colour": "orange", "code": "        \"\"\"Restart the process (may close connections).\n", "error": "none", "author": "tom@organisms.be"}, {"index": "280", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "281", "colour": "orange", "code": "        This method does not restart the process from the calling thread;\n", "error": "none", "author": "tom@organisms.be"}, {"index": "282", "colour": "orange", "code": "        instead, it stops the bus and asks the main thread to call execv.\n", "error": "none", "author": "tom@organisms.be"}, {"index": "283", "colour": "orange", "code": "        \"\"\"\n", "error": "none", "author": "tom@organisms.be"}, {"index": "284", "colour": "orange", "code": "        self.execv = True\n", "error": "none", "author": "tom@organisms.be"}, {"index": "285", "colour": "orange", "code": "        self.exit()\n", "error": "none", "author": "tom@organisms.be"}, {"index": "286", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "287", "colour": "orange", "code": "    def graceful(self):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "288", "colour": "orange", "code": "        \"\"\"Advise all services to reload.\"\"\"\n", "error": "none", "author": "tom@organisms.be"}, {"index": "289", "colour": "orange", "code": "        self.log('Bus graceful')\n", "error": "none", "author": "tom@organisms.be"}, {"index": "290", "colour": "orange", "code": "        self.publish('graceful')\n", "error": "none", "author": "tom@organisms.be"}, {"index": "291", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "292", "colour": "orange", "code": "    def block(self, interval=0.1):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "293", "colour": "orange", "code": "        \"\"\"Wait for the EXITING state, KeyboardInterrupt or SystemExit.\n", "error": "none", "author": "tom@organisms.be"}, {"index": "294", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "295", "colour": "orange", "code": "        This function is intended to be called only by the main thread.\n", "error": "none", "author": "tom@organisms.be"}, {"index": "296", "colour": "orange", "code": "        After waiting for the EXITING state, it also waits for all threads\n", "error": "none", "author": "tom@organisms.be"}, {"index": "297", "colour": "orange", "code": "        to terminate, and then calls os.execv if self.execv is True. This\n", "error": "none", "author": "tom@organisms.be"}, {"index": "298", "colour": "orange", "code": "        design allows another thread to call bus.restart, yet have the main\n", "error": "none", "author": "tom@organisms.be"}, {"index": "299", "colour": "orange", "code": "        thread perform the actual execv call (required on some platforms).\n", "error": "none", "author": "tom@organisms.be"}, {"index": "300", "colour": "orange", "code": "        \"\"\"\n", "error": "none", "author": "tom@organisms.be"}, {"index": "301", "colour": "orange", "code": "        try:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "302", "colour": "orange", "code": "            self.wait(states.EXITING, interval=interval, channel='main')\n", "error": "none", "author": "tom@organisms.be"}, {"index": "303", "colour": "orange", "code": "        except (KeyboardInterrupt, IOError):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "304", "colour": "orange", "code": "            # The time.sleep call might raise\n", "error": "none", "author": "tom@organisms.be"}, {"index": "305", "colour": "orange", "code": "            # \"IOError: [Errno 4] Interrupted function call\" on KBInt.\n", "error": "none", "author": "tom@organisms.be"}, {"index": "306", "colour": "orange", "code": "            self.log('Keyboard Interrupt: shutting down bus')\n", "error": "none", "author": "tom@organisms.be"}, {"index": "307", "colour": "orange", "code": "            self.exit()\n", "error": "none", "author": "tom@organisms.be"}, {"index": "308", "colour": "orange", "code": "        except SystemExit:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "309", "colour": "orange", "code": "            self.log('SystemExit raised: shutting down bus')\n", "error": "none", "author": "tom@organisms.be"}, {"index": "310", "colour": "orange", "code": "            self.exit()\n", "error": "none", "author": "tom@organisms.be"}, {"index": "311", "colour": "orange", "code": "            raise\n", "error": "none", "author": "tom@organisms.be"}, {"index": "312", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "313", "colour": "orange", "code": "        # Waiting for ALL child threads to finish is necessary on OS X.\n", "error": "none", "author": "tom@organisms.be"}, {"index": "314", "colour": "orange", "code": "        # See http://www.cherrypy.org/ticket/581.\n", "error": "none", "author": "tom@organisms.be"}, {"index": "315", "colour": "orange", "code": "        # It's also good to let them all shut down before allowing\n", "error": "none", "author": "tom@organisms.be"}, {"index": "316", "colour": "orange", "code": "        # the main thread to call atexit handlers.\n", "error": "none", "author": "tom@organisms.be"}, {"index": "317", "colour": "orange", "code": "        # See http://www.cherrypy.org/ticket/751.\n", "error": "none", "author": "tom@organisms.be"}, {"index": "318", "colour": "orange", "code": "        self.log(\"Waiting for child threads to terminate...\")\n", "error": "none", "author": "tom@organisms.be"}, {"index": "319", "colour": "orange", "code": "        for t in threading.enumerate():\n", "error": "none", "author": "tom@organisms.be"}, {"index": "320", "colour": "orange", "code": "            if t != threading.currentThread() and t.isAlive():\n", "error": "none", "author": "tom@organisms.be"}, {"index": "321", "colour": "orange", "code": "                # Note that any dummy (external) threads are always daemonic.\n", "error": "none", "author": "tom@organisms.be"}, {"index": "322", "colour": "orange", "code": "                if hasattr(threading.Thread, \"daemon\"):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "323", "colour": "orange", "code": "                    # Python 2.6+\n", "error": "none", "author": "tom@organisms.be"}, {"index": "324", "colour": "orange", "code": "                    d = t.daemon\n", "error": "none", "author": "tom@organisms.be"}, {"index": "325", "colour": "orange", "code": "                else:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "326", "colour": "orange", "code": "                    d = t.isDaemon()\n", "error": "none", "author": "tom@organisms.be"}, {"index": "327", "colour": "orange", "code": "                if not d:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "328", "colour": "orange", "code": "                    self.log(\"Waiting for thread %s.\" % t.getName())\n", "error": "none", "author": "tom@organisms.be"}, {"index": "329", "colour": "orange", "code": "                    t.join()\n", "error": "none", "author": "tom@organisms.be"}, {"index": "330", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "331", "colour": "orange", "code": "        if self.execv:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "332", "colour": "orange", "code": "            self._do_execv()\n", "error": "none", "author": "tom@organisms.be"}, {"index": "333", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "334", "colour": "orange", "code": "    def wait(self, state, interval=0.1, channel=None):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "335", "colour": "orange", "code": "        \"\"\"Poll for the given state(s) at intervals; publish to channel.\"\"\"\n", "error": "none", "author": "tom@organisms.be"}, {"index": "336", "colour": "orange", "code": "        if isinstance(state, (tuple, list)):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "337", "colour": "green", "code": "            states = state\n", "error": "W", "author": "tom@organisms.be"}, {"index": "338", "colour": "orange", "code": "        else:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "339", "colour": "orange", "code": "            states = [state]\n", "error": "none", "author": "tom@organisms.be"}, {"index": "340", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "341", "colour": "orange", "code": "        def _wait():\n", "error": "none", "author": "tom@organisms.be"}, {"index": "342", "colour": "orange", "code": "            while self.state not in states:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "343", "colour": "orange", "code": "                time.sleep(interval)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "344", "colour": "orange", "code": "                self.publish(channel)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "345", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "346", "colour": "orange", "code": "        # From http://psyco.sourceforge.net/psycoguide/bugs.html:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "347", "colour": "orange", "code": "        # \"The compiled machine code does not include the regular polling\n", "error": "none", "author": "tom@organisms.be"}, {"index": "348", "colour": "orange", "code": "        # done by Python, meaning that a KeyboardInterrupt will not be\n", "error": "none", "author": "tom@organisms.be"}, {"index": "349", "colour": "orange", "code": "        # detected before execution comes back to the regular Python\n", "error": "none", "author": "tom@organisms.be"}, {"index": "350", "colour": "orange", "code": "        # interpreter. Your program cannot be interrupted if caught\n", "error": "none", "author": "tom@organisms.be"}, {"index": "351", "colour": "orange", "code": "        # into an infinite Psyco-compiled loop.\"\n", "error": "none", "author": "tom@organisms.be"}, {"index": "352", "colour": "orange", "code": "        try:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "353", "colour": "orange", "code": "            sys.modules['psyco'].cannotcompile(_wait)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "354", "colour": "orange", "code": "        except (KeyError, AttributeError):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "355", "colour": "orange", "code": "            pass\n", "error": "none", "author": "tom@organisms.be"}, {"index": "356", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "357", "colour": "orange", "code": "        _wait()\n", "error": "none", "author": "tom@organisms.be"}, {"index": "358", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "359", "colour": "orange", "code": "    def _do_execv(self):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "360", "colour": "orange", "code": "        \"\"\"Re-execute the current process.\n", "error": "none", "author": "tom@organisms.be"}, {"index": "361", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "362", "colour": "orange", "code": "        This must be called from the main thread, because certain platforms\n", "error": "none", "author": "tom@organisms.be"}, {"index": "363", "colour": "orange", "code": "        (OS X) don't allow execv to be called in a child thread very well.\n", "error": "none", "author": "tom@organisms.be"}, {"index": "364", "colour": "orange", "code": "        \"\"\"\n", "error": "none", "author": "tom@organisms.be"}, {"index": "365", "colour": "orange", "code": "        args = sys.argv[:]\n", "error": "none", "author": "tom@organisms.be"}, {"index": "366", "colour": "orange", "code": "        self.log('Re-spawning %s' % ' '.join(args))\n", "error": "none", "author": "tom@organisms.be"}, {"index": "367", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "368", "colour": "orange", "code": "        if sys.platform[:4] == 'java':\n", "error": "none", "author": "tom@organisms.be"}, {"index": "369", "colour": "orange", "code": "            from _systemrestart import SystemRestart\n", "error": "none", "author": "tom@organisms.be"}, {"index": "370", "colour": "orange", "code": "            raise SystemRestart\n", "error": "none", "author": "tom@organisms.be"}, {"index": "371", "colour": "orange", "code": "        else:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "372", "colour": "orange", "code": "            args.insert(0, sys.executable)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "373", "colour": "orange", "code": "            if sys.platform == 'win32':\n", "error": "none", "author": "tom@organisms.be"}, {"index": "374", "colour": "orange", "code": "                args = ['\"%s\"' % arg for arg in args]\n", "error": "none", "author": "tom@organisms.be"}, {"index": "375", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "376", "colour": "orange", "code": "            os.chdir(_startup_cwd)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "377", "colour": "orange", "code": "            if self.max_cloexec_files:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "378", "colour": "orange", "code": "                self._set_cloexec()\n", "error": "none", "author": "tom@organisms.be"}, {"index": "379", "colour": "orange", "code": "            os.execv(sys.executable, args)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "380", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "381", "colour": "orange", "code": "    def _set_cloexec(self):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "382", "colour": "orange", "code": "        \"\"\"Set the CLOEXEC flag on all open files (except stdin/out/err).\n", "error": "none", "author": "tom@organisms.be"}, {"index": "383", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "384", "colour": "orange", "code": "        If self.max_cloexec_files is an integer (the default), then on\n", "error": "none", "author": "tom@organisms.be"}, {"index": "385", "colour": "orange", "code": "        platforms which support it, it represents the max open files setting\n", "error": "none", "author": "tom@organisms.be"}, {"index": "386", "colour": "orange", "code": "        for the operating system. This function will be called just before\n", "error": "none", "author": "tom@organisms.be"}, {"index": "387", "colour": "orange", "code": "        the process is restarted via os.execv() to prevent open files\n", "error": "none", "author": "tom@organisms.be"}, {"index": "388", "colour": "orange", "code": "        from persisting into the new process.\n", "error": "none", "author": "tom@organisms.be"}, {"index": "389", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "390", "colour": "orange", "code": "        Set self.max_cloexec_files to 0 to disable this behavior.\n", "error": "none", "author": "tom@organisms.be"}, {"index": "391", "colour": "orange", "code": "        \"\"\"\n", "error": "none", "author": "tom@organisms.be"}, {"index": "392", "colour": "orange", "code": "        for fd in range(3, self.max_cloexec_files): # skip stdin/out/err\n", "error": "none", "author": "tom@organisms.be"}, {"index": "393", "colour": "orange", "code": "            try:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "394", "colour": "orange", "code": "                flags = fcntl.fcntl(fd, fcntl.F_GETFD)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "395", "colour": "orange", "code": "            except IOError:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "396", "colour": "orange", "code": "                continue\n", "error": "none", "author": "tom@organisms.be"}, {"index": "397", "colour": "orange", "code": "            fcntl.fcntl(fd, fcntl.F_SETFD, flags | fcntl.FD_CLOEXEC)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "398", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "399", "colour": "orange", "code": "    def stop(self):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "400", "colour": "orange", "code": "        \"\"\"Stop all services.\"\"\"\n", "error": "none", "author": "tom@organisms.be"}, {"index": "401", "colour": "orange", "code": "        self.state = states.STOPPING\n", "error": "none", "author": "tom@organisms.be"}, {"index": "402", "colour": "orange", "code": "        self.log('Bus STOPPING')\n", "error": "none", "author": "tom@organisms.be"}, {"index": "403", "colour": "orange", "code": "        self.publish('stop')\n", "error": "none", "author": "tom@organisms.be"}, {"index": "404", "colour": "orange", "code": "        self.state = states.STOPPED\n", "error": "none", "author": "tom@organisms.be"}, {"index": "405", "colour": "orange", "code": "        self.log('Bus STOPPED')\n", "error": "none", "author": "tom@organisms.be"}, {"index": "406", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "407", "colour": "orange", "code": "    def start_with_callback(self, func, args=None, kwargs=None):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "408", "colour": "orange", "code": "        \"\"\"Start 'func' in a new thread T, then start self (and return T).\"\"\"\n", "error": "none", "author": "tom@organisms.be"}, {"index": "409", "colour": "orange", "code": "        if args is None:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "410", "colour": "orange", "code": "            args = ()\n", "error": "none", "author": "tom@organisms.be"}, {"index": "411", "colour": "orange", "code": "        if kwargs is None:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "412", "colour": "orange", "code": "            kwargs = {}\n", "error": "none", "author": "tom@organisms.be"}, {"index": "413", "colour": "orange", "code": "        args = (func,) + args\n", "error": "none", "author": "tom@organisms.be"}, {"index": "414", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "415", "colour": "orange", "code": "        def _callback(func, *a, **kw):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "416", "colour": "orange", "code": "            self.wait(states.STARTED)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "417", "colour": "orange", "code": "            func(*a, **kw)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "418", "colour": "orange", "code": "        t = threading.Thread(target=_callback, args=args, kwargs=kwargs)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "419", "colour": "orange", "code": "        t.setName('Bus Callback ' + t.getName())\n", "error": "none", "author": "tom@organisms.be"}, {"index": "420", "colour": "orange", "code": "        t.start()\n", "error": "none", "author": "tom@organisms.be"}, {"index": "421", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "422", "colour": "orange", "code": "        self.start()\n", "error": "none", "author": "tom@organisms.be"}, {"index": "423", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "424", "colour": "orange", "code": "        return t\n", "error": "none", "author": "tom@organisms.be"}, {"index": "425", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "426", "colour": "orange", "code": "    def log(self, msg=\"\", level=20, traceback=False):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "427", "colour": "orange", "code": "        \"\"\"Log the given message. Append the last traceback if requested.\"\"\"\n", "error": "none", "author": "tom@organisms.be"}, {"index": "428", "colour": "orange", "code": "        if traceback:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "429", "colour": "orange", "code": "            msg += \"\\n\" + \"\".join(_traceback.format_exception(*sys.exc_info()))\n", "error": "none", "author": "tom@organisms.be"}, {"index": "430", "colour": "orange", "code": "        self.publish('log', msg, level)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "431", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "432", "colour": "orange", "code": "bus = Bus()", "error": "none", "author": "tom@alice-2.local"}]}