{"path": "/home/asumal/git/cs410/pattern/pattern/web/json/encoder.py", "lines": [[{"error": "none", "line": "1", "code": "\"\"\"Implementation of JSONEncoder\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "2", "code": "\"\"\"\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "3", "code": "import re\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "4", "code": "from decimal import Decimal\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "5", "code": "\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "C", "line": "6", "code": "def _import_speedups():\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "7", "code": "    try:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "F", "line": "8", "code": "        import _speedups\n", "colour": "red", "author": "tom@organisms.be"}, {"error": "none", "line": "9", "code": "        return _speedups.encode_basestring_ascii, _speedups.make_encoder\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "10", "code": "    except ImportError:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "11", "code": "        return None, None\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "12", "code": "c_encode_basestring_ascii, c_make_encoder = _import_speedups()\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "13", "code": "\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "W", "line": "14", "code": "from decoder import PosInf\n", "colour": "purple", "author": "tom@organisms.be"}, {"error": "none", "line": "15", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "16", "code": "ESCAPE = re.compile(ur'[\\x00-\\x1f\\\\\"\\b\\f\\n\\r\\t\\u2028\\u2029]')\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "17", "code": "ESCAPE_ASCII = re.compile(r'([\\\\\"]|[^\\ -~])')\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "18", "code": "HAS_UTF8 = re.compile(r'[\\x80-\\xff]')\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "19", "code": "ESCAPE_DCT = {\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "20", "code": "    '\\\\': '\\\\\\\\',\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "21", "code": "    '\"': '\\\\\"',\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "22", "code": "    '\\b': '\\\\b',\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "23", "code": "    '\\f': '\\\\f',\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "24", "code": "    '\\n': '\\\\n',\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "25", "code": "    '\\r': '\\\\r',\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "26", "code": "    '\\t': '\\\\t',\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "27", "code": "    u'\\u2028': '\\\\u2028',\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "28", "code": "    u'\\u2029': '\\\\u2029',\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "29", "code": "}\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "30", "code": "for i in range(0x20):\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "31", "code": "    #ESCAPE_DCT.setdefault(chr(i), '\\\\u{0:04x}'.format(i))\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "32", "code": "    ESCAPE_DCT.setdefault(chr(i), '\\\\u%04x' % (i,))\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "33", "code": "\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "34", "code": "FLOAT_REPR = repr\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "35", "code": "\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "C", "line": "36", "code": "def encode_basestring(s):\n", "colour": "blue", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "37", "code": "    \"\"\"Return a JSON representation of a Python string\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "38", "code": "\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "39", "code": "    \"\"\"\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "40", "code": "    if isinstance(s, str) and HAS_UTF8.search(s) is not None:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "41", "code": "        s = s.decode('utf-8')\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "42", "code": "    def replace(match):\n", "colour": "blue", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "43", "code": "        return ESCAPE_DCT[match.group(0)]\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "44", "code": "    return u'\"' + ESCAPE.sub(replace, s) + u'\"'\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "45", "code": "\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "46", "code": "\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "C", "line": "47", "code": "def py_encode_basestring_ascii(s):\n", "colour": "blue", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "48", "code": "    \"\"\"Return an ASCII-only JSON representation of a Python string\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "49", "code": "\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "50", "code": "    \"\"\"\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "51", "code": "    if isinstance(s, str) and HAS_UTF8.search(s) is not None:\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "52", "code": "        s = s.decode('utf-8')\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "C", "line": "53", "code": "    def replace(match):\n", "colour": "blue", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "C", "line": "54", "code": "        s = match.group(0)\n", "colour": "blue", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "55", "code": "        try:\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "56", "code": "            return ESCAPE_DCT[s]\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "57", "code": "        except KeyError:\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "C", "line": "58", "code": "            n = ord(s)\n", "colour": "blue", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "59", "code": "            if n < 0x10000:\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "60", "code": "                #return '\\\\u{0:04x}'.format(n)\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "61", "code": "                return '\\\\u%04x' % (n,)\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "62", "code": "            else:\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "63", "code": "                # surrogate pair\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "C", "line": "64", "code": "                n -= 0x10000\n", "colour": "blue", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "C", "line": "65", "code": "                s1 = 0xd800 | ((n >> 10) & 0x3ff)\n", "colour": "blue", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "C", "line": "66", "code": "                s2 = 0xdc00 | (n & 0x3ff)\n", "colour": "blue", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "67", "code": "                #return '\\\\u{0:04x}\\\\u{1:04x}'.format(s1, s2)\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "68", "code": "                return '\\\\u%04x\\\\u%04x' % (s1, s2)\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "69", "code": "    return '\"' + str(ESCAPE_ASCII.sub(replace, s)) + '\"'\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "70", "code": "\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "71", "code": "\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "C", "line": "72", "code": "encode_basestring_ascii = (\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "73", "code": "    c_encode_basestring_ascii or py_encode_basestring_ascii)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "74", "code": "\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "R", "line": "75", "code": "class JSONEncoder(object):\n", "colour": "green", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "76", "code": "    \"\"\"Extensible JSON <http://json.org> encoder for Python data structures.\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "77", "code": "\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "78", "code": "    Supports the following objects and types by default:\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "79", "code": "\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "80", "code": "    +-------------------+---------------+\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "81", "code": "    | Python            | JSON          |\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "82", "code": "    +===================+===============+\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "83", "code": "    | dict, namedtuple  | object        |\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "84", "code": "    +-------------------+---------------+\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "85", "code": "    | list, tuple       | array         |\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "86", "code": "    +-------------------+---------------+\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "87", "code": "    | str, unicode      | string        |\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "88", "code": "    +-------------------+---------------+\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "89", "code": "    | int, long, float  | number        |\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "90", "code": "    +-------------------+---------------+\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "91", "code": "    | True              | true          |\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "92", "code": "    +-------------------+---------------+\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "93", "code": "    | False             | false         |\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "94", "code": "    +-------------------+---------------+\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "95", "code": "    | None              | null          |\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "96", "code": "    +-------------------+---------------+\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "97", "code": "\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "98", "code": "    To extend this to recognize other objects, subclass and implement a\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "99", "code": "    ``.default()`` method with another method that returns a serializable\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "100", "code": "    object for ``o`` if possible, otherwise it should call the superclass\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "101", "code": "    implementation (to raise ``TypeError``).\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "102", "code": "\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "103", "code": "    \"\"\"\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "104", "code": "    item_separator = ', '\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "105", "code": "    key_separator = ': '\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "R", "line": "106", "code": "    def __init__(self, skipkeys=False, ensure_ascii=True,\n", "colour": "green", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "C", "line": "107", "code": "            check_circular=True, allow_nan=True, sort_keys=False,\n", "colour": "blue", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "C", "line": "108", "code": "            indent=None, separators=None, encoding='utf-8', default=None,\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "C", "line": "109", "code": "            use_decimal=True, namedtuple_as_object=True,\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "C", "line": "110", "code": "            tuple_as_array=True, bigint_as_string=False,\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "C", "line": "111", "code": "            item_sort_key=None):\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "112", "code": "        \"\"\"Constructor for JSONEncoder, with sensible defaults.\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "113", "code": "\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "114", "code": "        If skipkeys is false, then it is a TypeError to attempt\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "115", "code": "        encoding of keys that are not str, int, long, float or None.  If\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "116", "code": "        skipkeys is True, such items are simply skipped.\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "117", "code": "\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "118", "code": "        If ensure_ascii is true, the output is guaranteed to be str\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "119", "code": "        objects with all incoming unicode characters escaped.  If\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "120", "code": "        ensure_ascii is false, the output will be unicode object.\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "121", "code": "\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "122", "code": "        If check_circular is true, then lists, dicts, and custom encoded\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "123", "code": "        objects will be checked for circular references during encoding to\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "124", "code": "        prevent an infinite recursion (which would cause an OverflowError).\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "125", "code": "        Otherwise, no such check takes place.\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "126", "code": "\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "127", "code": "        If allow_nan is true, then NaN, Infinity, and -Infinity will be\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "128", "code": "        encoded as such.  This behavior is not JSON specification compliant,\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "129", "code": "        but is consistent with most JavaScript based encoders and decoders.\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "130", "code": "        Otherwise, it will be a ValueError to encode such floats.\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "131", "code": "\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "132", "code": "        If sort_keys is true, then the output of dictionaries will be\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "133", "code": "        sorted by key; this is useful for regression tests to ensure\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "134", "code": "        that JSON serializations can be compared on a day-to-day basis.\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "135", "code": "\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "136", "code": "        If indent is a string, then JSON array elements and object members\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "137", "code": "        will be pretty-printed with a newline followed by that string repeated\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "138", "code": "        for each level of nesting. ``None`` (the default) selects the most compact\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "139", "code": "        representation without any newlines. For backwards compatibility with\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "140", "code": "        versions of simplejson earlier than 2.1.0, an integer is also accepted\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "141", "code": "        and is converted to a string with that many spaces.\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "142", "code": "\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "143", "code": "        If specified, separators should be a (item_separator, key_separator)\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "144", "code": "        tuple.  The default is (', ', ': ').  To get the most compact JSON\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "145", "code": "        representation you should specify (',', ':') to eliminate whitespace.\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "146", "code": "\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "147", "code": "        If specified, default is a function that gets called for objects\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "148", "code": "        that can't otherwise be serialized.  It should return a JSON encodable\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "149", "code": "        version of the object or raise a ``TypeError``.\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "150", "code": "\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "151", "code": "        If encoding is not None, then all input strings will be\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "152", "code": "        transformed into unicode using that encoding prior to JSON-encoding.\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "153", "code": "        The default is UTF-8.\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "154", "code": "\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "155", "code": "        If use_decimal is true (not the default), ``decimal.Decimal`` will\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "156", "code": "        be supported directly by the encoder. For the inverse, decode JSON\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "157", "code": "        with ``parse_float=decimal.Decimal``.\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "158", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "159", "code": "        If namedtuple_as_object is true (the default), objects with\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "160", "code": "        ``_asdict()`` methods will be encoded as JSON objects.\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "161", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "162", "code": "        If tuple_as_array is true (the default), tuple (and subclasses) will\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "163", "code": "        be encoded as JSON arrays.\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "164", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "165", "code": "        If bigint_as_string is true (not the default), ints 2**53 and higher\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "166", "code": "        or lower than -2**53 will be encoded as strings. This is to avoid the\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "167", "code": "        rounding that happens in Javascript otherwise.\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "168", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "169", "code": "        If specified, item_sort_key is a callable used to sort the items in\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "170", "code": "        each dictionary. This is useful if you want to sort items other than\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "171", "code": "        in alphabetical order by key.\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "172", "code": "        \"\"\"\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "173", "code": "\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "174", "code": "        self.skipkeys = skipkeys\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "175", "code": "        self.ensure_ascii = ensure_ascii\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "176", "code": "        self.check_circular = check_circular\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "177", "code": "        self.allow_nan = allow_nan\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "178", "code": "        self.sort_keys = sort_keys\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "179", "code": "        self.use_decimal = use_decimal\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "180", "code": "        self.namedtuple_as_object = namedtuple_as_object\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "181", "code": "        self.tuple_as_array = tuple_as_array\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "182", "code": "        self.bigint_as_string = bigint_as_string\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "183", "code": "        self.item_sort_key = item_sort_key\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "184", "code": "        if indent is not None and not isinstance(indent, basestring):\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "185", "code": "            indent = indent * ' '\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "186", "code": "        self.indent = indent\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "187", "code": "        if separators is not None:\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "W", "line": "188", "code": "            self.item_separator, self.key_separator = separators\n", "colour": "purple", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "189", "code": "        elif indent is not None:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "190", "code": "            self.item_separator = ','\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "191", "code": "        if default is not None:\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "192", "code": "            self.default = default\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "193", "code": "        self.encoding = encoding\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "194", "code": "\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "R", "line": "195", "code": "    def default(self, o):\n", "colour": "green", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "196", "code": "        \"\"\"Implement this method in a subclass such that it returns\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "197", "code": "        a serializable object for ``o``, or calls the base implementation\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "198", "code": "        (to raise a ``TypeError``).\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "199", "code": "\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "200", "code": "        For example, to support arbitrary iterators, you could\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "201", "code": "        implement default like this::\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "202", "code": "\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "203", "code": "            def default(self, o):\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "204", "code": "                try:\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "205", "code": "                    iterable = iter(o)\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "206", "code": "                except TypeError:\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "207", "code": "                    pass\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "208", "code": "                else:\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "209", "code": "                    return list(iterable)\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "210", "code": "                return JSONEncoder.default(self, o)\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "211", "code": "\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "212", "code": "        \"\"\"\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "213", "code": "        raise TypeError(repr(o) + \" is not JSON serializable\")\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "214", "code": "\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "C", "line": "215", "code": "    def encode(self, o):\n", "colour": "blue", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "216", "code": "        \"\"\"Return a JSON string representation of a Python data structure.\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "217", "code": "\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "218", "code": "        >>> from simplejson import JSONEncoder\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "219", "code": "        >>> JSONEncoder().encode({\"foo\": [\"bar\", \"baz\"]})\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "220", "code": "        '{\"foo\": [\"bar\", \"baz\"]}'\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "221", "code": "\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "222", "code": "        \"\"\"\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "223", "code": "        # This is for extremely simple cases and benchmarks.\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "224", "code": "        if isinstance(o, basestring):\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "225", "code": "            if isinstance(o, str):\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "226", "code": "                _encoding = self.encoding\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "227", "code": "                if (_encoding is not None\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "C", "line": "228", "code": "                        and not (_encoding == 'utf-8')):\n", "colour": "blue", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "229", "code": "                    o = o.decode(_encoding)\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "230", "code": "            if self.ensure_ascii:\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "231", "code": "                return encode_basestring_ascii(o)\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "232", "code": "            else:\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "233", "code": "                return encode_basestring(o)\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "234", "code": "        # This doesn't pass the iterator directly to ''.join() because the\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "235", "code": "        # exceptions aren't as detailed.  The list call should be roughly\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "236", "code": "        # equivalent to the PySequence_Fast that ''.join() would do.\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "237", "code": "        chunks = self.iterencode(o, _one_shot=True)\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "238", "code": "        if not isinstance(chunks, (list, tuple)):\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "239", "code": "            chunks = list(chunks)\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "240", "code": "        if self.ensure_ascii:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "241", "code": "            return ''.join(chunks)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "242", "code": "        else:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "243", "code": "            return u''.join(chunks)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "244", "code": "\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "R", "line": "245", "code": "    def iterencode(self, o, _one_shot=False):\n", "colour": "green", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "246", "code": "        \"\"\"Encode the given object and yield each string\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "247", "code": "        representation as available.\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "248", "code": "\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "249", "code": "        For example::\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "250", "code": "\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "251", "code": "            for chunk in JSONEncoder().iterencode(bigobject):\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "252", "code": "                mysocket.write(chunk)\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "253", "code": "\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "254", "code": "        \"\"\"\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "255", "code": "        if self.check_circular:\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "256", "code": "            markers = {}\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "257", "code": "        else:\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "258", "code": "            markers = None\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "259", "code": "        if self.ensure_ascii:\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "260", "code": "            _encoder = encode_basestring_ascii\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "261", "code": "        else:\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "262", "code": "            _encoder = encode_basestring\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "263", "code": "        if self.encoding != 'utf-8':\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "C", "line": "264", "code": "            def _encoder(o, _orig_encoder=_encoder, _encoding=self.encoding):\n", "colour": "blue", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "265", "code": "                if isinstance(o, str):\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "266", "code": "                    o = o.decode(_encoding)\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "267", "code": "                return _orig_encoder(o)\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "268", "code": "\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "C", "line": "269", "code": "        def floatstr(o, allow_nan=self.allow_nan,\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "C", "line": "270", "code": "                _repr=FLOAT_REPR, _inf=PosInf, _neginf=-PosInf):\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "271", "code": "            # Check for specials. Note that this type of test is processor\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "272", "code": "            # and/or platform-specific, so do tests which don't depend on\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "273", "code": "            # the internals.\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "274", "code": "\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "275", "code": "            if o != o:\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "276", "code": "                text = 'NaN'\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "277", "code": "            elif o == _inf:\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "278", "code": "                text = 'Infinity'\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "279", "code": "            elif o == _neginf:\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "280", "code": "                text = '-Infinity'\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "281", "code": "            else:\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "282", "code": "                return _repr(o)\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "283", "code": "\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "284", "code": "            if not allow_nan:\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "285", "code": "                raise ValueError(\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "286", "code": "                    \"Out of range float values are not JSON compliant: \" +\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "287", "code": "                    repr(o))\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "288", "code": "\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "289", "code": "            return text\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "290", "code": "\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "291", "code": "\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "292", "code": "        key_memo = {}\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "293", "code": "        if (_one_shot and c_make_encoder is not None\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "294", "code": "                and self.indent is None):\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "295", "code": "            _iterencode = c_make_encoder(\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "296", "code": "                markers, self.default, _encoder, self.indent,\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "297", "code": "                self.key_separator, self.item_separator, self.sort_keys,\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "298", "code": "                self.skipkeys, self.allow_nan, key_memo, self.use_decimal,\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "299", "code": "                self.namedtuple_as_object, self.tuple_as_array,\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "300", "code": "                self.bigint_as_string, self.item_sort_key,\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "301", "code": "                Decimal)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "302", "code": "        else:\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "303", "code": "            _iterencode = _make_iterencode(\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "304", "code": "                markers, self.default, _encoder, self.indent, floatstr,\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "305", "code": "                self.key_separator, self.item_separator, self.sort_keys,\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "306", "code": "                self.skipkeys, _one_shot, self.use_decimal,\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "307", "code": "                self.namedtuple_as_object, self.tuple_as_array,\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "308", "code": "                self.bigint_as_string, self.item_sort_key,\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "309", "code": "                Decimal=Decimal)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "310", "code": "        try:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "311", "code": "            return _iterencode(o, 0)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "312", "code": "        finally:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "313", "code": "            key_memo.clear()\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "314", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "315", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "316", "code": "class JSONEncoderForHTML(JSONEncoder):\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "317", "code": "    \"\"\"An encoder that produces JSON safe to embed in HTML.\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "318", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "319", "code": "    To embed JSON content in, say, a script tag on a web page, the\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "320", "code": "    characters &, < and > should be escaped. They cannot be escaped\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "321", "code": "    with the usual entities (e.g. &amp;) because they are not expanded\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "322", "code": "    within <script> tags.\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "323", "code": "    \"\"\"\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "324", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "325", "code": "    def encode(self, o):\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "326", "code": "        # Override JSONEncoder.encode because it has hacks for\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "327", "code": "        # performance that make things more complicated.\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "328", "code": "        chunks = self.iterencode(o, True)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "329", "code": "        if self.ensure_ascii:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "330", "code": "            return ''.join(chunks)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "331", "code": "        else:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "332", "code": "            return u''.join(chunks)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "333", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "334", "code": "    def iterencode(self, o, _one_shot=False):\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "335", "code": "        chunks = super(JSONEncoderForHTML, self).iterencode(o, _one_shot)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "336", "code": "        for chunk in chunks:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "337", "code": "            chunk = chunk.replace('&', '\\\\u0026')\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "338", "code": "            chunk = chunk.replace('<', '\\\\u003c')\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "339", "code": "            chunk = chunk.replace('>', '\\\\u003e')\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "340", "code": "            yield chunk\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "341", "code": "\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "342", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "R", "line": "343", "code": "def _make_iterencode(markers, _default, _encoder, _indent, _floatstr,\n", "colour": "green", "author": "tom@organisms.be"}, {"error": "W", "line": "344", "code": "        _key_separator, _item_separator, _sort_keys, _skipkeys, _one_shot,\n", "colour": "purple", "author": "tom@organisms.be"}, {"error": "C", "line": "345", "code": "        _use_decimal, _namedtuple_as_object, _tuple_as_array,\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "C", "line": "346", "code": "        _bigint_as_string, _item_sort_key,\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "C", "line": "347", "code": "        ## HACK: hand-optimized bytecode; turn globals into locals\n", "colour": "blue", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "W", "line": "348", "code": "        False=False,\n", "colour": "purple", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "W", "line": "349", "code": "        True=True,\n", "colour": "purple", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "W", "line": "350", "code": "        ValueError=ValueError,\n", "colour": "purple", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "W", "line": "351", "code": "        basestring=basestring,\n", "colour": "purple", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "W", "line": "352", "code": "        Decimal=Decimal,\n", "colour": "purple", "author": "tom@organisms.be"}, {"error": "W", "line": "353", "code": "        dict=dict,\n", "colour": "purple", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "W", "line": "354", "code": "        float=float,\n", "colour": "purple", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "W", "line": "355", "code": "        id=id,\n", "colour": "purple", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "W", "line": "356", "code": "        int=int,\n", "colour": "purple", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "W", "line": "357", "code": "        isinstance=isinstance,\n", "colour": "purple", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "W", "line": "358", "code": "        list=list,\n", "colour": "purple", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "W", "line": "359", "code": "        long=long,\n", "colour": "purple", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "W", "line": "360", "code": "        str=str,\n", "colour": "purple", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "W", "line": "361", "code": "        tuple=tuple,\n", "colour": "purple", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "C", "line": "362", "code": "    ):\n", "colour": "blue", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "363", "code": "    if _item_sort_key and not callable(_item_sort_key):\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "364", "code": "        raise TypeError(\"item_sort_key must be None or callable\")\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "365", "code": "\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "R", "line": "366", "code": "    def _iterencode_list(lst, _current_indent_level):\n", "colour": "green", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "367", "code": "        if not lst:\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "368", "code": "            yield '[]'\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "369", "code": "            return\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "370", "code": "        if markers is not None:\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "371", "code": "            markerid = id(lst)\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "372", "code": "            if markerid in markers:\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "373", "code": "                raise ValueError(\"Circular reference detected\")\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "374", "code": "            markers[markerid] = lst\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "375", "code": "        buf = '['\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "376", "code": "        if _indent is not None:\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "377", "code": "            _current_indent_level += 1\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "378", "code": "            newline_indent = '\\n' + (_indent * _current_indent_level)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "379", "code": "            separator = _item_separator + newline_indent\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "380", "code": "            buf += newline_indent\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "381", "code": "        else:\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "382", "code": "            newline_indent = None\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "383", "code": "            separator = _item_separator\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "384", "code": "        first = True\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "385", "code": "        for value in lst:\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "386", "code": "            if first:\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "387", "code": "                first = False\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "388", "code": "            else:\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "389", "code": "                buf = separator\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "390", "code": "            if isinstance(value, basestring):\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "391", "code": "                yield buf + _encoder(value)\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "392", "code": "            elif value is None:\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "393", "code": "                yield buf + 'null'\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "394", "code": "            elif value is True:\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "395", "code": "                yield buf + 'true'\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "396", "code": "            elif value is False:\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "397", "code": "                yield buf + 'false'\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "398", "code": "            elif isinstance(value, (int, long)):\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "399", "code": "                yield ((buf + str(value))\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "400", "code": "                       if (not _bigint_as_string or\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "401", "code": "                           (-1 << 53) < value < (1 << 53))\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "402", "code": "                           else (buf + '\"' + str(value) + '\"'))\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "403", "code": "            elif isinstance(value, float):\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "404", "code": "                yield buf + _floatstr(value)\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "405", "code": "            elif _use_decimal and isinstance(value, Decimal):\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "406", "code": "                yield buf + str(value)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "407", "code": "            else:\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "408", "code": "                yield buf\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "409", "code": "                if isinstance(value, list):\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "410", "code": "                    chunks = _iterencode_list(value, _current_indent_level)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "411", "code": "                else:\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "C", "line": "412", "code": "                    _asdict = _namedtuple_as_object and getattr(value, '_asdict', None)\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "413", "code": "                    if _asdict and callable(_asdict):\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "414", "code": "                        chunks = _iterencode_dict(_asdict(),\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "415", "code": "                                                  _current_indent_level)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "416", "code": "                    elif _tuple_as_array and isinstance(value, tuple):\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "417", "code": "                        chunks = _iterencode_list(value, _current_indent_level)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "418", "code": "                    elif isinstance(value, dict):\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "419", "code": "                        chunks = _iterencode_dict(value, _current_indent_level)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "420", "code": "                    else:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "421", "code": "                        chunks = _iterencode(value, _current_indent_level)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "422", "code": "                for chunk in chunks:\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "423", "code": "                    yield chunk\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "424", "code": "        if newline_indent is not None:\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "425", "code": "            _current_indent_level -= 1\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "426", "code": "            yield '\\n' + (_indent * _current_indent_level)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "427", "code": "        yield ']'\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "428", "code": "        if markers is not None:\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "429", "code": "            del markers[markerid]\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "430", "code": "\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "R", "line": "431", "code": "    def _iterencode_dict(dct, _current_indent_level):\n", "colour": "green", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "432", "code": "        if not dct:\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "433", "code": "            yield '{}'\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "434", "code": "            return\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "435", "code": "        if markers is not None:\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "436", "code": "            markerid = id(dct)\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "437", "code": "            if markerid in markers:\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "438", "code": "                raise ValueError(\"Circular reference detected\")\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "439", "code": "            markers[markerid] = dct\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "440", "code": "        yield '{'\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "441", "code": "        if _indent is not None:\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "442", "code": "            _current_indent_level += 1\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "443", "code": "            newline_indent = '\\n' + (_indent * _current_indent_level)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "444", "code": "            item_separator = _item_separator + newline_indent\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "445", "code": "            yield newline_indent\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "446", "code": "        else:\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "447", "code": "            newline_indent = None\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "448", "code": "            item_separator = _item_separator\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "449", "code": "        first = True\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "450", "code": "        if _item_sort_key:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "451", "code": "            items = dct.items()\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "452", "code": "            items.sort(key=_item_sort_key)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "453", "code": "        elif _sort_keys:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "454", "code": "            items = dct.items()\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "455", "code": "            items.sort(key=lambda kv: kv[0])\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "456", "code": "        else:\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "457", "code": "            items = dct.iteritems()\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "458", "code": "        for key, value in items:\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "459", "code": "            if isinstance(key, basestring):\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "460", "code": "                pass\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "461", "code": "            # JavaScript is weakly typed for these, so it makes sense to\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "462", "code": "            # also allow them.  Many encoders seem to do something like this.\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "463", "code": "            elif isinstance(key, float):\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "464", "code": "                key = _floatstr(key)\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "465", "code": "            elif key is True:\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "466", "code": "                key = 'true'\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "467", "code": "            elif key is False:\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "468", "code": "                key = 'false'\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "469", "code": "            elif key is None:\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "470", "code": "                key = 'null'\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "471", "code": "            elif isinstance(key, (int, long)):\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "472", "code": "                key = str(key)\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "473", "code": "            elif _skipkeys:\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "474", "code": "                continue\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "475", "code": "            else:\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "476", "code": "                raise TypeError(\"key \" + repr(key) + \" is not a string\")\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "477", "code": "            if first:\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "478", "code": "                first = False\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "479", "code": "            else:\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "480", "code": "                yield item_separator\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "481", "code": "            yield _encoder(key)\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "482", "code": "            yield _key_separator\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "483", "code": "            if isinstance(value, basestring):\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "484", "code": "                yield _encoder(value)\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "485", "code": "            elif value is None:\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "486", "code": "                yield 'null'\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "487", "code": "            elif value is True:\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "488", "code": "                yield 'true'\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "489", "code": "            elif value is False:\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "490", "code": "                yield 'false'\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "491", "code": "            elif isinstance(value, (int, long)):\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "492", "code": "                yield (str(value)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "493", "code": "                       if (not _bigint_as_string or\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "494", "code": "                           (-1 << 53) < value < (1 << 53))\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "495", "code": "                           else ('\"' + str(value) + '\"'))\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "496", "code": "            elif isinstance(value, float):\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "497", "code": "                yield _floatstr(value)\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "498", "code": "            elif _use_decimal and isinstance(value, Decimal):\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "499", "code": "                yield str(value)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "500", "code": "            else:\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "501", "code": "                if isinstance(value, list):\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "502", "code": "                    chunks = _iterencode_list(value, _current_indent_level)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "503", "code": "                else:\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "C", "line": "504", "code": "                    _asdict = _namedtuple_as_object and getattr(value, '_asdict', None)\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "505", "code": "                    if _asdict and callable(_asdict):\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "506", "code": "                        chunks = _iterencode_dict(_asdict(),\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "507", "code": "                                                  _current_indent_level)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "508", "code": "                    elif _tuple_as_array and isinstance(value, tuple):\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "509", "code": "                        chunks = _iterencode_list(value, _current_indent_level)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "510", "code": "                    elif isinstance(value, dict):\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "511", "code": "                        chunks = _iterencode_dict(value, _current_indent_level)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "512", "code": "                    else:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "513", "code": "                        chunks = _iterencode(value, _current_indent_level)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "514", "code": "                for chunk in chunks:\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "515", "code": "                    yield chunk\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "516", "code": "        if newline_indent is not None:\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "517", "code": "            _current_indent_level -= 1\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "518", "code": "            yield '\\n' + (_indent * _current_indent_level)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "519", "code": "        yield '}'\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "520", "code": "        if markers is not None:\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "521", "code": "            del markers[markerid]\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "522", "code": "\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "R", "line": "523", "code": "    def _iterencode(o, _current_indent_level):\n", "colour": "green", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "524", "code": "        if isinstance(o, basestring):\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "525", "code": "            yield _encoder(o)\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "526", "code": "        elif o is None:\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "527", "code": "            yield 'null'\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "528", "code": "        elif o is True:\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "529", "code": "            yield 'true'\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "530", "code": "        elif o is False:\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "531", "code": "            yield 'false'\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "532", "code": "        elif isinstance(o, (int, long)):\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "533", "code": "            yield (str(o)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "534", "code": "                   if (not _bigint_as_string or\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "535", "code": "                       (-1 << 53) < o < (1 << 53))\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "536", "code": "                       else ('\"' + str(o) + '\"'))\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "537", "code": "        elif isinstance(o, float):\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "538", "code": "            yield _floatstr(o)\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "539", "code": "        elif isinstance(o, list):\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "540", "code": "            for chunk in _iterencode_list(o, _current_indent_level):\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "541", "code": "                yield chunk\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "542", "code": "        else:\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "543", "code": "            _asdict = _namedtuple_as_object and getattr(o, '_asdict', None)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "544", "code": "            if _asdict and callable(_asdict):\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "545", "code": "                for chunk in _iterencode_dict(_asdict(), _current_indent_level):\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "546", "code": "                    yield chunk\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "547", "code": "            elif (_tuple_as_array and isinstance(o, tuple)):\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "548", "code": "                for chunk in _iterencode_list(o, _current_indent_level):\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "549", "code": "                    yield chunk\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "550", "code": "            elif isinstance(o, dict):\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "551", "code": "                for chunk in _iterencode_dict(o, _current_indent_level):\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "552", "code": "                    yield chunk\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "553", "code": "            elif _use_decimal and isinstance(o, Decimal):\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "554", "code": "                yield str(o)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "555", "code": "            else:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "556", "code": "                if markers is not None:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "557", "code": "                    markerid = id(o)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "558", "code": "                    if markerid in markers:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "559", "code": "                        raise ValueError(\"Circular reference detected\")\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "560", "code": "                    markers[markerid] = o\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "561", "code": "                o = _default(o)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "562", "code": "                for chunk in _iterencode(o, _current_indent_level):\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "563", "code": "                    yield chunk\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "564", "code": "                if markers is not None:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "565", "code": "                    del markers[markerid]\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "566", "code": "\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "567", "code": "    return _iterencode\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}]]}