{"path": "/home/asumal/git/cs410/pattern/pattern/web/json/encoder.py", "lines": [[{"index": "1", "colour": "orange", "code": "\"\"\"Implementation of JSONEncoder\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "2", "colour": "orange", "code": "\"\"\"\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "3", "colour": "orange", "code": "import re\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "4", "colour": "orange", "code": "from decimal import Decimal\n", "error": "none", "author": "tom@organisms.be"}, {"index": "5", "colour": "orange", "code": "\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "6", "colour": "orange", "code": "def _import_speedups():\n", "error": "none", "author": "tom@organisms.be"}, {"index": "7", "colour": "orange", "code": "    try:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "8", "colour": "orange", "code": "        import _speedups\n", "error": "none", "author": "tom@organisms.be"}, {"index": "9", "colour": "orange", "code": "        return _speedups.encode_basestring_ascii, _speedups.make_encoder\n", "error": "none", "author": "tom@organisms.be"}, {"index": "10", "colour": "orange", "code": "    except ImportError:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "11", "colour": "orange", "code": "        return None, None\n", "error": "none", "author": "tom@organisms.be"}, {"index": "12", "colour": "orange", "code": "c_encode_basestring_ascii, c_make_encoder = _import_speedups()\n", "error": "none", "author": "tom@organisms.be"}, {"index": "13", "colour": "orange", "code": "\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "14", "colour": "green", "code": "from decoder import PosInf\n", "error": "W", "author": "tom@organisms.be"}, {"index": "15", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "16", "colour": "orange", "code": "ESCAPE = re.compile(ur'[\\x00-\\x1f\\\\\"\\b\\f\\n\\r\\t\\u2028\\u2029]')\n", "error": "none", "author": "tom@organisms.be"}, {"index": "17", "colour": "orange", "code": "ESCAPE_ASCII = re.compile(r'([\\\\\"]|[^\\ -~])')\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "18", "colour": "orange", "code": "HAS_UTF8 = re.compile(r'[\\x80-\\xff]')\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "19", "colour": "orange", "code": "ESCAPE_DCT = {\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "20", "colour": "orange", "code": "    '\\\\': '\\\\\\\\',\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "21", "colour": "orange", "code": "    '\"': '\\\\\"',\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "22", "colour": "orange", "code": "    '\\b': '\\\\b',\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "23", "colour": "orange", "code": "    '\\f': '\\\\f',\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "24", "colour": "orange", "code": "    '\\n': '\\\\n',\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "25", "colour": "orange", "code": "    '\\r': '\\\\r',\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "26", "colour": "orange", "code": "    '\\t': '\\\\t',\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "27", "colour": "orange", "code": "    u'\\u2028': '\\\\u2028',\n", "error": "none", "author": "tom@organisms.be"}, {"index": "28", "colour": "orange", "code": "    u'\\u2029': '\\\\u2029',\n", "error": "none", "author": "tom@organisms.be"}, {"index": "29", "colour": "orange", "code": "}\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "30", "colour": "orange", "code": "for i in range(0x20):\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "31", "colour": "orange", "code": "    #ESCAPE_DCT.setdefault(chr(i), '\\\\u{0:04x}'.format(i))\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "32", "colour": "orange", "code": "    ESCAPE_DCT.setdefault(chr(i), '\\\\u%04x' % (i,))\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "33", "colour": "orange", "code": "\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "34", "colour": "orange", "code": "FLOAT_REPR = repr\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "35", "colour": "orange", "code": "\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "36", "colour": "orange", "code": "def encode_basestring(s):\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "37", "colour": "orange", "code": "    \"\"\"Return a JSON representation of a Python string\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "38", "colour": "orange", "code": "\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "39", "colour": "orange", "code": "    \"\"\"\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "40", "colour": "orange", "code": "    if isinstance(s, str) and HAS_UTF8.search(s) is not None:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "41", "colour": "orange", "code": "        s = s.decode('utf-8')\n", "error": "none", "author": "tom@organisms.be"}, {"index": "42", "colour": "orange", "code": "    def replace(match):\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "43", "colour": "orange", "code": "        return ESCAPE_DCT[match.group(0)]\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "44", "colour": "orange", "code": "    return u'\"' + ESCAPE.sub(replace, s) + u'\"'\n", "error": "none", "author": "tom@organisms.be"}, {"index": "45", "colour": "orange", "code": "\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "46", "colour": "orange", "code": "\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "47", "colour": "orange", "code": "def py_encode_basestring_ascii(s):\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "48", "colour": "orange", "code": "    \"\"\"Return an ASCII-only JSON representation of a Python string\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "49", "colour": "orange", "code": "\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "50", "colour": "orange", "code": "    \"\"\"\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "51", "colour": "orange", "code": "    if isinstance(s, str) and HAS_UTF8.search(s) is not None:\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "52", "colour": "orange", "code": "        s = s.decode('utf-8')\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "53", "colour": "orange", "code": "    def replace(match):\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "54", "colour": "orange", "code": "        s = match.group(0)\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "55", "colour": "orange", "code": "        try:\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "56", "colour": "orange", "code": "            return ESCAPE_DCT[s]\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "57", "colour": "orange", "code": "        except KeyError:\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "58", "colour": "orange", "code": "            n = ord(s)\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "59", "colour": "orange", "code": "            if n < 0x10000:\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "60", "colour": "orange", "code": "                #return '\\\\u{0:04x}'.format(n)\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "61", "colour": "orange", "code": "                return '\\\\u%04x' % (n,)\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "62", "colour": "orange", "code": "            else:\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "63", "colour": "orange", "code": "                # surrogate pair\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "64", "colour": "orange", "code": "                n -= 0x10000\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "65", "colour": "orange", "code": "                s1 = 0xd800 | ((n >> 10) & 0x3ff)\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "66", "colour": "orange", "code": "                s2 = 0xdc00 | (n & 0x3ff)\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "67", "colour": "orange", "code": "                #return '\\\\u{0:04x}\\\\u{1:04x}'.format(s1, s2)\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "68", "colour": "orange", "code": "                return '\\\\u%04x\\\\u%04x' % (s1, s2)\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "69", "colour": "orange", "code": "    return '\"' + str(ESCAPE_ASCII.sub(replace, s)) + '\"'\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "70", "colour": "orange", "code": "\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "71", "colour": "orange", "code": "\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "72", "colour": "orange", "code": "encode_basestring_ascii = (\n", "error": "none", "author": "tom@organisms.be"}, {"index": "73", "colour": "orange", "code": "    c_encode_basestring_ascii or py_encode_basestring_ascii)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "74", "colour": "orange", "code": "\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "75", "colour": "blue", "code": "class JSONEncoder(object):\n", "error": "R", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "76", "colour": "orange", "code": "    \"\"\"Extensible JSON <http://json.org> encoder for Python data structures.\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "77", "colour": "orange", "code": "\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "78", "colour": "orange", "code": "    Supports the following objects and types by default:\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "79", "colour": "orange", "code": "\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "80", "colour": "orange", "code": "    +-------------------+---------------+\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "81", "colour": "orange", "code": "    | Python            | JSON          |\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "82", "colour": "orange", "code": "    +===================+===============+\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "83", "colour": "orange", "code": "    | dict, namedtuple  | object        |\n", "error": "none", "author": "tom@organisms.be"}, {"index": "84", "colour": "orange", "code": "    +-------------------+---------------+\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "85", "colour": "orange", "code": "    | list, tuple       | array         |\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "86", "colour": "orange", "code": "    +-------------------+---------------+\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "87", "colour": "orange", "code": "    | str, unicode      | string        |\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "88", "colour": "orange", "code": "    +-------------------+---------------+\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "89", "colour": "orange", "code": "    | int, long, float  | number        |\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "90", "colour": "orange", "code": "    +-------------------+---------------+\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "91", "colour": "orange", "code": "    | True              | true          |\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "92", "colour": "orange", "code": "    +-------------------+---------------+\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "93", "colour": "orange", "code": "    | False             | false         |\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "94", "colour": "orange", "code": "    +-------------------+---------------+\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "95", "colour": "orange", "code": "    | None              | null          |\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "96", "colour": "orange", "code": "    +-------------------+---------------+\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "97", "colour": "orange", "code": "\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "98", "colour": "orange", "code": "    To extend this to recognize other objects, subclass and implement a\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "99", "colour": "orange", "code": "    ``.default()`` method with another method that returns a serializable\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "100", "colour": "orange", "code": "    object for ``o`` if possible, otherwise it should call the superclass\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "101", "colour": "orange", "code": "    implementation (to raise ``TypeError``).\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "102", "colour": "orange", "code": "\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "103", "colour": "orange", "code": "    \"\"\"\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "104", "colour": "orange", "code": "    item_separator = ', '\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "105", "colour": "orange", "code": "    key_separator = ': '\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "106", "colour": "blue", "code": "    def __init__(self, skipkeys=False, ensure_ascii=True,\n", "error": "R", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "107", "colour": "orange", "code": "            check_circular=True, allow_nan=True, sort_keys=False,\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "108", "colour": "orange", "code": "            indent=None, separators=None, encoding='utf-8', default=None,\n", "error": "none", "author": "tom@organisms.be"}, {"index": "109", "colour": "orange", "code": "            use_decimal=True, namedtuple_as_object=True,\n", "error": "none", "author": "tom@organisms.be"}, {"index": "110", "colour": "orange", "code": "            tuple_as_array=True, bigint_as_string=False,\n", "error": "none", "author": "tom@organisms.be"}, {"index": "111", "colour": "orange", "code": "            item_sort_key=None):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "112", "colour": "orange", "code": "        \"\"\"Constructor for JSONEncoder, with sensible defaults.\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "113", "colour": "orange", "code": "\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "114", "colour": "orange", "code": "        If skipkeys is false, then it is a TypeError to attempt\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "115", "colour": "orange", "code": "        encoding of keys that are not str, int, long, float or None.  If\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "116", "colour": "orange", "code": "        skipkeys is True, such items are simply skipped.\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "117", "colour": "orange", "code": "\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "118", "colour": "orange", "code": "        If ensure_ascii is true, the output is guaranteed to be str\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "119", "colour": "orange", "code": "        objects with all incoming unicode characters escaped.  If\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "120", "colour": "orange", "code": "        ensure_ascii is false, the output will be unicode object.\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "121", "colour": "orange", "code": "\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "122", "colour": "orange", "code": "        If check_circular is true, then lists, dicts, and custom encoded\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "123", "colour": "orange", "code": "        objects will be checked for circular references during encoding to\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "124", "colour": "orange", "code": "        prevent an infinite recursion (which would cause an OverflowError).\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "125", "colour": "orange", "code": "        Otherwise, no such check takes place.\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "126", "colour": "orange", "code": "\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "127", "colour": "orange", "code": "        If allow_nan is true, then NaN, Infinity, and -Infinity will be\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "128", "colour": "orange", "code": "        encoded as such.  This behavior is not JSON specification compliant,\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "129", "colour": "orange", "code": "        but is consistent with most JavaScript based encoders and decoders.\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "130", "colour": "orange", "code": "        Otherwise, it will be a ValueError to encode such floats.\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "131", "colour": "orange", "code": "\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "132", "colour": "orange", "code": "        If sort_keys is true, then the output of dictionaries will be\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "133", "colour": "orange", "code": "        sorted by key; this is useful for regression tests to ensure\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "134", "colour": "orange", "code": "        that JSON serializations can be compared on a day-to-day basis.\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "135", "colour": "orange", "code": "\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "136", "colour": "orange", "code": "        If indent is a string, then JSON array elements and object members\n", "error": "none", "author": "tom@organisms.be"}, {"index": "137", "colour": "orange", "code": "        will be pretty-printed with a newline followed by that string repeated\n", "error": "none", "author": "tom@organisms.be"}, {"index": "138", "colour": "orange", "code": "        for each level of nesting. ``None`` (the default) selects the most compact\n", "error": "none", "author": "tom@organisms.be"}, {"index": "139", "colour": "orange", "code": "        representation without any newlines. For backwards compatibility with\n", "error": "none", "author": "tom@organisms.be"}, {"index": "140", "colour": "orange", "code": "        versions of simplejson earlier than 2.1.0, an integer is also accepted\n", "error": "none", "author": "tom@organisms.be"}, {"index": "141", "colour": "orange", "code": "        and is converted to a string with that many spaces.\n", "error": "none", "author": "tom@organisms.be"}, {"index": "142", "colour": "orange", "code": "\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "143", "colour": "orange", "code": "        If specified, separators should be a (item_separator, key_separator)\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "144", "colour": "orange", "code": "        tuple.  The default is (', ', ': ').  To get the most compact JSON\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "145", "colour": "orange", "code": "        representation you should specify (',', ':') to eliminate whitespace.\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "146", "colour": "orange", "code": "\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "147", "colour": "orange", "code": "        If specified, default is a function that gets called for objects\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "148", "colour": "orange", "code": "        that can't otherwise be serialized.  It should return a JSON encodable\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "149", "colour": "orange", "code": "        version of the object or raise a ``TypeError``.\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "150", "colour": "orange", "code": "\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "151", "colour": "orange", "code": "        If encoding is not None, then all input strings will be\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "152", "colour": "orange", "code": "        transformed into unicode using that encoding prior to JSON-encoding.\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "153", "colour": "orange", "code": "        The default is UTF-8.\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "154", "colour": "orange", "code": "\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "155", "colour": "orange", "code": "        If use_decimal is true (not the default), ``decimal.Decimal`` will\n", "error": "none", "author": "tom@organisms.be"}, {"index": "156", "colour": "orange", "code": "        be supported directly by the encoder. For the inverse, decode JSON\n", "error": "none", "author": "tom@organisms.be"}, {"index": "157", "colour": "orange", "code": "        with ``parse_float=decimal.Decimal``.\n", "error": "none", "author": "tom@organisms.be"}, {"index": "158", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "159", "colour": "orange", "code": "        If namedtuple_as_object is true (the default), objects with\n", "error": "none", "author": "tom@organisms.be"}, {"index": "160", "colour": "orange", "code": "        ``_asdict()`` methods will be encoded as JSON objects.\n", "error": "none", "author": "tom@organisms.be"}, {"index": "161", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "162", "colour": "orange", "code": "        If tuple_as_array is true (the default), tuple (and subclasses) will\n", "error": "none", "author": "tom@organisms.be"}, {"index": "163", "colour": "orange", "code": "        be encoded as JSON arrays.\n", "error": "none", "author": "tom@organisms.be"}, {"index": "164", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "165", "colour": "orange", "code": "        If bigint_as_string is true (not the default), ints 2**53 and higher\n", "error": "none", "author": "tom@organisms.be"}, {"index": "166", "colour": "orange", "code": "        or lower than -2**53 will be encoded as strings. This is to avoid the\n", "error": "none", "author": "tom@organisms.be"}, {"index": "167", "colour": "orange", "code": "        rounding that happens in Javascript otherwise.\n", "error": "none", "author": "tom@organisms.be"}, {"index": "168", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "169", "colour": "orange", "code": "        If specified, item_sort_key is a callable used to sort the items in\n", "error": "none", "author": "tom@organisms.be"}, {"index": "170", "colour": "orange", "code": "        each dictionary. This is useful if you want to sort items other than\n", "error": "none", "author": "tom@organisms.be"}, {"index": "171", "colour": "orange", "code": "        in alphabetical order by key.\n", "error": "none", "author": "tom@organisms.be"}, {"index": "172", "colour": "orange", "code": "        \"\"\"\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "173", "colour": "orange", "code": "\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "174", "colour": "orange", "code": "        self.skipkeys = skipkeys\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "175", "colour": "orange", "code": "        self.ensure_ascii = ensure_ascii\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "176", "colour": "orange", "code": "        self.check_circular = check_circular\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "177", "colour": "orange", "code": "        self.allow_nan = allow_nan\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "178", "colour": "orange", "code": "        self.sort_keys = sort_keys\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "179", "colour": "orange", "code": "        self.use_decimal = use_decimal\n", "error": "none", "author": "tom@organisms.be"}, {"index": "180", "colour": "orange", "code": "        self.namedtuple_as_object = namedtuple_as_object\n", "error": "none", "author": "tom@organisms.be"}, {"index": "181", "colour": "orange", "code": "        self.tuple_as_array = tuple_as_array\n", "error": "none", "author": "tom@organisms.be"}, {"index": "182", "colour": "orange", "code": "        self.bigint_as_string = bigint_as_string\n", "error": "none", "author": "tom@organisms.be"}, {"index": "183", "colour": "orange", "code": "        self.item_sort_key = item_sort_key\n", "error": "none", "author": "tom@organisms.be"}, {"index": "184", "colour": "orange", "code": "        if indent is not None and not isinstance(indent, basestring):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "185", "colour": "orange", "code": "            indent = indent * ' '\n", "error": "none", "author": "tom@organisms.be"}, {"index": "186", "colour": "orange", "code": "        self.indent = indent\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "187", "colour": "orange", "code": "        if separators is not None:\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "188", "colour": "green", "code": "            self.item_separator, self.key_separator = separators\n", "error": "W", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "189", "colour": "orange", "code": "        elif indent is not None:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "190", "colour": "orange", "code": "            self.item_separator = ','\n", "error": "none", "author": "tom@organisms.be"}, {"index": "191", "colour": "orange", "code": "        if default is not None:\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "192", "colour": "orange", "code": "            self.default = default\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "193", "colour": "orange", "code": "        self.encoding = encoding\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "194", "colour": "orange", "code": "\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "195", "colour": "blue", "code": "    def default(self, o):\n", "error": "R", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "196", "colour": "orange", "code": "        \"\"\"Implement this method in a subclass such that it returns\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "197", "colour": "orange", "code": "        a serializable object for ``o``, or calls the base implementation\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "198", "colour": "orange", "code": "        (to raise a ``TypeError``).\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "199", "colour": "orange", "code": "\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "200", "colour": "orange", "code": "        For example, to support arbitrary iterators, you could\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "201", "colour": "orange", "code": "        implement default like this::\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "202", "colour": "orange", "code": "\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "203", "colour": "orange", "code": "            def default(self, o):\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "204", "colour": "orange", "code": "                try:\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "205", "colour": "orange", "code": "                    iterable = iter(o)\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "206", "colour": "orange", "code": "                except TypeError:\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "207", "colour": "orange", "code": "                    pass\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "208", "colour": "orange", "code": "                else:\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "209", "colour": "orange", "code": "                    return list(iterable)\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "210", "colour": "orange", "code": "                return JSONEncoder.default(self, o)\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "211", "colour": "orange", "code": "\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "212", "colour": "orange", "code": "        \"\"\"\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "213", "colour": "orange", "code": "        raise TypeError(repr(o) + \" is not JSON serializable\")\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "214", "colour": "orange", "code": "\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "215", "colour": "orange", "code": "    def encode(self, o):\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "216", "colour": "orange", "code": "        \"\"\"Return a JSON string representation of a Python data structure.\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "217", "colour": "orange", "code": "\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "218", "colour": "orange", "code": "        >>> from simplejson import JSONEncoder\n", "error": "none", "author": "tom@organisms.be"}, {"index": "219", "colour": "orange", "code": "        >>> JSONEncoder().encode({\"foo\": [\"bar\", \"baz\"]})\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "220", "colour": "orange", "code": "        '{\"foo\": [\"bar\", \"baz\"]}'\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "221", "colour": "orange", "code": "\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "222", "colour": "orange", "code": "        \"\"\"\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "223", "colour": "orange", "code": "        # This is for extremely simple cases and benchmarks.\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "224", "colour": "orange", "code": "        if isinstance(o, basestring):\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "225", "colour": "orange", "code": "            if isinstance(o, str):\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "226", "colour": "orange", "code": "                _encoding = self.encoding\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "227", "colour": "orange", "code": "                if (_encoding is not None\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "228", "colour": "orange", "code": "                        and not (_encoding == 'utf-8')):\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "229", "colour": "orange", "code": "                    o = o.decode(_encoding)\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "230", "colour": "orange", "code": "            if self.ensure_ascii:\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "231", "colour": "orange", "code": "                return encode_basestring_ascii(o)\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "232", "colour": "orange", "code": "            else:\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "233", "colour": "orange", "code": "                return encode_basestring(o)\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "234", "colour": "orange", "code": "        # This doesn't pass the iterator directly to ''.join() because the\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "235", "colour": "orange", "code": "        # exceptions aren't as detailed.  The list call should be roughly\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "236", "colour": "orange", "code": "        # equivalent to the PySequence_Fast that ''.join() would do.\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "237", "colour": "orange", "code": "        chunks = self.iterencode(o, _one_shot=True)\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "238", "colour": "orange", "code": "        if not isinstance(chunks, (list, tuple)):\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "239", "colour": "orange", "code": "            chunks = list(chunks)\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "240", "colour": "orange", "code": "        if self.ensure_ascii:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "241", "colour": "orange", "code": "            return ''.join(chunks)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "242", "colour": "orange", "code": "        else:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "243", "colour": "orange", "code": "            return u''.join(chunks)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "244", "colour": "orange", "code": "\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "245", "colour": "blue", "code": "    def iterencode(self, o, _one_shot=False):\n", "error": "R", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "246", "colour": "orange", "code": "        \"\"\"Encode the given object and yield each string\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "247", "colour": "orange", "code": "        representation as available.\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "248", "colour": "orange", "code": "\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "249", "colour": "orange", "code": "        For example::\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "250", "colour": "orange", "code": "\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "251", "colour": "orange", "code": "            for chunk in JSONEncoder().iterencode(bigobject):\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "252", "colour": "orange", "code": "                mysocket.write(chunk)\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "253", "colour": "orange", "code": "\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "254", "colour": "orange", "code": "        \"\"\"\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "255", "colour": "orange", "code": "        if self.check_circular:\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "256", "colour": "orange", "code": "            markers = {}\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "257", "colour": "orange", "code": "        else:\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "258", "colour": "orange", "code": "            markers = None\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "259", "colour": "orange", "code": "        if self.ensure_ascii:\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "260", "colour": "orange", "code": "            _encoder = encode_basestring_ascii\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "261", "colour": "orange", "code": "        else:\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "262", "colour": "orange", "code": "            _encoder = encode_basestring\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "263", "colour": "orange", "code": "        if self.encoding != 'utf-8':\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "264", "colour": "red", "code": "            def _encoder(o, _orig_encoder=_encoder, _encoding=self.encoding):\n", "error": "E", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "265", "colour": "orange", "code": "                if isinstance(o, str):\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "266", "colour": "orange", "code": "                    o = o.decode(_encoding)\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "267", "colour": "orange", "code": "                return _orig_encoder(o)\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "268", "colour": "orange", "code": "\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "269", "colour": "orange", "code": "        def floatstr(o, allow_nan=self.allow_nan,\n", "error": "none", "author": "tom@organisms.be"}, {"index": "270", "colour": "orange", "code": "                _repr=FLOAT_REPR, _inf=PosInf, _neginf=-PosInf):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "271", "colour": "orange", "code": "            # Check for specials. Note that this type of test is processor\n", "error": "none", "author": "tom@organisms.be"}, {"index": "272", "colour": "orange", "code": "            # and/or platform-specific, so do tests which don't depend on\n", "error": "none", "author": "tom@organisms.be"}, {"index": "273", "colour": "orange", "code": "            # the internals.\n", "error": "none", "author": "tom@organisms.be"}, {"index": "274", "colour": "orange", "code": "\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "275", "colour": "orange", "code": "            if o != o:\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "276", "colour": "orange", "code": "                text = 'NaN'\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "277", "colour": "orange", "code": "            elif o == _inf:\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "278", "colour": "orange", "code": "                text = 'Infinity'\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "279", "colour": "orange", "code": "            elif o == _neginf:\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "280", "colour": "orange", "code": "                text = '-Infinity'\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "281", "colour": "orange", "code": "            else:\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "282", "colour": "orange", "code": "                return _repr(o)\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "283", "colour": "orange", "code": "\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "284", "colour": "orange", "code": "            if not allow_nan:\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "285", "colour": "orange", "code": "                raise ValueError(\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "286", "colour": "orange", "code": "                    \"Out of range float values are not JSON compliant: \" +\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "287", "colour": "orange", "code": "                    repr(o))\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "288", "colour": "orange", "code": "\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "289", "colour": "orange", "code": "            return text\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "290", "colour": "orange", "code": "\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "291", "colour": "orange", "code": "\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "292", "colour": "orange", "code": "        key_memo = {}\n", "error": "none", "author": "tom@organisms.be"}, {"index": "293", "colour": "orange", "code": "        if (_one_shot and c_make_encoder is not None\n", "error": "none", "author": "tom@organisms.be"}, {"index": "294", "colour": "orange", "code": "                and self.indent is None):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "295", "colour": "orange", "code": "            _iterencode = c_make_encoder(\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "296", "colour": "orange", "code": "                markers, self.default, _encoder, self.indent,\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "297", "colour": "orange", "code": "                self.key_separator, self.item_separator, self.sort_keys,\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "298", "colour": "orange", "code": "                self.skipkeys, self.allow_nan, key_memo, self.use_decimal,\n", "error": "none", "author": "tom@organisms.be"}, {"index": "299", "colour": "orange", "code": "                self.namedtuple_as_object, self.tuple_as_array,\n", "error": "none", "author": "tom@organisms.be"}, {"index": "300", "colour": "orange", "code": "                self.bigint_as_string, self.item_sort_key,\n", "error": "none", "author": "tom@organisms.be"}, {"index": "301", "colour": "orange", "code": "                Decimal)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "302", "colour": "orange", "code": "        else:\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "303", "colour": "orange", "code": "            _iterencode = _make_iterencode(\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "304", "colour": "orange", "code": "                markers, self.default, _encoder, self.indent, floatstr,\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "305", "colour": "orange", "code": "                self.key_separator, self.item_separator, self.sort_keys,\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "306", "colour": "orange", "code": "                self.skipkeys, _one_shot, self.use_decimal,\n", "error": "none", "author": "tom@organisms.be"}, {"index": "307", "colour": "orange", "code": "                self.namedtuple_as_object, self.tuple_as_array,\n", "error": "none", "author": "tom@organisms.be"}, {"index": "308", "colour": "orange", "code": "                self.bigint_as_string, self.item_sort_key,\n", "error": "none", "author": "tom@organisms.be"}, {"index": "309", "colour": "orange", "code": "                Decimal=Decimal)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "310", "colour": "orange", "code": "        try:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "311", "colour": "orange", "code": "            return _iterencode(o, 0)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "312", "colour": "orange", "code": "        finally:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "313", "colour": "orange", "code": "            key_memo.clear()\n", "error": "none", "author": "tom@organisms.be"}, {"index": "314", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "315", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "316", "colour": "orange", "code": "class JSONEncoderForHTML(JSONEncoder):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "317", "colour": "orange", "code": "    \"\"\"An encoder that produces JSON safe to embed in HTML.\n", "error": "none", "author": "tom@organisms.be"}, {"index": "318", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "319", "colour": "orange", "code": "    To embed JSON content in, say, a script tag on a web page, the\n", "error": "none", "author": "tom@organisms.be"}, {"index": "320", "colour": "orange", "code": "    characters &, < and > should be escaped. They cannot be escaped\n", "error": "none", "author": "tom@organisms.be"}, {"index": "321", "colour": "orange", "code": "    with the usual entities (e.g. &amp;) because they are not expanded\n", "error": "none", "author": "tom@organisms.be"}, {"index": "322", "colour": "orange", "code": "    within <script> tags.\n", "error": "none", "author": "tom@organisms.be"}, {"index": "323", "colour": "orange", "code": "    \"\"\"\n", "error": "none", "author": "tom@organisms.be"}, {"index": "324", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "325", "colour": "orange", "code": "    def encode(self, o):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "326", "colour": "orange", "code": "        # Override JSONEncoder.encode because it has hacks for\n", "error": "none", "author": "tom@organisms.be"}, {"index": "327", "colour": "orange", "code": "        # performance that make things more complicated.\n", "error": "none", "author": "tom@organisms.be"}, {"index": "328", "colour": "orange", "code": "        chunks = self.iterencode(o, True)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "329", "colour": "orange", "code": "        if self.ensure_ascii:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "330", "colour": "orange", "code": "            return ''.join(chunks)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "331", "colour": "orange", "code": "        else:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "332", "colour": "orange", "code": "            return u''.join(chunks)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "333", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "334", "colour": "orange", "code": "    def iterencode(self, o, _one_shot=False):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "335", "colour": "orange", "code": "        chunks = super(JSONEncoderForHTML, self).iterencode(o, _one_shot)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "336", "colour": "orange", "code": "        for chunk in chunks:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "337", "colour": "orange", "code": "            chunk = chunk.replace('&', '\\\\u0026')\n", "error": "none", "author": "tom@organisms.be"}, {"index": "338", "colour": "orange", "code": "            chunk = chunk.replace('<', '\\\\u003c')\n", "error": "none", "author": "tom@organisms.be"}, {"index": "339", "colour": "orange", "code": "            chunk = chunk.replace('>', '\\\\u003e')\n", "error": "none", "author": "tom@organisms.be"}, {"index": "340", "colour": "orange", "code": "            yield chunk\n", "error": "none", "author": "tom@organisms.be"}, {"index": "341", "colour": "orange", "code": "\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "342", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "343", "colour": "blue", "code": "def _make_iterencode(markers, _default, _encoder, _indent, _floatstr,\n", "error": "R", "author": "tom@organisms.be"}, {"index": "344", "colour": "green", "code": "        _key_separator, _item_separator, _sort_keys, _skipkeys, _one_shot,\n", "error": "W", "author": "tom@organisms.be"}, {"index": "345", "colour": "orange", "code": "        _use_decimal, _namedtuple_as_object, _tuple_as_array,\n", "error": "none", "author": "tom@organisms.be"}, {"index": "346", "colour": "orange", "code": "        _bigint_as_string, _item_sort_key,\n", "error": "none", "author": "tom@organisms.be"}, {"index": "347", "colour": "orange", "code": "        ## HACK: hand-optimized bytecode; turn globals into locals\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "348", "colour": "green", "code": "        False=False,\n", "error": "W", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "349", "colour": "green", "code": "        True=True,\n", "error": "W", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "350", "colour": "green", "code": "        ValueError=ValueError,\n", "error": "W", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "351", "colour": "green", "code": "        basestring=basestring,\n", "error": "W", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "352", "colour": "green", "code": "        Decimal=Decimal,\n", "error": "W", "author": "tom@organisms.be"}, {"index": "353", "colour": "green", "code": "        dict=dict,\n", "error": "W", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "354", "colour": "green", "code": "        float=float,\n", "error": "W", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "355", "colour": "green", "code": "        id=id,\n", "error": "W", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "356", "colour": "green", "code": "        int=int,\n", "error": "W", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "357", "colour": "green", "code": "        isinstance=isinstance,\n", "error": "W", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "358", "colour": "green", "code": "        list=list,\n", "error": "W", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "359", "colour": "green", "code": "        long=long,\n", "error": "W", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "360", "colour": "green", "code": "        str=str,\n", "error": "W", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "361", "colour": "green", "code": "        tuple=tuple,\n", "error": "W", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "362", "colour": "orange", "code": "    ):\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "363", "colour": "orange", "code": "    if _item_sort_key and not callable(_item_sort_key):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "364", "colour": "orange", "code": "        raise TypeError(\"item_sort_key must be None or callable\")\n", "error": "none", "author": "tom@organisms.be"}, {"index": "365", "colour": "orange", "code": "\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "366", "colour": "blue", "code": "    def _iterencode_list(lst, _current_indent_level):\n", "error": "R", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "367", "colour": "orange", "code": "        if not lst:\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "368", "colour": "orange", "code": "            yield '[]'\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "369", "colour": "orange", "code": "            return\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "370", "colour": "orange", "code": "        if markers is not None:\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "371", "colour": "orange", "code": "            markerid = id(lst)\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "372", "colour": "orange", "code": "            if markerid in markers:\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "373", "colour": "orange", "code": "                raise ValueError(\"Circular reference detected\")\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "374", "colour": "orange", "code": "            markers[markerid] = lst\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "375", "colour": "orange", "code": "        buf = '['\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "376", "colour": "orange", "code": "        if _indent is not None:\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "377", "colour": "orange", "code": "            _current_indent_level += 1\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "378", "colour": "orange", "code": "            newline_indent = '\\n' + (_indent * _current_indent_level)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "379", "colour": "orange", "code": "            separator = _item_separator + newline_indent\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "380", "colour": "orange", "code": "            buf += newline_indent\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "381", "colour": "orange", "code": "        else:\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "382", "colour": "orange", "code": "            newline_indent = None\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "383", "colour": "orange", "code": "            separator = _item_separator\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "384", "colour": "orange", "code": "        first = True\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "385", "colour": "orange", "code": "        for value in lst:\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "386", "colour": "orange", "code": "            if first:\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "387", "colour": "orange", "code": "                first = False\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "388", "colour": "orange", "code": "            else:\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "389", "colour": "orange", "code": "                buf = separator\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "390", "colour": "orange", "code": "            if isinstance(value, basestring):\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "391", "colour": "orange", "code": "                yield buf + _encoder(value)\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "392", "colour": "orange", "code": "            elif value is None:\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "393", "colour": "orange", "code": "                yield buf + 'null'\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "394", "colour": "orange", "code": "            elif value is True:\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "395", "colour": "orange", "code": "                yield buf + 'true'\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "396", "colour": "orange", "code": "            elif value is False:\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "397", "colour": "orange", "code": "                yield buf + 'false'\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "398", "colour": "orange", "code": "            elif isinstance(value, (int, long)):\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "399", "colour": "orange", "code": "                yield ((buf + str(value))\n", "error": "none", "author": "tom@organisms.be"}, {"index": "400", "colour": "orange", "code": "                       if (not _bigint_as_string or\n", "error": "none", "author": "tom@organisms.be"}, {"index": "401", "colour": "orange", "code": "                           (-1 << 53) < value < (1 << 53))\n", "error": "none", "author": "tom@organisms.be"}, {"index": "402", "colour": "orange", "code": "                           else (buf + '\"' + str(value) + '\"'))\n", "error": "none", "author": "tom@organisms.be"}, {"index": "403", "colour": "orange", "code": "            elif isinstance(value, float):\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "404", "colour": "orange", "code": "                yield buf + _floatstr(value)\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "405", "colour": "orange", "code": "            elif _use_decimal and isinstance(value, Decimal):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "406", "colour": "orange", "code": "                yield buf + str(value)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "407", "colour": "orange", "code": "            else:\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "408", "colour": "orange", "code": "                yield buf\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "409", "colour": "orange", "code": "                if isinstance(value, list):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "410", "colour": "orange", "code": "                    chunks = _iterencode_list(value, _current_indent_level)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "411", "colour": "orange", "code": "                else:\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "412", "colour": "orange", "code": "                    _asdict = _namedtuple_as_object and getattr(value, '_asdict', None)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "413", "colour": "orange", "code": "                    if _asdict and callable(_asdict):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "414", "colour": "orange", "code": "                        chunks = _iterencode_dict(_asdict(),\n", "error": "none", "author": "tom@organisms.be"}, {"index": "415", "colour": "orange", "code": "                                                  _current_indent_level)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "416", "colour": "orange", "code": "                    elif _tuple_as_array and isinstance(value, tuple):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "417", "colour": "orange", "code": "                        chunks = _iterencode_list(value, _current_indent_level)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "418", "colour": "orange", "code": "                    elif isinstance(value, dict):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "419", "colour": "orange", "code": "                        chunks = _iterencode_dict(value, _current_indent_level)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "420", "colour": "orange", "code": "                    else:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "421", "colour": "orange", "code": "                        chunks = _iterencode(value, _current_indent_level)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "422", "colour": "orange", "code": "                for chunk in chunks:\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "423", "colour": "orange", "code": "                    yield chunk\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "424", "colour": "orange", "code": "        if newline_indent is not None:\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "425", "colour": "orange", "code": "            _current_indent_level -= 1\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "426", "colour": "orange", "code": "            yield '\\n' + (_indent * _current_indent_level)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "427", "colour": "orange", "code": "        yield ']'\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "428", "colour": "orange", "code": "        if markers is not None:\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "429", "colour": "orange", "code": "            del markers[markerid]\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "430", "colour": "orange", "code": "\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "431", "colour": "blue", "code": "    def _iterencode_dict(dct, _current_indent_level):\n", "error": "R", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "432", "colour": "orange", "code": "        if not dct:\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "433", "colour": "orange", "code": "            yield '{}'\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "434", "colour": "orange", "code": "            return\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "435", "colour": "orange", "code": "        if markers is not None:\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "436", "colour": "orange", "code": "            markerid = id(dct)\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "437", "colour": "orange", "code": "            if markerid in markers:\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "438", "colour": "orange", "code": "                raise ValueError(\"Circular reference detected\")\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "439", "colour": "orange", "code": "            markers[markerid] = dct\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "440", "colour": "orange", "code": "        yield '{'\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "441", "colour": "orange", "code": "        if _indent is not None:\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "442", "colour": "orange", "code": "            _current_indent_level += 1\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "443", "colour": "orange", "code": "            newline_indent = '\\n' + (_indent * _current_indent_level)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "444", "colour": "orange", "code": "            item_separator = _item_separator + newline_indent\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "445", "colour": "orange", "code": "            yield newline_indent\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "446", "colour": "orange", "code": "        else:\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "447", "colour": "orange", "code": "            newline_indent = None\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "448", "colour": "orange", "code": "            item_separator = _item_separator\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "449", "colour": "orange", "code": "        first = True\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "450", "colour": "orange", "code": "        if _item_sort_key:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "451", "colour": "orange", "code": "            items = dct.items()\n", "error": "none", "author": "tom@organisms.be"}, {"index": "452", "colour": "orange", "code": "            items.sort(key=_item_sort_key)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "453", "colour": "orange", "code": "        elif _sort_keys:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "454", "colour": "orange", "code": "            items = dct.items()\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "455", "colour": "orange", "code": "            items.sort(key=lambda kv: kv[0])\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "456", "colour": "orange", "code": "        else:\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "457", "colour": "orange", "code": "            items = dct.iteritems()\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "458", "colour": "orange", "code": "        for key, value in items:\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "459", "colour": "orange", "code": "            if isinstance(key, basestring):\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "460", "colour": "orange", "code": "                pass\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "461", "colour": "orange", "code": "            # JavaScript is weakly typed for these, so it makes sense to\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "462", "colour": "orange", "code": "            # also allow them.  Many encoders seem to do something like this.\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "463", "colour": "orange", "code": "            elif isinstance(key, float):\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "464", "colour": "orange", "code": "                key = _floatstr(key)\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "465", "colour": "orange", "code": "            elif key is True:\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "466", "colour": "orange", "code": "                key = 'true'\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "467", "colour": "orange", "code": "            elif key is False:\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "468", "colour": "orange", "code": "                key = 'false'\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "469", "colour": "orange", "code": "            elif key is None:\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "470", "colour": "orange", "code": "                key = 'null'\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "471", "colour": "orange", "code": "            elif isinstance(key, (int, long)):\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "472", "colour": "orange", "code": "                key = str(key)\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "473", "colour": "orange", "code": "            elif _skipkeys:\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "474", "colour": "orange", "code": "                continue\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "475", "colour": "orange", "code": "            else:\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "476", "colour": "orange", "code": "                raise TypeError(\"key \" + repr(key) + \" is not a string\")\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "477", "colour": "orange", "code": "            if first:\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "478", "colour": "orange", "code": "                first = False\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "479", "colour": "orange", "code": "            else:\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "480", "colour": "orange", "code": "                yield item_separator\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "481", "colour": "orange", "code": "            yield _encoder(key)\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "482", "colour": "orange", "code": "            yield _key_separator\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "483", "colour": "orange", "code": "            if isinstance(value, basestring):\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "484", "colour": "orange", "code": "                yield _encoder(value)\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "485", "colour": "orange", "code": "            elif value is None:\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "486", "colour": "orange", "code": "                yield 'null'\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "487", "colour": "orange", "code": "            elif value is True:\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "488", "colour": "orange", "code": "                yield 'true'\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "489", "colour": "orange", "code": "            elif value is False:\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "490", "colour": "orange", "code": "                yield 'false'\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "491", "colour": "orange", "code": "            elif isinstance(value, (int, long)):\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "492", "colour": "orange", "code": "                yield (str(value)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "493", "colour": "orange", "code": "                       if (not _bigint_as_string or\n", "error": "none", "author": "tom@organisms.be"}, {"index": "494", "colour": "orange", "code": "                           (-1 << 53) < value < (1 << 53))\n", "error": "none", "author": "tom@organisms.be"}, {"index": "495", "colour": "orange", "code": "                           else ('\"' + str(value) + '\"'))\n", "error": "none", "author": "tom@organisms.be"}, {"index": "496", "colour": "orange", "code": "            elif isinstance(value, float):\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "497", "colour": "orange", "code": "                yield _floatstr(value)\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "498", "colour": "orange", "code": "            elif _use_decimal and isinstance(value, Decimal):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "499", "colour": "orange", "code": "                yield str(value)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "500", "colour": "orange", "code": "            else:\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "501", "colour": "orange", "code": "                if isinstance(value, list):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "502", "colour": "orange", "code": "                    chunks = _iterencode_list(value, _current_indent_level)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "503", "colour": "orange", "code": "                else:\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "504", "colour": "orange", "code": "                    _asdict = _namedtuple_as_object and getattr(value, '_asdict', None)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "505", "colour": "orange", "code": "                    if _asdict and callable(_asdict):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "506", "colour": "orange", "code": "                        chunks = _iterencode_dict(_asdict(),\n", "error": "none", "author": "tom@organisms.be"}, {"index": "507", "colour": "orange", "code": "                                                  _current_indent_level)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "508", "colour": "orange", "code": "                    elif _tuple_as_array and isinstance(value, tuple):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "509", "colour": "orange", "code": "                        chunks = _iterencode_list(value, _current_indent_level)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "510", "colour": "orange", "code": "                    elif isinstance(value, dict):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "511", "colour": "orange", "code": "                        chunks = _iterencode_dict(value, _current_indent_level)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "512", "colour": "orange", "code": "                    else:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "513", "colour": "orange", "code": "                        chunks = _iterencode(value, _current_indent_level)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "514", "colour": "orange", "code": "                for chunk in chunks:\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "515", "colour": "orange", "code": "                    yield chunk\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "516", "colour": "orange", "code": "        if newline_indent is not None:\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "517", "colour": "orange", "code": "            _current_indent_level -= 1\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "518", "colour": "orange", "code": "            yield '\\n' + (_indent * _current_indent_level)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "519", "colour": "orange", "code": "        yield '}'\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "520", "colour": "orange", "code": "        if markers is not None:\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "521", "colour": "orange", "code": "            del markers[markerid]\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "522", "colour": "orange", "code": "\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "523", "colour": "blue", "code": "    def _iterencode(o, _current_indent_level):\n", "error": "R", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "524", "colour": "orange", "code": "        if isinstance(o, basestring):\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "525", "colour": "orange", "code": "            yield _encoder(o)\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "526", "colour": "orange", "code": "        elif o is None:\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "527", "colour": "orange", "code": "            yield 'null'\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "528", "colour": "orange", "code": "        elif o is True:\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "529", "colour": "orange", "code": "            yield 'true'\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "530", "colour": "orange", "code": "        elif o is False:\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "531", "colour": "orange", "code": "            yield 'false'\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "532", "colour": "orange", "code": "        elif isinstance(o, (int, long)):\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "533", "colour": "orange", "code": "            yield (str(o)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "534", "colour": "orange", "code": "                   if (not _bigint_as_string or\n", "error": "none", "author": "tom@organisms.be"}, {"index": "535", "colour": "orange", "code": "                       (-1 << 53) < o < (1 << 53))\n", "error": "none", "author": "tom@organisms.be"}, {"index": "536", "colour": "orange", "code": "                       else ('\"' + str(o) + '\"'))\n", "error": "none", "author": "tom@organisms.be"}, {"index": "537", "colour": "orange", "code": "        elif isinstance(o, float):\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "538", "colour": "orange", "code": "            yield _floatstr(o)\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "539", "colour": "orange", "code": "        elif isinstance(o, list):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "540", "colour": "orange", "code": "            for chunk in _iterencode_list(o, _current_indent_level):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "541", "colour": "orange", "code": "                yield chunk\n", "error": "none", "author": "tom@organisms.be"}, {"index": "542", "colour": "orange", "code": "        else:\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "543", "colour": "orange", "code": "            _asdict = _namedtuple_as_object and getattr(o, '_asdict', None)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "544", "colour": "orange", "code": "            if _asdict and callable(_asdict):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "545", "colour": "orange", "code": "                for chunk in _iterencode_dict(_asdict(), _current_indent_level):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "546", "colour": "orange", "code": "                    yield chunk\n", "error": "none", "author": "tom@organisms.be"}, {"index": "547", "colour": "orange", "code": "            elif (_tuple_as_array and isinstance(o, tuple)):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "548", "colour": "orange", "code": "                for chunk in _iterencode_list(o, _current_indent_level):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "549", "colour": "orange", "code": "                    yield chunk\n", "error": "none", "author": "tom@organisms.be"}, {"index": "550", "colour": "orange", "code": "            elif isinstance(o, dict):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "551", "colour": "orange", "code": "                for chunk in _iterencode_dict(o, _current_indent_level):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "552", "colour": "orange", "code": "                    yield chunk\n", "error": "none", "author": "tom@organisms.be"}, {"index": "553", "colour": "orange", "code": "            elif _use_decimal and isinstance(o, Decimal):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "554", "colour": "orange", "code": "                yield str(o)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "555", "colour": "orange", "code": "            else:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "556", "colour": "orange", "code": "                if markers is not None:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "557", "colour": "orange", "code": "                    markerid = id(o)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "558", "colour": "orange", "code": "                    if markerid in markers:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "559", "colour": "orange", "code": "                        raise ValueError(\"Circular reference detected\")\n", "error": "none", "author": "tom@organisms.be"}, {"index": "560", "colour": "orange", "code": "                    markers[markerid] = o\n", "error": "none", "author": "tom@organisms.be"}, {"index": "561", "colour": "orange", "code": "                o = _default(o)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "562", "colour": "orange", "code": "                for chunk in _iterencode(o, _current_indent_level):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "563", "colour": "orange", "code": "                    yield chunk\n", "error": "none", "author": "tom@organisms.be"}, {"index": "564", "colour": "orange", "code": "                if markers is not None:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "565", "colour": "orange", "code": "                    del markers[markerid]\n", "error": "none", "author": "tom@organisms.be"}, {"index": "566", "colour": "orange", "code": "\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "567", "colour": "orange", "code": "    return _iterencode\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}]]}