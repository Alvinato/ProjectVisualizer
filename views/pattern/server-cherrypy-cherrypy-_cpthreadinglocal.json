{"path": "/home/asumal/git/cs410/pattern/pattern/server/cherrypy/cherrypy/_cpthreadinglocal.py", "lines": [[{"error": "none", "line": "1", "code": "# This is a backport of Python-2.4's threading.local() implementation\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "2", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "3", "code": "\"\"\"Thread-local objects\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "4", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "5", "code": "(Note that this module provides a Python version of thread\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "6", "code": " threading.local class.  Depending on the version of Python you're\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "7", "code": " using, there may be a faster one available.  You should always import\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "8", "code": " the local class from threading.)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "9", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "10", "code": "Thread-local objects support the management of thread-local data.\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "11", "code": "If you have data that you want to be local to a thread, simply create\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "12", "code": "a thread-local object and use its attributes:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "13", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "14", "code": "  >>> mydata = local()\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "15", "code": "  >>> mydata.number = 42\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "16", "code": "  >>> mydata.number\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "17", "code": "  42\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "18", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "19", "code": "You can also access the local-object's dictionary:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "20", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "21", "code": "  >>> mydata.__dict__\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "22", "code": "  {'number': 42}\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "23", "code": "  >>> mydata.__dict__.setdefault('widgets', [])\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "24", "code": "  []\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "25", "code": "  >>> mydata.widgets\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "26", "code": "  []\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "27", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "28", "code": "What's important about thread-local objects is that their data are\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "29", "code": "local to a thread. If we access the data in a different thread:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "30", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "31", "code": "  >>> log = []\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "32", "code": "  >>> def f():\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "33", "code": "  ...     items = mydata.__dict__.items()\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "34", "code": "  ...     items.sort()\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "35", "code": "  ...     log.append(items)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "36", "code": "  ...     mydata.number = 11\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "37", "code": "  ...     log.append(mydata.number)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "38", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "39", "code": "  >>> import threading\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "40", "code": "  >>> thread = threading.Thread(target=f)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "41", "code": "  >>> thread.start()\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "42", "code": "  >>> thread.join()\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "43", "code": "  >>> log\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "44", "code": "  [[], 11]\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "45", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "46", "code": "we get different data.  Furthermore, changes made in the other thread\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "47", "code": "don't affect data seen in this thread:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "48", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "49", "code": "  >>> mydata.number\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "50", "code": "  42\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "51", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "52", "code": "Of course, values you get from a local object, including a __dict__\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "53", "code": "attribute, are for whatever thread was current at the time the\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "54", "code": "attribute was read.  For that reason, you generally don't want to save\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "55", "code": "these values across threads, as they apply only to the thread they\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "56", "code": "came from.\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "57", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "58", "code": "You can create custom local objects by subclassing the local class:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "59", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "60", "code": "  >>> class MyLocal(local):\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "61", "code": "  ...     number = 2\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "62", "code": "  ...     initialized = False\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "63", "code": "  ...     def __init__(self, **kw):\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "64", "code": "  ...         if self.initialized:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "65", "code": "  ...             raise SystemError('__init__ called too many times')\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "66", "code": "  ...         self.initialized = True\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "67", "code": "  ...         self.__dict__.update(kw)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "68", "code": "  ...     def squared(self):\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "69", "code": "  ...         return self.number ** 2\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "70", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "71", "code": "This can be useful to support default values, methods and\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "72", "code": "initialization.  Note that if you define an __init__ method, it will be\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "73", "code": "called each time the local object is used in a separate thread.  This\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "74", "code": "is necessary to initialize each thread's dictionary.\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "75", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "76", "code": "Now if we create a local object:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "77", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "78", "code": "  >>> mydata = MyLocal(color='red')\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "79", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "80", "code": "Now we have a default number:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "81", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "82", "code": "  >>> mydata.number\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "83", "code": "  2\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "84", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "85", "code": "an initial color:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "86", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "87", "code": "  >>> mydata.color\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "88", "code": "  'red'\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "89", "code": "  >>> del mydata.color\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "90", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "91", "code": "And a method that operates on the data:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "92", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "93", "code": "  >>> mydata.squared()\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "94", "code": "  4\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "95", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "96", "code": "As before, we can access the data in a separate thread:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "97", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "98", "code": "  >>> log = []\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "99", "code": "  >>> thread = threading.Thread(target=f)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "100", "code": "  >>> thread.start()\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "101", "code": "  >>> thread.join()\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "102", "code": "  >>> log\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "103", "code": "  [[('color', 'red'), ('initialized', True)], 11]\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "104", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "105", "code": "without affecting this thread's data:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "106", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "107", "code": "  >>> mydata.number\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "108", "code": "  2\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "109", "code": "  >>> mydata.color\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "110", "code": "  Traceback (most recent call last):\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "111", "code": "  ...\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "112", "code": "  AttributeError: 'MyLocal' object has no attribute 'color'\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "113", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "114", "code": "Note that subclasses can define slots, but they are not thread\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "115", "code": "local. They are shared across threads:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "116", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "117", "code": "  >>> class MyLocal(local):\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "118", "code": "  ...     __slots__ = 'number'\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "119", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "120", "code": "  >>> mydata = MyLocal()\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "121", "code": "  >>> mydata.number = 42\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "122", "code": "  >>> mydata.color = 'red'\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "123", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "124", "code": "So, the separate thread:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "125", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "126", "code": "  >>> thread = threading.Thread(target=f)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "127", "code": "  >>> thread.start()\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "128", "code": "  >>> thread.join()\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "129", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "130", "code": "affects what we see:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "131", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "132", "code": "  >>> mydata.number\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "133", "code": "  11\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "134", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "135", "code": ">>> del mydata\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "136", "code": "\"\"\"\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "137", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "138", "code": "# Threading import is at end\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "139", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "R", "line": "140", "code": "class _localbase(object):\n", "colour": "green", "author": "tom@organisms.be"}, {"error": "none", "line": "141", "code": "    __slots__ = '_local__key', '_local__args', '_local__lock'\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "142", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "143", "code": "    def __new__(cls, *args, **kw):\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "144", "code": "        self = object.__new__(cls)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "145", "code": "        key = 'thread.local.' + str(id(self))\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "146", "code": "        object.__setattr__(self, '_local__key', key)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "147", "code": "        object.__setattr__(self, '_local__args', (args, kw))\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "148", "code": "        object.__setattr__(self, '_local__lock', RLock())\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "149", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "150", "code": "        if args or kw and (cls.__init__ is object.__init__):\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "151", "code": "            raise TypeError(\"Initialization arguments are not supported\")\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "152", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "153", "code": "        # We need to create the thread dict in anticipation of\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "154", "code": "        # __init__ being called, to make sure we don't call it\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "155", "code": "        # again ourselves.\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "W", "line": "156", "code": "        dict = object.__getattribute__(self, '__dict__')\n", "colour": "purple", "author": "tom@organisms.be"}, {"error": "none", "line": "157", "code": "        currentThread().__dict__[key] = dict\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "158", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "159", "code": "        return self\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "160", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "161", "code": "def _patch(self):\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "162", "code": "    key = object.__getattribute__(self, '_local__key')\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "163", "code": "    d = currentThread().__dict__.get(key)\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "164", "code": "    if d is None:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "165", "code": "        d = {}\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "166", "code": "        currentThread().__dict__[key] = d\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "167", "code": "        object.__setattr__(self, '__dict__', d)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "168", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "169", "code": "        # we have a new instance dict, so call out __init__ if we have\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "170", "code": "        # one\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "171", "code": "        cls = type(self)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "172", "code": "        if cls.__init__ is not object.__init__:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "173", "code": "            args, kw = object.__getattribute__(self, '_local__args')\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "W", "line": "174", "code": "            cls.__init__(self, *args, **kw)\n", "colour": "purple", "author": "tom@organisms.be"}, {"error": "none", "line": "175", "code": "    else:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "176", "code": "        object.__setattr__(self, '__dict__', d)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "177", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "R", "line": "178", "code": "class local(_localbase):\n", "colour": "green", "author": "tom@organisms.be"}, {"error": "none", "line": "179", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "180", "code": "    def __getattribute__(self, name):\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "181", "code": "        lock = object.__getattribute__(self, '_local__lock')\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "182", "code": "        lock.acquire()\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "183", "code": "        try:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "184", "code": "            _patch(self)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "185", "code": "            return object.__getattribute__(self, name)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "186", "code": "        finally:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "187", "code": "            lock.release()\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "188", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "189", "code": "    def __setattr__(self, name, value):\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "190", "code": "        lock = object.__getattribute__(self, '_local__lock')\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "191", "code": "        lock.acquire()\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "192", "code": "        try:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "193", "code": "            _patch(self)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "194", "code": "            return object.__setattr__(self, name, value)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "195", "code": "        finally:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "196", "code": "            lock.release()\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "197", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "198", "code": "    def __delattr__(self, name):\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "199", "code": "        lock = object.__getattribute__(self, '_local__lock')\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "200", "code": "        lock.acquire()\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "201", "code": "        try:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "202", "code": "            _patch(self)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "203", "code": "            return object.__delattr__(self, name)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "204", "code": "        finally:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "205", "code": "            lock.release()\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "206", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "207", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "E", "line": "208", "code": "    def __del__():\n", "colour": "yellow", "author": "tom@organisms.be"}, {"error": "none", "line": "209", "code": "        threading_enumerate = enumerate\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "210", "code": "        __getattribute__ = object.__getattribute__\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "211", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "212", "code": "        def __del__(self):\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "213", "code": "            key = __getattribute__(self, '_local__key')\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "214", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "215", "code": "            try:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "216", "code": "                threads = list(threading_enumerate())\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "W", "line": "217", "code": "            except:\n", "colour": "purple", "author": "tom@organisms.be"}, {"error": "none", "line": "218", "code": "                # if enumerate fails, as it seems to do during\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "219", "code": "                # shutdown, we'll skip cleanup under the assumption\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "220", "code": "                # that there is nothing to clean up\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "221", "code": "                return\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "222", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "223", "code": "            for thread in threads:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "224", "code": "                try:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "225", "code": "                    __dict__ = thread.__dict__\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "226", "code": "                except AttributeError:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "227", "code": "                    # Thread is dying, rest in peace\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "228", "code": "                    continue\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "229", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "230", "code": "                if key in __dict__:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "231", "code": "                    try:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "232", "code": "                        del __dict__[key]\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "233", "code": "                    except KeyError:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "234", "code": "                        pass # didn't have anything in this thread\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "235", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "236", "code": "        return __del__\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "237", "code": "    __del__ = __del__()\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "238", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "W", "line": "239", "code": "from threading import currentThread, enumerate, RLock\n", "colour": "purple", "author": "tom@organisms.be"}]]}