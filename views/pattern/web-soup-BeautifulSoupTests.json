{"path": "/home/asumal/git/cs410/pattern/pattern/web/soup/BeautifulSoupTests.py", "lines": [[{"error": "none", "line": "1", "code": "# -*- coding: utf-8 -*-\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "2", "code": "\"\"\"Unit tests for Beautiful Soup.\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "3", "code": "\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "4", "code": "These tests make sure the Beautiful Soup works as it should. If you\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "5", "code": "find a bug in Beautiful Soup, the best way to express it is as a test\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "6", "code": "case like this that fails.\"\"\"\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "7", "code": "\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "8", "code": "import unittest\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "W", "line": "9", "code": "from BeautifulSoup import *\n", "colour": "purple", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "10", "code": "\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "R", "line": "11", "code": "class SoupTest(unittest.TestCase):\n", "colour": "green", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "12", "code": "\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "C", "line": "13", "code": "    def assertSoupEquals(self, toParse, rep=None, c=BeautifulSoup):\n", "colour": "blue", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "14", "code": "        \"\"\"Parse the given text and make sure its string rep is the other\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "15", "code": "        given text.\"\"\"\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "16", "code": "        if rep == None:\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "17", "code": "            rep = toParse\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "18", "code": "        self.assertEqual(str(c(toParse)), rep)\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "19", "code": "\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "20", "code": "\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "R", "line": "21", "code": "class FollowThatTag(SoupTest):\n", "colour": "green", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "22", "code": "\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "23", "code": "    \"Tests the various ways of fetching tags from a soup.\"\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "24", "code": "\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "25", "code": "    def setUp(self):\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "C", "line": "26", "code": "        ml = \"\"\"\n", "colour": "blue", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "27", "code": "        <a id=\"x\">1</a>\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "28", "code": "        <A id=\"a\">2</a>\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "29", "code": "        <b id=\"b\">3</a>\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "30", "code": "        <b href=\"foo\" id=\"x\">4</a>\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "31", "code": "        <ac width=100>4</ac>\"\"\"\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "32", "code": "        self.soup = BeautifulStoneSoup(ml)\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "33", "code": "\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "C", "line": "34", "code": "    def testFindAllByName(self):\n", "colour": "blue", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "35", "code": "        matching = self.soup('a')\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "36", "code": "        self.assertEqual(len(matching), 2)\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "37", "code": "        self.assertEqual(matching[0].name, 'a')\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "38", "code": "        self.assertEqual(matching, self.soup.findAll('a'))\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "39", "code": "        self.assertEqual(matching, self.soup.findAll(SoupStrainer('a')))\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "40", "code": "\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "C", "line": "41", "code": "    def testFindAllByAttribute(self):\n", "colour": "blue", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "42", "code": "        matching = self.soup.findAll(id='x')\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "43", "code": "        self.assertEqual(len(matching), 2)\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "44", "code": "        self.assertEqual(matching[0].name, 'a')\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "45", "code": "        self.assertEqual(matching[1].name, 'b')\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "46", "code": "\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "47", "code": "        matching2 = self.soup.findAll(attrs={'id' : 'x'})\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "48", "code": "        self.assertEqual(matching, matching2)\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "49", "code": "\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "50", "code": "        strainer = SoupStrainer(attrs={'id' : 'x'})\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "51", "code": "        self.assertEqual(matching, self.soup.findAll(strainer))\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "52", "code": "\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "53", "code": "        self.assertEqual(len(self.soup.findAll(id=None)), 1)\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "54", "code": "\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "55", "code": "        self.assertEqual(len(self.soup.findAll(width=100)), 1)\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "56", "code": "        self.assertEqual(len(self.soup.findAll(junk=None)), 5)\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "57", "code": "        self.assertEqual(len(self.soup.findAll(junk=[1, None])), 5)\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "58", "code": "\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "59", "code": "        self.assertEqual(len(self.soup.findAll(junk=re.compile('.*'))), 0)\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "60", "code": "        self.assertEqual(len(self.soup.findAll(junk=True)), 0)\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "61", "code": "\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "62", "code": "        self.assertEqual(len(self.soup.findAll(junk=True)), 0)\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "63", "code": "        self.assertEqual(len(self.soup.findAll(href=True)), 1)\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "64", "code": "\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "C", "line": "65", "code": "    def testFindallByClass(self):\n", "colour": "blue", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "W", "line": "66", "code": "        soup = BeautifulSoup('<b class=\"foo\">Foo</b><a class=\"1 23 4\">Bar</a>')\n", "colour": "purple", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "67", "code": "        self.assertEqual(soup.find(attrs='foo').string, \"Foo\")\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "68", "code": "        self.assertEqual(soup.find('a', '1').string, \"Bar\")\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "69", "code": "        self.assertEqual(soup.find('a', '23').string, \"Bar\")\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "70", "code": "        self.assertEqual(soup.find('a', '4').string, \"Bar\")\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "71", "code": "\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "72", "code": "        self.assertEqual(soup.find('a', '2'), None)\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "73", "code": "\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "C", "line": "74", "code": "    def testFindAllByList(self):\n", "colour": "blue", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "75", "code": "        matching = self.soup(['a', 'ac'])\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "76", "code": "        self.assertEqual(len(matching), 3)\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "77", "code": "\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "C", "line": "78", "code": "    def testFindAllByHash(self):\n", "colour": "blue", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "79", "code": "        matching = self.soup({'a' : True, 'b' : True})\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "80", "code": "        self.assertEqual(len(matching), 4)\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "81", "code": "\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "C", "line": "82", "code": "    def testFindAllText(self):\n", "colour": "blue", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "W", "line": "83", "code": "        soup = BeautifulSoup(\"<html>\\xbb</html>\")\n", "colour": "purple", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "84", "code": "        self.assertEqual(soup.findAll(text=re.compile('.*')),\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "85", "code": "                         [u'\\xbb'])\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "86", "code": "\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "C", "line": "87", "code": "    def testFindAllByRE(self):\n", "colour": "blue", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "W", "line": "88", "code": "        import re\n", "colour": "purple", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "C", "line": "89", "code": "        r = re.compile('a.*')\n", "colour": "blue", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "90", "code": "        self.assertEqual(len(self.soup(r)), 3)\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "91", "code": "\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "C", "line": "92", "code": "    def testFindAllByMethod(self):\n", "colour": "blue", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "C", "line": "93", "code": "        def matchTagWhereIDMatchesName(tag):\n", "colour": "blue", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "94", "code": "            return tag.name == tag.get('id')\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "95", "code": "\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "96", "code": "        matching = self.soup.findAll(matchTagWhereIDMatchesName)\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "97", "code": "        self.assertEqual(len(matching), 2)\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "98", "code": "        self.assertEqual(matching[0].name, 'a')\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "99", "code": "\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "C", "line": "100", "code": "    def testFindByIndex(self):\n", "colour": "blue", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "101", "code": "        \"\"\"For when you have the tag and you want to know where it is.\"\"\"\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "102", "code": "        tag = self.soup.find('a', id=\"a\")\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "103", "code": "        self.assertEqual(self.soup.index(tag), 3)\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "104", "code": "\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "105", "code": "        # It works for NavigableStrings as well.\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "C", "line": "106", "code": "        s = tag.string\n", "colour": "blue", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "107", "code": "        self.assertEqual(tag.index(s), 0)\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "108", "code": "\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "109", "code": "        # If the tag isn't present, a ValueError is raised.\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "110", "code": "        soup2 = BeautifulSoup(\"<b></b>\")\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "111", "code": "        tag2 = soup2.find('b')\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "112", "code": "        self.assertRaises(ValueError, self.soup.index, tag2)\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "113", "code": "\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "C", "line": "114", "code": "    def testConflictingFindArguments(self):\n", "colour": "blue", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "115", "code": "        \"\"\"The 'text' argument takes precedence.\"\"\"\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "W", "line": "116", "code": "        soup = BeautifulSoup('Foo<b>Bar</b>Baz')\n", "colour": "purple", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "117", "code": "        self.assertEqual(soup.find('b', text='Baz'), 'Baz')\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "118", "code": "        self.assertEqual(soup.findAll('b', text='Baz'), ['Baz'])\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "119", "code": "\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "120", "code": "        self.assertEqual(soup.find(True, text='Baz'), 'Baz')\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "121", "code": "        self.assertEqual(soup.findAll(True, text='Baz'), ['Baz'])\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "122", "code": "\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "C", "line": "123", "code": "    def testParents(self):\n", "colour": "blue", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "W", "line": "124", "code": "        soup = BeautifulSoup('<ul id=\"foo\"></ul><ul id=\"foo\"><ul><ul id=\"foo\" a=\"b\"><b>Blah')\n", "colour": "purple", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "C", "line": "125", "code": "        b = soup.b\n", "colour": "blue", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "126", "code": "        self.assertEquals(len(b.findParents('ul', {'id' : 'foo'})), 2)\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "127", "code": "        self.assertEquals(b.findParent('ul')['a'], 'b')\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "128", "code": "\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "129", "code": "    PROXIMITY_TEST = BeautifulSoup('<b id=\"1\"><b id=\"2\"><b id=\"3\"><b id=\"4\">')\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "130", "code": "\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "C", "line": "131", "code": "    def testNext(self):\n", "colour": "blue", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "W", "line": "132", "code": "        soup = self.PROXIMITY_TEST\n", "colour": "purple", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "C", "line": "133", "code": "        b = soup.find('b', {'id' : 2})\n", "colour": "blue", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "134", "code": "        self.assertEquals(b.findNext('b')['id'], '3')\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "135", "code": "        self.assertEquals(b.findNext('b')['id'], '3')\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "136", "code": "        self.assertEquals(len(b.findAllNext('b')), 2)\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "137", "code": "        self.assertEquals(len(b.findAllNext('b', {'id' : 4})), 1)\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "138", "code": "\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "C", "line": "139", "code": "    def testPrevious(self):\n", "colour": "blue", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "W", "line": "140", "code": "        soup = self.PROXIMITY_TEST\n", "colour": "purple", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "C", "line": "141", "code": "        b = soup.find('b', {'id' : 3})\n", "colour": "blue", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "142", "code": "        self.assertEquals(b.findPrevious('b')['id'], '2')\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "143", "code": "        self.assertEquals(b.findPrevious('b')['id'], '2')\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "144", "code": "        self.assertEquals(len(b.findAllPrevious('b')), 2)\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "145", "code": "        self.assertEquals(len(b.findAllPrevious('b', {'id' : 2})), 1)\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "146", "code": "\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "147", "code": "\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "C", "line": "148", "code": "    SIBLING_TEST = BeautifulSoup('<blockquote id=\"1\"><blockquote id=\"1.1\"></blockquote></blockquote><blockquote id=\"2\"><blockquote id=\"2.1\"></blockquote></blockquote><blockquote id=\"3\"><blockquote id=\"3.1\"></blockquote></blockquote><blockquote id=\"4\">')\n", "colour": "blue", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "149", "code": "\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "C", "line": "150", "code": "    def testNextSibling(self):\n", "colour": "blue", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "W", "line": "151", "code": "        soup = self.SIBLING_TEST\n", "colour": "purple", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "152", "code": "        tag = 'blockquote'\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "C", "line": "153", "code": "        b = soup.find(tag, {'id' : 2})\n", "colour": "blue", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "154", "code": "        self.assertEquals(b.findNext(tag)['id'], '2.1')\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "155", "code": "        self.assertEquals(b.findNextSibling(tag)['id'], '3')\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "156", "code": "        self.assertEquals(b.findNextSibling(tag)['id'], '3')\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "157", "code": "        self.assertEquals(len(b.findNextSiblings(tag)), 2)\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "158", "code": "        self.assertEquals(len(b.findNextSiblings(tag, {'id' : 4})), 1)\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "159", "code": "\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "C", "line": "160", "code": "    def testPreviousSibling(self):\n", "colour": "blue", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "W", "line": "161", "code": "        soup = self.SIBLING_TEST\n", "colour": "purple", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "162", "code": "        tag = 'blockquote'\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "C", "line": "163", "code": "        b = soup.find(tag, {'id' : 3})\n", "colour": "blue", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "164", "code": "        self.assertEquals(b.findPrevious(tag)['id'], '2.1')\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "165", "code": "        self.assertEquals(b.findPreviousSibling(tag)['id'], '2')\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "166", "code": "        self.assertEquals(b.findPreviousSibling(tag)['id'], '2')\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "167", "code": "        self.assertEquals(len(b.findPreviousSiblings(tag)), 2)\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "168", "code": "        self.assertEquals(len(b.findPreviousSiblings(tag, id=1)), 1)\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "169", "code": "\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "C", "line": "170", "code": "    def testTextNavigation(self):\n", "colour": "blue", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "W", "line": "171", "code": "        soup = BeautifulSoup('Foo<b>Bar</b><i id=\"1\"><b>Baz<br />Blee<hr id=\"1\"/></b></i>Blargh')\n", "colour": "purple", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "C", "line": "172", "code": "        baz = soup.find(text='Baz')\n", "colour": "blue", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "173", "code": "        self.assertEquals(baz.findParent(\"i\")['id'], '1')\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "174", "code": "        self.assertEquals(baz.findNext(text='Blee'), 'Blee')\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "175", "code": "        self.assertEquals(baz.findNextSibling(text='Blee'), 'Blee')\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "176", "code": "        self.assertEquals(baz.findNextSibling(text='Blargh'), None)\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "177", "code": "        self.assertEquals(baz.findNextSibling('hr')['id'], '1')\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "178", "code": "\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "R", "line": "179", "code": "class SiblingRivalry(SoupTest):\n", "colour": "green", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "180", "code": "    \"Tests the nextSibling and previousSibling navigation.\"\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "181", "code": "\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "C", "line": "182", "code": "    def testSiblings(self):\n", "colour": "blue", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "W", "line": "183", "code": "        soup = BeautifulSoup(\"<ul><li>1<p>A</p>B<li>2<li>3</ul>\")\n", "colour": "purple", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "C", "line": "184", "code": "        secondLI = soup.find('li').nextSibling\n", "colour": "blue", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "185", "code": "        self.assert_(secondLI.name == 'li' and secondLI.string == '2')\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "186", "code": "        self.assertEquals(soup.find(text='1').nextSibling.name, 'p')\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "187", "code": "        self.assertEquals(soup.find('p').nextSibling, 'B')\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "C", "line": "188", "code": "        self.assertEquals(soup.find('p').nextSibling.previousSibling.nextSibling, 'B')\n", "colour": "blue", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "189", "code": "\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "R", "line": "190", "code": "class TagsAreObjectsToo(SoupTest):\n", "colour": "green", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "191", "code": "    \"Tests the various built-in functions of Tag objects.\"\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "192", "code": "\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "C", "line": "193", "code": "    def testLen(self):\n", "colour": "blue", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "W", "line": "194", "code": "        soup = BeautifulSoup(\"<top>1<b>2</b>3</top>\")\n", "colour": "purple", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "195", "code": "        self.assertEquals(len(soup.top), 3)\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "196", "code": "\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "R", "line": "197", "code": "class StringEmUp(SoupTest):\n", "colour": "green", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "198", "code": "    \"Tests the use of 'string' as an alias for a tag's only content.\"\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "199", "code": "\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "C", "line": "200", "code": "    def testString(self):\n", "colour": "blue", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "C", "line": "201", "code": "        s = BeautifulSoup(\"<b>foo</b>\")\n", "colour": "blue", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "202", "code": "        self.assertEquals(s.b.string, 'foo')\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "203", "code": "\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "C", "line": "204", "code": "    def testLackOfString(self):\n", "colour": "blue", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "C", "line": "205", "code": "        s = BeautifulSoup(\"<b>f<i>e</i>o</b>\")\n", "colour": "blue", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "206", "code": "        self.assert_(not s.b.string)\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "207", "code": "\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "C", "line": "208", "code": "    def testStringAssign(self):\n", "colour": "blue", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "C", "line": "209", "code": "        s = BeautifulSoup(\"<b></b>\")\n", "colour": "blue", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "C", "line": "210", "code": "        b = s.b\n", "colour": "blue", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "211", "code": "        b.string = \"foo\"\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "212", "code": "        string = b.string\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "213", "code": "        self.assertEquals(string, \"foo\")\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "214", "code": "        self.assert_(isinstance(string, NavigableString))\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "215", "code": "\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "R", "line": "216", "code": "class AllText(SoupTest):\n", "colour": "green", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "217", "code": "    \"Tests the use of 'text' to get all of string content from the tag.\"\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "218", "code": "\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "C", "line": "219", "code": "    def testText(self):\n", "colour": "blue", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "W", "line": "220", "code": "        soup = BeautifulSoup(\"<ul><li>spam</li><li>eggs</li><li>cheese</li>\")\n", "colour": "purple", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "221", "code": "        self.assertEquals(soup.ul.text, \"spameggscheese\")\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "222", "code": "        self.assertEquals(soup.ul.getText('/'), \"spam/eggs/cheese\")\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "223", "code": "\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "R", "line": "224", "code": "class ThatsMyLimit(SoupTest):\n", "colour": "green", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "225", "code": "    \"Tests the limit argument.\"\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "226", "code": "\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "C", "line": "227", "code": "    def testBasicLimits(self):\n", "colour": "blue", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "C", "line": "228", "code": "        s = BeautifulSoup('<br id=\"1\" /><br id=\"1\" /><br id=\"1\" /><br id=\"1\" />')\n", "colour": "blue", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "229", "code": "        self.assertEquals(len(s.findAll('br')), 4)\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "230", "code": "        self.assertEquals(len(s.findAll('br', limit=2)), 2)\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "231", "code": "        self.assertEquals(len(s('br', limit=2)), 2)\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "232", "code": "\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "R", "line": "233", "code": "class OnlyTheLonely(SoupTest):\n", "colour": "green", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "234", "code": "    \"Tests the parseOnly argument to the constructor.\"\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "235", "code": "    def setUp(self):\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "C", "line": "236", "code": "        x = []\n", "colour": "blue", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "C", "line": "237", "code": "        for i in range(1,6):\n", "colour": "blue", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "238", "code": "            x.append('<a id=\"%s\">' % i)\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "C", "line": "239", "code": "            for j in range(100,103):\n", "colour": "blue", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "C", "line": "240", "code": "                x.append('<b id=\"%s.%s\">Content %s.%s</b>' % (i,j, i,j))\n", "colour": "blue", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "241", "code": "            x.append('</a>')\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "C", "line": "242", "code": "        self.x = ''.join(x)\n", "colour": "blue", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "243", "code": "\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "C", "line": "244", "code": "    def testOnly(self):\n", "colour": "blue", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "245", "code": "        strainer = SoupStrainer(\"b\")\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "W", "line": "246", "code": "        soup = BeautifulSoup(self.x, parseOnlyThese=strainer)\n", "colour": "purple", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "247", "code": "        self.assertEquals(len(soup), 15)\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "248", "code": "\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "249", "code": "        strainer = SoupStrainer(id=re.compile(\"100.*\"))\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "250", "code": "        soup = BeautifulSoup(self.x, parseOnlyThese=strainer)\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "251", "code": "        self.assertEquals(len(soup), 5)\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "252", "code": "\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "253", "code": "        strainer = SoupStrainer(text=re.compile(\"10[01].*\"))\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "254", "code": "        soup = BeautifulSoup(self.x, parseOnlyThese=strainer)\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "255", "code": "        self.assertEquals(len(soup), 10)\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "256", "code": "\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "C", "line": "257", "code": "        strainer = SoupStrainer(text=lambda(x):x[8]=='3')\n", "colour": "blue", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "258", "code": "        soup = BeautifulSoup(self.x, parseOnlyThese=strainer)\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "259", "code": "        self.assertEquals(len(soup), 3)\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "260", "code": "\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "R", "line": "261", "code": "class PickleMeThis(SoupTest):\n", "colour": "green", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "262", "code": "    \"Testing features like pickle and deepcopy.\"\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "263", "code": "\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "264", "code": "    def setUp(self):\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "C", "line": "265", "code": "        self.page = \"\"\"<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.0 Transitional//EN\"\n", "colour": "blue", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "266", "code": "\"http://www.w3.org/TR/REC-html40/transitional.dtd\">\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "267", "code": "<html>\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "268", "code": "<head>\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "269", "code": "<meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\">\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "270", "code": "<title>Beautiful Soup: We called him Tortoise because he taught us.</title>\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "271", "code": "<link rev=\"made\" href=\"mailto:leonardr@segfault.org\">\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "272", "code": "<meta name=\"Description\" content=\"Beautiful Soup: an HTML parser optimized for screen-scraping.\">\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "273", "code": "<meta name=\"generator\" content=\"Markov Approximation 1.4 (module: leonardr)\">\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "274", "code": "<meta name=\"author\" content=\"Leonard Richardson\">\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "275", "code": "</head>\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "276", "code": "<body>\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "277", "code": "<a href=\"foo\">foo</a>\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "278", "code": "<a href=\"foo\"><b>bar</b></a>\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "279", "code": "</body>\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "280", "code": "</html>\"\"\"\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "281", "code": "\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "282", "code": "        self.soup = BeautifulSoup(self.page)\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "283", "code": "\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "C", "line": "284", "code": "    def testPickle(self):\n", "colour": "blue", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "285", "code": "        import pickle\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "286", "code": "        dumped = pickle.dumps(self.soup, 2)\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "287", "code": "        loaded = pickle.loads(dumped)\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "288", "code": "        self.assertEqual(loaded.__class__, BeautifulSoup)\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "289", "code": "        self.assertEqual(str(loaded), str(self.soup))\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "290", "code": "\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "C", "line": "291", "code": "    def testDeepcopy(self):\n", "colour": "blue", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "292", "code": "        from copy import deepcopy\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "293", "code": "        copied = deepcopy(self.soup)\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "294", "code": "        self.assertEqual(str(copied), str(self.soup))\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "295", "code": "\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "C", "line": "296", "code": "    def testUnicodePickle(self):\n", "colour": "blue", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "297", "code": "        import cPickle as pickle\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "298", "code": "        html = \"<b>\" + chr(0xc3) + \"</b>\"\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "W", "line": "299", "code": "        soup = BeautifulSoup(html)\n", "colour": "purple", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "300", "code": "        dumped = pickle.dumps(soup, pickle.HIGHEST_PROTOCOL)\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "301", "code": "        loaded = pickle.loads(dumped)\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "302", "code": "        self.assertEqual(str(loaded), str(soup))\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "303", "code": "\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "304", "code": "\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "R", "line": "305", "code": "class WriteOnlyCode(SoupTest):\n", "colour": "green", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "306", "code": "    \"Testing the modification of the tree.\"\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "307", "code": "\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "C", "line": "308", "code": "    def testModifyAttributes(self):\n", "colour": "blue", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "W", "line": "309", "code": "        soup = BeautifulSoup('<a id=\"1\"></a>')\n", "colour": "purple", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "310", "code": "        soup.a['id'] = 2\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "311", "code": "        self.assertEqual(soup.renderContents(), '<a id=\"2\"></a>')\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "C", "line": "312", "code": "        del(soup.a['id'])\n", "colour": "blue", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "313", "code": "        self.assertEqual(soup.renderContents(), '<a></a>')\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "314", "code": "        soup.a['id2'] = 'foo'\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "315", "code": "        self.assertEqual(soup.renderContents(), '<a id2=\"foo\"></a>')\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "316", "code": "\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "C", "line": "317", "code": "    def testNewTagCreation(self):\n", "colour": "blue", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "318", "code": "        \"Makes sure tags don't step on each others' toes.\"\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "W", "line": "319", "code": "        soup = BeautifulSoup()\n", "colour": "purple", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "C", "line": "320", "code": "        a = Tag(soup, 'a')\n", "colour": "blue", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "C", "line": "321", "code": "        ol = Tag(soup, 'ol')\n", "colour": "blue", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "322", "code": "        a['href'] = 'http://foo.com/'\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "C", "line": "323", "code": "        self.assertRaises(KeyError, lambda : ol['href'])\n", "colour": "blue", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "324", "code": "\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "C", "line": "325", "code": "    def testNewTagWithAttributes(self):\n", "colour": "blue", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "326", "code": "        \"\"\"Makes sure new tags can be created complete with attributes.\"\"\"\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "W", "line": "327", "code": "        soup = BeautifulSoup()\n", "colour": "purple", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "C", "line": "328", "code": "        a = Tag(soup, 'a', [('href', 'foo')])\n", "colour": "blue", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "C", "line": "329", "code": "        b = Tag(soup, 'b', {'class':'bar'})\n", "colour": "blue", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "C", "line": "330", "code": "        soup.insert(0,a)\n", "colour": "blue", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "C", "line": "331", "code": "        soup.insert(1,b)\n", "colour": "blue", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "332", "code": "        self.assertEqual(soup.a['href'], 'foo')\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "333", "code": "        self.assertEqual(soup.b['class'], 'bar')\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "334", "code": "\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "R", "line": "335", "code": "    def testTagReplacement(self):\n", "colour": "green", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "336", "code": "        # Make sure you can replace an element with itself.\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "337", "code": "        text = \"<a><b></b><c>Foo<d></d></c></a><a><e></e></a>\"\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "W", "line": "338", "code": "        soup = BeautifulSoup(text)\n", "colour": "purple", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "C", "line": "339", "code": "        c = soup.c\n", "colour": "blue", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "340", "code": "        soup.c.replaceWith(c)\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "341", "code": "        self.assertEquals(str(soup), text)\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "342", "code": "\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "343", "code": "        # A very simple case\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "344", "code": "        soup = BeautifulSoup(\"<b>Argh!</b>\")\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "345", "code": "        soup.find(text=\"Argh!\").replaceWith(\"Hooray!\")\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "C", "line": "346", "code": "        newText = soup.find(text=\"Hooray!\")\n", "colour": "blue", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "C", "line": "347", "code": "        b = soup.b\n", "colour": "blue", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "348", "code": "        self.assertEqual(newText.previous, b)\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "349", "code": "        self.assertEqual(newText.parent, b)\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "350", "code": "        self.assertEqual(newText.previous.next, newText)\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "351", "code": "        self.assertEqual(newText.next, None)\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "352", "code": "\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "353", "code": "        # A more complex case\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "354", "code": "        soup = BeautifulSoup(\"<a><b>Argh!</b><c></c><d></d></a>\")\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "355", "code": "        soup.b.insert(1, \"Hooray!\")\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "C", "line": "356", "code": "        newText = soup.find(text=\"Hooray!\")\n", "colour": "blue", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "357", "code": "        self.assertEqual(newText.previous, \"Argh!\")\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "358", "code": "        self.assertEqual(newText.previous.next, newText)\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "359", "code": "\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "360", "code": "        self.assertEqual(newText.previousSibling, \"Argh!\")\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "361", "code": "        self.assertEqual(newText.previousSibling.nextSibling, newText)\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "362", "code": "\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "363", "code": "        self.assertEqual(newText.nextSibling, None)\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "364", "code": "        self.assertEqual(newText.next, soup.c)\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "365", "code": "\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "C", "line": "366", "code": "        text = \"<html>There's <b>no</b> business like <b>show</b> business</html>\"\n", "colour": "blue", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "367", "code": "        soup = BeautifulSoup(text)\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "C", "line": "368", "code": "        no, show = soup.findAll('b')\n", "colour": "blue", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "369", "code": "        show.replaceWith(no)\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "C", "line": "370", "code": "        self.assertEquals(str(soup), \"<html>There's  business like <b>no</b> business</html>\")\n", "colour": "blue", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "371", "code": "\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "372", "code": "        # Even more complex\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "373", "code": "        soup = BeautifulSoup(\"<a><b>Find</b><c>lady!</c><d></d></a>\")\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "374", "code": "        tag = Tag(soup, 'magictag')\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "375", "code": "        tag.insert(0, \"the\")\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "376", "code": "        soup.a.insert(1, tag)\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "377", "code": "\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "C", "line": "378", "code": "        b = soup.b\n", "colour": "blue", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "C", "line": "379", "code": "        c = soup.c\n", "colour": "blue", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "C", "line": "380", "code": "        theText = tag.find(text=True)\n", "colour": "blue", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "C", "line": "381", "code": "        findText = b.find(text=\"Find\")\n", "colour": "blue", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "382", "code": "\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "383", "code": "        self.assertEqual(findText.next, tag)\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "384", "code": "        self.assertEqual(tag.previous, findText)\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "385", "code": "        self.assertEqual(b.nextSibling, tag)\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "386", "code": "        self.assertEqual(tag.previousSibling, b)\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "387", "code": "        self.assertEqual(tag.nextSibling, c)\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "388", "code": "        self.assertEqual(c.previousSibling, tag)\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "389", "code": "\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "390", "code": "        self.assertEqual(theText.next, c)\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "391", "code": "        self.assertEqual(c.previous, theText)\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "392", "code": "\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "393", "code": "        # Aand... incredibly complex.\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "C", "line": "394", "code": "        soup = BeautifulSoup(\"\"\"<a>We<b>reserve<c>the</c><d>right</d></b></a><e>to<f>refuse</f><g>service</g></e>\"\"\")\n", "colour": "blue", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "C", "line": "395", "code": "        f = soup.f\n", "colour": "blue", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "C", "line": "396", "code": "        a = soup.a\n", "colour": "blue", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "C", "line": "397", "code": "        c = soup.c\n", "colour": "blue", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "W", "line": "398", "code": "        e = soup.e\n", "colour": "purple", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "C", "line": "399", "code": "        weText = a.find(text=\"We\")\n", "colour": "blue", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "400", "code": "        soup.b.replaceWith(soup.f)\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "C", "line": "401", "code": "        self.assertEqual(str(soup), \"<a>We<f>refuse</f></a><e>to<g>service</g></e>\")\n", "colour": "blue", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "402", "code": "\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "403", "code": "        self.assertEqual(f.previous, weText)\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "404", "code": "        self.assertEqual(weText.next, f)\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "405", "code": "        self.assertEqual(f.previousSibling, weText)\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "406", "code": "        self.assertEqual(f.nextSibling, None)\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "407", "code": "        self.assertEqual(weText.nextSibling, f)\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "408", "code": "\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "C", "line": "409", "code": "    def testReplaceWithChildren(self):\n", "colour": "blue", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "W", "line": "410", "code": "        soup = BeautifulStoneSoup(\n", "colour": "purple", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "411", "code": "            \"<top><replace><child1/><child2/></replace></top>\",\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "412", "code": "            selfClosingTags=[\"child1\", \"child2\"])\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "413", "code": "        soup.replaceTag.replaceWithChildren()\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "414", "code": "        self.assertEqual(soup.top.contents[0].name, \"child1\")\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "415", "code": "        self.assertEqual(soup.top.contents[1].name, \"child2\")\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "416", "code": "\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "C", "line": "417", "code": "    def testAppend(self):\n", "colour": "blue", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "W", "line": "418", "code": "       doc = \"<p>Don't leave me <b>here</b>.</p> <p>Don't leave me.</p>\"\n", "colour": "purple", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "W", "line": "419", "code": "       soup = BeautifulSoup(doc)\n", "colour": "purple", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "W", "line": "420", "code": "       second_para = soup('p')[1]\n", "colour": "purple", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "W", "line": "421", "code": "       bold = soup.find('b')\n", "colour": "purple", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "W", "line": "422", "code": "       soup('p')[1].append(soup.find('b'))\n", "colour": "purple", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "W", "line": "423", "code": "       self.assertEqual(bold.parent, second_para)\n", "colour": "purple", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "W", "line": "424", "code": "       self.assertEqual(str(soup),\n", "colour": "purple", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "425", "code": "                        \"<p>Don't leave me .</p> \"\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "426", "code": "                        \"<p>Don't leave me.<b>here</b></p>\")\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "427", "code": "\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "C", "line": "428", "code": "    def testTagExtraction(self):\n", "colour": "blue", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "429", "code": "        # A very simple case\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "430", "code": "        text = '<html><div id=\"nav\">Nav crap</div>Real content here.</html>'\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "W", "line": "431", "code": "        soup = BeautifulSoup(text)\n", "colour": "purple", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "432", "code": "        extracted = soup.find(\"div\", id=\"nav\").extract()\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "433", "code": "        self.assertEqual(str(soup), \"<html>Real content here.</html>\")\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "434", "code": "        self.assertEqual(str(extracted), '<div id=\"nav\">Nav crap</div>')\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "435", "code": "\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "436", "code": "        # A simple case, a more complex test.\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "437", "code": "        text = \"<doc><a>1<b>2</b></a><a>i<b>ii</b></a><a>A<b>B</b></a></doc>\"\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "438", "code": "        soup = BeautifulStoneSoup(text)\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "439", "code": "        doc = soup.doc\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "440", "code": "        numbers, roman, letters = soup(\"a\")\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "441", "code": "\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "442", "code": "        self.assertEqual(roman.parent, doc)\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "C", "line": "443", "code": "        oldPrevious = roman.previous\n", "colour": "blue", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "C", "line": "444", "code": "        endOfThisTag = roman.nextSibling.previous\n", "colour": "blue", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "445", "code": "        self.assertEqual(oldPrevious, \"2\")\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "446", "code": "        self.assertEqual(roman.next, \"i\")\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "447", "code": "        self.assertEqual(endOfThisTag, \"ii\")\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "448", "code": "        self.assertEqual(roman.previousSibling, numbers)\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "449", "code": "        self.assertEqual(roman.nextSibling, letters)\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "450", "code": "\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "451", "code": "        roman.extract()\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "452", "code": "        self.assertEqual(roman.parent, None)\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "453", "code": "        self.assertEqual(roman.previous, None)\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "454", "code": "        self.assertEqual(roman.next, \"i\")\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "455", "code": "        self.assertEqual(letters.previous, '2')\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "456", "code": "        self.assertEqual(roman.previousSibling, None)\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "457", "code": "        self.assertEqual(roman.nextSibling, None)\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "458", "code": "        self.assertEqual(endOfThisTag.next, None)\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "459", "code": "        self.assertEqual(roman.b.contents[0].next, None)\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "460", "code": "        self.assertEqual(numbers.nextSibling, letters)\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "461", "code": "        self.assertEqual(letters.previousSibling, numbers)\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "462", "code": "        self.assertEqual(len(doc.contents), 2)\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "463", "code": "        self.assertEqual(doc.contents[0], numbers)\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "464", "code": "        self.assertEqual(doc.contents[1], letters)\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "465", "code": "\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "466", "code": "        # A more complex case.\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "467", "code": "        text = \"<a>1<b>2<c>Hollywood, baby!</c></b></a>3\"\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "468", "code": "        soup = BeautifulStoneSoup(text)\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "469", "code": "        one = soup.find(text=\"1\")\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "470", "code": "        three = soup.find(text=\"3\")\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "W", "line": "471", "code": "        toExtract = soup.b\n", "colour": "purple", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "472", "code": "        soup.b.extract()\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "473", "code": "        self.assertEqual(one.next, three)\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "474", "code": "        self.assertEqual(three.previous, one)\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "475", "code": "        self.assertEqual(one.parent.nextSibling, three)\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "476", "code": "        self.assertEqual(three.previousSibling, soup.a)\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "C", "line": "477", "code": "        \n", "colour": "blue", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "C", "line": "478", "code": "    def testClear(self):\n", "colour": "blue", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "W", "line": "479", "code": "        soup = BeautifulSoup(\"<ul><li></li><li></li></ul>\")\n", "colour": "purple", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "480", "code": "        soup.ul.clear()\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "481", "code": "        self.assertEqual(len(soup.ul.contents), 0)\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "482", "code": "\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "R", "line": "483", "code": "class TheManWithoutAttributes(SoupTest):\n", "colour": "green", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "484", "code": "    \"Test attribute access\"\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "485", "code": "\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "C", "line": "486", "code": "    def testHasKey(self):\n", "colour": "blue", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "487", "code": "        text = \"<foo attr='bar'>\"\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "488", "code": "        self.assertEquals(BeautifulSoup(text).foo.has_key('attr'), True)\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "489", "code": "\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "R", "line": "490", "code": "class QuoteMeOnThat(SoupTest):\n", "colour": "green", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "491", "code": "    \"Test quoting\"\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "C", "line": "492", "code": "    def testQuotedAttributeValues(self):\n", "colour": "blue", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "493", "code": "        self.assertSoupEquals(\"<foo attr='bar'></foo>\",\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "494", "code": "                              '<foo attr=\"bar\"></foo>')\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "495", "code": "\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "496", "code": "        text = \"\"\"<foo attr='bar \"brawls\" happen'>a</foo>\"\"\"\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "W", "line": "497", "code": "        soup = BeautifulSoup(text)\n", "colour": "purple", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "498", "code": "        self.assertEquals(soup.renderContents(), text)\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "499", "code": "\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "500", "code": "        soup.foo['attr'] = 'Brawls happen at \"Bob\\'s Bar\"'\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "C", "line": "501", "code": "        newText = \"\"\"<foo attr='Brawls happen at \"Bob&squot;s Bar\"'>a</foo>\"\"\"\n", "colour": "blue", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "502", "code": "        self.assertSoupEquals(soup.renderContents(), newText)\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "503", "code": "\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "504", "code": "        self.assertSoupEquals('<this is=\"really messed up & stuff\">',\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "505", "code": "                              '<this is=\"really messed up &amp; stuff\"></this>')\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "506", "code": "\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "507", "code": "        # This is not what the original author had in mind, but it's\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "508", "code": "        # a legitimate interpretation of what they wrote.\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "509", "code": "        self.assertSoupEquals(\"\"\"<a href=\"foo</a>, </a><a href=\"bar\">baz</a>\"\"\",\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "C", "line": "510", "code": "        '<a href=\"foo&lt;/a&gt;, &lt;/a&gt;&lt;a href=\"></a>, <a href=\"bar\">baz</a>')\n", "colour": "blue", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "511", "code": "\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "512", "code": "        # SGMLParser generates bogus parse events when attribute values\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "513", "code": "        # contain embedded brackets, but at least Beautiful Soup fixes\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "514", "code": "        # it up a little.\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "C", "line": "515", "code": "        self.assertSoupEquals('<a b=\"<a>\">', '<a b=\"&lt;a&gt;\"></a><a>\"&gt;</a>')\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "516", "code": "        self.assertSoupEquals('<a href=\"http://foo.com/<a> and blah and blah',\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "C", "line": "517", "code": "                              \"\"\"<a href='\"http://foo.com/'></a><a> and blah and blah</a>\"\"\")\n", "colour": "blue", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "518", "code": "\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "519", "code": "\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "520", "code": "\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "R", "line": "521", "code": "class YoureSoLiteral(SoupTest):\n", "colour": "green", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "522", "code": "    \"Test literal mode.\"\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "C", "line": "523", "code": "    def testLiteralMode(self):\n", "colour": "blue", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "524", "code": "        text = \"<script>if (i<imgs.length)</script><b>Foo</b>\"\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "W", "line": "525", "code": "        soup = BeautifulSoup(text)\n", "colour": "purple", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "526", "code": "        self.assertEqual(soup.script.contents[0], \"if (i<imgs.length)\")\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "527", "code": "        self.assertEqual(soup.b.contents[0], \"Foo\")\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "528", "code": "\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "C", "line": "529", "code": "    def testTextArea(self):\n", "colour": "blue", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "C", "line": "530", "code": "        text = \"<textarea><b>This is an example of an HTML tag</b><&<&</textarea>\"\n", "colour": "blue", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "W", "line": "531", "code": "        soup = BeautifulSoup(text)\n", "colour": "purple", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "532", "code": "        self.assertEqual(soup.textarea.contents[0],\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "533", "code": "                         \"<b>This is an example of an HTML tag</b><&<&\")\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "534", "code": "\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "R", "line": "535", "code": "class OperatorOverload(SoupTest):\n", "colour": "green", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "536", "code": "    \"Our operators do it all! Call now!\"\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "537", "code": "\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "C", "line": "538", "code": "    def testTagNameAsFind(self):\n", "colour": "blue", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "539", "code": "        \"Tests that referencing a tag name as a member delegates to find().\"\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "W", "line": "540", "code": "        soup = BeautifulSoup('<b id=\"1\">foo<i>bar</i></b><b>Red herring</b>')\n", "colour": "purple", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "541", "code": "        self.assertEqual(soup.b.i, soup.find('b').find('i'))\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "542", "code": "        self.assertEqual(soup.b.i.string, 'bar')\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "543", "code": "        self.assertEqual(soup.b['id'], '1')\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "544", "code": "        self.assertEqual(soup.b.contents[0], 'foo')\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "545", "code": "        self.assert_(not soup.a)\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "546", "code": "\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "547", "code": "        #Test the .fooTag variant of .foo.\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "548", "code": "        self.assertEqual(soup.bTag.iTag.string, 'bar')\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "549", "code": "        self.assertEqual(soup.b.iTag.string, 'bar')\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "550", "code": "        self.assertEqual(soup.find('b').find('i'), soup.bTag.iTag)\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "551", "code": "\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "R", "line": "552", "code": "class NestableEgg(SoupTest):\n", "colour": "green", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "553", "code": "    \"\"\"Here we test tag nesting. TEST THE NEST, DUDE! X-TREME!\"\"\"\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "554", "code": "\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "C", "line": "555", "code": "    def testParaInsideBlockquote(self):\n", "colour": "blue", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "W", "line": "556", "code": "        soup = BeautifulSoup('<blockquote><p><b>Foo</blockquote><p>Bar')\n", "colour": "purple", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "557", "code": "        self.assertEqual(soup.blockquote.p.b.string, 'Foo')\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "558", "code": "        self.assertEqual(soup.blockquote.b.string, 'Foo')\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "559", "code": "        self.assertEqual(soup.find('p', recursive=False).string, 'Bar')\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "560", "code": "\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "C", "line": "561", "code": "    def testNestedTables(self):\n", "colour": "blue", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "562", "code": "        text = \"\"\"<table id=\"1\"><tr><td>Here's another table:\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "563", "code": "        <table id=\"2\"><tr><td>Juicy text</td></tr></table></td></tr></table>\"\"\"\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "W", "line": "564", "code": "        soup = BeautifulSoup(text)\n", "colour": "purple", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "565", "code": "        self.assertEquals(soup.table.table.td.string, 'Juicy text')\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "566", "code": "        self.assertEquals(len(soup.findAll('table')), 2)\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "567", "code": "        self.assertEquals(len(soup.table.findAll('table')), 1)\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "C", "line": "568", "code": "        self.assertEquals(soup.find('table', {'id' : 2}).parent.parent.parent.name,\n", "colour": "blue", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "569", "code": "                          'table')\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "570", "code": "\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "571", "code": "        text = \"<table><tr><td><div><table>Foo</table></div></td></tr></table>\"\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "572", "code": "        soup = BeautifulSoup(text)\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "573", "code": "        self.assertEquals(soup.table.tr.td.div.table.contents[0], \"Foo\")\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "574", "code": "\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "575", "code": "        text = \"\"\"<table><thead><tr>Foo</tr></thead><tbody><tr>Bar</tr></tbody>\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "576", "code": "        <tfoot><tr>Baz</tr></tfoot></table>\"\"\"\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "577", "code": "        soup = BeautifulSoup(text)\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "578", "code": "        self.assertEquals(soup.table.thead.tr.contents[0], \"Foo\")\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "579", "code": "\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "C", "line": "580", "code": "    def testBadNestedTables(self):\n", "colour": "blue", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "W", "line": "581", "code": "        soup = BeautifulSoup(\"<table><tr><table><tr id='nested'>\")\n", "colour": "purple", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "582", "code": "        self.assertEquals(soup.table.tr.table.tr['id'], 'nested')\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "583", "code": "\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "R", "line": "584", "code": "class CleanupOnAisleFour(SoupTest):\n", "colour": "green", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "585", "code": "    \"\"\"Here we test cleanup of text that breaks SGMLParser or is just\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "586", "code": "    obnoxious.\"\"\"\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "587", "code": "\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "C", "line": "588", "code": "    def testSelfClosingtag(self):\n", "colour": "blue", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "589", "code": "        self.assertEqual(str(BeautifulSoup(\"Foo<br/>Bar\").find('br')),\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "590", "code": "                         '<br />')\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "591", "code": "\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "592", "code": "        self.assertSoupEquals('<p>test1<br/>test2</p>',\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "593", "code": "                              '<p>test1<br />test2</p>')\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "594", "code": "\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "595", "code": "        text = '<p>test1<selfclosing>test2'\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "W", "line": "596", "code": "        soup = BeautifulStoneSoup(text)\n", "colour": "purple", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "597", "code": "        self.assertEqual(str(soup),\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "598", "code": "                         '<p>test1<selfclosing>test2</selfclosing></p>')\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "599", "code": "\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "600", "code": "        soup = BeautifulStoneSoup(text, selfClosingTags='selfclosing')\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "601", "code": "        self.assertEqual(str(soup),\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "602", "code": "                         '<p>test1<selfclosing />test2</p>')\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "603", "code": "\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "C", "line": "604", "code": "    def testSelfClosingTagOrNot(self):\n", "colour": "blue", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "605", "code": "        text = \"<item><link>http://foo.com/</link></item>\"\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "606", "code": "        self.assertEqual(BeautifulStoneSoup(text).renderContents(), text)\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "607", "code": "        self.assertEqual(BeautifulSoup(text).renderContents(),\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "608", "code": "                         '<item><link />http://foo.com/</item>')\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "609", "code": "\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "C", "line": "610", "code": "    def testCData(self):\n", "colour": "blue", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "611", "code": "        xml = \"<root>foo<![CDATA[foobar]]>bar</root>\"\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "612", "code": "        self.assertSoupEquals(xml, xml)\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "C", "line": "613", "code": "        r = re.compile(\"foo.*bar\")\n", "colour": "blue", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "W", "line": "614", "code": "        soup = BeautifulSoup(xml)\n", "colour": "purple", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "615", "code": "        self.assertEquals(soup.find(text=r).string, \"foobar\")\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "616", "code": "        self.assertEquals(soup.find(text=r).__class__, CData)\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "617", "code": "\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "C", "line": "618", "code": "    def testComments(self):\n", "colour": "blue", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "619", "code": "        xml = \"foo<!--foobar-->baz\"\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "620", "code": "        self.assertSoupEquals(xml)\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "C", "line": "621", "code": "        r = re.compile(\"foo.*bar\")\n", "colour": "blue", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "W", "line": "622", "code": "        soup = BeautifulSoup(xml)\n", "colour": "purple", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "623", "code": "        self.assertEquals(soup.find(text=r).string, \"foobar\")\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "624", "code": "        self.assertEquals(soup.find(text=\"foobar\").__class__, Comment)\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "625", "code": "\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "C", "line": "626", "code": "    def testDeclaration(self):\n", "colour": "blue", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "627", "code": "        xml = \"foo<!DOCTYPE foobar>baz\"\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "628", "code": "        self.assertSoupEquals(xml)\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "C", "line": "629", "code": "        r = re.compile(\".*foo.*bar\")\n", "colour": "blue", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "W", "line": "630", "code": "        soup = BeautifulSoup(xml)\n", "colour": "purple", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "631", "code": "        text = \"DOCTYPE foobar\"\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "632", "code": "        self.assertEquals(soup.find(text=r).string, text)\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "633", "code": "        self.assertEquals(soup.find(text=text).__class__, Declaration)\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "634", "code": "\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "635", "code": "        namespaced_doctype = ('<!DOCTYPE xsl:stylesheet SYSTEM \"htmlent.dtd\">'\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "636", "code": "                              '<html>foo</html>')\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "637", "code": "        soup = BeautifulSoup(namespaced_doctype)\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "638", "code": "        self.assertEquals(soup.contents[0],\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "639", "code": "                          'DOCTYPE xsl:stylesheet SYSTEM \"htmlent.dtd\"')\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "640", "code": "        self.assertEquals(soup.html.contents[0], 'foo')\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "641", "code": "\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "C", "line": "642", "code": "    def testEntityConversions(self):\n", "colour": "blue", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "643", "code": "        text = \"&lt;&lt;sacr&eacute;&#32;bleu!&gt;&gt;\"\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "W", "line": "644", "code": "        soup = BeautifulStoneSoup(text)\n", "colour": "purple", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "645", "code": "        self.assertSoupEquals(text)\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "646", "code": "\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "C", "line": "647", "code": "        xmlEnt = BeautifulStoneSoup.XML_ENTITIES\n", "colour": "blue", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "C", "line": "648", "code": "        htmlEnt = BeautifulStoneSoup.HTML_ENTITIES\n", "colour": "blue", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "C", "line": "649", "code": "        xhtmlEnt = BeautifulStoneSoup.XHTML_ENTITIES\n", "colour": "blue", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "650", "code": "\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "651", "code": "        soup = BeautifulStoneSoup(text, convertEntities=xmlEnt)\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "652", "code": "        self.assertEquals(str(soup), \"&lt;&lt;sacr&eacute; bleu!&gt;&gt;\")\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "653", "code": "\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "654", "code": "        soup = BeautifulStoneSoup(text, convertEntities=htmlEnt)\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "655", "code": "        self.assertEquals(unicode(soup), u\"&lt;&lt;sacr\\xe9 bleu!&gt;&gt;\")\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "656", "code": "\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "657", "code": "        # Make sure the \"XML\", \"HTML\", and \"XHTML\" settings work.\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "658", "code": "        text = \"&lt;&trade;&apos;\"\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "659", "code": "        soup = BeautifulStoneSoup(text, convertEntities=xmlEnt)\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "660", "code": "        self.assertEquals(unicode(soup), u\"&lt;&trade;'\")\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "661", "code": "\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "662", "code": "        soup = BeautifulStoneSoup(text, convertEntities=htmlEnt)\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "663", "code": "        self.assertEquals(unicode(soup), u\"&lt;\\u2122&apos;\")\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "664", "code": "\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "665", "code": "        soup = BeautifulStoneSoup(text, convertEntities=xhtmlEnt)\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "666", "code": "        self.assertEquals(unicode(soup), u\"&lt;\\u2122'\")\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "667", "code": "\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "C", "line": "668", "code": "        invalidEntity = \"foo&#bar;baz\"\n", "colour": "blue", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "669", "code": "        soup = BeautifulStoneSoup\\\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "670", "code": "               (invalidEntity,\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "671", "code": "                convertEntities=htmlEnt)\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "672", "code": "        self.assertEquals(str(soup), \"foo&amp;#bar;baz\")\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "673", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "674", "code": "        nonexistentEntity = \"foo&bar;baz\"\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "675", "code": "        soup = BeautifulStoneSoup\\\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "676", "code": "               (nonexistentEntity,\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "677", "code": "                convertEntities=\"xml\")\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "678", "code": "        self.assertEquals(str(soup), nonexistentEntity)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "679", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "680", "code": "\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "C", "line": "681", "code": "    def testNonBreakingSpaces(self):\n", "colour": "blue", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "W", "line": "682", "code": "        soup = BeautifulSoup(\"<a>&nbsp;&nbsp;</a>\",\n", "colour": "purple", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "683", "code": "                             convertEntities=BeautifulStoneSoup.HTML_ENTITIES)\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "684", "code": "        self.assertEquals(unicode(soup), u\"<a>\\xa0\\xa0</a>\")\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "685", "code": "\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "C", "line": "686", "code": "    def testWhitespaceInDeclaration(self):\n", "colour": "blue", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "687", "code": "        self.assertSoupEquals('<! DOCTYPE>', '<!DOCTYPE>')\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "688", "code": "\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "C", "line": "689", "code": "    def testJunkInDeclaration(self):\n", "colour": "blue", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "690", "code": "        self.assertSoupEquals('<! Foo = -8>a', '&lt;!Foo = -8&gt;a')\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "691", "code": "\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "C", "line": "692", "code": "    def testIncompleteDeclaration(self):\n", "colour": "blue", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "693", "code": "        self.assertSoupEquals('a<!b <p>c', 'a&lt;!b &lt;p&gt;c')\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "694", "code": "\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "C", "line": "695", "code": "    def testEntityReplacement(self):\n", "colour": "blue", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "696", "code": "        self.assertSoupEquals('<b>hello&nbsp;there</b>')\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "697", "code": "\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "C", "line": "698", "code": "    def testEntitiesInAttributeValues(self):\n", "colour": "blue", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "699", "code": "        self.assertSoupEquals('<x t=\"x&#241;\">', '<x t=\"x\\xc3\\xb1\"></x>')\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "700", "code": "        self.assertSoupEquals('<x t=\"x&#xf1;\">', '<x t=\"x\\xc3\\xb1\"></x>')\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "701", "code": "\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "W", "line": "702", "code": "        soup = BeautifulSoup('<x t=\"&gt;&trade;\">',\n", "colour": "purple", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "703", "code": "                             convertEntities=BeautifulStoneSoup.HTML_ENTITIES)\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "704", "code": "        self.assertEquals(unicode(soup), u'<x t=\"&gt;\\u2122\"></x>')\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "705", "code": "\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "706", "code": "        uri = \"http://crummy.com?sacr&eacute;&amp;bleu\"\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "707", "code": "        link = '<a href=\"%s\"></a>' % uri\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "708", "code": "        soup = BeautifulSoup(link)\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "709", "code": "        self.assertEquals(unicode(soup), link)\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "710", "code": "        #self.assertEquals(unicode(soup.a['href']), uri)\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "711", "code": "\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "712", "code": "        soup = BeautifulSoup(link, convertEntities=BeautifulSoup.HTML_ENTITIES)\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "713", "code": "        self.assertEquals(unicode(soup),\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "714", "code": "                          link.replace(\"&eacute;\", u\"\\xe9\"))\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "715", "code": "\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "716", "code": "        uri = \"http://crummy.com?sacr&eacute;&bleu\"\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "717", "code": "        link = '<a href=\"%s\"></a>' % uri\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "718", "code": "        soup = BeautifulSoup(link, convertEntities=BeautifulSoup.HTML_ENTITIES)\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "719", "code": "        self.assertEquals(unicode(soup.a['href']),\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "720", "code": "                          uri.replace(\"&eacute;\", u\"\\xe9\"))\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "721", "code": "\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "C", "line": "722", "code": "    def testNakedAmpersands(self):\n", "colour": "blue", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "723", "code": "        html = {'convertEntities':BeautifulStoneSoup.HTML_ENTITIES}\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "W", "line": "724", "code": "        soup = BeautifulStoneSoup(\"AT&T \", **html)\n", "colour": "purple", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "725", "code": "        self.assertEquals(str(soup), 'AT&amp;T ')\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "726", "code": "\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "C", "line": "727", "code": "        nakedAmpersandInASentence = \"AT&T was Ma Bell\"\n", "colour": "blue", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "W", "line": "728", "code": "        soup = BeautifulStoneSoup(nakedAmpersandInASentence,**html)\n", "colour": "purple", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "729", "code": "        self.assertEquals(str(soup), \\\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "C", "line": "730", "code": "               nakedAmpersandInASentence.replace('&','&amp;'))\n", "colour": "blue", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "731", "code": "\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "C", "line": "732", "code": "        invalidURL = '<a href=\"http://example.org?a=1&b=2;3\">foo</a>'\n", "colour": "blue", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "C", "line": "733", "code": "        validURL = invalidURL.replace('&','&amp;')\n", "colour": "blue", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "734", "code": "        soup = BeautifulStoneSoup(invalidURL)\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "735", "code": "        self.assertEquals(str(soup), validURL)\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "736", "code": "\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "737", "code": "        soup = BeautifulStoneSoup(validURL)\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "738", "code": "        self.assertEquals(str(soup), validURL)\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "739", "code": "\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "740", "code": "\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "R", "line": "741", "code": "class EncodeRed(SoupTest):\n", "colour": "green", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "742", "code": "    \"\"\"Tests encoding conversion, Unicode conversion, and Microsoft\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "743", "code": "    smart quote fixes.\"\"\"\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "744", "code": "\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "C", "line": "745", "code": "    def testUnicodeDammitStandalone(self):\n", "colour": "blue", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "746", "code": "        markup = \"<foo>\\x92</foo>\"\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "747", "code": "        dammit = UnicodeDammit(markup)\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "748", "code": "        self.assertEquals(dammit.unicode, \"<foo>&#x2019;</foo>\")\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "749", "code": "\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "750", "code": "        hebrew = \"\\xed\\xe5\\xec\\xf9\"\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "751", "code": "        dammit = UnicodeDammit(hebrew, [\"iso-8859-8\"])\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "752", "code": "        self.assertEquals(dammit.unicode, u'\\u05dd\\u05d5\\u05dc\\u05e9')\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "753", "code": "        self.assertEquals(dammit.originalEncoding, 'iso-8859-8')\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "754", "code": "\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "C", "line": "755", "code": "    def testGarbageInGarbageOut(self):\n", "colour": "blue", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "756", "code": "        ascii = \"<foo>a</foo>\"\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "C", "line": "757", "code": "        asciiSoup = BeautifulStoneSoup(ascii)\n", "colour": "blue", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "758", "code": "        self.assertEquals(ascii, str(asciiSoup))\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "759", "code": "\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "C", "line": "760", "code": "        unicodeData = u\"<foo>\\u00FC</foo>\"\n", "colour": "blue", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "761", "code": "        utf8 = unicodeData.encode(\"utf-8\")\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "762", "code": "        self.assertEquals(utf8, '<foo>\\xc3\\xbc</foo>')\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "763", "code": "\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "C", "line": "764", "code": "        unicodeSoup = BeautifulStoneSoup(unicodeData)\n", "colour": "blue", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "765", "code": "        self.assertEquals(unicodeData, unicode(unicodeSoup))\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "766", "code": "        self.assertEquals(unicode(unicodeSoup.foo.string), u'\\u00FC')\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "767", "code": "\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "C", "line": "768", "code": "        utf8Soup = BeautifulStoneSoup(utf8, fromEncoding='utf-8')\n", "colour": "blue", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "769", "code": "        self.assertEquals(utf8, str(utf8Soup))\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "770", "code": "        self.assertEquals(utf8Soup.originalEncoding, \"utf-8\")\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "771", "code": "\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "C", "line": "772", "code": "        utf8Soup = BeautifulStoneSoup(unicodeData)\n", "colour": "blue", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "773", "code": "        self.assertEquals(utf8, str(utf8Soup))\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "774", "code": "        self.assertEquals(utf8Soup.originalEncoding, None)\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "775", "code": "\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "776", "code": "\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "C", "line": "777", "code": "    def testHandleInvalidCodec(self):\n", "colour": "blue", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "778", "code": "        for bad_encoding in ['.utf8', '...', 'utF---16.!']:\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "W", "line": "779", "code": "            soup = BeautifulSoup(\"R\u00e4ksm\u00f6rg\u00e5s\", fromEncoding=bad_encoding)\n", "colour": "purple", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "780", "code": "            self.assertEquals(soup.originalEncoding, 'utf-8')\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "781", "code": "\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "C", "line": "782", "code": "    def testUnicodeSearch(self):\n", "colour": "blue", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "783", "code": "        html = u'<html><body><h1>R\u00e4ksm\u00f6rg\u00e5s</h1></body></html>'\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "W", "line": "784", "code": "        soup = BeautifulSoup(html)\n", "colour": "purple", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "C", "line": "785", "code": "        self.assertEqual(soup.find(text=u'R\u00e4ksm\u00f6rg\u00e5s'),u'R\u00e4ksm\u00f6rg\u00e5s')\n", "colour": "blue", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "786", "code": "\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "C", "line": "787", "code": "    def testRewrittenXMLHeader(self):\n", "colour": "blue", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "C", "line": "788", "code": "        euc_jp = '<?xml version=\"1.0 encoding=\"euc-jp\"?>\\n<foo>\\n\\xa4\\xb3\\xa4\\xec\\xa4\\xcfEUC-JP\\xa4\\xc7\\xa5\\xb3\\xa1\\xbc\\xa5\\xc7\\xa5\\xa3\\xa5\\xf3\\xa5\\xb0\\xa4\\xb5\\xa4\\xec\\xa4\\xbf\\xc6\\xfc\\xcb\\xdc\\xb8\\xec\\xa4\\xce\\xa5\\xd5\\xa5\\xa1\\xa5\\xa4\\xa5\\xeb\\xa4\\xc7\\xa4\\xb9\\xa1\\xa3\\n</foo>\\n'\n", "colour": "blue", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "C", "line": "789", "code": "        utf8 = \"<?xml version='1.0' encoding='utf-8'?>\\n<foo>\\n\\xe3\\x81\\x93\\xe3\\x82\\x8c\\xe3\\x81\\xafEUC-JP\\xe3\\x81\\xa7\\xe3\\x82\\xb3\\xe3\\x83\\xbc\\xe3\\x83\\x87\\xe3\\x82\\xa3\\xe3\\x83\\xb3\\xe3\\x82\\xb0\\xe3\\x81\\x95\\xe3\\x82\\x8c\\xe3\\x81\\x9f\\xe6\\x97\\xa5\\xe6\\x9c\\xac\\xe8\\xaa\\x9e\\xe3\\x81\\xae\\xe3\\x83\\x95\\xe3\\x82\\xa1\\xe3\\x82\\xa4\\xe3\\x83\\xab\\xe3\\x81\\xa7\\xe3\\x81\\x99\\xe3\\x80\\x82\\n</foo>\\n\"\n", "colour": "blue", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "W", "line": "790", "code": "        soup = BeautifulStoneSoup(euc_jp)\n", "colour": "purple", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "791", "code": "        if soup.originalEncoding != \"euc-jp\":\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "792", "code": "            raise Exception(\"Test failed when parsing euc-jp document. \"\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "793", "code": "                            \"If you're running Python >=2.4, or you have \"\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "794", "code": "                            \"cjkcodecs installed, this is a real problem. \"\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "795", "code": "                            \"Otherwise, ignore it.\")\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "796", "code": "\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "797", "code": "        self.assertEquals(soup.originalEncoding, \"euc-jp\")\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "798", "code": "        self.assertEquals(str(soup), utf8)\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "799", "code": "\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "800", "code": "        old_text = \"<?xml encoding='windows-1252'><foo>\\x92</foo>\"\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "801", "code": "        new_text = \"<?xml version='1.0' encoding='utf-8'?><foo>&rsquo;</foo>\"\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "802", "code": "        self.assertSoupEquals(old_text, new_text)\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "803", "code": "\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "C", "line": "804", "code": "    def testRewrittenMetaTag(self):\n", "colour": "blue", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "C", "line": "805", "code": "        no_shift_jis_html = '''<html><head>\\n<meta http-equiv=\"Content-language\" content=\"ja\" /></head><body><pre>\\n\\x82\\xb1\\x82\\xea\\x82\\xcdShift-JIS\\x82\\xc5\\x83R\\x81[\\x83f\\x83B\\x83\\x93\\x83O\\x82\\xb3\\x82\\xea\\x82\\xbd\\x93\\xfa\\x96{\\x8c\\xea\\x82\\xcc\\x83t\\x83@\\x83C\\x83\\x8b\\x82\\xc5\\x82\\xb7\\x81B\\n</pre></body></html>'''\n", "colour": "blue", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "W", "line": "806", "code": "        soup = BeautifulSoup(no_shift_jis_html)\n", "colour": "purple", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "807", "code": "\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "808", "code": "        # Beautiful Soup used to try to rewrite the meta tag even if the\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "809", "code": "        # meta tag got filtered out by the strainer. This test makes\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "810", "code": "        # sure that doesn't happen.\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "811", "code": "        strainer = SoupStrainer('pre')\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "812", "code": "        soup = BeautifulSoup(no_shift_jis_html, parseOnlyThese=strainer)\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "813", "code": "        self.assertEquals(soup.contents[0].name, 'pre')\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "814", "code": "\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "815", "code": "        meta_tag = ('<meta content=\"text/html; charset=x-sjis\" '\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "816", "code": "                    'http-equiv=\"Content-type\" />')\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "817", "code": "        shift_jis_html = (\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "818", "code": "            '<html><head>\\n%s\\n'\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "819", "code": "            '<meta http-equiv=\"Content-language\" content=\"ja\" />'\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "820", "code": "            '</head><body><pre>\\n'\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "821", "code": "            '\\x82\\xb1\\x82\\xea\\x82\\xcdShift-JIS\\x82\\xc5\\x83R\\x81[\\x83f'\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "822", "code": "            '\\x83B\\x83\\x93\\x83O\\x82\\xb3\\x82\\xea\\x82\\xbd\\x93\\xfa\\x96{\\x8c'\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "823", "code": "            '\\xea\\x82\\xcc\\x83t\\x83@\\x83C\\x83\\x8b\\x82\\xc5\\x82\\xb7\\x81B\\n'\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "824", "code": "            '</pre></body></html>') % meta_tag\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "825", "code": "        soup = BeautifulSoup(shift_jis_html)\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "826", "code": "        if soup.originalEncoding != \"shift-jis\":\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "827", "code": "            raise Exception(\"Test failed when parsing shift-jis document \"\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "828", "code": "                            \"with meta tag '%s'.\"\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "829", "code": "                            \"If you're running Python >=2.4, or you have \"\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "830", "code": "                            \"cjkcodecs installed, this is a real problem. \"\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "831", "code": "                            \"Otherwise, ignore it.\" % meta_tag)\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "832", "code": "        self.assertEquals(soup.originalEncoding, \"shift-jis\")\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "833", "code": "\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "834", "code": "        content_type_tag = soup.meta['content']\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "835", "code": "        self.assertEquals(content_type_tag[content_type_tag.find('charset='):],\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "836", "code": "                          'charset=%SOUP-ENCODING%')\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "837", "code": "        content_type = str(soup.meta)\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "838", "code": "        index = content_type.find('charset=')\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "839", "code": "        self.assertEqual(content_type[index:index+len('charset=utf8')+1],\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "840", "code": "                         'charset=utf-8')\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "841", "code": "        content_type = soup.meta.__str__('shift-jis')\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "842", "code": "        index = content_type.find('charset=')\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "843", "code": "        self.assertEqual(content_type[index:index+len('charset=shift-jis')],\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "844", "code": "                         'charset=shift-jis')\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "845", "code": "\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "846", "code": "        self.assertEquals(str(soup), (\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "C", "line": "847", "code": "                '<html><head>\\n'\n", "colour": "blue", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "848", "code": "                '<meta content=\"text/html; charset=utf-8\" '\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "849", "code": "                'http-equiv=\"Content-type\" />\\n'\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "850", "code": "                '<meta http-equiv=\"Content-language\" content=\"ja\" />'\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "851", "code": "                '</head><body><pre>\\n'\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "852", "code": "                '\\xe3\\x81\\x93\\xe3\\x82\\x8c\\xe3\\x81\\xafShift-JIS\\xe3\\x81\\xa7\\xe3'\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "853", "code": "                '\\x82\\xb3\\xe3\\x83\\xbc\\xe3\\x83\\x87\\xe3\\x82\\xa3\\xe3\\x83\\xb3\\xe3'\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "854", "code": "                '\\x82\\xb0\\xe3\\x81\\x95\\xe3\\x82\\x8c\\xe3\\x81\\x9f\\xe6\\x97\\xa5\\xe6'\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "855", "code": "                '\\x9c\\xac\\xe8\\xaa\\x9e\\xe3\\x81\\xae\\xe3\\x83\\x95\\xe3\\x82\\xa1\\xe3'\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "856", "code": "                '\\x82\\xa4\\xe3\\x83\\xab\\xe3\\x81\\xa7\\xe3\\x81\\x99\\xe3\\x80\\x82\\n'\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "857", "code": "                '</pre></body></html>'))\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "858", "code": "        self.assertEquals(soup.renderContents(\"shift-jis\"),\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "859", "code": "                          shift_jis_html.replace('x-sjis', 'shift-jis'))\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "860", "code": "\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "C", "line": "861", "code": "        isolatin =\"\"\"<html><meta http-equiv=\"Content-type\" content=\"text/html; charset=ISO-Latin-1\" />Sacr\\xe9 bleu!</html>\"\"\"\n", "colour": "blue", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "862", "code": "        soup = BeautifulSoup(isolatin)\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "863", "code": "        self.assertSoupEquals(soup.__str__(\"utf-8\"),\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "C", "line": "864", "code": "                              isolatin.replace(\"ISO-Latin-1\", \"utf-8\").replace(\"\\xe9\", \"\\xc3\\xa9\"))\n", "colour": "blue", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "865", "code": "\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "C", "line": "866", "code": "    def testHebrew(self):\n", "colour": "blue", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "C", "line": "867", "code": "        iso_8859_8= '<HEAD>\\n<TITLE>Hebrew (ISO 8859-8) in Visual Directionality</TITLE>\\n\\n\\n\\n</HEAD>\\n<BODY>\\n<H1>Hebrew (ISO 8859-8) in Visual Directionality</H1>\\n\\xed\\xe5\\xec\\xf9\\n</BODY>\\n'\n", "colour": "blue", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "C", "line": "868", "code": "        utf8 = '<head>\\n<title>Hebrew (ISO 8859-8) in Visual Directionality</title>\\n</head>\\n<body>\\n<h1>Hebrew (ISO 8859-8) in Visual Directionality</h1>\\n\\xd7\\x9d\\xd7\\x95\\xd7\\x9c\\xd7\\xa9\\n</body>\\n'\n", "colour": "blue", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "W", "line": "869", "code": "        soup = BeautifulStoneSoup(iso_8859_8, fromEncoding=\"iso-8859-8\")\n", "colour": "purple", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "870", "code": "        self.assertEquals(str(soup), utf8)\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "871", "code": "\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "C", "line": "872", "code": "    def testSmartQuotesNotSoSmartAnymore(self):\n", "colour": "blue", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "873", "code": "        self.assertSoupEquals(\"\\x91Foo\\x92 <!--blah-->\",\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "874", "code": "                              '&lsquo;Foo&rsquo; <!--blah-->')\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "875", "code": "\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "C", "line": "876", "code": "    def testDontConvertSmartQuotesWhenAlsoConvertingEntities(self):\n", "colour": "blue", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "C", "line": "877", "code": "        smartQuotes = \"Il a dit, \\x8BSacr&eacute; bl&#101;u!\\x9b\"\n", "colour": "blue", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "W", "line": "878", "code": "        soup = BeautifulSoup(smartQuotes)\n", "colour": "purple", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "879", "code": "        self.assertEquals(str(soup),\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "880", "code": "                          'Il a dit, &lsaquo;Sacr&eacute; bl&#101;u!&rsaquo;')\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "881", "code": "        soup = BeautifulSoup(smartQuotes, convertEntities=\"html\")\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "882", "code": "        self.assertEquals(str(soup),\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "C", "line": "883", "code": "                          'Il a dit, \\xe2\\x80\\xb9Sacr\\xc3\\xa9 bleu!\\xe2\\x80\\xba')\n", "colour": "blue", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "884", "code": "\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "C", "line": "885", "code": "    def testDontSeeSmartQuotesWhereThereAreNone(self):\n", "colour": "blue", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "886", "code": "        utf_8 = \"\\343\\202\\261\\343\\203\\274\\343\\202\\277\\343\\202\\244 Watch\"\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "887", "code": "        self.assertSoupEquals(utf_8)\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "888", "code": "\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "889", "code": "\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "R", "line": "890", "code": "class Whitewash(SoupTest):\n", "colour": "green", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "891", "code": "    \"\"\"Test whitespace preservation.\"\"\"\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "892", "code": "\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "C", "line": "893", "code": "    def testPreservedWhitespace(self):\n", "colour": "blue", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "894", "code": "        self.assertSoupEquals(\"<pre>   </pre>\")\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "895", "code": "        self.assertSoupEquals(\"<pre> woo  </pre>\")\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "896", "code": "\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "C", "line": "897", "code": "    def testCollapsedWhitespace(self):\n", "colour": "blue", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "898", "code": "        self.assertSoupEquals(\"<p>   </p>\", \"<p> </p>\")\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "899", "code": "\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "900", "code": "\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "901", "code": "if __name__ == '__main__':\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "902", "code": "    unittest.main()\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}]]}