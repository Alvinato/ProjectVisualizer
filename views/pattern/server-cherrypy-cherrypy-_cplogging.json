{"path": "/home/asumal/git/cs410/pattern/pattern/server/cherrypy/cherrypy/_cplogging.py", "lines": [{"index": "1", "colour": "orange", "code": "\"\"\"\n", "error": "none", "author": "tom@organisms.be"}, {"index": "2", "colour": "orange", "code": "Simple config\n", "error": "none", "author": "tom@organisms.be"}, {"index": "3", "colour": "orange", "code": "=============\n", "error": "none", "author": "tom@organisms.be"}, {"index": "4", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "5", "colour": "orange", "code": "Although CherryPy uses the :mod:`Python logging module <logging>`, it does so\n", "error": "none", "author": "tom@organisms.be"}, {"index": "6", "colour": "orange", "code": "behind the scenes so that simple logging is simple, but complicated logging\n", "error": "none", "author": "tom@organisms.be"}, {"index": "7", "colour": "orange", "code": "is still possible. \"Simple\" logging means that you can log to the screen\n", "error": "none", "author": "tom@organisms.be"}, {"index": "8", "colour": "orange", "code": "(i.e. console/stdout) or to a file, and that you can easily have separate\n", "error": "none", "author": "tom@organisms.be"}, {"index": "9", "colour": "orange", "code": "error and access log files.\n", "error": "none", "author": "tom@organisms.be"}, {"index": "10", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "11", "colour": "orange", "code": "Here are the simplified logging settings. You use these by adding lines to\n", "error": "none", "author": "tom@organisms.be"}, {"index": "12", "colour": "orange", "code": "your config file or dict. You should set these at either the global level or\n", "error": "none", "author": "tom@organisms.be"}, {"index": "13", "colour": "orange", "code": "per application (see next), but generally not both.\n", "error": "none", "author": "tom@organisms.be"}, {"index": "14", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "15", "colour": "orange", "code": " * ``log.screen``: Set this to True to have both \"error\" and \"access\" messages\n", "error": "none", "author": "tom@organisms.be"}, {"index": "16", "colour": "orange", "code": "   printed to stdout.\n", "error": "none", "author": "tom@organisms.be"}, {"index": "17", "colour": "orange", "code": " * ``log.access_file``: Set this to an absolute filename where you want\n", "error": "none", "author": "tom@organisms.be"}, {"index": "18", "colour": "orange", "code": "   \"access\" messages written.\n", "error": "none", "author": "tom@organisms.be"}, {"index": "19", "colour": "orange", "code": " * ``log.error_file``: Set this to an absolute filename where you want \"error\"\n", "error": "none", "author": "tom@organisms.be"}, {"index": "20", "colour": "orange", "code": "   messages written.\n", "error": "none", "author": "tom@organisms.be"}, {"index": "21", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "22", "colour": "orange", "code": "Many events are automatically logged; to log your own application events, call\n", "error": "none", "author": "tom@organisms.be"}, {"index": "23", "colour": "orange", "code": ":func:`cherrypy.log`.\n", "error": "none", "author": "tom@organisms.be"}, {"index": "24", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "25", "colour": "orange", "code": "Architecture\n", "error": "none", "author": "tom@organisms.be"}, {"index": "26", "colour": "orange", "code": "============\n", "error": "none", "author": "tom@organisms.be"}, {"index": "27", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "28", "colour": "orange", "code": "Separate scopes\n", "error": "none", "author": "tom@organisms.be"}, {"index": "29", "colour": "orange", "code": "---------------\n", "error": "none", "author": "tom@organisms.be"}, {"index": "30", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "31", "colour": "orange", "code": "CherryPy provides log managers at both the global and application layers.\n", "error": "none", "author": "tom@organisms.be"}, {"index": "32", "colour": "orange", "code": "This means you can have one set of logging rules for your entire site,\n", "error": "none", "author": "tom@organisms.be"}, {"index": "33", "colour": "orange", "code": "and another set of rules specific to each application. The global log\n", "error": "none", "author": "tom@organisms.be"}, {"index": "34", "colour": "orange", "code": "manager is found at :func:`cherrypy.log`, and the log manager for each\n", "error": "none", "author": "tom@organisms.be"}, {"index": "35", "colour": "orange", "code": "application is found at :attr:`app.log<cherrypy._cptree.Application.log>`.\n", "error": "none", "author": "tom@organisms.be"}, {"index": "36", "colour": "orange", "code": "If you're inside a request, the latter is reachable from\n", "error": "none", "author": "tom@organisms.be"}, {"index": "37", "colour": "orange", "code": "``cherrypy.request.app.log``; if you're outside a request, you'll have to obtain\n", "error": "none", "author": "tom@organisms.be"}, {"index": "38", "colour": "orange", "code": "a reference to the ``app``: either the return value of\n", "error": "none", "author": "tom@organisms.be"}, {"index": "39", "colour": "orange", "code": ":func:`tree.mount()<cherrypy._cptree.Tree.mount>` or, if you used\n", "error": "none", "author": "tom@organisms.be"}, {"index": "40", "colour": "orange", "code": ":func:`quickstart()<cherrypy.quickstart>` instead, via ``cherrypy.tree.apps['/']``.\n", "error": "none", "author": "tom@organisms.be"}, {"index": "41", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "42", "colour": "orange", "code": "By default, the global logs are named \"cherrypy.error\" and \"cherrypy.access\",\n", "error": "none", "author": "tom@organisms.be"}, {"index": "43", "colour": "orange", "code": "and the application logs are named \"cherrypy.error.2378745\" and\n", "error": "none", "author": "tom@organisms.be"}, {"index": "44", "colour": "orange", "code": "\"cherrypy.access.2378745\" (the number is the id of the Application object).\n", "error": "none", "author": "tom@organisms.be"}, {"index": "45", "colour": "orange", "code": "This means that the application logs \"bubble up\" to the site logs, so if your\n", "error": "none", "author": "tom@organisms.be"}, {"index": "46", "colour": "orange", "code": "application has no log handlers, the site-level handlers will still log the\n", "error": "none", "author": "tom@organisms.be"}, {"index": "47", "colour": "orange", "code": "messages.\n", "error": "none", "author": "tom@organisms.be"}, {"index": "48", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "49", "colour": "orange", "code": "Errors vs. Access\n", "error": "none", "author": "tom@organisms.be"}, {"index": "50", "colour": "orange", "code": "-----------------\n", "error": "none", "author": "tom@organisms.be"}, {"index": "51", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "52", "colour": "orange", "code": "Each log manager handles both \"access\" messages (one per HTTP request) and\n", "error": "none", "author": "tom@organisms.be"}, {"index": "53", "colour": "orange", "code": "\"error\" messages (everything else). Note that the \"error\" log is not just for\n", "error": "none", "author": "tom@organisms.be"}, {"index": "54", "colour": "orange", "code": "errors! The format of access messages is highly formalized, but the error log\n", "error": "none", "author": "tom@organisms.be"}, {"index": "55", "colour": "orange", "code": "isn't--it receives messages from a variety of sources (including full error\n", "error": "none", "author": "tom@organisms.be"}, {"index": "56", "colour": "orange", "code": "tracebacks, if enabled).\n", "error": "none", "author": "tom@organisms.be"}, {"index": "57", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "58", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "59", "colour": "orange", "code": "Custom Handlers\n", "error": "none", "author": "tom@organisms.be"}, {"index": "60", "colour": "orange", "code": "===============\n", "error": "none", "author": "tom@organisms.be"}, {"index": "61", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "62", "colour": "orange", "code": "The simple settings above work by manipulating Python's standard :mod:`logging`\n", "error": "none", "author": "tom@organisms.be"}, {"index": "63", "colour": "orange", "code": "module. So when you need something more complex, the full power of the standard\n", "error": "none", "author": "tom@organisms.be"}, {"index": "64", "colour": "orange", "code": "module is yours to exploit. You can borrow or create custom handlers, formats,\n", "error": "none", "author": "tom@organisms.be"}, {"index": "65", "colour": "orange", "code": "filters, and much more. Here's an example that skips the standard FileHandler\n", "error": "none", "author": "tom@organisms.be"}, {"index": "66", "colour": "orange", "code": "and uses a RotatingFileHandler instead:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "67", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "68", "colour": "orange", "code": "::\n", "error": "none", "author": "tom@organisms.be"}, {"index": "69", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "70", "colour": "orange", "code": "    #python\n", "error": "none", "author": "tom@organisms.be"}, {"index": "71", "colour": "orange", "code": "    log = app.log\n", "error": "none", "author": "tom@organisms.be"}, {"index": "72", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "73", "colour": "orange", "code": "    # Remove the default FileHandlers if present.\n", "error": "none", "author": "tom@organisms.be"}, {"index": "74", "colour": "orange", "code": "    log.error_file = \"\"\n", "error": "none", "author": "tom@organisms.be"}, {"index": "75", "colour": "orange", "code": "    log.access_file = \"\"\n", "error": "none", "author": "tom@organisms.be"}, {"index": "76", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "77", "colour": "orange", "code": "    maxBytes = getattr(log, \"rot_maxBytes\", 10000000)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "78", "colour": "orange", "code": "    backupCount = getattr(log, \"rot_backupCount\", 1000)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "79", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "80", "colour": "orange", "code": "    # Make a new RotatingFileHandler for the error log.\n", "error": "none", "author": "tom@organisms.be"}, {"index": "81", "colour": "orange", "code": "    fname = getattr(log, \"rot_error_file\", \"error.log\")\n", "error": "none", "author": "tom@organisms.be"}, {"index": "82", "colour": "orange", "code": "    h = handlers.RotatingFileHandler(fname, 'a', maxBytes, backupCount)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "83", "colour": "orange", "code": "    h.setLevel(DEBUG)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "84", "colour": "orange", "code": "    h.setFormatter(_cplogging.logfmt)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "85", "colour": "orange", "code": "    log.error_log.addHandler(h)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "86", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "87", "colour": "orange", "code": "    # Make a new RotatingFileHandler for the access log.\n", "error": "none", "author": "tom@organisms.be"}, {"index": "88", "colour": "orange", "code": "    fname = getattr(log, \"rot_access_file\", \"access.log\")\n", "error": "none", "author": "tom@organisms.be"}, {"index": "89", "colour": "orange", "code": "    h = handlers.RotatingFileHandler(fname, 'a', maxBytes, backupCount)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "90", "colour": "orange", "code": "    h.setLevel(DEBUG)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "91", "colour": "orange", "code": "    h.setFormatter(_cplogging.logfmt)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "92", "colour": "orange", "code": "    log.access_log.addHandler(h)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "93", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "94", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "95", "colour": "orange", "code": "The ``rot_*`` attributes are pulled straight from the application log object.\n", "error": "none", "author": "tom@organisms.be"}, {"index": "96", "colour": "orange", "code": "Since \"log.*\" config entries simply set attributes on the log object, you can\n", "error": "none", "author": "tom@organisms.be"}, {"index": "97", "colour": "orange", "code": "add custom attributes to your heart's content. Note that these handlers are\n", "error": "none", "author": "tom@organisms.be"}, {"index": "98", "colour": "orange", "code": "used ''instead'' of the default, simple handlers outlined above (so don't set\n", "error": "none", "author": "tom@organisms.be"}, {"index": "99", "colour": "orange", "code": "the \"log.error_file\" config entry, for example).\n", "error": "none", "author": "tom@organisms.be"}, {"index": "100", "colour": "orange", "code": "\"\"\"\n", "error": "none", "author": "tom@organisms.be"}, {"index": "101", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "102", "colour": "orange", "code": "import datetime\n", "error": "none", "author": "tom@organisms.be"}, {"index": "103", "colour": "orange", "code": "import logging\n", "error": "none", "author": "tom@organisms.be"}, {"index": "104", "colour": "orange", "code": "# Silence the no-handlers \"warning\" (stderr write!) in stdlib logging\n", "error": "none", "author": "tom@organisms.be"}, {"index": "105", "colour": "orange", "code": "logging.Logger.manager.emittedNoHandlerWarning = 1\n", "error": "none", "author": "tom@organisms.be"}, {"index": "106", "colour": "orange", "code": "logfmt = logging.Formatter(\"%(message)s\")\n", "error": "none", "author": "tom@organisms.be"}, {"index": "107", "colour": "orange", "code": "import os\n", "error": "none", "author": "tom@organisms.be"}, {"index": "108", "colour": "orange", "code": "import sys\n", "error": "none", "author": "tom@organisms.be"}, {"index": "109", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "110", "colour": "orange", "code": "import cherrypy\n", "error": "none", "author": "tom@organisms.be"}, {"index": "111", "colour": "orange", "code": "from cherrypy import _cperror\n", "error": "none", "author": "tom@organisms.be"}, {"index": "112", "colour": "orange", "code": "from cherrypy._cpcompat import ntob, py3k\n", "error": "none", "author": "tom@organisms.be"}, {"index": "113", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "114", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "115", "colour": "orange", "code": "class NullHandler(logging.Handler):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "116", "colour": "orange", "code": "    \"\"\"A no-op logging handler to silence the logging.lastResort handler.\"\"\"\n", "error": "none", "author": "tom@organisms.be"}, {"index": "117", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "118", "colour": "orange", "code": "    def handle(self, record):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "119", "colour": "orange", "code": "        pass\n", "error": "none", "author": "tom@organisms.be"}, {"index": "120", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "121", "colour": "orange", "code": "    def emit(self, record):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "122", "colour": "orange", "code": "        pass\n", "error": "none", "author": "tom@organisms.be"}, {"index": "123", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "124", "colour": "orange", "code": "    def createLock(self):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "125", "colour": "green", "code": "        self.lock = None\n", "error": "W", "author": "tom@organisms.be"}, {"index": "126", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "127", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "128", "colour": "orange", "code": "class LogManager(object):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "129", "colour": "orange", "code": "    \"\"\"An object to assist both simple and advanced logging.\n", "error": "none", "author": "tom@organisms.be"}, {"index": "130", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "131", "colour": "orange", "code": "    ``cherrypy.log`` is an instance of this class.\n", "error": "none", "author": "tom@organisms.be"}, {"index": "132", "colour": "orange", "code": "    \"\"\"\n", "error": "none", "author": "tom@organisms.be"}, {"index": "133", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "134", "colour": "orange", "code": "    appid = None\n", "error": "none", "author": "tom@organisms.be"}, {"index": "135", "colour": "orange", "code": "    \"\"\"The id() of the Application object which owns this log manager. If this\n", "error": "none", "author": "tom@organisms.be"}, {"index": "136", "colour": "orange", "code": "    is a global log manager, appid is None.\"\"\"\n", "error": "none", "author": "tom@organisms.be"}, {"index": "137", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "138", "colour": "orange", "code": "    error_log = None\n", "error": "none", "author": "tom@organisms.be"}, {"index": "139", "colour": "orange", "code": "    \"\"\"The actual :class:`logging.Logger` instance for error messages.\"\"\"\n", "error": "none", "author": "tom@organisms.be"}, {"index": "140", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "141", "colour": "orange", "code": "    access_log = None\n", "error": "none", "author": "tom@organisms.be"}, {"index": "142", "colour": "orange", "code": "    \"\"\"The actual :class:`logging.Logger` instance for access messages.\"\"\"\n", "error": "none", "author": "tom@organisms.be"}, {"index": "143", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "144", "colour": "orange", "code": "    if py3k:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "145", "colour": "orange", "code": "        access_log_format = \\\n", "error": "none", "author": "tom@organisms.be"}, {"index": "146", "colour": "orange", "code": "            '{h} {l} {u} {t} \"{r}\" {s} {b} \"{f}\" \"{a}\"'\n", "error": "none", "author": "tom@organisms.be"}, {"index": "147", "colour": "orange", "code": "    else:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "148", "colour": "orange", "code": "        access_log_format = \\\n", "error": "none", "author": "tom@organisms.be"}, {"index": "149", "colour": "orange", "code": "            '%(h)s %(l)s %(u)s %(t)s \"%(r)s\" %(s)s %(b)s \"%(f)s\" \"%(a)s\"'\n", "error": "none", "author": "tom@organisms.be"}, {"index": "150", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "151", "colour": "orange", "code": "    logger_root = None\n", "error": "none", "author": "tom@organisms.be"}, {"index": "152", "colour": "orange", "code": "    \"\"\"The \"top-level\" logger name.\n", "error": "none", "author": "tom@organisms.be"}, {"index": "153", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "154", "colour": "orange", "code": "    This string will be used as the first segment in the Logger names.\n", "error": "none", "author": "tom@organisms.be"}, {"index": "155", "colour": "orange", "code": "    The default is \"cherrypy\", for example, in which case the Logger names\n", "error": "none", "author": "tom@organisms.be"}, {"index": "156", "colour": "orange", "code": "    will be of the form::\n", "error": "none", "author": "tom@organisms.be"}, {"index": "157", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "158", "colour": "orange", "code": "        cherrypy.error.<appid>\n", "error": "none", "author": "tom@organisms.be"}, {"index": "159", "colour": "orange", "code": "        cherrypy.access.<appid>\n", "error": "none", "author": "tom@organisms.be"}, {"index": "160", "colour": "orange", "code": "    \"\"\"\n", "error": "none", "author": "tom@organisms.be"}, {"index": "161", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "162", "colour": "orange", "code": "    def __init__(self, appid=None, logger_root=\"cherrypy\"):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "163", "colour": "orange", "code": "        self.logger_root = logger_root\n", "error": "none", "author": "tom@organisms.be"}, {"index": "164", "colour": "orange", "code": "        self.appid = appid\n", "error": "none", "author": "tom@organisms.be"}, {"index": "165", "colour": "orange", "code": "        if appid is None:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "166", "colour": "orange", "code": "            self.error_log = logging.getLogger(\"%s.error\" % logger_root)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "167", "colour": "orange", "code": "            self.access_log = logging.getLogger(\"%s.access\" % logger_root)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "168", "colour": "orange", "code": "        else:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "169", "colour": "orange", "code": "            self.error_log = logging.getLogger(\"%s.error.%s\" % (logger_root, appid))\n", "error": "none", "author": "tom@organisms.be"}, {"index": "170", "colour": "orange", "code": "            self.access_log = logging.getLogger(\"%s.access.%s\" % (logger_root, appid))\n", "error": "none", "author": "tom@organisms.be"}, {"index": "171", "colour": "orange", "code": "        self.error_log.setLevel(logging.INFO)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "172", "colour": "orange", "code": "        self.access_log.setLevel(logging.INFO)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "173", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "174", "colour": "orange", "code": "        # Silence the no-handlers \"warning\" (stderr write!) in stdlib logging\n", "error": "none", "author": "tom@organisms.be"}, {"index": "175", "colour": "orange", "code": "        self.error_log.addHandler(NullHandler())\n", "error": "none", "author": "tom@organisms.be"}, {"index": "176", "colour": "orange", "code": "        self.access_log.addHandler(NullHandler())\n", "error": "none", "author": "tom@organisms.be"}, {"index": "177", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "178", "colour": "orange", "code": "        cherrypy.engine.subscribe('graceful', self.reopen_files)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "179", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "180", "colour": "orange", "code": "    def reopen_files(self):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "181", "colour": "orange", "code": "        \"\"\"Close and reopen all file handlers.\"\"\"\n", "error": "none", "author": "tom@organisms.be"}, {"index": "182", "colour": "orange", "code": "        for log in (self.error_log, self.access_log):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "183", "colour": "orange", "code": "            for h in log.handlers:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "184", "colour": "orange", "code": "                if isinstance(h, logging.FileHandler):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "185", "colour": "orange", "code": "                    h.acquire()\n", "error": "none", "author": "tom@organisms.be"}, {"index": "186", "colour": "orange", "code": "                    h.stream.close()\n", "error": "none", "author": "tom@organisms.be"}, {"index": "187", "colour": "orange", "code": "                    h.stream = open(h.baseFilename, h.mode)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "188", "colour": "orange", "code": "                    h.release()\n", "error": "none", "author": "tom@organisms.be"}, {"index": "189", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "190", "colour": "orange", "code": "    def error(self, msg='', context='', severity=logging.INFO, traceback=False):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "191", "colour": "orange", "code": "        \"\"\"Write the given ``msg`` to the error log.\n", "error": "none", "author": "tom@organisms.be"}, {"index": "192", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "193", "colour": "orange", "code": "        This is not just for errors! Applications may call this at any time\n", "error": "none", "author": "tom@organisms.be"}, {"index": "194", "colour": "orange", "code": "        to log application-specific information.\n", "error": "none", "author": "tom@organisms.be"}, {"index": "195", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "196", "colour": "orange", "code": "        If ``traceback`` is True, the traceback of the current exception\n", "error": "none", "author": "tom@organisms.be"}, {"index": "197", "colour": "orange", "code": "        (if any) will be appended to ``msg``.\n", "error": "none", "author": "tom@organisms.be"}, {"index": "198", "colour": "orange", "code": "        \"\"\"\n", "error": "none", "author": "tom@organisms.be"}, {"index": "199", "colour": "orange", "code": "        if traceback:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "200", "colour": "orange", "code": "            msg += _cperror.format_exc()\n", "error": "none", "author": "tom@organisms.be"}, {"index": "201", "colour": "orange", "code": "        self.error_log.log(severity, ' '.join((self.time(), context, msg)))\n", "error": "none", "author": "tom@organisms.be"}, {"index": "202", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "203", "colour": "orange", "code": "    def __call__(self, *args, **kwargs):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "204", "colour": "orange", "code": "        \"\"\"An alias for ``error``.\"\"\"\n", "error": "none", "author": "tom@organisms.be"}, {"index": "205", "colour": "orange", "code": "        return self.error(*args, **kwargs)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "206", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "207", "colour": "orange", "code": "    def access(self):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "208", "colour": "orange", "code": "        \"\"\"Write to the access log (in Apache/NCSA Combined Log format).\n", "error": "none", "author": "tom@organisms.be"}, {"index": "209", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "210", "colour": "orange", "code": "        See http://httpd.apache.org/docs/2.0/logs.html#combined for format\n", "error": "none", "author": "tom@organisms.be"}, {"index": "211", "colour": "orange", "code": "        details.\n", "error": "none", "author": "tom@organisms.be"}, {"index": "212", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "213", "colour": "orange", "code": "        CherryPy calls this automatically for you. Note there are no arguments;\n", "error": "none", "author": "tom@organisms.be"}, {"index": "214", "colour": "orange", "code": "        it collects the data itself from\n", "error": "none", "author": "tom@organisms.be"}, {"index": "215", "colour": "orange", "code": "        :class:`cherrypy.request<cherrypy._cprequest.Request>`.\n", "error": "none", "author": "tom@organisms.be"}, {"index": "216", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "217", "colour": "orange", "code": "        Like Apache started doing in 2.0.46, non-printable and other special\n", "error": "none", "author": "tom@organisms.be"}, {"index": "218", "colour": "orange", "code": "        characters in %r (and we expand that to all parts) are escaped using\n", "error": "none", "author": "tom@organisms.be"}, {"index": "219", "colour": "orange", "code": "        \\\\xhh sequences, where hh stands for the hexadecimal representation\n", "error": "none", "author": "tom@organisms.be"}, {"index": "220", "colour": "orange", "code": "        of the raw byte. Exceptions from this rule are \" and \\\\, which are\n", "error": "none", "author": "tom@organisms.be"}, {"index": "221", "colour": "orange", "code": "        escaped by prepending a backslash, and all whitespace characters,\n", "error": "none", "author": "tom@organisms.be"}, {"index": "222", "colour": "orange", "code": "        which are written in their C-style notation (\\\\n, \\\\t, etc).\n", "error": "none", "author": "tom@organisms.be"}, {"index": "223", "colour": "orange", "code": "        \"\"\"\n", "error": "none", "author": "tom@organisms.be"}, {"index": "224", "colour": "orange", "code": "        request = cherrypy.serving.request\n", "error": "none", "author": "tom@organisms.be"}, {"index": "225", "colour": "orange", "code": "        remote = request.remote\n", "error": "none", "author": "tom@organisms.be"}, {"index": "226", "colour": "orange", "code": "        response = cherrypy.serving.response\n", "error": "none", "author": "tom@organisms.be"}, {"index": "227", "colour": "orange", "code": "        outheaders = response.headers\n", "error": "none", "author": "tom@organisms.be"}, {"index": "228", "colour": "orange", "code": "        inheaders = request.headers\n", "error": "none", "author": "tom@organisms.be"}, {"index": "229", "colour": "orange", "code": "        if response.output_status is None:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "230", "colour": "orange", "code": "            status = \"-\"\n", "error": "none", "author": "tom@organisms.be"}, {"index": "231", "colour": "orange", "code": "        else:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "232", "colour": "orange", "code": "            status = response.output_status.split(ntob(\" \"), 1)[0]\n", "error": "none", "author": "tom@organisms.be"}, {"index": "233", "colour": "orange", "code": "            if py3k:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "234", "colour": "orange", "code": "                status = status.decode('ISO-8859-1')\n", "error": "none", "author": "tom@organisms.be"}, {"index": "235", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "236", "colour": "orange", "code": "        atoms = {'h': remote.name or remote.ip,\n", "error": "none", "author": "tom@organisms.be"}, {"index": "237", "colour": "orange", "code": "                 'l': '-',\n", "error": "none", "author": "tom@organisms.be"}, {"index": "238", "colour": "orange", "code": "                 'u': getattr(request, \"login\", None) or \"-\",\n", "error": "none", "author": "tom@organisms.be"}, {"index": "239", "colour": "orange", "code": "                 't': self.time(),\n", "error": "none", "author": "tom@organisms.be"}, {"index": "240", "colour": "orange", "code": "                 'r': request.request_line,\n", "error": "none", "author": "tom@organisms.be"}, {"index": "241", "colour": "orange", "code": "                 's': status,\n", "error": "none", "author": "tom@organisms.be"}, {"index": "242", "colour": "orange", "code": "                 'b': dict.get(outheaders, 'Content-Length', '') or \"-\",\n", "error": "none", "author": "tom@organisms.be"}, {"index": "243", "colour": "orange", "code": "                 'f': dict.get(inheaders, 'Referer', ''),\n", "error": "none", "author": "tom@organisms.be"}, {"index": "244", "colour": "orange", "code": "                 'a': dict.get(inheaders, 'User-Agent', ''),\n", "error": "none", "author": "tom@organisms.be"}, {"index": "245", "colour": "orange", "code": "                 }\n", "error": "none", "author": "tom@organisms.be"}, {"index": "246", "colour": "orange", "code": "        if py3k:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "247", "colour": "orange", "code": "            for k, v in atoms.items():\n", "error": "none", "author": "tom@organisms.be"}, {"index": "248", "colour": "orange", "code": "                if not isinstance(v, str):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "249", "colour": "orange", "code": "                    v = str(v)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "250", "colour": "orange", "code": "                v = v.replace('\"', '\\\\\"').encode('utf8')\n", "error": "none", "author": "tom@organisms.be"}, {"index": "251", "colour": "orange", "code": "                # Fortunately, repr(str) escapes unprintable chars, \\n, \\t, etc\n", "error": "none", "author": "tom@organisms.be"}, {"index": "252", "colour": "orange", "code": "                # and backslash for us. All we have to do is strip the quotes.\n", "error": "none", "author": "tom@organisms.be"}, {"index": "253", "colour": "orange", "code": "                v = repr(v)[2:-1]\n", "error": "none", "author": "tom@organisms.be"}, {"index": "254", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "255", "colour": "orange", "code": "                # in python 3.0 the repr of bytes (as returned by encode)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "256", "colour": "orange", "code": "                # uses double \\'s.  But then the logger escapes them yet, again\n", "error": "none", "author": "tom@organisms.be"}, {"index": "257", "colour": "orange", "code": "                # resulting in quadruple slashes.  Remove the extra one here.\n", "error": "none", "author": "tom@organisms.be"}, {"index": "258", "colour": "orange", "code": "                v = v.replace('\\\\\\\\', '\\\\')\n", "error": "none", "author": "tom@organisms.be"}, {"index": "259", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "260", "colour": "orange", "code": "                # Escape double-quote.\n", "error": "none", "author": "tom@organisms.be"}, {"index": "261", "colour": "orange", "code": "                atoms[k] = v\n", "error": "none", "author": "tom@organisms.be"}, {"index": "262", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "263", "colour": "orange", "code": "            try:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "264", "colour": "green", "code": "                self.access_log.log(logging.INFO, self.access_log_format.format(**atoms))\n", "error": "W", "author": "tom@organisms.be"}, {"index": "265", "colour": "green", "code": "            except:\n", "error": "W", "author": "tom@organisms.be"}, {"index": "266", "colour": "orange", "code": "                self(traceback=True)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "267", "colour": "orange", "code": "        else:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "268", "colour": "orange", "code": "            for k, v in atoms.items():\n", "error": "none", "author": "tom@organisms.be"}, {"index": "269", "colour": "orange", "code": "                if isinstance(v, unicode):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "270", "colour": "orange", "code": "                    v = v.encode('utf8')\n", "error": "none", "author": "tom@organisms.be"}, {"index": "271", "colour": "orange", "code": "                elif not isinstance(v, str):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "272", "colour": "orange", "code": "                    v = str(v)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "273", "colour": "orange", "code": "                # Fortunately, repr(str) escapes unprintable chars, \\n, \\t, etc\n", "error": "none", "author": "tom@organisms.be"}, {"index": "274", "colour": "orange", "code": "                # and backslash for us. All we have to do is strip the quotes.\n", "error": "none", "author": "tom@organisms.be"}, {"index": "275", "colour": "orange", "code": "                v = repr(v)[1:-1]\n", "error": "none", "author": "tom@organisms.be"}, {"index": "276", "colour": "orange", "code": "                # Escape double-quote.\n", "error": "none", "author": "tom@organisms.be"}, {"index": "277", "colour": "orange", "code": "                atoms[k] = v.replace('\"', '\\\\\"')\n", "error": "none", "author": "tom@organisms.be"}, {"index": "278", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "279", "colour": "orange", "code": "            try:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "280", "colour": "green", "code": "                self.access_log.log(logging.INFO, self.access_log_format % atoms)\n", "error": "W", "author": "tom@organisms.be"}, {"index": "281", "colour": "green", "code": "            except:\n", "error": "W", "author": "tom@organisms.be"}, {"index": "282", "colour": "orange", "code": "                self(traceback=True)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "283", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "284", "colour": "blue", "code": "    def time(self):\n", "error": "R", "author": "tom@organisms.be"}, {"index": "285", "colour": "orange", "code": "        \"\"\"Return now() in Apache Common Log Format (no timezone).\"\"\"\n", "error": "none", "author": "tom@organisms.be"}, {"index": "286", "colour": "orange", "code": "        now = datetime.datetime.now()\n", "error": "none", "author": "tom@organisms.be"}, {"index": "287", "colour": "orange", "code": "        monthnames = ['jan', 'feb', 'mar', 'apr', 'may', 'jun',\n", "error": "none", "author": "tom@organisms.be"}, {"index": "288", "colour": "orange", "code": "                      'jul', 'aug', 'sep', 'oct', 'nov', 'dec']\n", "error": "none", "author": "tom@organisms.be"}, {"index": "289", "colour": "orange", "code": "        month = monthnames[now.month - 1].capitalize()\n", "error": "none", "author": "tom@organisms.be"}, {"index": "290", "colour": "orange", "code": "        return ('[%02d/%s/%04d:%02d:%02d:%02d]' %\n", "error": "none", "author": "tom@organisms.be"}, {"index": "291", "colour": "orange", "code": "                (now.day, month, now.year, now.hour, now.minute, now.second))\n", "error": "none", "author": "tom@organisms.be"}, {"index": "292", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "293", "colour": "blue", "code": "    def _get_builtin_handler(self, log, key):\n", "error": "R", "author": "tom@organisms.be"}, {"index": "294", "colour": "orange", "code": "        for h in log.handlers:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "295", "colour": "orange", "code": "            if getattr(h, \"_cpbuiltin\", None) == key:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "296", "colour": "orange", "code": "                return h\n", "error": "none", "author": "tom@organisms.be"}, {"index": "297", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "298", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "299", "colour": "orange", "code": "    # ------------------------- Screen handlers ------------------------- #\n", "error": "none", "author": "tom@organisms.be"}, {"index": "300", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "301", "colour": "orange", "code": "    def _set_screen_handler(self, log, enable, stream=None):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "302", "colour": "orange", "code": "        h = self._get_builtin_handler(log, \"screen\")\n", "error": "none", "author": "tom@organisms.be"}, {"index": "303", "colour": "orange", "code": "        if enable:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "304", "colour": "orange", "code": "            if not h:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "305", "colour": "orange", "code": "                if stream is None:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "306", "colour": "orange", "code": "                    stream=sys.stderr\n", "error": "none", "author": "tom@organisms.be"}, {"index": "307", "colour": "orange", "code": "                h = logging.StreamHandler(stream)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "308", "colour": "orange", "code": "                h.setFormatter(logfmt)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "309", "colour": "green", "code": "                h._cpbuiltin = \"screen\"\n", "error": "W", "author": "tom@organisms.be"}, {"index": "310", "colour": "orange", "code": "                log.addHandler(h)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "311", "colour": "orange", "code": "        elif h:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "312", "colour": "orange", "code": "            log.handlers.remove(h)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "313", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "314", "colour": "orange", "code": "    def _get_screen(self):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "315", "colour": "orange", "code": "        h = self._get_builtin_handler\n", "error": "none", "author": "tom@organisms.be"}, {"index": "316", "colour": "orange", "code": "        has_h = h(self.error_log, \"screen\") or h(self.access_log, \"screen\")\n", "error": "none", "author": "tom@organisms.be"}, {"index": "317", "colour": "orange", "code": "        return bool(has_h)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "318", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "319", "colour": "orange", "code": "    def _set_screen(self, newvalue):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "320", "colour": "orange", "code": "        self._set_screen_handler(self.error_log, newvalue, stream=sys.stderr)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "321", "colour": "orange", "code": "        self._set_screen_handler(self.access_log, newvalue, stream=sys.stdout)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "322", "colour": "orange", "code": "    screen = property(_get_screen, _set_screen,\n", "error": "none", "author": "tom@organisms.be"}, {"index": "323", "colour": "orange", "code": "        doc=\"\"\"Turn stderr/stdout logging on or off.\n", "error": "none", "author": "tom@organisms.be"}, {"index": "324", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "325", "colour": "orange", "code": "        If you set this to True, it'll add the appropriate StreamHandler for\n", "error": "none", "author": "tom@organisms.be"}, {"index": "326", "colour": "orange", "code": "        you. If you set it to False, it will remove the handler.\n", "error": "none", "author": "tom@organisms.be"}, {"index": "327", "colour": "orange", "code": "        \"\"\")\n", "error": "none", "author": "tom@organisms.be"}, {"index": "328", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "329", "colour": "orange", "code": "    # -------------------------- File handlers -------------------------- #\n", "error": "none", "author": "tom@organisms.be"}, {"index": "330", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "331", "colour": "blue", "code": "    def _add_builtin_file_handler(self, log, fname):\n", "error": "R", "author": "tom@organisms.be"}, {"index": "332", "colour": "orange", "code": "        h = logging.FileHandler(fname)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "333", "colour": "orange", "code": "        h.setFormatter(logfmt)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "334", "colour": "green", "code": "        h._cpbuiltin = \"file\"\n", "error": "W", "author": "tom@organisms.be"}, {"index": "335", "colour": "orange", "code": "        log.addHandler(h)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "336", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "337", "colour": "orange", "code": "    def _set_file_handler(self, log, filename):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "338", "colour": "orange", "code": "        h = self._get_builtin_handler(log, \"file\")\n", "error": "none", "author": "tom@organisms.be"}, {"index": "339", "colour": "orange", "code": "        if filename:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "340", "colour": "orange", "code": "            if h:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "341", "colour": "orange", "code": "                if h.baseFilename != os.path.abspath(filename):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "342", "colour": "orange", "code": "                    h.close()\n", "error": "none", "author": "tom@organisms.be"}, {"index": "343", "colour": "orange", "code": "                    log.handlers.remove(h)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "344", "colour": "orange", "code": "                    self._add_builtin_file_handler(log, filename)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "345", "colour": "orange", "code": "            else:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "346", "colour": "orange", "code": "                self._add_builtin_file_handler(log, filename)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "347", "colour": "orange", "code": "        else:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "348", "colour": "orange", "code": "            if h:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "349", "colour": "orange", "code": "                h.close()\n", "error": "none", "author": "tom@organisms.be"}, {"index": "350", "colour": "orange", "code": "                log.handlers.remove(h)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "351", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "352", "colour": "orange", "code": "    def _get_error_file(self):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "353", "colour": "orange", "code": "        h = self._get_builtin_handler(self.error_log, \"file\")\n", "error": "none", "author": "tom@organisms.be"}, {"index": "354", "colour": "orange", "code": "        if h:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "355", "colour": "orange", "code": "            return h.baseFilename\n", "error": "none", "author": "tom@organisms.be"}, {"index": "356", "colour": "orange", "code": "        return ''\n", "error": "none", "author": "tom@organisms.be"}, {"index": "357", "colour": "orange", "code": "    def _set_error_file(self, newvalue):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "358", "colour": "orange", "code": "        self._set_file_handler(self.error_log, newvalue)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "359", "colour": "orange", "code": "    error_file = property(_get_error_file, _set_error_file,\n", "error": "none", "author": "tom@organisms.be"}, {"index": "360", "colour": "orange", "code": "        doc=\"\"\"The filename for self.error_log.\n", "error": "none", "author": "tom@organisms.be"}, {"index": "361", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "362", "colour": "orange", "code": "        If you set this to a string, it'll add the appropriate FileHandler for\n", "error": "none", "author": "tom@organisms.be"}, {"index": "363", "colour": "orange", "code": "        you. If you set it to ``None`` or ``''``, it will remove the handler.\n", "error": "none", "author": "tom@organisms.be"}, {"index": "364", "colour": "orange", "code": "        \"\"\")\n", "error": "none", "author": "tom@organisms.be"}, {"index": "365", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "366", "colour": "orange", "code": "    def _get_access_file(self):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "367", "colour": "orange", "code": "        h = self._get_builtin_handler(self.access_log, \"file\")\n", "error": "none", "author": "tom@organisms.be"}, {"index": "368", "colour": "orange", "code": "        if h:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "369", "colour": "orange", "code": "            return h.baseFilename\n", "error": "none", "author": "tom@organisms.be"}, {"index": "370", "colour": "orange", "code": "        return ''\n", "error": "none", "author": "tom@organisms.be"}, {"index": "371", "colour": "orange", "code": "    def _set_access_file(self, newvalue):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "372", "colour": "orange", "code": "        self._set_file_handler(self.access_log, newvalue)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "373", "colour": "orange", "code": "    access_file = property(_get_access_file, _set_access_file,\n", "error": "none", "author": "tom@organisms.be"}, {"index": "374", "colour": "orange", "code": "        doc=\"\"\"The filename for self.access_log.\n", "error": "none", "author": "tom@organisms.be"}, {"index": "375", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "376", "colour": "orange", "code": "        If you set this to a string, it'll add the appropriate FileHandler for\n", "error": "none", "author": "tom@organisms.be"}, {"index": "377", "colour": "orange", "code": "        you. If you set it to ``None`` or ``''``, it will remove the handler.\n", "error": "none", "author": "tom@organisms.be"}, {"index": "378", "colour": "orange", "code": "        \"\"\")\n", "error": "none", "author": "tom@organisms.be"}, {"index": "379", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "380", "colour": "orange", "code": "    # ------------------------- WSGI handlers ------------------------- #\n", "error": "none", "author": "tom@organisms.be"}, {"index": "381", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "382", "colour": "orange", "code": "    def _set_wsgi_handler(self, log, enable):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "383", "colour": "orange", "code": "        h = self._get_builtin_handler(log, \"wsgi\")\n", "error": "none", "author": "tom@organisms.be"}, {"index": "384", "colour": "orange", "code": "        if enable:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "385", "colour": "orange", "code": "            if not h:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "386", "colour": "orange", "code": "                h = WSGIErrorHandler()\n", "error": "none", "author": "tom@organisms.be"}, {"index": "387", "colour": "orange", "code": "                h.setFormatter(logfmt)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "388", "colour": "green", "code": "                h._cpbuiltin = \"wsgi\"\n", "error": "W", "author": "tom@organisms.be"}, {"index": "389", "colour": "orange", "code": "                log.addHandler(h)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "390", "colour": "orange", "code": "        elif h:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "391", "colour": "orange", "code": "            log.handlers.remove(h)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "392", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "393", "colour": "orange", "code": "    def _get_wsgi(self):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "394", "colour": "orange", "code": "        return bool(self._get_builtin_handler(self.error_log, \"wsgi\"))\n", "error": "none", "author": "tom@organisms.be"}, {"index": "395", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "396", "colour": "orange", "code": "    def _set_wsgi(self, newvalue):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "397", "colour": "orange", "code": "        self._set_wsgi_handler(self.error_log, newvalue)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "398", "colour": "orange", "code": "    wsgi = property(_get_wsgi, _set_wsgi,\n", "error": "none", "author": "tom@organisms.be"}, {"index": "399", "colour": "orange", "code": "        doc=\"\"\"Write errors to wsgi.errors.\n", "error": "none", "author": "tom@organisms.be"}, {"index": "400", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "401", "colour": "orange", "code": "        If you set this to True, it'll add the appropriate\n", "error": "none", "author": "tom@organisms.be"}, {"index": "402", "colour": "orange", "code": "        :class:`WSGIErrorHandler<cherrypy._cplogging.WSGIErrorHandler>` for you\n", "error": "none", "author": "tom@organisms.be"}, {"index": "403", "colour": "orange", "code": "        (which writes errors to ``wsgi.errors``).\n", "error": "none", "author": "tom@organisms.be"}, {"index": "404", "colour": "orange", "code": "        If you set it to False, it will remove the handler.\n", "error": "none", "author": "tom@organisms.be"}, {"index": "405", "colour": "orange", "code": "        \"\"\")\n", "error": "none", "author": "tom@organisms.be"}, {"index": "406", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "407", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "408", "colour": "orange", "code": "class WSGIErrorHandler(logging.Handler):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "409", "colour": "orange", "code": "    \"A handler class which writes logging records to environ['wsgi.errors'].\"\n", "error": "none", "author": "tom@organisms.be"}, {"index": "410", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "411", "colour": "orange", "code": "    def flush(self):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "412", "colour": "orange", "code": "        \"\"\"Flushes the stream.\"\"\"\n", "error": "none", "author": "tom@organisms.be"}, {"index": "413", "colour": "orange", "code": "        try:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "414", "colour": "orange", "code": "            stream = cherrypy.serving.request.wsgi_environ.get('wsgi.errors')\n", "error": "none", "author": "tom@organisms.be"}, {"index": "415", "colour": "orange", "code": "        except (AttributeError, KeyError):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "416", "colour": "orange", "code": "            pass\n", "error": "none", "author": "tom@organisms.be"}, {"index": "417", "colour": "orange", "code": "        else:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "418", "colour": "orange", "code": "            stream.flush()\n", "error": "none", "author": "tom@organisms.be"}, {"index": "419", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "420", "colour": "orange", "code": "    def emit(self, record):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "421", "colour": "orange", "code": "        \"\"\"Emit a record.\"\"\"\n", "error": "none", "author": "tom@organisms.be"}, {"index": "422", "colour": "orange", "code": "        try:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "423", "colour": "orange", "code": "            stream = cherrypy.serving.request.wsgi_environ.get('wsgi.errors')\n", "error": "none", "author": "tom@organisms.be"}, {"index": "424", "colour": "orange", "code": "        except (AttributeError, KeyError):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "425", "colour": "orange", "code": "            pass\n", "error": "none", "author": "tom@organisms.be"}, {"index": "426", "colour": "orange", "code": "        else:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "427", "colour": "orange", "code": "            try:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "428", "colour": "orange", "code": "                msg = self.format(record)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "429", "colour": "orange", "code": "                fs = \"%s\\n\"\n", "error": "none", "author": "tom@organisms.be"}, {"index": "430", "colour": "orange", "code": "                import types\n", "error": "none", "author": "tom@organisms.be"}, {"index": "431", "colour": "orange", "code": "                if not hasattr(types, \"UnicodeType\"): #if no unicode support...\n", "error": "none", "author": "tom@organisms.be"}, {"index": "432", "colour": "orange", "code": "                    stream.write(fs % msg)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "433", "colour": "orange", "code": "                else:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "434", "colour": "orange", "code": "                    try:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "435", "colour": "orange", "code": "                        stream.write(fs % msg)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "436", "colour": "orange", "code": "                    except UnicodeError:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "437", "colour": "orange", "code": "                        stream.write(fs % msg.encode(\"UTF-8\"))\n", "error": "none", "author": "tom@organisms.be"}, {"index": "438", "colour": "orange", "code": "                self.flush()\n", "error": "none", "author": "tom@organisms.be"}, {"index": "439", "colour": "green", "code": "            except:\n", "error": "W", "author": "tom@organisms.be"}, {"index": "440", "colour": "orange", "code": "                self.handleError(record)\n", "error": "none", "author": "tom@organisms.be"}]}