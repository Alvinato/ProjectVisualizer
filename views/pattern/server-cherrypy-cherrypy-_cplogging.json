{"path": "/home/asumal/git/cs410/pattern/pattern/server/cherrypy/cherrypy/_cplogging.py", "lines": [[{"error": "none", "line": "1", "code": "\"\"\"\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "2", "code": "Simple config\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "3", "code": "=============\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "4", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "5", "code": "Although CherryPy uses the :mod:`Python logging module <logging>`, it does so\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "6", "code": "behind the scenes so that simple logging is simple, but complicated logging\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "7", "code": "is still possible. \"Simple\" logging means that you can log to the screen\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "8", "code": "(i.e. console/stdout) or to a file, and that you can easily have separate\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "9", "code": "error and access log files.\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "10", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "11", "code": "Here are the simplified logging settings. You use these by adding lines to\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "12", "code": "your config file or dict. You should set these at either the global level or\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "13", "code": "per application (see next), but generally not both.\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "14", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "15", "code": " * ``log.screen``: Set this to True to have both \"error\" and \"access\" messages\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "16", "code": "   printed to stdout.\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "17", "code": " * ``log.access_file``: Set this to an absolute filename where you want\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "18", "code": "   \"access\" messages written.\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "19", "code": " * ``log.error_file``: Set this to an absolute filename where you want \"error\"\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "20", "code": "   messages written.\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "21", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "22", "code": "Many events are automatically logged; to log your own application events, call\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "23", "code": ":func:`cherrypy.log`.\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "24", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "25", "code": "Architecture\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "26", "code": "============\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "27", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "28", "code": "Separate scopes\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "29", "code": "---------------\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "30", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "31", "code": "CherryPy provides log managers at both the global and application layers.\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "32", "code": "This means you can have one set of logging rules for your entire site,\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "33", "code": "and another set of rules specific to each application. The global log\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "34", "code": "manager is found at :func:`cherrypy.log`, and the log manager for each\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "35", "code": "application is found at :attr:`app.log<cherrypy._cptree.Application.log>`.\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "36", "code": "If you're inside a request, the latter is reachable from\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "37", "code": "``cherrypy.request.app.log``; if you're outside a request, you'll have to obtain\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "38", "code": "a reference to the ``app``: either the return value of\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "39", "code": ":func:`tree.mount()<cherrypy._cptree.Tree.mount>` or, if you used\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "40", "code": ":func:`quickstart()<cherrypy.quickstart>` instead, via ``cherrypy.tree.apps['/']``.\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "41", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "42", "code": "By default, the global logs are named \"cherrypy.error\" and \"cherrypy.access\",\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "43", "code": "and the application logs are named \"cherrypy.error.2378745\" and\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "44", "code": "\"cherrypy.access.2378745\" (the number is the id of the Application object).\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "45", "code": "This means that the application logs \"bubble up\" to the site logs, so if your\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "46", "code": "application has no log handlers, the site-level handlers will still log the\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "47", "code": "messages.\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "48", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "49", "code": "Errors vs. Access\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "50", "code": "-----------------\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "51", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "52", "code": "Each log manager handles both \"access\" messages (one per HTTP request) and\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "53", "code": "\"error\" messages (everything else). Note that the \"error\" log is not just for\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "54", "code": "errors! The format of access messages is highly formalized, but the error log\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "55", "code": "isn't--it receives messages from a variety of sources (including full error\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "56", "code": "tracebacks, if enabled).\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "57", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "58", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "59", "code": "Custom Handlers\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "60", "code": "===============\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "61", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "62", "code": "The simple settings above work by manipulating Python's standard :mod:`logging`\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "63", "code": "module. So when you need something more complex, the full power of the standard\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "64", "code": "module is yours to exploit. You can borrow or create custom handlers, formats,\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "65", "code": "filters, and much more. Here's an example that skips the standard FileHandler\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "66", "code": "and uses a RotatingFileHandler instead:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "67", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "68", "code": "::\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "69", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "70", "code": "    #python\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "71", "code": "    log = app.log\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "72", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "73", "code": "    # Remove the default FileHandlers if present.\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "74", "code": "    log.error_file = \"\"\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "75", "code": "    log.access_file = \"\"\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "76", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "77", "code": "    maxBytes = getattr(log, \"rot_maxBytes\", 10000000)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "78", "code": "    backupCount = getattr(log, \"rot_backupCount\", 1000)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "79", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "80", "code": "    # Make a new RotatingFileHandler for the error log.\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "81", "code": "    fname = getattr(log, \"rot_error_file\", \"error.log\")\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "82", "code": "    h = handlers.RotatingFileHandler(fname, 'a', maxBytes, backupCount)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "83", "code": "    h.setLevel(DEBUG)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "84", "code": "    h.setFormatter(_cplogging.logfmt)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "85", "code": "    log.error_log.addHandler(h)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "86", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "87", "code": "    # Make a new RotatingFileHandler for the access log.\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "88", "code": "    fname = getattr(log, \"rot_access_file\", \"access.log\")\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "89", "code": "    h = handlers.RotatingFileHandler(fname, 'a', maxBytes, backupCount)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "90", "code": "    h.setLevel(DEBUG)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "91", "code": "    h.setFormatter(_cplogging.logfmt)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "92", "code": "    log.access_log.addHandler(h)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "93", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "94", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "95", "code": "The ``rot_*`` attributes are pulled straight from the application log object.\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "96", "code": "Since \"log.*\" config entries simply set attributes on the log object, you can\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "97", "code": "add custom attributes to your heart's content. Note that these handlers are\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "98", "code": "used ''instead'' of the default, simple handlers outlined above (so don't set\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "99", "code": "the \"log.error_file\" config entry, for example).\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "100", "code": "\"\"\"\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "101", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "102", "code": "import datetime\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "103", "code": "import logging\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "104", "code": "# Silence the no-handlers \"warning\" (stderr write!) in stdlib logging\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "105", "code": "logging.Logger.manager.emittedNoHandlerWarning = 1\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "106", "code": "logfmt = logging.Formatter(\"%(message)s\")\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "107", "code": "import os\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "108", "code": "import sys\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "109", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "110", "code": "import cherrypy\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "111", "code": "from cherrypy import _cperror\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "112", "code": "from cherrypy._cpcompat import ntob, py3k\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "113", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "114", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "115", "code": "class NullHandler(logging.Handler):\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "116", "code": "    \"\"\"A no-op logging handler to silence the logging.lastResort handler.\"\"\"\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "117", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "118", "code": "    def handle(self, record):\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "119", "code": "        pass\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "120", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "121", "code": "    def emit(self, record):\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "122", "code": "        pass\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "123", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "124", "code": "    def createLock(self):\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "W", "line": "125", "code": "        self.lock = None\n", "colour": "purple", "author": "tom@organisms.be"}, {"error": "none", "line": "126", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "127", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "128", "code": "class LogManager(object):\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "129", "code": "    \"\"\"An object to assist both simple and advanced logging.\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "130", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "131", "code": "    ``cherrypy.log`` is an instance of this class.\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "132", "code": "    \"\"\"\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "133", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "134", "code": "    appid = None\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "135", "code": "    \"\"\"The id() of the Application object which owns this log manager. If this\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "136", "code": "    is a global log manager, appid is None.\"\"\"\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "137", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "138", "code": "    error_log = None\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "139", "code": "    \"\"\"The actual :class:`logging.Logger` instance for error messages.\"\"\"\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "140", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "141", "code": "    access_log = None\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "142", "code": "    \"\"\"The actual :class:`logging.Logger` instance for access messages.\"\"\"\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "143", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "144", "code": "    if py3k:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "145", "code": "        access_log_format = \\\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "146", "code": "            '{h} {l} {u} {t} \"{r}\" {s} {b} \"{f}\" \"{a}\"'\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "147", "code": "    else:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "148", "code": "        access_log_format = \\\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "149", "code": "            '%(h)s %(l)s %(u)s %(t)s \"%(r)s\" %(s)s %(b)s \"%(f)s\" \"%(a)s\"'\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "150", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "151", "code": "    logger_root = None\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "152", "code": "    \"\"\"The \"top-level\" logger name.\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "153", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "154", "code": "    This string will be used as the first segment in the Logger names.\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "155", "code": "    The default is \"cherrypy\", for example, in which case the Logger names\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "156", "code": "    will be of the form::\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "157", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "158", "code": "        cherrypy.error.<appid>\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "159", "code": "        cherrypy.access.<appid>\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "160", "code": "    \"\"\"\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "161", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "162", "code": "    def __init__(self, appid=None, logger_root=\"cherrypy\"):\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "163", "code": "        self.logger_root = logger_root\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "164", "code": "        self.appid = appid\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "165", "code": "        if appid is None:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "166", "code": "            self.error_log = logging.getLogger(\"%s.error\" % logger_root)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "167", "code": "            self.access_log = logging.getLogger(\"%s.access\" % logger_root)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "168", "code": "        else:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "169", "code": "            self.error_log = logging.getLogger(\"%s.error.%s\" % (logger_root, appid))\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "C", "line": "170", "code": "            self.access_log = logging.getLogger(\"%s.access.%s\" % (logger_root, appid))\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "171", "code": "        self.error_log.setLevel(logging.INFO)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "172", "code": "        self.access_log.setLevel(logging.INFO)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "173", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "174", "code": "        # Silence the no-handlers \"warning\" (stderr write!) in stdlib logging\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "175", "code": "        self.error_log.addHandler(NullHandler())\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "176", "code": "        self.access_log.addHandler(NullHandler())\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "177", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "178", "code": "        cherrypy.engine.subscribe('graceful', self.reopen_files)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "179", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "180", "code": "    def reopen_files(self):\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "181", "code": "        \"\"\"Close and reopen all file handlers.\"\"\"\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "182", "code": "        for log in (self.error_log, self.access_log):\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "183", "code": "            for h in log.handlers:\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "184", "code": "                if isinstance(h, logging.FileHandler):\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "185", "code": "                    h.acquire()\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "186", "code": "                    h.stream.close()\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "187", "code": "                    h.stream = open(h.baseFilename, h.mode)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "188", "code": "                    h.release()\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "189", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "190", "code": "    def error(self, msg='', context='', severity=logging.INFO, traceback=False):\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "191", "code": "        \"\"\"Write the given ``msg`` to the error log.\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "192", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "193", "code": "        This is not just for errors! Applications may call this at any time\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "194", "code": "        to log application-specific information.\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "195", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "196", "code": "        If ``traceback`` is True, the traceback of the current exception\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "197", "code": "        (if any) will be appended to ``msg``.\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "198", "code": "        \"\"\"\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "199", "code": "        if traceback:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "200", "code": "            msg += _cperror.format_exc()\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "201", "code": "        self.error_log.log(severity, ' '.join((self.time(), context, msg)))\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "202", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "203", "code": "    def __call__(self, *args, **kwargs):\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "204", "code": "        \"\"\"An alias for ``error``.\"\"\"\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "205", "code": "        return self.error(*args, **kwargs)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "206", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "207", "code": "    def access(self):\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "208", "code": "        \"\"\"Write to the access log (in Apache/NCSA Combined Log format).\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "209", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "210", "code": "        See http://httpd.apache.org/docs/2.0/logs.html#combined for format\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "211", "code": "        details.\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "212", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "213", "code": "        CherryPy calls this automatically for you. Note there are no arguments;\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "214", "code": "        it collects the data itself from\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "215", "code": "        :class:`cherrypy.request<cherrypy._cprequest.Request>`.\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "216", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "217", "code": "        Like Apache started doing in 2.0.46, non-printable and other special\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "218", "code": "        characters in %r (and we expand that to all parts) are escaped using\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "219", "code": "        \\\\xhh sequences, where hh stands for the hexadecimal representation\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "220", "code": "        of the raw byte. Exceptions from this rule are \" and \\\\, which are\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "221", "code": "        escaped by prepending a backslash, and all whitespace characters,\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "222", "code": "        which are written in their C-style notation (\\\\n, \\\\t, etc).\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "223", "code": "        \"\"\"\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "224", "code": "        request = cherrypy.serving.request\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "225", "code": "        remote = request.remote\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "226", "code": "        response = cherrypy.serving.response\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "227", "code": "        outheaders = response.headers\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "228", "code": "        inheaders = request.headers\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "229", "code": "        if response.output_status is None:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "230", "code": "            status = \"-\"\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "231", "code": "        else:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "232", "code": "            status = response.output_status.split(ntob(\" \"), 1)[0]\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "233", "code": "            if py3k:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "234", "code": "                status = status.decode('ISO-8859-1')\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "235", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "236", "code": "        atoms = {'h': remote.name or remote.ip,\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "237", "code": "                 'l': '-',\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "238", "code": "                 'u': getattr(request, \"login\", None) or \"-\",\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "239", "code": "                 't': self.time(),\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "240", "code": "                 'r': request.request_line,\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "241", "code": "                 's': status,\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "242", "code": "                 'b': dict.get(outheaders, 'Content-Length', '') or \"-\",\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "243", "code": "                 'f': dict.get(inheaders, 'Referer', ''),\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "244", "code": "                 'a': dict.get(inheaders, 'User-Agent', ''),\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "245", "code": "                 }\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "246", "code": "        if py3k:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "247", "code": "            for k, v in atoms.items():\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "248", "code": "                if not isinstance(v, str):\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "249", "code": "                    v = str(v)\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "C", "line": "250", "code": "                v = v.replace('\"', '\\\\\"').encode('utf8')\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "251", "code": "                # Fortunately, repr(str) escapes unprintable chars, \\n, \\t, etc\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "252", "code": "                # and backslash for us. All we have to do is strip the quotes.\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "253", "code": "                v = repr(v)[2:-1]\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "254", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "255", "code": "                # in python 3.0 the repr of bytes (as returned by encode)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "256", "code": "                # uses double \\'s.  But then the logger escapes them yet, again\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "257", "code": "                # resulting in quadruple slashes.  Remove the extra one here.\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "258", "code": "                v = v.replace('\\\\\\\\', '\\\\')\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "259", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "260", "code": "                # Escape double-quote.\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "261", "code": "                atoms[k] = v\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "262", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "263", "code": "            try:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "W", "line": "264", "code": "                self.access_log.log(logging.INFO, self.access_log_format.format(**atoms))\n", "colour": "purple", "author": "tom@organisms.be"}, {"error": "W", "line": "265", "code": "            except:\n", "colour": "purple", "author": "tom@organisms.be"}, {"error": "none", "line": "266", "code": "                self(traceback=True)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "267", "code": "        else:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "268", "code": "            for k, v in atoms.items():\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "269", "code": "                if isinstance(v, unicode):\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "270", "code": "                    v = v.encode('utf8')\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "271", "code": "                elif not isinstance(v, str):\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "272", "code": "                    v = str(v)\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "273", "code": "                # Fortunately, repr(str) escapes unprintable chars, \\n, \\t, etc\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "274", "code": "                # and backslash for us. All we have to do is strip the quotes.\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "275", "code": "                v = repr(v)[1:-1]\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "276", "code": "                # Escape double-quote.\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "277", "code": "                atoms[k] = v.replace('\"', '\\\\\"')\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "278", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "279", "code": "            try:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "W", "line": "280", "code": "                self.access_log.log(logging.INFO, self.access_log_format % atoms)\n", "colour": "purple", "author": "tom@organisms.be"}, {"error": "W", "line": "281", "code": "            except:\n", "colour": "purple", "author": "tom@organisms.be"}, {"error": "none", "line": "282", "code": "                self(traceback=True)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "283", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "R", "line": "284", "code": "    def time(self):\n", "colour": "green", "author": "tom@organisms.be"}, {"error": "none", "line": "285", "code": "        \"\"\"Return now() in Apache Common Log Format (no timezone).\"\"\"\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "286", "code": "        now = datetime.datetime.now()\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "287", "code": "        monthnames = ['jan', 'feb', 'mar', 'apr', 'may', 'jun',\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "288", "code": "                      'jul', 'aug', 'sep', 'oct', 'nov', 'dec']\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "289", "code": "        month = monthnames[now.month - 1].capitalize()\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "290", "code": "        return ('[%02d/%s/%04d:%02d:%02d:%02d]' %\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "291", "code": "                (now.day, month, now.year, now.hour, now.minute, now.second))\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "292", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "R", "line": "293", "code": "    def _get_builtin_handler(self, log, key):\n", "colour": "green", "author": "tom@organisms.be"}, {"error": "C", "line": "294", "code": "        for h in log.handlers:\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "295", "code": "            if getattr(h, \"_cpbuiltin\", None) == key:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "296", "code": "                return h\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "297", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "298", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "299", "code": "    # ------------------------- Screen handlers ------------------------- #\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "300", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "301", "code": "    def _set_screen_handler(self, log, enable, stream=None):\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "C", "line": "302", "code": "        h = self._get_builtin_handler(log, \"screen\")\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "303", "code": "        if enable:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "304", "code": "            if not h:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "305", "code": "                if stream is None:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "306", "code": "                    stream=sys.stderr\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "C", "line": "307", "code": "                h = logging.StreamHandler(stream)\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "308", "code": "                h.setFormatter(logfmt)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "W", "line": "309", "code": "                h._cpbuiltin = \"screen\"\n", "colour": "purple", "author": "tom@organisms.be"}, {"error": "none", "line": "310", "code": "                log.addHandler(h)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "311", "code": "        elif h:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "312", "code": "            log.handlers.remove(h)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "313", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "314", "code": "    def _get_screen(self):\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "C", "line": "315", "code": "        h = self._get_builtin_handler\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "316", "code": "        has_h = h(self.error_log, \"screen\") or h(self.access_log, \"screen\")\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "317", "code": "        return bool(has_h)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "318", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "319", "code": "    def _set_screen(self, newvalue):\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "320", "code": "        self._set_screen_handler(self.error_log, newvalue, stream=sys.stderr)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "321", "code": "        self._set_screen_handler(self.access_log, newvalue, stream=sys.stdout)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "322", "code": "    screen = property(_get_screen, _set_screen,\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "323", "code": "        doc=\"\"\"Turn stderr/stdout logging on or off.\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "324", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "325", "code": "        If you set this to True, it'll add the appropriate StreamHandler for\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "326", "code": "        you. If you set it to False, it will remove the handler.\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "327", "code": "        \"\"\")\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "328", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "329", "code": "    # -------------------------- File handlers -------------------------- #\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "330", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "R", "line": "331", "code": "    def _add_builtin_file_handler(self, log, fname):\n", "colour": "green", "author": "tom@organisms.be"}, {"error": "C", "line": "332", "code": "        h = logging.FileHandler(fname)\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "333", "code": "        h.setFormatter(logfmt)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "W", "line": "334", "code": "        h._cpbuiltin = \"file\"\n", "colour": "purple", "author": "tom@organisms.be"}, {"error": "none", "line": "335", "code": "        log.addHandler(h)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "336", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "337", "code": "    def _set_file_handler(self, log, filename):\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "C", "line": "338", "code": "        h = self._get_builtin_handler(log, \"file\")\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "339", "code": "        if filename:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "340", "code": "            if h:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "341", "code": "                if h.baseFilename != os.path.abspath(filename):\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "342", "code": "                    h.close()\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "343", "code": "                    log.handlers.remove(h)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "344", "code": "                    self._add_builtin_file_handler(log, filename)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "345", "code": "            else:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "346", "code": "                self._add_builtin_file_handler(log, filename)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "347", "code": "        else:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "348", "code": "            if h:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "349", "code": "                h.close()\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "350", "code": "                log.handlers.remove(h)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "351", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "352", "code": "    def _get_error_file(self):\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "C", "line": "353", "code": "        h = self._get_builtin_handler(self.error_log, \"file\")\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "354", "code": "        if h:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "355", "code": "            return h.baseFilename\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "356", "code": "        return ''\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "357", "code": "    def _set_error_file(self, newvalue):\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "358", "code": "        self._set_file_handler(self.error_log, newvalue)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "359", "code": "    error_file = property(_get_error_file, _set_error_file,\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "360", "code": "        doc=\"\"\"The filename for self.error_log.\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "361", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "362", "code": "        If you set this to a string, it'll add the appropriate FileHandler for\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "363", "code": "        you. If you set it to ``None`` or ``''``, it will remove the handler.\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "364", "code": "        \"\"\")\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "365", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "366", "code": "    def _get_access_file(self):\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "C", "line": "367", "code": "        h = self._get_builtin_handler(self.access_log, \"file\")\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "368", "code": "        if h:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "369", "code": "            return h.baseFilename\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "370", "code": "        return ''\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "371", "code": "    def _set_access_file(self, newvalue):\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "372", "code": "        self._set_file_handler(self.access_log, newvalue)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "373", "code": "    access_file = property(_get_access_file, _set_access_file,\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "374", "code": "        doc=\"\"\"The filename for self.access_log.\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "375", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "376", "code": "        If you set this to a string, it'll add the appropriate FileHandler for\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "377", "code": "        you. If you set it to ``None`` or ``''``, it will remove the handler.\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "378", "code": "        \"\"\")\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "379", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "380", "code": "    # ------------------------- WSGI handlers ------------------------- #\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "381", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "382", "code": "    def _set_wsgi_handler(self, log, enable):\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "C", "line": "383", "code": "        h = self._get_builtin_handler(log, \"wsgi\")\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "384", "code": "        if enable:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "385", "code": "            if not h:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "386", "code": "                h = WSGIErrorHandler()\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "387", "code": "                h.setFormatter(logfmt)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "W", "line": "388", "code": "                h._cpbuiltin = \"wsgi\"\n", "colour": "purple", "author": "tom@organisms.be"}, {"error": "none", "line": "389", "code": "                log.addHandler(h)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "390", "code": "        elif h:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "391", "code": "            log.handlers.remove(h)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "392", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "393", "code": "    def _get_wsgi(self):\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "394", "code": "        return bool(self._get_builtin_handler(self.error_log, \"wsgi\"))\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "395", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "396", "code": "    def _set_wsgi(self, newvalue):\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "397", "code": "        self._set_wsgi_handler(self.error_log, newvalue)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "398", "code": "    wsgi = property(_get_wsgi, _set_wsgi,\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "399", "code": "        doc=\"\"\"Write errors to wsgi.errors.\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "400", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "401", "code": "        If you set this to True, it'll add the appropriate\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "402", "code": "        :class:`WSGIErrorHandler<cherrypy._cplogging.WSGIErrorHandler>` for you\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "403", "code": "        (which writes errors to ``wsgi.errors``).\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "404", "code": "        If you set it to False, it will remove the handler.\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "405", "code": "        \"\"\")\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "406", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "407", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "408", "code": "class WSGIErrorHandler(logging.Handler):\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "409", "code": "    \"A handler class which writes logging records to environ['wsgi.errors'].\"\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "410", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "411", "code": "    def flush(self):\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "412", "code": "        \"\"\"Flushes the stream.\"\"\"\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "413", "code": "        try:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "414", "code": "            stream = cherrypy.serving.request.wsgi_environ.get('wsgi.errors')\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "415", "code": "        except (AttributeError, KeyError):\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "416", "code": "            pass\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "417", "code": "        else:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "418", "code": "            stream.flush()\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "419", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "420", "code": "    def emit(self, record):\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "421", "code": "        \"\"\"Emit a record.\"\"\"\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "422", "code": "        try:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "423", "code": "            stream = cherrypy.serving.request.wsgi_environ.get('wsgi.errors')\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "424", "code": "        except (AttributeError, KeyError):\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "425", "code": "            pass\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "426", "code": "        else:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "427", "code": "            try:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "428", "code": "                msg = self.format(record)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "429", "code": "                fs = \"%s\\n\"\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "430", "code": "                import types\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "431", "code": "                if not hasattr(types, \"UnicodeType\"): #if no unicode support...\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "432", "code": "                    stream.write(fs % msg)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "433", "code": "                else:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "434", "code": "                    try:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "435", "code": "                        stream.write(fs % msg)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "436", "code": "                    except UnicodeError:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "437", "code": "                        stream.write(fs % msg.encode(\"UTF-8\"))\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "438", "code": "                self.flush()\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "W", "line": "439", "code": "            except:\n", "colour": "purple", "author": "tom@organisms.be"}, {"error": "none", "line": "440", "code": "                self.handleError(record)\n", "colour": "black", "author": "tom@organisms.be"}]]}