{"path": "/home/asumal/git/cs410/pattern/pattern/server/cherrypy/cherrypy/_cpreqbody.py", "lines": [[{"error": "none", "line": "1", "code": "\"\"\"Request body processing for CherryPy.\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "2", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "3", "code": ".. versionadded:: 3.2\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "4", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "5", "code": "Application authors have complete control over the parsing of HTTP request\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "6", "code": "entities. In short, :attr:`cherrypy.request.body<cherrypy._cprequest.Request.body>`\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "C", "line": "7", "code": "is now always set to an instance of :class:`RequestBody<cherrypy._cpreqbody.RequestBody>`,\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "8", "code": "and *that* class is a subclass of :class:`Entity<cherrypy._cpreqbody.Entity>`.\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "9", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "10", "code": "When an HTTP request includes an entity body, it is often desirable to\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "11", "code": "provide that information to applications in a form other than the raw bytes.\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "12", "code": "Different content types demand different approaches. Examples:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "13", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "14", "code": " * For a GIF file, we want the raw bytes in a stream.\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "15", "code": " * An HTML form is better parsed into its component fields, and each text field\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "16", "code": "   decoded from bytes to unicode.\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "17", "code": " * A JSON body should be deserialized into a Python dict or list.\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "18", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "19", "code": "When the request contains a Content-Type header, the media type is used as a\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "20", "code": "key to look up a value in the\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "21", "code": ":attr:`request.body.processors<cherrypy._cpreqbody.Entity.processors>` dict.\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "22", "code": "If the full media\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "23", "code": "type is not found, then the major type is tried; for example, if no processor\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "24", "code": "is found for the 'image/jpeg' type, then we look for a processor for the 'image'\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "25", "code": "types altogether. If neither the full type nor the major type has a matching\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "26", "code": "processor, then a default processor is used\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "27", "code": "(:func:`default_proc<cherrypy._cpreqbody.Entity.default_proc>`). For most\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "28", "code": "types, this means no processing is done, and the body is left unread as a\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "29", "code": "raw byte stream. Processors are configurable in an 'on_start_resource' hook.\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "30", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "31", "code": "Some processors, especially those for the 'text' types, attempt to decode bytes\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "32", "code": "to unicode. If the Content-Type request header includes a 'charset' parameter,\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "33", "code": "this is used to decode the entity. Otherwise, one or more default charsets may\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "34", "code": "be attempted, although this decision is up to each processor. If a processor\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "35", "code": "successfully decodes an Entity or Part, it should set the\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "36", "code": ":attr:`charset<cherrypy._cpreqbody.Entity.charset>` attribute\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "37", "code": "on the Entity or Part to the name of the successful charset, so that\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "38", "code": "applications can easily re-encode or transcode the value if they wish.\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "39", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "40", "code": "If the Content-Type of the request entity is of major type 'multipart', then\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "41", "code": "the above parsing process, and possibly a decoding process, is performed for\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "42", "code": "each part.\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "43", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "44", "code": "For both the full entity and multipart parts, a Content-Disposition header may\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "45", "code": "be used to fill :attr:`name<cherrypy._cpreqbody.Entity.name>` and\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "46", "code": ":attr:`filename<cherrypy._cpreqbody.Entity.filename>` attributes on the\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "47", "code": "request.body or the Part.\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "48", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "49", "code": ".. _custombodyprocessors:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "50", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "51", "code": "Custom Processors\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "52", "code": "=================\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "53", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "54", "code": "You can add your own processors for any specific or major MIME type. Simply add\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "55", "code": "it to the :attr:`processors<cherrypy._cprequest.Entity.processors>` dict in a\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "56", "code": "hook/tool that runs at ``on_start_resource`` or ``before_request_body``.\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "57", "code": "Here's the built-in JSON tool for an example::\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "58", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "59", "code": "    def json_in(force=True, debug=False):\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "60", "code": "        request = cherrypy.serving.request\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "61", "code": "        def json_processor(entity):\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "62", "code": "            \\\"\"\"Read application/json data into request.json.\\\"\"\"\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "63", "code": "            if not entity.headers.get(\"Content-Length\", \"\"):\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "64", "code": "                raise cherrypy.HTTPError(411)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "65", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "66", "code": "            body = entity.fp.read()\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "67", "code": "            try:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "68", "code": "                request.json = json_decode(body)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "69", "code": "            except ValueError:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "70", "code": "                raise cherrypy.HTTPError(400, 'Invalid JSON document')\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "71", "code": "        if force:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "72", "code": "            request.body.processors.clear()\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "73", "code": "            request.body.default_proc = cherrypy.HTTPError(\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "74", "code": "                415, 'Expected an application/json content type')\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "75", "code": "        request.body.processors['application/json'] = json_processor\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "76", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "77", "code": "We begin by defining a new ``json_processor`` function to stick in the ``processors``\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "C", "line": "78", "code": "dictionary. All processor functions take a single argument, the ``Entity`` instance\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "79", "code": "they are to process. It will be called whenever a request is received (for those\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "80", "code": "URI's where the tool is turned on) which has a ``Content-Type`` of\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "81", "code": "\"application/json\".\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "82", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "83", "code": "First, it checks for a valid ``Content-Length`` (raising 411 if not valid), then\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "84", "code": "reads the remaining bytes on the socket. The ``fp`` object knows its own length, so\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "85", "code": "it won't hang waiting for data that never arrives. It will return when all data\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "86", "code": "has been read. Then, we decode those bytes using Python's built-in ``json`` module,\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "87", "code": "and stick the decoded result onto ``request.json`` . If it cannot be decoded, we\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "88", "code": "raise 400.\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "89", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "90", "code": "If the \"force\" argument is True (the default), the ``Tool`` clears the ``processors``\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "C", "line": "91", "code": "dict so that request entities of other ``Content-Types`` aren't parsed at all. Since\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "C", "line": "92", "code": "there's no entry for those invalid MIME types, the ``default_proc`` method of ``cherrypy.request.body``\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "C", "line": "93", "code": "is called. But this does nothing by default (usually to provide the page handler an opportunity to handle it.)\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "C", "line": "94", "code": "But in our case, we want to raise 415, so we replace ``request.body.default_proc``\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "95", "code": "with the error (``HTTPError`` instances, when called, raise themselves).\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "96", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "97", "code": "If we were defining a custom processor, we can do so without making a ``Tool``. Just add the config entry::\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "98", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "99", "code": "    request.body.processors = {'application/json': json_processor}\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "100", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "101", "code": "Note that you can only replace the ``processors`` dict wholesale this way, not update the existing one.\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "102", "code": "\"\"\"\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "103", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "104", "code": "try:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "105", "code": "    from io import DEFAULT_BUFFER_SIZE\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "106", "code": "except ImportError:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "107", "code": "    DEFAULT_BUFFER_SIZE = 8192\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "108", "code": "import re\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "109", "code": "import sys\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "110", "code": "import tempfile\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "111", "code": "try:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "112", "code": "    from urllib import unquote_plus\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "113", "code": "except ImportError:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "114", "code": "    def unquote_plus(bs):\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "115", "code": "        \"\"\"Bytes version of urllib.parse.unquote_plus.\"\"\"\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "116", "code": "        bs = bs.replace(ntob('+'), ntob(' '))\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "117", "code": "        atoms = bs.split(ntob('%'))\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "118", "code": "        for i in range(1, len(atoms)):\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "119", "code": "            item = atoms[i]\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "120", "code": "            try:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "121", "code": "                pct = int(item[:2], 16)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "122", "code": "                atoms[i] = bytes([pct]) + item[2:]\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "123", "code": "            except ValueError:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "124", "code": "                pass\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "125", "code": "        return ntob('').join(atoms)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "126", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "127", "code": "import cherrypy\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "W", "line": "128", "code": "from cherrypy._cpcompat import basestring, ntob, ntou\n", "colour": "purple", "author": "tom@organisms.be"}, {"error": "none", "line": "129", "code": "from cherrypy.lib import httputil\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "130", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "131", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "132", "code": "# -------------------------------- Processors -------------------------------- #\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "133", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "R", "line": "134", "code": "def process_urlencoded(entity):\n", "colour": "green", "author": "tom@organisms.be"}, {"error": "none", "line": "135", "code": "    \"\"\"Read application/x-www-form-urlencoded data into entity.params.\"\"\"\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "136", "code": "    qs = entity.fp.read()\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "137", "code": "    for charset in entity.attempt_charsets:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "138", "code": "        try:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "139", "code": "            params = {}\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "140", "code": "            for aparam in qs.split(ntob('&')):\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "141", "code": "                for pair in aparam.split(ntob(';')):\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "142", "code": "                    if not pair:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "143", "code": "                        continue\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "144", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "145", "code": "                    atoms = pair.split(ntob('='), 1)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "146", "code": "                    if len(atoms) == 1:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "147", "code": "                        atoms.append(ntob(''))\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "148", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "149", "code": "                    key = unquote_plus(atoms[0]).decode(charset)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "150", "code": "                    value = unquote_plus(atoms[1]).decode(charset)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "151", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "152", "code": "                    if key in params:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "153", "code": "                        if not isinstance(params[key], list):\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "154", "code": "                            params[key] = [params[key]]\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "155", "code": "                        params[key].append(value)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "156", "code": "                    else:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "157", "code": "                        params[key] = value\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "158", "code": "        except UnicodeDecodeError:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "159", "code": "            pass\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "160", "code": "        else:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "161", "code": "            entity.charset = charset\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "162", "code": "            break\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "163", "code": "    else:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "164", "code": "        raise cherrypy.HTTPError(\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "165", "code": "            400, \"The request entity could not be decoded. The following \"\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "166", "code": "            \"charsets were attempted: %s\" % repr(entity.attempt_charsets))\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "167", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "168", "code": "    # Now that all values have been successfully parsed and decoded,\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "169", "code": "    # apply them to the entity.params dict.\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "170", "code": "    for key, value in params.items():\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "171", "code": "        if key in entity.params:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "172", "code": "            if not isinstance(entity.params[key], list):\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "173", "code": "                entity.params[key] = [entity.params[key]]\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "174", "code": "            entity.params[key].append(value)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "175", "code": "        else:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "176", "code": "            entity.params[key] = value\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "177", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "178", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "179", "code": "def process_multipart(entity):\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "180", "code": "    \"\"\"Read all multipart parts into entity.parts.\"\"\"\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "181", "code": "    ib = \"\"\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "182", "code": "    if 'boundary' in entity.content_type.params:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "183", "code": "        # http://tools.ietf.org/html/rfc2046#section-5.1.1\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "184", "code": "        # \"The grammar for parameters on the Content-type field is such that it\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "185", "code": "        # is often necessary to enclose the boundary parameter values in quotes\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "186", "code": "        # on the Content-type line\"\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "187", "code": "        ib = entity.content_type.params['boundary'].strip('\"')\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "188", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "189", "code": "    if not re.match(\"^[ -~]{0,200}[!-~]$\", ib):\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "190", "code": "        raise ValueError('Invalid boundary in multipart form: %r' % (ib,))\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "191", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "192", "code": "    ib = ('--' + ib).encode('ascii')\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "193", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "194", "code": "    # Find the first marker\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "195", "code": "    while True:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "196", "code": "        b = entity.readline()\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "197", "code": "        if not b:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "198", "code": "            return\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "199", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "200", "code": "        b = b.strip()\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "201", "code": "        if b == ib:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "202", "code": "            break\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "203", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "204", "code": "    # Read all parts\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "205", "code": "    while True:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "206", "code": "        part = entity.part_class.from_fp(entity.fp, ib)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "207", "code": "        entity.parts.append(part)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "208", "code": "        part.process()\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "209", "code": "        if part.fp.done:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "210", "code": "            break\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "211", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "212", "code": "def process_multipart_form_data(entity):\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "213", "code": "    \"\"\"Read all multipart/form-data parts into entity.parts or entity.params.\"\"\"\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "214", "code": "    process_multipart(entity)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "215", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "216", "code": "    kept_parts = []\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "217", "code": "    for part in entity.parts:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "218", "code": "        if part.name is None:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "219", "code": "            kept_parts.append(part)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "220", "code": "        else:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "221", "code": "            if part.filename is None:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "222", "code": "                # It's a regular field\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "223", "code": "                value = part.fullvalue()\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "224", "code": "            else:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "225", "code": "                # It's a file upload. Retain the whole part so consumer code\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "226", "code": "                # has access to its .file and .filename attributes.\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "227", "code": "                value = part\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "228", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "229", "code": "            if part.name in entity.params:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "230", "code": "                if not isinstance(entity.params[part.name], list):\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "231", "code": "                    entity.params[part.name] = [entity.params[part.name]]\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "232", "code": "                entity.params[part.name].append(value)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "233", "code": "            else:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "234", "code": "                entity.params[part.name] = value\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "235", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "236", "code": "    entity.parts = kept_parts\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "237", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "238", "code": "def _old_process_multipart(entity):\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "239", "code": "    \"\"\"The behavior of 3.2 and lower. Deprecated and will be changed in 3.3.\"\"\"\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "240", "code": "    process_multipart(entity)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "241", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "242", "code": "    params = entity.params\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "243", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "244", "code": "    for part in entity.parts:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "245", "code": "        if part.name is None:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "246", "code": "            key = ntou('parts')\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "247", "code": "        else:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "248", "code": "            key = part.name\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "249", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "250", "code": "        if part.filename is None:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "251", "code": "            # It's a regular field\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "252", "code": "            value = part.fullvalue()\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "253", "code": "        else:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "254", "code": "            # It's a file upload. Retain the whole part so consumer code\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "255", "code": "            # has access to its .file and .filename attributes.\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "256", "code": "            value = part\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "257", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "258", "code": "        if key in params:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "259", "code": "            if not isinstance(params[key], list):\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "260", "code": "                params[key] = [params[key]]\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "261", "code": "            params[key].append(value)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "262", "code": "        else:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "263", "code": "            params[key] = value\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "264", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "265", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "266", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "267", "code": "# --------------------------------- Entities --------------------------------- #\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "268", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "269", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "R", "line": "270", "code": "class Entity(object):\n", "colour": "green", "author": "tom@organisms.be"}, {"error": "none", "line": "271", "code": "    \"\"\"An HTTP request body, or MIME multipart body.\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "272", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "273", "code": "    This class collects information about the HTTP request entity. When a\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "274", "code": "    given entity is of MIME type \"multipart\", each part is parsed into its own\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "275", "code": "    Entity instance, and the set of parts stored in\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "276", "code": "    :attr:`entity.parts<cherrypy._cpreqbody.Entity.parts>`.\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "277", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "278", "code": "    Between the ``before_request_body`` and ``before_handler`` tools, CherryPy\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "279", "code": "    tries to process the request body (if any) by calling\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "280", "code": "    :func:`request.body.process<cherrypy._cpreqbody.RequestBody.process`.\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "281", "code": "    This uses the ``content_type`` of the Entity to look up a suitable processor\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "282", "code": "    in :attr:`Entity.processors<cherrypy._cpreqbody.Entity.processors>`, a dict.\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "283", "code": "    If a matching processor cannot be found for the complete Content-Type,\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "284", "code": "    it tries again using the major type. For example, if a request with an\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "285", "code": "    entity of type \"image/jpeg\" arrives, but no processor can be found for\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "286", "code": "    that complete type, then one is sought for the major type \"image\". If a\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "287", "code": "    processor is still not found, then the\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "288", "code": "    :func:`default_proc<cherrypy._cpreqbody.Entity.default_proc>` method of the\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "289", "code": "    Entity is called (which does nothing by default; you can override this too).\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "290", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "291", "code": "    CherryPy includes processors for the \"application/x-www-form-urlencoded\"\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "292", "code": "    type, the \"multipart/form-data\" type, and the \"multipart\" major type.\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "293", "code": "    CherryPy 3.2 processes these types almost exactly as older versions.\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "294", "code": "    Parts are passed as arguments to the page handler using their\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "295", "code": "    ``Content-Disposition.name`` if given, otherwise in a generic \"parts\"\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "296", "code": "    argument. Each such part is either a string, or the\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "297", "code": "    :class:`Part<cherrypy._cpreqbody.Part>` itself if it's a file. (In this\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "298", "code": "    case it will have ``file`` and ``filename`` attributes, or possibly a\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "299", "code": "    ``value`` attribute). Each Part is itself a subclass of\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "300", "code": "    Entity, and has its own ``process`` method and ``processors`` dict.\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "301", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "302", "code": "    There is a separate processor for the \"multipart\" major type which is more\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "303", "code": "    flexible, and simply stores all multipart parts in\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "304", "code": "    :attr:`request.body.parts<cherrypy._cpreqbody.Entity.parts>`. You can\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "305", "code": "    enable it with::\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "306", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "307", "code": "        cherrypy.request.body.processors['multipart'] = _cpreqbody.process_multipart\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "308", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "309", "code": "    in an ``on_start_resource`` tool.\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "310", "code": "    \"\"\"\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "311", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "312", "code": "    # http://tools.ietf.org/html/rfc2046#section-4.1.2:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "313", "code": "    # \"The default character set, which must be assumed in the\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "314", "code": "    # absence of a charset parameter, is US-ASCII.\"\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "315", "code": "    # However, many browsers send data in utf-8 with no charset.\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "316", "code": "    attempt_charsets = ['utf-8']\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "W", "line": "317", "code": "    \"\"\"A list of strings, each of which should be a known encoding.\n", "colour": "purple", "author": "tom@organisms.be"}, {"error": "none", "line": "318", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "319", "code": "    When the Content-Type of the request body warrants it, each of the given\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "320", "code": "    encodings will be tried in order. The first one to successfully decode the\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "321", "code": "    entity without raising an error is stored as\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "322", "code": "    :attr:`entity.charset<cherrypy._cpreqbody.Entity.charset>`. This defaults\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "323", "code": "    to ``['utf-8']`` (plus 'ISO-8859-1' for \"text/\\*\" types, as required by\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "324", "code": "    `HTTP/1.1 <http://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.7.1>`_),\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "325", "code": "    but ``['us-ascii', 'utf-8']`` for multipart parts.\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "326", "code": "    \"\"\"\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "327", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "328", "code": "    charset = None\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "329", "code": "    \"\"\"The successful decoding; see \"attempt_charsets\" above.\"\"\"\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "330", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "331", "code": "    content_type = None\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "332", "code": "    \"\"\"The value of the Content-Type request header.\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "333", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "334", "code": "    If the Entity is part of a multipart payload, this will be the Content-Type\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "335", "code": "    given in the MIME headers for this part.\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "336", "code": "    \"\"\"\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "337", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "338", "code": "    default_content_type = 'application/x-www-form-urlencoded'\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "339", "code": "    \"\"\"This defines a default ``Content-Type`` to use if no Content-Type header\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "340", "code": "    is given. The empty string is used for RequestBody, which results in the\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "341", "code": "    request body not being read or parsed at all. This is by design; a missing\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "342", "code": "    ``Content-Type`` header in the HTTP request entity is an error at best,\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "343", "code": "    and a security hole at worst. For multipart parts, however, the MIME spec\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "344", "code": "    declares that a part with no Content-Type defaults to \"text/plain\"\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "345", "code": "    (see :class:`Part<cherrypy._cpreqbody.Part>`).\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "346", "code": "    \"\"\"\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "347", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "348", "code": "    filename = None\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "349", "code": "    \"\"\"The ``Content-Disposition.filename`` header, if available.\"\"\"\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "350", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "351", "code": "    fp = None\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "352", "code": "    \"\"\"The readable socket file object.\"\"\"\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "353", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "354", "code": "    headers = None\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "355", "code": "    \"\"\"A dict of request/multipart header names and values.\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "356", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "357", "code": "    This is a copy of the ``request.headers`` for the ``request.body``;\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "358", "code": "    for multipart parts, it is the set of headers for that part.\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "359", "code": "    \"\"\"\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "360", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "361", "code": "    length = None\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "362", "code": "    \"\"\"The value of the ``Content-Length`` header, if provided.\"\"\"\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "363", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "364", "code": "    name = None\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "365", "code": "    \"\"\"The \"name\" parameter of the ``Content-Disposition`` header, if any.\"\"\"\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "366", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "367", "code": "    params = None\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "368", "code": "    \"\"\"\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "369", "code": "    If the request Content-Type is 'application/x-www-form-urlencoded' or\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "370", "code": "    multipart, this will be a dict of the params pulled from the entity\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "371", "code": "    body; that is, it will be the portion of request.params that come\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "372", "code": "    from the message body (sometimes called \"POST params\", although they\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "373", "code": "    can be sent with various HTTP method verbs). This value is set between\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "374", "code": "    the 'before_request_body' and 'before_handler' hooks (assuming that\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "375", "code": "    process_request_body is True).\"\"\"\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "376", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "377", "code": "    processors = {'application/x-www-form-urlencoded': process_urlencoded,\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "378", "code": "                  'multipart/form-data': process_multipart_form_data,\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "379", "code": "                  'multipart': process_multipart,\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "380", "code": "                  }\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "381", "code": "    \"\"\"A dict of Content-Type names to processor methods.\"\"\"\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "382", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "383", "code": "    parts = None\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "384", "code": "    \"\"\"A list of Part instances if ``Content-Type`` is of major type \"multipart\".\"\"\"\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "385", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "386", "code": "    part_class = None\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "387", "code": "    \"\"\"The class used for multipart parts.\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "388", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "389", "code": "    You can replace this with custom subclasses to alter the processing of\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "390", "code": "    multipart parts.\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "391", "code": "    \"\"\"\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "392", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "R", "line": "393", "code": "    def __init__(self, fp, headers, params=None, parts=None):\n", "colour": "green", "author": "tom@organisms.be"}, {"error": "none", "line": "394", "code": "        # Make an instance-specific copy of the class processors\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "395", "code": "        # so Tools, etc. can replace them per-request.\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "396", "code": "        self.processors = self.processors.copy()\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "397", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "398", "code": "        self.fp = fp\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "399", "code": "        self.headers = headers\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "400", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "401", "code": "        if params is None:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "402", "code": "            params = {}\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "403", "code": "        self.params = params\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "404", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "405", "code": "        if parts is None:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "406", "code": "            parts = []\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "407", "code": "        self.parts = parts\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "408", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "409", "code": "        # Content-Type\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "410", "code": "        self.content_type = headers.elements('Content-Type')\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "411", "code": "        if self.content_type:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "412", "code": "            self.content_type = self.content_type[0]\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "413", "code": "        else:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "414", "code": "            self.content_type = httputil.HeaderElement.from_str(\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "415", "code": "                self.default_content_type)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "416", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "417", "code": "        # Copy the class 'attempt_charsets', prepending any Content-Type charset\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "418", "code": "        dec = self.content_type.params.get(\"charset\", None)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "419", "code": "        if dec:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "420", "code": "            self.attempt_charsets = [dec] + [c for c in self.attempt_charsets\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "421", "code": "                                             if c != dec]\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "422", "code": "        else:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "423", "code": "            self.attempt_charsets = self.attempt_charsets[:]\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "424", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "425", "code": "        # Length\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "426", "code": "        self.length = None\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "427", "code": "        clen = headers.get('Content-Length', None)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "428", "code": "        # If Transfer-Encoding is 'chunked', ignore any Content-Length.\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "429", "code": "        if clen is not None and 'chunked' not in headers.get('Transfer-Encoding', ''):\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "430", "code": "            try:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "431", "code": "                self.length = int(clen)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "432", "code": "            except ValueError:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "433", "code": "                pass\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "434", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "435", "code": "        # Content-Disposition\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "436", "code": "        self.name = None\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "437", "code": "        self.filename = None\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "438", "code": "        disp = headers.elements('Content-Disposition')\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "439", "code": "        if disp:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "440", "code": "            disp = disp[0]\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "441", "code": "            if 'name' in disp.params:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "442", "code": "                self.name = disp.params['name']\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "443", "code": "                if self.name.startswith('\"') and self.name.endswith('\"'):\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "444", "code": "                    self.name = self.name[1:-1]\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "445", "code": "            if 'filename' in disp.params:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "446", "code": "                self.filename = disp.params['filename']\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "447", "code": "                if self.filename.startswith('\"') and self.filename.endswith('\"'):\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "448", "code": "                    self.filename = self.filename[1:-1]\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "449", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "450", "code": "    # The 'type' attribute is deprecated in 3.2; remove it in 3.3.\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "451", "code": "    type = property(lambda self: self.content_type,\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "452", "code": "        doc=\"\"\"A deprecated alias for :attr:`content_type<cherrypy._cpreqbody.Entity.content_type>`.\"\"\")\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "453", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "454", "code": "    def read(self, size=None, fp_out=None):\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "455", "code": "        return self.fp.read(size, fp_out)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "456", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "457", "code": "    def readline(self, size=None):\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "458", "code": "        return self.fp.readline(size)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "459", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "460", "code": "    def readlines(self, sizehint=None):\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "461", "code": "        return self.fp.readlines(sizehint)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "462", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "463", "code": "    def __iter__(self):\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "464", "code": "        return self\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "465", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "466", "code": "    def __next__(self):\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "467", "code": "        line = self.readline()\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "468", "code": "        if not line:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "469", "code": "            raise StopIteration\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "470", "code": "        return line\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "471", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "472", "code": "    def next(self):\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "473", "code": "        return self.__next__()\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "474", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "475", "code": "    def read_into_file(self, fp_out=None):\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "476", "code": "        \"\"\"Read the request body into fp_out (or make_file() if None). Return fp_out.\"\"\"\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "477", "code": "        if fp_out is None:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "478", "code": "            fp_out = self.make_file()\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "479", "code": "        self.read(fp_out=fp_out)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "480", "code": "        return fp_out\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "481", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "R", "line": "482", "code": "    def make_file(self):\n", "colour": "green", "author": "tom@organisms.be"}, {"error": "none", "line": "483", "code": "        \"\"\"Return a file-like object into which the request body will be read.\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "484", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "485", "code": "        By default, this will return a TemporaryFile. Override as needed.\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "486", "code": "        See also :attr:`cherrypy._cpreqbody.Part.maxrambytes`.\"\"\"\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "487", "code": "        return tempfile.TemporaryFile()\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "488", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "489", "code": "    def fullvalue(self):\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "490", "code": "        \"\"\"Return this entity as a string, whether stored in a file or not.\"\"\"\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "E", "line": "491", "code": "        if self.file:\n", "colour": "yellow", "author": "tom@organisms.be"}, {"error": "none", "line": "492", "code": "            # It was stored in a tempfile. Read it.\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "E", "line": "493", "code": "            self.file.seek(0)\n", "colour": "yellow", "author": "tom@organisms.be"}, {"error": "E", "line": "494", "code": "            value = self.file.read()\n", "colour": "yellow", "author": "tom@organisms.be"}, {"error": "E", "line": "495", "code": "            self.file.seek(0)\n", "colour": "yellow", "author": "tom@organisms.be"}, {"error": "none", "line": "496", "code": "        else:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "E", "line": "497", "code": "            value = self.value\n", "colour": "yellow", "author": "tom@organisms.be"}, {"error": "none", "line": "498", "code": "        return value\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "499", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "500", "code": "    def process(self):\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "501", "code": "        \"\"\"Execute the best-match processor for the given media type.\"\"\"\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "502", "code": "        proc = None\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "503", "code": "        ct = self.content_type.value\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "504", "code": "        try:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "505", "code": "            proc = self.processors[ct]\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "506", "code": "        except KeyError:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "507", "code": "            toptype = ct.split('/', 1)[0]\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "508", "code": "            try:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "509", "code": "                proc = self.processors[toptype]\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "510", "code": "            except KeyError:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "511", "code": "                pass\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "512", "code": "        if proc is None:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "513", "code": "            self.default_proc()\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "514", "code": "        else:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "515", "code": "            proc(self)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "516", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "517", "code": "    def default_proc(self):\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "518", "code": "        \"\"\"Called if a more-specific processor is not found for the ``Content-Type``.\"\"\"\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "519", "code": "        # Leave the fp alone for someone else to read. This works fine\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "520", "code": "        # for request.body, but the Part subclasses need to override this\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "521", "code": "        # so they can move on to the next part.\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "522", "code": "        pass\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "523", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "524", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "525", "code": "class Part(Entity):\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "526", "code": "    \"\"\"A MIME part entity, part of a multipart entity.\"\"\"\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "527", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "528", "code": "    # \"The default character set, which must be assumed in the absence of a\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "529", "code": "    # charset parameter, is US-ASCII.\"\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "530", "code": "    attempt_charsets = ['us-ascii', 'utf-8']\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "W", "line": "531", "code": "    \"\"\"A list of strings, each of which should be a known encoding.\n", "colour": "purple", "author": "tom@organisms.be"}, {"error": "none", "line": "532", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "533", "code": "    When the Content-Type of the request body warrants it, each of the given\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "534", "code": "    encodings will be tried in order. The first one to successfully decode the\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "535", "code": "    entity without raising an error is stored as\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "536", "code": "    :attr:`entity.charset<cherrypy._cpreqbody.Entity.charset>`. This defaults\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "537", "code": "    to ``['utf-8']`` (plus 'ISO-8859-1' for \"text/\\*\" types, as required by\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "538", "code": "    `HTTP/1.1 <http://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.7.1>`_),\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "539", "code": "    but ``['us-ascii', 'utf-8']`` for multipart parts.\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "540", "code": "    \"\"\"\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "541", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "542", "code": "    boundary = None\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "543", "code": "    \"\"\"The MIME multipart boundary.\"\"\"\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "544", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "545", "code": "    default_content_type = 'text/plain'\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "546", "code": "    \"\"\"This defines a default ``Content-Type`` to use if no Content-Type header\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "547", "code": "    is given. The empty string is used for RequestBody, which results in the\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "548", "code": "    request body not being read or parsed at all. This is by design; a missing\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "549", "code": "    ``Content-Type`` header in the HTTP request entity is an error at best,\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "550", "code": "    and a security hole at worst. For multipart parts, however (this class),\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "551", "code": "    the MIME spec declares that a part with no Content-Type defaults to\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "552", "code": "    \"text/plain\".\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "553", "code": "    \"\"\"\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "554", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "555", "code": "    # This is the default in stdlib cgi. We may want to increase it.\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "556", "code": "    maxrambytes = 1000\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "557", "code": "    \"\"\"The threshold of bytes after which point the ``Part`` will store its data\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "558", "code": "    in a file (generated by :func:`make_file<cherrypy._cprequest.Entity.make_file>`)\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "559", "code": "    instead of a string. Defaults to 1000, just like the :mod:`cgi` module in\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "560", "code": "    Python's standard library.\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "561", "code": "    \"\"\"\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "562", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "563", "code": "    def __init__(self, fp, headers, boundary):\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "564", "code": "        Entity.__init__(self, fp, headers)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "565", "code": "        self.boundary = boundary\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "566", "code": "        self.file = None\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "567", "code": "        self.value = None\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "568", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "569", "code": "    def from_fp(cls, fp, boundary):\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "570", "code": "        headers = cls.read_headers(fp)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "571", "code": "        return cls(fp, headers, boundary)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "572", "code": "    from_fp = classmethod(from_fp)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "573", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "574", "code": "    def read_headers(cls, fp):\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "575", "code": "        headers = httputil.HeaderMap()\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "576", "code": "        while True:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "577", "code": "            line = fp.readline()\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "578", "code": "            if not line:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "579", "code": "                # No more data--illegal end of headers\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "580", "code": "                raise EOFError(\"Illegal end of headers.\")\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "581", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "582", "code": "            if line == ntob('\\r\\n'):\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "583", "code": "                # Normal end of headers\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "584", "code": "                break\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "585", "code": "            if not line.endswith(ntob('\\r\\n')):\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "586", "code": "                raise ValueError(\"MIME requires CRLF terminators: %r\" % line)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "587", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "588", "code": "            if line[0] in ntob(' \\t'):\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "589", "code": "                # It's a continuation line.\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "590", "code": "                v = line.strip().decode('ISO-8859-1')\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "591", "code": "            else:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "592", "code": "                k, v = line.split(ntob(\":\"), 1)\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "593", "code": "                k = k.strip().decode('ISO-8859-1')\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "594", "code": "                v = v.strip().decode('ISO-8859-1')\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "595", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "596", "code": "            existing = headers.get(k)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "597", "code": "            if existing:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "598", "code": "                v = \", \".join((existing, v))\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "599", "code": "            headers[k] = v\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "600", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "601", "code": "        return headers\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "602", "code": "    read_headers = classmethod(read_headers)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "603", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "R", "line": "604", "code": "    def read_lines_to_boundary(self, fp_out=None):\n", "colour": "green", "author": "tom@organisms.be"}, {"error": "none", "line": "605", "code": "        \"\"\"Read bytes from self.fp and return or write them to a file.\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "606", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "607", "code": "        If the 'fp_out' argument is None (the default), all bytes read are\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "608", "code": "        returned in a single byte string.\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "609", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "610", "code": "        If the 'fp_out' argument is not None, it must be a file-like object that\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "611", "code": "        supports the 'write' method; all bytes read will be written to the fp,\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "612", "code": "        and that fp is returned.\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "613", "code": "        \"\"\"\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "614", "code": "        endmarker = self.boundary + ntob(\"--\")\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "615", "code": "        delim = ntob(\"\")\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "616", "code": "        prev_lf = True\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "617", "code": "        lines = []\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "618", "code": "        seen = 0\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "619", "code": "        while True:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "620", "code": "            line = self.fp.readline(1<<16)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "621", "code": "            if not line:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "622", "code": "                raise EOFError(\"Illegal end of multipart body.\")\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "623", "code": "            if line.startswith(ntob(\"--\")) and prev_lf:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "624", "code": "                strippedline = line.strip()\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "625", "code": "                if strippedline == self.boundary:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "626", "code": "                    break\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "627", "code": "                if strippedline == endmarker:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "628", "code": "                    self.fp.finish()\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "629", "code": "                    break\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "630", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "631", "code": "            line = delim + line\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "632", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "633", "code": "            if line.endswith(ntob(\"\\r\\n\")):\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "634", "code": "                delim = ntob(\"\\r\\n\")\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "635", "code": "                line = line[:-2]\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "636", "code": "                prev_lf = True\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "637", "code": "            elif line.endswith(ntob(\"\\n\")):\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "638", "code": "                delim = ntob(\"\\n\")\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "639", "code": "                line = line[:-1]\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "640", "code": "                prev_lf = True\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "641", "code": "            else:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "642", "code": "                delim = ntob(\"\")\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "643", "code": "                prev_lf = False\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "644", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "645", "code": "            if fp_out is None:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "646", "code": "                lines.append(line)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "647", "code": "                seen += len(line)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "648", "code": "                if seen > self.maxrambytes:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "649", "code": "                    fp_out = self.make_file()\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "650", "code": "                    for line in lines:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "651", "code": "                        fp_out.write(line)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "652", "code": "            else:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "653", "code": "                fp_out.write(line)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "654", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "655", "code": "        if fp_out is None:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "656", "code": "            result = ntob('').join(lines)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "657", "code": "            for charset in self.attempt_charsets:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "658", "code": "                try:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "659", "code": "                    result = result.decode(charset)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "660", "code": "                except UnicodeDecodeError:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "661", "code": "                    pass\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "662", "code": "                else:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "663", "code": "                    self.charset = charset\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "664", "code": "                    return result\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "W", "line": "665", "code": "            else:\n", "colour": "purple", "author": "tom@organisms.be"}, {"error": "none", "line": "666", "code": "                raise cherrypy.HTTPError(\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "667", "code": "                    400, \"The request entity could not be decoded. The following \"\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "668", "code": "                    \"charsets were attempted: %s\" % repr(self.attempt_charsets))\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "669", "code": "        else:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "670", "code": "            fp_out.seek(0)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "671", "code": "            return fp_out\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "672", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "673", "code": "    def default_proc(self):\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "674", "code": "        \"\"\"Called if a more-specific processor is not found for the ``Content-Type``.\"\"\"\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "675", "code": "        if self.filename:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "676", "code": "            # Always read into a file if a .filename was given.\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "677", "code": "            self.file = self.read_into_file()\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "678", "code": "        else:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "679", "code": "            result = self.read_lines_to_boundary()\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "680", "code": "            if isinstance(result, basestring):\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "681", "code": "                self.value = result\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "682", "code": "            else:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "683", "code": "                self.file = result\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "684", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "685", "code": "    def read_into_file(self, fp_out=None):\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "686", "code": "        \"\"\"Read the request body into fp_out (or make_file() if None). Return fp_out.\"\"\"\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "687", "code": "        if fp_out is None:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "688", "code": "            fp_out = self.make_file()\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "689", "code": "        self.read_lines_to_boundary(fp_out=fp_out)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "690", "code": "        return fp_out\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "691", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "692", "code": "Entity.part_class = Part\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "693", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "694", "code": "try:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "695", "code": "    inf = float('inf')\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "696", "code": "except ValueError:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "697", "code": "    # Python 2.4 and lower\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "R", "line": "698", "code": "    class Infinity(object):\n", "colour": "green", "author": "tom@organisms.be"}, {"error": "none", "line": "699", "code": "        def __cmp__(self, other):\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "700", "code": "            return 1\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "701", "code": "        def __sub__(self, other):\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "702", "code": "            return self\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "703", "code": "    inf = Infinity()\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "704", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "705", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "706", "code": "comma_separated_headers = ['Accept', 'Accept-Charset', 'Accept-Encoding',\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "C", "line": "707", "code": "    'Accept-Language', 'Accept-Ranges', 'Allow', 'Cache-Control', 'Connection',\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "C", "line": "708", "code": "    'Content-Encoding', 'Content-Language', 'Expect', 'If-Match',\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "C", "line": "709", "code": "    'If-None-Match', 'Pragma', 'Proxy-Authenticate', 'Te', 'Trailer',\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "C", "line": "710", "code": "    'Transfer-Encoding', 'Upgrade', 'Vary', 'Via', 'Warning', 'Www-Authenticate']\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "711", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "712", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "713", "code": "class SizedReader:\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "714", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "R", "line": "715", "code": "    def __init__(self, fp, length, maxbytes, bufsize=DEFAULT_BUFFER_SIZE, has_trailers=False):\n", "colour": "green", "author": "tom@organisms.be"}, {"error": "none", "line": "716", "code": "        # Wrap our fp in a buffer so peek() works\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "717", "code": "        self.fp = fp\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "718", "code": "        self.length = length\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "719", "code": "        self.maxbytes = maxbytes\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "720", "code": "        self.buffer = ntob('')\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "721", "code": "        self.bufsize = bufsize\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "722", "code": "        self.bytes_read = 0\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "723", "code": "        self.done = False\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "724", "code": "        self.has_trailers = has_trailers\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "725", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "R", "line": "726", "code": "    def read(self, size=None, fp_out=None):\n", "colour": "green", "author": "tom@organisms.be"}, {"error": "none", "line": "727", "code": "        \"\"\"Read bytes from the request body and return or write them to a file.\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "728", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "729", "code": "        A number of bytes less than or equal to the 'size' argument are read\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "730", "code": "        off the socket. The actual number of bytes read are tracked in\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "731", "code": "        self.bytes_read. The number may be smaller than 'size' when 1) the\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "732", "code": "        client sends fewer bytes, 2) the 'Content-Length' request header\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "733", "code": "        specifies fewer bytes than requested, or 3) the number of bytes read\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "734", "code": "        exceeds self.maxbytes (in which case, 413 is raised).\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "735", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "736", "code": "        If the 'fp_out' argument is None (the default), all bytes read are\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "737", "code": "        returned in a single byte string.\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "738", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "739", "code": "        If the 'fp_out' argument is not None, it must be a file-like object that\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "740", "code": "        supports the 'write' method; all bytes read will be written to the fp,\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "741", "code": "        and None is returned.\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "742", "code": "        \"\"\"\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "743", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "744", "code": "        if self.length is None:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "745", "code": "            if size is None:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "746", "code": "                remaining = inf\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "747", "code": "            else:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "748", "code": "                remaining = size\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "749", "code": "        else:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "750", "code": "            remaining = self.length - self.bytes_read\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "751", "code": "            if size and size < remaining:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "752", "code": "                remaining = size\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "753", "code": "        if remaining == 0:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "754", "code": "            self.finish()\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "755", "code": "            if fp_out is None:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "756", "code": "                return ntob('')\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "757", "code": "            else:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "758", "code": "                return None\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "759", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "760", "code": "        chunks = []\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "761", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "762", "code": "        # Read bytes from the buffer.\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "763", "code": "        if self.buffer:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "764", "code": "            if remaining is inf:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "765", "code": "                data = self.buffer\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "766", "code": "                self.buffer = ntob('')\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "767", "code": "            else:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "768", "code": "                data = self.buffer[:remaining]\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "769", "code": "                self.buffer = self.buffer[remaining:]\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "770", "code": "            datalen = len(data)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "771", "code": "            remaining -= datalen\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "772", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "773", "code": "            # Check lengths.\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "774", "code": "            self.bytes_read += datalen\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "775", "code": "            if self.maxbytes and self.bytes_read > self.maxbytes:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "776", "code": "                raise cherrypy.HTTPError(413)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "777", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "778", "code": "            # Store the data.\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "779", "code": "            if fp_out is None:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "780", "code": "                chunks.append(data)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "781", "code": "            else:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "782", "code": "                fp_out.write(data)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "783", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "784", "code": "        # Read bytes from the socket.\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "785", "code": "        while remaining > 0:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "786", "code": "            chunksize = min(remaining, self.bufsize)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "787", "code": "            try:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "788", "code": "                data = self.fp.read(chunksize)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "W", "line": "789", "code": "            except Exception:\n", "colour": "purple", "author": "tom@organisms.be"}, {"error": "C", "line": "790", "code": "                e = sys.exc_info()[1]\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "791", "code": "                if e.__class__.__name__ == 'MaxSizeExceeded':\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "792", "code": "                    # Post data is too big\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "793", "code": "                    raise cherrypy.HTTPError(\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "794", "code": "                        413, \"Maximum request length: %r\" % e.args[1])\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "795", "code": "                else:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "796", "code": "                    raise\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "797", "code": "            if not data:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "798", "code": "                self.finish()\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "799", "code": "                break\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "800", "code": "            datalen = len(data)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "801", "code": "            remaining -= datalen\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "802", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "803", "code": "            # Check lengths.\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "804", "code": "            self.bytes_read += datalen\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "805", "code": "            if self.maxbytes and self.bytes_read > self.maxbytes:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "806", "code": "                raise cherrypy.HTTPError(413)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "807", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "808", "code": "            # Store the data.\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "809", "code": "            if fp_out is None:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "810", "code": "                chunks.append(data)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "811", "code": "            else:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "812", "code": "                fp_out.write(data)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "813", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "814", "code": "        if fp_out is None:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "815", "code": "            return ntob('').join(chunks)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "816", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "817", "code": "    def readline(self, size=None):\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "818", "code": "        \"\"\"Read a line from the request body and return it.\"\"\"\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "819", "code": "        chunks = []\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "820", "code": "        while size is None or size > 0:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "821", "code": "            chunksize = self.bufsize\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "822", "code": "            if size is not None and size < self.bufsize:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "823", "code": "                chunksize = size\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "824", "code": "            data = self.read(chunksize)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "825", "code": "            if not data:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "826", "code": "                break\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "827", "code": "            pos = data.find(ntob('\\n')) + 1\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "828", "code": "            if pos:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "829", "code": "                chunks.append(data[:pos])\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "830", "code": "                remainder = data[pos:]\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "831", "code": "                self.buffer += remainder\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "832", "code": "                self.bytes_read -= len(remainder)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "833", "code": "                break\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "834", "code": "            else:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "835", "code": "                chunks.append(data)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "836", "code": "        return ntob('').join(chunks)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "837", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "838", "code": "    def readlines(self, sizehint=None):\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "839", "code": "        \"\"\"Read lines from the request body and return them.\"\"\"\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "840", "code": "        if self.length is not None:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "841", "code": "            if sizehint is None:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "842", "code": "                sizehint = self.length - self.bytes_read\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "843", "code": "            else:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "844", "code": "                sizehint = min(sizehint, self.length - self.bytes_read)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "845", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "846", "code": "        lines = []\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "847", "code": "        seen = 0\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "848", "code": "        while True:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "849", "code": "            line = self.readline()\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "850", "code": "            if not line:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "851", "code": "                break\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "852", "code": "            lines.append(line)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "853", "code": "            seen += len(line)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "854", "code": "            if seen >= sizehint:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "855", "code": "                break\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "856", "code": "        return lines\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "857", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "858", "code": "    def finish(self):\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "859", "code": "        self.done = True\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "860", "code": "        if self.has_trailers and hasattr(self.fp, 'read_trailer_lines'):\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "W", "line": "861", "code": "            self.trailers = {}\n", "colour": "purple", "author": "tom@organisms.be"}, {"error": "none", "line": "862", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "863", "code": "            try:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "864", "code": "                for line in self.fp.read_trailer_lines():\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "865", "code": "                    if line[0] in ntob(' \\t'):\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "866", "code": "                        # It's a continuation line.\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "867", "code": "                        v = line.strip()\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "868", "code": "                    else:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "869", "code": "                        try:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "870", "code": "                            k, v = line.split(ntob(\":\"), 1)\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "871", "code": "                        except ValueError:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "872", "code": "                            raise ValueError(\"Illegal header line.\")\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "873", "code": "                        k = k.strip().title()\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "874", "code": "                        v = v.strip()\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "875", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "876", "code": "                    if k in comma_separated_headers:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "E", "line": "877", "code": "                        existing = self.trailers.get(envname)\n", "colour": "yellow", "author": "tom@organisms.be"}, {"error": "none", "line": "878", "code": "                        if existing:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "879", "code": "                            v = ntob(\", \").join((existing, v))\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "880", "code": "                    self.trailers[k] = v\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "W", "line": "881", "code": "            except Exception:\n", "colour": "purple", "author": "tom@organisms.be"}, {"error": "C", "line": "882", "code": "                e = sys.exc_info()[1]\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "883", "code": "                if e.__class__.__name__ == 'MaxSizeExceeded':\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "884", "code": "                    # Post data is too big\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "885", "code": "                    raise cherrypy.HTTPError(\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "886", "code": "                        413, \"Maximum request length: %r\" % e.args[1])\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "887", "code": "                else:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "888", "code": "                    raise\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "889", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "890", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "891", "code": "class RequestBody(Entity):\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "892", "code": "    \"\"\"The entity of the HTTP request.\"\"\"\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "893", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "894", "code": "    bufsize = 8 * 1024\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "895", "code": "    \"\"\"The buffer size used when reading the socket.\"\"\"\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "896", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "897", "code": "    # Don't parse the request body at all if the client didn't provide\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "898", "code": "    # a Content-Type header. See http://www.cherrypy.org/ticket/790\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "899", "code": "    default_content_type = ''\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "900", "code": "    \"\"\"This defines a default ``Content-Type`` to use if no Content-Type header\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "901", "code": "    is given. The empty string is used for RequestBody, which results in the\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "902", "code": "    request body not being read or parsed at all. This is by design; a missing\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "903", "code": "    ``Content-Type`` header in the HTTP request entity is an error at best,\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "904", "code": "    and a security hole at worst. For multipart parts, however, the MIME spec\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "905", "code": "    declares that a part with no Content-Type defaults to \"text/plain\"\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "906", "code": "    (see :class:`Part<cherrypy._cpreqbody.Part>`).\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "907", "code": "    \"\"\"\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "908", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "909", "code": "    maxbytes = None\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "910", "code": "    \"\"\"Raise ``MaxSizeExceeded`` if more bytes than this are read from the socket.\"\"\"\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "911", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "912", "code": "    def __init__(self, fp, headers, params=None, request_params=None):\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "913", "code": "        Entity.__init__(self, fp, headers, params)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "914", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "915", "code": "        # http://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.7.1\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "916", "code": "        # When no explicit charset parameter is provided by the\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "917", "code": "        # sender, media subtypes of the \"text\" type are defined\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "918", "code": "        # to have a default charset value of \"ISO-8859-1\" when\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "919", "code": "        # received via HTTP.\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "920", "code": "        if self.content_type.value.startswith('text/'):\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "921", "code": "            for c in ('ISO-8859-1', 'iso-8859-1', 'Latin-1', 'latin-1'):\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "922", "code": "                if c in self.attempt_charsets:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "923", "code": "                    break\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "924", "code": "            else:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "925", "code": "                self.attempt_charsets.append('ISO-8859-1')\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "926", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "927", "code": "        # Temporary fix while deprecating passing .parts as .params.\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "928", "code": "        self.processors['multipart'] = _old_process_multipart\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "929", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "930", "code": "        if request_params is None:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "931", "code": "            request_params = {}\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "932", "code": "        self.request_params = request_params\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "933", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "934", "code": "    def process(self):\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "935", "code": "        \"\"\"Process the request entity based on its Content-Type.\"\"\"\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "936", "code": "        # \"The presence of a message-body in a request is signaled by the\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "937", "code": "        # inclusion of a Content-Length or Transfer-Encoding header field in\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "938", "code": "        # the request's message-headers.\"\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "939", "code": "        # It is possible to send a POST request with no body, for example;\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "940", "code": "        # however, app developers are responsible in that case to set\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "941", "code": "        # cherrypy.request.process_body to False so this method isn't called.\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "942", "code": "        h = cherrypy.serving.request.headers\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "943", "code": "        if 'Content-Length' not in h and 'Transfer-Encoding' not in h:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "944", "code": "            raise cherrypy.HTTPError(411)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "945", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "946", "code": "        self.fp = SizedReader(self.fp, self.length,\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "947", "code": "                              self.maxbytes, bufsize=self.bufsize,\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "948", "code": "                              has_trailers='Trailer' in h)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "949", "code": "        super(RequestBody, self).process()\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "950", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "951", "code": "        # Body params should also be a part of the request_params\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "952", "code": "        # add them in here.\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "953", "code": "        request_params = self.request_params\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "954", "code": "        for key, value in self.params.items():\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "955", "code": "            # Python 2 only: keyword arguments must be byte strings (type 'str').\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "956", "code": "            if sys.version_info < (3, 0):\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "957", "code": "                if isinstance(key, unicode):\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "958", "code": "                    key = key.encode('ISO-8859-1')\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "959", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "960", "code": "            if key in request_params:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "961", "code": "                if not isinstance(request_params[key], list):\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "962", "code": "                    request_params[key] = [request_params[key]]\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "963", "code": "                request_params[key].append(value)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "964", "code": "            else:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "965", "code": "                request_params[key] = value\n", "colour": "black", "author": "tom@organisms.be"}]]}