{"path": "/home/asumal/git/cs410/pattern/pattern/server/cherrypy/cherrypy/_cpreqbody.py", "lines": [[{"index": "1", "colour": "orange", "code": "\"\"\"Request body processing for CherryPy.\n", "error": "none", "author": "tom@organisms.be"}, {"index": "2", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "3", "colour": "orange", "code": ".. versionadded:: 3.2\n", "error": "none", "author": "tom@organisms.be"}, {"index": "4", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "5", "colour": "orange", "code": "Application authors have complete control over the parsing of HTTP request\n", "error": "none", "author": "tom@organisms.be"}, {"index": "6", "colour": "orange", "code": "entities. In short, :attr:`cherrypy.request.body<cherrypy._cprequest.Request.body>`\n", "error": "none", "author": "tom@organisms.be"}, {"index": "7", "colour": "orange", "code": "is now always set to an instance of :class:`RequestBody<cherrypy._cpreqbody.RequestBody>`,\n", "error": "none", "author": "tom@organisms.be"}, {"index": "8", "colour": "orange", "code": "and *that* class is a subclass of :class:`Entity<cherrypy._cpreqbody.Entity>`.\n", "error": "none", "author": "tom@organisms.be"}, {"index": "9", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "10", "colour": "orange", "code": "When an HTTP request includes an entity body, it is often desirable to\n", "error": "none", "author": "tom@organisms.be"}, {"index": "11", "colour": "orange", "code": "provide that information to applications in a form other than the raw bytes.\n", "error": "none", "author": "tom@organisms.be"}, {"index": "12", "colour": "orange", "code": "Different content types demand different approaches. Examples:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "13", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "14", "colour": "orange", "code": " * For a GIF file, we want the raw bytes in a stream.\n", "error": "none", "author": "tom@organisms.be"}, {"index": "15", "colour": "orange", "code": " * An HTML form is better parsed into its component fields, and each text field\n", "error": "none", "author": "tom@organisms.be"}, {"index": "16", "colour": "orange", "code": "   decoded from bytes to unicode.\n", "error": "none", "author": "tom@organisms.be"}, {"index": "17", "colour": "orange", "code": " * A JSON body should be deserialized into a Python dict or list.\n", "error": "none", "author": "tom@organisms.be"}, {"index": "18", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "19", "colour": "orange", "code": "When the request contains a Content-Type header, the media type is used as a\n", "error": "none", "author": "tom@organisms.be"}, {"index": "20", "colour": "orange", "code": "key to look up a value in the\n", "error": "none", "author": "tom@organisms.be"}, {"index": "21", "colour": "orange", "code": ":attr:`request.body.processors<cherrypy._cpreqbody.Entity.processors>` dict.\n", "error": "none", "author": "tom@organisms.be"}, {"index": "22", "colour": "orange", "code": "If the full media\n", "error": "none", "author": "tom@organisms.be"}, {"index": "23", "colour": "orange", "code": "type is not found, then the major type is tried; for example, if no processor\n", "error": "none", "author": "tom@organisms.be"}, {"index": "24", "colour": "orange", "code": "is found for the 'image/jpeg' type, then we look for a processor for the 'image'\n", "error": "none", "author": "tom@organisms.be"}, {"index": "25", "colour": "orange", "code": "types altogether. If neither the full type nor the major type has a matching\n", "error": "none", "author": "tom@organisms.be"}, {"index": "26", "colour": "orange", "code": "processor, then a default processor is used\n", "error": "none", "author": "tom@organisms.be"}, {"index": "27", "colour": "orange", "code": "(:func:`default_proc<cherrypy._cpreqbody.Entity.default_proc>`). For most\n", "error": "none", "author": "tom@organisms.be"}, {"index": "28", "colour": "orange", "code": "types, this means no processing is done, and the body is left unread as a\n", "error": "none", "author": "tom@organisms.be"}, {"index": "29", "colour": "orange", "code": "raw byte stream. Processors are configurable in an 'on_start_resource' hook.\n", "error": "none", "author": "tom@organisms.be"}, {"index": "30", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "31", "colour": "orange", "code": "Some processors, especially those for the 'text' types, attempt to decode bytes\n", "error": "none", "author": "tom@organisms.be"}, {"index": "32", "colour": "orange", "code": "to unicode. If the Content-Type request header includes a 'charset' parameter,\n", "error": "none", "author": "tom@organisms.be"}, {"index": "33", "colour": "orange", "code": "this is used to decode the entity. Otherwise, one or more default charsets may\n", "error": "none", "author": "tom@organisms.be"}, {"index": "34", "colour": "orange", "code": "be attempted, although this decision is up to each processor. If a processor\n", "error": "none", "author": "tom@organisms.be"}, {"index": "35", "colour": "orange", "code": "successfully decodes an Entity or Part, it should set the\n", "error": "none", "author": "tom@organisms.be"}, {"index": "36", "colour": "orange", "code": ":attr:`charset<cherrypy._cpreqbody.Entity.charset>` attribute\n", "error": "none", "author": "tom@organisms.be"}, {"index": "37", "colour": "orange", "code": "on the Entity or Part to the name of the successful charset, so that\n", "error": "none", "author": "tom@organisms.be"}, {"index": "38", "colour": "orange", "code": "applications can easily re-encode or transcode the value if they wish.\n", "error": "none", "author": "tom@organisms.be"}, {"index": "39", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "40", "colour": "orange", "code": "If the Content-Type of the request entity is of major type 'multipart', then\n", "error": "none", "author": "tom@organisms.be"}, {"index": "41", "colour": "orange", "code": "the above parsing process, and possibly a decoding process, is performed for\n", "error": "none", "author": "tom@organisms.be"}, {"index": "42", "colour": "orange", "code": "each part.\n", "error": "none", "author": "tom@organisms.be"}, {"index": "43", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "44", "colour": "orange", "code": "For both the full entity and multipart parts, a Content-Disposition header may\n", "error": "none", "author": "tom@organisms.be"}, {"index": "45", "colour": "orange", "code": "be used to fill :attr:`name<cherrypy._cpreqbody.Entity.name>` and\n", "error": "none", "author": "tom@organisms.be"}, {"index": "46", "colour": "orange", "code": ":attr:`filename<cherrypy._cpreqbody.Entity.filename>` attributes on the\n", "error": "none", "author": "tom@organisms.be"}, {"index": "47", "colour": "orange", "code": "request.body or the Part.\n", "error": "none", "author": "tom@organisms.be"}, {"index": "48", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "49", "colour": "orange", "code": ".. _custombodyprocessors:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "50", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "51", "colour": "orange", "code": "Custom Processors\n", "error": "none", "author": "tom@organisms.be"}, {"index": "52", "colour": "orange", "code": "=================\n", "error": "none", "author": "tom@organisms.be"}, {"index": "53", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "54", "colour": "orange", "code": "You can add your own processors for any specific or major MIME type. Simply add\n", "error": "none", "author": "tom@organisms.be"}, {"index": "55", "colour": "orange", "code": "it to the :attr:`processors<cherrypy._cprequest.Entity.processors>` dict in a\n", "error": "none", "author": "tom@organisms.be"}, {"index": "56", "colour": "orange", "code": "hook/tool that runs at ``on_start_resource`` or ``before_request_body``.\n", "error": "none", "author": "tom@organisms.be"}, {"index": "57", "colour": "orange", "code": "Here's the built-in JSON tool for an example::\n", "error": "none", "author": "tom@organisms.be"}, {"index": "58", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "59", "colour": "orange", "code": "    def json_in(force=True, debug=False):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "60", "colour": "orange", "code": "        request = cherrypy.serving.request\n", "error": "none", "author": "tom@organisms.be"}, {"index": "61", "colour": "orange", "code": "        def json_processor(entity):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "62", "colour": "orange", "code": "            \\\"\"\"Read application/json data into request.json.\\\"\"\"\n", "error": "none", "author": "tom@organisms.be"}, {"index": "63", "colour": "orange", "code": "            if not entity.headers.get(\"Content-Length\", \"\"):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "64", "colour": "orange", "code": "                raise cherrypy.HTTPError(411)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "65", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "66", "colour": "orange", "code": "            body = entity.fp.read()\n", "error": "none", "author": "tom@organisms.be"}, {"index": "67", "colour": "orange", "code": "            try:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "68", "colour": "orange", "code": "                request.json = json_decode(body)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "69", "colour": "orange", "code": "            except ValueError:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "70", "colour": "orange", "code": "                raise cherrypy.HTTPError(400, 'Invalid JSON document')\n", "error": "none", "author": "tom@organisms.be"}, {"index": "71", "colour": "orange", "code": "        if force:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "72", "colour": "orange", "code": "            request.body.processors.clear()\n", "error": "none", "author": "tom@organisms.be"}, {"index": "73", "colour": "orange", "code": "            request.body.default_proc = cherrypy.HTTPError(\n", "error": "none", "author": "tom@organisms.be"}, {"index": "74", "colour": "orange", "code": "                415, 'Expected an application/json content type')\n", "error": "none", "author": "tom@organisms.be"}, {"index": "75", "colour": "orange", "code": "        request.body.processors['application/json'] = json_processor\n", "error": "none", "author": "tom@organisms.be"}, {"index": "76", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "77", "colour": "orange", "code": "We begin by defining a new ``json_processor`` function to stick in the ``processors``\n", "error": "none", "author": "tom@organisms.be"}, {"index": "78", "colour": "orange", "code": "dictionary. All processor functions take a single argument, the ``Entity`` instance\n", "error": "none", "author": "tom@organisms.be"}, {"index": "79", "colour": "orange", "code": "they are to process. It will be called whenever a request is received (for those\n", "error": "none", "author": "tom@organisms.be"}, {"index": "80", "colour": "orange", "code": "URI's where the tool is turned on) which has a ``Content-Type`` of\n", "error": "none", "author": "tom@organisms.be"}, {"index": "81", "colour": "orange", "code": "\"application/json\".\n", "error": "none", "author": "tom@organisms.be"}, {"index": "82", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "83", "colour": "orange", "code": "First, it checks for a valid ``Content-Length`` (raising 411 if not valid), then\n", "error": "none", "author": "tom@organisms.be"}, {"index": "84", "colour": "orange", "code": "reads the remaining bytes on the socket. The ``fp`` object knows its own length, so\n", "error": "none", "author": "tom@organisms.be"}, {"index": "85", "colour": "orange", "code": "it won't hang waiting for data that never arrives. It will return when all data\n", "error": "none", "author": "tom@organisms.be"}, {"index": "86", "colour": "orange", "code": "has been read. Then, we decode those bytes using Python's built-in ``json`` module,\n", "error": "none", "author": "tom@organisms.be"}, {"index": "87", "colour": "orange", "code": "and stick the decoded result onto ``request.json`` . If it cannot be decoded, we\n", "error": "none", "author": "tom@organisms.be"}, {"index": "88", "colour": "orange", "code": "raise 400.\n", "error": "none", "author": "tom@organisms.be"}, {"index": "89", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "90", "colour": "orange", "code": "If the \"force\" argument is True (the default), the ``Tool`` clears the ``processors``\n", "error": "none", "author": "tom@organisms.be"}, {"index": "91", "colour": "orange", "code": "dict so that request entities of other ``Content-Types`` aren't parsed at all. Since\n", "error": "none", "author": "tom@organisms.be"}, {"index": "92", "colour": "orange", "code": "there's no entry for those invalid MIME types, the ``default_proc`` method of ``cherrypy.request.body``\n", "error": "none", "author": "tom@organisms.be"}, {"index": "93", "colour": "orange", "code": "is called. But this does nothing by default (usually to provide the page handler an opportunity to handle it.)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "94", "colour": "orange", "code": "But in our case, we want to raise 415, so we replace ``request.body.default_proc``\n", "error": "none", "author": "tom@organisms.be"}, {"index": "95", "colour": "orange", "code": "with the error (``HTTPError`` instances, when called, raise themselves).\n", "error": "none", "author": "tom@organisms.be"}, {"index": "96", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "97", "colour": "orange", "code": "If we were defining a custom processor, we can do so without making a ``Tool``. Just add the config entry::\n", "error": "none", "author": "tom@organisms.be"}, {"index": "98", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "99", "colour": "orange", "code": "    request.body.processors = {'application/json': json_processor}\n", "error": "none", "author": "tom@organisms.be"}, {"index": "100", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "101", "colour": "orange", "code": "Note that you can only replace the ``processors`` dict wholesale this way, not update the existing one.\n", "error": "none", "author": "tom@organisms.be"}, {"index": "102", "colour": "orange", "code": "\"\"\"\n", "error": "none", "author": "tom@organisms.be"}, {"index": "103", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "104", "colour": "orange", "code": "try:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "105", "colour": "orange", "code": "    from io import DEFAULT_BUFFER_SIZE\n", "error": "none", "author": "tom@organisms.be"}, {"index": "106", "colour": "orange", "code": "except ImportError:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "107", "colour": "orange", "code": "    DEFAULT_BUFFER_SIZE = 8192\n", "error": "none", "author": "tom@organisms.be"}, {"index": "108", "colour": "orange", "code": "import re\n", "error": "none", "author": "tom@organisms.be"}, {"index": "109", "colour": "orange", "code": "import sys\n", "error": "none", "author": "tom@organisms.be"}, {"index": "110", "colour": "orange", "code": "import tempfile\n", "error": "none", "author": "tom@organisms.be"}, {"index": "111", "colour": "orange", "code": "try:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "112", "colour": "orange", "code": "    from urllib import unquote_plus\n", "error": "none", "author": "tom@organisms.be"}, {"index": "113", "colour": "orange", "code": "except ImportError:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "114", "colour": "orange", "code": "    def unquote_plus(bs):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "115", "colour": "orange", "code": "        \"\"\"Bytes version of urllib.parse.unquote_plus.\"\"\"\n", "error": "none", "author": "tom@organisms.be"}, {"index": "116", "colour": "orange", "code": "        bs = bs.replace(ntob('+'), ntob(' '))\n", "error": "none", "author": "tom@organisms.be"}, {"index": "117", "colour": "orange", "code": "        atoms = bs.split(ntob('%'))\n", "error": "none", "author": "tom@organisms.be"}, {"index": "118", "colour": "orange", "code": "        for i in range(1, len(atoms)):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "119", "colour": "orange", "code": "            item = atoms[i]\n", "error": "none", "author": "tom@organisms.be"}, {"index": "120", "colour": "orange", "code": "            try:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "121", "colour": "orange", "code": "                pct = int(item[:2], 16)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "122", "colour": "orange", "code": "                atoms[i] = bytes([pct]) + item[2:]\n", "error": "none", "author": "tom@organisms.be"}, {"index": "123", "colour": "orange", "code": "            except ValueError:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "124", "colour": "orange", "code": "                pass\n", "error": "none", "author": "tom@organisms.be"}, {"index": "125", "colour": "orange", "code": "        return ntob('').join(atoms)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "126", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "127", "colour": "orange", "code": "import cherrypy\n", "error": "none", "author": "tom@organisms.be"}, {"index": "128", "colour": "green", "code": "from cherrypy._cpcompat import basestring, ntob, ntou\n", "error": "W", "author": "tom@organisms.be"}, {"index": "129", "colour": "orange", "code": "from cherrypy.lib import httputil\n", "error": "none", "author": "tom@organisms.be"}, {"index": "130", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "131", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "132", "colour": "orange", "code": "# -------------------------------- Processors -------------------------------- #\n", "error": "none", "author": "tom@organisms.be"}, {"index": "133", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "134", "colour": "blue", "code": "def process_urlencoded(entity):\n", "error": "R", "author": "tom@organisms.be"}, {"index": "135", "colour": "orange", "code": "    \"\"\"Read application/x-www-form-urlencoded data into entity.params.\"\"\"\n", "error": "none", "author": "tom@organisms.be"}, {"index": "136", "colour": "orange", "code": "    qs = entity.fp.read()\n", "error": "none", "author": "tom@organisms.be"}, {"index": "137", "colour": "orange", "code": "    for charset in entity.attempt_charsets:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "138", "colour": "orange", "code": "        try:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "139", "colour": "orange", "code": "            params = {}\n", "error": "none", "author": "tom@organisms.be"}, {"index": "140", "colour": "orange", "code": "            for aparam in qs.split(ntob('&')):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "141", "colour": "orange", "code": "                for pair in aparam.split(ntob(';')):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "142", "colour": "orange", "code": "                    if not pair:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "143", "colour": "orange", "code": "                        continue\n", "error": "none", "author": "tom@organisms.be"}, {"index": "144", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "145", "colour": "orange", "code": "                    atoms = pair.split(ntob('='), 1)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "146", "colour": "orange", "code": "                    if len(atoms) == 1:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "147", "colour": "orange", "code": "                        atoms.append(ntob(''))\n", "error": "none", "author": "tom@organisms.be"}, {"index": "148", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "149", "colour": "orange", "code": "                    key = unquote_plus(atoms[0]).decode(charset)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "150", "colour": "orange", "code": "                    value = unquote_plus(atoms[1]).decode(charset)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "151", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "152", "colour": "orange", "code": "                    if key in params:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "153", "colour": "orange", "code": "                        if not isinstance(params[key], list):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "154", "colour": "orange", "code": "                            params[key] = [params[key]]\n", "error": "none", "author": "tom@organisms.be"}, {"index": "155", "colour": "orange", "code": "                        params[key].append(value)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "156", "colour": "orange", "code": "                    else:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "157", "colour": "orange", "code": "                        params[key] = value\n", "error": "none", "author": "tom@organisms.be"}, {"index": "158", "colour": "orange", "code": "        except UnicodeDecodeError:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "159", "colour": "orange", "code": "            pass\n", "error": "none", "author": "tom@organisms.be"}, {"index": "160", "colour": "orange", "code": "        else:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "161", "colour": "orange", "code": "            entity.charset = charset\n", "error": "none", "author": "tom@organisms.be"}, {"index": "162", "colour": "orange", "code": "            break\n", "error": "none", "author": "tom@organisms.be"}, {"index": "163", "colour": "orange", "code": "    else:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "164", "colour": "orange", "code": "        raise cherrypy.HTTPError(\n", "error": "none", "author": "tom@organisms.be"}, {"index": "165", "colour": "orange", "code": "            400, \"The request entity could not be decoded. The following \"\n", "error": "none", "author": "tom@organisms.be"}, {"index": "166", "colour": "orange", "code": "            \"charsets were attempted: %s\" % repr(entity.attempt_charsets))\n", "error": "none", "author": "tom@organisms.be"}, {"index": "167", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "168", "colour": "orange", "code": "    # Now that all values have been successfully parsed and decoded,\n", "error": "none", "author": "tom@organisms.be"}, {"index": "169", "colour": "orange", "code": "    # apply them to the entity.params dict.\n", "error": "none", "author": "tom@organisms.be"}, {"index": "170", "colour": "orange", "code": "    for key, value in params.items():\n", "error": "none", "author": "tom@organisms.be"}, {"index": "171", "colour": "orange", "code": "        if key in entity.params:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "172", "colour": "orange", "code": "            if not isinstance(entity.params[key], list):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "173", "colour": "orange", "code": "                entity.params[key] = [entity.params[key]]\n", "error": "none", "author": "tom@organisms.be"}, {"index": "174", "colour": "orange", "code": "            entity.params[key].append(value)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "175", "colour": "orange", "code": "        else:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "176", "colour": "orange", "code": "            entity.params[key] = value\n", "error": "none", "author": "tom@organisms.be"}, {"index": "177", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "178", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "179", "colour": "orange", "code": "def process_multipart(entity):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "180", "colour": "orange", "code": "    \"\"\"Read all multipart parts into entity.parts.\"\"\"\n", "error": "none", "author": "tom@organisms.be"}, {"index": "181", "colour": "orange", "code": "    ib = \"\"\n", "error": "none", "author": "tom@organisms.be"}, {"index": "182", "colour": "orange", "code": "    if 'boundary' in entity.content_type.params:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "183", "colour": "orange", "code": "        # http://tools.ietf.org/html/rfc2046#section-5.1.1\n", "error": "none", "author": "tom@organisms.be"}, {"index": "184", "colour": "orange", "code": "        # \"The grammar for parameters on the Content-type field is such that it\n", "error": "none", "author": "tom@organisms.be"}, {"index": "185", "colour": "orange", "code": "        # is often necessary to enclose the boundary parameter values in quotes\n", "error": "none", "author": "tom@organisms.be"}, {"index": "186", "colour": "orange", "code": "        # on the Content-type line\"\n", "error": "none", "author": "tom@organisms.be"}, {"index": "187", "colour": "orange", "code": "        ib = entity.content_type.params['boundary'].strip('\"')\n", "error": "none", "author": "tom@organisms.be"}, {"index": "188", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "189", "colour": "orange", "code": "    if not re.match(\"^[ -~]{0,200}[!-~]$\", ib):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "190", "colour": "orange", "code": "        raise ValueError('Invalid boundary in multipart form: %r' % (ib,))\n", "error": "none", "author": "tom@organisms.be"}, {"index": "191", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "192", "colour": "orange", "code": "    ib = ('--' + ib).encode('ascii')\n", "error": "none", "author": "tom@organisms.be"}, {"index": "193", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "194", "colour": "orange", "code": "    # Find the first marker\n", "error": "none", "author": "tom@organisms.be"}, {"index": "195", "colour": "orange", "code": "    while True:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "196", "colour": "orange", "code": "        b = entity.readline()\n", "error": "none", "author": "tom@organisms.be"}, {"index": "197", "colour": "orange", "code": "        if not b:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "198", "colour": "orange", "code": "            return\n", "error": "none", "author": "tom@organisms.be"}, {"index": "199", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "200", "colour": "orange", "code": "        b = b.strip()\n", "error": "none", "author": "tom@organisms.be"}, {"index": "201", "colour": "orange", "code": "        if b == ib:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "202", "colour": "orange", "code": "            break\n", "error": "none", "author": "tom@organisms.be"}, {"index": "203", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "204", "colour": "orange", "code": "    # Read all parts\n", "error": "none", "author": "tom@organisms.be"}, {"index": "205", "colour": "orange", "code": "    while True:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "206", "colour": "orange", "code": "        part = entity.part_class.from_fp(entity.fp, ib)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "207", "colour": "orange", "code": "        entity.parts.append(part)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "208", "colour": "orange", "code": "        part.process()\n", "error": "none", "author": "tom@organisms.be"}, {"index": "209", "colour": "orange", "code": "        if part.fp.done:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "210", "colour": "orange", "code": "            break\n", "error": "none", "author": "tom@organisms.be"}, {"index": "211", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "212", "colour": "orange", "code": "def process_multipart_form_data(entity):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "213", "colour": "orange", "code": "    \"\"\"Read all multipart/form-data parts into entity.parts or entity.params.\"\"\"\n", "error": "none", "author": "tom@organisms.be"}, {"index": "214", "colour": "orange", "code": "    process_multipart(entity)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "215", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "216", "colour": "orange", "code": "    kept_parts = []\n", "error": "none", "author": "tom@organisms.be"}, {"index": "217", "colour": "orange", "code": "    for part in entity.parts:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "218", "colour": "orange", "code": "        if part.name is None:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "219", "colour": "orange", "code": "            kept_parts.append(part)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "220", "colour": "orange", "code": "        else:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "221", "colour": "orange", "code": "            if part.filename is None:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "222", "colour": "orange", "code": "                # It's a regular field\n", "error": "none", "author": "tom@organisms.be"}, {"index": "223", "colour": "orange", "code": "                value = part.fullvalue()\n", "error": "none", "author": "tom@organisms.be"}, {"index": "224", "colour": "orange", "code": "            else:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "225", "colour": "orange", "code": "                # It's a file upload. Retain the whole part so consumer code\n", "error": "none", "author": "tom@organisms.be"}, {"index": "226", "colour": "orange", "code": "                # has access to its .file and .filename attributes.\n", "error": "none", "author": "tom@organisms.be"}, {"index": "227", "colour": "orange", "code": "                value = part\n", "error": "none", "author": "tom@organisms.be"}, {"index": "228", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "229", "colour": "orange", "code": "            if part.name in entity.params:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "230", "colour": "orange", "code": "                if not isinstance(entity.params[part.name], list):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "231", "colour": "orange", "code": "                    entity.params[part.name] = [entity.params[part.name]]\n", "error": "none", "author": "tom@organisms.be"}, {"index": "232", "colour": "orange", "code": "                entity.params[part.name].append(value)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "233", "colour": "orange", "code": "            else:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "234", "colour": "orange", "code": "                entity.params[part.name] = value\n", "error": "none", "author": "tom@organisms.be"}, {"index": "235", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "236", "colour": "orange", "code": "    entity.parts = kept_parts\n", "error": "none", "author": "tom@organisms.be"}, {"index": "237", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "238", "colour": "orange", "code": "def _old_process_multipart(entity):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "239", "colour": "orange", "code": "    \"\"\"The behavior of 3.2 and lower. Deprecated and will be changed in 3.3.\"\"\"\n", "error": "none", "author": "tom@organisms.be"}, {"index": "240", "colour": "orange", "code": "    process_multipart(entity)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "241", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "242", "colour": "orange", "code": "    params = entity.params\n", "error": "none", "author": "tom@organisms.be"}, {"index": "243", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "244", "colour": "orange", "code": "    for part in entity.parts:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "245", "colour": "orange", "code": "        if part.name is None:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "246", "colour": "orange", "code": "            key = ntou('parts')\n", "error": "none", "author": "tom@organisms.be"}, {"index": "247", "colour": "orange", "code": "        else:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "248", "colour": "orange", "code": "            key = part.name\n", "error": "none", "author": "tom@organisms.be"}, {"index": "249", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "250", "colour": "orange", "code": "        if part.filename is None:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "251", "colour": "orange", "code": "            # It's a regular field\n", "error": "none", "author": "tom@organisms.be"}, {"index": "252", "colour": "orange", "code": "            value = part.fullvalue()\n", "error": "none", "author": "tom@organisms.be"}, {"index": "253", "colour": "orange", "code": "        else:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "254", "colour": "orange", "code": "            # It's a file upload. Retain the whole part so consumer code\n", "error": "none", "author": "tom@organisms.be"}, {"index": "255", "colour": "orange", "code": "            # has access to its .file and .filename attributes.\n", "error": "none", "author": "tom@organisms.be"}, {"index": "256", "colour": "orange", "code": "            value = part\n", "error": "none", "author": "tom@organisms.be"}, {"index": "257", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "258", "colour": "orange", "code": "        if key in params:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "259", "colour": "orange", "code": "            if not isinstance(params[key], list):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "260", "colour": "orange", "code": "                params[key] = [params[key]]\n", "error": "none", "author": "tom@organisms.be"}, {"index": "261", "colour": "orange", "code": "            params[key].append(value)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "262", "colour": "orange", "code": "        else:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "263", "colour": "orange", "code": "            params[key] = value\n", "error": "none", "author": "tom@organisms.be"}, {"index": "264", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "265", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "266", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "267", "colour": "orange", "code": "# --------------------------------- Entities --------------------------------- #\n", "error": "none", "author": "tom@organisms.be"}, {"index": "268", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "269", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "270", "colour": "blue", "code": "class Entity(object):\n", "error": "R", "author": "tom@organisms.be"}, {"index": "271", "colour": "orange", "code": "    \"\"\"An HTTP request body, or MIME multipart body.\n", "error": "none", "author": "tom@organisms.be"}, {"index": "272", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "273", "colour": "orange", "code": "    This class collects information about the HTTP request entity. When a\n", "error": "none", "author": "tom@organisms.be"}, {"index": "274", "colour": "orange", "code": "    given entity is of MIME type \"multipart\", each part is parsed into its own\n", "error": "none", "author": "tom@organisms.be"}, {"index": "275", "colour": "orange", "code": "    Entity instance, and the set of parts stored in\n", "error": "none", "author": "tom@organisms.be"}, {"index": "276", "colour": "orange", "code": "    :attr:`entity.parts<cherrypy._cpreqbody.Entity.parts>`.\n", "error": "none", "author": "tom@organisms.be"}, {"index": "277", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "278", "colour": "orange", "code": "    Between the ``before_request_body`` and ``before_handler`` tools, CherryPy\n", "error": "none", "author": "tom@organisms.be"}, {"index": "279", "colour": "orange", "code": "    tries to process the request body (if any) by calling\n", "error": "none", "author": "tom@organisms.be"}, {"index": "280", "colour": "orange", "code": "    :func:`request.body.process<cherrypy._cpreqbody.RequestBody.process`.\n", "error": "none", "author": "tom@organisms.be"}, {"index": "281", "colour": "orange", "code": "    This uses the ``content_type`` of the Entity to look up a suitable processor\n", "error": "none", "author": "tom@organisms.be"}, {"index": "282", "colour": "orange", "code": "    in :attr:`Entity.processors<cherrypy._cpreqbody.Entity.processors>`, a dict.\n", "error": "none", "author": "tom@organisms.be"}, {"index": "283", "colour": "orange", "code": "    If a matching processor cannot be found for the complete Content-Type,\n", "error": "none", "author": "tom@organisms.be"}, {"index": "284", "colour": "orange", "code": "    it tries again using the major type. For example, if a request with an\n", "error": "none", "author": "tom@organisms.be"}, {"index": "285", "colour": "orange", "code": "    entity of type \"image/jpeg\" arrives, but no processor can be found for\n", "error": "none", "author": "tom@organisms.be"}, {"index": "286", "colour": "orange", "code": "    that complete type, then one is sought for the major type \"image\". If a\n", "error": "none", "author": "tom@organisms.be"}, {"index": "287", "colour": "orange", "code": "    processor is still not found, then the\n", "error": "none", "author": "tom@organisms.be"}, {"index": "288", "colour": "orange", "code": "    :func:`default_proc<cherrypy._cpreqbody.Entity.default_proc>` method of the\n", "error": "none", "author": "tom@organisms.be"}, {"index": "289", "colour": "orange", "code": "    Entity is called (which does nothing by default; you can override this too).\n", "error": "none", "author": "tom@organisms.be"}, {"index": "290", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "291", "colour": "orange", "code": "    CherryPy includes processors for the \"application/x-www-form-urlencoded\"\n", "error": "none", "author": "tom@organisms.be"}, {"index": "292", "colour": "orange", "code": "    type, the \"multipart/form-data\" type, and the \"multipart\" major type.\n", "error": "none", "author": "tom@organisms.be"}, {"index": "293", "colour": "orange", "code": "    CherryPy 3.2 processes these types almost exactly as older versions.\n", "error": "none", "author": "tom@organisms.be"}, {"index": "294", "colour": "orange", "code": "    Parts are passed as arguments to the page handler using their\n", "error": "none", "author": "tom@organisms.be"}, {"index": "295", "colour": "orange", "code": "    ``Content-Disposition.name`` if given, otherwise in a generic \"parts\"\n", "error": "none", "author": "tom@organisms.be"}, {"index": "296", "colour": "orange", "code": "    argument. Each such part is either a string, or the\n", "error": "none", "author": "tom@organisms.be"}, {"index": "297", "colour": "orange", "code": "    :class:`Part<cherrypy._cpreqbody.Part>` itself if it's a file. (In this\n", "error": "none", "author": "tom@organisms.be"}, {"index": "298", "colour": "orange", "code": "    case it will have ``file`` and ``filename`` attributes, or possibly a\n", "error": "none", "author": "tom@organisms.be"}, {"index": "299", "colour": "orange", "code": "    ``value`` attribute). Each Part is itself a subclass of\n", "error": "none", "author": "tom@organisms.be"}, {"index": "300", "colour": "orange", "code": "    Entity, and has its own ``process`` method and ``processors`` dict.\n", "error": "none", "author": "tom@organisms.be"}, {"index": "301", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "302", "colour": "orange", "code": "    There is a separate processor for the \"multipart\" major type which is more\n", "error": "none", "author": "tom@organisms.be"}, {"index": "303", "colour": "orange", "code": "    flexible, and simply stores all multipart parts in\n", "error": "none", "author": "tom@organisms.be"}, {"index": "304", "colour": "orange", "code": "    :attr:`request.body.parts<cherrypy._cpreqbody.Entity.parts>`. You can\n", "error": "none", "author": "tom@organisms.be"}, {"index": "305", "colour": "orange", "code": "    enable it with::\n", "error": "none", "author": "tom@organisms.be"}, {"index": "306", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "307", "colour": "orange", "code": "        cherrypy.request.body.processors['multipart'] = _cpreqbody.process_multipart\n", "error": "none", "author": "tom@organisms.be"}, {"index": "308", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "309", "colour": "orange", "code": "    in an ``on_start_resource`` tool.\n", "error": "none", "author": "tom@organisms.be"}, {"index": "310", "colour": "orange", "code": "    \"\"\"\n", "error": "none", "author": "tom@organisms.be"}, {"index": "311", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "312", "colour": "orange", "code": "    # http://tools.ietf.org/html/rfc2046#section-4.1.2:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "313", "colour": "orange", "code": "    # \"The default character set, which must be assumed in the\n", "error": "none", "author": "tom@organisms.be"}, {"index": "314", "colour": "orange", "code": "    # absence of a charset parameter, is US-ASCII.\"\n", "error": "none", "author": "tom@organisms.be"}, {"index": "315", "colour": "orange", "code": "    # However, many browsers send data in utf-8 with no charset.\n", "error": "none", "author": "tom@organisms.be"}, {"index": "316", "colour": "orange", "code": "    attempt_charsets = ['utf-8']\n", "error": "none", "author": "tom@organisms.be"}, {"index": "317", "colour": "green", "code": "    \"\"\"A list of strings, each of which should be a known encoding.\n", "error": "W", "author": "tom@organisms.be"}, {"index": "318", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "319", "colour": "orange", "code": "    When the Content-Type of the request body warrants it, each of the given\n", "error": "none", "author": "tom@organisms.be"}, {"index": "320", "colour": "orange", "code": "    encodings will be tried in order. The first one to successfully decode the\n", "error": "none", "author": "tom@organisms.be"}, {"index": "321", "colour": "orange", "code": "    entity without raising an error is stored as\n", "error": "none", "author": "tom@organisms.be"}, {"index": "322", "colour": "orange", "code": "    :attr:`entity.charset<cherrypy._cpreqbody.Entity.charset>`. This defaults\n", "error": "none", "author": "tom@organisms.be"}, {"index": "323", "colour": "orange", "code": "    to ``['utf-8']`` (plus 'ISO-8859-1' for \"text/\\*\" types, as required by\n", "error": "none", "author": "tom@organisms.be"}, {"index": "324", "colour": "orange", "code": "    `HTTP/1.1 <http://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.7.1>`_),\n", "error": "none", "author": "tom@organisms.be"}, {"index": "325", "colour": "orange", "code": "    but ``['us-ascii', 'utf-8']`` for multipart parts.\n", "error": "none", "author": "tom@organisms.be"}, {"index": "326", "colour": "orange", "code": "    \"\"\"\n", "error": "none", "author": "tom@organisms.be"}, {"index": "327", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "328", "colour": "orange", "code": "    charset = None\n", "error": "none", "author": "tom@organisms.be"}, {"index": "329", "colour": "orange", "code": "    \"\"\"The successful decoding; see \"attempt_charsets\" above.\"\"\"\n", "error": "none", "author": "tom@organisms.be"}, {"index": "330", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "331", "colour": "orange", "code": "    content_type = None\n", "error": "none", "author": "tom@organisms.be"}, {"index": "332", "colour": "orange", "code": "    \"\"\"The value of the Content-Type request header.\n", "error": "none", "author": "tom@organisms.be"}, {"index": "333", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "334", "colour": "orange", "code": "    If the Entity is part of a multipart payload, this will be the Content-Type\n", "error": "none", "author": "tom@organisms.be"}, {"index": "335", "colour": "orange", "code": "    given in the MIME headers for this part.\n", "error": "none", "author": "tom@organisms.be"}, {"index": "336", "colour": "orange", "code": "    \"\"\"\n", "error": "none", "author": "tom@organisms.be"}, {"index": "337", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "338", "colour": "orange", "code": "    default_content_type = 'application/x-www-form-urlencoded'\n", "error": "none", "author": "tom@organisms.be"}, {"index": "339", "colour": "orange", "code": "    \"\"\"This defines a default ``Content-Type`` to use if no Content-Type header\n", "error": "none", "author": "tom@organisms.be"}, {"index": "340", "colour": "orange", "code": "    is given. The empty string is used for RequestBody, which results in the\n", "error": "none", "author": "tom@organisms.be"}, {"index": "341", "colour": "orange", "code": "    request body not being read or parsed at all. This is by design; a missing\n", "error": "none", "author": "tom@organisms.be"}, {"index": "342", "colour": "orange", "code": "    ``Content-Type`` header in the HTTP request entity is an error at best,\n", "error": "none", "author": "tom@organisms.be"}, {"index": "343", "colour": "orange", "code": "    and a security hole at worst. For multipart parts, however, the MIME spec\n", "error": "none", "author": "tom@organisms.be"}, {"index": "344", "colour": "orange", "code": "    declares that a part with no Content-Type defaults to \"text/plain\"\n", "error": "none", "author": "tom@organisms.be"}, {"index": "345", "colour": "orange", "code": "    (see :class:`Part<cherrypy._cpreqbody.Part>`).\n", "error": "none", "author": "tom@organisms.be"}, {"index": "346", "colour": "orange", "code": "    \"\"\"\n", "error": "none", "author": "tom@organisms.be"}, {"index": "347", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "348", "colour": "orange", "code": "    filename = None\n", "error": "none", "author": "tom@organisms.be"}, {"index": "349", "colour": "orange", "code": "    \"\"\"The ``Content-Disposition.filename`` header, if available.\"\"\"\n", "error": "none", "author": "tom@organisms.be"}, {"index": "350", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "351", "colour": "orange", "code": "    fp = None\n", "error": "none", "author": "tom@organisms.be"}, {"index": "352", "colour": "orange", "code": "    \"\"\"The readable socket file object.\"\"\"\n", "error": "none", "author": "tom@organisms.be"}, {"index": "353", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "354", "colour": "orange", "code": "    headers = None\n", "error": "none", "author": "tom@organisms.be"}, {"index": "355", "colour": "orange", "code": "    \"\"\"A dict of request/multipart header names and values.\n", "error": "none", "author": "tom@organisms.be"}, {"index": "356", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "357", "colour": "orange", "code": "    This is a copy of the ``request.headers`` for the ``request.body``;\n", "error": "none", "author": "tom@organisms.be"}, {"index": "358", "colour": "orange", "code": "    for multipart parts, it is the set of headers for that part.\n", "error": "none", "author": "tom@organisms.be"}, {"index": "359", "colour": "orange", "code": "    \"\"\"\n", "error": "none", "author": "tom@organisms.be"}, {"index": "360", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "361", "colour": "orange", "code": "    length = None\n", "error": "none", "author": "tom@organisms.be"}, {"index": "362", "colour": "orange", "code": "    \"\"\"The value of the ``Content-Length`` header, if provided.\"\"\"\n", "error": "none", "author": "tom@organisms.be"}, {"index": "363", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "364", "colour": "orange", "code": "    name = None\n", "error": "none", "author": "tom@organisms.be"}, {"index": "365", "colour": "orange", "code": "    \"\"\"The \"name\" parameter of the ``Content-Disposition`` header, if any.\"\"\"\n", "error": "none", "author": "tom@organisms.be"}, {"index": "366", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "367", "colour": "orange", "code": "    params = None\n", "error": "none", "author": "tom@organisms.be"}, {"index": "368", "colour": "orange", "code": "    \"\"\"\n", "error": "none", "author": "tom@organisms.be"}, {"index": "369", "colour": "orange", "code": "    If the request Content-Type is 'application/x-www-form-urlencoded' or\n", "error": "none", "author": "tom@organisms.be"}, {"index": "370", "colour": "orange", "code": "    multipart, this will be a dict of the params pulled from the entity\n", "error": "none", "author": "tom@organisms.be"}, {"index": "371", "colour": "orange", "code": "    body; that is, it will be the portion of request.params that come\n", "error": "none", "author": "tom@organisms.be"}, {"index": "372", "colour": "orange", "code": "    from the message body (sometimes called \"POST params\", although they\n", "error": "none", "author": "tom@organisms.be"}, {"index": "373", "colour": "orange", "code": "    can be sent with various HTTP method verbs). This value is set between\n", "error": "none", "author": "tom@organisms.be"}, {"index": "374", "colour": "orange", "code": "    the 'before_request_body' and 'before_handler' hooks (assuming that\n", "error": "none", "author": "tom@organisms.be"}, {"index": "375", "colour": "orange", "code": "    process_request_body is True).\"\"\"\n", "error": "none", "author": "tom@organisms.be"}, {"index": "376", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "377", "colour": "orange", "code": "    processors = {'application/x-www-form-urlencoded': process_urlencoded,\n", "error": "none", "author": "tom@organisms.be"}, {"index": "378", "colour": "orange", "code": "                  'multipart/form-data': process_multipart_form_data,\n", "error": "none", "author": "tom@organisms.be"}, {"index": "379", "colour": "orange", "code": "                  'multipart': process_multipart,\n", "error": "none", "author": "tom@organisms.be"}, {"index": "380", "colour": "orange", "code": "                  }\n", "error": "none", "author": "tom@organisms.be"}, {"index": "381", "colour": "orange", "code": "    \"\"\"A dict of Content-Type names to processor methods.\"\"\"\n", "error": "none", "author": "tom@organisms.be"}, {"index": "382", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "383", "colour": "orange", "code": "    parts = None\n", "error": "none", "author": "tom@organisms.be"}, {"index": "384", "colour": "orange", "code": "    \"\"\"A list of Part instances if ``Content-Type`` is of major type \"multipart\".\"\"\"\n", "error": "none", "author": "tom@organisms.be"}, {"index": "385", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "386", "colour": "orange", "code": "    part_class = None\n", "error": "none", "author": "tom@organisms.be"}, {"index": "387", "colour": "orange", "code": "    \"\"\"The class used for multipart parts.\n", "error": "none", "author": "tom@organisms.be"}, {"index": "388", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "389", "colour": "orange", "code": "    You can replace this with custom subclasses to alter the processing of\n", "error": "none", "author": "tom@organisms.be"}, {"index": "390", "colour": "orange", "code": "    multipart parts.\n", "error": "none", "author": "tom@organisms.be"}, {"index": "391", "colour": "orange", "code": "    \"\"\"\n", "error": "none", "author": "tom@organisms.be"}, {"index": "392", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "393", "colour": "blue", "code": "    def __init__(self, fp, headers, params=None, parts=None):\n", "error": "R", "author": "tom@organisms.be"}, {"index": "394", "colour": "orange", "code": "        # Make an instance-specific copy of the class processors\n", "error": "none", "author": "tom@organisms.be"}, {"index": "395", "colour": "orange", "code": "        # so Tools, etc. can replace them per-request.\n", "error": "none", "author": "tom@organisms.be"}, {"index": "396", "colour": "orange", "code": "        self.processors = self.processors.copy()\n", "error": "none", "author": "tom@organisms.be"}, {"index": "397", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "398", "colour": "orange", "code": "        self.fp = fp\n", "error": "none", "author": "tom@organisms.be"}, {"index": "399", "colour": "orange", "code": "        self.headers = headers\n", "error": "none", "author": "tom@organisms.be"}, {"index": "400", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "401", "colour": "orange", "code": "        if params is None:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "402", "colour": "orange", "code": "            params = {}\n", "error": "none", "author": "tom@organisms.be"}, {"index": "403", "colour": "orange", "code": "        self.params = params\n", "error": "none", "author": "tom@organisms.be"}, {"index": "404", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "405", "colour": "orange", "code": "        if parts is None:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "406", "colour": "orange", "code": "            parts = []\n", "error": "none", "author": "tom@organisms.be"}, {"index": "407", "colour": "orange", "code": "        self.parts = parts\n", "error": "none", "author": "tom@organisms.be"}, {"index": "408", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "409", "colour": "orange", "code": "        # Content-Type\n", "error": "none", "author": "tom@organisms.be"}, {"index": "410", "colour": "orange", "code": "        self.content_type = headers.elements('Content-Type')\n", "error": "none", "author": "tom@organisms.be"}, {"index": "411", "colour": "orange", "code": "        if self.content_type:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "412", "colour": "orange", "code": "            self.content_type = self.content_type[0]\n", "error": "none", "author": "tom@organisms.be"}, {"index": "413", "colour": "orange", "code": "        else:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "414", "colour": "orange", "code": "            self.content_type = httputil.HeaderElement.from_str(\n", "error": "none", "author": "tom@organisms.be"}, {"index": "415", "colour": "orange", "code": "                self.default_content_type)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "416", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "417", "colour": "orange", "code": "        # Copy the class 'attempt_charsets', prepending any Content-Type charset\n", "error": "none", "author": "tom@organisms.be"}, {"index": "418", "colour": "orange", "code": "        dec = self.content_type.params.get(\"charset\", None)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "419", "colour": "orange", "code": "        if dec:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "420", "colour": "orange", "code": "            self.attempt_charsets = [dec] + [c for c in self.attempt_charsets\n", "error": "none", "author": "tom@organisms.be"}, {"index": "421", "colour": "orange", "code": "                                             if c != dec]\n", "error": "none", "author": "tom@organisms.be"}, {"index": "422", "colour": "orange", "code": "        else:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "423", "colour": "orange", "code": "            self.attempt_charsets = self.attempt_charsets[:]\n", "error": "none", "author": "tom@organisms.be"}, {"index": "424", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "425", "colour": "orange", "code": "        # Length\n", "error": "none", "author": "tom@organisms.be"}, {"index": "426", "colour": "orange", "code": "        self.length = None\n", "error": "none", "author": "tom@organisms.be"}, {"index": "427", "colour": "orange", "code": "        clen = headers.get('Content-Length', None)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "428", "colour": "orange", "code": "        # If Transfer-Encoding is 'chunked', ignore any Content-Length.\n", "error": "none", "author": "tom@organisms.be"}, {"index": "429", "colour": "orange", "code": "        if clen is not None and 'chunked' not in headers.get('Transfer-Encoding', ''):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "430", "colour": "orange", "code": "            try:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "431", "colour": "orange", "code": "                self.length = int(clen)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "432", "colour": "orange", "code": "            except ValueError:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "433", "colour": "orange", "code": "                pass\n", "error": "none", "author": "tom@organisms.be"}, {"index": "434", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "435", "colour": "orange", "code": "        # Content-Disposition\n", "error": "none", "author": "tom@organisms.be"}, {"index": "436", "colour": "orange", "code": "        self.name = None\n", "error": "none", "author": "tom@organisms.be"}, {"index": "437", "colour": "orange", "code": "        self.filename = None\n", "error": "none", "author": "tom@organisms.be"}, {"index": "438", "colour": "orange", "code": "        disp = headers.elements('Content-Disposition')\n", "error": "none", "author": "tom@organisms.be"}, {"index": "439", "colour": "orange", "code": "        if disp:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "440", "colour": "orange", "code": "            disp = disp[0]\n", "error": "none", "author": "tom@organisms.be"}, {"index": "441", "colour": "orange", "code": "            if 'name' in disp.params:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "442", "colour": "orange", "code": "                self.name = disp.params['name']\n", "error": "none", "author": "tom@organisms.be"}, {"index": "443", "colour": "orange", "code": "                if self.name.startswith('\"') and self.name.endswith('\"'):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "444", "colour": "orange", "code": "                    self.name = self.name[1:-1]\n", "error": "none", "author": "tom@organisms.be"}, {"index": "445", "colour": "orange", "code": "            if 'filename' in disp.params:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "446", "colour": "orange", "code": "                self.filename = disp.params['filename']\n", "error": "none", "author": "tom@organisms.be"}, {"index": "447", "colour": "orange", "code": "                if self.filename.startswith('\"') and self.filename.endswith('\"'):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "448", "colour": "orange", "code": "                    self.filename = self.filename[1:-1]\n", "error": "none", "author": "tom@organisms.be"}, {"index": "449", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "450", "colour": "orange", "code": "    # The 'type' attribute is deprecated in 3.2; remove it in 3.3.\n", "error": "none", "author": "tom@organisms.be"}, {"index": "451", "colour": "orange", "code": "    type = property(lambda self: self.content_type,\n", "error": "none", "author": "tom@organisms.be"}, {"index": "452", "colour": "orange", "code": "        doc=\"\"\"A deprecated alias for :attr:`content_type<cherrypy._cpreqbody.Entity.content_type>`.\"\"\")\n", "error": "none", "author": "tom@organisms.be"}, {"index": "453", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "454", "colour": "orange", "code": "    def read(self, size=None, fp_out=None):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "455", "colour": "orange", "code": "        return self.fp.read(size, fp_out)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "456", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "457", "colour": "orange", "code": "    def readline(self, size=None):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "458", "colour": "orange", "code": "        return self.fp.readline(size)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "459", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "460", "colour": "orange", "code": "    def readlines(self, sizehint=None):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "461", "colour": "orange", "code": "        return self.fp.readlines(sizehint)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "462", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "463", "colour": "orange", "code": "    def __iter__(self):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "464", "colour": "orange", "code": "        return self\n", "error": "none", "author": "tom@organisms.be"}, {"index": "465", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "466", "colour": "orange", "code": "    def __next__(self):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "467", "colour": "orange", "code": "        line = self.readline()\n", "error": "none", "author": "tom@organisms.be"}, {"index": "468", "colour": "orange", "code": "        if not line:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "469", "colour": "orange", "code": "            raise StopIteration\n", "error": "none", "author": "tom@organisms.be"}, {"index": "470", "colour": "orange", "code": "        return line\n", "error": "none", "author": "tom@organisms.be"}, {"index": "471", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "472", "colour": "orange", "code": "    def next(self):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "473", "colour": "orange", "code": "        return self.__next__()\n", "error": "none", "author": "tom@organisms.be"}, {"index": "474", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "475", "colour": "orange", "code": "    def read_into_file(self, fp_out=None):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "476", "colour": "orange", "code": "        \"\"\"Read the request body into fp_out (or make_file() if None). Return fp_out.\"\"\"\n", "error": "none", "author": "tom@organisms.be"}, {"index": "477", "colour": "orange", "code": "        if fp_out is None:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "478", "colour": "orange", "code": "            fp_out = self.make_file()\n", "error": "none", "author": "tom@organisms.be"}, {"index": "479", "colour": "orange", "code": "        self.read(fp_out=fp_out)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "480", "colour": "orange", "code": "        return fp_out\n", "error": "none", "author": "tom@organisms.be"}, {"index": "481", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "482", "colour": "blue", "code": "    def make_file(self):\n", "error": "R", "author": "tom@organisms.be"}, {"index": "483", "colour": "orange", "code": "        \"\"\"Return a file-like object into which the request body will be read.\n", "error": "none", "author": "tom@organisms.be"}, {"index": "484", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "485", "colour": "orange", "code": "        By default, this will return a TemporaryFile. Override as needed.\n", "error": "none", "author": "tom@organisms.be"}, {"index": "486", "colour": "orange", "code": "        See also :attr:`cherrypy._cpreqbody.Part.maxrambytes`.\"\"\"\n", "error": "none", "author": "tom@organisms.be"}, {"index": "487", "colour": "orange", "code": "        return tempfile.TemporaryFile()\n", "error": "none", "author": "tom@organisms.be"}, {"index": "488", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "489", "colour": "orange", "code": "    def fullvalue(self):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "490", "colour": "orange", "code": "        \"\"\"Return this entity as a string, whether stored in a file or not.\"\"\"\n", "error": "none", "author": "tom@organisms.be"}, {"index": "491", "colour": "red", "code": "        if self.file:\n", "error": "E", "author": "tom@organisms.be"}, {"index": "492", "colour": "orange", "code": "            # It was stored in a tempfile. Read it.\n", "error": "none", "author": "tom@organisms.be"}, {"index": "493", "colour": "red", "code": "            self.file.seek(0)\n", "error": "E", "author": "tom@organisms.be"}, {"index": "494", "colour": "red", "code": "            value = self.file.read()\n", "error": "E", "author": "tom@organisms.be"}, {"index": "495", "colour": "red", "code": "            self.file.seek(0)\n", "error": "E", "author": "tom@organisms.be"}, {"index": "496", "colour": "orange", "code": "        else:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "497", "colour": "red", "code": "            value = self.value\n", "error": "E", "author": "tom@organisms.be"}, {"index": "498", "colour": "orange", "code": "        return value\n", "error": "none", "author": "tom@organisms.be"}, {"index": "499", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "500", "colour": "orange", "code": "    def process(self):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "501", "colour": "orange", "code": "        \"\"\"Execute the best-match processor for the given media type.\"\"\"\n", "error": "none", "author": "tom@organisms.be"}, {"index": "502", "colour": "orange", "code": "        proc = None\n", "error": "none", "author": "tom@organisms.be"}, {"index": "503", "colour": "orange", "code": "        ct = self.content_type.value\n", "error": "none", "author": "tom@organisms.be"}, {"index": "504", "colour": "orange", "code": "        try:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "505", "colour": "orange", "code": "            proc = self.processors[ct]\n", "error": "none", "author": "tom@organisms.be"}, {"index": "506", "colour": "orange", "code": "        except KeyError:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "507", "colour": "orange", "code": "            toptype = ct.split('/', 1)[0]\n", "error": "none", "author": "tom@organisms.be"}, {"index": "508", "colour": "orange", "code": "            try:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "509", "colour": "orange", "code": "                proc = self.processors[toptype]\n", "error": "none", "author": "tom@organisms.be"}, {"index": "510", "colour": "orange", "code": "            except KeyError:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "511", "colour": "orange", "code": "                pass\n", "error": "none", "author": "tom@organisms.be"}, {"index": "512", "colour": "orange", "code": "        if proc is None:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "513", "colour": "orange", "code": "            self.default_proc()\n", "error": "none", "author": "tom@organisms.be"}, {"index": "514", "colour": "orange", "code": "        else:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "515", "colour": "orange", "code": "            proc(self)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "516", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "517", "colour": "orange", "code": "    def default_proc(self):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "518", "colour": "orange", "code": "        \"\"\"Called if a more-specific processor is not found for the ``Content-Type``.\"\"\"\n", "error": "none", "author": "tom@organisms.be"}, {"index": "519", "colour": "orange", "code": "        # Leave the fp alone for someone else to read. This works fine\n", "error": "none", "author": "tom@organisms.be"}, {"index": "520", "colour": "orange", "code": "        # for request.body, but the Part subclasses need to override this\n", "error": "none", "author": "tom@organisms.be"}, {"index": "521", "colour": "orange", "code": "        # so they can move on to the next part.\n", "error": "none", "author": "tom@organisms.be"}, {"index": "522", "colour": "orange", "code": "        pass\n", "error": "none", "author": "tom@organisms.be"}, {"index": "523", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "524", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "525", "colour": "orange", "code": "class Part(Entity):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "526", "colour": "orange", "code": "    \"\"\"A MIME part entity, part of a multipart entity.\"\"\"\n", "error": "none", "author": "tom@organisms.be"}, {"index": "527", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "528", "colour": "orange", "code": "    # \"The default character set, which must be assumed in the absence of a\n", "error": "none", "author": "tom@organisms.be"}, {"index": "529", "colour": "orange", "code": "    # charset parameter, is US-ASCII.\"\n", "error": "none", "author": "tom@organisms.be"}, {"index": "530", "colour": "orange", "code": "    attempt_charsets = ['us-ascii', 'utf-8']\n", "error": "none", "author": "tom@organisms.be"}, {"index": "531", "colour": "green", "code": "    \"\"\"A list of strings, each of which should be a known encoding.\n", "error": "W", "author": "tom@organisms.be"}, {"index": "532", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "533", "colour": "orange", "code": "    When the Content-Type of the request body warrants it, each of the given\n", "error": "none", "author": "tom@organisms.be"}, {"index": "534", "colour": "orange", "code": "    encodings will be tried in order. The first one to successfully decode the\n", "error": "none", "author": "tom@organisms.be"}, {"index": "535", "colour": "orange", "code": "    entity without raising an error is stored as\n", "error": "none", "author": "tom@organisms.be"}, {"index": "536", "colour": "orange", "code": "    :attr:`entity.charset<cherrypy._cpreqbody.Entity.charset>`. This defaults\n", "error": "none", "author": "tom@organisms.be"}, {"index": "537", "colour": "orange", "code": "    to ``['utf-8']`` (plus 'ISO-8859-1' for \"text/\\*\" types, as required by\n", "error": "none", "author": "tom@organisms.be"}, {"index": "538", "colour": "orange", "code": "    `HTTP/1.1 <http://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.7.1>`_),\n", "error": "none", "author": "tom@organisms.be"}, {"index": "539", "colour": "orange", "code": "    but ``['us-ascii', 'utf-8']`` for multipart parts.\n", "error": "none", "author": "tom@organisms.be"}, {"index": "540", "colour": "orange", "code": "    \"\"\"\n", "error": "none", "author": "tom@organisms.be"}, {"index": "541", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "542", "colour": "orange", "code": "    boundary = None\n", "error": "none", "author": "tom@organisms.be"}, {"index": "543", "colour": "orange", "code": "    \"\"\"The MIME multipart boundary.\"\"\"\n", "error": "none", "author": "tom@organisms.be"}, {"index": "544", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "545", "colour": "orange", "code": "    default_content_type = 'text/plain'\n", "error": "none", "author": "tom@organisms.be"}, {"index": "546", "colour": "orange", "code": "    \"\"\"This defines a default ``Content-Type`` to use if no Content-Type header\n", "error": "none", "author": "tom@organisms.be"}, {"index": "547", "colour": "orange", "code": "    is given. The empty string is used for RequestBody, which results in the\n", "error": "none", "author": "tom@organisms.be"}, {"index": "548", "colour": "orange", "code": "    request body not being read or parsed at all. This is by design; a missing\n", "error": "none", "author": "tom@organisms.be"}, {"index": "549", "colour": "orange", "code": "    ``Content-Type`` header in the HTTP request entity is an error at best,\n", "error": "none", "author": "tom@organisms.be"}, {"index": "550", "colour": "orange", "code": "    and a security hole at worst. For multipart parts, however (this class),\n", "error": "none", "author": "tom@organisms.be"}, {"index": "551", "colour": "orange", "code": "    the MIME spec declares that a part with no Content-Type defaults to\n", "error": "none", "author": "tom@organisms.be"}, {"index": "552", "colour": "orange", "code": "    \"text/plain\".\n", "error": "none", "author": "tom@organisms.be"}, {"index": "553", "colour": "orange", "code": "    \"\"\"\n", "error": "none", "author": "tom@organisms.be"}, {"index": "554", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "555", "colour": "orange", "code": "    # This is the default in stdlib cgi. We may want to increase it.\n", "error": "none", "author": "tom@organisms.be"}, {"index": "556", "colour": "orange", "code": "    maxrambytes = 1000\n", "error": "none", "author": "tom@organisms.be"}, {"index": "557", "colour": "orange", "code": "    \"\"\"The threshold of bytes after which point the ``Part`` will store its data\n", "error": "none", "author": "tom@organisms.be"}, {"index": "558", "colour": "orange", "code": "    in a file (generated by :func:`make_file<cherrypy._cprequest.Entity.make_file>`)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "559", "colour": "orange", "code": "    instead of a string. Defaults to 1000, just like the :mod:`cgi` module in\n", "error": "none", "author": "tom@organisms.be"}, {"index": "560", "colour": "orange", "code": "    Python's standard library.\n", "error": "none", "author": "tom@organisms.be"}, {"index": "561", "colour": "orange", "code": "    \"\"\"\n", "error": "none", "author": "tom@organisms.be"}, {"index": "562", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "563", "colour": "orange", "code": "    def __init__(self, fp, headers, boundary):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "564", "colour": "orange", "code": "        Entity.__init__(self, fp, headers)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "565", "colour": "orange", "code": "        self.boundary = boundary\n", "error": "none", "author": "tom@organisms.be"}, {"index": "566", "colour": "orange", "code": "        self.file = None\n", "error": "none", "author": "tom@organisms.be"}, {"index": "567", "colour": "orange", "code": "        self.value = None\n", "error": "none", "author": "tom@organisms.be"}, {"index": "568", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "569", "colour": "orange", "code": "    def from_fp(cls, fp, boundary):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "570", "colour": "orange", "code": "        headers = cls.read_headers(fp)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "571", "colour": "orange", "code": "        return cls(fp, headers, boundary)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "572", "colour": "orange", "code": "    from_fp = classmethod(from_fp)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "573", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "574", "colour": "orange", "code": "    def read_headers(cls, fp):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "575", "colour": "orange", "code": "        headers = httputil.HeaderMap()\n", "error": "none", "author": "tom@organisms.be"}, {"index": "576", "colour": "orange", "code": "        while True:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "577", "colour": "orange", "code": "            line = fp.readline()\n", "error": "none", "author": "tom@organisms.be"}, {"index": "578", "colour": "orange", "code": "            if not line:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "579", "colour": "orange", "code": "                # No more data--illegal end of headers\n", "error": "none", "author": "tom@organisms.be"}, {"index": "580", "colour": "orange", "code": "                raise EOFError(\"Illegal end of headers.\")\n", "error": "none", "author": "tom@organisms.be"}, {"index": "581", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "582", "colour": "orange", "code": "            if line == ntob('\\r\\n'):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "583", "colour": "orange", "code": "                # Normal end of headers\n", "error": "none", "author": "tom@organisms.be"}, {"index": "584", "colour": "orange", "code": "                break\n", "error": "none", "author": "tom@organisms.be"}, {"index": "585", "colour": "orange", "code": "            if not line.endswith(ntob('\\r\\n')):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "586", "colour": "orange", "code": "                raise ValueError(\"MIME requires CRLF terminators: %r\" % line)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "587", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "588", "colour": "orange", "code": "            if line[0] in ntob(' \\t'):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "589", "colour": "orange", "code": "                # It's a continuation line.\n", "error": "none", "author": "tom@organisms.be"}, {"index": "590", "colour": "orange", "code": "                v = line.strip().decode('ISO-8859-1')\n", "error": "none", "author": "tom@organisms.be"}, {"index": "591", "colour": "orange", "code": "            else:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "592", "colour": "orange", "code": "                k, v = line.split(ntob(\":\"), 1)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "593", "colour": "orange", "code": "                k = k.strip().decode('ISO-8859-1')\n", "error": "none", "author": "tom@organisms.be"}, {"index": "594", "colour": "orange", "code": "                v = v.strip().decode('ISO-8859-1')\n", "error": "none", "author": "tom@organisms.be"}, {"index": "595", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "596", "colour": "orange", "code": "            existing = headers.get(k)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "597", "colour": "orange", "code": "            if existing:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "598", "colour": "orange", "code": "                v = \", \".join((existing, v))\n", "error": "none", "author": "tom@organisms.be"}, {"index": "599", "colour": "orange", "code": "            headers[k] = v\n", "error": "none", "author": "tom@organisms.be"}, {"index": "600", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "601", "colour": "orange", "code": "        return headers\n", "error": "none", "author": "tom@organisms.be"}, {"index": "602", "colour": "orange", "code": "    read_headers = classmethod(read_headers)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "603", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "604", "colour": "blue", "code": "    def read_lines_to_boundary(self, fp_out=None):\n", "error": "R", "author": "tom@organisms.be"}, {"index": "605", "colour": "orange", "code": "        \"\"\"Read bytes from self.fp and return or write them to a file.\n", "error": "none", "author": "tom@organisms.be"}, {"index": "606", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "607", "colour": "orange", "code": "        If the 'fp_out' argument is None (the default), all bytes read are\n", "error": "none", "author": "tom@organisms.be"}, {"index": "608", "colour": "orange", "code": "        returned in a single byte string.\n", "error": "none", "author": "tom@organisms.be"}, {"index": "609", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "610", "colour": "orange", "code": "        If the 'fp_out' argument is not None, it must be a file-like object that\n", "error": "none", "author": "tom@organisms.be"}, {"index": "611", "colour": "orange", "code": "        supports the 'write' method; all bytes read will be written to the fp,\n", "error": "none", "author": "tom@organisms.be"}, {"index": "612", "colour": "orange", "code": "        and that fp is returned.\n", "error": "none", "author": "tom@organisms.be"}, {"index": "613", "colour": "orange", "code": "        \"\"\"\n", "error": "none", "author": "tom@organisms.be"}, {"index": "614", "colour": "orange", "code": "        endmarker = self.boundary + ntob(\"--\")\n", "error": "none", "author": "tom@organisms.be"}, {"index": "615", "colour": "orange", "code": "        delim = ntob(\"\")\n", "error": "none", "author": "tom@organisms.be"}, {"index": "616", "colour": "orange", "code": "        prev_lf = True\n", "error": "none", "author": "tom@organisms.be"}, {"index": "617", "colour": "orange", "code": "        lines = []\n", "error": "none", "author": "tom@organisms.be"}, {"index": "618", "colour": "orange", "code": "        seen = 0\n", "error": "none", "author": "tom@organisms.be"}, {"index": "619", "colour": "orange", "code": "        while True:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "620", "colour": "orange", "code": "            line = self.fp.readline(1<<16)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "621", "colour": "orange", "code": "            if not line:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "622", "colour": "orange", "code": "                raise EOFError(\"Illegal end of multipart body.\")\n", "error": "none", "author": "tom@organisms.be"}, {"index": "623", "colour": "orange", "code": "            if line.startswith(ntob(\"--\")) and prev_lf:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "624", "colour": "orange", "code": "                strippedline = line.strip()\n", "error": "none", "author": "tom@organisms.be"}, {"index": "625", "colour": "orange", "code": "                if strippedline == self.boundary:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "626", "colour": "orange", "code": "                    break\n", "error": "none", "author": "tom@organisms.be"}, {"index": "627", "colour": "orange", "code": "                if strippedline == endmarker:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "628", "colour": "orange", "code": "                    self.fp.finish()\n", "error": "none", "author": "tom@organisms.be"}, {"index": "629", "colour": "orange", "code": "                    break\n", "error": "none", "author": "tom@organisms.be"}, {"index": "630", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "631", "colour": "orange", "code": "            line = delim + line\n", "error": "none", "author": "tom@organisms.be"}, {"index": "632", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "633", "colour": "orange", "code": "            if line.endswith(ntob(\"\\r\\n\")):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "634", "colour": "orange", "code": "                delim = ntob(\"\\r\\n\")\n", "error": "none", "author": "tom@organisms.be"}, {"index": "635", "colour": "orange", "code": "                line = line[:-2]\n", "error": "none", "author": "tom@organisms.be"}, {"index": "636", "colour": "orange", "code": "                prev_lf = True\n", "error": "none", "author": "tom@organisms.be"}, {"index": "637", "colour": "orange", "code": "            elif line.endswith(ntob(\"\\n\")):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "638", "colour": "orange", "code": "                delim = ntob(\"\\n\")\n", "error": "none", "author": "tom@organisms.be"}, {"index": "639", "colour": "orange", "code": "                line = line[:-1]\n", "error": "none", "author": "tom@organisms.be"}, {"index": "640", "colour": "orange", "code": "                prev_lf = True\n", "error": "none", "author": "tom@organisms.be"}, {"index": "641", "colour": "orange", "code": "            else:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "642", "colour": "orange", "code": "                delim = ntob(\"\")\n", "error": "none", "author": "tom@organisms.be"}, {"index": "643", "colour": "orange", "code": "                prev_lf = False\n", "error": "none", "author": "tom@organisms.be"}, {"index": "644", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "645", "colour": "orange", "code": "            if fp_out is None:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "646", "colour": "orange", "code": "                lines.append(line)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "647", "colour": "orange", "code": "                seen += len(line)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "648", "colour": "orange", "code": "                if seen > self.maxrambytes:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "649", "colour": "orange", "code": "                    fp_out = self.make_file()\n", "error": "none", "author": "tom@organisms.be"}, {"index": "650", "colour": "orange", "code": "                    for line in lines:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "651", "colour": "orange", "code": "                        fp_out.write(line)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "652", "colour": "orange", "code": "            else:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "653", "colour": "orange", "code": "                fp_out.write(line)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "654", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "655", "colour": "orange", "code": "        if fp_out is None:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "656", "colour": "orange", "code": "            result = ntob('').join(lines)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "657", "colour": "orange", "code": "            for charset in self.attempt_charsets:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "658", "colour": "orange", "code": "                try:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "659", "colour": "orange", "code": "                    result = result.decode(charset)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "660", "colour": "orange", "code": "                except UnicodeDecodeError:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "661", "colour": "orange", "code": "                    pass\n", "error": "none", "author": "tom@organisms.be"}, {"index": "662", "colour": "orange", "code": "                else:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "663", "colour": "orange", "code": "                    self.charset = charset\n", "error": "none", "author": "tom@organisms.be"}, {"index": "664", "colour": "orange", "code": "                    return result\n", "error": "none", "author": "tom@organisms.be"}, {"index": "665", "colour": "green", "code": "            else:\n", "error": "W", "author": "tom@organisms.be"}, {"index": "666", "colour": "orange", "code": "                raise cherrypy.HTTPError(\n", "error": "none", "author": "tom@organisms.be"}, {"index": "667", "colour": "orange", "code": "                    400, \"The request entity could not be decoded. The following \"\n", "error": "none", "author": "tom@organisms.be"}, {"index": "668", "colour": "orange", "code": "                    \"charsets were attempted: %s\" % repr(self.attempt_charsets))\n", "error": "none", "author": "tom@organisms.be"}, {"index": "669", "colour": "orange", "code": "        else:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "670", "colour": "orange", "code": "            fp_out.seek(0)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "671", "colour": "orange", "code": "            return fp_out\n", "error": "none", "author": "tom@organisms.be"}, {"index": "672", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "673", "colour": "orange", "code": "    def default_proc(self):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "674", "colour": "orange", "code": "        \"\"\"Called if a more-specific processor is not found for the ``Content-Type``.\"\"\"\n", "error": "none", "author": "tom@organisms.be"}, {"index": "675", "colour": "orange", "code": "        if self.filename:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "676", "colour": "orange", "code": "            # Always read into a file if a .filename was given.\n", "error": "none", "author": "tom@organisms.be"}, {"index": "677", "colour": "orange", "code": "            self.file = self.read_into_file()\n", "error": "none", "author": "tom@organisms.be"}, {"index": "678", "colour": "orange", "code": "        else:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "679", "colour": "orange", "code": "            result = self.read_lines_to_boundary()\n", "error": "none", "author": "tom@organisms.be"}, {"index": "680", "colour": "orange", "code": "            if isinstance(result, basestring):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "681", "colour": "orange", "code": "                self.value = result\n", "error": "none", "author": "tom@organisms.be"}, {"index": "682", "colour": "orange", "code": "            else:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "683", "colour": "orange", "code": "                self.file = result\n", "error": "none", "author": "tom@organisms.be"}, {"index": "684", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "685", "colour": "orange", "code": "    def read_into_file(self, fp_out=None):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "686", "colour": "orange", "code": "        \"\"\"Read the request body into fp_out (or make_file() if None). Return fp_out.\"\"\"\n", "error": "none", "author": "tom@organisms.be"}, {"index": "687", "colour": "orange", "code": "        if fp_out is None:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "688", "colour": "orange", "code": "            fp_out = self.make_file()\n", "error": "none", "author": "tom@organisms.be"}, {"index": "689", "colour": "orange", "code": "        self.read_lines_to_boundary(fp_out=fp_out)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "690", "colour": "orange", "code": "        return fp_out\n", "error": "none", "author": "tom@organisms.be"}, {"index": "691", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "692", "colour": "orange", "code": "Entity.part_class = Part\n", "error": "none", "author": "tom@organisms.be"}, {"index": "693", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "694", "colour": "orange", "code": "try:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "695", "colour": "orange", "code": "    inf = float('inf')\n", "error": "none", "author": "tom@organisms.be"}, {"index": "696", "colour": "orange", "code": "except ValueError:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "697", "colour": "orange", "code": "    # Python 2.4 and lower\n", "error": "none", "author": "tom@organisms.be"}, {"index": "698", "colour": "blue", "code": "    class Infinity(object):\n", "error": "R", "author": "tom@organisms.be"}, {"index": "699", "colour": "orange", "code": "        def __cmp__(self, other):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "700", "colour": "orange", "code": "            return 1\n", "error": "none", "author": "tom@organisms.be"}, {"index": "701", "colour": "orange", "code": "        def __sub__(self, other):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "702", "colour": "orange", "code": "            return self\n", "error": "none", "author": "tom@organisms.be"}, {"index": "703", "colour": "orange", "code": "    inf = Infinity()\n", "error": "none", "author": "tom@organisms.be"}, {"index": "704", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "705", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "706", "colour": "orange", "code": "comma_separated_headers = ['Accept', 'Accept-Charset', 'Accept-Encoding',\n", "error": "none", "author": "tom@organisms.be"}, {"index": "707", "colour": "orange", "code": "    'Accept-Language', 'Accept-Ranges', 'Allow', 'Cache-Control', 'Connection',\n", "error": "none", "author": "tom@organisms.be"}, {"index": "708", "colour": "orange", "code": "    'Content-Encoding', 'Content-Language', 'Expect', 'If-Match',\n", "error": "none", "author": "tom@organisms.be"}, {"index": "709", "colour": "orange", "code": "    'If-None-Match', 'Pragma', 'Proxy-Authenticate', 'Te', 'Trailer',\n", "error": "none", "author": "tom@organisms.be"}, {"index": "710", "colour": "orange", "code": "    'Transfer-Encoding', 'Upgrade', 'Vary', 'Via', 'Warning', 'Www-Authenticate']\n", "error": "none", "author": "tom@organisms.be"}, {"index": "711", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "712", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "713", "colour": "blue", "code": "class SizedReader:\n", "error": "R", "author": "tom@organisms.be"}, {"index": "714", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "715", "colour": "blue", "code": "    def __init__(self, fp, length, maxbytes, bufsize=DEFAULT_BUFFER_SIZE, has_trailers=False):\n", "error": "R", "author": "tom@organisms.be"}, {"index": "716", "colour": "orange", "code": "        # Wrap our fp in a buffer so peek() works\n", "error": "none", "author": "tom@organisms.be"}, {"index": "717", "colour": "orange", "code": "        self.fp = fp\n", "error": "none", "author": "tom@organisms.be"}, {"index": "718", "colour": "orange", "code": "        self.length = length\n", "error": "none", "author": "tom@organisms.be"}, {"index": "719", "colour": "orange", "code": "        self.maxbytes = maxbytes\n", "error": "none", "author": "tom@organisms.be"}, {"index": "720", "colour": "orange", "code": "        self.buffer = ntob('')\n", "error": "none", "author": "tom@organisms.be"}, {"index": "721", "colour": "orange", "code": "        self.bufsize = bufsize\n", "error": "none", "author": "tom@organisms.be"}, {"index": "722", "colour": "orange", "code": "        self.bytes_read = 0\n", "error": "none", "author": "tom@organisms.be"}, {"index": "723", "colour": "orange", "code": "        self.done = False\n", "error": "none", "author": "tom@organisms.be"}, {"index": "724", "colour": "orange", "code": "        self.has_trailers = has_trailers\n", "error": "none", "author": "tom@organisms.be"}, {"index": "725", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "726", "colour": "blue", "code": "    def read(self, size=None, fp_out=None):\n", "error": "R", "author": "tom@organisms.be"}, {"index": "727", "colour": "orange", "code": "        \"\"\"Read bytes from the request body and return or write them to a file.\n", "error": "none", "author": "tom@organisms.be"}, {"index": "728", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "729", "colour": "orange", "code": "        A number of bytes less than or equal to the 'size' argument are read\n", "error": "none", "author": "tom@organisms.be"}, {"index": "730", "colour": "orange", "code": "        off the socket. The actual number of bytes read are tracked in\n", "error": "none", "author": "tom@organisms.be"}, {"index": "731", "colour": "orange", "code": "        self.bytes_read. The number may be smaller than 'size' when 1) the\n", "error": "none", "author": "tom@organisms.be"}, {"index": "732", "colour": "orange", "code": "        client sends fewer bytes, 2) the 'Content-Length' request header\n", "error": "none", "author": "tom@organisms.be"}, {"index": "733", "colour": "orange", "code": "        specifies fewer bytes than requested, or 3) the number of bytes read\n", "error": "none", "author": "tom@organisms.be"}, {"index": "734", "colour": "orange", "code": "        exceeds self.maxbytes (in which case, 413 is raised).\n", "error": "none", "author": "tom@organisms.be"}, {"index": "735", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "736", "colour": "orange", "code": "        If the 'fp_out' argument is None (the default), all bytes read are\n", "error": "none", "author": "tom@organisms.be"}, {"index": "737", "colour": "orange", "code": "        returned in a single byte string.\n", "error": "none", "author": "tom@organisms.be"}, {"index": "738", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "739", "colour": "orange", "code": "        If the 'fp_out' argument is not None, it must be a file-like object that\n", "error": "none", "author": "tom@organisms.be"}, {"index": "740", "colour": "orange", "code": "        supports the 'write' method; all bytes read will be written to the fp,\n", "error": "none", "author": "tom@organisms.be"}, {"index": "741", "colour": "orange", "code": "        and None is returned.\n", "error": "none", "author": "tom@organisms.be"}, {"index": "742", "colour": "orange", "code": "        \"\"\"\n", "error": "none", "author": "tom@organisms.be"}, {"index": "743", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "744", "colour": "orange", "code": "        if self.length is None:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "745", "colour": "orange", "code": "            if size is None:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "746", "colour": "orange", "code": "                remaining = inf\n", "error": "none", "author": "tom@organisms.be"}, {"index": "747", "colour": "orange", "code": "            else:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "748", "colour": "orange", "code": "                remaining = size\n", "error": "none", "author": "tom@organisms.be"}, {"index": "749", "colour": "orange", "code": "        else:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "750", "colour": "orange", "code": "            remaining = self.length - self.bytes_read\n", "error": "none", "author": "tom@organisms.be"}, {"index": "751", "colour": "orange", "code": "            if size and size < remaining:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "752", "colour": "orange", "code": "                remaining = size\n", "error": "none", "author": "tom@organisms.be"}, {"index": "753", "colour": "orange", "code": "        if remaining == 0:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "754", "colour": "orange", "code": "            self.finish()\n", "error": "none", "author": "tom@organisms.be"}, {"index": "755", "colour": "orange", "code": "            if fp_out is None:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "756", "colour": "orange", "code": "                return ntob('')\n", "error": "none", "author": "tom@organisms.be"}, {"index": "757", "colour": "orange", "code": "            else:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "758", "colour": "orange", "code": "                return None\n", "error": "none", "author": "tom@organisms.be"}, {"index": "759", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "760", "colour": "orange", "code": "        chunks = []\n", "error": "none", "author": "tom@organisms.be"}, {"index": "761", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "762", "colour": "orange", "code": "        # Read bytes from the buffer.\n", "error": "none", "author": "tom@organisms.be"}, {"index": "763", "colour": "orange", "code": "        if self.buffer:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "764", "colour": "orange", "code": "            if remaining is inf:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "765", "colour": "orange", "code": "                data = self.buffer\n", "error": "none", "author": "tom@organisms.be"}, {"index": "766", "colour": "orange", "code": "                self.buffer = ntob('')\n", "error": "none", "author": "tom@organisms.be"}, {"index": "767", "colour": "orange", "code": "            else:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "768", "colour": "orange", "code": "                data = self.buffer[:remaining]\n", "error": "none", "author": "tom@organisms.be"}, {"index": "769", "colour": "orange", "code": "                self.buffer = self.buffer[remaining:]\n", "error": "none", "author": "tom@organisms.be"}, {"index": "770", "colour": "orange", "code": "            datalen = len(data)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "771", "colour": "orange", "code": "            remaining -= datalen\n", "error": "none", "author": "tom@organisms.be"}, {"index": "772", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "773", "colour": "orange", "code": "            # Check lengths.\n", "error": "none", "author": "tom@organisms.be"}, {"index": "774", "colour": "orange", "code": "            self.bytes_read += datalen\n", "error": "none", "author": "tom@organisms.be"}, {"index": "775", "colour": "orange", "code": "            if self.maxbytes and self.bytes_read > self.maxbytes:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "776", "colour": "orange", "code": "                raise cherrypy.HTTPError(413)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "777", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "778", "colour": "orange", "code": "            # Store the data.\n", "error": "none", "author": "tom@organisms.be"}, {"index": "779", "colour": "orange", "code": "            if fp_out is None:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "780", "colour": "orange", "code": "                chunks.append(data)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "781", "colour": "orange", "code": "            else:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "782", "colour": "orange", "code": "                fp_out.write(data)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "783", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "784", "colour": "orange", "code": "        # Read bytes from the socket.\n", "error": "none", "author": "tom@organisms.be"}, {"index": "785", "colour": "orange", "code": "        while remaining > 0:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "786", "colour": "orange", "code": "            chunksize = min(remaining, self.bufsize)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "787", "colour": "orange", "code": "            try:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "788", "colour": "orange", "code": "                data = self.fp.read(chunksize)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "789", "colour": "green", "code": "            except Exception:\n", "error": "W", "author": "tom@organisms.be"}, {"index": "790", "colour": "orange", "code": "                e = sys.exc_info()[1]\n", "error": "none", "author": "tom@organisms.be"}, {"index": "791", "colour": "orange", "code": "                if e.__class__.__name__ == 'MaxSizeExceeded':\n", "error": "none", "author": "tom@organisms.be"}, {"index": "792", "colour": "orange", "code": "                    # Post data is too big\n", "error": "none", "author": "tom@organisms.be"}, {"index": "793", "colour": "orange", "code": "                    raise cherrypy.HTTPError(\n", "error": "none", "author": "tom@organisms.be"}, {"index": "794", "colour": "orange", "code": "                        413, \"Maximum request length: %r\" % e.args[1])\n", "error": "none", "author": "tom@organisms.be"}, {"index": "795", "colour": "orange", "code": "                else:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "796", "colour": "orange", "code": "                    raise\n", "error": "none", "author": "tom@organisms.be"}, {"index": "797", "colour": "orange", "code": "            if not data:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "798", "colour": "orange", "code": "                self.finish()\n", "error": "none", "author": "tom@organisms.be"}, {"index": "799", "colour": "orange", "code": "                break\n", "error": "none", "author": "tom@organisms.be"}, {"index": "800", "colour": "orange", "code": "            datalen = len(data)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "801", "colour": "orange", "code": "            remaining -= datalen\n", "error": "none", "author": "tom@organisms.be"}, {"index": "802", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "803", "colour": "orange", "code": "            # Check lengths.\n", "error": "none", "author": "tom@organisms.be"}, {"index": "804", "colour": "orange", "code": "            self.bytes_read += datalen\n", "error": "none", "author": "tom@organisms.be"}, {"index": "805", "colour": "orange", "code": "            if self.maxbytes and self.bytes_read > self.maxbytes:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "806", "colour": "orange", "code": "                raise cherrypy.HTTPError(413)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "807", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "808", "colour": "orange", "code": "            # Store the data.\n", "error": "none", "author": "tom@organisms.be"}, {"index": "809", "colour": "orange", "code": "            if fp_out is None:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "810", "colour": "orange", "code": "                chunks.append(data)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "811", "colour": "orange", "code": "            else:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "812", "colour": "orange", "code": "                fp_out.write(data)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "813", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "814", "colour": "orange", "code": "        if fp_out is None:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "815", "colour": "orange", "code": "            return ntob('').join(chunks)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "816", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "817", "colour": "orange", "code": "    def readline(self, size=None):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "818", "colour": "orange", "code": "        \"\"\"Read a line from the request body and return it.\"\"\"\n", "error": "none", "author": "tom@organisms.be"}, {"index": "819", "colour": "orange", "code": "        chunks = []\n", "error": "none", "author": "tom@organisms.be"}, {"index": "820", "colour": "orange", "code": "        while size is None or size > 0:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "821", "colour": "orange", "code": "            chunksize = self.bufsize\n", "error": "none", "author": "tom@organisms.be"}, {"index": "822", "colour": "orange", "code": "            if size is not None and size < self.bufsize:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "823", "colour": "orange", "code": "                chunksize = size\n", "error": "none", "author": "tom@organisms.be"}, {"index": "824", "colour": "orange", "code": "            data = self.read(chunksize)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "825", "colour": "orange", "code": "            if not data:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "826", "colour": "orange", "code": "                break\n", "error": "none", "author": "tom@organisms.be"}, {"index": "827", "colour": "orange", "code": "            pos = data.find(ntob('\\n')) + 1\n", "error": "none", "author": "tom@organisms.be"}, {"index": "828", "colour": "orange", "code": "            if pos:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "829", "colour": "orange", "code": "                chunks.append(data[:pos])\n", "error": "none", "author": "tom@organisms.be"}, {"index": "830", "colour": "orange", "code": "                remainder = data[pos:]\n", "error": "none", "author": "tom@organisms.be"}, {"index": "831", "colour": "orange", "code": "                self.buffer += remainder\n", "error": "none", "author": "tom@organisms.be"}, {"index": "832", "colour": "orange", "code": "                self.bytes_read -= len(remainder)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "833", "colour": "orange", "code": "                break\n", "error": "none", "author": "tom@organisms.be"}, {"index": "834", "colour": "orange", "code": "            else:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "835", "colour": "orange", "code": "                chunks.append(data)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "836", "colour": "orange", "code": "        return ntob('').join(chunks)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "837", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "838", "colour": "orange", "code": "    def readlines(self, sizehint=None):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "839", "colour": "orange", "code": "        \"\"\"Read lines from the request body and return them.\"\"\"\n", "error": "none", "author": "tom@organisms.be"}, {"index": "840", "colour": "orange", "code": "        if self.length is not None:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "841", "colour": "orange", "code": "            if sizehint is None:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "842", "colour": "orange", "code": "                sizehint = self.length - self.bytes_read\n", "error": "none", "author": "tom@organisms.be"}, {"index": "843", "colour": "orange", "code": "            else:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "844", "colour": "orange", "code": "                sizehint = min(sizehint, self.length - self.bytes_read)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "845", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "846", "colour": "orange", "code": "        lines = []\n", "error": "none", "author": "tom@organisms.be"}, {"index": "847", "colour": "orange", "code": "        seen = 0\n", "error": "none", "author": "tom@organisms.be"}, {"index": "848", "colour": "orange", "code": "        while True:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "849", "colour": "orange", "code": "            line = self.readline()\n", "error": "none", "author": "tom@organisms.be"}, {"index": "850", "colour": "orange", "code": "            if not line:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "851", "colour": "orange", "code": "                break\n", "error": "none", "author": "tom@organisms.be"}, {"index": "852", "colour": "orange", "code": "            lines.append(line)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "853", "colour": "orange", "code": "            seen += len(line)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "854", "colour": "orange", "code": "            if seen >= sizehint:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "855", "colour": "orange", "code": "                break\n", "error": "none", "author": "tom@organisms.be"}, {"index": "856", "colour": "orange", "code": "        return lines\n", "error": "none", "author": "tom@organisms.be"}, {"index": "857", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "858", "colour": "orange", "code": "    def finish(self):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "859", "colour": "orange", "code": "        self.done = True\n", "error": "none", "author": "tom@organisms.be"}, {"index": "860", "colour": "orange", "code": "        if self.has_trailers and hasattr(self.fp, 'read_trailer_lines'):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "861", "colour": "green", "code": "            self.trailers = {}\n", "error": "W", "author": "tom@organisms.be"}, {"index": "862", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "863", "colour": "orange", "code": "            try:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "864", "colour": "orange", "code": "                for line in self.fp.read_trailer_lines():\n", "error": "none", "author": "tom@organisms.be"}, {"index": "865", "colour": "orange", "code": "                    if line[0] in ntob(' \\t'):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "866", "colour": "orange", "code": "                        # It's a continuation line.\n", "error": "none", "author": "tom@organisms.be"}, {"index": "867", "colour": "orange", "code": "                        v = line.strip()\n", "error": "none", "author": "tom@organisms.be"}, {"index": "868", "colour": "orange", "code": "                    else:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "869", "colour": "orange", "code": "                        try:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "870", "colour": "orange", "code": "                            k, v = line.split(ntob(\":\"), 1)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "871", "colour": "orange", "code": "                        except ValueError:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "872", "colour": "orange", "code": "                            raise ValueError(\"Illegal header line.\")\n", "error": "none", "author": "tom@organisms.be"}, {"index": "873", "colour": "orange", "code": "                        k = k.strip().title()\n", "error": "none", "author": "tom@organisms.be"}, {"index": "874", "colour": "orange", "code": "                        v = v.strip()\n", "error": "none", "author": "tom@organisms.be"}, {"index": "875", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "876", "colour": "orange", "code": "                    if k in comma_separated_headers:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "877", "colour": "red", "code": "                        existing = self.trailers.get(envname)\n", "error": "E", "author": "tom@organisms.be"}, {"index": "878", "colour": "orange", "code": "                        if existing:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "879", "colour": "orange", "code": "                            v = ntob(\", \").join((existing, v))\n", "error": "none", "author": "tom@organisms.be"}, {"index": "880", "colour": "orange", "code": "                    self.trailers[k] = v\n", "error": "none", "author": "tom@organisms.be"}, {"index": "881", "colour": "green", "code": "            except Exception:\n", "error": "W", "author": "tom@organisms.be"}, {"index": "882", "colour": "orange", "code": "                e = sys.exc_info()[1]\n", "error": "none", "author": "tom@organisms.be"}, {"index": "883", "colour": "orange", "code": "                if e.__class__.__name__ == 'MaxSizeExceeded':\n", "error": "none", "author": "tom@organisms.be"}, {"index": "884", "colour": "orange", "code": "                    # Post data is too big\n", "error": "none", "author": "tom@organisms.be"}, {"index": "885", "colour": "orange", "code": "                    raise cherrypy.HTTPError(\n", "error": "none", "author": "tom@organisms.be"}, {"index": "886", "colour": "orange", "code": "                        413, \"Maximum request length: %r\" % e.args[1])\n", "error": "none", "author": "tom@organisms.be"}, {"index": "887", "colour": "orange", "code": "                else:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "888", "colour": "orange", "code": "                    raise\n", "error": "none", "author": "tom@organisms.be"}, {"index": "889", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "890", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "891", "colour": "orange", "code": "class RequestBody(Entity):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "892", "colour": "orange", "code": "    \"\"\"The entity of the HTTP request.\"\"\"\n", "error": "none", "author": "tom@organisms.be"}, {"index": "893", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "894", "colour": "orange", "code": "    bufsize = 8 * 1024\n", "error": "none", "author": "tom@organisms.be"}, {"index": "895", "colour": "orange", "code": "    \"\"\"The buffer size used when reading the socket.\"\"\"\n", "error": "none", "author": "tom@organisms.be"}, {"index": "896", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "897", "colour": "orange", "code": "    # Don't parse the request body at all if the client didn't provide\n", "error": "none", "author": "tom@organisms.be"}, {"index": "898", "colour": "orange", "code": "    # a Content-Type header. See http://www.cherrypy.org/ticket/790\n", "error": "none", "author": "tom@organisms.be"}, {"index": "899", "colour": "orange", "code": "    default_content_type = ''\n", "error": "none", "author": "tom@organisms.be"}, {"index": "900", "colour": "orange", "code": "    \"\"\"This defines a default ``Content-Type`` to use if no Content-Type header\n", "error": "none", "author": "tom@organisms.be"}, {"index": "901", "colour": "orange", "code": "    is given. The empty string is used for RequestBody, which results in the\n", "error": "none", "author": "tom@organisms.be"}, {"index": "902", "colour": "orange", "code": "    request body not being read or parsed at all. This is by design; a missing\n", "error": "none", "author": "tom@organisms.be"}, {"index": "903", "colour": "orange", "code": "    ``Content-Type`` header in the HTTP request entity is an error at best,\n", "error": "none", "author": "tom@organisms.be"}, {"index": "904", "colour": "orange", "code": "    and a security hole at worst. For multipart parts, however, the MIME spec\n", "error": "none", "author": "tom@organisms.be"}, {"index": "905", "colour": "orange", "code": "    declares that a part with no Content-Type defaults to \"text/plain\"\n", "error": "none", "author": "tom@organisms.be"}, {"index": "906", "colour": "orange", "code": "    (see :class:`Part<cherrypy._cpreqbody.Part>`).\n", "error": "none", "author": "tom@organisms.be"}, {"index": "907", "colour": "orange", "code": "    \"\"\"\n", "error": "none", "author": "tom@organisms.be"}, {"index": "908", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "909", "colour": "orange", "code": "    maxbytes = None\n", "error": "none", "author": "tom@organisms.be"}, {"index": "910", "colour": "orange", "code": "    \"\"\"Raise ``MaxSizeExceeded`` if more bytes than this are read from the socket.\"\"\"\n", "error": "none", "author": "tom@organisms.be"}, {"index": "911", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "912", "colour": "orange", "code": "    def __init__(self, fp, headers, params=None, request_params=None):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "913", "colour": "orange", "code": "        Entity.__init__(self, fp, headers, params)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "914", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "915", "colour": "orange", "code": "        # http://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.7.1\n", "error": "none", "author": "tom@organisms.be"}, {"index": "916", "colour": "orange", "code": "        # When no explicit charset parameter is provided by the\n", "error": "none", "author": "tom@organisms.be"}, {"index": "917", "colour": "orange", "code": "        # sender, media subtypes of the \"text\" type are defined\n", "error": "none", "author": "tom@organisms.be"}, {"index": "918", "colour": "orange", "code": "        # to have a default charset value of \"ISO-8859-1\" when\n", "error": "none", "author": "tom@organisms.be"}, {"index": "919", "colour": "orange", "code": "        # received via HTTP.\n", "error": "none", "author": "tom@organisms.be"}, {"index": "920", "colour": "orange", "code": "        if self.content_type.value.startswith('text/'):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "921", "colour": "orange", "code": "            for c in ('ISO-8859-1', 'iso-8859-1', 'Latin-1', 'latin-1'):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "922", "colour": "orange", "code": "                if c in self.attempt_charsets:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "923", "colour": "orange", "code": "                    break\n", "error": "none", "author": "tom@organisms.be"}, {"index": "924", "colour": "orange", "code": "            else:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "925", "colour": "orange", "code": "                self.attempt_charsets.append('ISO-8859-1')\n", "error": "none", "author": "tom@organisms.be"}, {"index": "926", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "927", "colour": "orange", "code": "        # Temporary fix while deprecating passing .parts as .params.\n", "error": "none", "author": "tom@organisms.be"}, {"index": "928", "colour": "orange", "code": "        self.processors['multipart'] = _old_process_multipart\n", "error": "none", "author": "tom@organisms.be"}, {"index": "929", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "930", "colour": "orange", "code": "        if request_params is None:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "931", "colour": "orange", "code": "            request_params = {}\n", "error": "none", "author": "tom@organisms.be"}, {"index": "932", "colour": "orange", "code": "        self.request_params = request_params\n", "error": "none", "author": "tom@organisms.be"}, {"index": "933", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "934", "colour": "orange", "code": "    def process(self):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "935", "colour": "orange", "code": "        \"\"\"Process the request entity based on its Content-Type.\"\"\"\n", "error": "none", "author": "tom@organisms.be"}, {"index": "936", "colour": "orange", "code": "        # \"The presence of a message-body in a request is signaled by the\n", "error": "none", "author": "tom@organisms.be"}, {"index": "937", "colour": "orange", "code": "        # inclusion of a Content-Length or Transfer-Encoding header field in\n", "error": "none", "author": "tom@organisms.be"}, {"index": "938", "colour": "orange", "code": "        # the request's message-headers.\"\n", "error": "none", "author": "tom@organisms.be"}, {"index": "939", "colour": "orange", "code": "        # It is possible to send a POST request with no body, for example;\n", "error": "none", "author": "tom@organisms.be"}, {"index": "940", "colour": "orange", "code": "        # however, app developers are responsible in that case to set\n", "error": "none", "author": "tom@organisms.be"}, {"index": "941", "colour": "orange", "code": "        # cherrypy.request.process_body to False so this method isn't called.\n", "error": "none", "author": "tom@organisms.be"}, {"index": "942", "colour": "orange", "code": "        h = cherrypy.serving.request.headers\n", "error": "none", "author": "tom@organisms.be"}, {"index": "943", "colour": "orange", "code": "        if 'Content-Length' not in h and 'Transfer-Encoding' not in h:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "944", "colour": "orange", "code": "            raise cherrypy.HTTPError(411)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "945", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "946", "colour": "orange", "code": "        self.fp = SizedReader(self.fp, self.length,\n", "error": "none", "author": "tom@organisms.be"}, {"index": "947", "colour": "orange", "code": "                              self.maxbytes, bufsize=self.bufsize,\n", "error": "none", "author": "tom@organisms.be"}, {"index": "948", "colour": "orange", "code": "                              has_trailers='Trailer' in h)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "949", "colour": "orange", "code": "        super(RequestBody, self).process()\n", "error": "none", "author": "tom@organisms.be"}, {"index": "950", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "951", "colour": "orange", "code": "        # Body params should also be a part of the request_params\n", "error": "none", "author": "tom@organisms.be"}, {"index": "952", "colour": "orange", "code": "        # add them in here.\n", "error": "none", "author": "tom@organisms.be"}, {"index": "953", "colour": "orange", "code": "        request_params = self.request_params\n", "error": "none", "author": "tom@organisms.be"}, {"index": "954", "colour": "orange", "code": "        for key, value in self.params.items():\n", "error": "none", "author": "tom@organisms.be"}, {"index": "955", "colour": "orange", "code": "            # Python 2 only: keyword arguments must be byte strings (type 'str').\n", "error": "none", "author": "tom@organisms.be"}, {"index": "956", "colour": "orange", "code": "            if sys.version_info < (3, 0):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "957", "colour": "orange", "code": "                if isinstance(key, unicode):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "958", "colour": "orange", "code": "                    key = key.encode('ISO-8859-1')\n", "error": "none", "author": "tom@organisms.be"}, {"index": "959", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "960", "colour": "orange", "code": "            if key in request_params:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "961", "colour": "orange", "code": "                if not isinstance(request_params[key], list):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "962", "colour": "orange", "code": "                    request_params[key] = [request_params[key]]\n", "error": "none", "author": "tom@organisms.be"}, {"index": "963", "colour": "orange", "code": "                request_params[key].append(value)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "964", "colour": "orange", "code": "            else:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "965", "colour": "orange", "code": "                request_params[key] = value\n", "error": "none", "author": "tom@organisms.be"}]]}