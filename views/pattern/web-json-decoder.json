{"path": "/home/asumal/git/cs410/pattern/pattern/web/json/decoder.py", "lines": [{"index": "1", "colour": "orange", "code": "\"\"\"Implementation of JSONDecoder\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "2", "colour": "orange", "code": "\"\"\"\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "3", "colour": "orange", "code": "import re\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "4", "colour": "orange", "code": "import sys\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "5", "colour": "orange", "code": "import struct\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "6", "colour": "orange", "code": "\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "7", "colour": "green", "code": "from scanner import make_scanner\n", "error": "W", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "8", "colour": "orange", "code": "def _import_c_scanstring():\n", "error": "none", "author": "tom@organisms.be"}, {"index": "9", "colour": "orange", "code": "    try:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "10", "colour": "green", "code": "        from _speedups import scanstring\n", "error": "W", "author": "tom@organisms.be"}, {"index": "11", "colour": "orange", "code": "        return scanstring\n", "error": "none", "author": "tom@organisms.be"}, {"index": "12", "colour": "orange", "code": "    except ImportError:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "13", "colour": "orange", "code": "        return None\n", "error": "none", "author": "tom@organisms.be"}, {"index": "14", "colour": "orange", "code": "c_scanstring = _import_c_scanstring()\n", "error": "none", "author": "tom@organisms.be"}, {"index": "15", "colour": "orange", "code": "\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "16", "colour": "orange", "code": "__all__ = ['JSONDecoder']\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "17", "colour": "orange", "code": "\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "18", "colour": "orange", "code": "FLAGS = re.VERBOSE | re.MULTILINE | re.DOTALL\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "19", "colour": "orange", "code": "\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "20", "colour": "orange", "code": "def _floatconstants():\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "21", "colour": "orange", "code": "    _BYTES = '7FF80000000000007FF0000000000000'.decode('hex')\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "22", "colour": "orange", "code": "    # The struct module in Python 2.4 would get frexp() out of range here\n", "error": "none", "author": "tom@organisms.be"}, {"index": "23", "colour": "orange", "code": "    # when an endian is specified in the format string. Fixed in Python 2.5+\n", "error": "none", "author": "tom@organisms.be"}, {"index": "24", "colour": "orange", "code": "    if sys.byteorder != 'big':\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "25", "colour": "orange", "code": "        _BYTES = _BYTES[:8][::-1] + _BYTES[8:][::-1]\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "26", "colour": "orange", "code": "    nan, inf = struct.unpack('dd', _BYTES)\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "27", "colour": "orange", "code": "    return nan, inf, -inf\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "28", "colour": "orange", "code": "\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "29", "colour": "orange", "code": "NaN, PosInf, NegInf = _floatconstants()\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "30", "colour": "orange", "code": "\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "31", "colour": "orange", "code": "\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "32", "colour": "blue", "code": "class JSONDecodeError(ValueError):\n", "error": "R", "author": "tom@organisms.be"}, {"index": "33", "colour": "orange", "code": "    \"\"\"Subclass of ValueError with the following additional properties:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "34", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "35", "colour": "orange", "code": "    msg: The unformatted error message\n", "error": "none", "author": "tom@organisms.be"}, {"index": "36", "colour": "orange", "code": "    doc: The JSON document being parsed\n", "error": "none", "author": "tom@organisms.be"}, {"index": "37", "colour": "orange", "code": "    pos: The start index of doc where parsing failed\n", "error": "none", "author": "tom@organisms.be"}, {"index": "38", "colour": "orange", "code": "    end: The end index of doc where parsing failed (may be None)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "39", "colour": "orange", "code": "    lineno: The line corresponding to pos\n", "error": "none", "author": "tom@organisms.be"}, {"index": "40", "colour": "orange", "code": "    colno: The column corresponding to pos\n", "error": "none", "author": "tom@organisms.be"}, {"index": "41", "colour": "orange", "code": "    endlineno: The line corresponding to end (may be None)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "42", "colour": "orange", "code": "    endcolno: The column corresponding to end (may be None)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "43", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "44", "colour": "orange", "code": "    \"\"\"\n", "error": "none", "author": "tom@organisms.be"}, {"index": "45", "colour": "orange", "code": "    def __init__(self, msg, doc, pos, end=None):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "46", "colour": "orange", "code": "        ValueError.__init__(self, errmsg(msg, doc, pos, end=end))\n", "error": "none", "author": "tom@organisms.be"}, {"index": "47", "colour": "orange", "code": "        self.msg = msg\n", "error": "none", "author": "tom@organisms.be"}, {"index": "48", "colour": "orange", "code": "        self.doc = doc\n", "error": "none", "author": "tom@organisms.be"}, {"index": "49", "colour": "orange", "code": "        self.pos = pos\n", "error": "none", "author": "tom@organisms.be"}, {"index": "50", "colour": "orange", "code": "        self.end = end\n", "error": "none", "author": "tom@organisms.be"}, {"index": "51", "colour": "orange", "code": "        self.lineno, self.colno = linecol(doc, pos)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "52", "colour": "orange", "code": "        if end is not None:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "53", "colour": "orange", "code": "            self.endlineno, self.endcolno = linecol(doc, end)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "54", "colour": "orange", "code": "        else:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "55", "colour": "orange", "code": "            self.endlineno, self.endcolno = None, None\n", "error": "none", "author": "tom@organisms.be"}, {"index": "56", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "57", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "58", "colour": "orange", "code": "def linecol(doc, pos):\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "59", "colour": "orange", "code": "    lineno = doc.count('\\n', 0, pos) + 1\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "60", "colour": "orange", "code": "    if lineno == 1:\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "61", "colour": "orange", "code": "        colno = pos\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "62", "colour": "orange", "code": "    else:\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "63", "colour": "orange", "code": "        colno = pos - doc.rindex('\\n', 0, pos)\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "64", "colour": "orange", "code": "    return lineno, colno\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "65", "colour": "orange", "code": "\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "66", "colour": "orange", "code": "\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "67", "colour": "orange", "code": "def errmsg(msg, doc, pos, end=None):\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "68", "colour": "orange", "code": "    # Note that this function is called from _speedups\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "69", "colour": "orange", "code": "    lineno, colno = linecol(doc, pos)\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "70", "colour": "orange", "code": "    if end is None:\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "71", "colour": "orange", "code": "        #fmt = '{0}: line {1} column {2} (char {3})'\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "72", "colour": "orange", "code": "        #return fmt.format(msg, lineno, colno, pos)\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "73", "colour": "orange", "code": "        fmt = '%s: line %d column %d (char %d)'\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "74", "colour": "orange", "code": "        return fmt % (msg, lineno, colno, pos)\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "75", "colour": "orange", "code": "    endlineno, endcolno = linecol(doc, end)\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "76", "colour": "orange", "code": "    #fmt = '{0}: line {1} column {2} - line {3} column {4} (char {5} - {6})'\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "77", "colour": "orange", "code": "    #return fmt.format(msg, lineno, colno, endlineno, endcolno, pos, end)\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "78", "colour": "orange", "code": "    fmt = '%s: line %d column %d - line %d column %d (char %d - %d)'\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "79", "colour": "orange", "code": "    return fmt % (msg, lineno, colno, endlineno, endcolno, pos, end)\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "80", "colour": "orange", "code": "\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "81", "colour": "orange", "code": "\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "82", "colour": "orange", "code": "_CONSTANTS = {\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "83", "colour": "orange", "code": "    '-Infinity': NegInf,\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "84", "colour": "orange", "code": "    'Infinity': PosInf,\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "85", "colour": "orange", "code": "    'NaN': NaN,\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "86", "colour": "orange", "code": "}\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "87", "colour": "orange", "code": "\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "88", "colour": "orange", "code": "STRINGCHUNK = re.compile(r'(.*?)([\"\\\\\\x00-\\x1f])', FLAGS)\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "89", "colour": "orange", "code": "BACKSLASH = {\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "90", "colour": "orange", "code": "    '\"': u'\"', '\\\\': u'\\\\', '/': u'/',\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "91", "colour": "orange", "code": "    'b': u'\\b', 'f': u'\\f', 'n': u'\\n', 'r': u'\\r', 't': u'\\t',\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "92", "colour": "orange", "code": "}\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "93", "colour": "orange", "code": "\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "94", "colour": "orange", "code": "DEFAULT_ENCODING = \"utf-8\"\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "95", "colour": "orange", "code": "\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "96", "colour": "blue", "code": "def py_scanstring(s, end, encoding=None, strict=True,\n", "error": "R", "author": "tom@organisms.be"}, {"index": "97", "colour": "orange", "code": "        _b=BACKSLASH, _m=STRINGCHUNK.match):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "98", "colour": "orange", "code": "    \"\"\"Scan the string s for a JSON string. End is the index of the\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "99", "colour": "orange", "code": "    character in s after the quote that started the JSON string.\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "100", "colour": "orange", "code": "    Unescapes all valid JSON string escape sequences and raises ValueError\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "101", "colour": "orange", "code": "    on attempt to decode an invalid string. If strict is False then literal\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "102", "colour": "orange", "code": "    control characters are allowed in the string.\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "103", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "104", "colour": "orange", "code": "    Returns a tuple of the decoded string and the index of the character in s\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "105", "colour": "orange", "code": "    after the end quote.\"\"\"\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "106", "colour": "orange", "code": "    if encoding is None:\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "107", "colour": "orange", "code": "        encoding = DEFAULT_ENCODING\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "108", "colour": "orange", "code": "    chunks = []\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "109", "colour": "orange", "code": "    _append = chunks.append\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "110", "colour": "orange", "code": "    begin = end - 1\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "111", "colour": "orange", "code": "    while 1:\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "112", "colour": "orange", "code": "        chunk = _m(s, end)\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "113", "colour": "orange", "code": "        if chunk is None:\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "114", "colour": "orange", "code": "            raise JSONDecodeError(\n", "error": "none", "author": "tom@organisms.be"}, {"index": "115", "colour": "orange", "code": "                \"Unterminated string starting at\", s, begin)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "116", "colour": "orange", "code": "        end = chunk.end()\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "117", "colour": "orange", "code": "        content, terminator = chunk.groups()\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "118", "colour": "orange", "code": "        # Content is contains zero or more unescaped string characters\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "119", "colour": "orange", "code": "        if content:\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "120", "colour": "orange", "code": "            if not isinstance(content, unicode):\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "121", "colour": "orange", "code": "                content = unicode(content, encoding)\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "122", "colour": "orange", "code": "            _append(content)\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "123", "colour": "orange", "code": "        # Terminator is the end of string, a literal control character,\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "124", "colour": "orange", "code": "        # or a backslash denoting that an escape sequence follows\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "125", "colour": "orange", "code": "        if terminator == '\"':\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "126", "colour": "orange", "code": "            break\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "127", "colour": "orange", "code": "        elif terminator != '\\\\':\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "128", "colour": "orange", "code": "            if strict:\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "129", "colour": "orange", "code": "                msg = \"Invalid control character %r at\" % (terminator,)\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "130", "colour": "orange", "code": "                #msg = \"Invalid control character {0!r} at\".format(terminator)\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "131", "colour": "orange", "code": "                raise JSONDecodeError(msg, s, end)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "132", "colour": "orange", "code": "            else:\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "133", "colour": "orange", "code": "                _append(terminator)\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "134", "colour": "orange", "code": "                continue\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "135", "colour": "orange", "code": "        try:\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "136", "colour": "orange", "code": "            esc = s[end]\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "137", "colour": "orange", "code": "        except IndexError:\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "138", "colour": "orange", "code": "            raise JSONDecodeError(\n", "error": "none", "author": "tom@organisms.be"}, {"index": "139", "colour": "orange", "code": "                \"Unterminated string starting at\", s, begin)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "140", "colour": "orange", "code": "        # If not a unicode escape sequence, must be in the lookup table\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "141", "colour": "orange", "code": "        if esc != 'u':\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "142", "colour": "orange", "code": "            try:\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "143", "colour": "orange", "code": "                char = _b[esc]\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "144", "colour": "orange", "code": "            except KeyError:\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "145", "colour": "orange", "code": "                msg = \"Invalid \\\\escape: \" + repr(esc)\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "146", "colour": "orange", "code": "                raise JSONDecodeError(msg, s, end)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "147", "colour": "orange", "code": "            end += 1\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "148", "colour": "orange", "code": "        else:\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "149", "colour": "orange", "code": "            # Unicode escape sequence\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "150", "colour": "orange", "code": "            esc = s[end + 1:end + 5]\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "151", "colour": "orange", "code": "            next_end = end + 5\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "152", "colour": "orange", "code": "            if len(esc) != 4:\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "153", "colour": "orange", "code": "                msg = \"Invalid \\\\uXXXX escape\"\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "154", "colour": "orange", "code": "                raise JSONDecodeError(msg, s, end)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "155", "colour": "orange", "code": "            uni = int(esc, 16)\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "156", "colour": "orange", "code": "            # Check for surrogate pair on UCS-4 systems\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "157", "colour": "orange", "code": "            if 0xd800 <= uni <= 0xdbff and sys.maxunicode > 65535:\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "158", "colour": "orange", "code": "                msg = \"Invalid \\\\uXXXX\\\\uXXXX surrogate pair\"\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "159", "colour": "orange", "code": "                if not s[end + 5:end + 7] == '\\\\u':\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "160", "colour": "orange", "code": "                    raise JSONDecodeError(msg, s, end)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "161", "colour": "orange", "code": "                esc2 = s[end + 7:end + 11]\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "162", "colour": "orange", "code": "                if len(esc2) != 4:\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "163", "colour": "orange", "code": "                    raise JSONDecodeError(msg, s, end)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "164", "colour": "orange", "code": "                uni2 = int(esc2, 16)\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "165", "colour": "orange", "code": "                uni = 0x10000 + (((uni - 0xd800) << 10) | (uni2 - 0xdc00))\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "166", "colour": "orange", "code": "                next_end += 6\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "167", "colour": "orange", "code": "            char = unichr(uni)\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "168", "colour": "orange", "code": "            end = next_end\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "169", "colour": "orange", "code": "        # Append the unescaped character\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "170", "colour": "orange", "code": "        _append(char)\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "171", "colour": "orange", "code": "    return u''.join(chunks), end\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "172", "colour": "orange", "code": "\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "173", "colour": "orange", "code": "\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "174", "colour": "orange", "code": "# Use speedup if available\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "175", "colour": "orange", "code": "scanstring = c_scanstring or py_scanstring\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "176", "colour": "orange", "code": "\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "177", "colour": "orange", "code": "WHITESPACE = re.compile(r'[ \\t\\n\\r]*', FLAGS)\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "178", "colour": "orange", "code": "WHITESPACE_STR = ' \\t\\n\\r'\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "179", "colour": "orange", "code": "\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "180", "colour": "blue", "code": "def JSONObject((s, end), encoding, strict, scan_once, object_hook,\n", "error": "R", "author": "tom@organisms.be"}, {"index": "181", "colour": "orange", "code": "        object_pairs_hook, memo=None,\n", "error": "none", "author": "tom@organisms.be"}, {"index": "182", "colour": "orange", "code": "        _w=WHITESPACE.match, _ws=WHITESPACE_STR):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "183", "colour": "orange", "code": "    # Backwards compatibility\n", "error": "none", "author": "tom@organisms.be"}, {"index": "184", "colour": "orange", "code": "    if memo is None:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "185", "colour": "orange", "code": "        memo = {}\n", "error": "none", "author": "tom@organisms.be"}, {"index": "186", "colour": "orange", "code": "    memo_get = memo.setdefault\n", "error": "none", "author": "tom@organisms.be"}, {"index": "187", "colour": "orange", "code": "    pairs = []\n", "error": "none", "author": "tom@organisms.be"}, {"index": "188", "colour": "orange", "code": "    # Use a slice to prevent IndexError from being raised, the following\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "189", "colour": "orange", "code": "    # check will raise a more specific ValueError if the string is empty\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "190", "colour": "orange", "code": "    nextchar = s[end:end + 1]\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "191", "colour": "orange", "code": "    # Normally we expect nextchar == '\"'\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "192", "colour": "orange", "code": "    if nextchar != '\"':\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "193", "colour": "orange", "code": "        if nextchar in _ws:\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "194", "colour": "orange", "code": "            end = _w(s, end).end()\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "195", "colour": "orange", "code": "            nextchar = s[end:end + 1]\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "196", "colour": "orange", "code": "        # Trivial empty object\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "197", "colour": "orange", "code": "        if nextchar == '}':\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "198", "colour": "orange", "code": "            if object_pairs_hook is not None:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "199", "colour": "orange", "code": "                result = object_pairs_hook(pairs)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "200", "colour": "orange", "code": "                return result, end + 1\n", "error": "none", "author": "tom@organisms.be"}, {"index": "201", "colour": "orange", "code": "            pairs = {}\n", "error": "none", "author": "tom@organisms.be"}, {"index": "202", "colour": "orange", "code": "            if object_hook is not None:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "203", "colour": "orange", "code": "                pairs = object_hook(pairs)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "204", "colour": "orange", "code": "            return pairs, end + 1\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "205", "colour": "orange", "code": "        elif nextchar != '\"':\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "206", "colour": "orange", "code": "            raise JSONDecodeError(\n", "error": "none", "author": "tom@organisms.be"}, {"index": "207", "colour": "orange", "code": "                \"Expecting property name enclosed in double quotes\",\n", "error": "none", "author": "tom@organisms.be"}, {"index": "208", "colour": "orange", "code": "                s, end)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "209", "colour": "orange", "code": "    end += 1\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "210", "colour": "orange", "code": "    while True:\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "211", "colour": "orange", "code": "        key, end = scanstring(s, end, encoding, strict)\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "212", "colour": "orange", "code": "        key = memo_get(key, key)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "213", "colour": "orange", "code": "\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "214", "colour": "orange", "code": "        # To skip some function call overhead we optimize the fast paths where\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "215", "colour": "orange", "code": "        # the JSON key separator is \": \" or just \":\".\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "216", "colour": "orange", "code": "        if s[end:end + 1] != ':':\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "217", "colour": "orange", "code": "            end = _w(s, end).end()\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "218", "colour": "orange", "code": "            if s[end:end + 1] != ':':\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "219", "colour": "orange", "code": "                raise JSONDecodeError(\"Expecting ':' delimiter\", s, end)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "220", "colour": "orange", "code": "\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "221", "colour": "orange", "code": "        end += 1\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "222", "colour": "orange", "code": "\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "223", "colour": "orange", "code": "        try:\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "224", "colour": "orange", "code": "            if s[end] in _ws:\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "225", "colour": "orange", "code": "                end += 1\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "226", "colour": "orange", "code": "                if s[end] in _ws:\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "227", "colour": "orange", "code": "                    end = _w(s, end + 1).end()\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "228", "colour": "orange", "code": "        except IndexError:\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "229", "colour": "orange", "code": "            pass\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "230", "colour": "orange", "code": "\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "231", "colour": "orange", "code": "        try:\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "232", "colour": "orange", "code": "            value, end = scan_once(s, end)\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "233", "colour": "orange", "code": "        except StopIteration:\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "234", "colour": "orange", "code": "            raise JSONDecodeError(\"Expecting object\", s, end)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "235", "colour": "orange", "code": "        pairs.append((key, value))\n", "error": "none", "author": "tom@organisms.be"}, {"index": "236", "colour": "orange", "code": "\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "237", "colour": "orange", "code": "        try:\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "238", "colour": "orange", "code": "            nextchar = s[end]\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "239", "colour": "orange", "code": "            if nextchar in _ws:\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "240", "colour": "orange", "code": "                end = _w(s, end + 1).end()\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "241", "colour": "orange", "code": "                nextchar = s[end]\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "242", "colour": "orange", "code": "        except IndexError:\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "243", "colour": "orange", "code": "            nextchar = ''\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "244", "colour": "orange", "code": "        end += 1\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "245", "colour": "orange", "code": "\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "246", "colour": "orange", "code": "        if nextchar == '}':\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "247", "colour": "orange", "code": "            break\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "248", "colour": "orange", "code": "        elif nextchar != ',':\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "249", "colour": "orange", "code": "            raise JSONDecodeError(\"Expecting ',' delimiter\", s, end - 1)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "250", "colour": "orange", "code": "\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "251", "colour": "orange", "code": "        try:\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "252", "colour": "orange", "code": "            nextchar = s[end]\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "253", "colour": "orange", "code": "            if nextchar in _ws:\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "254", "colour": "orange", "code": "                end += 1\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "255", "colour": "orange", "code": "                nextchar = s[end]\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "256", "colour": "orange", "code": "                if nextchar in _ws:\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "257", "colour": "orange", "code": "                    end = _w(s, end + 1).end()\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "258", "colour": "orange", "code": "                    nextchar = s[end]\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "259", "colour": "orange", "code": "        except IndexError:\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "260", "colour": "orange", "code": "            nextchar = ''\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "261", "colour": "orange", "code": "\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "262", "colour": "orange", "code": "        end += 1\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "263", "colour": "orange", "code": "        if nextchar != '\"':\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "264", "colour": "orange", "code": "            raise JSONDecodeError(\n", "error": "none", "author": "tom@organisms.be"}, {"index": "265", "colour": "orange", "code": "                \"Expecting property name enclosed in double quotes\",\n", "error": "none", "author": "tom@organisms.be"}, {"index": "266", "colour": "orange", "code": "                s, end - 1)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "267", "colour": "orange", "code": "\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "268", "colour": "orange", "code": "    if object_pairs_hook is not None:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "269", "colour": "orange", "code": "        result = object_pairs_hook(pairs)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "270", "colour": "orange", "code": "        return result, end\n", "error": "none", "author": "tom@organisms.be"}, {"index": "271", "colour": "orange", "code": "    pairs = dict(pairs)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "272", "colour": "orange", "code": "    if object_hook is not None:\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "273", "colour": "orange", "code": "        pairs = object_hook(pairs)\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "274", "colour": "orange", "code": "    return pairs, end\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "275", "colour": "orange", "code": "\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "276", "colour": "orange", "code": "def JSONArray((s, end), scan_once, _w=WHITESPACE.match, _ws=WHITESPACE_STR):\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "277", "colour": "orange", "code": "    values = []\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "278", "colour": "orange", "code": "    nextchar = s[end:end + 1]\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "279", "colour": "orange", "code": "    if nextchar in _ws:\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "280", "colour": "orange", "code": "        end = _w(s, end + 1).end()\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "281", "colour": "orange", "code": "        nextchar = s[end:end + 1]\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "282", "colour": "orange", "code": "    # Look-ahead for trivial empty array\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "283", "colour": "orange", "code": "    if nextchar == ']':\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "284", "colour": "orange", "code": "        return values, end + 1\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "285", "colour": "orange", "code": "    _append = values.append\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "286", "colour": "orange", "code": "    while True:\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "287", "colour": "orange", "code": "        try:\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "288", "colour": "orange", "code": "            value, end = scan_once(s, end)\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "289", "colour": "orange", "code": "        except StopIteration:\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "290", "colour": "orange", "code": "            raise JSONDecodeError(\"Expecting object\", s, end)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "291", "colour": "orange", "code": "        _append(value)\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "292", "colour": "orange", "code": "        nextchar = s[end:end + 1]\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "293", "colour": "orange", "code": "        if nextchar in _ws:\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "294", "colour": "orange", "code": "            end = _w(s, end + 1).end()\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "295", "colour": "orange", "code": "            nextchar = s[end:end + 1]\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "296", "colour": "orange", "code": "        end += 1\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "297", "colour": "orange", "code": "        if nextchar == ']':\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "298", "colour": "orange", "code": "            break\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "299", "colour": "orange", "code": "        elif nextchar != ',':\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "300", "colour": "orange", "code": "            raise JSONDecodeError(\"Expecting ',' delimiter\", s, end)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "301", "colour": "orange", "code": "\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "302", "colour": "orange", "code": "        try:\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "303", "colour": "orange", "code": "            if s[end] in _ws:\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "304", "colour": "orange", "code": "                end += 1\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "305", "colour": "orange", "code": "                if s[end] in _ws:\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "306", "colour": "orange", "code": "                    end = _w(s, end + 1).end()\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "307", "colour": "orange", "code": "        except IndexError:\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "308", "colour": "orange", "code": "            pass\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "309", "colour": "orange", "code": "\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "310", "colour": "orange", "code": "    return values, end\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "311", "colour": "orange", "code": "\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "312", "colour": "blue", "code": "class JSONDecoder(object):\n", "error": "R", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "313", "colour": "orange", "code": "    \"\"\"Simple JSON <http://json.org> decoder\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "314", "colour": "orange", "code": "\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "315", "colour": "orange", "code": "    Performs the following translations in decoding by default:\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "316", "colour": "orange", "code": "\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "317", "colour": "orange", "code": "    +---------------+-------------------+\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "318", "colour": "orange", "code": "    | JSON          | Python            |\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "319", "colour": "orange", "code": "    +===============+===================+\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "320", "colour": "orange", "code": "    | object        | dict              |\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "321", "colour": "orange", "code": "    +---------------+-------------------+\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "322", "colour": "orange", "code": "    | array         | list              |\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "323", "colour": "orange", "code": "    +---------------+-------------------+\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "324", "colour": "orange", "code": "    | string        | unicode           |\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "325", "colour": "orange", "code": "    +---------------+-------------------+\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "326", "colour": "orange", "code": "    | number (int)  | int, long         |\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "327", "colour": "orange", "code": "    +---------------+-------------------+\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "328", "colour": "orange", "code": "    | number (real) | float             |\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "329", "colour": "orange", "code": "    +---------------+-------------------+\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "330", "colour": "orange", "code": "    | true          | True              |\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "331", "colour": "orange", "code": "    +---------------+-------------------+\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "332", "colour": "orange", "code": "    | false         | False             |\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "333", "colour": "orange", "code": "    +---------------+-------------------+\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "334", "colour": "orange", "code": "    | null          | None              |\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "335", "colour": "orange", "code": "    +---------------+-------------------+\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "336", "colour": "orange", "code": "\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "337", "colour": "orange", "code": "    It also understands ``NaN``, ``Infinity``, and ``-Infinity`` as\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "338", "colour": "orange", "code": "    their corresponding ``float`` values, which is outside the JSON spec.\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "339", "colour": "orange", "code": "\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "340", "colour": "orange", "code": "    \"\"\"\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "341", "colour": "orange", "code": "\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "342", "colour": "blue", "code": "    def __init__(self, encoding=None, object_hook=None, parse_float=None,\n", "error": "R", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "343", "colour": "orange", "code": "            parse_int=None, parse_constant=None, strict=True,\n", "error": "none", "author": "tom@organisms.be"}, {"index": "344", "colour": "orange", "code": "            object_pairs_hook=None):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "345", "colour": "orange", "code": "        \"\"\"\n", "error": "none", "author": "tom@organisms.be"}, {"index": "346", "colour": "orange", "code": "        *encoding* determines the encoding used to interpret any\n", "error": "none", "author": "tom@organisms.be"}, {"index": "347", "colour": "orange", "code": "        :class:`str` objects decoded by this instance (``'utf-8'`` by\n", "error": "none", "author": "tom@organisms.be"}, {"index": "348", "colour": "orange", "code": "        default).  It has no effect when decoding :class:`unicode` objects.\n", "error": "none", "author": "tom@organisms.be"}, {"index": "349", "colour": "orange", "code": "\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "350", "colour": "orange", "code": "        Note that currently only encodings that are a superset of ASCII work,\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "351", "colour": "orange", "code": "        strings of other encodings should be passed in as :class:`unicode`.\n", "error": "none", "author": "tom@organisms.be"}, {"index": "352", "colour": "orange", "code": "\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "353", "colour": "orange", "code": "        *object_hook*, if specified, will be called with the result of every\n", "error": "none", "author": "tom@organisms.be"}, {"index": "354", "colour": "orange", "code": "        JSON object decoded and its return value will be used in place of the\n", "error": "none", "author": "tom@organisms.be"}, {"index": "355", "colour": "orange", "code": "        given :class:`dict`.  This can be used to provide custom\n", "error": "none", "author": "tom@organisms.be"}, {"index": "356", "colour": "orange", "code": "        deserializations (e.g. to support JSON-RPC class hinting).\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "357", "colour": "orange", "code": "\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "358", "colour": "orange", "code": "        *object_pairs_hook* is an optional function that will be called with\n", "error": "none", "author": "tom@organisms.be"}, {"index": "359", "colour": "orange", "code": "        the result of any object literal decode with an ordered list of pairs.\n", "error": "none", "author": "tom@organisms.be"}, {"index": "360", "colour": "orange", "code": "        The return value of *object_pairs_hook* will be used instead of the\n", "error": "none", "author": "tom@organisms.be"}, {"index": "361", "colour": "orange", "code": "        :class:`dict`.  This feature can be used to implement custom decoders\n", "error": "none", "author": "tom@organisms.be"}, {"index": "362", "colour": "orange", "code": "        that rely on the order that the key and value pairs are decoded (for\n", "error": "none", "author": "tom@organisms.be"}, {"index": "363", "colour": "orange", "code": "        example, :func:`collections.OrderedDict` will remember the order of\n", "error": "none", "author": "tom@organisms.be"}, {"index": "364", "colour": "orange", "code": "        insertion). If *object_hook* is also defined, the *object_pairs_hook*\n", "error": "none", "author": "tom@organisms.be"}, {"index": "365", "colour": "orange", "code": "        takes priority.\n", "error": "none", "author": "tom@organisms.be"}, {"index": "366", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "367", "colour": "orange", "code": "        *parse_float*, if specified, will be called with the string of every\n", "error": "none", "author": "tom@organisms.be"}, {"index": "368", "colour": "orange", "code": "        JSON float to be decoded.  By default, this is equivalent to\n", "error": "none", "author": "tom@organisms.be"}, {"index": "369", "colour": "orange", "code": "        ``float(num_str)``. This can be used to use another datatype or parser\n", "error": "none", "author": "tom@organisms.be"}, {"index": "370", "colour": "orange", "code": "        for JSON floats (e.g. :class:`decimal.Decimal`).\n", "error": "none", "author": "tom@organisms.be"}, {"index": "371", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "372", "colour": "orange", "code": "        *parse_int*, if specified, will be called with the string of every\n", "error": "none", "author": "tom@organisms.be"}, {"index": "373", "colour": "orange", "code": "        JSON int to be decoded.  By default, this is equivalent to\n", "error": "none", "author": "tom@organisms.be"}, {"index": "374", "colour": "orange", "code": "        ``int(num_str)``.  This can be used to use another datatype or parser\n", "error": "none", "author": "tom@organisms.be"}, {"index": "375", "colour": "orange", "code": "        for JSON integers (e.g. :class:`float`).\n", "error": "none", "author": "tom@organisms.be"}, {"index": "376", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "377", "colour": "orange", "code": "        *parse_constant*, if specified, will be called with one of the\n", "error": "none", "author": "tom@organisms.be"}, {"index": "378", "colour": "orange", "code": "        following strings: ``'-Infinity'``, ``'Infinity'``, ``'NaN'``.  This\n", "error": "none", "author": "tom@organisms.be"}, {"index": "379", "colour": "orange", "code": "        can be used to raise an exception if invalid JSON numbers are\n", "error": "none", "author": "tom@organisms.be"}, {"index": "380", "colour": "orange", "code": "        encountered.\n", "error": "none", "author": "tom@organisms.be"}, {"index": "381", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "382", "colour": "orange", "code": "        *strict* controls the parser's behavior when it encounters an\n", "error": "none", "author": "tom@organisms.be"}, {"index": "383", "colour": "orange", "code": "        invalid control character in a string. The default setting of\n", "error": "none", "author": "tom@organisms.be"}, {"index": "384", "colour": "orange", "code": "        ``True`` means that unescaped control characters are parse errors, if\n", "error": "none", "author": "tom@organisms.be"}, {"index": "385", "colour": "orange", "code": "        ``False`` then control characters will be allowed in strings.\n", "error": "none", "author": "tom@organisms.be"}, {"index": "386", "colour": "orange", "code": "\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "387", "colour": "orange", "code": "        \"\"\"\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "388", "colour": "orange", "code": "        self.encoding = encoding\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "389", "colour": "orange", "code": "        self.object_hook = object_hook\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "390", "colour": "orange", "code": "        self.object_pairs_hook = object_pairs_hook\n", "error": "none", "author": "tom@organisms.be"}, {"index": "391", "colour": "orange", "code": "        self.parse_float = parse_float or float\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "392", "colour": "orange", "code": "        self.parse_int = parse_int or int\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "393", "colour": "orange", "code": "        self.parse_constant = parse_constant or _CONSTANTS.__getitem__\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "394", "colour": "orange", "code": "        self.strict = strict\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "395", "colour": "orange", "code": "        self.parse_object = JSONObject\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "396", "colour": "orange", "code": "        self.parse_array = JSONArray\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "397", "colour": "orange", "code": "        self.parse_string = scanstring\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "398", "colour": "orange", "code": "        self.memo = {}\n", "error": "none", "author": "tom@organisms.be"}, {"index": "399", "colour": "orange", "code": "        self.scan_once = make_scanner(self)\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "400", "colour": "orange", "code": "\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "401", "colour": "orange", "code": "    def decode(self, s, _w=WHITESPACE.match):\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "402", "colour": "orange", "code": "        \"\"\"Return the Python representation of ``s`` (a ``str`` or ``unicode``\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "403", "colour": "orange", "code": "        instance containing a JSON document)\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "404", "colour": "orange", "code": "\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "405", "colour": "orange", "code": "        \"\"\"\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "406", "colour": "orange", "code": "        obj, end = self.raw_decode(s)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "407", "colour": "orange", "code": "        end = _w(s, end).end()\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "408", "colour": "orange", "code": "        if end != len(s):\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "409", "colour": "orange", "code": "            raise JSONDecodeError(\"Extra data\", s, end, len(s))\n", "error": "none", "author": "tom@organisms.be"}, {"index": "410", "colour": "orange", "code": "        return obj\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "411", "colour": "orange", "code": "\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "412", "colour": "orange", "code": "    def raw_decode(self, s, idx=0, _w=WHITESPACE.match):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "413", "colour": "orange", "code": "        \"\"\"Decode a JSON document from ``s`` (a ``str`` or ``unicode``\n", "error": "none", "author": "tom@organisms.be"}, {"index": "414", "colour": "orange", "code": "        beginning with a JSON document) and return a 2-tuple of the Python\n", "error": "none", "author": "tom@organisms.be"}, {"index": "415", "colour": "orange", "code": "        representation and the index in ``s`` where the document ended.\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "416", "colour": "orange", "code": "        Optionally, ``idx`` can be used to specify an offset in ``s`` where\n", "error": "none", "author": "tom@organisms.be"}, {"index": "417", "colour": "orange", "code": "        the JSON document begins.\n", "error": "none", "author": "tom@organisms.be"}, {"index": "418", "colour": "orange", "code": "\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "419", "colour": "orange", "code": "        This can be used to decode a JSON document from a string that may\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "420", "colour": "orange", "code": "        have extraneous data at the end.\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "421", "colour": "orange", "code": "\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "422", "colour": "orange", "code": "        \"\"\"\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "423", "colour": "orange", "code": "        try:\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "424", "colour": "orange", "code": "            obj, end = self.scan_once(s, idx=_w(s, idx).end())\n", "error": "none", "author": "tom@organisms.be"}, {"index": "425", "colour": "orange", "code": "        except StopIteration:\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"index": "426", "colour": "orange", "code": "            raise JSONDecodeError(\"No JSON object could be decoded\", s, idx)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "427", "colour": "orange", "code": "        return obj, end\n", "error": "none", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}]}