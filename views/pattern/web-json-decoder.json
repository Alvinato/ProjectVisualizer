{"path": "/home/asumal/git/cs410/pattern/pattern/web/json/decoder.py", "lines": [[{"error": "none", "line": "1", "code": "\"\"\"Implementation of JSONDecoder\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "2", "code": "\"\"\"\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "3", "code": "import re\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "4", "code": "import sys\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "5", "code": "import struct\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "6", "code": "\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "W", "line": "7", "code": "from scanner import make_scanner\n", "colour": "purple", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "C", "line": "8", "code": "def _import_c_scanstring():\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "9", "code": "    try:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "F", "line": "10", "code": "        from _speedups import scanstring\n", "colour": "red", "author": "tom@organisms.be"}, {"error": "none", "line": "11", "code": "        return scanstring\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "12", "code": "    except ImportError:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "13", "code": "        return None\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "14", "code": "c_scanstring = _import_c_scanstring()\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "15", "code": "\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "16", "code": "__all__ = ['JSONDecoder']\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "17", "code": "\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "18", "code": "FLAGS = re.VERBOSE | re.MULTILINE | re.DOTALL\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "19", "code": "\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "C", "line": "20", "code": "def _floatconstants():\n", "colour": "blue", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "C", "line": "21", "code": "    _BYTES = '7FF80000000000007FF0000000000000'.decode('hex')\n", "colour": "blue", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "22", "code": "    # The struct module in Python 2.4 would get frexp() out of range here\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "23", "code": "    # when an endian is specified in the format string. Fixed in Python 2.5+\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "24", "code": "    if sys.byteorder != 'big':\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "C", "line": "25", "code": "        _BYTES = _BYTES[:8][::-1] + _BYTES[8:][::-1]\n", "colour": "blue", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "26", "code": "    nan, inf = struct.unpack('dd', _BYTES)\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "27", "code": "    return nan, inf, -inf\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "28", "code": "\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "C", "line": "29", "code": "NaN, PosInf, NegInf = _floatconstants()\n", "colour": "blue", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "30", "code": "\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "31", "code": "\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "R", "line": "32", "code": "class JSONDecodeError(ValueError):\n", "colour": "green", "author": "tom@organisms.be"}, {"error": "none", "line": "33", "code": "    \"\"\"Subclass of ValueError with the following additional properties:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "34", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "35", "code": "    msg: The unformatted error message\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "36", "code": "    doc: The JSON document being parsed\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "37", "code": "    pos: The start index of doc where parsing failed\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "38", "code": "    end: The end index of doc where parsing failed (may be None)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "39", "code": "    lineno: The line corresponding to pos\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "40", "code": "    colno: The column corresponding to pos\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "41", "code": "    endlineno: The line corresponding to end (may be None)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "42", "code": "    endcolno: The column corresponding to end (may be None)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "43", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "44", "code": "    \"\"\"\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "45", "code": "    def __init__(self, msg, doc, pos, end=None):\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "46", "code": "        ValueError.__init__(self, errmsg(msg, doc, pos, end=end))\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "47", "code": "        self.msg = msg\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "48", "code": "        self.doc = doc\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "49", "code": "        self.pos = pos\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "50", "code": "        self.end = end\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "51", "code": "        self.lineno, self.colno = linecol(doc, pos)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "52", "code": "        if end is not None:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "53", "code": "            self.endlineno, self.endcolno = linecol(doc, end)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "54", "code": "        else:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "55", "code": "            self.endlineno, self.endcolno = None, None\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "56", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "57", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "58", "code": "def linecol(doc, pos):\n", "colour": "blue", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "59", "code": "    lineno = doc.count('\\n', 0, pos) + 1\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "60", "code": "    if lineno == 1:\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "61", "code": "        colno = pos\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "62", "code": "    else:\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "63", "code": "        colno = pos - doc.rindex('\\n', 0, pos)\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "64", "code": "    return lineno, colno\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "65", "code": "\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "66", "code": "\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "C", "line": "67", "code": "def errmsg(msg, doc, pos, end=None):\n", "colour": "blue", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "68", "code": "    # Note that this function is called from _speedups\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "69", "code": "    lineno, colno = linecol(doc, pos)\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "70", "code": "    if end is None:\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "71", "code": "        #fmt = '{0}: line {1} column {2} (char {3})'\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "72", "code": "        #return fmt.format(msg, lineno, colno, pos)\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "73", "code": "        fmt = '%s: line %d column %d (char %d)'\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "74", "code": "        return fmt % (msg, lineno, colno, pos)\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "75", "code": "    endlineno, endcolno = linecol(doc, end)\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "76", "code": "    #fmt = '{0}: line {1} column {2} - line {3} column {4} (char {5} - {6})'\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "77", "code": "    #return fmt.format(msg, lineno, colno, endlineno, endcolno, pos, end)\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "78", "code": "    fmt = '%s: line %d column %d - line %d column %d (char %d - %d)'\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "79", "code": "    return fmt % (msg, lineno, colno, endlineno, endcolno, pos, end)\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "80", "code": "\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "81", "code": "\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "82", "code": "_CONSTANTS = {\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "83", "code": "    '-Infinity': NegInf,\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "84", "code": "    'Infinity': PosInf,\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "85", "code": "    'NaN': NaN,\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "86", "code": "}\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "87", "code": "\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "88", "code": "STRINGCHUNK = re.compile(r'(.*?)([\"\\\\\\x00-\\x1f])', FLAGS)\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "89", "code": "BACKSLASH = {\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "90", "code": "    '\"': u'\"', '\\\\': u'\\\\', '/': u'/',\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "91", "code": "    'b': u'\\b', 'f': u'\\f', 'n': u'\\n', 'r': u'\\r', 't': u'\\t',\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "92", "code": "}\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "93", "code": "\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "94", "code": "DEFAULT_ENCODING = \"utf-8\"\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "95", "code": "\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "R", "line": "96", "code": "def py_scanstring(s, end, encoding=None, strict=True,\n", "colour": "green", "author": "tom@organisms.be"}, {"error": "C", "line": "97", "code": "        _b=BACKSLASH, _m=STRINGCHUNK.match):\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "98", "code": "    \"\"\"Scan the string s for a JSON string. End is the index of the\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "99", "code": "    character in s after the quote that started the JSON string.\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "100", "code": "    Unescapes all valid JSON string escape sequences and raises ValueError\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "101", "code": "    on attempt to decode an invalid string. If strict is False then literal\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "102", "code": "    control characters are allowed in the string.\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "103", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "104", "code": "    Returns a tuple of the decoded string and the index of the character in s\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "105", "code": "    after the end quote.\"\"\"\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "106", "code": "    if encoding is None:\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "107", "code": "        encoding = DEFAULT_ENCODING\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "108", "code": "    chunks = []\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "109", "code": "    _append = chunks.append\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "110", "code": "    begin = end - 1\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "111", "code": "    while 1:\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "112", "code": "        chunk = _m(s, end)\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "113", "code": "        if chunk is None:\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "114", "code": "            raise JSONDecodeError(\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "115", "code": "                \"Unterminated string starting at\", s, begin)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "116", "code": "        end = chunk.end()\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "117", "code": "        content, terminator = chunk.groups()\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "118", "code": "        # Content is contains zero or more unescaped string characters\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "119", "code": "        if content:\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "120", "code": "            if not isinstance(content, unicode):\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "121", "code": "                content = unicode(content, encoding)\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "122", "code": "            _append(content)\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "123", "code": "        # Terminator is the end of string, a literal control character,\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "124", "code": "        # or a backslash denoting that an escape sequence follows\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "125", "code": "        if terminator == '\"':\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "126", "code": "            break\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "127", "code": "        elif terminator != '\\\\':\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "128", "code": "            if strict:\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "129", "code": "                msg = \"Invalid control character %r at\" % (terminator,)\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "130", "code": "                #msg = \"Invalid control character {0!r} at\".format(terminator)\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "131", "code": "                raise JSONDecodeError(msg, s, end)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "132", "code": "            else:\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "133", "code": "                _append(terminator)\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "134", "code": "                continue\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "135", "code": "        try:\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "136", "code": "            esc = s[end]\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "137", "code": "        except IndexError:\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "138", "code": "            raise JSONDecodeError(\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "139", "code": "                \"Unterminated string starting at\", s, begin)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "140", "code": "        # If not a unicode escape sequence, must be in the lookup table\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "141", "code": "        if esc != 'u':\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "142", "code": "            try:\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "143", "code": "                char = _b[esc]\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "144", "code": "            except KeyError:\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "145", "code": "                msg = \"Invalid \\\\escape: \" + repr(esc)\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "146", "code": "                raise JSONDecodeError(msg, s, end)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "147", "code": "            end += 1\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "148", "code": "        else:\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "149", "code": "            # Unicode escape sequence\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "150", "code": "            esc = s[end + 1:end + 5]\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "151", "code": "            next_end = end + 5\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "152", "code": "            if len(esc) != 4:\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "153", "code": "                msg = \"Invalid \\\\uXXXX escape\"\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "154", "code": "                raise JSONDecodeError(msg, s, end)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "155", "code": "            uni = int(esc, 16)\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "156", "code": "            # Check for surrogate pair on UCS-4 systems\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "157", "code": "            if 0xd800 <= uni <= 0xdbff and sys.maxunicode > 65535:\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "158", "code": "                msg = \"Invalid \\\\uXXXX\\\\uXXXX surrogate pair\"\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "159", "code": "                if not s[end + 5:end + 7] == '\\\\u':\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "160", "code": "                    raise JSONDecodeError(msg, s, end)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "161", "code": "                esc2 = s[end + 7:end + 11]\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "162", "code": "                if len(esc2) != 4:\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "163", "code": "                    raise JSONDecodeError(msg, s, end)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "164", "code": "                uni2 = int(esc2, 16)\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "165", "code": "                uni = 0x10000 + (((uni - 0xd800) << 10) | (uni2 - 0xdc00))\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "166", "code": "                next_end += 6\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "167", "code": "            char = unichr(uni)\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "168", "code": "            end = next_end\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "169", "code": "        # Append the unescaped character\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "170", "code": "        _append(char)\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "171", "code": "    return u''.join(chunks), end\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "172", "code": "\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "173", "code": "\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "174", "code": "# Use speedup if available\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "C", "line": "175", "code": "scanstring = c_scanstring or py_scanstring\n", "colour": "blue", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "176", "code": "\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "177", "code": "WHITESPACE = re.compile(r'[ \\t\\n\\r]*', FLAGS)\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "178", "code": "WHITESPACE_STR = ' \\t\\n\\r'\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "179", "code": "\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "R", "line": "180", "code": "def JSONObject((s, end), encoding, strict, scan_once, object_hook,\n", "colour": "green", "author": "tom@organisms.be"}, {"error": "C", "line": "181", "code": "        object_pairs_hook, memo=None,\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "C", "line": "182", "code": "        _w=WHITESPACE.match, _ws=WHITESPACE_STR):\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "183", "code": "    # Backwards compatibility\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "184", "code": "    if memo is None:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "185", "code": "        memo = {}\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "186", "code": "    memo_get = memo.setdefault\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "187", "code": "    pairs = []\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "188", "code": "    # Use a slice to prevent IndexError from being raised, the following\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "189", "code": "    # check will raise a more specific ValueError if the string is empty\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "190", "code": "    nextchar = s[end:end + 1]\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "191", "code": "    # Normally we expect nextchar == '\"'\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "192", "code": "    if nextchar != '\"':\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "193", "code": "        if nextchar in _ws:\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "194", "code": "            end = _w(s, end).end()\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "195", "code": "            nextchar = s[end:end + 1]\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "196", "code": "        # Trivial empty object\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "197", "code": "        if nextchar == '}':\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "198", "code": "            if object_pairs_hook is not None:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "199", "code": "                result = object_pairs_hook(pairs)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "200", "code": "                return result, end + 1\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "201", "code": "            pairs = {}\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "202", "code": "            if object_hook is not None:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "203", "code": "                pairs = object_hook(pairs)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "204", "code": "            return pairs, end + 1\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "205", "code": "        elif nextchar != '\"':\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "206", "code": "            raise JSONDecodeError(\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "207", "code": "                \"Expecting property name enclosed in double quotes\",\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "208", "code": "                s, end)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "209", "code": "    end += 1\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "210", "code": "    while True:\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "211", "code": "        key, end = scanstring(s, end, encoding, strict)\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "212", "code": "        key = memo_get(key, key)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "213", "code": "\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "214", "code": "        # To skip some function call overhead we optimize the fast paths where\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "215", "code": "        # the JSON key separator is \": \" or just \":\".\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "216", "code": "        if s[end:end + 1] != ':':\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "217", "code": "            end = _w(s, end).end()\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "218", "code": "            if s[end:end + 1] != ':':\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "219", "code": "                raise JSONDecodeError(\"Expecting ':' delimiter\", s, end)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "220", "code": "\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "221", "code": "        end += 1\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "222", "code": "\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "223", "code": "        try:\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "224", "code": "            if s[end] in _ws:\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "225", "code": "                end += 1\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "226", "code": "                if s[end] in _ws:\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "227", "code": "                    end = _w(s, end + 1).end()\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "228", "code": "        except IndexError:\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "229", "code": "            pass\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "230", "code": "\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "231", "code": "        try:\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "232", "code": "            value, end = scan_once(s, end)\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "233", "code": "        except StopIteration:\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "234", "code": "            raise JSONDecodeError(\"Expecting object\", s, end)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "235", "code": "        pairs.append((key, value))\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "236", "code": "\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "237", "code": "        try:\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "238", "code": "            nextchar = s[end]\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "239", "code": "            if nextchar in _ws:\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "240", "code": "                end = _w(s, end + 1).end()\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "241", "code": "                nextchar = s[end]\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "242", "code": "        except IndexError:\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "243", "code": "            nextchar = ''\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "244", "code": "        end += 1\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "245", "code": "\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "246", "code": "        if nextchar == '}':\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "247", "code": "            break\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "248", "code": "        elif nextchar != ',':\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "249", "code": "            raise JSONDecodeError(\"Expecting ',' delimiter\", s, end - 1)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "250", "code": "\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "251", "code": "        try:\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "252", "code": "            nextchar = s[end]\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "253", "code": "            if nextchar in _ws:\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "254", "code": "                end += 1\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "255", "code": "                nextchar = s[end]\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "256", "code": "                if nextchar in _ws:\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "257", "code": "                    end = _w(s, end + 1).end()\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "258", "code": "                    nextchar = s[end]\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "259", "code": "        except IndexError:\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "260", "code": "            nextchar = ''\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "261", "code": "\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "262", "code": "        end += 1\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "263", "code": "        if nextchar != '\"':\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "264", "code": "            raise JSONDecodeError(\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "265", "code": "                \"Expecting property name enclosed in double quotes\",\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "266", "code": "                s, end - 1)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "267", "code": "\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "268", "code": "    if object_pairs_hook is not None:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "269", "code": "        result = object_pairs_hook(pairs)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "270", "code": "        return result, end\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "271", "code": "    pairs = dict(pairs)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "272", "code": "    if object_hook is not None:\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "273", "code": "        pairs = object_hook(pairs)\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "274", "code": "    return pairs, end\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "275", "code": "\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "C", "line": "276", "code": "def JSONArray((s, end), scan_once, _w=WHITESPACE.match, _ws=WHITESPACE_STR):\n", "colour": "blue", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "277", "code": "    values = []\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "278", "code": "    nextchar = s[end:end + 1]\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "279", "code": "    if nextchar in _ws:\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "280", "code": "        end = _w(s, end + 1).end()\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "281", "code": "        nextchar = s[end:end + 1]\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "282", "code": "    # Look-ahead for trivial empty array\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "283", "code": "    if nextchar == ']':\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "284", "code": "        return values, end + 1\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "285", "code": "    _append = values.append\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "286", "code": "    while True:\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "287", "code": "        try:\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "288", "code": "            value, end = scan_once(s, end)\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "289", "code": "        except StopIteration:\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "290", "code": "            raise JSONDecodeError(\"Expecting object\", s, end)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "291", "code": "        _append(value)\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "292", "code": "        nextchar = s[end:end + 1]\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "293", "code": "        if nextchar in _ws:\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "294", "code": "            end = _w(s, end + 1).end()\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "295", "code": "            nextchar = s[end:end + 1]\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "296", "code": "        end += 1\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "297", "code": "        if nextchar == ']':\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "298", "code": "            break\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "299", "code": "        elif nextchar != ',':\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "300", "code": "            raise JSONDecodeError(\"Expecting ',' delimiter\", s, end)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "301", "code": "\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "302", "code": "        try:\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "303", "code": "            if s[end] in _ws:\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "304", "code": "                end += 1\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "305", "code": "                if s[end] in _ws:\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "306", "code": "                    end = _w(s, end + 1).end()\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "307", "code": "        except IndexError:\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "308", "code": "            pass\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "309", "code": "\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "310", "code": "    return values, end\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "311", "code": "\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "R", "line": "312", "code": "class JSONDecoder(object):\n", "colour": "green", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "313", "code": "    \"\"\"Simple JSON <http://json.org> decoder\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "314", "code": "\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "315", "code": "    Performs the following translations in decoding by default:\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "316", "code": "\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "317", "code": "    +---------------+-------------------+\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "318", "code": "    | JSON          | Python            |\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "319", "code": "    +===============+===================+\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "320", "code": "    | object        | dict              |\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "321", "code": "    +---------------+-------------------+\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "322", "code": "    | array         | list              |\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "323", "code": "    +---------------+-------------------+\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "324", "code": "    | string        | unicode           |\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "325", "code": "    +---------------+-------------------+\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "326", "code": "    | number (int)  | int, long         |\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "327", "code": "    +---------------+-------------------+\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "328", "code": "    | number (real) | float             |\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "329", "code": "    +---------------+-------------------+\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "330", "code": "    | true          | True              |\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "331", "code": "    +---------------+-------------------+\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "332", "code": "    | false         | False             |\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "333", "code": "    +---------------+-------------------+\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "334", "code": "    | null          | None              |\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "335", "code": "    +---------------+-------------------+\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "336", "code": "\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "337", "code": "    It also understands ``NaN``, ``Infinity``, and ``-Infinity`` as\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "338", "code": "    their corresponding ``float`` values, which is outside the JSON spec.\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "339", "code": "\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "340", "code": "    \"\"\"\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "341", "code": "\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "R", "line": "342", "code": "    def __init__(self, encoding=None, object_hook=None, parse_float=None,\n", "colour": "green", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "C", "line": "343", "code": "            parse_int=None, parse_constant=None, strict=True,\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "C", "line": "344", "code": "            object_pairs_hook=None):\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "345", "code": "        \"\"\"\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "346", "code": "        *encoding* determines the encoding used to interpret any\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "347", "code": "        :class:`str` objects decoded by this instance (``'utf-8'`` by\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "348", "code": "        default).  It has no effect when decoding :class:`unicode` objects.\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "349", "code": "\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "350", "code": "        Note that currently only encodings that are a superset of ASCII work,\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "351", "code": "        strings of other encodings should be passed in as :class:`unicode`.\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "352", "code": "\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "353", "code": "        *object_hook*, if specified, will be called with the result of every\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "354", "code": "        JSON object decoded and its return value will be used in place of the\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "355", "code": "        given :class:`dict`.  This can be used to provide custom\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "356", "code": "        deserializations (e.g. to support JSON-RPC class hinting).\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "357", "code": "\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "358", "code": "        *object_pairs_hook* is an optional function that will be called with\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "359", "code": "        the result of any object literal decode with an ordered list of pairs.\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "360", "code": "        The return value of *object_pairs_hook* will be used instead of the\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "361", "code": "        :class:`dict`.  This feature can be used to implement custom decoders\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "362", "code": "        that rely on the order that the key and value pairs are decoded (for\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "363", "code": "        example, :func:`collections.OrderedDict` will remember the order of\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "364", "code": "        insertion). If *object_hook* is also defined, the *object_pairs_hook*\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "365", "code": "        takes priority.\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "366", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "367", "code": "        *parse_float*, if specified, will be called with the string of every\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "368", "code": "        JSON float to be decoded.  By default, this is equivalent to\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "369", "code": "        ``float(num_str)``. This can be used to use another datatype or parser\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "370", "code": "        for JSON floats (e.g. :class:`decimal.Decimal`).\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "371", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "372", "code": "        *parse_int*, if specified, will be called with the string of every\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "373", "code": "        JSON int to be decoded.  By default, this is equivalent to\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "374", "code": "        ``int(num_str)``.  This can be used to use another datatype or parser\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "375", "code": "        for JSON integers (e.g. :class:`float`).\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "376", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "377", "code": "        *parse_constant*, if specified, will be called with one of the\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "378", "code": "        following strings: ``'-Infinity'``, ``'Infinity'``, ``'NaN'``.  This\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "379", "code": "        can be used to raise an exception if invalid JSON numbers are\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "380", "code": "        encountered.\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "381", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "382", "code": "        *strict* controls the parser's behavior when it encounters an\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "383", "code": "        invalid control character in a string. The default setting of\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "384", "code": "        ``True`` means that unescaped control characters are parse errors, if\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "385", "code": "        ``False`` then control characters will be allowed in strings.\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "386", "code": "\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "387", "code": "        \"\"\"\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "388", "code": "        self.encoding = encoding\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "389", "code": "        self.object_hook = object_hook\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "390", "code": "        self.object_pairs_hook = object_pairs_hook\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "391", "code": "        self.parse_float = parse_float or float\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "392", "code": "        self.parse_int = parse_int or int\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "393", "code": "        self.parse_constant = parse_constant or _CONSTANTS.__getitem__\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "394", "code": "        self.strict = strict\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "395", "code": "        self.parse_object = JSONObject\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "396", "code": "        self.parse_array = JSONArray\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "397", "code": "        self.parse_string = scanstring\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "398", "code": "        self.memo = {}\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "399", "code": "        self.scan_once = make_scanner(self)\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "400", "code": "\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "C", "line": "401", "code": "    def decode(self, s, _w=WHITESPACE.match):\n", "colour": "blue", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "402", "code": "        \"\"\"Return the Python representation of ``s`` (a ``str`` or ``unicode``\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "403", "code": "        instance containing a JSON document)\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "404", "code": "\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "405", "code": "        \"\"\"\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "406", "code": "        obj, end = self.raw_decode(s)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "407", "code": "        end = _w(s, end).end()\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "408", "code": "        if end != len(s):\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "409", "code": "            raise JSONDecodeError(\"Extra data\", s, end, len(s))\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "410", "code": "        return obj\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "411", "code": "\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "C", "line": "412", "code": "    def raw_decode(self, s, idx=0, _w=WHITESPACE.match):\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "413", "code": "        \"\"\"Decode a JSON document from ``s`` (a ``str`` or ``unicode``\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "414", "code": "        beginning with a JSON document) and return a 2-tuple of the Python\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "415", "code": "        representation and the index in ``s`` where the document ended.\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "416", "code": "        Optionally, ``idx`` can be used to specify an offset in ``s`` where\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "417", "code": "        the JSON document begins.\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "418", "code": "\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "419", "code": "        This can be used to decode a JSON document from a string that may\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "420", "code": "        have extraneous data at the end.\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "421", "code": "\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "422", "code": "        \"\"\"\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "423", "code": "        try:\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "424", "code": "            obj, end = self.scan_once(s, idx=_w(s, idx).end())\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "425", "code": "        except StopIteration:\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}, {"error": "none", "line": "426", "code": "            raise JSONDecodeError(\"No JSON object could be decoded\", s, idx)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "427", "code": "        return obj, end\n", "colour": "black", "author": "tomdesmedt@gmail.com@b69ec992-5447-3b6c-d919-7ed00d13665f"}]]}