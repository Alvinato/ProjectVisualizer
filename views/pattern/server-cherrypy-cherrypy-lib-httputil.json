{"path": "/home/asumal/git/cs410/pattern/pattern/server/cherrypy/cherrypy/lib/httputil.py", "lines": [[{"index": "1", "colour": "orange", "code": "\"\"\"HTTP library functions.\n", "error": "none", "author": "tom@organisms.be"}, {"index": "2", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "3", "colour": "orange", "code": "This module contains functions for building an HTTP application\n", "error": "none", "author": "tom@organisms.be"}, {"index": "4", "colour": "orange", "code": "framework: any one, not just one whose name starts with \"Ch\". ;) If you\n", "error": "none", "author": "tom@organisms.be"}, {"index": "5", "colour": "orange", "code": "reference any modules from some popular framework inside *this* module,\n", "error": "none", "author": "tom@organisms.be"}, {"index": "6", "colour": "orange", "code": "FuManChu will personally hang you up by your thumbs and submit you\n", "error": "none", "author": "tom@organisms.be"}, {"index": "7", "colour": "orange", "code": "to a public caning.\n", "error": "none", "author": "tom@organisms.be"}, {"index": "8", "colour": "orange", "code": "\"\"\"\n", "error": "none", "author": "tom@organisms.be"}, {"index": "9", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "10", "colour": "orange", "code": "from binascii import b2a_base64\n", "error": "none", "author": "tom@organisms.be"}, {"index": "11", "colour": "green", "code": "from cherrypy._cpcompat import BaseHTTPRequestHandler, HTTPDate, ntob, ntou, reversed, sorted\n", "error": "W", "author": "tom@organisms.be"}, {"index": "12", "colour": "green", "code": "from cherrypy._cpcompat import basestring, bytestr, iteritems, nativestr, unicodestr, unquote_qs\n", "error": "W", "author": "tom@organisms.be"}, {"index": "13", "colour": "orange", "code": "response_codes = BaseHTTPRequestHandler.responses.copy()\n", "error": "none", "author": "tom@organisms.be"}, {"index": "14", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "15", "colour": "orange", "code": "# From http://www.cherrypy.org/ticket/361\n", "error": "none", "author": "tom@organisms.be"}, {"index": "16", "colour": "orange", "code": "response_codes[500] = ('Internal Server Error',\n", "error": "none", "author": "tom@organisms.be"}, {"index": "17", "colour": "orange", "code": "                      'The server encountered an unexpected condition '\n", "error": "none", "author": "tom@organisms.be"}, {"index": "18", "colour": "orange", "code": "                      'which prevented it from fulfilling the request.')\n", "error": "none", "author": "tom@organisms.be"}, {"index": "19", "colour": "orange", "code": "response_codes[503] = ('Service Unavailable',\n", "error": "none", "author": "tom@organisms.be"}, {"index": "20", "colour": "orange", "code": "                      'The server is currently unable to handle the '\n", "error": "none", "author": "tom@organisms.be"}, {"index": "21", "colour": "orange", "code": "                      'request due to a temporary overloading or '\n", "error": "none", "author": "tom@organisms.be"}, {"index": "22", "colour": "orange", "code": "                      'maintenance of the server.')\n", "error": "none", "author": "tom@organisms.be"}, {"index": "23", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "24", "colour": "orange", "code": "import re\n", "error": "none", "author": "tom@organisms.be"}, {"index": "25", "colour": "green", "code": "import urllib\n", "error": "W", "author": "tom@organisms.be"}, {"index": "26", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "27", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "28", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "29", "colour": "orange", "code": "def urljoin(*atoms):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "30", "colour": "green", "code": "    \"\"\"Return the given path \\*atoms, joined into a single URL.\n", "error": "W", "author": "tom@organisms.be"}, {"index": "31", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "32", "colour": "orange", "code": "    This will correctly join a SCRIPT_NAME and PATH_INFO into the\n", "error": "none", "author": "tom@organisms.be"}, {"index": "33", "colour": "orange", "code": "    original URL, even if either atom is blank.\n", "error": "none", "author": "tom@organisms.be"}, {"index": "34", "colour": "orange", "code": "    \"\"\"\n", "error": "none", "author": "tom@organisms.be"}, {"index": "35", "colour": "orange", "code": "    url = \"/\".join([x for x in atoms if x])\n", "error": "none", "author": "tom@organisms.be"}, {"index": "36", "colour": "orange", "code": "    while \"//\" in url:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "37", "colour": "orange", "code": "        url = url.replace(\"//\", \"/\")\n", "error": "none", "author": "tom@organisms.be"}, {"index": "38", "colour": "orange", "code": "    # Special-case the final url of \"\", and return \"/\" instead.\n", "error": "none", "author": "tom@organisms.be"}, {"index": "39", "colour": "orange", "code": "    return url or \"/\"\n", "error": "none", "author": "tom@organisms.be"}, {"index": "40", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "41", "colour": "orange", "code": "def urljoin_bytes(*atoms):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "42", "colour": "orange", "code": "    \"\"\"Return the given path *atoms, joined into a single URL.\n", "error": "none", "author": "tom@organisms.be"}, {"index": "43", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "44", "colour": "orange", "code": "    This will correctly join a SCRIPT_NAME and PATH_INFO into the\n", "error": "none", "author": "tom@organisms.be"}, {"index": "45", "colour": "orange", "code": "    original URL, even if either atom is blank.\n", "error": "none", "author": "tom@organisms.be"}, {"index": "46", "colour": "orange", "code": "    \"\"\"\n", "error": "none", "author": "tom@organisms.be"}, {"index": "47", "colour": "orange", "code": "    url = ntob(\"/\").join([x for x in atoms if x])\n", "error": "none", "author": "tom@organisms.be"}, {"index": "48", "colour": "orange", "code": "    while ntob(\"//\") in url:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "49", "colour": "orange", "code": "        url = url.replace(ntob(\"//\"), ntob(\"/\"))\n", "error": "none", "author": "tom@organisms.be"}, {"index": "50", "colour": "orange", "code": "    # Special-case the final url of \"\", and return \"/\" instead.\n", "error": "none", "author": "tom@organisms.be"}, {"index": "51", "colour": "orange", "code": "    return url or ntob(\"/\")\n", "error": "none", "author": "tom@organisms.be"}, {"index": "52", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "53", "colour": "orange", "code": "def protocol_from_http(protocol_str):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "54", "colour": "orange", "code": "    \"\"\"Return a protocol tuple from the given 'HTTP/x.y' string.\"\"\"\n", "error": "none", "author": "tom@organisms.be"}, {"index": "55", "colour": "orange", "code": "    return int(protocol_str[5]), int(protocol_str[7])\n", "error": "none", "author": "tom@organisms.be"}, {"index": "56", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "57", "colour": "orange", "code": "def get_ranges(headervalue, content_length):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "58", "colour": "orange", "code": "    \"\"\"Return a list of (start, stop) indices from a Range header, or None.\n", "error": "none", "author": "tom@organisms.be"}, {"index": "59", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "60", "colour": "orange", "code": "    Each (start, stop) tuple will be composed of two ints, which are suitable\n", "error": "none", "author": "tom@organisms.be"}, {"index": "61", "colour": "orange", "code": "    for use in a slicing operation. That is, the header \"Range: bytes=3-6\",\n", "error": "none", "author": "tom@organisms.be"}, {"index": "62", "colour": "orange", "code": "    if applied against a Python string, is requesting resource[3:7]. This\n", "error": "none", "author": "tom@organisms.be"}, {"index": "63", "colour": "orange", "code": "    function will return the list [(3, 7)].\n", "error": "none", "author": "tom@organisms.be"}, {"index": "64", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "65", "colour": "orange", "code": "    If this function returns an empty list, you should return HTTP 416.\n", "error": "none", "author": "tom@organisms.be"}, {"index": "66", "colour": "orange", "code": "    \"\"\"\n", "error": "none", "author": "tom@organisms.be"}, {"index": "67", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "68", "colour": "orange", "code": "    if not headervalue:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "69", "colour": "orange", "code": "        return None\n", "error": "none", "author": "tom@organisms.be"}, {"index": "70", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "71", "colour": "orange", "code": "    result = []\n", "error": "none", "author": "tom@organisms.be"}, {"index": "72", "colour": "green", "code": "    bytesunit, byteranges = headervalue.split(\"=\", 1)\n", "error": "W", "author": "tom@organisms.be"}, {"index": "73", "colour": "orange", "code": "    for brange in byteranges.split(\",\"):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "74", "colour": "orange", "code": "        start, stop = [x.strip() for x in brange.split(\"-\", 1)]\n", "error": "none", "author": "tom@organisms.be"}, {"index": "75", "colour": "orange", "code": "        if start:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "76", "colour": "orange", "code": "            if not stop:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "77", "colour": "orange", "code": "                stop = content_length - 1\n", "error": "none", "author": "tom@organisms.be"}, {"index": "78", "colour": "orange", "code": "            start, stop = int(start), int(stop)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "79", "colour": "orange", "code": "            if start >= content_length:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "80", "colour": "orange", "code": "                # From rfc 2616 sec 14.16:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "81", "colour": "orange", "code": "                # \"If the server receives a request (other than one\n", "error": "none", "author": "tom@organisms.be"}, {"index": "82", "colour": "orange", "code": "                # including an If-Range request-header field) with an\n", "error": "none", "author": "tom@organisms.be"}, {"index": "83", "colour": "orange", "code": "                # unsatisfiable Range request-header field (that is,\n", "error": "none", "author": "tom@organisms.be"}, {"index": "84", "colour": "orange", "code": "                # all of whose byte-range-spec values have a first-byte-pos\n", "error": "none", "author": "tom@organisms.be"}, {"index": "85", "colour": "orange", "code": "                # value greater than the current length of the selected\n", "error": "none", "author": "tom@organisms.be"}, {"index": "86", "colour": "orange", "code": "                # resource), it SHOULD return a response code of 416\n", "error": "none", "author": "tom@organisms.be"}, {"index": "87", "colour": "orange", "code": "                # (Requested range not satisfiable).\"\n", "error": "none", "author": "tom@organisms.be"}, {"index": "88", "colour": "orange", "code": "                continue\n", "error": "none", "author": "tom@organisms.be"}, {"index": "89", "colour": "orange", "code": "            if stop < start:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "90", "colour": "orange", "code": "                # From rfc 2616 sec 14.16:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "91", "colour": "orange", "code": "                # \"If the server ignores a byte-range-spec because it\n", "error": "none", "author": "tom@organisms.be"}, {"index": "92", "colour": "orange", "code": "                # is syntactically invalid, the server SHOULD treat\n", "error": "none", "author": "tom@organisms.be"}, {"index": "93", "colour": "orange", "code": "                # the request as if the invalid Range header field\n", "error": "none", "author": "tom@organisms.be"}, {"index": "94", "colour": "orange", "code": "                # did not exist. (Normally, this means return a 200\n", "error": "none", "author": "tom@organisms.be"}, {"index": "95", "colour": "orange", "code": "                # response containing the full entity).\"\n", "error": "none", "author": "tom@organisms.be"}, {"index": "96", "colour": "orange", "code": "                return None\n", "error": "none", "author": "tom@organisms.be"}, {"index": "97", "colour": "orange", "code": "            result.append((start, stop + 1))\n", "error": "none", "author": "tom@organisms.be"}, {"index": "98", "colour": "orange", "code": "        else:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "99", "colour": "orange", "code": "            if not stop:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "100", "colour": "orange", "code": "                # See rfc quote above.\n", "error": "none", "author": "tom@organisms.be"}, {"index": "101", "colour": "orange", "code": "                return None\n", "error": "none", "author": "tom@organisms.be"}, {"index": "102", "colour": "orange", "code": "            # Negative subscript (last N bytes)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "103", "colour": "orange", "code": "            result.append((content_length - int(stop), content_length))\n", "error": "none", "author": "tom@organisms.be"}, {"index": "104", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "105", "colour": "orange", "code": "    return result\n", "error": "none", "author": "tom@organisms.be"}, {"index": "106", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "107", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "108", "colour": "orange", "code": "class HeaderElement(object):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "109", "colour": "orange", "code": "    \"\"\"An element (with parameters) from an HTTP header's element list.\"\"\"\n", "error": "none", "author": "tom@organisms.be"}, {"index": "110", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "111", "colour": "orange", "code": "    def __init__(self, value, params=None):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "112", "colour": "orange", "code": "        self.value = value\n", "error": "none", "author": "tom@organisms.be"}, {"index": "113", "colour": "orange", "code": "        if params is None:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "114", "colour": "orange", "code": "            params = {}\n", "error": "none", "author": "tom@organisms.be"}, {"index": "115", "colour": "orange", "code": "        self.params = params\n", "error": "none", "author": "tom@organisms.be"}, {"index": "116", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "117", "colour": "orange", "code": "    def __cmp__(self, other):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "118", "colour": "orange", "code": "        return cmp(self.value, other.value)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "119", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "120", "colour": "orange", "code": "    def __lt__(self, other):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "121", "colour": "orange", "code": "        return self.value < other.value\n", "error": "none", "author": "tom@organisms.be"}, {"index": "122", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "123", "colour": "orange", "code": "    def __str__(self):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "124", "colour": "orange", "code": "        p = [\";%s=%s\" % (k, v) for k, v in iteritems(self.params)]\n", "error": "none", "author": "tom@organisms.be"}, {"index": "125", "colour": "orange", "code": "        return str(\"%s%s\" % (self.value, \"\".join(p)))\n", "error": "none", "author": "tom@organisms.be"}, {"index": "126", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "127", "colour": "orange", "code": "    def __bytes__(self):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "128", "colour": "orange", "code": "        return ntob(self.__str__())\n", "error": "none", "author": "tom@organisms.be"}, {"index": "129", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "130", "colour": "orange", "code": "    def __unicode__(self):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "131", "colour": "orange", "code": "        return ntou(self.__str__())\n", "error": "none", "author": "tom@organisms.be"}, {"index": "132", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "133", "colour": "orange", "code": "    def parse(elementstr):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "134", "colour": "orange", "code": "        \"\"\"Transform 'token;key=val' to ('token', {'key': 'val'}).\"\"\"\n", "error": "none", "author": "tom@organisms.be"}, {"index": "135", "colour": "orange", "code": "        # Split the element into a value and parameters. The 'value' may\n", "error": "none", "author": "tom@organisms.be"}, {"index": "136", "colour": "orange", "code": "        # be of the form, \"token=token\", but we don't split that here.\n", "error": "none", "author": "tom@organisms.be"}, {"index": "137", "colour": "orange", "code": "        atoms = [x.strip() for x in elementstr.split(\";\") if x.strip()]\n", "error": "none", "author": "tom@organisms.be"}, {"index": "138", "colour": "orange", "code": "        if not atoms:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "139", "colour": "orange", "code": "            initial_value = ''\n", "error": "none", "author": "tom@organisms.be"}, {"index": "140", "colour": "orange", "code": "        else:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "141", "colour": "orange", "code": "            initial_value = atoms.pop(0).strip()\n", "error": "none", "author": "tom@organisms.be"}, {"index": "142", "colour": "orange", "code": "        params = {}\n", "error": "none", "author": "tom@organisms.be"}, {"index": "143", "colour": "orange", "code": "        for atom in atoms:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "144", "colour": "orange", "code": "            atom = [x.strip() for x in atom.split(\"=\", 1) if x.strip()]\n", "error": "none", "author": "tom@organisms.be"}, {"index": "145", "colour": "orange", "code": "            key = atom.pop(0)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "146", "colour": "orange", "code": "            if atom:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "147", "colour": "orange", "code": "                val = atom[0]\n", "error": "none", "author": "tom@organisms.be"}, {"index": "148", "colour": "orange", "code": "            else:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "149", "colour": "orange", "code": "                val = \"\"\n", "error": "none", "author": "tom@organisms.be"}, {"index": "150", "colour": "orange", "code": "            params[key] = val\n", "error": "none", "author": "tom@organisms.be"}, {"index": "151", "colour": "orange", "code": "        return initial_value, params\n", "error": "none", "author": "tom@organisms.be"}, {"index": "152", "colour": "orange", "code": "    parse = staticmethod(parse)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "153", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "154", "colour": "orange", "code": "    def from_str(cls, elementstr):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "155", "colour": "orange", "code": "        \"\"\"Construct an instance from a string of the form 'token;key=val'.\"\"\"\n", "error": "none", "author": "tom@organisms.be"}, {"index": "156", "colour": "orange", "code": "        ival, params = cls.parse(elementstr)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "157", "colour": "orange", "code": "        return cls(ival, params)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "158", "colour": "orange", "code": "    from_str = classmethod(from_str)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "159", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "160", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "161", "colour": "orange", "code": "q_separator = re.compile(r'; *q *=')\n", "error": "none", "author": "tom@organisms.be"}, {"index": "162", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "163", "colour": "orange", "code": "class AcceptElement(HeaderElement):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "164", "colour": "orange", "code": "    \"\"\"An element (with parameters) from an Accept* header's element list.\n", "error": "none", "author": "tom@organisms.be"}, {"index": "165", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "166", "colour": "orange", "code": "    AcceptElement objects are comparable; the more-preferred object will be\n", "error": "none", "author": "tom@organisms.be"}, {"index": "167", "colour": "orange", "code": "    \"less than\" the less-preferred object. They are also therefore sortable;\n", "error": "none", "author": "tom@organisms.be"}, {"index": "168", "colour": "orange", "code": "    if you sort a list of AcceptElement objects, they will be listed in\n", "error": "none", "author": "tom@organisms.be"}, {"index": "169", "colour": "orange", "code": "    priority order; the most preferred value will be first. Yes, it should\n", "error": "none", "author": "tom@organisms.be"}, {"index": "170", "colour": "orange", "code": "    have been the other way around, but it's too late to fix now.\n", "error": "none", "author": "tom@organisms.be"}, {"index": "171", "colour": "orange", "code": "    \"\"\"\n", "error": "none", "author": "tom@organisms.be"}, {"index": "172", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "173", "colour": "orange", "code": "    def from_str(cls, elementstr):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "174", "colour": "orange", "code": "        qvalue = None\n", "error": "none", "author": "tom@organisms.be"}, {"index": "175", "colour": "orange", "code": "        # The first \"q\" parameter (if any) separates the initial\n", "error": "none", "author": "tom@organisms.be"}, {"index": "176", "colour": "orange", "code": "        # media-range parameter(s) (if any) from the accept-params.\n", "error": "none", "author": "tom@organisms.be"}, {"index": "177", "colour": "orange", "code": "        atoms = q_separator.split(elementstr, 1)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "178", "colour": "orange", "code": "        media_range = atoms.pop(0).strip()\n", "error": "none", "author": "tom@organisms.be"}, {"index": "179", "colour": "orange", "code": "        if atoms:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "180", "colour": "orange", "code": "            # The qvalue for an Accept header can have extensions. The other\n", "error": "none", "author": "tom@organisms.be"}, {"index": "181", "colour": "orange", "code": "            # headers cannot, but it's easier to parse them as if they did.\n", "error": "none", "author": "tom@organisms.be"}, {"index": "182", "colour": "orange", "code": "            qvalue = HeaderElement.from_str(atoms[0].strip())\n", "error": "none", "author": "tom@organisms.be"}, {"index": "183", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "184", "colour": "orange", "code": "        media_type, params = cls.parse(media_range)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "185", "colour": "orange", "code": "        if qvalue is not None:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "186", "colour": "orange", "code": "            params[\"q\"] = qvalue\n", "error": "none", "author": "tom@organisms.be"}, {"index": "187", "colour": "orange", "code": "        return cls(media_type, params)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "188", "colour": "orange", "code": "    from_str = classmethod(from_str)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "189", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "190", "colour": "orange", "code": "    def qvalue(self):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "191", "colour": "orange", "code": "        val = self.params.get(\"q\", \"1\")\n", "error": "none", "author": "tom@organisms.be"}, {"index": "192", "colour": "orange", "code": "        if isinstance(val, HeaderElement):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "193", "colour": "orange", "code": "            val = val.value\n", "error": "none", "author": "tom@organisms.be"}, {"index": "194", "colour": "orange", "code": "        return float(val)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "195", "colour": "orange", "code": "    qvalue = property(qvalue, doc=\"The qvalue, or priority, of this value.\")\n", "error": "none", "author": "tom@organisms.be"}, {"index": "196", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "197", "colour": "orange", "code": "    def __cmp__(self, other):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "198", "colour": "orange", "code": "        diff = cmp(self.qvalue, other.qvalue)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "199", "colour": "orange", "code": "        if diff == 0:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "200", "colour": "orange", "code": "            diff = cmp(str(self), str(other))\n", "error": "none", "author": "tom@organisms.be"}, {"index": "201", "colour": "orange", "code": "        return diff\n", "error": "none", "author": "tom@organisms.be"}, {"index": "202", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "203", "colour": "orange", "code": "    def __lt__(self, other):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "204", "colour": "orange", "code": "        if self.qvalue == other.qvalue:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "205", "colour": "orange", "code": "            return str(self) < str(other)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "206", "colour": "orange", "code": "        else:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "207", "colour": "orange", "code": "            return self.qvalue < other.qvalue\n", "error": "none", "author": "tom@organisms.be"}, {"index": "208", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "209", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "210", "colour": "orange", "code": "def header_elements(fieldname, fieldvalue):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "211", "colour": "orange", "code": "    \"\"\"Return a sorted HeaderElement list from a comma-separated header string.\"\"\"\n", "error": "none", "author": "tom@organisms.be"}, {"index": "212", "colour": "orange", "code": "    if not fieldvalue:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "213", "colour": "orange", "code": "        return []\n", "error": "none", "author": "tom@organisms.be"}, {"index": "214", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "215", "colour": "orange", "code": "    result = []\n", "error": "none", "author": "tom@organisms.be"}, {"index": "216", "colour": "orange", "code": "    for element in fieldvalue.split(\",\"):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "217", "colour": "orange", "code": "        if fieldname.startswith(\"Accept\") or fieldname == 'TE':\n", "error": "none", "author": "tom@organisms.be"}, {"index": "218", "colour": "orange", "code": "            hv = AcceptElement.from_str(element)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "219", "colour": "orange", "code": "        else:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "220", "colour": "orange", "code": "            hv = HeaderElement.from_str(element)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "221", "colour": "orange", "code": "        result.append(hv)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "222", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "223", "colour": "orange", "code": "    return list(reversed(sorted(result)))\n", "error": "none", "author": "tom@organisms.be"}, {"index": "224", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "225", "colour": "orange", "code": "def decode_TEXT(value):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "226", "colour": "orange", "code": "    r\"\"\"Decode :rfc:`2047` TEXT (e.g. \"=?utf-8?q?f=C3=BCr?=\" -> \"f\\xfcr\").\"\"\"\n", "error": "none", "author": "tom@organisms.be"}, {"index": "227", "colour": "orange", "code": "    try:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "228", "colour": "orange", "code": "        # Python 3\n", "error": "none", "author": "tom@organisms.be"}, {"index": "229", "colour": "orange", "code": "        from email.header import decode_header\n", "error": "none", "author": "tom@organisms.be"}, {"index": "230", "colour": "orange", "code": "    except ImportError:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "231", "colour": "red", "code": "        from email.Header import decode_header\n", "error": "E", "author": "tom@organisms.be"}, {"index": "232", "colour": "orange", "code": "    atoms = decode_header(value)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "233", "colour": "orange", "code": "    decodedvalue = \"\"\n", "error": "none", "author": "tom@organisms.be"}, {"index": "234", "colour": "orange", "code": "    for atom, charset in atoms:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "235", "colour": "orange", "code": "        if charset is not None:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "236", "colour": "orange", "code": "            atom = atom.decode(charset)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "237", "colour": "orange", "code": "        decodedvalue += atom\n", "error": "none", "author": "tom@organisms.be"}, {"index": "238", "colour": "orange", "code": "    return decodedvalue\n", "error": "none", "author": "tom@organisms.be"}, {"index": "239", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "240", "colour": "orange", "code": "def valid_status(status):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "241", "colour": "orange", "code": "    \"\"\"Return legal HTTP status Code, Reason-phrase and Message.\n", "error": "none", "author": "tom@organisms.be"}, {"index": "242", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "243", "colour": "orange", "code": "    The status arg must be an int, or a str that begins with an int.\n", "error": "none", "author": "tom@organisms.be"}, {"index": "244", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "245", "colour": "orange", "code": "    If status is an int, or a str and no reason-phrase is supplied,\n", "error": "none", "author": "tom@organisms.be"}, {"index": "246", "colour": "orange", "code": "    a default reason-phrase will be provided.\n", "error": "none", "author": "tom@organisms.be"}, {"index": "247", "colour": "orange", "code": "    \"\"\"\n", "error": "none", "author": "tom@organisms.be"}, {"index": "248", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "249", "colour": "orange", "code": "    if not status:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "250", "colour": "orange", "code": "        status = 200\n", "error": "none", "author": "tom@organisms.be"}, {"index": "251", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "252", "colour": "orange", "code": "    status = str(status)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "253", "colour": "orange", "code": "    parts = status.split(\" \", 1)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "254", "colour": "orange", "code": "    if len(parts) == 1:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "255", "colour": "orange", "code": "        # No reason supplied.\n", "error": "none", "author": "tom@organisms.be"}, {"index": "256", "colour": "orange", "code": "        code, = parts\n", "error": "none", "author": "tom@organisms.be"}, {"index": "257", "colour": "orange", "code": "        reason = None\n", "error": "none", "author": "tom@organisms.be"}, {"index": "258", "colour": "orange", "code": "    else:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "259", "colour": "orange", "code": "        code, reason = parts\n", "error": "none", "author": "tom@organisms.be"}, {"index": "260", "colour": "orange", "code": "        reason = reason.strip()\n", "error": "none", "author": "tom@organisms.be"}, {"index": "261", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "262", "colour": "orange", "code": "    try:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "263", "colour": "orange", "code": "        code = int(code)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "264", "colour": "orange", "code": "    except ValueError:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "265", "colour": "orange", "code": "        raise ValueError(\"Illegal response status from server \"\n", "error": "none", "author": "tom@organisms.be"}, {"index": "266", "colour": "orange", "code": "                         \"(%s is non-numeric).\" % repr(code))\n", "error": "none", "author": "tom@organisms.be"}, {"index": "267", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "268", "colour": "orange", "code": "    if code < 100 or code > 599:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "269", "colour": "orange", "code": "        raise ValueError(\"Illegal response status from server \"\n", "error": "none", "author": "tom@organisms.be"}, {"index": "270", "colour": "orange", "code": "                         \"(%s is out of range).\" % repr(code))\n", "error": "none", "author": "tom@organisms.be"}, {"index": "271", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "272", "colour": "orange", "code": "    if code not in response_codes:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "273", "colour": "orange", "code": "        # code is unknown but not illegal\n", "error": "none", "author": "tom@organisms.be"}, {"index": "274", "colour": "orange", "code": "        default_reason, message = \"\", \"\"\n", "error": "none", "author": "tom@organisms.be"}, {"index": "275", "colour": "orange", "code": "    else:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "276", "colour": "orange", "code": "        default_reason, message = response_codes[code]\n", "error": "none", "author": "tom@organisms.be"}, {"index": "277", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "278", "colour": "orange", "code": "    if reason is None:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "279", "colour": "orange", "code": "        reason = default_reason\n", "error": "none", "author": "tom@organisms.be"}, {"index": "280", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "281", "colour": "orange", "code": "    return code, reason, message\n", "error": "none", "author": "tom@organisms.be"}, {"index": "282", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "283", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "284", "colour": "orange", "code": "# NOTE: the parse_qs functions that follow are modified version of those\n", "error": "none", "author": "tom@organisms.be"}, {"index": "285", "colour": "orange", "code": "# in the python3.0 source - we need to pass through an encoding to the unquote\n", "error": "none", "author": "tom@organisms.be"}, {"index": "286", "colour": "orange", "code": "# method, but the default parse_qs function doesn't allow us to.  These do.\n", "error": "none", "author": "tom@organisms.be"}, {"index": "287", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "288", "colour": "orange", "code": "def _parse_qs(qs, keep_blank_values=0, strict_parsing=0, encoding='utf-8'):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "289", "colour": "orange", "code": "    \"\"\"Parse a query given as a string argument.\n", "error": "none", "author": "tom@organisms.be"}, {"index": "290", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "291", "colour": "orange", "code": "    Arguments:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "292", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "293", "colour": "orange", "code": "    qs: URL-encoded query string to be parsed\n", "error": "none", "author": "tom@organisms.be"}, {"index": "294", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "295", "colour": "orange", "code": "    keep_blank_values: flag indicating whether blank values in\n", "error": "none", "author": "tom@organisms.be"}, {"index": "296", "colour": "orange", "code": "        URL encoded queries should be treated as blank strings.  A\n", "error": "none", "author": "tom@organisms.be"}, {"index": "297", "colour": "orange", "code": "        true value indicates that blanks should be retained as blank\n", "error": "none", "author": "tom@organisms.be"}, {"index": "298", "colour": "orange", "code": "        strings.  The default false value indicates that blank values\n", "error": "none", "author": "tom@organisms.be"}, {"index": "299", "colour": "orange", "code": "        are to be ignored and treated as if they were  not included.\n", "error": "none", "author": "tom@organisms.be"}, {"index": "300", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "301", "colour": "orange", "code": "    strict_parsing: flag indicating what to do with parsing errors. If\n", "error": "none", "author": "tom@organisms.be"}, {"index": "302", "colour": "orange", "code": "        false (the default), errors are silently ignored. If true,\n", "error": "none", "author": "tom@organisms.be"}, {"index": "303", "colour": "orange", "code": "        errors raise a ValueError exception.\n", "error": "none", "author": "tom@organisms.be"}, {"index": "304", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "305", "colour": "orange", "code": "    Returns a dict, as G-d intended.\n", "error": "none", "author": "tom@organisms.be"}, {"index": "306", "colour": "orange", "code": "    \"\"\"\n", "error": "none", "author": "tom@organisms.be"}, {"index": "307", "colour": "orange", "code": "    pairs = [s2 for s1 in qs.split('&') for s2 in s1.split(';')]\n", "error": "none", "author": "tom@organisms.be"}, {"index": "308", "colour": "orange", "code": "    d = {}\n", "error": "none", "author": "tom@organisms.be"}, {"index": "309", "colour": "orange", "code": "    for name_value in pairs:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "310", "colour": "orange", "code": "        if not name_value and not strict_parsing:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "311", "colour": "orange", "code": "            continue\n", "error": "none", "author": "tom@organisms.be"}, {"index": "312", "colour": "orange", "code": "        nv = name_value.split('=', 1)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "313", "colour": "orange", "code": "        if len(nv) != 2:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "314", "colour": "orange", "code": "            if strict_parsing:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "315", "colour": "orange", "code": "                raise ValueError(\"bad query field: %r\" % (name_value,))\n", "error": "none", "author": "tom@organisms.be"}, {"index": "316", "colour": "orange", "code": "            # Handle case of a control-name with no equal sign\n", "error": "none", "author": "tom@organisms.be"}, {"index": "317", "colour": "orange", "code": "            if keep_blank_values:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "318", "colour": "orange", "code": "                nv.append('')\n", "error": "none", "author": "tom@organisms.be"}, {"index": "319", "colour": "orange", "code": "            else:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "320", "colour": "orange", "code": "                continue\n", "error": "none", "author": "tom@organisms.be"}, {"index": "321", "colour": "orange", "code": "        if len(nv[1]) or keep_blank_values:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "322", "colour": "orange", "code": "            name = unquote_qs(nv[0], encoding)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "323", "colour": "orange", "code": "            value = unquote_qs(nv[1], encoding)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "324", "colour": "orange", "code": "            if name in d:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "325", "colour": "orange", "code": "                if not isinstance(d[name], list):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "326", "colour": "orange", "code": "                    d[name] = [d[name]]\n", "error": "none", "author": "tom@organisms.be"}, {"index": "327", "colour": "orange", "code": "                d[name].append(value)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "328", "colour": "orange", "code": "            else:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "329", "colour": "orange", "code": "                d[name] = value\n", "error": "none", "author": "tom@organisms.be"}, {"index": "330", "colour": "orange", "code": "    return d\n", "error": "none", "author": "tom@organisms.be"}, {"index": "331", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "332", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "333", "colour": "orange", "code": "image_map_pattern = re.compile(r\"[0-9]+,[0-9]+\")\n", "error": "none", "author": "tom@organisms.be"}, {"index": "334", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "335", "colour": "orange", "code": "def parse_query_string(query_string, keep_blank_values=True, encoding='utf-8'):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "336", "colour": "orange", "code": "    \"\"\"Build a params dictionary from a query_string.\n", "error": "none", "author": "tom@organisms.be"}, {"index": "337", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "338", "colour": "orange", "code": "    Duplicate key/value pairs in the provided query_string will be\n", "error": "none", "author": "tom@organisms.be"}, {"index": "339", "colour": "orange", "code": "    returned as {'key': [val1, val2, ...]}. Single key/values will\n", "error": "none", "author": "tom@organisms.be"}, {"index": "340", "colour": "orange", "code": "    be returned as strings: {'key': 'value'}.\n", "error": "none", "author": "tom@organisms.be"}, {"index": "341", "colour": "orange", "code": "    \"\"\"\n", "error": "none", "author": "tom@organisms.be"}, {"index": "342", "colour": "orange", "code": "    if image_map_pattern.match(query_string):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "343", "colour": "orange", "code": "        # Server-side image map. Map the coords to 'x' and 'y'\n", "error": "none", "author": "tom@organisms.be"}, {"index": "344", "colour": "orange", "code": "        # (like CGI::Request does).\n", "error": "none", "author": "tom@organisms.be"}, {"index": "345", "colour": "orange", "code": "        pm = query_string.split(\",\")\n", "error": "none", "author": "tom@organisms.be"}, {"index": "346", "colour": "orange", "code": "        pm = {'x': int(pm[0]), 'y': int(pm[1])}\n", "error": "none", "author": "tom@organisms.be"}, {"index": "347", "colour": "orange", "code": "    else:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "348", "colour": "orange", "code": "        pm = _parse_qs(query_string, keep_blank_values, encoding=encoding)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "349", "colour": "orange", "code": "    return pm\n", "error": "none", "author": "tom@organisms.be"}, {"index": "350", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "351", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "352", "colour": "orange", "code": "class CaseInsensitiveDict(dict):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "353", "colour": "orange", "code": "    \"\"\"A case-insensitive dict subclass.\n", "error": "none", "author": "tom@organisms.be"}, {"index": "354", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "355", "colour": "orange", "code": "    Each key is changed on entry to str(key).title().\n", "error": "none", "author": "tom@organisms.be"}, {"index": "356", "colour": "orange", "code": "    \"\"\"\n", "error": "none", "author": "tom@organisms.be"}, {"index": "357", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "358", "colour": "orange", "code": "    def __getitem__(self, key):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "359", "colour": "orange", "code": "        return dict.__getitem__(self, str(key).title())\n", "error": "none", "author": "tom@organisms.be"}, {"index": "360", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "361", "colour": "orange", "code": "    def __setitem__(self, key, value):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "362", "colour": "orange", "code": "        dict.__setitem__(self, str(key).title(), value)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "363", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "364", "colour": "orange", "code": "    def __delitem__(self, key):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "365", "colour": "orange", "code": "        dict.__delitem__(self, str(key).title())\n", "error": "none", "author": "tom@organisms.be"}, {"index": "366", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "367", "colour": "orange", "code": "    def __contains__(self, key):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "368", "colour": "orange", "code": "        return dict.__contains__(self, str(key).title())\n", "error": "none", "author": "tom@organisms.be"}, {"index": "369", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "370", "colour": "orange", "code": "    def get(self, key, default=None):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "371", "colour": "orange", "code": "        return dict.get(self, str(key).title(), default)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "372", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "373", "colour": "orange", "code": "    if hasattr({}, 'has_key'):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "374", "colour": "orange", "code": "        def has_key(self, key):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "375", "colour": "orange", "code": "            return dict.has_key(self, str(key).title())\n", "error": "none", "author": "tom@organisms.be"}, {"index": "376", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "377", "colour": "orange", "code": "    def update(self, E):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "378", "colour": "orange", "code": "        for k in E.keys():\n", "error": "none", "author": "tom@organisms.be"}, {"index": "379", "colour": "orange", "code": "            self[str(k).title()] = E[k]\n", "error": "none", "author": "tom@organisms.be"}, {"index": "380", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "381", "colour": "orange", "code": "    def fromkeys(cls, seq, value=None):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "382", "colour": "orange", "code": "        newdict = cls()\n", "error": "none", "author": "tom@organisms.be"}, {"index": "383", "colour": "orange", "code": "        for k in seq:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "384", "colour": "orange", "code": "            newdict[str(k).title()] = value\n", "error": "none", "author": "tom@organisms.be"}, {"index": "385", "colour": "orange", "code": "        return newdict\n", "error": "none", "author": "tom@organisms.be"}, {"index": "386", "colour": "orange", "code": "    fromkeys = classmethod(fromkeys)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "387", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "388", "colour": "orange", "code": "    def setdefault(self, key, x=None):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "389", "colour": "orange", "code": "        key = str(key).title()\n", "error": "none", "author": "tom@organisms.be"}, {"index": "390", "colour": "orange", "code": "        try:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "391", "colour": "orange", "code": "            return self[key]\n", "error": "none", "author": "tom@organisms.be"}, {"index": "392", "colour": "orange", "code": "        except KeyError:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "393", "colour": "orange", "code": "            self[key] = x\n", "error": "none", "author": "tom@organisms.be"}, {"index": "394", "colour": "orange", "code": "            return x\n", "error": "none", "author": "tom@organisms.be"}, {"index": "395", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "396", "colour": "orange", "code": "    def pop(self, key, default):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "397", "colour": "orange", "code": "        return dict.pop(self, str(key).title(), default)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "398", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "399", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "400", "colour": "orange", "code": "#   TEXT = <any OCTET except CTLs, but including LWS>\n", "error": "none", "author": "tom@organisms.be"}, {"index": "401", "colour": "orange", "code": "#\n", "error": "none", "author": "tom@organisms.be"}, {"index": "402", "colour": "orange", "code": "# A CRLF is allowed in the definition of TEXT only as part of a header\n", "error": "none", "author": "tom@organisms.be"}, {"index": "403", "colour": "orange", "code": "# field continuation. It is expected that the folding LWS will be\n", "error": "none", "author": "tom@organisms.be"}, {"index": "404", "colour": "orange", "code": "# replaced with a single SP before interpretation of the TEXT value.\"\n", "error": "none", "author": "tom@organisms.be"}, {"index": "405", "colour": "orange", "code": "if nativestr == bytestr:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "406", "colour": "orange", "code": "    header_translate_table = ''.join([chr(i) for i in xrange(256)])\n", "error": "none", "author": "tom@organisms.be"}, {"index": "407", "colour": "orange", "code": "    header_translate_deletechars = ''.join([chr(i) for i in xrange(32)]) + chr(127)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "408", "colour": "orange", "code": "else:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "409", "colour": "orange", "code": "    header_translate_table = None\n", "error": "none", "author": "tom@organisms.be"}, {"index": "410", "colour": "orange", "code": "    header_translate_deletechars = bytes(range(32)) + bytes([127])\n", "error": "none", "author": "tom@organisms.be"}, {"index": "411", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "412", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "413", "colour": "blue", "code": "class HeaderMap(CaseInsensitiveDict):\n", "error": "R", "author": "tom@organisms.be"}, {"index": "414", "colour": "orange", "code": "    \"\"\"A dict subclass for HTTP request and response headers.\n", "error": "none", "author": "tom@organisms.be"}, {"index": "415", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "416", "colour": "orange", "code": "    Each key is changed on entry to str(key).title(). This allows headers\n", "error": "none", "author": "tom@organisms.be"}, {"index": "417", "colour": "orange", "code": "    to be case-insensitive and avoid duplicates.\n", "error": "none", "author": "tom@organisms.be"}, {"index": "418", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "419", "colour": "orange", "code": "    Values are header values (decoded according to :rfc:`2047` if necessary).\n", "error": "none", "author": "tom@organisms.be"}, {"index": "420", "colour": "orange", "code": "    \"\"\"\n", "error": "none", "author": "tom@organisms.be"}, {"index": "421", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "422", "colour": "orange", "code": "    protocol=(1, 1)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "423", "colour": "orange", "code": "    encodings = [\"ISO-8859-1\"]\n", "error": "none", "author": "tom@organisms.be"}, {"index": "424", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "425", "colour": "orange", "code": "    # Someday, when http-bis is done, this will probably get dropped\n", "error": "none", "author": "tom@organisms.be"}, {"index": "426", "colour": "orange", "code": "    # since few servers, clients, or intermediaries do it. But until then,\n", "error": "none", "author": "tom@organisms.be"}, {"index": "427", "colour": "orange", "code": "    # we're going to obey the spec as is.\n", "error": "none", "author": "tom@organisms.be"}, {"index": "428", "colour": "orange", "code": "    # \"Words of *TEXT MAY contain characters from character sets other than\n", "error": "none", "author": "tom@organisms.be"}, {"index": "429", "colour": "orange", "code": "    # ISO-8859-1 only when encoded according to the rules of RFC 2047.\"\n", "error": "none", "author": "tom@organisms.be"}, {"index": "430", "colour": "orange", "code": "    use_rfc_2047 = True\n", "error": "none", "author": "tom@organisms.be"}, {"index": "431", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "432", "colour": "orange", "code": "    def elements(self, key):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "433", "colour": "orange", "code": "        \"\"\"Return a sorted list of HeaderElements for the given header.\"\"\"\n", "error": "none", "author": "tom@organisms.be"}, {"index": "434", "colour": "orange", "code": "        key = str(key).title()\n", "error": "none", "author": "tom@organisms.be"}, {"index": "435", "colour": "orange", "code": "        value = self.get(key)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "436", "colour": "orange", "code": "        return header_elements(key, value)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "437", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "438", "colour": "orange", "code": "    def values(self, key):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "439", "colour": "orange", "code": "        \"\"\"Return a sorted list of HeaderElement.value for the given header.\"\"\"\n", "error": "none", "author": "tom@organisms.be"}, {"index": "440", "colour": "orange", "code": "        return [e.value for e in self.elements(key)]\n", "error": "none", "author": "tom@organisms.be"}, {"index": "441", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "442", "colour": "orange", "code": "    def output(self):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "443", "colour": "orange", "code": "        \"\"\"Transform self into a list of (name, value) tuples.\"\"\"\n", "error": "none", "author": "tom@organisms.be"}, {"index": "444", "colour": "orange", "code": "        return list(self.encode_header_items(self.items()))\n", "error": "none", "author": "tom@organisms.be"}, {"index": "445", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "446", "colour": "orange", "code": "    def encode_header_items(cls, header_items):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "447", "colour": "orange", "code": "        \"\"\"\n", "error": "none", "author": "tom@organisms.be"}, {"index": "448", "colour": "orange", "code": "        Prepare the sequence of name, value tuples into a form suitable for\n", "error": "none", "author": "tom@organisms.be"}, {"index": "449", "colour": "orange", "code": "        transmitting on the wire for HTTP.\n", "error": "none", "author": "tom@organisms.be"}, {"index": "450", "colour": "orange", "code": "        \"\"\"\n", "error": "none", "author": "tom@organisms.be"}, {"index": "451", "colour": "orange", "code": "        for k, v in header_items:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "452", "colour": "orange", "code": "            if isinstance(k, unicodestr):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "453", "colour": "orange", "code": "                k = cls.encode(k)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "454", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "455", "colour": "orange", "code": "            if not isinstance(v, basestring):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "456", "colour": "orange", "code": "                v = str(v)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "457", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "458", "colour": "orange", "code": "            if isinstance(v, unicodestr):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "459", "colour": "orange", "code": "                v = cls.encode(v)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "460", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "461", "colour": "orange", "code": "            # See header_translate_* constants above.\n", "error": "none", "author": "tom@organisms.be"}, {"index": "462", "colour": "orange", "code": "            # Replace only if you really know what you're doing.\n", "error": "none", "author": "tom@organisms.be"}, {"index": "463", "colour": "orange", "code": "            k = k.translate(header_translate_table, header_translate_deletechars)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "464", "colour": "orange", "code": "            v = v.translate(header_translate_table, header_translate_deletechars)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "465", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "466", "colour": "orange", "code": "            yield (k, v)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "467", "colour": "orange", "code": "    encode_header_items = classmethod(encode_header_items)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "468", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "469", "colour": "orange", "code": "    def encode(cls, v):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "470", "colour": "orange", "code": "        \"\"\"Return the given header name or value, encoded for HTTP output.\"\"\"\n", "error": "none", "author": "tom@organisms.be"}, {"index": "471", "colour": "orange", "code": "        for enc in cls.encodings:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "472", "colour": "orange", "code": "            try:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "473", "colour": "orange", "code": "                return v.encode(enc)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "474", "colour": "orange", "code": "            except UnicodeEncodeError:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "475", "colour": "orange", "code": "                continue\n", "error": "none", "author": "tom@organisms.be"}, {"index": "476", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "477", "colour": "orange", "code": "        if cls.protocol == (1, 1) and cls.use_rfc_2047:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "478", "colour": "orange", "code": "            # Encode RFC-2047 TEXT\n", "error": "none", "author": "tom@organisms.be"}, {"index": "479", "colour": "orange", "code": "            # (e.g. u\"\\u8200\" -> \"=?utf-8?b?6IiA?=\").\n", "error": "none", "author": "tom@organisms.be"}, {"index": "480", "colour": "orange", "code": "            # We do our own here instead of using the email module\n", "error": "none", "author": "tom@organisms.be"}, {"index": "481", "colour": "orange", "code": "            # because we never want to fold lines--folding has\n", "error": "none", "author": "tom@organisms.be"}, {"index": "482", "colour": "orange", "code": "            # been deprecated by the HTTP working group.\n", "error": "none", "author": "tom@organisms.be"}, {"index": "483", "colour": "orange", "code": "            v = b2a_base64(v.encode('utf-8'))\n", "error": "none", "author": "tom@organisms.be"}, {"index": "484", "colour": "orange", "code": "            return (ntob('=?utf-8?b?') + v.strip(ntob('\\n')) + ntob('?='))\n", "error": "none", "author": "tom@organisms.be"}, {"index": "485", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "486", "colour": "orange", "code": "        raise ValueError(\"Could not encode header part %r using \"\n", "error": "none", "author": "tom@organisms.be"}, {"index": "487", "colour": "orange", "code": "                         \"any of the encodings %r.\" %\n", "error": "none", "author": "tom@organisms.be"}, {"index": "488", "colour": "orange", "code": "                         (v, cls.encodings))\n", "error": "none", "author": "tom@organisms.be"}, {"index": "489", "colour": "orange", "code": "    encode = classmethod(encode)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "490", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "491", "colour": "blue", "code": "class Host(object):\n", "error": "R", "author": "tom@organisms.be"}, {"index": "492", "colour": "orange", "code": "    \"\"\"An internet address.\n", "error": "none", "author": "tom@organisms.be"}, {"index": "493", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "494", "colour": "orange", "code": "    name\n", "error": "none", "author": "tom@organisms.be"}, {"index": "495", "colour": "orange", "code": "        Should be the client's host name. If not available (because no DNS\n", "error": "none", "author": "tom@organisms.be"}, {"index": "496", "colour": "orange", "code": "        lookup is performed), the IP address should be used instead.\n", "error": "none", "author": "tom@organisms.be"}, {"index": "497", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "498", "colour": "orange", "code": "    \"\"\"\n", "error": "none", "author": "tom@organisms.be"}, {"index": "499", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "500", "colour": "orange", "code": "    ip = \"0.0.0.0\"\n", "error": "none", "author": "tom@organisms.be"}, {"index": "501", "colour": "orange", "code": "    port = 80\n", "error": "none", "author": "tom@organisms.be"}, {"index": "502", "colour": "orange", "code": "    name = \"unknown.tld\"\n", "error": "none", "author": "tom@organisms.be"}, {"index": "503", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "504", "colour": "orange", "code": "    def __init__(self, ip, port, name=None):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "505", "colour": "orange", "code": "        self.ip = ip\n", "error": "none", "author": "tom@organisms.be"}, {"index": "506", "colour": "orange", "code": "        self.port = port\n", "error": "none", "author": "tom@organisms.be"}, {"index": "507", "colour": "orange", "code": "        if name is None:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "508", "colour": "orange", "code": "            name = ip\n", "error": "none", "author": "tom@organisms.be"}, {"index": "509", "colour": "orange", "code": "        self.name = name\n", "error": "none", "author": "tom@organisms.be"}, {"index": "510", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "511", "colour": "orange", "code": "    def __repr__(self):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "512", "colour": "orange", "code": "        return \"httputil.Host(%r, %r, %r)\" % (self.ip, self.port, self.name)\n", "error": "none", "author": "tom@organisms.be"}]]}