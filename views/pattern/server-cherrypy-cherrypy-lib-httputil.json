{"path": "/home/asumal/git/cs410/pattern/pattern/server/cherrypy/cherrypy/lib/httputil.py", "lines": [[{"error": "none", "line": "1", "code": "\"\"\"HTTP library functions.\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "2", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "3", "code": "This module contains functions for building an HTTP application\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "4", "code": "framework: any one, not just one whose name starts with \"Ch\". ;) If you\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "5", "code": "reference any modules from some popular framework inside *this* module,\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "6", "code": "FuManChu will personally hang you up by your thumbs and submit you\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "7", "code": "to a public caning.\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "8", "code": "\"\"\"\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "9", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "10", "code": "from binascii import b2a_base64\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "W", "line": "11", "code": "from cherrypy._cpcompat import BaseHTTPRequestHandler, HTTPDate, ntob, ntou, reversed, sorted\n", "colour": "purple", "author": "tom@organisms.be"}, {"error": "W", "line": "12", "code": "from cherrypy._cpcompat import basestring, bytestr, iteritems, nativestr, unicodestr, unquote_qs\n", "colour": "purple", "author": "tom@organisms.be"}, {"error": "C", "line": "13", "code": "response_codes = BaseHTTPRequestHandler.responses.copy()\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "14", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "15", "code": "# From http://www.cherrypy.org/ticket/361\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "16", "code": "response_codes[500] = ('Internal Server Error',\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "17", "code": "                      'The server encountered an unexpected condition '\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "18", "code": "                      'which prevented it from fulfilling the request.')\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "19", "code": "response_codes[503] = ('Service Unavailable',\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "20", "code": "                      'The server is currently unable to handle the '\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "21", "code": "                      'request due to a temporary overloading or '\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "22", "code": "                      'maintenance of the server.')\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "23", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "24", "code": "import re\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "W", "line": "25", "code": "import urllib\n", "colour": "purple", "author": "tom@organisms.be"}, {"error": "none", "line": "26", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "27", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "28", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "29", "code": "def urljoin(*atoms):\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "W", "line": "30", "code": "    \"\"\"Return the given path \\*atoms, joined into a single URL.\n", "colour": "purple", "author": "tom@organisms.be"}, {"error": "none", "line": "31", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "32", "code": "    This will correctly join a SCRIPT_NAME and PATH_INFO into the\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "33", "code": "    original URL, even if either atom is blank.\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "34", "code": "    \"\"\"\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "35", "code": "    url = \"/\".join([x for x in atoms if x])\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "36", "code": "    while \"//\" in url:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "37", "code": "        url = url.replace(\"//\", \"/\")\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "38", "code": "    # Special-case the final url of \"\", and return \"/\" instead.\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "39", "code": "    return url or \"/\"\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "40", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "41", "code": "def urljoin_bytes(*atoms):\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "42", "code": "    \"\"\"Return the given path *atoms, joined into a single URL.\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "43", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "44", "code": "    This will correctly join a SCRIPT_NAME and PATH_INFO into the\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "45", "code": "    original URL, even if either atom is blank.\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "46", "code": "    \"\"\"\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "47", "code": "    url = ntob(\"/\").join([x for x in atoms if x])\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "48", "code": "    while ntob(\"//\") in url:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "49", "code": "        url = url.replace(ntob(\"//\"), ntob(\"/\"))\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "50", "code": "    # Special-case the final url of \"\", and return \"/\" instead.\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "51", "code": "    return url or ntob(\"/\")\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "52", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "53", "code": "def protocol_from_http(protocol_str):\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "54", "code": "    \"\"\"Return a protocol tuple from the given 'HTTP/x.y' string.\"\"\"\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "55", "code": "    return int(protocol_str[5]), int(protocol_str[7])\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "56", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "57", "code": "def get_ranges(headervalue, content_length):\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "58", "code": "    \"\"\"Return a list of (start, stop) indices from a Range header, or None.\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "59", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "60", "code": "    Each (start, stop) tuple will be composed of two ints, which are suitable\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "61", "code": "    for use in a slicing operation. That is, the header \"Range: bytes=3-6\",\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "62", "code": "    if applied against a Python string, is requesting resource[3:7]. This\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "63", "code": "    function will return the list [(3, 7)].\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "64", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "65", "code": "    If this function returns an empty list, you should return HTTP 416.\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "66", "code": "    \"\"\"\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "67", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "68", "code": "    if not headervalue:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "69", "code": "        return None\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "70", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "71", "code": "    result = []\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "W", "line": "72", "code": "    bytesunit, byteranges = headervalue.split(\"=\", 1)\n", "colour": "purple", "author": "tom@organisms.be"}, {"error": "none", "line": "73", "code": "    for brange in byteranges.split(\",\"):\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "74", "code": "        start, stop = [x.strip() for x in brange.split(\"-\", 1)]\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "75", "code": "        if start:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "76", "code": "            if not stop:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "77", "code": "                stop = content_length - 1\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "78", "code": "            start, stop = int(start), int(stop)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "79", "code": "            if start >= content_length:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "80", "code": "                # From rfc 2616 sec 14.16:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "81", "code": "                # \"If the server receives a request (other than one\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "82", "code": "                # including an If-Range request-header field) with an\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "83", "code": "                # unsatisfiable Range request-header field (that is,\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "84", "code": "                # all of whose byte-range-spec values have a first-byte-pos\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "85", "code": "                # value greater than the current length of the selected\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "86", "code": "                # resource), it SHOULD return a response code of 416\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "87", "code": "                # (Requested range not satisfiable).\"\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "88", "code": "                continue\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "89", "code": "            if stop < start:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "90", "code": "                # From rfc 2616 sec 14.16:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "91", "code": "                # \"If the server ignores a byte-range-spec because it\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "92", "code": "                # is syntactically invalid, the server SHOULD treat\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "93", "code": "                # the request as if the invalid Range header field\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "94", "code": "                # did not exist. (Normally, this means return a 200\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "95", "code": "                # response containing the full entity).\"\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "96", "code": "                return None\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "97", "code": "            result.append((start, stop + 1))\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "98", "code": "        else:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "99", "code": "            if not stop:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "100", "code": "                # See rfc quote above.\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "101", "code": "                return None\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "102", "code": "            # Negative subscript (last N bytes)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "103", "code": "            result.append((content_length - int(stop), content_length))\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "104", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "105", "code": "    return result\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "106", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "107", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "108", "code": "class HeaderElement(object):\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "109", "code": "    \"\"\"An element (with parameters) from an HTTP header's element list.\"\"\"\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "110", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "111", "code": "    def __init__(self, value, params=None):\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "112", "code": "        self.value = value\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "113", "code": "        if params is None:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "114", "code": "            params = {}\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "115", "code": "        self.params = params\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "116", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "117", "code": "    def __cmp__(self, other):\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "118", "code": "        return cmp(self.value, other.value)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "119", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "120", "code": "    def __lt__(self, other):\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "121", "code": "        return self.value < other.value\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "122", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "123", "code": "    def __str__(self):\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "124", "code": "        p = [\";%s=%s\" % (k, v) for k, v in iteritems(self.params)]\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "125", "code": "        return str(\"%s%s\" % (self.value, \"\".join(p)))\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "126", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "127", "code": "    def __bytes__(self):\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "128", "code": "        return ntob(self.__str__())\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "129", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "130", "code": "    def __unicode__(self):\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "131", "code": "        return ntou(self.__str__())\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "132", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "133", "code": "    def parse(elementstr):\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "134", "code": "        \"\"\"Transform 'token;key=val' to ('token', {'key': 'val'}).\"\"\"\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "135", "code": "        # Split the element into a value and parameters. The 'value' may\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "136", "code": "        # be of the form, \"token=token\", but we don't split that here.\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "137", "code": "        atoms = [x.strip() for x in elementstr.split(\";\") if x.strip()]\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "138", "code": "        if not atoms:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "139", "code": "            initial_value = ''\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "140", "code": "        else:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "141", "code": "            initial_value = atoms.pop(0).strip()\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "142", "code": "        params = {}\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "143", "code": "        for atom in atoms:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "144", "code": "            atom = [x.strip() for x in atom.split(\"=\", 1) if x.strip()]\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "145", "code": "            key = atom.pop(0)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "146", "code": "            if atom:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "147", "code": "                val = atom[0]\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "148", "code": "            else:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "149", "code": "                val = \"\"\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "150", "code": "            params[key] = val\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "151", "code": "        return initial_value, params\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "152", "code": "    parse = staticmethod(parse)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "153", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "154", "code": "    def from_str(cls, elementstr):\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "155", "code": "        \"\"\"Construct an instance from a string of the form 'token;key=val'.\"\"\"\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "156", "code": "        ival, params = cls.parse(elementstr)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "157", "code": "        return cls(ival, params)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "158", "code": "    from_str = classmethod(from_str)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "159", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "160", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "161", "code": "q_separator = re.compile(r'; *q *=')\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "162", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "163", "code": "class AcceptElement(HeaderElement):\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "164", "code": "    \"\"\"An element (with parameters) from an Accept* header's element list.\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "165", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "166", "code": "    AcceptElement objects are comparable; the more-preferred object will be\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "167", "code": "    \"less than\" the less-preferred object. They are also therefore sortable;\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "168", "code": "    if you sort a list of AcceptElement objects, they will be listed in\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "169", "code": "    priority order; the most preferred value will be first. Yes, it should\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "170", "code": "    have been the other way around, but it's too late to fix now.\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "171", "code": "    \"\"\"\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "172", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "173", "code": "    def from_str(cls, elementstr):\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "174", "code": "        qvalue = None\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "175", "code": "        # The first \"q\" parameter (if any) separates the initial\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "176", "code": "        # media-range parameter(s) (if any) from the accept-params.\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "177", "code": "        atoms = q_separator.split(elementstr, 1)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "178", "code": "        media_range = atoms.pop(0).strip()\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "179", "code": "        if atoms:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "180", "code": "            # The qvalue for an Accept header can have extensions. The other\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "181", "code": "            # headers cannot, but it's easier to parse them as if they did.\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "182", "code": "            qvalue = HeaderElement.from_str(atoms[0].strip())\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "183", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "184", "code": "        media_type, params = cls.parse(media_range)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "185", "code": "        if qvalue is not None:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "186", "code": "            params[\"q\"] = qvalue\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "187", "code": "        return cls(media_type, params)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "188", "code": "    from_str = classmethod(from_str)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "189", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "190", "code": "    def qvalue(self):\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "191", "code": "        val = self.params.get(\"q\", \"1\")\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "192", "code": "        if isinstance(val, HeaderElement):\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "193", "code": "            val = val.value\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "194", "code": "        return float(val)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "195", "code": "    qvalue = property(qvalue, doc=\"The qvalue, or priority, of this value.\")\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "196", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "197", "code": "    def __cmp__(self, other):\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "198", "code": "        diff = cmp(self.qvalue, other.qvalue)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "199", "code": "        if diff == 0:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "200", "code": "            diff = cmp(str(self), str(other))\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "201", "code": "        return diff\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "202", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "203", "code": "    def __lt__(self, other):\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "204", "code": "        if self.qvalue == other.qvalue:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "205", "code": "            return str(self) < str(other)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "206", "code": "        else:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "207", "code": "            return self.qvalue < other.qvalue\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "208", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "209", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "210", "code": "def header_elements(fieldname, fieldvalue):\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "211", "code": "    \"\"\"Return a sorted HeaderElement list from a comma-separated header string.\"\"\"\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "212", "code": "    if not fieldvalue:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "213", "code": "        return []\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "214", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "215", "code": "    result = []\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "216", "code": "    for element in fieldvalue.split(\",\"):\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "217", "code": "        if fieldname.startswith(\"Accept\") or fieldname == 'TE':\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "218", "code": "            hv = AcceptElement.from_str(element)\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "219", "code": "        else:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "220", "code": "            hv = HeaderElement.from_str(element)\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "221", "code": "        result.append(hv)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "222", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "223", "code": "    return list(reversed(sorted(result)))\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "224", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "225", "code": "def decode_TEXT(value):\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "226", "code": "    r\"\"\"Decode :rfc:`2047` TEXT (e.g. \"=?utf-8?q?f=C3=BCr?=\" -> \"f\\xfcr\").\"\"\"\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "227", "code": "    try:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "228", "code": "        # Python 3\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "229", "code": "        from email.header import decode_header\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "230", "code": "    except ImportError:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "F", "line": "231", "code": "        from email.Header import decode_header\n", "colour": "red", "author": "tom@organisms.be"}, {"error": "none", "line": "232", "code": "    atoms = decode_header(value)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "233", "code": "    decodedvalue = \"\"\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "234", "code": "    for atom, charset in atoms:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "235", "code": "        if charset is not None:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "236", "code": "            atom = atom.decode(charset)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "237", "code": "        decodedvalue += atom\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "238", "code": "    return decodedvalue\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "239", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "240", "code": "def valid_status(status):\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "241", "code": "    \"\"\"Return legal HTTP status Code, Reason-phrase and Message.\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "242", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "243", "code": "    The status arg must be an int, or a str that begins with an int.\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "244", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "245", "code": "    If status is an int, or a str and no reason-phrase is supplied,\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "246", "code": "    a default reason-phrase will be provided.\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "247", "code": "    \"\"\"\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "248", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "249", "code": "    if not status:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "250", "code": "        status = 200\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "251", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "252", "code": "    status = str(status)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "253", "code": "    parts = status.split(\" \", 1)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "254", "code": "    if len(parts) == 1:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "255", "code": "        # No reason supplied.\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "256", "code": "        code, = parts\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "257", "code": "        reason = None\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "258", "code": "    else:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "259", "code": "        code, reason = parts\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "260", "code": "        reason = reason.strip()\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "261", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "262", "code": "    try:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "263", "code": "        code = int(code)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "264", "code": "    except ValueError:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "265", "code": "        raise ValueError(\"Illegal response status from server \"\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "266", "code": "                         \"(%s is non-numeric).\" % repr(code))\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "267", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "268", "code": "    if code < 100 or code > 599:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "269", "code": "        raise ValueError(\"Illegal response status from server \"\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "270", "code": "                         \"(%s is out of range).\" % repr(code))\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "271", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "272", "code": "    if code not in response_codes:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "273", "code": "        # code is unknown but not illegal\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "274", "code": "        default_reason, message = \"\", \"\"\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "275", "code": "    else:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "276", "code": "        default_reason, message = response_codes[code]\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "277", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "278", "code": "    if reason is None:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "279", "code": "        reason = default_reason\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "280", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "281", "code": "    return code, reason, message\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "282", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "283", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "284", "code": "# NOTE: the parse_qs functions that follow are modified version of those\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "285", "code": "# in the python3.0 source - we need to pass through an encoding to the unquote\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "286", "code": "# method, but the default parse_qs function doesn't allow us to.  These do.\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "287", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "288", "code": "def _parse_qs(qs, keep_blank_values=0, strict_parsing=0, encoding='utf-8'):\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "289", "code": "    \"\"\"Parse a query given as a string argument.\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "290", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "291", "code": "    Arguments:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "292", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "293", "code": "    qs: URL-encoded query string to be parsed\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "294", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "295", "code": "    keep_blank_values: flag indicating whether blank values in\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "296", "code": "        URL encoded queries should be treated as blank strings.  A\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "297", "code": "        true value indicates that blanks should be retained as blank\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "298", "code": "        strings.  The default false value indicates that blank values\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "299", "code": "        are to be ignored and treated as if they were  not included.\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "300", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "301", "code": "    strict_parsing: flag indicating what to do with parsing errors. If\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "302", "code": "        false (the default), errors are silently ignored. If true,\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "303", "code": "        errors raise a ValueError exception.\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "304", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "305", "code": "    Returns a dict, as G-d intended.\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "306", "code": "    \"\"\"\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "307", "code": "    pairs = [s2 for s1 in qs.split('&') for s2 in s1.split(';')]\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "308", "code": "    d = {}\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "309", "code": "    for name_value in pairs:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "310", "code": "        if not name_value and not strict_parsing:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "311", "code": "            continue\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "312", "code": "        nv = name_value.split('=', 1)\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "313", "code": "        if len(nv) != 2:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "314", "code": "            if strict_parsing:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "315", "code": "                raise ValueError(\"bad query field: %r\" % (name_value,))\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "316", "code": "            # Handle case of a control-name with no equal sign\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "317", "code": "            if keep_blank_values:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "318", "code": "                nv.append('')\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "319", "code": "            else:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "320", "code": "                continue\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "321", "code": "        if len(nv[1]) or keep_blank_values:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "322", "code": "            name = unquote_qs(nv[0], encoding)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "323", "code": "            value = unquote_qs(nv[1], encoding)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "324", "code": "            if name in d:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "325", "code": "                if not isinstance(d[name], list):\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "326", "code": "                    d[name] = [d[name]]\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "327", "code": "                d[name].append(value)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "328", "code": "            else:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "329", "code": "                d[name] = value\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "330", "code": "    return d\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "331", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "332", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "333", "code": "image_map_pattern = re.compile(r\"[0-9]+,[0-9]+\")\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "334", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "335", "code": "def parse_query_string(query_string, keep_blank_values=True, encoding='utf-8'):\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "336", "code": "    \"\"\"Build a params dictionary from a query_string.\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "337", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "338", "code": "    Duplicate key/value pairs in the provided query_string will be\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "339", "code": "    returned as {'key': [val1, val2, ...]}. Single key/values will\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "340", "code": "    be returned as strings: {'key': 'value'}.\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "341", "code": "    \"\"\"\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "342", "code": "    if image_map_pattern.match(query_string):\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "343", "code": "        # Server-side image map. Map the coords to 'x' and 'y'\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "344", "code": "        # (like CGI::Request does).\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "345", "code": "        pm = query_string.split(\",\")\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "C", "line": "346", "code": "        pm = {'x': int(pm[0]), 'y': int(pm[1])}\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "347", "code": "    else:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "348", "code": "        pm = _parse_qs(query_string, keep_blank_values, encoding=encoding)\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "349", "code": "    return pm\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "350", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "351", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "352", "code": "class CaseInsensitiveDict(dict):\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "353", "code": "    \"\"\"A case-insensitive dict subclass.\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "354", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "355", "code": "    Each key is changed on entry to str(key).title().\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "356", "code": "    \"\"\"\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "357", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "358", "code": "    def __getitem__(self, key):\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "359", "code": "        return dict.__getitem__(self, str(key).title())\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "360", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "361", "code": "    def __setitem__(self, key, value):\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "362", "code": "        dict.__setitem__(self, str(key).title(), value)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "363", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "364", "code": "    def __delitem__(self, key):\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "365", "code": "        dict.__delitem__(self, str(key).title())\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "366", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "367", "code": "    def __contains__(self, key):\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "368", "code": "        return dict.__contains__(self, str(key).title())\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "369", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "370", "code": "    def get(self, key, default=None):\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "371", "code": "        return dict.get(self, str(key).title(), default)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "372", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "373", "code": "    if hasattr({}, 'has_key'):\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "374", "code": "        def has_key(self, key):\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "375", "code": "            return dict.has_key(self, str(key).title())\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "376", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "377", "code": "    def update(self, E):\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "378", "code": "        for k in E.keys():\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "379", "code": "            self[str(k).title()] = E[k]\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "380", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "381", "code": "    def fromkeys(cls, seq, value=None):\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "382", "code": "        newdict = cls()\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "383", "code": "        for k in seq:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "384", "code": "            newdict[str(k).title()] = value\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "385", "code": "        return newdict\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "386", "code": "    fromkeys = classmethod(fromkeys)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "387", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "388", "code": "    def setdefault(self, key, x=None):\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "389", "code": "        key = str(key).title()\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "390", "code": "        try:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "391", "code": "            return self[key]\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "392", "code": "        except KeyError:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "393", "code": "            self[key] = x\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "394", "code": "            return x\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "395", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "396", "code": "    def pop(self, key, default):\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "397", "code": "        return dict.pop(self, str(key).title(), default)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "398", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "399", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "400", "code": "#   TEXT = <any OCTET except CTLs, but including LWS>\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "401", "code": "#\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "402", "code": "# A CRLF is allowed in the definition of TEXT only as part of a header\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "403", "code": "# field continuation. It is expected that the folding LWS will be\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "404", "code": "# replaced with a single SP before interpretation of the TEXT value.\"\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "405", "code": "if nativestr == bytestr:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "406", "code": "    header_translate_table = ''.join([chr(i) for i in xrange(256)])\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "C", "line": "407", "code": "    header_translate_deletechars = ''.join([chr(i) for i in xrange(32)]) + chr(127)\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "408", "code": "else:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "409", "code": "    header_translate_table = None\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "C", "line": "410", "code": "    header_translate_deletechars = bytes(range(32)) + bytes([127])\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "411", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "412", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "R", "line": "413", "code": "class HeaderMap(CaseInsensitiveDict):\n", "colour": "green", "author": "tom@organisms.be"}, {"error": "none", "line": "414", "code": "    \"\"\"A dict subclass for HTTP request and response headers.\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "415", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "416", "code": "    Each key is changed on entry to str(key).title(). This allows headers\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "417", "code": "    to be case-insensitive and avoid duplicates.\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "418", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "419", "code": "    Values are header values (decoded according to :rfc:`2047` if necessary).\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "420", "code": "    \"\"\"\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "421", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "422", "code": "    protocol=(1, 1)\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "423", "code": "    encodings = [\"ISO-8859-1\"]\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "424", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "425", "code": "    # Someday, when http-bis is done, this will probably get dropped\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "426", "code": "    # since few servers, clients, or intermediaries do it. But until then,\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "427", "code": "    # we're going to obey the spec as is.\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "428", "code": "    # \"Words of *TEXT MAY contain characters from character sets other than\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "429", "code": "    # ISO-8859-1 only when encoded according to the rules of RFC 2047.\"\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "430", "code": "    use_rfc_2047 = True\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "431", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "432", "code": "    def elements(self, key):\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "433", "code": "        \"\"\"Return a sorted list of HeaderElements for the given header.\"\"\"\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "434", "code": "        key = str(key).title()\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "435", "code": "        value = self.get(key)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "436", "code": "        return header_elements(key, value)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "437", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "438", "code": "    def values(self, key):\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "439", "code": "        \"\"\"Return a sorted list of HeaderElement.value for the given header.\"\"\"\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "440", "code": "        return [e.value for e in self.elements(key)]\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "441", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "442", "code": "    def output(self):\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "443", "code": "        \"\"\"Transform self into a list of (name, value) tuples.\"\"\"\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "444", "code": "        return list(self.encode_header_items(self.items()))\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "445", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "446", "code": "    def encode_header_items(cls, header_items):\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "447", "code": "        \"\"\"\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "448", "code": "        Prepare the sequence of name, value tuples into a form suitable for\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "449", "code": "        transmitting on the wire for HTTP.\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "450", "code": "        \"\"\"\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "451", "code": "        for k, v in header_items:\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "452", "code": "            if isinstance(k, unicodestr):\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "453", "code": "                k = cls.encode(k)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "454", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "455", "code": "            if not isinstance(v, basestring):\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "456", "code": "                v = str(v)\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "457", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "458", "code": "            if isinstance(v, unicodestr):\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "459", "code": "                v = cls.encode(v)\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "460", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "461", "code": "            # See header_translate_* constants above.\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "462", "code": "            # Replace only if you really know what you're doing.\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "463", "code": "            k = k.translate(header_translate_table, header_translate_deletechars)\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "C", "line": "464", "code": "            v = v.translate(header_translate_table, header_translate_deletechars)\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "465", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "466", "code": "            yield (k, v)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "467", "code": "    encode_header_items = classmethod(encode_header_items)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "468", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "469", "code": "    def encode(cls, v):\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "470", "code": "        \"\"\"Return the given header name or value, encoded for HTTP output.\"\"\"\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "471", "code": "        for enc in cls.encodings:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "472", "code": "            try:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "473", "code": "                return v.encode(enc)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "474", "code": "            except UnicodeEncodeError:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "475", "code": "                continue\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "476", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "477", "code": "        if cls.protocol == (1, 1) and cls.use_rfc_2047:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "478", "code": "            # Encode RFC-2047 TEXT\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "479", "code": "            # (e.g. u\"\\u8200\" -> \"=?utf-8?b?6IiA?=\").\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "480", "code": "            # We do our own here instead of using the email module\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "481", "code": "            # because we never want to fold lines--folding has\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "482", "code": "            # been deprecated by the HTTP working group.\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "483", "code": "            v = b2a_base64(v.encode('utf-8'))\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "484", "code": "            return (ntob('=?utf-8?b?') + v.strip(ntob('\\n')) + ntob('?='))\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "485", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "486", "code": "        raise ValueError(\"Could not encode header part %r using \"\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "487", "code": "                         \"any of the encodings %r.\" %\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "488", "code": "                         (v, cls.encodings))\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "489", "code": "    encode = classmethod(encode)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "490", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "R", "line": "491", "code": "class Host(object):\n", "colour": "green", "author": "tom@organisms.be"}, {"error": "none", "line": "492", "code": "    \"\"\"An internet address.\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "493", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "494", "code": "    name\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "495", "code": "        Should be the client's host name. If not available (because no DNS\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "496", "code": "        lookup is performed), the IP address should be used instead.\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "497", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "498", "code": "    \"\"\"\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "499", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "500", "code": "    ip = \"0.0.0.0\"\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "501", "code": "    port = 80\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "502", "code": "    name = \"unknown.tld\"\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "503", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "504", "code": "    def __init__(self, ip, port, name=None):\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "505", "code": "        self.ip = ip\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "506", "code": "        self.port = port\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "507", "code": "        if name is None:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "508", "code": "            name = ip\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "509", "code": "        self.name = name\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "510", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "511", "code": "    def __repr__(self):\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "512", "code": "        return \"httputil.Host(%r, %r, %r)\" % (self.ip, self.port, self.name)\n", "colour": "black", "author": "tom@organisms.be"}]]}