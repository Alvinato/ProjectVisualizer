{"path": "/home/asumal/git/cs410/pattern/pattern/web/pdf/pdffont.py", "lines": [[{"error": "C", "line": "1", "code": "#!/usr/bin/env python2\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "2", "code": "import sys\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "3", "code": "import struct\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "4", "code": "try:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "5", "code": "    from cStringIO import StringIO\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "6", "code": "except ImportError:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "7", "code": "    from StringIO import StringIO\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "W", "line": "8", "code": "from cmapdb import CMapDB, CMapParser, FileUnicodeMap, CMap\n", "colour": "purple", "author": "tom@organisms.be"}, {"error": "W", "line": "9", "code": "from encodingdb import EncodingDB, name2unicode\n", "colour": "purple", "author": "tom@organisms.be"}, {"error": "W", "line": "10", "code": "from psparser import PSStackParser\n", "colour": "purple", "author": "tom@organisms.be"}, {"error": "W", "line": "11", "code": "from psparser import PSSyntaxError, PSEOF\n", "colour": "purple", "author": "tom@organisms.be"}, {"error": "W", "line": "12", "code": "from psparser import LIT, KWD, STRICT\n", "colour": "purple", "author": "tom@organisms.be"}, {"error": "W", "line": "13", "code": "from psparser import PSLiteral, literal_name\n", "colour": "purple", "author": "tom@organisms.be"}, {"error": "W", "line": "14", "code": "from pdftypes import PDFException, resolve1\n", "colour": "purple", "author": "tom@organisms.be"}, {"error": "W", "line": "15", "code": "from pdftypes import int_value, float_value, num_value\n", "colour": "purple", "author": "tom@organisms.be"}, {"error": "W", "line": "16", "code": "from pdftypes import str_value, list_value, dict_value, stream_value\n", "colour": "purple", "author": "tom@organisms.be"}, {"error": "W", "line": "17", "code": "from fontmetrics import FONT_METRICS\n", "colour": "purple", "author": "tom@organisms.be"}, {"error": "W", "line": "18", "code": "from utils import apply_matrix_norm, nunpack, choplist\n", "colour": "purple", "author": "tom@organisms.be"}, {"error": "none", "line": "19", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "20", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "21", "code": "def get_widths(seq):\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "22", "code": "    widths = {}\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "23", "code": "    r = []\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "C", "line": "24", "code": "    for v in seq:\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "25", "code": "        if isinstance(v, list):\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "26", "code": "            if r:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "27", "code": "                char1 = r[-1]\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "28", "code": "                for (i,w) in enumerate(v):\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "29", "code": "                    widths[char1+i] = w\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "30", "code": "                r = []\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "31", "code": "        elif isinstance(v, int):\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "32", "code": "            r.append(v)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "33", "code": "            if len(r) == 3:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "34", "code": "                (char1,char2,w) = r\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "35", "code": "                for i in xrange(char1, char2+1):\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "36", "code": "                    widths[i] = w\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "37", "code": "                r = []\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "38", "code": "    return widths\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "39", "code": "#assert get_widths([1]) == {}\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "40", "code": "#assert get_widths([1,2,3]) == {1:3, 2:3}\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "41", "code": "#assert get_widths([1,[2,3],6,[7,8]]) == {1:2,2:3, 6:7,7:8}\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "42", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "43", "code": "def get_widths2(seq):\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "44", "code": "    widths = {}\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "45", "code": "    r = []\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "C", "line": "46", "code": "    for v in seq:\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "47", "code": "        if isinstance(v, list):\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "48", "code": "            if r:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "49", "code": "                char1 = r[-1]\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "50", "code": "                for (i,(w,vx,vy)) in enumerate(choplist(3,v)):\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "C", "line": "51", "code": "                    widths[char1+i] = (w,(vx,vy))\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "C", "line": "52", "code": "                r = []\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "53", "code": "        elif isinstance(v, int):\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "54", "code": "            r.append(v)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "55", "code": "            if len(r) == 5:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "56", "code": "                (char1,char2,w,vx,vy) = r\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "57", "code": "                for i in xrange(char1, char2+1):\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "58", "code": "                    widths[i] = (w,(vx,vy))\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "C", "line": "59", "code": "                r = []\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "60", "code": "    return widths\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "61", "code": "#assert get_widths2([1]) == {}\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "62", "code": "#assert get_widths2([1,2,3,4,5]) == {1:(3,(4,5)), 2:(3,(4,5))}\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "63", "code": "#assert get_widths2([1,[2,3,4,5],6,[7,8,9]]) == {1:(2,(3,4)), 6:(7,(8,9))}\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "64", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "65", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "66", "code": "##  FontMetricsDB\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "67", "code": "##\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "R", "line": "68", "code": "class FontMetricsDB(object):\n", "colour": "green", "author": "tom@organisms.be"}, {"error": "none", "line": "69", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "70", "code": "    @classmethod\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "71", "code": "    def get_metrics(klass, fontname):\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "72", "code": "        return FONT_METRICS[fontname]\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "73", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "74", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "75", "code": "##  Type1FontHeaderParser\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "76", "code": "##\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "77", "code": "class Type1FontHeaderParser(PSStackParser):\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "78", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "79", "code": "    KEYWORD_BEGIN = KWD('begin')\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "80", "code": "    KEYWORD_END = KWD('end')\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "81", "code": "    KEYWORD_DEF = KWD('def')\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "82", "code": "    KEYWORD_PUT = KWD('put')\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "83", "code": "    KEYWORD_DICT = KWD('dict')\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "84", "code": "    KEYWORD_ARRAY = KWD('array')\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "85", "code": "    KEYWORD_READONLY = KWD('readonly')\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "86", "code": "    KEYWORD_FOR = KWD('for')\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "87", "code": "    KEYWORD_FOR = KWD('for')\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "88", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "89", "code": "    def __init__(self, data):\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "90", "code": "        PSStackParser.__init__(self, data)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "91", "code": "        self._cid2unicode = {}\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "92", "code": "        return\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "93", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "94", "code": "    def get_encoding(self):\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "95", "code": "        while 1:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "96", "code": "            try:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "97", "code": "                (cid,name) = self.nextobject()\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "98", "code": "            except PSEOF:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "99", "code": "                break\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "100", "code": "            try:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "101", "code": "                self._cid2unicode[cid] = name2unicode(name)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "102", "code": "            except KeyError:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "103", "code": "                pass\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "104", "code": "        return self._cid2unicode\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "105", "code": "    \n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "106", "code": "    def do_keyword(self, pos, token):\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "107", "code": "        if token is self.KEYWORD_PUT:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "108", "code": "            ((_,key),(_,value)) = self.pop(2)\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "109", "code": "            if (isinstance(key, int) and\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "110", "code": "                isinstance(value, PSLiteral)):\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "111", "code": "                self.add_results((key, literal_name(value)))\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "112", "code": "        return\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "113", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "114", "code": "    \n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "115", "code": "##  CFFFont\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "116", "code": "##  (Format specified in Adobe Technical Note: #5176\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "117", "code": "##   \"The Compact Font Format Specification\")\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "118", "code": "##\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "119", "code": "NIBBLES = ('0','1','2','3','4','5','6','7','8','9','.','e','e-',None,'-')\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "R", "line": "120", "code": "def getdict(data):\n", "colour": "green", "author": "tom@organisms.be"}, {"error": "C", "line": "121", "code": "    d = {}\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "C", "line": "122", "code": "    fp = StringIO(data)\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "123", "code": "    stack = []\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "124", "code": "    while 1:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "125", "code": "        c = fp.read(1)\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "C", "line": "126", "code": "        if not c: break\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "C", "line": "127", "code": "        b0 = ord(c)\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "128", "code": "        if b0 <= 21:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "129", "code": "            d[b0] = stack\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "130", "code": "            stack = []\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "131", "code": "            continue\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "132", "code": "        if b0 == 30:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "133", "code": "            s = ''\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "134", "code": "            loop = True\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "135", "code": "            while loop:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "136", "code": "                b = ord(fp.read(1))\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "C", "line": "137", "code": "                for n in (b >> 4, b & 15):\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "138", "code": "                    if n == 15:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "139", "code": "                        loop = False\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "140", "code": "                    else:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "141", "code": "                        s += NIBBLES[n]\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "142", "code": "            value = float(s)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "143", "code": "        elif 32 <= b0 and b0 <= 246:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "144", "code": "            value = b0-139\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "145", "code": "        else:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "146", "code": "            b1 = ord(fp.read(1))\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "147", "code": "            if 247 <= b0 and b0 <= 250:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "148", "code": "                value = ((b0-247)<<8)+b1+108\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "149", "code": "            elif 251 <= b0 and b0 <= 254:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "150", "code": "                value = -((b0-251)<<8)-b1-108\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "151", "code": "            else:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "152", "code": "                b2 = ord(fp.read(1))\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "C", "line": "153", "code": "                if 128 <= b1: b1 -= 256\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "154", "code": "                if b0 == 28:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "155", "code": "                    value = b1<<8 | b2\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "156", "code": "                else:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "157", "code": "                    value = b1<<24 | b2<<16 | struct.unpack('>H', fp.read(2))[0]\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "158", "code": "        stack.append(value)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "159", "code": "    return d\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "160", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "R", "line": "161", "code": "class CFFFont(object):\n", "colour": "green", "author": "tom@organisms.be"}, {"error": "none", "line": "162", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "163", "code": "    STANDARD_STRINGS = (\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "164", "code": "      '.notdef', 'space', 'exclam', 'quotedbl', 'numbersign',\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "C", "line": "165", "code": "      'dollar', 'percent', 'ampersand', 'quoteright', 'parenleft',\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "C", "line": "166", "code": "      'parenright', 'asterisk', 'plus', 'comma', 'hyphen', 'period',\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "C", "line": "167", "code": "      'slash', 'zero', 'one', 'two', 'three', 'four', 'five', 'six',\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "C", "line": "168", "code": "      'seven', 'eight', 'nine', 'colon', 'semicolon', 'less', 'equal',\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "C", "line": "169", "code": "      'greater', 'question', 'at', 'A', 'B', 'C', 'D', 'E', 'F', 'G',\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "C", "line": "170", "code": "      'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T',\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "C", "line": "171", "code": "      'U', 'V', 'W', 'X', 'Y', 'Z', 'bracketleft', 'backslash',\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "C", "line": "172", "code": "      'bracketright', 'asciicircum', 'underscore', 'quoteleft', 'a',\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "C", "line": "173", "code": "      'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n',\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "C", "line": "174", "code": "      'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z',\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "C", "line": "175", "code": "      'braceleft', 'bar', 'braceright', 'asciitilde', 'exclamdown',\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "C", "line": "176", "code": "      'cent', 'sterling', 'fraction', 'yen', 'florin', 'section',\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "C", "line": "177", "code": "      'currency', 'quotesingle', 'quotedblleft', 'guillemotleft',\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "C", "line": "178", "code": "      'guilsinglleft', 'guilsinglright', 'fi', 'fl', 'endash',\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "C", "line": "179", "code": "      'dagger', 'daggerdbl', 'periodcentered', 'paragraph', 'bullet',\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "C", "line": "180", "code": "      'quotesinglbase', 'quotedblbase', 'quotedblright',\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "C", "line": "181", "code": "      'guillemotright', 'ellipsis', 'perthousand', 'questiondown',\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "C", "line": "182", "code": "      'grave', 'acute', 'circumflex', 'tilde', 'macron', 'breve',\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "C", "line": "183", "code": "      'dotaccent', 'dieresis', 'ring', 'cedilla', 'hungarumlaut',\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "C", "line": "184", "code": "      'ogonek', 'caron', 'emdash', 'AE', 'ordfeminine', 'Lslash',\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "C", "line": "185", "code": "      'Oslash', 'OE', 'ordmasculine', 'ae', 'dotlessi', 'lslash',\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "C", "line": "186", "code": "      'oslash', 'oe', 'germandbls', 'onesuperior', 'logicalnot', 'mu',\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "C", "line": "187", "code": "      'trademark', 'Eth', 'onehalf', 'plusminus', 'Thorn',\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "C", "line": "188", "code": "      'onequarter', 'divide', 'brokenbar', 'degree', 'thorn',\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "C", "line": "189", "code": "      'threequarters', 'twosuperior', 'registered', 'minus', 'eth',\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "C", "line": "190", "code": "      'multiply', 'threesuperior', 'copyright', 'Aacute',\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "C", "line": "191", "code": "      'Acircumflex', 'Adieresis', 'Agrave', 'Aring', 'Atilde',\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "C", "line": "192", "code": "      'Ccedilla', 'Eacute', 'Ecircumflex', 'Edieresis', 'Egrave',\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "C", "line": "193", "code": "      'Iacute', 'Icircumflex', 'Idieresis', 'Igrave', 'Ntilde',\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "C", "line": "194", "code": "      'Oacute', 'Ocircumflex', 'Odieresis', 'Ograve', 'Otilde',\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "C", "line": "195", "code": "      'Scaron', 'Uacute', 'Ucircumflex', 'Udieresis', 'Ugrave',\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "C", "line": "196", "code": "      'Yacute', 'Ydieresis', 'Zcaron', 'aacute', 'acircumflex',\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "C", "line": "197", "code": "      'adieresis', 'agrave', 'aring', 'atilde', 'ccedilla', 'eacute',\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "C", "line": "198", "code": "      'ecircumflex', 'edieresis', 'egrave', 'iacute', 'icircumflex',\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "C", "line": "199", "code": "      'idieresis', 'igrave', 'ntilde', 'oacute', 'ocircumflex',\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "C", "line": "200", "code": "      'odieresis', 'ograve', 'otilde', 'scaron', 'uacute',\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "C", "line": "201", "code": "      'ucircumflex', 'udieresis', 'ugrave', 'yacute', 'ydieresis',\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "C", "line": "202", "code": "      'zcaron', 'exclamsmall', 'Hungarumlautsmall', 'dollaroldstyle',\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "C", "line": "203", "code": "      'dollarsuperior', 'ampersandsmall', 'Acutesmall',\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "C", "line": "204", "code": "      'parenleftsuperior', 'parenrightsuperior', 'twodotenleader',\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "C", "line": "205", "code": "      'onedotenleader', 'zerooldstyle', 'oneoldstyle', 'twooldstyle',\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "C", "line": "206", "code": "      'threeoldstyle', 'fouroldstyle', 'fiveoldstyle', 'sixoldstyle',\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "C", "line": "207", "code": "      'sevenoldstyle', 'eightoldstyle', 'nineoldstyle',\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "C", "line": "208", "code": "      'commasuperior', 'threequartersemdash', 'periodsuperior',\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "C", "line": "209", "code": "      'questionsmall', 'asuperior', 'bsuperior', 'centsuperior',\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "C", "line": "210", "code": "      'dsuperior', 'esuperior', 'isuperior', 'lsuperior', 'msuperior',\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "C", "line": "211", "code": "      'nsuperior', 'osuperior', 'rsuperior', 'ssuperior', 'tsuperior',\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "C", "line": "212", "code": "      'ff', 'ffi', 'ffl', 'parenleftinferior', 'parenrightinferior',\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "C", "line": "213", "code": "      'Circumflexsmall', 'hyphensuperior', 'Gravesmall', 'Asmall',\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "C", "line": "214", "code": "      'Bsmall', 'Csmall', 'Dsmall', 'Esmall', 'Fsmall', 'Gsmall',\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "C", "line": "215", "code": "      'Hsmall', 'Ismall', 'Jsmall', 'Ksmall', 'Lsmall', 'Msmall',\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "C", "line": "216", "code": "      'Nsmall', 'Osmall', 'Psmall', 'Qsmall', 'Rsmall', 'Ssmall',\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "C", "line": "217", "code": "      'Tsmall', 'Usmall', 'Vsmall', 'Wsmall', 'Xsmall', 'Ysmall',\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "C", "line": "218", "code": "      'Zsmall', 'colonmonetary', 'onefitted', 'rupiah', 'Tildesmall',\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "C", "line": "219", "code": "      'exclamdownsmall', 'centoldstyle', 'Lslashsmall', 'Scaronsmall',\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "C", "line": "220", "code": "      'Zcaronsmall', 'Dieresissmall', 'Brevesmall', 'Caronsmall',\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "C", "line": "221", "code": "      'Dotaccentsmall', 'Macronsmall', 'figuredash', 'hypheninferior',\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "C", "line": "222", "code": "      'Ogoneksmall', 'Ringsmall', 'Cedillasmall', 'questiondownsmall',\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "C", "line": "223", "code": "      'oneeighth', 'threeeighths', 'fiveeighths', 'seveneighths',\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "C", "line": "224", "code": "      'onethird', 'twothirds', 'zerosuperior', 'foursuperior',\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "C", "line": "225", "code": "      'fivesuperior', 'sixsuperior', 'sevensuperior', 'eightsuperior',\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "C", "line": "226", "code": "      'ninesuperior', 'zeroinferior', 'oneinferior', 'twoinferior',\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "C", "line": "227", "code": "      'threeinferior', 'fourinferior', 'fiveinferior', 'sixinferior',\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "C", "line": "228", "code": "      'seveninferior', 'eightinferior', 'nineinferior',\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "C", "line": "229", "code": "      'centinferior', 'dollarinferior', 'periodinferior',\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "C", "line": "230", "code": "      'commainferior', 'Agravesmall', 'Aacutesmall',\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "C", "line": "231", "code": "      'Acircumflexsmall', 'Atildesmall', 'Adieresissmall',\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "C", "line": "232", "code": "      'Aringsmall', 'AEsmall', 'Ccedillasmall', 'Egravesmall',\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "C", "line": "233", "code": "      'Eacutesmall', 'Ecircumflexsmall', 'Edieresissmall',\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "C", "line": "234", "code": "      'Igravesmall', 'Iacutesmall', 'Icircumflexsmall',\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "C", "line": "235", "code": "      'Idieresissmall', 'Ethsmall', 'Ntildesmall', 'Ogravesmall',\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "C", "line": "236", "code": "      'Oacutesmall', 'Ocircumflexsmall', 'Otildesmall',\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "C", "line": "237", "code": "      'Odieresissmall', 'OEsmall', 'Oslashsmall', 'Ugravesmall',\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "C", "line": "238", "code": "      'Uacutesmall', 'Ucircumflexsmall', 'Udieresissmall',\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "C", "line": "239", "code": "      'Yacutesmall', 'Thornsmall', 'Ydieresissmall', '001.000',\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "C", "line": "240", "code": "      '001.001', '001.002', '001.003', 'Black', 'Bold', 'Book',\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "C", "line": "241", "code": "      'Light', 'Medium', 'Regular', 'Roman', 'Semibold',\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "C", "line": "242", "code": "      )\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "243", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "R", "line": "244", "code": "    class INDEX(object):\n", "colour": "green", "author": "tom@organisms.be"}, {"error": "none", "line": "245", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "246", "code": "        def __init__(self, fp):\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "247", "code": "            self.fp = fp\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "248", "code": "            self.offsets = []\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "249", "code": "            (count, offsize) = struct.unpack('>HB', self.fp.read(3))\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "W", "line": "250", "code": "            for i in xrange(count+1):\n", "colour": "purple", "author": "tom@organisms.be"}, {"error": "none", "line": "251", "code": "                self.offsets.append(nunpack(self.fp.read(offsize)))\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "252", "code": "            self.base = self.fp.tell()-1\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "253", "code": "            self.fp.seek(self.base+self.offsets[-1])\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "254", "code": "            return\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "255", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "256", "code": "        def __repr__(self):\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "257", "code": "            return '<INDEX: size=%d>' % len(self)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "258", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "259", "code": "        def __len__(self):\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "260", "code": "            return len(self.offsets)-1\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "261", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "262", "code": "        def __getitem__(self, i):\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "263", "code": "            self.fp.seek(self.base+self.offsets[i])\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "264", "code": "            return self.fp.read(self.offsets[i+1]-self.offsets[i])\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "265", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "266", "code": "        def __iter__(self):\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "267", "code": "            return iter( self[i] for i in xrange(len(self)) )\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "268", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "R", "line": "269", "code": "    def __init__(self, name, fp):\n", "colour": "green", "author": "tom@organisms.be"}, {"error": "none", "line": "270", "code": "        self.name = name\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "271", "code": "        self.fp = fp\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "272", "code": "        # Header\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "W", "line": "273", "code": "        (_major,_minor,hdrsize,offsize) = struct.unpack('BBBB', self.fp.read(4))\n", "colour": "purple", "author": "tom@organisms.be"}, {"error": "none", "line": "274", "code": "        self.fp.read(hdrsize-4)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "275", "code": "        # Name INDEX\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "276", "code": "        self.name_index = self.INDEX(self.fp)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "277", "code": "        # Top DICT INDEX\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "278", "code": "        self.dict_index = self.INDEX(self.fp)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "279", "code": "        # String INDEX\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "280", "code": "        self.string_index = self.INDEX(self.fp)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "281", "code": "        # Global Subr INDEX\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "282", "code": "        self.subr_index = self.INDEX(self.fp)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "283", "code": "        # Top DICT DATA\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "284", "code": "        self.top_dict = getdict(self.dict_index[0])\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "285", "code": "        (charset_pos,) = self.top_dict.get(15, [0])\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "286", "code": "        (encoding_pos,) = self.top_dict.get(16, [0])\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "287", "code": "        (charstring_pos,) = self.top_dict.get(17, [0])\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "288", "code": "        # CharStrings\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "289", "code": "        self.fp.seek(charstring_pos)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "290", "code": "        self.charstring = self.INDEX(self.fp)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "291", "code": "        self.nglyphs = len(self.charstring)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "292", "code": "        # Encodings\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "293", "code": "        self.code2gid = {}\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "294", "code": "        self.gid2code = {}\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "295", "code": "        self.fp.seek(encoding_pos)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "W", "line": "296", "code": "        format = self.fp.read(1)\n", "colour": "purple", "author": "tom@organisms.be"}, {"error": "none", "line": "297", "code": "        if format == '\\x00':\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "298", "code": "            # Format 0\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "299", "code": "            (n,) = struct.unpack('B', self.fp.read(1))\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "C", "line": "300", "code": "            for (code,gid) in enumerate(struct.unpack('B'*n, self.fp.read(n))):\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "301", "code": "                self.code2gid[code] = gid\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "302", "code": "                self.gid2code[gid] = code\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "303", "code": "        elif format == '\\x01':\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "304", "code": "            # Format 1\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "305", "code": "            (n,) = struct.unpack('B', self.fp.read(1))\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "306", "code": "            code = 0\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "W", "line": "307", "code": "            for i in xrange(n):\n", "colour": "purple", "author": "tom@organisms.be"}, {"error": "C", "line": "308", "code": "                (first,nleft) = struct.unpack('BB', self.fp.read(2))\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "C", "line": "309", "code": "                for gid in xrange(first,first+nleft+1):\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "310", "code": "                    self.code2gid[code] = gid\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "311", "code": "                    self.gid2code[gid] = code\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "312", "code": "                    code += 1\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "313", "code": "        else:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "314", "code": "            raise ValueError('unsupported encoding format: %r' % format)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "315", "code": "        # Charsets\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "316", "code": "        self.name2gid = {}\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "317", "code": "        self.gid2name = {}\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "318", "code": "        self.fp.seek(charset_pos)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "319", "code": "        format = self.fp.read(1)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "320", "code": "        if format == '\\x00':\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "321", "code": "            # Format 0\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "322", "code": "            n = self.nglyphs-1\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "C", "line": "323", "code": "            for (gid,sid) in enumerate(struct.unpack('>'+'H'*n, self.fp.read(2*n))):\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "324", "code": "                gid += 1\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "325", "code": "                name = self.getstr(sid)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "326", "code": "                self.name2gid[name] = gid\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "327", "code": "                self.gid2name[gid] = name\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "328", "code": "        elif format == '\\x01':\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "329", "code": "            # Format 1\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "330", "code": "            (n,) = struct.unpack('B', self.fp.read(1))\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "331", "code": "            sid = 0\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "332", "code": "            for i in xrange(n):\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "333", "code": "                (first,nleft) = struct.unpack('BB', self.fp.read(2))\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "C", "line": "334", "code": "                for gid in xrange(first,first+nleft+1):\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "335", "code": "                    name = self.getstr(sid)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "336", "code": "                    self.name2gid[name] = gid\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "337", "code": "                    self.gid2name[gid] = name\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "338", "code": "                    sid += 1\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "339", "code": "        elif format == '\\x02':\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "340", "code": "            # Format 2\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "341", "code": "            assert 0\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "342", "code": "        else:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "343", "code": "            raise ValueError('unsupported charset format: %r' % format)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "344", "code": "        #print self.code2gid\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "345", "code": "        #print self.name2gid\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "346", "code": "        #assert 0\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "347", "code": "        return\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "348", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "349", "code": "    def getstr(self, sid):\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "350", "code": "        if sid < len(self.STANDARD_STRINGS):\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "351", "code": "            return self.STANDARD_STRINGS[sid]\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "352", "code": "        return self.string_index[sid-len(self.STANDARD_STRINGS)]\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "353", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "354", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "355", "code": "##  TrueTypeFont\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "356", "code": "##\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "R", "line": "357", "code": "class TrueTypeFont(object):\n", "colour": "green", "author": "tom@organisms.be"}, {"error": "none", "line": "358", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "359", "code": "    class CMapNotFound(Exception): pass\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "360", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "361", "code": "    def __init__(self, name, fp):\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "362", "code": "        self.name = name\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "363", "code": "        self.fp = fp\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "364", "code": "        self.tables = {}\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "365", "code": "        self.fonttype = fp.read(4)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "W", "line": "366", "code": "        (ntables, _1, _2, _3) = struct.unpack('>HHHH', fp.read(8))\n", "colour": "purple", "author": "tom@organisms.be"}, {"error": "none", "line": "367", "code": "        for _ in xrange(ntables):\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "W", "line": "368", "code": "            (name, tsum, offset, length) = struct.unpack('>4sLLL', fp.read(16))\n", "colour": "purple", "author": "tom@organisms.be"}, {"error": "none", "line": "369", "code": "            self.tables[name] = (offset, length)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "370", "code": "        return\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "371", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "R", "line": "372", "code": "    def create_unicode_map(self):\n", "colour": "green", "author": "tom@organisms.be"}, {"error": "none", "line": "373", "code": "        if 'cmap' not in self.tables:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "374", "code": "            raise TrueTypeFont.CMapNotFound\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "W", "line": "375", "code": "        (base_offset, length) = self.tables['cmap']\n", "colour": "purple", "author": "tom@organisms.be"}, {"error": "C", "line": "376", "code": "        fp = self.fp\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "377", "code": "        fp.seek(base_offset)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "W", "line": "378", "code": "        (version, nsubtables) = struct.unpack('>HH', fp.read(4))\n", "colour": "purple", "author": "tom@organisms.be"}, {"error": "none", "line": "379", "code": "        subtables = []\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "380", "code": "        for i in xrange(nsubtables):\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "381", "code": "            subtables.append(struct.unpack('>HHL', fp.read(8)))\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "382", "code": "        char2gid = {}\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "383", "code": "        # Only supports subtable type 0, 2 and 4.\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "W", "line": "384", "code": "        for (_1, _2, st_offset) in subtables:\n", "colour": "purple", "author": "tom@organisms.be"}, {"error": "none", "line": "385", "code": "            fp.seek(base_offset+st_offset)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "W", "line": "386", "code": "            (fmttype, fmtlen, fmtlang) = struct.unpack('>HHH', fp.read(6))\n", "colour": "purple", "author": "tom@organisms.be"}, {"error": "none", "line": "387", "code": "            if fmttype == 0:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "388", "code": "                char2gid.update(enumerate(struct.unpack('>256B', fp.read(256))))\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "389", "code": "            elif fmttype == 2:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "390", "code": "                subheaderkeys = struct.unpack('>256H', fp.read(512))\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "391", "code": "                firstbytes = [0]*8192\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "392", "code": "                for (i,k) in enumerate(subheaderkeys):\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "393", "code": "                    firstbytes[k/8] = i\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "394", "code": "                nhdrs = max(subheaderkeys)/8 + 1\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "395", "code": "                hdrs = []\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "396", "code": "                for i in xrange(nhdrs):\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "397", "code": "                    (firstcode,entcount,delta,offset) = struct.unpack('>HHhH', fp.read(8))\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "C", "line": "398", "code": "                    hdrs.append((i,firstcode,entcount,delta,fp.tell()-2+offset))\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "C", "line": "399", "code": "                for (i,firstcode,entcount,delta,pos) in hdrs:\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "C", "line": "400", "code": "                    if not entcount: continue\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "401", "code": "                    first = firstcode + (firstbytes[i] << 8)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "402", "code": "                    fp.seek(pos)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "403", "code": "                    for c in xrange(entcount):\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "404", "code": "                        gid = struct.unpack('>H', fp.read(2))\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "405", "code": "                        if gid:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "406", "code": "                            gid += delta\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "407", "code": "                        char2gid[first+c] = gid\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "408", "code": "            elif fmttype == 4:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "W", "line": "409", "code": "                (segcount, _1, _2, _3) = struct.unpack('>HHHH', fp.read(8))\n", "colour": "purple", "author": "tom@organisms.be"}, {"error": "none", "line": "410", "code": "                segcount /= 2\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "411", "code": "                ecs = struct.unpack('>%dH' % segcount, fp.read(2*segcount))\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "412", "code": "                fp.read(2)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "413", "code": "                scs = struct.unpack('>%dH' % segcount, fp.read(2*segcount))\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "414", "code": "                idds = struct.unpack('>%dh' % segcount, fp.read(2*segcount))\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "415", "code": "                pos = fp.tell()\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "416", "code": "                idrs = struct.unpack('>%dH' % segcount, fp.read(2*segcount))\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "417", "code": "                for (ec,sc,idd,idr) in zip(ecs, scs, idds, idrs):\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "418", "code": "                    if idr:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "419", "code": "                        fp.seek(pos+idr)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "420", "code": "                        for c in xrange(sc, ec+1):\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "C", "line": "421", "code": "                            char2gid[c] = (struct.unpack('>H', fp.read(2))[0] + idd) & 0xffff\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "422", "code": "                    else:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "423", "code": "                        for c in xrange(sc, ec+1):\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "424", "code": "                            char2gid[c] = (c + idd) & 0xffff\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "425", "code": "            else:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "426", "code": "                assert 0\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "427", "code": "        # create unicode map\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "428", "code": "        unicode_map = FileUnicodeMap()\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "429", "code": "        for (char,gid) in char2gid.iteritems():\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "430", "code": "            unicode_map.add_cid2unichr(gid, char)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "431", "code": "        return unicode_map\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "432", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "433", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "434", "code": "##  Fonts\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "435", "code": "##\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "436", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "437", "code": "class PDFFontError(PDFException): pass\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "C", "line": "438", "code": "class PDFUnicodeNotDefined(PDFFontError): pass\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "439", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "440", "code": "LITERAL_STANDARD_ENCODING = LIT('StandardEncoding')\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "441", "code": "LITERAL_TYPE1C = LIT('Type1C')\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "442", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "443", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "444", "code": "# PDFFont\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "R", "line": "445", "code": "class PDFFont(object):\n", "colour": "green", "author": "tom@organisms.be"}, {"error": "none", "line": "446", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "447", "code": "    def __init__(self, descriptor, widths, default_width=None):\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "448", "code": "        self.descriptor = descriptor\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "449", "code": "        self.widths = widths\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "450", "code": "        self.fontname = resolve1(descriptor.get('FontName', 'unknown'))\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "451", "code": "        if isinstance(self.fontname, PSLiteral):\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "452", "code": "            self.fontname = literal_name(self.fontname)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "453", "code": "        self.flags = int_value(descriptor.get('Flags', 0))\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "454", "code": "        self.ascent = num_value(descriptor.get('Ascent', 0))\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "455", "code": "        self.descent = num_value(descriptor.get('Descent', 0))\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "456", "code": "        self.italic_angle = num_value(descriptor.get('ItalicAngle', 0))\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "457", "code": "        self.default_width = default_width or num_value(descriptor.get('MissingWidth', 0))\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "458", "code": "        self.leading = num_value(descriptor.get('Leading', 0))\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "459", "code": "        self.bbox = list_value(descriptor.get('FontBBox', (0,0,0,0)))\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "460", "code": "        self.hscale = self.vscale = .001\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "461", "code": "        return\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "462", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "463", "code": "    def __repr__(self):\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "464", "code": "        return '<PDFFont>'\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "465", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "R", "line": "466", "code": "    def is_vertical(self):\n", "colour": "green", "author": "tom@organisms.be"}, {"error": "none", "line": "467", "code": "        return False\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "468", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "R", "line": "469", "code": "    def is_multibyte(self):\n", "colour": "green", "author": "tom@organisms.be"}, {"error": "none", "line": "470", "code": "        return False\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "471", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "R", "line": "472", "code": "    def decode(self, bytes):\n", "colour": "green", "author": "tom@organisms.be"}, {"error": "W", "line": "473", "code": "        return map(ord, bytes)\n", "colour": "purple", "author": "tom@organisms.be"}, {"error": "none", "line": "474", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "475", "code": "    def get_ascent(self):\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "476", "code": "        return self.ascent * self.vscale\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "477", "code": "    def get_descent(self):\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "478", "code": "        return self.descent * self.vscale\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "479", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "480", "code": "    def get_width(self):\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "C", "line": "481", "code": "        w = self.bbox[2]-self.bbox[0]\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "482", "code": "        if w == 0:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "483", "code": "            w = -self.default_width\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "484", "code": "        return w * self.hscale\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "485", "code": "    def get_height(self):\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "C", "line": "486", "code": "        h = self.bbox[3]-self.bbox[1]\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "487", "code": "        if h == 0:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "488", "code": "            h = self.ascent - self.descent\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "489", "code": "        return h * self.vscale\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "490", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "491", "code": "    def char_width(self, cid):\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "492", "code": "        return self.widths.get(cid, self.default_width) * self.hscale\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "493", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "R", "line": "494", "code": "    def char_disp(self, cid):\n", "colour": "green", "author": "tom@organisms.be"}, {"error": "none", "line": "495", "code": "        return 0\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "496", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "497", "code": "    def string_width(self, s):\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "C", "line": "498", "code": "        return sum( self.char_width(cid) for cid in self.decode(s) )\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "499", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "500", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "501", "code": "# PDFSimpleFont\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "502", "code": "class PDFSimpleFont(PDFFont):\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "503", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "504", "code": "    def __init__(self, descriptor, widths, spec):\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "505", "code": "        # Font encoding is specified either by a name of\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "506", "code": "        # built-in encoding or a dictionary that describes\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "507", "code": "        # the differences.\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "508", "code": "        if 'Encoding' in spec:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "509", "code": "            encoding = resolve1(spec['Encoding'])\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "510", "code": "        else:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "511", "code": "            encoding = LITERAL_STANDARD_ENCODING\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "512", "code": "        if isinstance(encoding, dict):\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "513", "code": "            name = literal_name(encoding.get('BaseEncoding', LITERAL_STANDARD_ENCODING))\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "514", "code": "            diff = list_value(encoding.get('Differences', None))\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "515", "code": "            self.cid2unicode = EncodingDB.get_encoding(name, diff)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "516", "code": "        else:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "517", "code": "            self.cid2unicode = EncodingDB.get_encoding(literal_name(encoding))\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "518", "code": "        self.unicode_map = None\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "519", "code": "        if 'ToUnicode' in spec:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "520", "code": "            strm = stream_value(spec['ToUnicode'])\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "521", "code": "            self.unicode_map = FileUnicodeMap()\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "522", "code": "            CMapParser(self.unicode_map, StringIO(strm.get_data())).run()\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "523", "code": "        PDFFont.__init__(self, descriptor, widths)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "524", "code": "        return\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "525", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "526", "code": "    def to_unichr(self, cid):\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "527", "code": "        if self.unicode_map:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "528", "code": "            try:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "529", "code": "                return self.unicode_map.get_unichr(cid)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "530", "code": "            except KeyError:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "531", "code": "                pass\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "532", "code": "        try:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "533", "code": "            return self.cid2unicode[cid]\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "534", "code": "        except KeyError:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "535", "code": "            raise PDFUnicodeNotDefined(None, cid)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "536", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "537", "code": "# PDFType1Font\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "538", "code": "class PDFType1Font(PDFSimpleFont):\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "539", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "W", "line": "540", "code": "    def __init__(self, rsrcmgr, spec):\n", "colour": "purple", "author": "tom@organisms.be"}, {"error": "none", "line": "541", "code": "        try:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "542", "code": "            self.basefont = literal_name(spec['BaseFont'])\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "543", "code": "        except KeyError:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "544", "code": "            if STRICT:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "545", "code": "                raise PDFFontError('BaseFont is missing')\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "546", "code": "            self.basefont = 'unknown'\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "547", "code": "        try:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "548", "code": "            (descriptor, widths) = FontMetricsDB.get_metrics(self.basefont)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "549", "code": "        except KeyError:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "550", "code": "            descriptor = dict_value(spec.get('FontDescriptor', {}))\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "551", "code": "            firstchar = int_value(spec.get('FirstChar', 0))\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "W", "line": "552", "code": "            lastchar = int_value(spec.get('LastChar', 255))\n", "colour": "purple", "author": "tom@organisms.be"}, {"error": "none", "line": "553", "code": "            widths = list_value(spec.get('Widths', [0]*256))\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "554", "code": "            widths = dict( (i+firstchar,w) for (i,w) in enumerate(widths) )\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "555", "code": "        PDFSimpleFont.__init__(self, descriptor, widths, spec)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "556", "code": "        if 'Encoding' not in spec and 'FontFile' in descriptor:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "557", "code": "            # try to recover the missing encoding info from the font file.\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "558", "code": "            self.fontfile = stream_value(descriptor.get('FontFile'))\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "559", "code": "            length1 = int_value(self.fontfile['Length1'])\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "560", "code": "            data = self.fontfile.get_data()[:length1]\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "561", "code": "            parser = Type1FontHeaderParser(StringIO(data))\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "562", "code": "            self.cid2unicode = parser.get_encoding()\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "563", "code": "        return\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "564", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "565", "code": "    def __repr__(self):\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "566", "code": "        return '<PDFType1Font: basefont=%r>' % self.basefont\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "567", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "568", "code": "# PDFTrueTypeFont\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "569", "code": "class PDFTrueTypeFont(PDFType1Font):\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "570", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "571", "code": "    def __repr__(self):\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "572", "code": "        return '<PDFTrueTypeFont: basefont=%r>' % self.basefont\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "573", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "574", "code": "# PDFType3Font\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "575", "code": "class PDFType3Font(PDFSimpleFont):\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "576", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "W", "line": "577", "code": "    def __init__(self, rsrcmgr, spec):\n", "colour": "purple", "author": "tom@organisms.be"}, {"error": "none", "line": "578", "code": "        firstchar = int_value(spec.get('FirstChar', 0))\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "W", "line": "579", "code": "        lastchar = int_value(spec.get('LastChar', 0))\n", "colour": "purple", "author": "tom@organisms.be"}, {"error": "none", "line": "580", "code": "        widths = list_value(spec.get('Widths', [0]*256))\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "581", "code": "        widths = dict( (i+firstchar,w) for (i,w) in enumerate(widths))\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "582", "code": "        if 'FontDescriptor' in spec:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "583", "code": "            descriptor = dict_value(spec['FontDescriptor'])\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "584", "code": "        else:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "585", "code": "            descriptor = {'Ascent':0, 'Descent':0,\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "586", "code": "                          'FontBBox':spec['FontBBox']}\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "587", "code": "        PDFSimpleFont.__init__(self, descriptor, widths, spec)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "588", "code": "        self.matrix = tuple(list_value(spec.get('FontMatrix')))\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "W", "line": "589", "code": "        (_,self.descent,_,self.ascent) = self.bbox\n", "colour": "purple", "author": "tom@organisms.be"}, {"error": "C", "line": "590", "code": "        (self.hscale,self.vscale) = apply_matrix_norm(self.matrix, (1,1))\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "591", "code": "        return\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "592", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "593", "code": "    def __repr__(self):\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "594", "code": "        return '<PDFType3Font>'\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "595", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "596", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "597", "code": "# PDFCIDFont\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "R", "line": "598", "code": "class PDFCIDFont(PDFFont):\n", "colour": "green", "author": "tom@organisms.be"}, {"error": "none", "line": "599", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "R", "line": "600", "code": "    def __init__(self, rsrcmgr, spec):\n", "colour": "green", "author": "tom@organisms.be"}, {"error": "none", "line": "601", "code": "        try:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "602", "code": "            self.basefont = literal_name(spec['BaseFont'])\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "603", "code": "        except KeyError:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "604", "code": "            if STRICT:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "605", "code": "                raise PDFFontError('BaseFont is missing')\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "606", "code": "            self.basefont = 'unknown'\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "607", "code": "        self.cidsysteminfo = dict_value(spec.get('CIDSystemInfo', {}))\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "608", "code": "        self.cidcoding = '%s-%s' % (self.cidsysteminfo.get('Registry', 'unknown'),\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "C", "line": "609", "code": "                                    self.cidsysteminfo.get('Ordering', 'unknown'))\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "610", "code": "        try:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "611", "code": "            name = literal_name(spec['Encoding'])\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "612", "code": "        except KeyError:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "613", "code": "            if STRICT:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "614", "code": "                raise PDFFontError('Encoding is unspecified')\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "615", "code": "            name = 'unknown'\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "616", "code": "        try:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "617", "code": "            self.cmap = CMapDB.get_cmap(name)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "618", "code": "        except CMapDB.CMapNotFound as e:\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "619", "code": "            if STRICT:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "620", "code": "                raise PDFFontError(e)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "621", "code": "            self.cmap = CMap()\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "622", "code": "        try:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "623", "code": "            descriptor = dict_value(spec['FontDescriptor'])\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "624", "code": "        except KeyError:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "625", "code": "            if STRICT:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "626", "code": "                raise PDFFontError('FontDescriptor is missing')\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "627", "code": "            descriptor = {}\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "628", "code": "        ttf = None\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "629", "code": "        if 'FontFile2' in descriptor:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "630", "code": "            self.fontfile = stream_value(descriptor.get('FontFile2'))\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "631", "code": "            ttf = TrueTypeFont(self.basefont,\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "632", "code": "                               StringIO(self.fontfile.get_data()))\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "633", "code": "        self.unicode_map = None\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "634", "code": "        if 'ToUnicode' in spec:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "635", "code": "            strm = stream_value(spec['ToUnicode'])\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "636", "code": "            self.unicode_map = FileUnicodeMap()\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "637", "code": "            CMapParser(self.unicode_map, StringIO(strm.get_data())).run()\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "638", "code": "        elif self.cidcoding == 'Adobe-Identity':\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "639", "code": "            if ttf:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "640", "code": "                try:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "641", "code": "                    self.unicode_map = ttf.create_unicode_map()\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "642", "code": "                except TrueTypeFont.CMapNotFound:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "643", "code": "                    pass\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "644", "code": "        else:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "645", "code": "            try:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "646", "code": "                self.unicode_map = CMapDB.get_unicode_map(self.cidcoding, self.cmap.is_vertical())\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "C", "line": "647", "code": "            except CMapDB.CMapNotFound as e:\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "648", "code": "                pass\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "649", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "650", "code": "        self.vertical = self.cmap.is_vertical()\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "651", "code": "        if self.vertical:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "652", "code": "            # writing mode: vertical\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "653", "code": "            widths = get_widths2(list_value(spec.get('W2', [])))\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "654", "code": "            self.disps = dict( (cid,(vx,vy)) for (cid,(_,(vx,vy))) in widths.iteritems() )\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "C", "line": "655", "code": "            (vy,w) = spec.get('DW2', [880, -1000])\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "C", "line": "656", "code": "            self.default_disp = (None,vy)\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "C", "line": "657", "code": "            widths = dict( (cid,w) for (cid,(w,_)) in widths.iteritems() )\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "658", "code": "            default_width = w\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "659", "code": "        else:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "660", "code": "            # writing mode: horizontal\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "661", "code": "            self.disps = {}\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "662", "code": "            self.default_disp = 0\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "663", "code": "            widths = get_widths(list_value(spec.get('W', [])))\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "664", "code": "            default_width = spec.get('DW', 1000)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "665", "code": "        PDFFont.__init__(self, descriptor, widths, default_width=default_width)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "666", "code": "        return\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "667", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "668", "code": "    def __repr__(self):\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "669", "code": "        return '<PDFCIDFont: basefont=%r, cidcoding=%r>' % (self.basefont, self.cidcoding)\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "670", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "671", "code": "    def is_vertical(self):\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "672", "code": "        return self.vertical\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "673", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "674", "code": "    def is_multibyte(self):\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "675", "code": "        return True\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "676", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "W", "line": "677", "code": "    def decode(self, bytes):\n", "colour": "purple", "author": "tom@organisms.be"}, {"error": "none", "line": "678", "code": "        return self.cmap.decode(bytes)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "679", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "680", "code": "    def char_disp(self, cid):\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "681", "code": "        \"Returns an integer for horizontal fonts, a tuple for vertical fonts.\"\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "682", "code": "        return self.disps.get(cid, self.default_disp)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "683", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "684", "code": "    def to_unichr(self, cid):\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "685", "code": "        try:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "686", "code": "            if not self.unicode_map: raise KeyError(cid)\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "687", "code": "            return self.unicode_map.get_unichr(cid)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "688", "code": "        except KeyError:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "689", "code": "            raise PDFUnicodeNotDefined(self.cidcoding, cid)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "690", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "691", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "692", "code": "# main\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "693", "code": "def main(argv):\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "694", "code": "    for fname in argv[1:]:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "W", "line": "695", "code": "        fp = file(fname, 'rb')\n", "colour": "purple", "author": "tom@organisms.be"}, {"error": "none", "line": "696", "code": "        #font = TrueTypeFont(fname, fp)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "697", "code": "        font = CFFFont(fname, fp)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "698", "code": "        print font\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "699", "code": "        fp.close()\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "700", "code": "    return\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "701", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "702", "code": "if __name__ == '__main__': sys.exit(main(sys.argv))\n", "colour": "blue", "author": "tom@organisms.be"}]]}