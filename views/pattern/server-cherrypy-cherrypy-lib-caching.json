{"path": "/home/asumal/git/cs410/pattern/pattern/server/cherrypy/cherrypy/lib/caching.py", "lines": [[{"error": "none", "line": "1", "code": "\"\"\"\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "2", "code": "CherryPy implements a simple caching system as a pluggable Tool. This tool tries\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "3", "code": "to be an (in-process) HTTP/1.1-compliant cache. It's not quite there yet, but\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "4", "code": "it's probably good enough for most sites.\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "5", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "6", "code": "In general, GET responses are cached (along with selecting headers) and, if\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "7", "code": "another request arrives for the same resource, the caching Tool will return 304\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "8", "code": "Not Modified if possible, or serve the cached response otherwise. It also sets\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "9", "code": "request.cached to True if serving a cached representation, and sets\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "10", "code": "request.cacheable to False (so it doesn't get cached again).\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "11", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "12", "code": "If POST, PUT, or DELETE requests are made for a cached resource, they invalidate\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "13", "code": "(delete) any cached response.\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "14", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "15", "code": "Usage\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "16", "code": "=====\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "17", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "18", "code": "Configuration file example::\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "19", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "20", "code": "    [/]\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "21", "code": "    tools.caching.on = True\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "22", "code": "    tools.caching.delay = 3600\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "23", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "24", "code": "You may use a class other than the default\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "25", "code": ":class:`MemoryCache<cherrypy.lib.caching.MemoryCache>` by supplying the config\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "26", "code": "entry ``cache_class``; supply the full dotted name of the replacement class\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "27", "code": "as the config value. It must implement the basic methods ``get``, ``put``,\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "28", "code": "``delete``, and ``clear``.\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "29", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "30", "code": "You may set any attribute, including overriding methods, on the cache\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "31", "code": "instance by providing them in config. The above sets the\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "32", "code": ":attr:`delay<cherrypy.lib.caching.MemoryCache.delay>` attribute, for example.\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "33", "code": "\"\"\"\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "34", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "35", "code": "import datetime\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "36", "code": "import sys\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "37", "code": "import threading\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "38", "code": "import time\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "39", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "40", "code": "import cherrypy\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "41", "code": "from cherrypy.lib import cptools, httputil\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "W", "line": "42", "code": "from cherrypy._cpcompat import copyitems, ntob, set_daemon, sorted, Event\n", "colour": "purple", "author": "tom@organisms.be"}, {"error": "none", "line": "43", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "44", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "45", "code": "class Cache(object):\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "46", "code": "    \"\"\"Base class for Cache implementations.\"\"\"\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "47", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "R", "line": "48", "code": "    def get(self):\n", "colour": "green", "author": "tom@organisms.be"}, {"error": "none", "line": "49", "code": "        \"\"\"Return the current variant if in the cache, else None.\"\"\"\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "E", "line": "50", "code": "        raise NotImplemented\n", "colour": "yellow", "author": "tom@organisms.be"}, {"error": "none", "line": "51", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "R", "line": "52", "code": "    def put(self, obj, size):\n", "colour": "green", "author": "tom@organisms.be"}, {"error": "none", "line": "53", "code": "        \"\"\"Store the current variant in the cache.\"\"\"\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "E", "line": "54", "code": "        raise NotImplemented\n", "colour": "yellow", "author": "tom@organisms.be"}, {"error": "none", "line": "55", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "R", "line": "56", "code": "    def delete(self):\n", "colour": "green", "author": "tom@organisms.be"}, {"error": "none", "line": "57", "code": "        \"\"\"Remove ALL cached variants of the current resource.\"\"\"\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "E", "line": "58", "code": "        raise NotImplemented\n", "colour": "yellow", "author": "tom@organisms.be"}, {"error": "none", "line": "59", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "R", "line": "60", "code": "    def clear(self):\n", "colour": "green", "author": "tom@organisms.be"}, {"error": "none", "line": "61", "code": "        \"\"\"Reset the cache to its initial, empty state.\"\"\"\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "E", "line": "62", "code": "        raise NotImplemented\n", "colour": "yellow", "author": "tom@organisms.be"}, {"error": "none", "line": "63", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "64", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "65", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "66", "code": "# ------------------------------- Memory Cache ------------------------------- #\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "67", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "68", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "69", "code": "class AntiStampedeCache(dict):\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "70", "code": "    \"\"\"A storage system for cached items which reduces stampede collisions.\"\"\"\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "71", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "72", "code": "    def wait(self, key, timeout=5, debug=False):\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "73", "code": "        \"\"\"Return the cached value for the given key, or None.\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "74", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "75", "code": "        If timeout is not None, and the value is already\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "76", "code": "        being calculated by another thread, wait until the given timeout has\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "77", "code": "        elapsed. If the value is available before the timeout expires, it is\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "78", "code": "        returned. If not, None is returned, and a sentinel placed in the cache\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "79", "code": "        to signal other threads to wait.\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "80", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "81", "code": "        If timeout is None, no waiting is performed nor sentinels used.\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "82", "code": "        \"\"\"\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "83", "code": "        value = self.get(key)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "84", "code": "        if isinstance(value, Event):\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "85", "code": "            if timeout is None:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "86", "code": "                # Ignore the other thread and recalc it ourselves.\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "87", "code": "                if debug:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "88", "code": "                    cherrypy.log('No timeout', 'TOOLS.CACHING')\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "89", "code": "                return None\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "90", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "91", "code": "            # Wait until it's done or times out.\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "92", "code": "            if debug:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "93", "code": "                cherrypy.log('Waiting up to %s seconds' % timeout, 'TOOLS.CACHING')\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "94", "code": "            value.wait(timeout)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "95", "code": "            if value.result is not None:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "96", "code": "                # The other thread finished its calculation. Use it.\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "97", "code": "                if debug:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "98", "code": "                    cherrypy.log('Result!', 'TOOLS.CACHING')\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "99", "code": "                return value.result\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "100", "code": "            # Timed out. Stick an Event in the slot so other threads wait\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "101", "code": "            # on this one to finish calculating the value.\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "102", "code": "            if debug:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "103", "code": "                cherrypy.log('Timed out', 'TOOLS.CACHING')\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "104", "code": "            e = threading.Event()\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "105", "code": "            e.result = None\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "106", "code": "            dict.__setitem__(self, key, e)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "107", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "108", "code": "            return None\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "109", "code": "        elif value is None:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "110", "code": "            # Stick an Event in the slot so other threads wait\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "111", "code": "            # on this one to finish calculating the value.\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "112", "code": "            if debug:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "113", "code": "                cherrypy.log('Timed out', 'TOOLS.CACHING')\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "114", "code": "            e = threading.Event()\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "115", "code": "            e.result = None\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "116", "code": "            dict.__setitem__(self, key, e)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "117", "code": "        return value\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "118", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "119", "code": "    def __setitem__(self, key, value):\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "120", "code": "        \"\"\"Set the cached value for the given key.\"\"\"\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "121", "code": "        existing = self.get(key)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "122", "code": "        dict.__setitem__(self, key, value)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "123", "code": "        if isinstance(existing, Event):\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "124", "code": "            # Set Event.result so other threads waiting on it have\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "125", "code": "            # immediate access without needing to poll the cache again.\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "126", "code": "            existing.result = value\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "127", "code": "            existing.set()\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "128", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "129", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "R", "line": "130", "code": "class MemoryCache(Cache):\n", "colour": "green", "author": "tom@organisms.be"}, {"error": "none", "line": "131", "code": "    \"\"\"An in-memory cache for varying response content.\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "132", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "133", "code": "    Each key in self.store is a URI, and each value is an AntiStampedeCache.\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "134", "code": "    The response for any given URI may vary based on the values of\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "135", "code": "    \"selecting request headers\"; that is, those named in the Vary\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "136", "code": "    response header. We assume the list of header names to be constant\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "137", "code": "    for each URI throughout the lifetime of the application, and store\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "138", "code": "    that list in ``self.store[uri].selecting_headers``.\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "139", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "140", "code": "    The items contained in ``self.store[uri]`` have keys which are tuples of\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "141", "code": "    request header values (in the same order as the names in its\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "142", "code": "    selecting_headers), and values which are the actual responses.\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "143", "code": "    \"\"\"\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "144", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "145", "code": "    maxobjects = 1000\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "146", "code": "    \"\"\"The maximum number of cached objects; defaults to 1000.\"\"\"\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "147", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "148", "code": "    maxobj_size = 100000\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "149", "code": "    \"\"\"The maximum size of each cached object in bytes; defaults to 100 KB.\"\"\"\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "150", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "151", "code": "    maxsize = 10000000\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "152", "code": "    \"\"\"The maximum size of the entire cache in bytes; defaults to 10 MB.\"\"\"\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "153", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "154", "code": "    delay = 600\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "155", "code": "    \"\"\"Seconds until the cached content expires; defaults to 600 (10 minutes).\"\"\"\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "156", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "157", "code": "    antistampede_timeout = 5\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "158", "code": "    \"\"\"Seconds to wait for other threads to release a cache lock.\"\"\"\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "159", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "160", "code": "    expire_freq = 0.1\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "161", "code": "    \"\"\"Seconds to sleep between cache expiration sweeps.\"\"\"\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "162", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "163", "code": "    debug = False\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "164", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "165", "code": "    def __init__(self):\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "166", "code": "        self.clear()\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "167", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "168", "code": "        # Run self.expire_cache in a separate daemon thread.\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "169", "code": "        t = threading.Thread(target=self.expire_cache, name='expire_cache')\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "170", "code": "        self.expiration_thread = t\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "171", "code": "        set_daemon(t, True)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "172", "code": "        t.start()\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "173", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "174", "code": "    def clear(self):\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "175", "code": "        \"\"\"Reset the cache to its initial, empty state.\"\"\"\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "W", "line": "176", "code": "        self.store = {}\n", "colour": "purple", "author": "tom@organisms.be"}, {"error": "W", "line": "177", "code": "        self.expirations = {}\n", "colour": "purple", "author": "tom@organisms.be"}, {"error": "W", "line": "178", "code": "        self.tot_puts = 0\n", "colour": "purple", "author": "tom@organisms.be"}, {"error": "W", "line": "179", "code": "        self.tot_gets = 0\n", "colour": "purple", "author": "tom@organisms.be"}, {"error": "W", "line": "180", "code": "        self.tot_hist = 0\n", "colour": "purple", "author": "tom@organisms.be"}, {"error": "W", "line": "181", "code": "        self.tot_expires = 0\n", "colour": "purple", "author": "tom@organisms.be"}, {"error": "W", "line": "182", "code": "        self.tot_non_modified = 0\n", "colour": "purple", "author": "tom@organisms.be"}, {"error": "W", "line": "183", "code": "        self.cursize = 0\n", "colour": "purple", "author": "tom@organisms.be"}, {"error": "none", "line": "184", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "185", "code": "    def expire_cache(self):\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "186", "code": "        \"\"\"Continuously examine cached objects, expiring stale ones.\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "187", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "188", "code": "        This function is designed to be run in its own daemon thread,\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "189", "code": "        referenced at ``self.expiration_thread``.\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "190", "code": "        \"\"\"\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "191", "code": "        # It's possible that \"time\" will be set to None\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "192", "code": "        # arbitrarily, so we check \"while time\" to avoid exceptions.\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "193", "code": "        # See tickets #99 and #180 for more information.\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "194", "code": "        while time:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "195", "code": "            now = time.time()\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "196", "code": "            # Must make a copy of expirations so it doesn't change size\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "197", "code": "            # during iteration\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "198", "code": "            for expiration_time, objects in copyitems(self.expirations):\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "199", "code": "                if expiration_time <= now:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "200", "code": "                    for obj_size, uri, sel_header_values in objects:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "201", "code": "                        try:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "202", "code": "                            del self.store[uri][tuple(sel_header_values)]\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "203", "code": "                            self.tot_expires += 1\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "204", "code": "                            self.cursize -= obj_size\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "205", "code": "                        except KeyError:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "206", "code": "                            # the key may have been deleted elsewhere\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "207", "code": "                            pass\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "208", "code": "                    del self.expirations[expiration_time]\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "209", "code": "            time.sleep(self.expire_freq)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "210", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "211", "code": "    def get(self):\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "212", "code": "        \"\"\"Return the current variant if in the cache, else None.\"\"\"\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "213", "code": "        request = cherrypy.serving.request\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "214", "code": "        self.tot_gets += 1\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "215", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "216", "code": "        uri = cherrypy.url(qs=request.query_string)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "217", "code": "        uricache = self.store.get(uri)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "218", "code": "        if uricache is None:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "219", "code": "            return None\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "220", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "221", "code": "        header_values = [request.headers.get(h, '')\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "222", "code": "                         for h in uricache.selecting_headers]\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "223", "code": "        variant = uricache.wait(key=tuple(sorted(header_values)),\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "224", "code": "                                timeout=self.antistampede_timeout,\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "225", "code": "                                debug=self.debug)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "226", "code": "        if variant is not None:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "227", "code": "            self.tot_hist += 1\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "228", "code": "        return variant\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "229", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "230", "code": "    def put(self, variant, size):\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "231", "code": "        \"\"\"Store the current variant in the cache.\"\"\"\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "232", "code": "        request = cherrypy.serving.request\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "233", "code": "        response = cherrypy.serving.response\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "234", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "235", "code": "        uri = cherrypy.url(qs=request.query_string)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "236", "code": "        uricache = self.store.get(uri)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "237", "code": "        if uricache is None:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "238", "code": "            uricache = AntiStampedeCache()\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "W", "line": "239", "code": "            uricache.selecting_headers = [\n", "colour": "purple", "author": "tom@organisms.be"}, {"error": "none", "line": "240", "code": "                e.value for e in response.headers.elements('Vary')]\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "241", "code": "            self.store[uri] = uricache\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "242", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "243", "code": "        if len(self.store) < self.maxobjects:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "244", "code": "            total_size = self.cursize + size\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "245", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "246", "code": "            # checks if there's space for the object\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "247", "code": "            if (size < self.maxobj_size and total_size < self.maxsize):\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "248", "code": "                # add to the expirations list\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "249", "code": "                expiration_time = response.time + self.delay\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "250", "code": "                bucket = self.expirations.setdefault(expiration_time, [])\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "251", "code": "                bucket.append((size, uri, uricache.selecting_headers))\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "252", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "253", "code": "                # add to the cache\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "254", "code": "                header_values = [request.headers.get(h, '')\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "255", "code": "                                 for h in uricache.selecting_headers]\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "256", "code": "                uricache[tuple(sorted(header_values))] = variant\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "257", "code": "                self.tot_puts += 1\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "W", "line": "258", "code": "                self.cursize = total_size\n", "colour": "purple", "author": "tom@organisms.be"}, {"error": "none", "line": "259", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "260", "code": "    def delete(self):\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "261", "code": "        \"\"\"Remove ALL cached variants of the current resource.\"\"\"\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "262", "code": "        uri = cherrypy.url(qs=cherrypy.serving.request.query_string)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "263", "code": "        self.store.pop(uri, None)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "264", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "265", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "R", "line": "266", "code": "def get(invalid_methods=(\"POST\", \"PUT\", \"DELETE\"), debug=False, **kwargs):\n", "colour": "green", "author": "tom@organisms.be"}, {"error": "none", "line": "267", "code": "    \"\"\"Try to obtain cached output. If fresh enough, raise HTTPError(304).\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "268", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "269", "code": "    If POST, PUT, or DELETE:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "270", "code": "        * invalidates (deletes) any cached response for this resource\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "271", "code": "        * sets request.cached = False\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "272", "code": "        * sets request.cacheable = False\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "273", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "274", "code": "    else if a cached copy exists:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "275", "code": "        * sets request.cached = True\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "276", "code": "        * sets request.cacheable = False\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "277", "code": "        * sets response.headers to the cached values\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "278", "code": "        * checks the cached Last-Modified response header against the\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "279", "code": "          current If-(Un)Modified-Since request headers; raises 304\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "280", "code": "          if necessary.\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "281", "code": "        * sets response.status and response.body to the cached values\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "282", "code": "        * returns True\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "283", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "284", "code": "    otherwise:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "285", "code": "        * sets request.cached = False\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "286", "code": "        * sets request.cacheable = True\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "287", "code": "        * returns False\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "288", "code": "    \"\"\"\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "289", "code": "    request = cherrypy.serving.request\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "290", "code": "    response = cherrypy.serving.response\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "291", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "292", "code": "    if not hasattr(cherrypy, \"_cache\"):\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "293", "code": "        # Make a process-wide Cache object.\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "W", "line": "294", "code": "        cherrypy._cache = kwargs.pop(\"cache_class\", MemoryCache)()\n", "colour": "purple", "author": "tom@organisms.be"}, {"error": "none", "line": "295", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "296", "code": "        # Take all remaining kwargs and set them on the Cache object.\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "297", "code": "        for k, v in kwargs.items():\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "W", "line": "298", "code": "            setattr(cherrypy._cache, k, v)\n", "colour": "purple", "author": "tom@organisms.be"}, {"error": "W", "line": "299", "code": "        cherrypy._cache.debug = debug\n", "colour": "purple", "author": "tom@organisms.be"}, {"error": "none", "line": "300", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "301", "code": "    # POST, PUT, DELETE should invalidate (delete) the cached copy.\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "302", "code": "    # See http://www.w3.org/Protocols/rfc2616/rfc2616-sec13.html#sec13.10.\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "303", "code": "    if request.method in invalid_methods:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "304", "code": "        if debug:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "305", "code": "            cherrypy.log('request.method %r in invalid_methods %r' %\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "306", "code": "                         (request.method, invalid_methods), 'TOOLS.CACHING')\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "W", "line": "307", "code": "        cherrypy._cache.delete()\n", "colour": "purple", "author": "tom@organisms.be"}, {"error": "none", "line": "308", "code": "        request.cached = False\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "309", "code": "        request.cacheable = False\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "310", "code": "        return False\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "311", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "312", "code": "    if 'no-cache' in [e.value for e in request.headers.elements('Pragma')]:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "313", "code": "        request.cached = False\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "314", "code": "        request.cacheable = True\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "315", "code": "        return False\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "316", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "W", "line": "317", "code": "    cache_data = cherrypy._cache.get()\n", "colour": "purple", "author": "tom@organisms.be"}, {"error": "none", "line": "318", "code": "    request.cached = bool(cache_data)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "319", "code": "    request.cacheable = not request.cached\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "320", "code": "    if request.cached:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "321", "code": "        # Serve the cached copy.\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "W", "line": "322", "code": "        max_age = cherrypy._cache.delay\n", "colour": "purple", "author": "tom@organisms.be"}, {"error": "C", "line": "323", "code": "        for v in [e.value for e in request.headers.elements('Cache-Control')]:\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "324", "code": "            atoms = v.split('=', 1)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "325", "code": "            directive = atoms.pop(0)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "326", "code": "            if directive == 'max-age':\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "327", "code": "                if len(atoms) != 1 or not atoms[0].isdigit():\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "328", "code": "                    raise cherrypy.HTTPError(400, \"Invalid Cache-Control header\")\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "329", "code": "                max_age = int(atoms[0])\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "330", "code": "                break\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "331", "code": "            elif directive == 'no-cache':\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "332", "code": "                if debug:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "333", "code": "                    cherrypy.log('Ignoring cache due to Cache-Control: no-cache',\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "334", "code": "                                 'TOOLS.CACHING')\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "335", "code": "                request.cached = False\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "336", "code": "                request.cacheable = True\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "337", "code": "                return False\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "338", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "339", "code": "        if debug:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "340", "code": "            cherrypy.log('Reading response from cache', 'TOOLS.CACHING')\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "341", "code": "        s, h, b, create_time = cache_data\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "342", "code": "        age = int(response.time - create_time)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "343", "code": "        if (age > max_age):\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "344", "code": "            if debug:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "345", "code": "                cherrypy.log('Ignoring cache due to age > %d' % max_age,\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "346", "code": "                             'TOOLS.CACHING')\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "347", "code": "            request.cached = False\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "348", "code": "            request.cacheable = True\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "349", "code": "            return False\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "350", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "351", "code": "        # Copy the response headers. See http://www.cherrypy.org/ticket/721.\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "352", "code": "        response.headers = rh = httputil.HeaderMap()\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "353", "code": "        for k in h:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "354", "code": "            dict.__setitem__(rh, k, dict.__getitem__(h, k))\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "355", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "356", "code": "        # Add the required Age header\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "357", "code": "        response.headers[\"Age\"] = str(age)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "358", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "359", "code": "        try:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "360", "code": "            # Note that validate_since depends on a Last-Modified header;\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "361", "code": "            # this was put into the cached copy, and should have been\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "362", "code": "            # resurrected just above (response.headers = cache_data[1]).\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "363", "code": "            cptools.validate_since()\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "364", "code": "        except cherrypy.HTTPRedirect:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "365", "code": "            x = sys.exc_info()[1]\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "366", "code": "            if x.status == 304:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "W", "line": "367", "code": "                cherrypy._cache.tot_non_modified += 1\n", "colour": "purple", "author": "tom@organisms.be"}, {"error": "none", "line": "368", "code": "            raise\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "369", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "370", "code": "        # serve it & get out from the request\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "371", "code": "        response.status = s\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "372", "code": "        response.body = b\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "373", "code": "    else:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "374", "code": "        if debug:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "375", "code": "            cherrypy.log('request is not cached', 'TOOLS.CACHING')\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "376", "code": "    return request.cached\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "377", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "378", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "379", "code": "def tee_output():\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "380", "code": "    \"\"\"Tee response output to cache storage. Internal.\"\"\"\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "381", "code": "    # Used by CachingTool by attaching to request.hooks\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "382", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "383", "code": "    request = cherrypy.serving.request\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "384", "code": "    if 'no-store' in request.headers.values('Cache-Control'):\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "385", "code": "        return\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "386", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "387", "code": "    def tee(body):\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "388", "code": "        \"\"\"Tee response.body into a list.\"\"\"\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "389", "code": "        if ('no-cache' in response.headers.values('Pragma') or\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "390", "code": "            'no-store' in response.headers.values('Cache-Control')):\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "391", "code": "            for chunk in body:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "392", "code": "                yield chunk\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "393", "code": "            return\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "394", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "395", "code": "        output = []\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "396", "code": "        for chunk in body:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "397", "code": "            output.append(chunk)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "398", "code": "            yield chunk\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "399", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "400", "code": "        # save the cache data\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "401", "code": "        body = ntob('').join(output)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "W", "line": "402", "code": "        cherrypy._cache.put((response.status, response.headers or {},\n", "colour": "purple", "author": "tom@organisms.be"}, {"error": "none", "line": "403", "code": "                             body, response.time), len(body))\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "404", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "405", "code": "    response = cherrypy.serving.response\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "406", "code": "    response.body = tee(response.body)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "407", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "408", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "R", "line": "409", "code": "def expires(secs=0, force=False, debug=False):\n", "colour": "green", "author": "tom@organisms.be"}, {"error": "none", "line": "410", "code": "    \"\"\"Tool for influencing cache mechanisms using the 'Expires' header.\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "411", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "412", "code": "    secs\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "413", "code": "        Must be either an int or a datetime.timedelta, and indicates the\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "414", "code": "        number of seconds between response.time and when the response should\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "415", "code": "        expire. The 'Expires' header will be set to response.time + secs.\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "416", "code": "        If secs is zero, the 'Expires' header is set one year in the past, and\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "417", "code": "        the following \"cache prevention\" headers are also set:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "418", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "419", "code": "            * Pragma: no-cache\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "420", "code": "            * Cache-Control': no-cache, must-revalidate\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "421", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "422", "code": "    force\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "423", "code": "        If False, the following headers are checked:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "424", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "425", "code": "            * Etag\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "426", "code": "            * Last-Modified\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "427", "code": "            * Age\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "428", "code": "            * Expires\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "429", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "430", "code": "        If any are already present, none of the above response headers are set.\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "431", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "432", "code": "    \"\"\"\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "433", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "434", "code": "    response = cherrypy.serving.response\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "435", "code": "    headers = response.headers\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "436", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "437", "code": "    cacheable = False\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "438", "code": "    if not force:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "439", "code": "        # some header names that indicate that the response can be cached\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "440", "code": "        for indicator in ('Etag', 'Last-Modified', 'Age', 'Expires'):\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "441", "code": "            if indicator in headers:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "442", "code": "                cacheable = True\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "443", "code": "                break\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "444", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "445", "code": "    if not cacheable and not force:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "446", "code": "        if debug:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "447", "code": "            cherrypy.log('request is not cacheable', 'TOOLS.EXPIRES')\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "448", "code": "    else:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "449", "code": "        if debug:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "450", "code": "            cherrypy.log('request is cacheable', 'TOOLS.EXPIRES')\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "451", "code": "        if isinstance(secs, datetime.timedelta):\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "E", "line": "452", "code": "            secs = (86400 * secs.days) + secs.seconds\n", "colour": "yellow", "author": "tom@organisms.be"}, {"error": "none", "line": "453", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "454", "code": "        if secs == 0:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "455", "code": "            if force or (\"Pragma\" not in headers):\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "456", "code": "                headers[\"Pragma\"] = \"no-cache\"\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "457", "code": "            if cherrypy.serving.request.protocol >= (1, 1):\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "458", "code": "                if force or \"Cache-Control\" not in headers:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "459", "code": "                    headers[\"Cache-Control\"] = \"no-cache, must-revalidate\"\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "460", "code": "            # Set an explicit Expires date in the past.\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "461", "code": "            expiry = httputil.HTTPDate(1169942400.0)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "462", "code": "        else:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "463", "code": "            expiry = httputil.HTTPDate(response.time + secs)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "464", "code": "        if force or \"Expires\" not in headers:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "465", "code": "            headers[\"Expires\"] = expiry\n", "colour": "black", "author": "tom@organisms.be"}]]}