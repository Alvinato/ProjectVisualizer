{"path": "/home/asumal/git/cs410/pattern/pattern/server/cherrypy/cherrypy/lib/caching.py", "lines": [{"index": "1", "colour": "orange", "code": "\"\"\"\n", "error": "none", "author": "tom@organisms.be"}, {"index": "2", "colour": "orange", "code": "CherryPy implements a simple caching system as a pluggable Tool. This tool tries\n", "error": "none", "author": "tom@organisms.be"}, {"index": "3", "colour": "orange", "code": "to be an (in-process) HTTP/1.1-compliant cache. It's not quite there yet, but\n", "error": "none", "author": "tom@organisms.be"}, {"index": "4", "colour": "orange", "code": "it's probably good enough for most sites.\n", "error": "none", "author": "tom@organisms.be"}, {"index": "5", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "6", "colour": "orange", "code": "In general, GET responses are cached (along with selecting headers) and, if\n", "error": "none", "author": "tom@organisms.be"}, {"index": "7", "colour": "orange", "code": "another request arrives for the same resource, the caching Tool will return 304\n", "error": "none", "author": "tom@organisms.be"}, {"index": "8", "colour": "orange", "code": "Not Modified if possible, or serve the cached response otherwise. It also sets\n", "error": "none", "author": "tom@organisms.be"}, {"index": "9", "colour": "orange", "code": "request.cached to True if serving a cached representation, and sets\n", "error": "none", "author": "tom@organisms.be"}, {"index": "10", "colour": "orange", "code": "request.cacheable to False (so it doesn't get cached again).\n", "error": "none", "author": "tom@organisms.be"}, {"index": "11", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "12", "colour": "orange", "code": "If POST, PUT, or DELETE requests are made for a cached resource, they invalidate\n", "error": "none", "author": "tom@organisms.be"}, {"index": "13", "colour": "orange", "code": "(delete) any cached response.\n", "error": "none", "author": "tom@organisms.be"}, {"index": "14", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "15", "colour": "orange", "code": "Usage\n", "error": "none", "author": "tom@organisms.be"}, {"index": "16", "colour": "orange", "code": "=====\n", "error": "none", "author": "tom@organisms.be"}, {"index": "17", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "18", "colour": "orange", "code": "Configuration file example::\n", "error": "none", "author": "tom@organisms.be"}, {"index": "19", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "20", "colour": "orange", "code": "    [/]\n", "error": "none", "author": "tom@organisms.be"}, {"index": "21", "colour": "orange", "code": "    tools.caching.on = True\n", "error": "none", "author": "tom@organisms.be"}, {"index": "22", "colour": "orange", "code": "    tools.caching.delay = 3600\n", "error": "none", "author": "tom@organisms.be"}, {"index": "23", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "24", "colour": "orange", "code": "You may use a class other than the default\n", "error": "none", "author": "tom@organisms.be"}, {"index": "25", "colour": "orange", "code": ":class:`MemoryCache<cherrypy.lib.caching.MemoryCache>` by supplying the config\n", "error": "none", "author": "tom@organisms.be"}, {"index": "26", "colour": "orange", "code": "entry ``cache_class``; supply the full dotted name of the replacement class\n", "error": "none", "author": "tom@organisms.be"}, {"index": "27", "colour": "orange", "code": "as the config value. It must implement the basic methods ``get``, ``put``,\n", "error": "none", "author": "tom@organisms.be"}, {"index": "28", "colour": "orange", "code": "``delete``, and ``clear``.\n", "error": "none", "author": "tom@organisms.be"}, {"index": "29", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "30", "colour": "orange", "code": "You may set any attribute, including overriding methods, on the cache\n", "error": "none", "author": "tom@organisms.be"}, {"index": "31", "colour": "orange", "code": "instance by providing them in config. The above sets the\n", "error": "none", "author": "tom@organisms.be"}, {"index": "32", "colour": "orange", "code": ":attr:`delay<cherrypy.lib.caching.MemoryCache.delay>` attribute, for example.\n", "error": "none", "author": "tom@organisms.be"}, {"index": "33", "colour": "orange", "code": "\"\"\"\n", "error": "none", "author": "tom@organisms.be"}, {"index": "34", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "35", "colour": "orange", "code": "import datetime\n", "error": "none", "author": "tom@organisms.be"}, {"index": "36", "colour": "orange", "code": "import sys\n", "error": "none", "author": "tom@organisms.be"}, {"index": "37", "colour": "orange", "code": "import threading\n", "error": "none", "author": "tom@organisms.be"}, {"index": "38", "colour": "orange", "code": "import time\n", "error": "none", "author": "tom@organisms.be"}, {"index": "39", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "40", "colour": "orange", "code": "import cherrypy\n", "error": "none", "author": "tom@organisms.be"}, {"index": "41", "colour": "orange", "code": "from cherrypy.lib import cptools, httputil\n", "error": "none", "author": "tom@organisms.be"}, {"index": "42", "colour": "green", "code": "from cherrypy._cpcompat import copyitems, ntob, set_daemon, sorted, Event\n", "error": "W", "author": "tom@organisms.be"}, {"index": "43", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "44", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "45", "colour": "orange", "code": "class Cache(object):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "46", "colour": "orange", "code": "    \"\"\"Base class for Cache implementations.\"\"\"\n", "error": "none", "author": "tom@organisms.be"}, {"index": "47", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "48", "colour": "blue", "code": "    def get(self):\n", "error": "R", "author": "tom@organisms.be"}, {"index": "49", "colour": "orange", "code": "        \"\"\"Return the current variant if in the cache, else None.\"\"\"\n", "error": "none", "author": "tom@organisms.be"}, {"index": "50", "colour": "red", "code": "        raise NotImplemented\n", "error": "E", "author": "tom@organisms.be"}, {"index": "51", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "52", "colour": "blue", "code": "    def put(self, obj, size):\n", "error": "R", "author": "tom@organisms.be"}, {"index": "53", "colour": "orange", "code": "        \"\"\"Store the current variant in the cache.\"\"\"\n", "error": "none", "author": "tom@organisms.be"}, {"index": "54", "colour": "red", "code": "        raise NotImplemented\n", "error": "E", "author": "tom@organisms.be"}, {"index": "55", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "56", "colour": "blue", "code": "    def delete(self):\n", "error": "R", "author": "tom@organisms.be"}, {"index": "57", "colour": "orange", "code": "        \"\"\"Remove ALL cached variants of the current resource.\"\"\"\n", "error": "none", "author": "tom@organisms.be"}, {"index": "58", "colour": "red", "code": "        raise NotImplemented\n", "error": "E", "author": "tom@organisms.be"}, {"index": "59", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "60", "colour": "blue", "code": "    def clear(self):\n", "error": "R", "author": "tom@organisms.be"}, {"index": "61", "colour": "orange", "code": "        \"\"\"Reset the cache to its initial, empty state.\"\"\"\n", "error": "none", "author": "tom@organisms.be"}, {"index": "62", "colour": "red", "code": "        raise NotImplemented\n", "error": "E", "author": "tom@organisms.be"}, {"index": "63", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "64", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "65", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "66", "colour": "orange", "code": "# ------------------------------- Memory Cache ------------------------------- #\n", "error": "none", "author": "tom@organisms.be"}, {"index": "67", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "68", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "69", "colour": "orange", "code": "class AntiStampedeCache(dict):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "70", "colour": "orange", "code": "    \"\"\"A storage system for cached items which reduces stampede collisions.\"\"\"\n", "error": "none", "author": "tom@organisms.be"}, {"index": "71", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "72", "colour": "orange", "code": "    def wait(self, key, timeout=5, debug=False):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "73", "colour": "orange", "code": "        \"\"\"Return the cached value for the given key, or None.\n", "error": "none", "author": "tom@organisms.be"}, {"index": "74", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "75", "colour": "orange", "code": "        If timeout is not None, and the value is already\n", "error": "none", "author": "tom@organisms.be"}, {"index": "76", "colour": "orange", "code": "        being calculated by another thread, wait until the given timeout has\n", "error": "none", "author": "tom@organisms.be"}, {"index": "77", "colour": "orange", "code": "        elapsed. If the value is available before the timeout expires, it is\n", "error": "none", "author": "tom@organisms.be"}, {"index": "78", "colour": "orange", "code": "        returned. If not, None is returned, and a sentinel placed in the cache\n", "error": "none", "author": "tom@organisms.be"}, {"index": "79", "colour": "orange", "code": "        to signal other threads to wait.\n", "error": "none", "author": "tom@organisms.be"}, {"index": "80", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "81", "colour": "orange", "code": "        If timeout is None, no waiting is performed nor sentinels used.\n", "error": "none", "author": "tom@organisms.be"}, {"index": "82", "colour": "orange", "code": "        \"\"\"\n", "error": "none", "author": "tom@organisms.be"}, {"index": "83", "colour": "orange", "code": "        value = self.get(key)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "84", "colour": "orange", "code": "        if isinstance(value, Event):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "85", "colour": "orange", "code": "            if timeout is None:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "86", "colour": "orange", "code": "                # Ignore the other thread and recalc it ourselves.\n", "error": "none", "author": "tom@organisms.be"}, {"index": "87", "colour": "orange", "code": "                if debug:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "88", "colour": "orange", "code": "                    cherrypy.log('No timeout', 'TOOLS.CACHING')\n", "error": "none", "author": "tom@organisms.be"}, {"index": "89", "colour": "orange", "code": "                return None\n", "error": "none", "author": "tom@organisms.be"}, {"index": "90", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "91", "colour": "orange", "code": "            # Wait until it's done or times out.\n", "error": "none", "author": "tom@organisms.be"}, {"index": "92", "colour": "orange", "code": "            if debug:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "93", "colour": "orange", "code": "                cherrypy.log('Waiting up to %s seconds' % timeout, 'TOOLS.CACHING')\n", "error": "none", "author": "tom@organisms.be"}, {"index": "94", "colour": "orange", "code": "            value.wait(timeout)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "95", "colour": "orange", "code": "            if value.result is not None:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "96", "colour": "orange", "code": "                # The other thread finished its calculation. Use it.\n", "error": "none", "author": "tom@organisms.be"}, {"index": "97", "colour": "orange", "code": "                if debug:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "98", "colour": "orange", "code": "                    cherrypy.log('Result!', 'TOOLS.CACHING')\n", "error": "none", "author": "tom@organisms.be"}, {"index": "99", "colour": "orange", "code": "                return value.result\n", "error": "none", "author": "tom@organisms.be"}, {"index": "100", "colour": "orange", "code": "            # Timed out. Stick an Event in the slot so other threads wait\n", "error": "none", "author": "tom@organisms.be"}, {"index": "101", "colour": "orange", "code": "            # on this one to finish calculating the value.\n", "error": "none", "author": "tom@organisms.be"}, {"index": "102", "colour": "orange", "code": "            if debug:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "103", "colour": "orange", "code": "                cherrypy.log('Timed out', 'TOOLS.CACHING')\n", "error": "none", "author": "tom@organisms.be"}, {"index": "104", "colour": "orange", "code": "            e = threading.Event()\n", "error": "none", "author": "tom@organisms.be"}, {"index": "105", "colour": "orange", "code": "            e.result = None\n", "error": "none", "author": "tom@organisms.be"}, {"index": "106", "colour": "orange", "code": "            dict.__setitem__(self, key, e)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "107", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "108", "colour": "orange", "code": "            return None\n", "error": "none", "author": "tom@organisms.be"}, {"index": "109", "colour": "orange", "code": "        elif value is None:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "110", "colour": "orange", "code": "            # Stick an Event in the slot so other threads wait\n", "error": "none", "author": "tom@organisms.be"}, {"index": "111", "colour": "orange", "code": "            # on this one to finish calculating the value.\n", "error": "none", "author": "tom@organisms.be"}, {"index": "112", "colour": "orange", "code": "            if debug:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "113", "colour": "orange", "code": "                cherrypy.log('Timed out', 'TOOLS.CACHING')\n", "error": "none", "author": "tom@organisms.be"}, {"index": "114", "colour": "orange", "code": "            e = threading.Event()\n", "error": "none", "author": "tom@organisms.be"}, {"index": "115", "colour": "orange", "code": "            e.result = None\n", "error": "none", "author": "tom@organisms.be"}, {"index": "116", "colour": "orange", "code": "            dict.__setitem__(self, key, e)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "117", "colour": "orange", "code": "        return value\n", "error": "none", "author": "tom@organisms.be"}, {"index": "118", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "119", "colour": "orange", "code": "    def __setitem__(self, key, value):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "120", "colour": "orange", "code": "        \"\"\"Set the cached value for the given key.\"\"\"\n", "error": "none", "author": "tom@organisms.be"}, {"index": "121", "colour": "orange", "code": "        existing = self.get(key)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "122", "colour": "orange", "code": "        dict.__setitem__(self, key, value)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "123", "colour": "orange", "code": "        if isinstance(existing, Event):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "124", "colour": "orange", "code": "            # Set Event.result so other threads waiting on it have\n", "error": "none", "author": "tom@organisms.be"}, {"index": "125", "colour": "orange", "code": "            # immediate access without needing to poll the cache again.\n", "error": "none", "author": "tom@organisms.be"}, {"index": "126", "colour": "orange", "code": "            existing.result = value\n", "error": "none", "author": "tom@organisms.be"}, {"index": "127", "colour": "orange", "code": "            existing.set()\n", "error": "none", "author": "tom@organisms.be"}, {"index": "128", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "129", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "130", "colour": "blue", "code": "class MemoryCache(Cache):\n", "error": "R", "author": "tom@organisms.be"}, {"index": "131", "colour": "orange", "code": "    \"\"\"An in-memory cache for varying response content.\n", "error": "none", "author": "tom@organisms.be"}, {"index": "132", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "133", "colour": "orange", "code": "    Each key in self.store is a URI, and each value is an AntiStampedeCache.\n", "error": "none", "author": "tom@organisms.be"}, {"index": "134", "colour": "orange", "code": "    The response for any given URI may vary based on the values of\n", "error": "none", "author": "tom@organisms.be"}, {"index": "135", "colour": "orange", "code": "    \"selecting request headers\"; that is, those named in the Vary\n", "error": "none", "author": "tom@organisms.be"}, {"index": "136", "colour": "orange", "code": "    response header. We assume the list of header names to be constant\n", "error": "none", "author": "tom@organisms.be"}, {"index": "137", "colour": "orange", "code": "    for each URI throughout the lifetime of the application, and store\n", "error": "none", "author": "tom@organisms.be"}, {"index": "138", "colour": "orange", "code": "    that list in ``self.store[uri].selecting_headers``.\n", "error": "none", "author": "tom@organisms.be"}, {"index": "139", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "140", "colour": "orange", "code": "    The items contained in ``self.store[uri]`` have keys which are tuples of\n", "error": "none", "author": "tom@organisms.be"}, {"index": "141", "colour": "orange", "code": "    request header values (in the same order as the names in its\n", "error": "none", "author": "tom@organisms.be"}, {"index": "142", "colour": "orange", "code": "    selecting_headers), and values which are the actual responses.\n", "error": "none", "author": "tom@organisms.be"}, {"index": "143", "colour": "orange", "code": "    \"\"\"\n", "error": "none", "author": "tom@organisms.be"}, {"index": "144", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "145", "colour": "orange", "code": "    maxobjects = 1000\n", "error": "none", "author": "tom@organisms.be"}, {"index": "146", "colour": "orange", "code": "    \"\"\"The maximum number of cached objects; defaults to 1000.\"\"\"\n", "error": "none", "author": "tom@organisms.be"}, {"index": "147", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "148", "colour": "orange", "code": "    maxobj_size = 100000\n", "error": "none", "author": "tom@organisms.be"}, {"index": "149", "colour": "orange", "code": "    \"\"\"The maximum size of each cached object in bytes; defaults to 100 KB.\"\"\"\n", "error": "none", "author": "tom@organisms.be"}, {"index": "150", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "151", "colour": "orange", "code": "    maxsize = 10000000\n", "error": "none", "author": "tom@organisms.be"}, {"index": "152", "colour": "orange", "code": "    \"\"\"The maximum size of the entire cache in bytes; defaults to 10 MB.\"\"\"\n", "error": "none", "author": "tom@organisms.be"}, {"index": "153", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "154", "colour": "orange", "code": "    delay = 600\n", "error": "none", "author": "tom@organisms.be"}, {"index": "155", "colour": "orange", "code": "    \"\"\"Seconds until the cached content expires; defaults to 600 (10 minutes).\"\"\"\n", "error": "none", "author": "tom@organisms.be"}, {"index": "156", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "157", "colour": "orange", "code": "    antistampede_timeout = 5\n", "error": "none", "author": "tom@organisms.be"}, {"index": "158", "colour": "orange", "code": "    \"\"\"Seconds to wait for other threads to release a cache lock.\"\"\"\n", "error": "none", "author": "tom@organisms.be"}, {"index": "159", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "160", "colour": "orange", "code": "    expire_freq = 0.1\n", "error": "none", "author": "tom@organisms.be"}, {"index": "161", "colour": "orange", "code": "    \"\"\"Seconds to sleep between cache expiration sweeps.\"\"\"\n", "error": "none", "author": "tom@organisms.be"}, {"index": "162", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "163", "colour": "orange", "code": "    debug = False\n", "error": "none", "author": "tom@organisms.be"}, {"index": "164", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "165", "colour": "orange", "code": "    def __init__(self):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "166", "colour": "orange", "code": "        self.clear()\n", "error": "none", "author": "tom@organisms.be"}, {"index": "167", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "168", "colour": "orange", "code": "        # Run self.expire_cache in a separate daemon thread.\n", "error": "none", "author": "tom@organisms.be"}, {"index": "169", "colour": "orange", "code": "        t = threading.Thread(target=self.expire_cache, name='expire_cache')\n", "error": "none", "author": "tom@organisms.be"}, {"index": "170", "colour": "orange", "code": "        self.expiration_thread = t\n", "error": "none", "author": "tom@organisms.be"}, {"index": "171", "colour": "orange", "code": "        set_daemon(t, True)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "172", "colour": "orange", "code": "        t.start()\n", "error": "none", "author": "tom@organisms.be"}, {"index": "173", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "174", "colour": "orange", "code": "    def clear(self):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "175", "colour": "orange", "code": "        \"\"\"Reset the cache to its initial, empty state.\"\"\"\n", "error": "none", "author": "tom@organisms.be"}, {"index": "176", "colour": "green", "code": "        self.store = {}\n", "error": "W", "author": "tom@organisms.be"}, {"index": "177", "colour": "green", "code": "        self.expirations = {}\n", "error": "W", "author": "tom@organisms.be"}, {"index": "178", "colour": "green", "code": "        self.tot_puts = 0\n", "error": "W", "author": "tom@organisms.be"}, {"index": "179", "colour": "green", "code": "        self.tot_gets = 0\n", "error": "W", "author": "tom@organisms.be"}, {"index": "180", "colour": "green", "code": "        self.tot_hist = 0\n", "error": "W", "author": "tom@organisms.be"}, {"index": "181", "colour": "green", "code": "        self.tot_expires = 0\n", "error": "W", "author": "tom@organisms.be"}, {"index": "182", "colour": "green", "code": "        self.tot_non_modified = 0\n", "error": "W", "author": "tom@organisms.be"}, {"index": "183", "colour": "green", "code": "        self.cursize = 0\n", "error": "W", "author": "tom@organisms.be"}, {"index": "184", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "185", "colour": "orange", "code": "    def expire_cache(self):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "186", "colour": "orange", "code": "        \"\"\"Continuously examine cached objects, expiring stale ones.\n", "error": "none", "author": "tom@organisms.be"}, {"index": "187", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "188", "colour": "orange", "code": "        This function is designed to be run in its own daemon thread,\n", "error": "none", "author": "tom@organisms.be"}, {"index": "189", "colour": "orange", "code": "        referenced at ``self.expiration_thread``.\n", "error": "none", "author": "tom@organisms.be"}, {"index": "190", "colour": "orange", "code": "        \"\"\"\n", "error": "none", "author": "tom@organisms.be"}, {"index": "191", "colour": "orange", "code": "        # It's possible that \"time\" will be set to None\n", "error": "none", "author": "tom@organisms.be"}, {"index": "192", "colour": "orange", "code": "        # arbitrarily, so we check \"while time\" to avoid exceptions.\n", "error": "none", "author": "tom@organisms.be"}, {"index": "193", "colour": "orange", "code": "        # See tickets #99 and #180 for more information.\n", "error": "none", "author": "tom@organisms.be"}, {"index": "194", "colour": "orange", "code": "        while time:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "195", "colour": "orange", "code": "            now = time.time()\n", "error": "none", "author": "tom@organisms.be"}, {"index": "196", "colour": "orange", "code": "            # Must make a copy of expirations so it doesn't change size\n", "error": "none", "author": "tom@organisms.be"}, {"index": "197", "colour": "orange", "code": "            # during iteration\n", "error": "none", "author": "tom@organisms.be"}, {"index": "198", "colour": "orange", "code": "            for expiration_time, objects in copyitems(self.expirations):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "199", "colour": "orange", "code": "                if expiration_time <= now:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "200", "colour": "orange", "code": "                    for obj_size, uri, sel_header_values in objects:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "201", "colour": "orange", "code": "                        try:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "202", "colour": "orange", "code": "                            del self.store[uri][tuple(sel_header_values)]\n", "error": "none", "author": "tom@organisms.be"}, {"index": "203", "colour": "orange", "code": "                            self.tot_expires += 1\n", "error": "none", "author": "tom@organisms.be"}, {"index": "204", "colour": "orange", "code": "                            self.cursize -= obj_size\n", "error": "none", "author": "tom@organisms.be"}, {"index": "205", "colour": "orange", "code": "                        except KeyError:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "206", "colour": "orange", "code": "                            # the key may have been deleted elsewhere\n", "error": "none", "author": "tom@organisms.be"}, {"index": "207", "colour": "orange", "code": "                            pass\n", "error": "none", "author": "tom@organisms.be"}, {"index": "208", "colour": "orange", "code": "                    del self.expirations[expiration_time]\n", "error": "none", "author": "tom@organisms.be"}, {"index": "209", "colour": "orange", "code": "            time.sleep(self.expire_freq)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "210", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "211", "colour": "orange", "code": "    def get(self):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "212", "colour": "orange", "code": "        \"\"\"Return the current variant if in the cache, else None.\"\"\"\n", "error": "none", "author": "tom@organisms.be"}, {"index": "213", "colour": "orange", "code": "        request = cherrypy.serving.request\n", "error": "none", "author": "tom@organisms.be"}, {"index": "214", "colour": "orange", "code": "        self.tot_gets += 1\n", "error": "none", "author": "tom@organisms.be"}, {"index": "215", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "216", "colour": "orange", "code": "        uri = cherrypy.url(qs=request.query_string)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "217", "colour": "orange", "code": "        uricache = self.store.get(uri)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "218", "colour": "orange", "code": "        if uricache is None:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "219", "colour": "orange", "code": "            return None\n", "error": "none", "author": "tom@organisms.be"}, {"index": "220", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "221", "colour": "orange", "code": "        header_values = [request.headers.get(h, '')\n", "error": "none", "author": "tom@organisms.be"}, {"index": "222", "colour": "orange", "code": "                         for h in uricache.selecting_headers]\n", "error": "none", "author": "tom@organisms.be"}, {"index": "223", "colour": "orange", "code": "        variant = uricache.wait(key=tuple(sorted(header_values)),\n", "error": "none", "author": "tom@organisms.be"}, {"index": "224", "colour": "orange", "code": "                                timeout=self.antistampede_timeout,\n", "error": "none", "author": "tom@organisms.be"}, {"index": "225", "colour": "orange", "code": "                                debug=self.debug)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "226", "colour": "orange", "code": "        if variant is not None:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "227", "colour": "orange", "code": "            self.tot_hist += 1\n", "error": "none", "author": "tom@organisms.be"}, {"index": "228", "colour": "orange", "code": "        return variant\n", "error": "none", "author": "tom@organisms.be"}, {"index": "229", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "230", "colour": "orange", "code": "    def put(self, variant, size):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "231", "colour": "orange", "code": "        \"\"\"Store the current variant in the cache.\"\"\"\n", "error": "none", "author": "tom@organisms.be"}, {"index": "232", "colour": "orange", "code": "        request = cherrypy.serving.request\n", "error": "none", "author": "tom@organisms.be"}, {"index": "233", "colour": "orange", "code": "        response = cherrypy.serving.response\n", "error": "none", "author": "tom@organisms.be"}, {"index": "234", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "235", "colour": "orange", "code": "        uri = cherrypy.url(qs=request.query_string)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "236", "colour": "orange", "code": "        uricache = self.store.get(uri)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "237", "colour": "orange", "code": "        if uricache is None:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "238", "colour": "orange", "code": "            uricache = AntiStampedeCache()\n", "error": "none", "author": "tom@organisms.be"}, {"index": "239", "colour": "green", "code": "            uricache.selecting_headers = [\n", "error": "W", "author": "tom@organisms.be"}, {"index": "240", "colour": "orange", "code": "                e.value for e in response.headers.elements('Vary')]\n", "error": "none", "author": "tom@organisms.be"}, {"index": "241", "colour": "orange", "code": "            self.store[uri] = uricache\n", "error": "none", "author": "tom@organisms.be"}, {"index": "242", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "243", "colour": "orange", "code": "        if len(self.store) < self.maxobjects:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "244", "colour": "orange", "code": "            total_size = self.cursize + size\n", "error": "none", "author": "tom@organisms.be"}, {"index": "245", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "246", "colour": "orange", "code": "            # checks if there's space for the object\n", "error": "none", "author": "tom@organisms.be"}, {"index": "247", "colour": "orange", "code": "            if (size < self.maxobj_size and total_size < self.maxsize):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "248", "colour": "orange", "code": "                # add to the expirations list\n", "error": "none", "author": "tom@organisms.be"}, {"index": "249", "colour": "orange", "code": "                expiration_time = response.time + self.delay\n", "error": "none", "author": "tom@organisms.be"}, {"index": "250", "colour": "orange", "code": "                bucket = self.expirations.setdefault(expiration_time, [])\n", "error": "none", "author": "tom@organisms.be"}, {"index": "251", "colour": "orange", "code": "                bucket.append((size, uri, uricache.selecting_headers))\n", "error": "none", "author": "tom@organisms.be"}, {"index": "252", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "253", "colour": "orange", "code": "                # add to the cache\n", "error": "none", "author": "tom@organisms.be"}, {"index": "254", "colour": "orange", "code": "                header_values = [request.headers.get(h, '')\n", "error": "none", "author": "tom@organisms.be"}, {"index": "255", "colour": "orange", "code": "                                 for h in uricache.selecting_headers]\n", "error": "none", "author": "tom@organisms.be"}, {"index": "256", "colour": "orange", "code": "                uricache[tuple(sorted(header_values))] = variant\n", "error": "none", "author": "tom@organisms.be"}, {"index": "257", "colour": "orange", "code": "                self.tot_puts += 1\n", "error": "none", "author": "tom@organisms.be"}, {"index": "258", "colour": "green", "code": "                self.cursize = total_size\n", "error": "W", "author": "tom@organisms.be"}, {"index": "259", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "260", "colour": "orange", "code": "    def delete(self):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "261", "colour": "orange", "code": "        \"\"\"Remove ALL cached variants of the current resource.\"\"\"\n", "error": "none", "author": "tom@organisms.be"}, {"index": "262", "colour": "orange", "code": "        uri = cherrypy.url(qs=cherrypy.serving.request.query_string)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "263", "colour": "orange", "code": "        self.store.pop(uri, None)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "264", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "265", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "266", "colour": "blue", "code": "def get(invalid_methods=(\"POST\", \"PUT\", \"DELETE\"), debug=False, **kwargs):\n", "error": "R", "author": "tom@organisms.be"}, {"index": "267", "colour": "orange", "code": "    \"\"\"Try to obtain cached output. If fresh enough, raise HTTPError(304).\n", "error": "none", "author": "tom@organisms.be"}, {"index": "268", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "269", "colour": "orange", "code": "    If POST, PUT, or DELETE:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "270", "colour": "orange", "code": "        * invalidates (deletes) any cached response for this resource\n", "error": "none", "author": "tom@organisms.be"}, {"index": "271", "colour": "orange", "code": "        * sets request.cached = False\n", "error": "none", "author": "tom@organisms.be"}, {"index": "272", "colour": "orange", "code": "        * sets request.cacheable = False\n", "error": "none", "author": "tom@organisms.be"}, {"index": "273", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "274", "colour": "orange", "code": "    else if a cached copy exists:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "275", "colour": "orange", "code": "        * sets request.cached = True\n", "error": "none", "author": "tom@organisms.be"}, {"index": "276", "colour": "orange", "code": "        * sets request.cacheable = False\n", "error": "none", "author": "tom@organisms.be"}, {"index": "277", "colour": "orange", "code": "        * sets response.headers to the cached values\n", "error": "none", "author": "tom@organisms.be"}, {"index": "278", "colour": "orange", "code": "        * checks the cached Last-Modified response header against the\n", "error": "none", "author": "tom@organisms.be"}, {"index": "279", "colour": "orange", "code": "          current If-(Un)Modified-Since request headers; raises 304\n", "error": "none", "author": "tom@organisms.be"}, {"index": "280", "colour": "orange", "code": "          if necessary.\n", "error": "none", "author": "tom@organisms.be"}, {"index": "281", "colour": "orange", "code": "        * sets response.status and response.body to the cached values\n", "error": "none", "author": "tom@organisms.be"}, {"index": "282", "colour": "orange", "code": "        * returns True\n", "error": "none", "author": "tom@organisms.be"}, {"index": "283", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "284", "colour": "orange", "code": "    otherwise:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "285", "colour": "orange", "code": "        * sets request.cached = False\n", "error": "none", "author": "tom@organisms.be"}, {"index": "286", "colour": "orange", "code": "        * sets request.cacheable = True\n", "error": "none", "author": "tom@organisms.be"}, {"index": "287", "colour": "orange", "code": "        * returns False\n", "error": "none", "author": "tom@organisms.be"}, {"index": "288", "colour": "orange", "code": "    \"\"\"\n", "error": "none", "author": "tom@organisms.be"}, {"index": "289", "colour": "orange", "code": "    request = cherrypy.serving.request\n", "error": "none", "author": "tom@organisms.be"}, {"index": "290", "colour": "orange", "code": "    response = cherrypy.serving.response\n", "error": "none", "author": "tom@organisms.be"}, {"index": "291", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "292", "colour": "orange", "code": "    if not hasattr(cherrypy, \"_cache\"):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "293", "colour": "orange", "code": "        # Make a process-wide Cache object.\n", "error": "none", "author": "tom@organisms.be"}, {"index": "294", "colour": "green", "code": "        cherrypy._cache = kwargs.pop(\"cache_class\", MemoryCache)()\n", "error": "W", "author": "tom@organisms.be"}, {"index": "295", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "296", "colour": "orange", "code": "        # Take all remaining kwargs and set them on the Cache object.\n", "error": "none", "author": "tom@organisms.be"}, {"index": "297", "colour": "orange", "code": "        for k, v in kwargs.items():\n", "error": "none", "author": "tom@organisms.be"}, {"index": "298", "colour": "green", "code": "            setattr(cherrypy._cache, k, v)\n", "error": "W", "author": "tom@organisms.be"}, {"index": "299", "colour": "green", "code": "        cherrypy._cache.debug = debug\n", "error": "W", "author": "tom@organisms.be"}, {"index": "300", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "301", "colour": "orange", "code": "    # POST, PUT, DELETE should invalidate (delete) the cached copy.\n", "error": "none", "author": "tom@organisms.be"}, {"index": "302", "colour": "orange", "code": "    # See http://www.w3.org/Protocols/rfc2616/rfc2616-sec13.html#sec13.10.\n", "error": "none", "author": "tom@organisms.be"}, {"index": "303", "colour": "orange", "code": "    if request.method in invalid_methods:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "304", "colour": "orange", "code": "        if debug:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "305", "colour": "orange", "code": "            cherrypy.log('request.method %r in invalid_methods %r' %\n", "error": "none", "author": "tom@organisms.be"}, {"index": "306", "colour": "orange", "code": "                         (request.method, invalid_methods), 'TOOLS.CACHING')\n", "error": "none", "author": "tom@organisms.be"}, {"index": "307", "colour": "green", "code": "        cherrypy._cache.delete()\n", "error": "W", "author": "tom@organisms.be"}, {"index": "308", "colour": "orange", "code": "        request.cached = False\n", "error": "none", "author": "tom@organisms.be"}, {"index": "309", "colour": "orange", "code": "        request.cacheable = False\n", "error": "none", "author": "tom@organisms.be"}, {"index": "310", "colour": "orange", "code": "        return False\n", "error": "none", "author": "tom@organisms.be"}, {"index": "311", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "312", "colour": "orange", "code": "    if 'no-cache' in [e.value for e in request.headers.elements('Pragma')]:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "313", "colour": "orange", "code": "        request.cached = False\n", "error": "none", "author": "tom@organisms.be"}, {"index": "314", "colour": "orange", "code": "        request.cacheable = True\n", "error": "none", "author": "tom@organisms.be"}, {"index": "315", "colour": "orange", "code": "        return False\n", "error": "none", "author": "tom@organisms.be"}, {"index": "316", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "317", "colour": "green", "code": "    cache_data = cherrypy._cache.get()\n", "error": "W", "author": "tom@organisms.be"}, {"index": "318", "colour": "orange", "code": "    request.cached = bool(cache_data)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "319", "colour": "orange", "code": "    request.cacheable = not request.cached\n", "error": "none", "author": "tom@organisms.be"}, {"index": "320", "colour": "orange", "code": "    if request.cached:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "321", "colour": "orange", "code": "        # Serve the cached copy.\n", "error": "none", "author": "tom@organisms.be"}, {"index": "322", "colour": "green", "code": "        max_age = cherrypy._cache.delay\n", "error": "W", "author": "tom@organisms.be"}, {"index": "323", "colour": "orange", "code": "        for v in [e.value for e in request.headers.elements('Cache-Control')]:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "324", "colour": "orange", "code": "            atoms = v.split('=', 1)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "325", "colour": "orange", "code": "            directive = atoms.pop(0)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "326", "colour": "orange", "code": "            if directive == 'max-age':\n", "error": "none", "author": "tom@organisms.be"}, {"index": "327", "colour": "orange", "code": "                if len(atoms) != 1 or not atoms[0].isdigit():\n", "error": "none", "author": "tom@organisms.be"}, {"index": "328", "colour": "orange", "code": "                    raise cherrypy.HTTPError(400, \"Invalid Cache-Control header\")\n", "error": "none", "author": "tom@organisms.be"}, {"index": "329", "colour": "orange", "code": "                max_age = int(atoms[0])\n", "error": "none", "author": "tom@organisms.be"}, {"index": "330", "colour": "orange", "code": "                break\n", "error": "none", "author": "tom@organisms.be"}, {"index": "331", "colour": "orange", "code": "            elif directive == 'no-cache':\n", "error": "none", "author": "tom@organisms.be"}, {"index": "332", "colour": "orange", "code": "                if debug:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "333", "colour": "orange", "code": "                    cherrypy.log('Ignoring cache due to Cache-Control: no-cache',\n", "error": "none", "author": "tom@organisms.be"}, {"index": "334", "colour": "orange", "code": "                                 'TOOLS.CACHING')\n", "error": "none", "author": "tom@organisms.be"}, {"index": "335", "colour": "orange", "code": "                request.cached = False\n", "error": "none", "author": "tom@organisms.be"}, {"index": "336", "colour": "orange", "code": "                request.cacheable = True\n", "error": "none", "author": "tom@organisms.be"}, {"index": "337", "colour": "orange", "code": "                return False\n", "error": "none", "author": "tom@organisms.be"}, {"index": "338", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "339", "colour": "orange", "code": "        if debug:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "340", "colour": "orange", "code": "            cherrypy.log('Reading response from cache', 'TOOLS.CACHING')\n", "error": "none", "author": "tom@organisms.be"}, {"index": "341", "colour": "orange", "code": "        s, h, b, create_time = cache_data\n", "error": "none", "author": "tom@organisms.be"}, {"index": "342", "colour": "orange", "code": "        age = int(response.time - create_time)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "343", "colour": "orange", "code": "        if (age > max_age):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "344", "colour": "orange", "code": "            if debug:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "345", "colour": "orange", "code": "                cherrypy.log('Ignoring cache due to age > %d' % max_age,\n", "error": "none", "author": "tom@organisms.be"}, {"index": "346", "colour": "orange", "code": "                             'TOOLS.CACHING')\n", "error": "none", "author": "tom@organisms.be"}, {"index": "347", "colour": "orange", "code": "            request.cached = False\n", "error": "none", "author": "tom@organisms.be"}, {"index": "348", "colour": "orange", "code": "            request.cacheable = True\n", "error": "none", "author": "tom@organisms.be"}, {"index": "349", "colour": "orange", "code": "            return False\n", "error": "none", "author": "tom@organisms.be"}, {"index": "350", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "351", "colour": "orange", "code": "        # Copy the response headers. See http://www.cherrypy.org/ticket/721.\n", "error": "none", "author": "tom@organisms.be"}, {"index": "352", "colour": "orange", "code": "        response.headers = rh = httputil.HeaderMap()\n", "error": "none", "author": "tom@organisms.be"}, {"index": "353", "colour": "orange", "code": "        for k in h:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "354", "colour": "orange", "code": "            dict.__setitem__(rh, k, dict.__getitem__(h, k))\n", "error": "none", "author": "tom@organisms.be"}, {"index": "355", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "356", "colour": "orange", "code": "        # Add the required Age header\n", "error": "none", "author": "tom@organisms.be"}, {"index": "357", "colour": "orange", "code": "        response.headers[\"Age\"] = str(age)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "358", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "359", "colour": "orange", "code": "        try:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "360", "colour": "orange", "code": "            # Note that validate_since depends on a Last-Modified header;\n", "error": "none", "author": "tom@organisms.be"}, {"index": "361", "colour": "orange", "code": "            # this was put into the cached copy, and should have been\n", "error": "none", "author": "tom@organisms.be"}, {"index": "362", "colour": "orange", "code": "            # resurrected just above (response.headers = cache_data[1]).\n", "error": "none", "author": "tom@organisms.be"}, {"index": "363", "colour": "orange", "code": "            cptools.validate_since()\n", "error": "none", "author": "tom@organisms.be"}, {"index": "364", "colour": "orange", "code": "        except cherrypy.HTTPRedirect:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "365", "colour": "orange", "code": "            x = sys.exc_info()[1]\n", "error": "none", "author": "tom@organisms.be"}, {"index": "366", "colour": "orange", "code": "            if x.status == 304:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "367", "colour": "green", "code": "                cherrypy._cache.tot_non_modified += 1\n", "error": "W", "author": "tom@organisms.be"}, {"index": "368", "colour": "orange", "code": "            raise\n", "error": "none", "author": "tom@organisms.be"}, {"index": "369", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "370", "colour": "orange", "code": "        # serve it & get out from the request\n", "error": "none", "author": "tom@organisms.be"}, {"index": "371", "colour": "orange", "code": "        response.status = s\n", "error": "none", "author": "tom@organisms.be"}, {"index": "372", "colour": "orange", "code": "        response.body = b\n", "error": "none", "author": "tom@organisms.be"}, {"index": "373", "colour": "orange", "code": "    else:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "374", "colour": "orange", "code": "        if debug:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "375", "colour": "orange", "code": "            cherrypy.log('request is not cached', 'TOOLS.CACHING')\n", "error": "none", "author": "tom@organisms.be"}, {"index": "376", "colour": "orange", "code": "    return request.cached\n", "error": "none", "author": "tom@organisms.be"}, {"index": "377", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "378", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "379", "colour": "orange", "code": "def tee_output():\n", "error": "none", "author": "tom@organisms.be"}, {"index": "380", "colour": "orange", "code": "    \"\"\"Tee response output to cache storage. Internal.\"\"\"\n", "error": "none", "author": "tom@organisms.be"}, {"index": "381", "colour": "orange", "code": "    # Used by CachingTool by attaching to request.hooks\n", "error": "none", "author": "tom@organisms.be"}, {"index": "382", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "383", "colour": "orange", "code": "    request = cherrypy.serving.request\n", "error": "none", "author": "tom@organisms.be"}, {"index": "384", "colour": "orange", "code": "    if 'no-store' in request.headers.values('Cache-Control'):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "385", "colour": "orange", "code": "        return\n", "error": "none", "author": "tom@organisms.be"}, {"index": "386", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "387", "colour": "orange", "code": "    def tee(body):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "388", "colour": "orange", "code": "        \"\"\"Tee response.body into a list.\"\"\"\n", "error": "none", "author": "tom@organisms.be"}, {"index": "389", "colour": "orange", "code": "        if ('no-cache' in response.headers.values('Pragma') or\n", "error": "none", "author": "tom@organisms.be"}, {"index": "390", "colour": "orange", "code": "            'no-store' in response.headers.values('Cache-Control')):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "391", "colour": "orange", "code": "            for chunk in body:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "392", "colour": "orange", "code": "                yield chunk\n", "error": "none", "author": "tom@organisms.be"}, {"index": "393", "colour": "orange", "code": "            return\n", "error": "none", "author": "tom@organisms.be"}, {"index": "394", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "395", "colour": "orange", "code": "        output = []\n", "error": "none", "author": "tom@organisms.be"}, {"index": "396", "colour": "orange", "code": "        for chunk in body:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "397", "colour": "orange", "code": "            output.append(chunk)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "398", "colour": "orange", "code": "            yield chunk\n", "error": "none", "author": "tom@organisms.be"}, {"index": "399", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "400", "colour": "orange", "code": "        # save the cache data\n", "error": "none", "author": "tom@organisms.be"}, {"index": "401", "colour": "orange", "code": "        body = ntob('').join(output)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "402", "colour": "green", "code": "        cherrypy._cache.put((response.status, response.headers or {},\n", "error": "W", "author": "tom@organisms.be"}, {"index": "403", "colour": "orange", "code": "                             body, response.time), len(body))\n", "error": "none", "author": "tom@organisms.be"}, {"index": "404", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "405", "colour": "orange", "code": "    response = cherrypy.serving.response\n", "error": "none", "author": "tom@organisms.be"}, {"index": "406", "colour": "orange", "code": "    response.body = tee(response.body)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "407", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "408", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "409", "colour": "blue", "code": "def expires(secs=0, force=False, debug=False):\n", "error": "R", "author": "tom@organisms.be"}, {"index": "410", "colour": "orange", "code": "    \"\"\"Tool for influencing cache mechanisms using the 'Expires' header.\n", "error": "none", "author": "tom@organisms.be"}, {"index": "411", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "412", "colour": "orange", "code": "    secs\n", "error": "none", "author": "tom@organisms.be"}, {"index": "413", "colour": "orange", "code": "        Must be either an int or a datetime.timedelta, and indicates the\n", "error": "none", "author": "tom@organisms.be"}, {"index": "414", "colour": "orange", "code": "        number of seconds between response.time and when the response should\n", "error": "none", "author": "tom@organisms.be"}, {"index": "415", "colour": "orange", "code": "        expire. The 'Expires' header will be set to response.time + secs.\n", "error": "none", "author": "tom@organisms.be"}, {"index": "416", "colour": "orange", "code": "        If secs is zero, the 'Expires' header is set one year in the past, and\n", "error": "none", "author": "tom@organisms.be"}, {"index": "417", "colour": "orange", "code": "        the following \"cache prevention\" headers are also set:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "418", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "419", "colour": "orange", "code": "            * Pragma: no-cache\n", "error": "none", "author": "tom@organisms.be"}, {"index": "420", "colour": "orange", "code": "            * Cache-Control': no-cache, must-revalidate\n", "error": "none", "author": "tom@organisms.be"}, {"index": "421", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "422", "colour": "orange", "code": "    force\n", "error": "none", "author": "tom@organisms.be"}, {"index": "423", "colour": "orange", "code": "        If False, the following headers are checked:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "424", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "425", "colour": "orange", "code": "            * Etag\n", "error": "none", "author": "tom@organisms.be"}, {"index": "426", "colour": "orange", "code": "            * Last-Modified\n", "error": "none", "author": "tom@organisms.be"}, {"index": "427", "colour": "orange", "code": "            * Age\n", "error": "none", "author": "tom@organisms.be"}, {"index": "428", "colour": "orange", "code": "            * Expires\n", "error": "none", "author": "tom@organisms.be"}, {"index": "429", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "430", "colour": "orange", "code": "        If any are already present, none of the above response headers are set.\n", "error": "none", "author": "tom@organisms.be"}, {"index": "431", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "432", "colour": "orange", "code": "    \"\"\"\n", "error": "none", "author": "tom@organisms.be"}, {"index": "433", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "434", "colour": "orange", "code": "    response = cherrypy.serving.response\n", "error": "none", "author": "tom@organisms.be"}, {"index": "435", "colour": "orange", "code": "    headers = response.headers\n", "error": "none", "author": "tom@organisms.be"}, {"index": "436", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "437", "colour": "orange", "code": "    cacheable = False\n", "error": "none", "author": "tom@organisms.be"}, {"index": "438", "colour": "orange", "code": "    if not force:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "439", "colour": "orange", "code": "        # some header names that indicate that the response can be cached\n", "error": "none", "author": "tom@organisms.be"}, {"index": "440", "colour": "orange", "code": "        for indicator in ('Etag', 'Last-Modified', 'Age', 'Expires'):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "441", "colour": "orange", "code": "            if indicator in headers:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "442", "colour": "orange", "code": "                cacheable = True\n", "error": "none", "author": "tom@organisms.be"}, {"index": "443", "colour": "orange", "code": "                break\n", "error": "none", "author": "tom@organisms.be"}, {"index": "444", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "445", "colour": "orange", "code": "    if not cacheable and not force:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "446", "colour": "orange", "code": "        if debug:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "447", "colour": "orange", "code": "            cherrypy.log('request is not cacheable', 'TOOLS.EXPIRES')\n", "error": "none", "author": "tom@organisms.be"}, {"index": "448", "colour": "orange", "code": "    else:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "449", "colour": "orange", "code": "        if debug:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "450", "colour": "orange", "code": "            cherrypy.log('request is cacheable', 'TOOLS.EXPIRES')\n", "error": "none", "author": "tom@organisms.be"}, {"index": "451", "colour": "orange", "code": "        if isinstance(secs, datetime.timedelta):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "452", "colour": "red", "code": "            secs = (86400 * secs.days) + secs.seconds\n", "error": "E", "author": "tom@organisms.be"}, {"index": "453", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "454", "colour": "orange", "code": "        if secs == 0:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "455", "colour": "orange", "code": "            if force or (\"Pragma\" not in headers):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "456", "colour": "orange", "code": "                headers[\"Pragma\"] = \"no-cache\"\n", "error": "none", "author": "tom@organisms.be"}, {"index": "457", "colour": "orange", "code": "            if cherrypy.serving.request.protocol >= (1, 1):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "458", "colour": "orange", "code": "                if force or \"Cache-Control\" not in headers:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "459", "colour": "orange", "code": "                    headers[\"Cache-Control\"] = \"no-cache, must-revalidate\"\n", "error": "none", "author": "tom@organisms.be"}, {"index": "460", "colour": "orange", "code": "            # Set an explicit Expires date in the past.\n", "error": "none", "author": "tom@organisms.be"}, {"index": "461", "colour": "orange", "code": "            expiry = httputil.HTTPDate(1169942400.0)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "462", "colour": "orange", "code": "        else:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "463", "colour": "orange", "code": "            expiry = httputil.HTTPDate(response.time + secs)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "464", "colour": "orange", "code": "        if force or \"Expires\" not in headers:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "465", "colour": "orange", "code": "            headers[\"Expires\"] = expiry\n", "error": "none", "author": "tom@organisms.be"}]}