{"path": "/home/asumal/git/cs410/pattern/pattern/server/cherrypy/cherrypy/_cpcompat_subprocess.py", "lines": [[{"error": "C", "line": "1", "code": "# subprocess - Subprocesses with accessible I/O streams\r\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "2", "code": "#\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "3", "code": "# For more information about this module, see PEP 324.\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "4", "code": "#\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "5", "code": "# This module should remain compatible with Python 2.2, see PEP 291.\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "6", "code": "#\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "7", "code": "# Copyright (c) 2003-2005 by Peter Astrand <astrand@lysator.liu.se>\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "8", "code": "#\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "9", "code": "# Licensed to PSF under a Contributor Agreement.\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "10", "code": "# See http://www.python.org/2.4/license for licensing details.\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "11", "code": "\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "12", "code": "r\"\"\"subprocess - Subprocesses with accessible I/O streams\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "13", "code": "\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "14", "code": "This module allows you to spawn processes, connect to their\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "15", "code": "input/output/error pipes, and obtain their return codes.  This module\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "16", "code": "intends to replace several other, older modules and functions, like:\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "17", "code": "\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "18", "code": "os.system\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "19", "code": "os.spawn*\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "20", "code": "os.popen*\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "21", "code": "popen2.*\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "22", "code": "commands.*\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "23", "code": "\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "24", "code": "Information about how the subprocess module can be used to replace these\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "25", "code": "modules and functions can be found below.\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "26", "code": "\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "27", "code": "\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "28", "code": "\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "29", "code": "Using the subprocess module\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "30", "code": "===========================\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "31", "code": "This module defines one class called Popen:\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "32", "code": "\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "33", "code": "class Popen(args, bufsize=0, executable=None,\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "34", "code": "            stdin=None, stdout=None, stderr=None,\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "35", "code": "            preexec_fn=None, close_fds=False, shell=False,\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "36", "code": "            cwd=None, env=None, universal_newlines=False,\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "37", "code": "            startupinfo=None, creationflags=0):\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "38", "code": "\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "39", "code": "\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "40", "code": "Arguments are:\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "41", "code": "\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "42", "code": "args should be a string, or a sequence of program arguments.  The\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "43", "code": "program to execute is normally the first item in the args sequence or\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "44", "code": "string, but can be explicitly set by using the executable argument.\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "45", "code": "\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "46", "code": "On UNIX, with shell=False (default): In this case, the Popen class\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "47", "code": "uses os.execvp() to execute the child program.  args should normally\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "48", "code": "be a sequence.  A string will be treated as a sequence with the string\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "49", "code": "as the only item (the program to execute).\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "50", "code": "\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "51", "code": "On UNIX, with shell=True: If args is a string, it specifies the\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "52", "code": "command string to execute through the shell.  If args is a sequence,\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "53", "code": "the first item specifies the command string, and any additional items\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "54", "code": "will be treated as additional shell arguments.\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "55", "code": "\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "56", "code": "On Windows: the Popen class uses CreateProcess() to execute the child\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "57", "code": "program, which operates on strings.  If args is a sequence, it will be\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "58", "code": "converted to a string using the list2cmdline method.  Please note that\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "59", "code": "not all MS Windows applications interpret the command line the same\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "60", "code": "way: The list2cmdline is designed for applications using the same\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "61", "code": "rules as the MS C runtime.\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "62", "code": "\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "63", "code": "bufsize, if given, has the same meaning as the corresponding argument\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "64", "code": "to the built-in open() function: 0 means unbuffered, 1 means line\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "65", "code": "buffered, any other positive value means use a buffer of\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "66", "code": "(approximately) that size.  A negative bufsize means to use the system\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "67", "code": "default, which usually means fully buffered.  The default value for\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "68", "code": "bufsize is 0 (unbuffered).\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "69", "code": "\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "70", "code": "stdin, stdout and stderr specify the executed programs' standard\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "71", "code": "input, standard output and standard error file handles, respectively.\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "72", "code": "Valid values are PIPE, an existing file descriptor (a positive\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "73", "code": "integer), an existing file object, and None.  PIPE indicates that a\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "74", "code": "new pipe to the child should be created.  With None, no redirection\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "75", "code": "will occur; the child's file handles will be inherited from the\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "76", "code": "parent.  Additionally, stderr can be STDOUT, which indicates that the\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "77", "code": "stderr data from the applications should be captured into the same\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "78", "code": "file handle as for stdout.\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "79", "code": "\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "80", "code": "If preexec_fn is set to a callable object, this object will be called\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "81", "code": "in the child process just before the child is executed.\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "82", "code": "\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "83", "code": "If close_fds is true, all file descriptors except 0, 1 and 2 will be\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "84", "code": "closed before the child process is executed.\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "85", "code": "\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "86", "code": "if shell is true, the specified command will be executed through the\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "87", "code": "shell.\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "88", "code": "\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "89", "code": "If cwd is not None, the current directory will be changed to cwd\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "90", "code": "before the child is executed.\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "91", "code": "\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "92", "code": "If env is not None, it defines the environment variables for the new\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "93", "code": "process.\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "94", "code": "\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "95", "code": "If universal_newlines is true, the file objects stdout and stderr are\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "96", "code": "opened as a text files, but lines may be terminated by any of '\\n',\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "97", "code": "the Unix end-of-line convention, '\\r', the Macintosh convention or\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "98", "code": "'\\r\\n', the Windows convention.  All of these external representations\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "99", "code": "are seen as '\\n' by the Python program.  Note: This feature is only\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "100", "code": "available if Python is built with universal newline support (the\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "101", "code": "default).  Also, the newlines attribute of the file objects stdout,\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "102", "code": "stdin and stderr are not updated by the communicate() method.\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "103", "code": "\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "104", "code": "The startupinfo and creationflags, if given, will be passed to the\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "105", "code": "underlying CreateProcess() function.  They can specify things such as\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "106", "code": "appearance of the main window and priority for the new process.\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "107", "code": "(Windows only)\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "108", "code": "\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "109", "code": "\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "110", "code": "This module also defines some shortcut functions:\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "111", "code": "\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "112", "code": "call(*popenargs, **kwargs):\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "113", "code": "    Run command with arguments.  Wait for command to complete, then\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "114", "code": "    return the returncode attribute.\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "115", "code": "\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "116", "code": "    The arguments are the same as for the Popen constructor.  Example:\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "117", "code": "\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "118", "code": "    retcode = call([\"ls\", \"-l\"])\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "119", "code": "\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "120", "code": "check_call(*popenargs, **kwargs):\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "121", "code": "    Run command with arguments.  Wait for command to complete.  If the\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "122", "code": "    exit code was zero then return, otherwise raise\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "123", "code": "    CalledProcessError.  The CalledProcessError object will have the\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "124", "code": "    return code in the returncode attribute.\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "125", "code": "\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "126", "code": "    The arguments are the same as for the Popen constructor.  Example:\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "127", "code": "\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "128", "code": "    check_call([\"ls\", \"-l\"])\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "129", "code": "\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "130", "code": "check_output(*popenargs, **kwargs):\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "131", "code": "    Run command with arguments and return its output as a byte string.\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "132", "code": "\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "133", "code": "    If the exit code was non-zero it raises a CalledProcessError.  The\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "134", "code": "    CalledProcessError object will have the return code in the returncode\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "135", "code": "    attribute and output in the output attribute.\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "136", "code": "\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "137", "code": "    The arguments are the same as for the Popen constructor.  Example:\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "138", "code": "\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "139", "code": "    output = check_output([\"ls\", \"-l\", \"/dev/null\"])\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "140", "code": "\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "141", "code": "\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "142", "code": "Exceptions\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "143", "code": "----------\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "144", "code": "Exceptions raised in the child process, before the new program has\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "145", "code": "started to execute, will be re-raised in the parent.  Additionally,\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "146", "code": "the exception object will have one extra attribute called\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "147", "code": "'child_traceback', which is a string containing traceback information\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "148", "code": "from the childs point of view.\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "149", "code": "\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "150", "code": "The most common exception raised is OSError.  This occurs, for\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "151", "code": "example, when trying to execute a non-existent file.  Applications\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "152", "code": "should prepare for OSErrors.\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "153", "code": "\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "154", "code": "A ValueError will be raised if Popen is called with invalid arguments.\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "155", "code": "\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "156", "code": "check_call() and check_output() will raise CalledProcessError, if the\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "157", "code": "called process returns a non-zero return code.\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "158", "code": "\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "159", "code": "\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "160", "code": "Security\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "161", "code": "--------\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "162", "code": "Unlike some other popen functions, this implementation will never call\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "163", "code": "/bin/sh implicitly.  This means that all characters, including shell\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "164", "code": "metacharacters, can safely be passed to child processes.\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "165", "code": "\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "166", "code": "\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "167", "code": "Popen objects\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "168", "code": "=============\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "169", "code": "Instances of the Popen class have the following methods:\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "170", "code": "\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "171", "code": "poll()\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "172", "code": "    Check if child process has terminated.  Returns returncode\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "173", "code": "    attribute.\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "174", "code": "\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "175", "code": "wait()\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "176", "code": "    Wait for child process to terminate.  Returns returncode attribute.\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "177", "code": "\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "178", "code": "communicate(input=None)\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "179", "code": "    Interact with process: Send data to stdin.  Read data from stdout\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "180", "code": "    and stderr, until end-of-file is reached.  Wait for process to\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "181", "code": "    terminate.  The optional input argument should be a string to be\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "182", "code": "    sent to the child process, or None, if no data should be sent to\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "183", "code": "    the child.\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "184", "code": "\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "185", "code": "    communicate() returns a tuple (stdout, stderr).\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "186", "code": "\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "187", "code": "    Note: The data read is buffered in memory, so do not use this\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "188", "code": "    method if the data size is large or unlimited.\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "189", "code": "\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "190", "code": "The following attributes are also available:\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "191", "code": "\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "192", "code": "stdin\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "193", "code": "    If the stdin argument is PIPE, this attribute is a file object\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "194", "code": "    that provides input to the child process.  Otherwise, it is None.\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "195", "code": "\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "196", "code": "stdout\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "197", "code": "    If the stdout argument is PIPE, this attribute is a file object\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "198", "code": "    that provides output from the child process.  Otherwise, it is\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "199", "code": "    None.\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "200", "code": "\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "201", "code": "stderr\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "202", "code": "    If the stderr argument is PIPE, this attribute is file object that\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "203", "code": "    provides error output from the child process.  Otherwise, it is\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "204", "code": "    None.\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "205", "code": "\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "206", "code": "pid\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "207", "code": "    The process ID of the child process.\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "208", "code": "\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "209", "code": "returncode\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "210", "code": "    The child return code.  A None value indicates that the process\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "211", "code": "    hasn't terminated yet.  A negative value -N indicates that the\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "212", "code": "    child was terminated by signal N (UNIX only).\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "213", "code": "\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "214", "code": "\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "215", "code": "Replacing older functions with the subprocess module\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "216", "code": "====================================================\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "217", "code": "In this section, \"a ==> b\" means that b can be used as a replacement\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "218", "code": "for a.\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "219", "code": "\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "220", "code": "Note: All functions in this section fail (more or less) silently if\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "221", "code": "the executed program cannot be found; this module raises an OSError\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "222", "code": "exception.\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "223", "code": "\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "224", "code": "In the following examples, we assume that the subprocess module is\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "225", "code": "imported with \"from subprocess import *\".\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "226", "code": "\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "227", "code": "\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "228", "code": "Replacing /bin/sh shell backquote\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "229", "code": "---------------------------------\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "230", "code": "output=`mycmd myarg`\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "231", "code": "==>\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "232", "code": "output = Popen([\"mycmd\", \"myarg\"], stdout=PIPE).communicate()[0]\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "233", "code": "\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "234", "code": "\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "235", "code": "Replacing shell pipe line\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "236", "code": "-------------------------\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "237", "code": "output=`dmesg | grep hda`\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "238", "code": "==>\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "239", "code": "p1 = Popen([\"dmesg\"], stdout=PIPE)\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "240", "code": "p2 = Popen([\"grep\", \"hda\"], stdin=p1.stdout, stdout=PIPE)\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "241", "code": "output = p2.communicate()[0]\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "242", "code": "\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "243", "code": "\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "244", "code": "Replacing os.system()\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "245", "code": "---------------------\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "246", "code": "sts = os.system(\"mycmd\" + \" myarg\")\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "247", "code": "==>\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "248", "code": "p = Popen(\"mycmd\" + \" myarg\", shell=True)\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "249", "code": "pid, sts = os.waitpid(p.pid, 0)\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "250", "code": "\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "251", "code": "Note:\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "252", "code": "\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "253", "code": "* Calling the program through the shell is usually not required.\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "254", "code": "\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "255", "code": "* It's easier to look at the returncode attribute than the\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "256", "code": "  exitstatus.\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "257", "code": "\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "258", "code": "A more real-world example would look like this:\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "259", "code": "\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "260", "code": "try:\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "261", "code": "    retcode = call(\"mycmd\" + \" myarg\", shell=True)\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "262", "code": "    if retcode < 0:\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "263", "code": "        print >>sys.stderr, \"Child was terminated by signal\", -retcode\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "264", "code": "    else:\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "265", "code": "        print >>sys.stderr, \"Child returned\", retcode\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "266", "code": "except OSError, e:\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "267", "code": "    print >>sys.stderr, \"Execution failed:\", e\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "268", "code": "\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "269", "code": "\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "270", "code": "Replacing os.spawn*\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "271", "code": "-------------------\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "272", "code": "P_NOWAIT example:\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "273", "code": "\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "274", "code": "pid = os.spawnlp(os.P_NOWAIT, \"/bin/mycmd\", \"mycmd\", \"myarg\")\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "275", "code": "==>\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "276", "code": "pid = Popen([\"/bin/mycmd\", \"myarg\"]).pid\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "277", "code": "\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "278", "code": "\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "279", "code": "P_WAIT example:\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "280", "code": "\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "281", "code": "retcode = os.spawnlp(os.P_WAIT, \"/bin/mycmd\", \"mycmd\", \"myarg\")\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "282", "code": "==>\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "283", "code": "retcode = call([\"/bin/mycmd\", \"myarg\"])\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "284", "code": "\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "285", "code": "\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "286", "code": "Vector example:\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "287", "code": "\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "288", "code": "os.spawnvp(os.P_NOWAIT, path, args)\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "289", "code": "==>\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "290", "code": "Popen([path] + args[1:])\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "291", "code": "\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "292", "code": "\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "293", "code": "Environment example:\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "294", "code": "\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "295", "code": "os.spawnlpe(os.P_NOWAIT, \"/bin/mycmd\", \"mycmd\", \"myarg\", env)\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "296", "code": "==>\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "297", "code": "Popen([\"/bin/mycmd\", \"myarg\"], env={\"PATH\": \"/usr/bin\"})\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "298", "code": "\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "299", "code": "\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "300", "code": "Replacing os.popen*\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "301", "code": "-------------------\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "302", "code": "pipe = os.popen(\"cmd\", mode='r', bufsize)\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "303", "code": "==>\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "304", "code": "pipe = Popen(\"cmd\", shell=True, bufsize=bufsize, stdout=PIPE).stdout\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "305", "code": "\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "306", "code": "pipe = os.popen(\"cmd\", mode='w', bufsize)\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "307", "code": "==>\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "308", "code": "pipe = Popen(\"cmd\", shell=True, bufsize=bufsize, stdin=PIPE).stdin\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "309", "code": "\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "310", "code": "\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "311", "code": "(child_stdin, child_stdout) = os.popen2(\"cmd\", mode, bufsize)\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "312", "code": "==>\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "313", "code": "p = Popen(\"cmd\", shell=True, bufsize=bufsize,\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "314", "code": "          stdin=PIPE, stdout=PIPE, close_fds=True)\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "315", "code": "(child_stdin, child_stdout) = (p.stdin, p.stdout)\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "316", "code": "\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "317", "code": "\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "318", "code": "(child_stdin,\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "319", "code": " child_stdout,\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "320", "code": " child_stderr) = os.popen3(\"cmd\", mode, bufsize)\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "321", "code": "==>\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "322", "code": "p = Popen(\"cmd\", shell=True, bufsize=bufsize,\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "323", "code": "          stdin=PIPE, stdout=PIPE, stderr=PIPE, close_fds=True)\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "324", "code": "(child_stdin,\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "325", "code": " child_stdout,\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "326", "code": " child_stderr) = (p.stdin, p.stdout, p.stderr)\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "327", "code": "\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "328", "code": "\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "329", "code": "(child_stdin, child_stdout_and_stderr) = os.popen4(\"cmd\", mode,\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "330", "code": "                                                   bufsize)\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "331", "code": "==>\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "332", "code": "p = Popen(\"cmd\", shell=True, bufsize=bufsize,\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "333", "code": "          stdin=PIPE, stdout=PIPE, stderr=STDOUT, close_fds=True)\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "334", "code": "(child_stdin, child_stdout_and_stderr) = (p.stdin, p.stdout)\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "335", "code": "\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "336", "code": "On Unix, os.popen2, os.popen3 and os.popen4 also accept a sequence as\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "337", "code": "the command to execute, in which case arguments will be passed\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "338", "code": "directly to the program without shell intervention.  This usage can be\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "339", "code": "replaced as follows:\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "340", "code": "\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "341", "code": "(child_stdin, child_stdout) = os.popen2([\"/bin/ls\", \"-l\"], mode,\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "342", "code": "                                        bufsize)\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "343", "code": "==>\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "344", "code": "p = Popen([\"/bin/ls\", \"-l\"], bufsize=bufsize, stdin=PIPE, stdout=PIPE)\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "345", "code": "(child_stdin, child_stdout) = (p.stdin, p.stdout)\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "346", "code": "\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "347", "code": "Return code handling translates as follows:\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "348", "code": "\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "349", "code": "pipe = os.popen(\"cmd\", 'w')\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "350", "code": "...\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "351", "code": "rc = pipe.close()\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "352", "code": "if rc is not None and rc % 256:\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "353", "code": "    print \"There were some errors\"\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "354", "code": "==>\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "355", "code": "process = Popen(\"cmd\", 'w', shell=True, stdin=PIPE)\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "356", "code": "...\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "357", "code": "process.stdin.close()\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "358", "code": "if process.wait() != 0:\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "359", "code": "    print \"There were some errors\"\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "360", "code": "\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "361", "code": "\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "362", "code": "Replacing popen2.*\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "363", "code": "------------------\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "364", "code": "(child_stdout, child_stdin) = popen2.popen2(\"somestring\", bufsize, mode)\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "365", "code": "==>\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "366", "code": "p = Popen([\"somestring\"], shell=True, bufsize=bufsize\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "367", "code": "          stdin=PIPE, stdout=PIPE, close_fds=True)\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "368", "code": "(child_stdout, child_stdin) = (p.stdout, p.stdin)\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "369", "code": "\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "370", "code": "On Unix, popen2 also accepts a sequence as the command to execute, in\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "371", "code": "which case arguments will be passed directly to the program without\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "372", "code": "shell intervention.  This usage can be replaced as follows:\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "373", "code": "\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "374", "code": "(child_stdout, child_stdin) = popen2.popen2([\"mycmd\", \"myarg\"], bufsize,\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "375", "code": "                                            mode)\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "376", "code": "==>\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "377", "code": "p = Popen([\"mycmd\", \"myarg\"], bufsize=bufsize,\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "378", "code": "          stdin=PIPE, stdout=PIPE, close_fds=True)\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "379", "code": "(child_stdout, child_stdin) = (p.stdout, p.stdin)\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "380", "code": "\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "381", "code": "The popen2.Popen3 and popen2.Popen4 basically works as subprocess.Popen,\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "382", "code": "except that:\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "383", "code": "\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "384", "code": "* subprocess.Popen raises an exception if the execution fails\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "385", "code": "* the capturestderr argument is replaced with the stderr argument.\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "386", "code": "* stdin=PIPE and stdout=PIPE must be specified.\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "387", "code": "* popen2 closes all filedescriptors by default, but you have to specify\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "388", "code": "  close_fds=True with subprocess.Popen.\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "389", "code": "\"\"\"\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "390", "code": "\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "391", "code": "import sys\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "392", "code": "mswindows = (sys.platform == \"win32\")\r\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "393", "code": "\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "394", "code": "import os\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "395", "code": "import types\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "396", "code": "import traceback\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "397", "code": "import gc\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "398", "code": "import signal\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "399", "code": "import errno\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "400", "code": "\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "401", "code": "try:\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "402", "code": "    set\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "403", "code": "except NameError:\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "W", "line": "404", "code": "    from sets import Set as set\r\n", "colour": "purple", "author": "tom@organisms.be"}, {"error": "none", "line": "405", "code": "\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "406", "code": "# Exception classes used by this module.\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "407", "code": "class CalledProcessError(Exception):\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "408", "code": "    \"\"\"This exception is raised when a process run by check_call() or\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "409", "code": "    check_output() returns a non-zero exit status.\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "410", "code": "    The exit status will be stored in the returncode attribute;\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "411", "code": "    check_output() will also store the output in the output attribute.\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "412", "code": "    \"\"\"\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "W", "line": "413", "code": "    def __init__(self, returncode, cmd, output=None):\r\n", "colour": "purple", "author": "tom@organisms.be"}, {"error": "none", "line": "414", "code": "        self.returncode = returncode\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "415", "code": "        self.cmd = cmd\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "416", "code": "        self.output = output\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "417", "code": "    def __str__(self):\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "418", "code": "        return \"Command '%s' returned non-zero exit status %d\" % (self.cmd, self.returncode)\r\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "419", "code": "\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "420", "code": "\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "421", "code": "if mswindows:\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "422", "code": "    import threading\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "F", "line": "423", "code": "    import msvcrt\r\n", "colour": "red", "author": "tom@organisms.be"}, {"error": "F", "line": "424", "code": "    import _subprocess\r\n", "colour": "red", "author": "tom@organisms.be"}, {"error": "R", "line": "425", "code": "    class STARTUPINFO:\r\n", "colour": "green", "author": "tom@organisms.be"}, {"error": "none", "line": "426", "code": "        dwFlags = 0\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "427", "code": "        hStdInput = None\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "428", "code": "        hStdOutput = None\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "429", "code": "        hStdError = None\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "430", "code": "        wShowWindow = 0\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "R", "line": "431", "code": "    class pywintypes:\r\n", "colour": "green", "author": "tom@organisms.be"}, {"error": "none", "line": "432", "code": "        error = IOError\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "433", "code": "else:\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "434", "code": "    import select\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "435", "code": "    _has_poll = hasattr(select, 'poll')\r\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "436", "code": "    import fcntl\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "437", "code": "    import pickle\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "438", "code": "\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "439", "code": "    # When select or poll has indicated that the file is writable,\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "440", "code": "    # we can write up to _PIPE_BUF bytes without risk of blocking.\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "441", "code": "    # POSIX defines PIPE_BUF as >= 512.\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "442", "code": "    _PIPE_BUF = getattr(select, 'PIPE_BUF', 512)\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "443", "code": "\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "444", "code": "\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "445", "code": "__all__ = [\"Popen\", \"PIPE\", \"STDOUT\", \"call\", \"check_call\",\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "446", "code": "           \"check_output\", \"CalledProcessError\"]\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "447", "code": "\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "448", "code": "if mswindows:\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "W", "line": "449", "code": "    from _subprocess import CREATE_NEW_CONSOLE, CREATE_NEW_PROCESS_GROUP, \\\r\n", "colour": "purple", "author": "tom@organisms.be"}, {"error": "none", "line": "450", "code": "                             STD_INPUT_HANDLE, STD_OUTPUT_HANDLE, \\\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "451", "code": "                             STD_ERROR_HANDLE, SW_HIDE, \\\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "452", "code": "                             STARTF_USESTDHANDLES, STARTF_USESHOWWINDOW\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "453", "code": "\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "454", "code": "    __all__.extend([\"CREATE_NEW_CONSOLE\", \"CREATE_NEW_PROCESS_GROUP\",\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "455", "code": "                    \"STD_INPUT_HANDLE\", \"STD_OUTPUT_HANDLE\",\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "456", "code": "                    \"STD_ERROR_HANDLE\", \"SW_HIDE\",\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "457", "code": "                    \"STARTF_USESTDHANDLES\", \"STARTF_USESHOWWINDOW\"])\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "458", "code": "try:\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "459", "code": "    MAXFD = os.sysconf(\"SC_OPEN_MAX\")\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "W", "line": "460", "code": "except:\r\n", "colour": "purple", "author": "tom@organisms.be"}, {"error": "none", "line": "461", "code": "    MAXFD = 256\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "462", "code": "\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "463", "code": "_active = []\r\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "464", "code": "\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "465", "code": "def _cleanup():\r\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "466", "code": "    for inst in _active[:]:\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "W", "line": "467", "code": "        res = inst._internal_poll(_deadstate=sys.maxint)\r\n", "colour": "purple", "author": "tom@organisms.be"}, {"error": "none", "line": "468", "code": "        if res is not None:\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "469", "code": "            try:\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "470", "code": "                _active.remove(inst)\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "471", "code": "            except ValueError:\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "472", "code": "                # This can happen if two threads create a new Popen instance.\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "473", "code": "                # It's harmless that it was already removed, so ignore.\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "474", "code": "                pass\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "475", "code": "\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "476", "code": "PIPE = -1\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "477", "code": "STDOUT = -2\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "478", "code": "\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "479", "code": "\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "480", "code": "def _eintr_retry_call(func, *args):\r\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "481", "code": "    while True:\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "482", "code": "        try:\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "483", "code": "            return func(*args)\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "484", "code": "        except (OSError, IOError) as e:\r\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "485", "code": "            if e.errno == errno.EINTR:\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "486", "code": "                continue\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "487", "code": "            raise\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "488", "code": "\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "489", "code": "\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "490", "code": "def call(*popenargs, **kwargs):\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "491", "code": "    \"\"\"Run command with arguments.  Wait for command to complete, then\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "492", "code": "    return the returncode attribute.\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "493", "code": "\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "494", "code": "    The arguments are the same as for the Popen constructor.  Example:\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "495", "code": "\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "496", "code": "    retcode = call([\"ls\", \"-l\"])\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "497", "code": "    \"\"\"\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "498", "code": "    return Popen(*popenargs, **kwargs).wait()\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "499", "code": "\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "500", "code": "\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "501", "code": "def check_call(*popenargs, **kwargs):\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "502", "code": "    \"\"\"Run command with arguments.  Wait for command to complete.  If\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "503", "code": "    the exit code was zero then return, otherwise raise\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "504", "code": "    CalledProcessError.  The CalledProcessError object will have the\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "505", "code": "    return code in the returncode attribute.\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "506", "code": "\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "507", "code": "    The arguments are the same as for the Popen constructor.  Example:\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "508", "code": "\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "509", "code": "    check_call([\"ls\", \"-l\"])\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "510", "code": "    \"\"\"\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "511", "code": "    retcode = call(*popenargs, **kwargs)\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "512", "code": "    if retcode:\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "513", "code": "        cmd = kwargs.get(\"args\")\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "514", "code": "        if cmd is None:\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "515", "code": "            cmd = popenargs[0]\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "516", "code": "        raise CalledProcessError(retcode, cmd)\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "517", "code": "    return 0\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "518", "code": "\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "519", "code": "\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "520", "code": "def check_output(*popenargs, **kwargs):\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "521", "code": "    r\"\"\"Run command with arguments and return its output as a byte string.\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "522", "code": "\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "523", "code": "    If the exit code was non-zero it raises a CalledProcessError.  The\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "524", "code": "    CalledProcessError object will have the return code in the returncode\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "525", "code": "    attribute and output in the output attribute.\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "526", "code": "\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "527", "code": "    The arguments are the same as for the Popen constructor.  Example:\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "528", "code": "\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "529", "code": "    >>> check_output([\"ls\", \"-l\", \"/dev/null\"])\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "530", "code": "    'crw-rw-rw- 1 root root 1, 3 Oct 18  2007 /dev/null\\n'\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "531", "code": "\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "532", "code": "    The stdout argument is not allowed as it is used internally.\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "533", "code": "    To capture standard error in the result, use stderr=STDOUT.\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "534", "code": "\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "535", "code": "    >>> check_output([\"/bin/sh\", \"-c\",\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "536", "code": "    ...               \"ls -l non_existent_file ; exit 0\"],\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "537", "code": "    ...              stderr=STDOUT)\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "538", "code": "    'ls: non_existent_file: No such file or directory\\n'\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "539", "code": "    \"\"\"\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "540", "code": "    if 'stdout' in kwargs:\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "541", "code": "        raise ValueError('stdout argument not allowed, it will be overridden.')\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "542", "code": "    process = Popen(stdout=PIPE, *popenargs, **kwargs)\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "W", "line": "543", "code": "    output, unused_err = process.communicate()\r\n", "colour": "purple", "author": "tom@organisms.be"}, {"error": "none", "line": "544", "code": "    retcode = process.poll()\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "545", "code": "    if retcode:\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "546", "code": "        cmd = kwargs.get(\"args\")\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "547", "code": "        if cmd is None:\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "548", "code": "            cmd = popenargs[0]\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "549", "code": "        raise CalledProcessError(retcode, cmd, output=output)\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "550", "code": "    return output\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "551", "code": "\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "552", "code": "\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "553", "code": "def list2cmdline(seq):\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "554", "code": "    \"\"\"\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "555", "code": "    Translate a sequence of arguments into a command line\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "556", "code": "    string, using the same rules as the MS C runtime:\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "557", "code": "\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "558", "code": "    1) Arguments are delimited by white space, which is either a\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "559", "code": "       space or a tab.\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "560", "code": "\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "561", "code": "    2) A string surrounded by double quotation marks is\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "562", "code": "       interpreted as a single argument, regardless of white space\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "563", "code": "       contained within.  A quoted string can be embedded in an\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "564", "code": "       argument.\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "565", "code": "\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "566", "code": "    3) A double quotation mark preceded by a backslash is\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "567", "code": "       interpreted as a literal double quotation mark.\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "568", "code": "\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "569", "code": "    4) Backslashes are interpreted literally, unless they\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "570", "code": "       immediately precede a double quotation mark.\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "571", "code": "\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "572", "code": "    5) If backslashes immediately precede a double quotation mark,\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "573", "code": "       every pair of backslashes is interpreted as a literal\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "574", "code": "       backslash.  If the number of backslashes is odd, the last\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "575", "code": "       backslash escapes the next double quotation mark as\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "576", "code": "       described in rule 3.\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "577", "code": "    \"\"\"\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "578", "code": "\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "579", "code": "    # See\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "580", "code": "    # http://msdn.microsoft.com/en-us/library/17w5ykft.aspx\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "581", "code": "    # or search http://msdn.microsoft.com for\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "582", "code": "    # \"Parsing C++ Command-Line Arguments\"\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "583", "code": "    result = []\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "584", "code": "    needquote = False\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "585", "code": "    for arg in seq:\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "586", "code": "        bs_buf = []\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "587", "code": "\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "588", "code": "        # Add a space to separate this argument from the others\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "589", "code": "        if result:\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "590", "code": "            result.append(' ')\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "591", "code": "\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "592", "code": "        needquote = (\" \" in arg) or (\"\\t\" in arg) or not arg\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "593", "code": "        if needquote:\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "594", "code": "            result.append('\"')\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "595", "code": "\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "596", "code": "        for c in arg:\r\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "597", "code": "            if c == '\\\\':\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "598", "code": "                # Don't know if we need to double yet.\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "599", "code": "                bs_buf.append(c)\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "600", "code": "            elif c == '\"':\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "601", "code": "                # Double backslashes.\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "602", "code": "                result.append('\\\\' * len(bs_buf)*2)\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "603", "code": "                bs_buf = []\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "604", "code": "                result.append('\\\\\"')\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "605", "code": "            else:\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "606", "code": "                # Normal char\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "607", "code": "                if bs_buf:\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "608", "code": "                    result.extend(bs_buf)\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "609", "code": "                    bs_buf = []\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "610", "code": "                result.append(c)\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "611", "code": "\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "612", "code": "        # Add remaining backslashes, if any.\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "613", "code": "        if bs_buf:\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "614", "code": "            result.extend(bs_buf)\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "615", "code": "\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "616", "code": "        if needquote:\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "617", "code": "            result.extend(bs_buf)\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "618", "code": "            result.append('\"')\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "619", "code": "\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "620", "code": "    return ''.join(result)\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "621", "code": "\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "622", "code": "\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "R", "line": "623", "code": "class Popen(object):\r\n", "colour": "green", "author": "tom@organisms.be"}, {"error": "R", "line": "624", "code": "    def __init__(self, args, bufsize=0, executable=None,\r\n", "colour": "green", "author": "tom@organisms.be"}, {"error": "none", "line": "625", "code": "                 stdin=None, stdout=None, stderr=None,\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "626", "code": "                 preexec_fn=None, close_fds=False, shell=False,\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "627", "code": "                 cwd=None, env=None, universal_newlines=False,\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "628", "code": "                 startupinfo=None, creationflags=0):\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "629", "code": "        \"\"\"Create new Popen instance.\"\"\"\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "630", "code": "        _cleanup()\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "631", "code": "\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "632", "code": "        self._child_created = False\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "633", "code": "        if not isinstance(bufsize, (int, long)):\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "634", "code": "            raise TypeError(\"bufsize must be an integer\")\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "635", "code": "\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "636", "code": "        if mswindows:\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "637", "code": "            if preexec_fn is not None:\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "638", "code": "                raise ValueError(\"preexec_fn is not supported on Windows \"\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "639", "code": "                                 \"platforms\")\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "640", "code": "            if close_fds and (stdin is not None or stdout is not None or\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "641", "code": "                              stderr is not None):\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "642", "code": "                raise ValueError(\"close_fds is not supported on Windows \"\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "643", "code": "                                 \"platforms if you redirect stdin/stdout/stderr\")\r\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "644", "code": "        else:\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "645", "code": "            # POSIX\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "646", "code": "            if startupinfo is not None:\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "647", "code": "                raise ValueError(\"startupinfo is only supported on Windows \"\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "648", "code": "                                 \"platforms\")\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "649", "code": "            if creationflags != 0:\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "650", "code": "                raise ValueError(\"creationflags is only supported on Windows \"\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "651", "code": "                                 \"platforms\")\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "652", "code": "\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "653", "code": "        self.stdin = None\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "654", "code": "        self.stdout = None\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "655", "code": "        self.stderr = None\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "656", "code": "        self.pid = None\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "657", "code": "        self.returncode = None\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "658", "code": "        self.universal_newlines = universal_newlines\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "659", "code": "\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "660", "code": "        # Input and output objects. The general principle is like\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "661", "code": "        # this:\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "662", "code": "        #\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "663", "code": "        # Parent                   Child\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "664", "code": "        # ------                   -----\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "665", "code": "        # p2cwrite   ---stdin--->  p2cread\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "666", "code": "        # c2pread    <--stdout---  c2pwrite\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "667", "code": "        # errread    <--stderr---  errwrite\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "668", "code": "        #\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "669", "code": "        # On POSIX, the child objects are file descriptors.  On\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "670", "code": "        # Windows, these are Windows file handles.  The parent objects\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "671", "code": "        # are file descriptors on both platforms.  The parent objects\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "672", "code": "        # are None when not using PIPEs. The child objects are None\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "673", "code": "        # when not redirecting.\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "674", "code": "\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "675", "code": "        (p2cread, p2cwrite,\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "676", "code": "         c2pread, c2pwrite,\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "677", "code": "         errread, errwrite) = self._get_handles(stdin, stdout, stderr)\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "678", "code": "\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "679", "code": "        self._execute_child(args, executable, preexec_fn, close_fds,\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "680", "code": "                            cwd, env, universal_newlines,\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "681", "code": "                            startupinfo, creationflags, shell,\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "682", "code": "                            p2cread, p2cwrite,\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "683", "code": "                            c2pread, c2pwrite,\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "684", "code": "                            errread, errwrite)\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "685", "code": "\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "686", "code": "        if mswindows:\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "687", "code": "            if p2cwrite is not None:\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "688", "code": "                p2cwrite = msvcrt.open_osfhandle(p2cwrite.Detach(), 0)\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "689", "code": "            if c2pread is not None:\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "690", "code": "                c2pread = msvcrt.open_osfhandle(c2pread.Detach(), 0)\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "691", "code": "            if errread is not None:\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "692", "code": "                errread = msvcrt.open_osfhandle(errread.Detach(), 0)\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "693", "code": "\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "694", "code": "        if p2cwrite is not None:\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "695", "code": "            self.stdin = os.fdopen(p2cwrite, 'wb', bufsize)\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "696", "code": "        if c2pread is not None:\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "697", "code": "            if universal_newlines:\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "698", "code": "                self.stdout = os.fdopen(c2pread, 'rU', bufsize)\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "699", "code": "            else:\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "700", "code": "                self.stdout = os.fdopen(c2pread, 'rb', bufsize)\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "701", "code": "        if errread is not None:\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "702", "code": "            if universal_newlines:\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "703", "code": "                self.stderr = os.fdopen(errread, 'rU', bufsize)\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "704", "code": "            else:\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "705", "code": "                self.stderr = os.fdopen(errread, 'rb', bufsize)\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "706", "code": "\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "707", "code": "\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "R", "line": "708", "code": "    def _translate_newlines(self, data):\r\n", "colour": "green", "author": "tom@organisms.be"}, {"error": "none", "line": "709", "code": "        data = data.replace(\"\\r\\n\", \"\\n\")\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "710", "code": "        data = data.replace(\"\\r\", \"\\n\")\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "711", "code": "        return data\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "712", "code": "\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "713", "code": "\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "W", "line": "714", "code": "    def __del__(self, _maxint=sys.maxint, _active=_active):\r\n", "colour": "purple", "author": "tom@organisms.be"}, {"error": "none", "line": "715", "code": "        # If __init__ hasn't had a chance to execute (e.g. if it\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "716", "code": "        # was passed an undeclared keyword argument), we don't\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "717", "code": "        # have a _child_created attribute at all.\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "718", "code": "        if not getattr(self, '_child_created', False):\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "719", "code": "            # We didn't get to successfully create a child process.\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "720", "code": "            return\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "721", "code": "        # In case the child hasn't been waited on, check if it's done.\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "722", "code": "        self._internal_poll(_deadstate=_maxint)\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "723", "code": "        if self.returncode is None and _active is not None:\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "724", "code": "            # Child is still running, keep us alive until we can wait on it.\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "725", "code": "            _active.append(self)\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "726", "code": "\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "727", "code": "\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "W", "line": "728", "code": "    def communicate(self, input=None):\r\n", "colour": "purple", "author": "tom@organisms.be"}, {"error": "none", "line": "729", "code": "        \"\"\"Interact with process: Send data to stdin.  Read data from\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "730", "code": "        stdout and stderr, until end-of-file is reached.  Wait for\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "731", "code": "        process to terminate.  The optional input argument should be a\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "732", "code": "        string to be sent to the child process, or None, if no data\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "733", "code": "        should be sent to the child.\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "734", "code": "\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "735", "code": "        communicate() returns a tuple (stdout, stderr).\"\"\"\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "736", "code": "\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "737", "code": "        # Optimization: If we are only using one pipe, or no pipe at\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "738", "code": "        # all, using select() or threads is unnecessary.\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "739", "code": "        if [self.stdin, self.stdout, self.stderr].count(None) >= 2:\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "740", "code": "            stdout = None\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "741", "code": "            stderr = None\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "742", "code": "            if self.stdin:\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "743", "code": "                if input:\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "744", "code": "                    try:\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "745", "code": "                        self.stdin.write(input)\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "746", "code": "                    except IOError, e:\r\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "747", "code": "                        if e.errno != errno.EPIPE and e.errno != errno.EINVAL:\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "748", "code": "                            raise\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "749", "code": "                self.stdin.close()\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "750", "code": "            elif self.stdout:\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "751", "code": "                stdout = _eintr_retry_call(self.stdout.read)\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "752", "code": "                self.stdout.close()\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "753", "code": "            elif self.stderr:\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "754", "code": "                stderr = _eintr_retry_call(self.stderr.read)\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "755", "code": "                self.stderr.close()\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "756", "code": "            self.wait()\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "757", "code": "            return (stdout, stderr)\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "758", "code": "\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "759", "code": "        return self._communicate(input)\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "760", "code": "\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "761", "code": "\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "762", "code": "    def poll(self):\r\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "763", "code": "        return self._internal_poll()\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "764", "code": "\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "765", "code": "\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "766", "code": "    if mswindows:\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "767", "code": "        #\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "768", "code": "        # Windows methods\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "769", "code": "        #\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "R", "line": "770", "code": "        def _get_handles(self, stdin, stdout, stderr):\r\n", "colour": "green", "author": "tom@organisms.be"}, {"error": "none", "line": "771", "code": "            \"\"\"Construct and return tuple with IO objects:\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "772", "code": "            p2cread, p2cwrite, c2pread, c2pwrite, errread, errwrite\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "773", "code": "            \"\"\"\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "774", "code": "            if stdin is None and stdout is None and stderr is None:\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "775", "code": "                return (None, None, None, None, None, None)\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "776", "code": "\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "777", "code": "            p2cread, p2cwrite = None, None\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "778", "code": "            c2pread, c2pwrite = None, None\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "779", "code": "            errread, errwrite = None, None\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "780", "code": "\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "781", "code": "            if stdin is None:\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "782", "code": "                p2cread = _subprocess.GetStdHandle(_subprocess.STD_INPUT_HANDLE)\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "783", "code": "                if p2cread is None:\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "784", "code": "                    p2cread, _ = _subprocess.CreatePipe(None, 0)\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "785", "code": "            elif stdin == PIPE:\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "786", "code": "                p2cread, p2cwrite = _subprocess.CreatePipe(None, 0)\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "787", "code": "            elif isinstance(stdin, int):\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "788", "code": "                p2cread = msvcrt.get_osfhandle(stdin)\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "789", "code": "            else:\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "790", "code": "                # Assuming file-like object\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "791", "code": "                p2cread = msvcrt.get_osfhandle(stdin.fileno())\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "792", "code": "            p2cread = self._make_inheritable(p2cread)\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "793", "code": "\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "794", "code": "            if stdout is None:\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "795", "code": "                c2pwrite = _subprocess.GetStdHandle(_subprocess.STD_OUTPUT_HANDLE)\r\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "796", "code": "                if c2pwrite is None:\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "797", "code": "                    _, c2pwrite = _subprocess.CreatePipe(None, 0)\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "798", "code": "            elif stdout == PIPE:\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "799", "code": "                c2pread, c2pwrite = _subprocess.CreatePipe(None, 0)\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "800", "code": "            elif isinstance(stdout, int):\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "801", "code": "                c2pwrite = msvcrt.get_osfhandle(stdout)\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "802", "code": "            else:\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "803", "code": "                # Assuming file-like object\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "804", "code": "                c2pwrite = msvcrt.get_osfhandle(stdout.fileno())\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "805", "code": "            c2pwrite = self._make_inheritable(c2pwrite)\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "806", "code": "\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "807", "code": "            if stderr is None:\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "808", "code": "                errwrite = _subprocess.GetStdHandle(_subprocess.STD_ERROR_HANDLE)\r\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "809", "code": "                if errwrite is None:\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "810", "code": "                    _, errwrite = _subprocess.CreatePipe(None, 0)\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "811", "code": "            elif stderr == PIPE:\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "812", "code": "                errread, errwrite = _subprocess.CreatePipe(None, 0)\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "813", "code": "            elif stderr == STDOUT:\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "814", "code": "                errwrite = c2pwrite\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "815", "code": "            elif isinstance(stderr, int):\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "816", "code": "                errwrite = msvcrt.get_osfhandle(stderr)\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "817", "code": "            else:\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "818", "code": "                # Assuming file-like object\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "819", "code": "                errwrite = msvcrt.get_osfhandle(stderr.fileno())\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "820", "code": "            errwrite = self._make_inheritable(errwrite)\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "821", "code": "\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "822", "code": "            return (p2cread, p2cwrite,\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "823", "code": "                    c2pread, c2pwrite,\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "824", "code": "                    errread, errwrite)\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "825", "code": "\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "826", "code": "\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "R", "line": "827", "code": "        def _make_inheritable(self, handle):\r\n", "colour": "green", "author": "tom@organisms.be"}, {"error": "none", "line": "828", "code": "            \"\"\"Return a duplicate of handle, which is inheritable\"\"\"\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "829", "code": "            return _subprocess.DuplicateHandle(_subprocess.GetCurrentProcess(),\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "830", "code": "                                handle, _subprocess.GetCurrentProcess(), 0, 1,\r\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "C", "line": "831", "code": "                                _subprocess.DUPLICATE_SAME_ACCESS)\r\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "832", "code": "\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "833", "code": "\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "R", "line": "834", "code": "        def _find_w9xpopen(self):\r\n", "colour": "green", "author": "tom@organisms.be"}, {"error": "none", "line": "835", "code": "            \"\"\"Find and return absolut path to w9xpopen.exe\"\"\"\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "836", "code": "            w9xpopen = os.path.join(\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "837", "code": "                            os.path.dirname(_subprocess.GetModuleFileName(0)),\r\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "C", "line": "838", "code": "                                    \"w9xpopen.exe\")\r\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "839", "code": "            if not os.path.exists(w9xpopen):\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "840", "code": "                # Eeek - file-not-found - possibly an embedding\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "841", "code": "                # situation - see if we can locate it in sys.exec_prefix\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "842", "code": "                w9xpopen = os.path.join(os.path.dirname(sys.exec_prefix),\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "843", "code": "                                        \"w9xpopen.exe\")\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "844", "code": "                if not os.path.exists(w9xpopen):\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "845", "code": "                    raise RuntimeError(\"Cannot locate w9xpopen.exe, which is \"\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "846", "code": "                                       \"needed for Popen to work with your \"\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "847", "code": "                                       \"shell or platform.\")\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "848", "code": "            return w9xpopen\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "849", "code": "\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "850", "code": "\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "W", "line": "851", "code": "        def _execute_child(self, args, executable, preexec_fn, close_fds,\r\n", "colour": "purple", "author": "tom@organisms.be"}, {"error": "W", "line": "852", "code": "                           cwd, env, universal_newlines,\r\n", "colour": "purple", "author": "tom@organisms.be"}, {"error": "none", "line": "853", "code": "                           startupinfo, creationflags, shell,\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "W", "line": "854", "code": "                           p2cread, p2cwrite,\r\n", "colour": "purple", "author": "tom@organisms.be"}, {"error": "W", "line": "855", "code": "                           c2pread, c2pwrite,\r\n", "colour": "purple", "author": "tom@organisms.be"}, {"error": "W", "line": "856", "code": "                           errread, errwrite):\r\n", "colour": "purple", "author": "tom@organisms.be"}, {"error": "none", "line": "857", "code": "            \"\"\"Execute program (MS Windows version)\"\"\"\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "858", "code": "\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "859", "code": "            if not isinstance(args, types.StringTypes):\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "860", "code": "                args = list2cmdline(args)\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "861", "code": "\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "862", "code": "            # Process startup details\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "863", "code": "            if startupinfo is None:\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "864", "code": "                startupinfo = STARTUPINFO()\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "865", "code": "            if None not in (p2cread, c2pwrite, errwrite):\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "866", "code": "                startupinfo.dwFlags |= _subprocess.STARTF_USESTDHANDLES\r\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "C", "line": "867", "code": "                startupinfo.hStdInput = p2cread\r\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "C", "line": "868", "code": "                startupinfo.hStdOutput = c2pwrite\r\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "C", "line": "869", "code": "                startupinfo.hStdError = errwrite\r\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "870", "code": "\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "871", "code": "            if shell:\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "872", "code": "                startupinfo.dwFlags |= _subprocess.STARTF_USESHOWWINDOW\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "873", "code": "                startupinfo.wShowWindow = _subprocess.SW_HIDE\r\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "874", "code": "                comspec = os.environ.get(\"COMSPEC\", \"cmd.exe\")\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "875", "code": "                args = '{} /c \"{}\"'.format (comspec, args)\r\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "876", "code": "                if (_subprocess.GetVersion() >= 0x80000000 or\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "877", "code": "                        os.path.basename(comspec).lower() == \"command.com\"):\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "878", "code": "                    # Win9x, or using command.com on NT. We need to\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "879", "code": "                    # use the w9xpopen intermediate program. For more\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "880", "code": "                    # information, see KB Q150956\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "881", "code": "                    # (http://web.archive.org/web/20011105084002/http://support.microsoft.com/support/kb/articles/Q150/9/56.asp)\r\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "882", "code": "                    w9xpopen = self._find_w9xpopen()\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "883", "code": "                    args = '\"%s\" %s' % (w9xpopen, args)\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "884", "code": "                    # Not passing CREATE_NEW_CONSOLE has been known to\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "885", "code": "                    # cause random failures on win9x.  Specifically a\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "886", "code": "                    # dialog: \"Your program accessed mem currently in\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "887", "code": "                    # use at xxx\" and a hopeful warning about the\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "888", "code": "                    # stability of your system.  Cost is Ctrl+C wont\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "889", "code": "                    # kill children.\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "890", "code": "                    creationflags |= _subprocess.CREATE_NEW_CONSOLE\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "891", "code": "\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "892", "code": "            # Start the process\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "893", "code": "            try:\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "894", "code": "                try:\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "W", "line": "895", "code": "                    hp, ht, pid, tid = _subprocess.CreateProcess(executable, args,\r\n", "colour": "purple", "author": "tom@organisms.be"}, {"error": "C", "line": "896", "code": "                                         # no special security\r\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "C", "line": "897", "code": "                                         None, None,\r\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "C", "line": "898", "code": "                                         int(not close_fds),\r\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "C", "line": "899", "code": "                                         creationflags,\r\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "C", "line": "900", "code": "                                         env,\r\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "C", "line": "901", "code": "                                         cwd,\r\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "C", "line": "902", "code": "                                         startupinfo)\r\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "C", "line": "903", "code": "                except pywintypes.error as e:\r\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "904", "code": "                    # Translate pywintypes.error to WindowsError, which is\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "905", "code": "                    # a subclass of OSError.  FIXME: We should really\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "906", "code": "                    # translate errno using _sys_errlist (or similar), but\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "907", "code": "                    # how can this be done from Python?\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "E", "line": "908", "code": "                    raise WindowsError(*e.args)\r\n", "colour": "yellow", "author": "tom@organisms.be"}, {"error": "none", "line": "909", "code": "            finally:\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "910", "code": "                # Child is launched. Close the parent's copy of those pipe\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "911", "code": "                # handles that only the child should have open.  You need\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "912", "code": "                # to make sure that no handles to the write end of the\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "913", "code": "                # output pipe are maintained in this process or else the\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "914", "code": "                # pipe will not close when the child process exits and the\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "915", "code": "                # ReadFile will hang.\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "916", "code": "                if p2cread is not None:\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "917", "code": "                    p2cread.Close()\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "918", "code": "                if c2pwrite is not None:\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "919", "code": "                    c2pwrite.Close()\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "920", "code": "                if errwrite is not None:\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "921", "code": "                    errwrite.Close()\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "922", "code": "\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "923", "code": "            # Retain the process handle, but close the thread handle\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "924", "code": "            self._child_created = True\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "W", "line": "925", "code": "            self._handle = hp\r\n", "colour": "purple", "author": "tom@organisms.be"}, {"error": "none", "line": "926", "code": "            self.pid = pid\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "927", "code": "            ht.Close()\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "928", "code": "\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "W", "line": "929", "code": "        def _internal_poll(self, _deadstate=None,\r\n", "colour": "purple", "author": "tom@organisms.be"}, {"error": "C", "line": "930", "code": "                _WaitForSingleObject=_subprocess.WaitForSingleObject,\r\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "C", "line": "931", "code": "                _WAIT_OBJECT_0=_subprocess.WAIT_OBJECT_0,\r\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "C", "line": "932", "code": "                _GetExitCodeProcess=_subprocess.GetExitCodeProcess):\r\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "933", "code": "            \"\"\"Check if child process has terminated.  Returns returncode\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "934", "code": "            attribute.\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "935", "code": "\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "936", "code": "            This method is called by __del__, so it can only refer to objects\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "937", "code": "            in its local scope.\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "938", "code": "\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "939", "code": "            \"\"\"\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "940", "code": "            if self.returncode is None:\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "941", "code": "                if _WaitForSingleObject(self._handle, 0) == _WAIT_OBJECT_0:\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "942", "code": "                    self.returncode = _GetExitCodeProcess(self._handle)\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "943", "code": "            return self.returncode\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "944", "code": "\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "945", "code": "\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "946", "code": "        def wait(self):\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "947", "code": "            \"\"\"Wait for child process to terminate.  Returns returncode\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "948", "code": "            attribute.\"\"\"\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "949", "code": "            if self.returncode is None:\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "950", "code": "                _subprocess.WaitForSingleObject(self._handle,\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "951", "code": "                                                _subprocess.INFINITE)\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "952", "code": "                self.returncode = _subprocess.GetExitCodeProcess(self._handle)\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "953", "code": "            return self.returncode\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "954", "code": "\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "955", "code": "\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "R", "line": "956", "code": "        def _readerthread(self, fh, buffer):\r\n", "colour": "green", "author": "tom@organisms.be"}, {"error": "none", "line": "957", "code": "            buffer.append(fh.read())\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "958", "code": "\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "959", "code": "\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "R", "line": "960", "code": "        def _communicate(self, input):\r\n", "colour": "green", "author": "tom@organisms.be"}, {"error": "none", "line": "961", "code": "            stdout = None # Return\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "962", "code": "            stderr = None # Return\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "963", "code": "\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "964", "code": "            if self.stdout:\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "965", "code": "                stdout = []\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "966", "code": "                stdout_thread = threading.Thread(target=self._readerthread,\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "967", "code": "                                                 args=(self.stdout, stdout))\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "968", "code": "                stdout_thread.setDaemon(True)\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "969", "code": "                stdout_thread.start()\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "970", "code": "            if self.stderr:\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "971", "code": "                stderr = []\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "972", "code": "                stderr_thread = threading.Thread(target=self._readerthread,\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "973", "code": "                                                 args=(self.stderr, stderr))\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "974", "code": "                stderr_thread.setDaemon(True)\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "975", "code": "                stderr_thread.start()\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "976", "code": "\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "977", "code": "            if self.stdin:\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "978", "code": "                if input is not None:\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "979", "code": "                    try:\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "980", "code": "                        self.stdin.write(input)\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "981", "code": "                    except IOError as e:\r\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "982", "code": "                        if e.errno != errno.EPIPE:\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "983", "code": "                            raise\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "984", "code": "                self.stdin.close()\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "985", "code": "\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "986", "code": "            if self.stdout:\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "987", "code": "                stdout_thread.join()\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "988", "code": "            if self.stderr:\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "989", "code": "                stderr_thread.join()\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "990", "code": "\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "991", "code": "            # All data exchanged.  Translate lists into strings.\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "992", "code": "            if stdout is not None:\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "993", "code": "                stdout = stdout[0]\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "994", "code": "            if stderr is not None:\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "995", "code": "                stderr = stderr[0]\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "996", "code": "\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "997", "code": "            # Translate newlines, if requested.  We cannot let the file\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "998", "code": "            # object do the translation: It is based on stdio, which is\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "999", "code": "            # impossible to combine with select (unless forcing no\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1000", "code": "            # buffering).\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1001", "code": "            if self.universal_newlines and hasattr(file, 'newlines'):\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1002", "code": "                if stdout:\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1003", "code": "                    stdout = self._translate_newlines(stdout)\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1004", "code": "                if stderr:\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1005", "code": "                    stderr = self._translate_newlines(stderr)\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1006", "code": "\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1007", "code": "            self.wait()\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1008", "code": "            return (stdout, stderr)\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1009", "code": "\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1010", "code": "        def send_signal(self, sig):\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1011", "code": "            \"\"\"Send a signal to the process\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1012", "code": "            \"\"\"\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1013", "code": "            if sig == signal.SIGTERM:\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1014", "code": "                self.terminate()\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "E", "line": "1015", "code": "            elif sig == signal.CTRL_C_EVENT:\r\n", "colour": "yellow", "author": "tom@organisms.be"}, {"error": "E", "line": "1016", "code": "                os.kill(self.pid, signal.CTRL_C_EVENT)\r\n", "colour": "yellow", "author": "tom@organisms.be"}, {"error": "E", "line": "1017", "code": "            elif sig == signal.CTRL_BREAK_EVENT:\r\n", "colour": "yellow", "author": "tom@organisms.be"}, {"error": "E", "line": "1018", "code": "                os.kill(self.pid, signal.CTRL_BREAK_EVENT)\r\n", "colour": "yellow", "author": "tom@organisms.be"}, {"error": "none", "line": "1019", "code": "            else:\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1020", "code": "                raise ValueError(\"Unsupported signal: {}\".format(sig))\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1021", "code": "\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1022", "code": "        def terminate(self):\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1023", "code": "            \"\"\"Terminates the process\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1024", "code": "            \"\"\"\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1025", "code": "            _subprocess.TerminateProcess(self._handle, 1)\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1026", "code": "\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1027", "code": "        kill = terminate\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1028", "code": "\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1029", "code": "    else:\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1030", "code": "        #\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1031", "code": "        # POSIX methods\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1032", "code": "        #\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "R", "line": "1033", "code": "        def _get_handles(self, stdin, stdout, stderr):\r\n", "colour": "green", "author": "tom@organisms.be"}, {"error": "none", "line": "1034", "code": "            \"\"\"Construct and return tuple with IO objects:\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1035", "code": "            p2cread, p2cwrite, c2pread, c2pwrite, errread, errwrite\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1036", "code": "            \"\"\"\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1037", "code": "            p2cread, p2cwrite = None, None\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1038", "code": "            c2pread, c2pwrite = None, None\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1039", "code": "            errread, errwrite = None, None\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1040", "code": "\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1041", "code": "            if stdin is None:\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1042", "code": "                pass\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1043", "code": "            elif stdin == PIPE:\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1044", "code": "                p2cread, p2cwrite = self.pipe_cloexec()\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1045", "code": "            elif isinstance(stdin, int):\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1046", "code": "                p2cread = stdin\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1047", "code": "            else:\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1048", "code": "                # Assuming file-like object\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1049", "code": "                p2cread = stdin.fileno()\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1050", "code": "\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1051", "code": "            if stdout is None:\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1052", "code": "                pass\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1053", "code": "            elif stdout == PIPE:\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1054", "code": "                c2pread, c2pwrite = self.pipe_cloexec()\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1055", "code": "            elif isinstance(stdout, int):\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1056", "code": "                c2pwrite = stdout\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1057", "code": "            else:\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1058", "code": "                # Assuming file-like object\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1059", "code": "                c2pwrite = stdout.fileno()\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1060", "code": "\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1061", "code": "            if stderr is None:\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1062", "code": "                pass\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1063", "code": "            elif stderr == PIPE:\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1064", "code": "                errread, errwrite = self.pipe_cloexec()\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1065", "code": "            elif stderr == STDOUT:\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1066", "code": "                errwrite = c2pwrite\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1067", "code": "            elif isinstance(stderr, int):\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1068", "code": "                errwrite = stderr\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1069", "code": "            else:\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1070", "code": "                # Assuming file-like object\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1071", "code": "                errwrite = stderr.fileno()\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1072", "code": "\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1073", "code": "            return (p2cread, p2cwrite,\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1074", "code": "                    c2pread, c2pwrite,\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1075", "code": "                    errread, errwrite)\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1076", "code": "\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1077", "code": "\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "R", "line": "1078", "code": "        def _set_cloexec_flag(self, fd, cloexec=True):\r\n", "colour": "green", "author": "tom@organisms.be"}, {"error": "none", "line": "1079", "code": "            try:\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1080", "code": "                cloexec_flag = fcntl.FD_CLOEXEC\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1081", "code": "            except AttributeError:\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1082", "code": "                cloexec_flag = 1\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1083", "code": "\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1084", "code": "            old = fcntl.fcntl(fd, fcntl.F_GETFD)\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1085", "code": "            if cloexec:\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1086", "code": "                fcntl.fcntl(fd, fcntl.F_SETFD, old | cloexec_flag)\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1087", "code": "            else:\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1088", "code": "                fcntl.fcntl(fd, fcntl.F_SETFD, old & ~cloexec_flag)\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1089", "code": "\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1090", "code": "\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1091", "code": "        def pipe_cloexec(self):\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1092", "code": "            \"\"\"Create a pipe with FDs set CLOEXEC.\"\"\"\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1093", "code": "            # Pipes' FDs are set CLOEXEC by default because we don't want them\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1094", "code": "            # to be inherited by other subprocesses: the CLOEXEC flag is removed\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1095", "code": "            # from the child's FDs by _dup2(), between fork() and exec().\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1096", "code": "            # This is not atomic: we would need the pipe2() syscall for that.\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "1097", "code": "            r, w = os.pipe()\r\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "1098", "code": "            self._set_cloexec_flag(r)\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1099", "code": "            self._set_cloexec_flag(w)\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1100", "code": "            return r, w\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1101", "code": "\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1102", "code": "\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "R", "line": "1103", "code": "        def _close_fds(self, but):\r\n", "colour": "green", "author": "tom@organisms.be"}, {"error": "none", "line": "1104", "code": "            if hasattr(os, 'closerange'):\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1105", "code": "                os.closerange(3, but)\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1106", "code": "                os.closerange(but + 1, MAXFD)\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1107", "code": "            else:\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1108", "code": "                for i in xrange(3, MAXFD):\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1109", "code": "                    if i == but:\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1110", "code": "                        continue\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1111", "code": "                    try:\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1112", "code": "                        os.close(i)\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "W", "line": "1113", "code": "                    except:\r\n", "colour": "purple", "author": "tom@organisms.be"}, {"error": "none", "line": "1114", "code": "                        pass\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1115", "code": "\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1116", "code": "\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "R", "line": "1117", "code": "        def _execute_child(self, args, executable, preexec_fn, close_fds,\r\n", "colour": "green", "author": "tom@organisms.be"}, {"error": "W", "line": "1118", "code": "                           cwd, env, universal_newlines,\r\n", "colour": "purple", "author": "tom@organisms.be"}, {"error": "W", "line": "1119", "code": "                           startupinfo, creationflags, shell,\r\n", "colour": "purple", "author": "tom@organisms.be"}, {"error": "none", "line": "1120", "code": "                           p2cread, p2cwrite,\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1121", "code": "                           c2pread, c2pwrite,\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1122", "code": "                           errread, errwrite):\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1123", "code": "            \"\"\"Execute program (POSIX version)\"\"\"\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1124", "code": "\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1125", "code": "            if isinstance(args, types.StringTypes):\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1126", "code": "                args = [args]\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1127", "code": "            else:\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1128", "code": "                args = list(args)\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1129", "code": "\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1130", "code": "            if shell:\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1131", "code": "                args = [\"/bin/sh\", \"-c\"] + args\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1132", "code": "                if executable:\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1133", "code": "                    args[0] = executable\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1134", "code": "\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1135", "code": "            if executable is None:\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1136", "code": "                executable = args[0]\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1137", "code": "\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1138", "code": "            # For transferring possible exec failure from child to parent\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1139", "code": "            # The first char specifies the exception type: 0 means\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1140", "code": "            # OSError, 1 means some other error.\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1141", "code": "            errpipe_read, errpipe_write = self.pipe_cloexec()\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1142", "code": "            try:\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1143", "code": "                try:\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1144", "code": "                    gc_was_enabled = gc.isenabled()\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1145", "code": "                    # Disable gc to avoid bug where gc -> file_dealloc ->\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1146", "code": "                    # write to stderr -> hang.  http://bugs.python.org/issue1336\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1147", "code": "                    gc.disable()\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1148", "code": "                    try:\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1149", "code": "                        self.pid = os.fork()\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1150", "code": "                    except:\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1151", "code": "                        if gc_was_enabled:\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1152", "code": "                            gc.enable()\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1153", "code": "                        raise\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1154", "code": "                    self._child_created = True\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1155", "code": "                    if self.pid == 0:\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1156", "code": "                        # Child\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1157", "code": "                        try:\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1158", "code": "                            # Close parent's pipe ends\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1159", "code": "                            if p2cwrite is not None:\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1160", "code": "                                os.close(p2cwrite)\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1161", "code": "                            if c2pread is not None:\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1162", "code": "                                os.close(c2pread)\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1163", "code": "                            if errread is not None:\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1164", "code": "                                os.close(errread)\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1165", "code": "                            os.close(errpipe_read)\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1166", "code": "\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1167", "code": "                            # When duping fds, if there arises a situation\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1168", "code": "                            # where one of the fds is either 0, 1 or 2, it\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1169", "code": "                            # is possible that it is overwritten (#12607).\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1170", "code": "                            if c2pwrite == 0:\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1171", "code": "                                c2pwrite = os.dup(c2pwrite)\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1172", "code": "                            if errwrite == 0 or errwrite == 1:\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1173", "code": "                                errwrite = os.dup(errwrite)\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1174", "code": "\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1175", "code": "                            # Dup fds for child\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "1176", "code": "                            def _dup2(a, b):\r\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "1177", "code": "                                # dup2() removes the CLOEXEC flag but\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1178", "code": "                                # we must do it ourselves if dup2()\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1179", "code": "                                # would be a no-op (issue #10806).\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1180", "code": "                                if a == b:\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1181", "code": "                                    self._set_cloexec_flag(a, False)\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1182", "code": "                                elif a is not None:\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1183", "code": "                                    os.dup2(a, b)\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1184", "code": "                            _dup2(p2cread, 0)\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1185", "code": "                            _dup2(c2pwrite, 1)\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1186", "code": "                            _dup2(errwrite, 2)\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1187", "code": "\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1188", "code": "                            # Close pipe fds.  Make sure we don't close the\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1189", "code": "                            # same fd more than once, or standard fds.\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1190", "code": "                            closed = set([None])\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "1191", "code": "                            for fd in [p2cread, c2pwrite, errwrite]:\r\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "1192", "code": "                                if fd not in closed and fd > 2:\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1193", "code": "                                    os.close(fd)\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1194", "code": "                                    closed.add(fd)\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1195", "code": "\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1196", "code": "                            # Close all other fds, if asked for\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1197", "code": "                            if close_fds:\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1198", "code": "                                self._close_fds(but=errpipe_write)\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1199", "code": "\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1200", "code": "                            if cwd is not None:\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1201", "code": "                                os.chdir(cwd)\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1202", "code": "\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1203", "code": "                            if preexec_fn:\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1204", "code": "                                preexec_fn()\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1205", "code": "\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1206", "code": "                            if env is None:\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1207", "code": "                                os.execvp(executable, args)\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1208", "code": "                            else:\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1209", "code": "                                os.execvpe(executable, args, env)\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1210", "code": "\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "W", "line": "1211", "code": "                        except:\r\n", "colour": "purple", "author": "tom@organisms.be"}, {"error": "C", "line": "1212", "code": "                            exc_type, exc_value, tb = sys.exc_info()\r\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "C", "line": "1213", "code": "                            # Save the traceback and attach it to the exception object\r\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "1214", "code": "                            exc_lines = traceback.format_exception(exc_type,\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1215", "code": "                                                                   exc_value,\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1216", "code": "                                                                   tb)\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1217", "code": "                            exc_value.child_traceback = ''.join(exc_lines)\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1218", "code": "                            os.write(errpipe_write, pickle.dumps(exc_value))\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1219", "code": "\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1220", "code": "                        # This exitcode won't be reported to applications, so it\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1221", "code": "                        # really doesn't matter what we return.\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "W", "line": "1222", "code": "                        os._exit(255)\r\n", "colour": "purple", "author": "tom@organisms.be"}, {"error": "none", "line": "1223", "code": "\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1224", "code": "                    # Parent\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1225", "code": "                    if gc_was_enabled:\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1226", "code": "                        gc.enable()\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1227", "code": "                finally:\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1228", "code": "                    # be sure the FD is closed no matter what\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1229", "code": "                    os.close(errpipe_write)\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1230", "code": "\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1231", "code": "                if p2cread is not None and p2cwrite is not None:\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1232", "code": "                    os.close(p2cread)\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1233", "code": "                if c2pwrite is not None and c2pread is not None:\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1234", "code": "                    os.close(c2pwrite)\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1235", "code": "                if errwrite is not None and errread is not None:\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1236", "code": "                    os.close(errwrite)\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1237", "code": "\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1238", "code": "                # Wait for exec to fail or succeed; possibly raising exception\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1239", "code": "                # Exception limited to 1M\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1240", "code": "                data = _eintr_retry_call(os.read, errpipe_read, 1048576)\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1241", "code": "            finally:\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1242", "code": "                # be sure the FD is closed no matter what\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1243", "code": "                os.close(errpipe_read)\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1244", "code": "\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1245", "code": "            if data != \"\":\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1246", "code": "                try:\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1247", "code": "                    _eintr_retry_call(os.waitpid, self.pid, 0)\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "1248", "code": "                except OSError as e:\r\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "1249", "code": "                    if e.errno != errno.ECHILD:\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1250", "code": "                        raise\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1251", "code": "                child_exception = pickle.loads(data)\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "1252", "code": "                for fd in (p2cwrite, c2pread, errread):\r\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "1253", "code": "                    if fd is not None:\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1254", "code": "                        os.close(fd)\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1255", "code": "                raise child_exception\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1256", "code": "\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1257", "code": "\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "1258", "code": "        def _handle_exitstatus(self, sts, _WIFSIGNALED=os.WIFSIGNALED,\r\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "C", "line": "1259", "code": "                _WTERMSIG=os.WTERMSIG, _WIFEXITED=os.WIFEXITED,\r\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "C", "line": "1260", "code": "                _WEXITSTATUS=os.WEXITSTATUS):\r\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "1261", "code": "            # This method is called (indirectly) by __del__, so it cannot\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1262", "code": "            # refer to anything outside of its local scope.\"\"\"\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1263", "code": "            if _WIFSIGNALED(sts):\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1264", "code": "                self.returncode = -_WTERMSIG(sts)\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1265", "code": "            elif _WIFEXITED(sts):\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1266", "code": "                self.returncode = _WEXITSTATUS(sts)\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1267", "code": "            else:\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1268", "code": "                # Should never happen\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1269", "code": "                raise RuntimeError(\"Unknown child exit status!\")\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1270", "code": "\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1271", "code": "\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "1272", "code": "        def _internal_poll(self, _deadstate=None, _waitpid=os.waitpid,\r\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "C", "line": "1273", "code": "                _WNOHANG=os.WNOHANG, _os_error=os.error):\r\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "1274", "code": "            \"\"\"Check if child process has terminated.  Returns returncode\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1275", "code": "            attribute.\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1276", "code": "\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1277", "code": "            This method is called by __del__, so it cannot reference anything\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1278", "code": "            outside of the local scope (nor can any methods it calls).\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1279", "code": "\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1280", "code": "            \"\"\"\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1281", "code": "            if self.returncode is None:\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1282", "code": "                try:\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1283", "code": "                    pid, sts = _waitpid(self.pid, _WNOHANG)\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1284", "code": "                    if pid == self.pid:\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1285", "code": "                        self._handle_exitstatus(sts)\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1286", "code": "                except _os_error:\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1287", "code": "                    if _deadstate is not None:\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1288", "code": "                        self.returncode = _deadstate\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1289", "code": "            return self.returncode\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1290", "code": "\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1291", "code": "\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1292", "code": "        def wait(self):\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1293", "code": "            \"\"\"Wait for child process to terminate.  Returns returncode\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1294", "code": "            attribute.\"\"\"\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1295", "code": "            if self.returncode is None:\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1296", "code": "                try:\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "W", "line": "1297", "code": "                    pid, sts = _eintr_retry_call(os.waitpid, self.pid, 0)\r\n", "colour": "purple", "author": "tom@organisms.be"}, {"error": "C", "line": "1298", "code": "                except OSError as e:\r\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "1299", "code": "                    if e.errno != errno.ECHILD:\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1300", "code": "                        raise\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1301", "code": "                    # This happens if SIGCLD is set to be ignored or waiting\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1302", "code": "                    # for child processes has otherwise been disabled for our\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1303", "code": "                    # process.  This child is dead, we can't get the status.\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1304", "code": "                    sts = 0\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1305", "code": "                self._handle_exitstatus(sts)\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1306", "code": "            return self.returncode\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1307", "code": "\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1308", "code": "\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "W", "line": "1309", "code": "        def _communicate(self, input):\r\n", "colour": "purple", "author": "tom@organisms.be"}, {"error": "none", "line": "1310", "code": "            if self.stdin:\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1311", "code": "                # Flush stdio buffer.  This might block, if the user has\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1312", "code": "                # been writing to .stdin in an uncontrolled fashion.\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1313", "code": "                self.stdin.flush()\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1314", "code": "                if not input:\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1315", "code": "                    self.stdin.close()\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1316", "code": "\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1317", "code": "            if _has_poll:\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1318", "code": "                stdout, stderr = self._communicate_with_poll(input)\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1319", "code": "            else:\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1320", "code": "                stdout, stderr = self._communicate_with_select(input)\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1321", "code": "\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1322", "code": "            # All data exchanged.  Translate lists into strings.\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1323", "code": "            if stdout is not None:\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1324", "code": "                stdout = ''.join(stdout)\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1325", "code": "            if stderr is not None:\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1326", "code": "                stderr = ''.join(stderr)\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1327", "code": "\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1328", "code": "            # Translate newlines, if requested.  We cannot let the file\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1329", "code": "            # object do the translation: It is based on stdio, which is\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1330", "code": "            # impossible to combine with select (unless forcing no\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1331", "code": "            # buffering).\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1332", "code": "            if self.universal_newlines and hasattr(file, 'newlines'):\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1333", "code": "                if stdout:\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1334", "code": "                    stdout = self._translate_newlines(stdout)\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1335", "code": "                if stderr:\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1336", "code": "                    stderr = self._translate_newlines(stderr)\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1337", "code": "\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1338", "code": "            self.wait()\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1339", "code": "            return (stdout, stderr)\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1340", "code": "\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1341", "code": "\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "R", "line": "1342", "code": "        def _communicate_with_poll(self, input):\r\n", "colour": "green", "author": "tom@organisms.be"}, {"error": "none", "line": "1343", "code": "            stdout = None # Return\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1344", "code": "            stderr = None # Return\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1345", "code": "            fd2file = {}\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1346", "code": "            fd2output = {}\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1347", "code": "\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1348", "code": "            poller = select.poll()\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "1349", "code": "            def register_and_append(file_obj, eventmask):\r\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "1350", "code": "                poller.register(file_obj.fileno(), eventmask)\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1351", "code": "                fd2file[file_obj.fileno()] = file_obj\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1352", "code": "\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "1353", "code": "            def close_unregister_and_remove(fd):\r\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "1354", "code": "                poller.unregister(fd)\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1355", "code": "                fd2file[fd].close()\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1356", "code": "                fd2file.pop(fd)\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1357", "code": "\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1358", "code": "            if self.stdin and input:\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1359", "code": "                register_and_append(self.stdin, select.POLLOUT)\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1360", "code": "\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "1361", "code": "            select_POLLIN_POLLPRI = select.POLLIN | select.POLLPRI\r\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "1362", "code": "            if self.stdout:\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1363", "code": "                register_and_append(self.stdout, select_POLLIN_POLLPRI)\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1364", "code": "                fd2output[self.stdout.fileno()] = stdout = []\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1365", "code": "            if self.stderr:\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1366", "code": "                register_and_append(self.stderr, select_POLLIN_POLLPRI)\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1367", "code": "                fd2output[self.stderr.fileno()] = stderr = []\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1368", "code": "\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1369", "code": "            input_offset = 0\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1370", "code": "            while fd2file:\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1371", "code": "                try:\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1372", "code": "                    ready = poller.poll()\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "1373", "code": "                except select.error as e:\r\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "1374", "code": "                    if e.args[0] == errno.EINTR:\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1375", "code": "                        continue\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1376", "code": "                    raise\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1377", "code": "\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "1378", "code": "                for fd, mode in ready:\r\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "1379", "code": "                    if mode & select.POLLOUT:\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1380", "code": "                        chunk = input[input_offset : input_offset + _PIPE_BUF]\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1381", "code": "                        try:\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1382", "code": "                            input_offset += os.write(fd, chunk)\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "1383", "code": "                        except OSError as e:\r\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "1384", "code": "                            if e.errno == errno.EPIPE:\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1385", "code": "                                close_unregister_and_remove(fd)\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1386", "code": "                            else:\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1387", "code": "                                raise\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1388", "code": "                        else:\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1389", "code": "                            if input_offset >= len(input):\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1390", "code": "                                close_unregister_and_remove(fd)\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1391", "code": "                    elif mode & select_POLLIN_POLLPRI:\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1392", "code": "                        data = os.read(fd, 4096)\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1393", "code": "                        if not data:\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1394", "code": "                            close_unregister_and_remove(fd)\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1395", "code": "                        fd2output[fd].append(data)\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1396", "code": "                    else:\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1397", "code": "                        # Ignore hang up or errors.\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1398", "code": "                        close_unregister_and_remove(fd)\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1399", "code": "\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1400", "code": "            return (stdout, stderr)\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1401", "code": "\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1402", "code": "\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "R", "line": "1403", "code": "        def _communicate_with_select(self, input):\r\n", "colour": "green", "author": "tom@organisms.be"}, {"error": "none", "line": "1404", "code": "            read_set = []\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1405", "code": "            write_set = []\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1406", "code": "            stdout = None # Return\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1407", "code": "            stderr = None # Return\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1408", "code": "\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1409", "code": "            if self.stdin and input:\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1410", "code": "                write_set.append(self.stdin)\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1411", "code": "            if self.stdout:\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1412", "code": "                read_set.append(self.stdout)\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1413", "code": "                stdout = []\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1414", "code": "            if self.stderr:\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1415", "code": "                read_set.append(self.stderr)\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1416", "code": "                stderr = []\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1417", "code": "\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1418", "code": "            input_offset = 0\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1419", "code": "            while read_set or write_set:\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1420", "code": "                try:\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "W", "line": "1421", "code": "                    rlist, wlist, xlist = select.select(read_set, write_set, [])\r\n", "colour": "purple", "author": "tom@organisms.be"}, {"error": "C", "line": "1422", "code": "                except select.error as e:\r\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "1423", "code": "                    if e.args[0] == errno.EINTR:\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1424", "code": "                        continue\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1425", "code": "                    raise\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1426", "code": "\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1427", "code": "                if self.stdin in wlist:\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1428", "code": "                    chunk = input[input_offset : input_offset + _PIPE_BUF]\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1429", "code": "                    try:\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1430", "code": "                        bytes_written = os.write(self.stdin.fileno(), chunk)\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "1431", "code": "                    except OSError as e:\r\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "1432", "code": "                        if e.errno == errno.EPIPE:\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1433", "code": "                            self.stdin.close()\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1434", "code": "                            write_set.remove(self.stdin)\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1435", "code": "                        else:\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1436", "code": "                            raise\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1437", "code": "                    else:\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1438", "code": "                        input_offset += bytes_written\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1439", "code": "                        if input_offset >= len(input):\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1440", "code": "                            self.stdin.close()\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1441", "code": "                            write_set.remove(self.stdin)\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1442", "code": "\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1443", "code": "                if self.stdout in rlist:\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1444", "code": "                    data = os.read(self.stdout.fileno(), 1024)\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1445", "code": "                    if data == \"\":\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1446", "code": "                        self.stdout.close()\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1447", "code": "                        read_set.remove(self.stdout)\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1448", "code": "                    stdout.append(data)\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1449", "code": "\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1450", "code": "                if self.stderr in rlist:\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1451", "code": "                    data = os.read(self.stderr.fileno(), 1024)\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1452", "code": "                    if data == \"\":\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1453", "code": "                        self.stderr.close()\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1454", "code": "                        read_set.remove(self.stderr)\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1455", "code": "                    stderr.append(data)\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1456", "code": "\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1457", "code": "            return (stdout, stderr)\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1458", "code": "\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1459", "code": "\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1460", "code": "        def send_signal(self, sig):\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1461", "code": "            \"\"\"Send a signal to the process\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1462", "code": "            \"\"\"\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1463", "code": "            os.kill(self.pid, sig)\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1464", "code": "\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1465", "code": "        def terminate(self):\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1466", "code": "            \"\"\"Terminate the process with SIGTERM\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1467", "code": "            \"\"\"\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1468", "code": "            self.send_signal(signal.SIGTERM)\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1469", "code": "\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1470", "code": "        def kill(self):\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1471", "code": "            \"\"\"Kill the process with SIGKILL\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1472", "code": "            \"\"\"\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1473", "code": "            self.send_signal(signal.SIGKILL)\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1474", "code": "\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1475", "code": "\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "1476", "code": "def _demo_posix():\r\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "1477", "code": "    #\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1478", "code": "    # Example 1: Simple redirection: Get process list\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1479", "code": "    #\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1480", "code": "    plist = Popen([\"ps\"], stdout=PIPE).communicate()[0]\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1481", "code": "    print \"Process list:\"\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1482", "code": "    print plist\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1483", "code": "\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1484", "code": "    #\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1485", "code": "    # Example 2: Change uid before executing child\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1486", "code": "    #\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1487", "code": "    if os.getuid() == 0:\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "1488", "code": "        p = Popen([\"id\"], preexec_fn=lambda: os.setuid(100))\r\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "1489", "code": "        p.wait()\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1490", "code": "\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1491", "code": "    #\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1492", "code": "    # Example 3: Connecting several subprocesses\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1493", "code": "    #\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1494", "code": "    print \"Looking for 'hda'...\"\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "1495", "code": "    p1 = Popen([\"dmesg\"], stdout=PIPE)\r\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "C", "line": "1496", "code": "    p2 = Popen([\"grep\", \"hda\"], stdin=p1.stdout, stdout=PIPE)\r\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "1497", "code": "    print repr(p2.communicate()[0])\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1498", "code": "\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1499", "code": "    #\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1500", "code": "    # Example 4: Catch execution error\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1501", "code": "    #\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1502", "code": "    print\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1503", "code": "    print \"Trying a weird file...\"\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1504", "code": "    try:\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1505", "code": "        print Popen([\"/this/path/does/not/exist\"]).communicate()\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "1506", "code": "    except OSError, e:\r\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "1507", "code": "        if e.errno == errno.ENOENT:\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1508", "code": "            print \"The file didn't exist.  I thought so...\"\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1509", "code": "            print \"Child traceback:\"\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1510", "code": "            print e.child_traceback\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1511", "code": "        else:\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1512", "code": "            print \"Error\", e.errno\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1513", "code": "    else:\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1514", "code": "        print >>sys.stderr, \"Gosh.  No error.\"\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1515", "code": "\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1516", "code": "\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "1517", "code": "def _demo_windows():\r\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "1518", "code": "    #\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1519", "code": "    # Example 1: Connecting several subprocesses\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1520", "code": "    #\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1521", "code": "    print \"Looking for 'PROMPT' in set output...\"\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "1522", "code": "    p1 = Popen(\"set\", stdout=PIPE, shell=True)\r\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "C", "line": "1523", "code": "    p2 = Popen('find \"PROMPT\"', stdin=p1.stdout, stdout=PIPE)\r\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "1524", "code": "    print repr(p2.communicate()[0])\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1525", "code": "\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1526", "code": "    #\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1527", "code": "    # Example 2: Simple execution of program\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1528", "code": "    #\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1529", "code": "    print \"Executing calc...\"\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "1530", "code": "    p = Popen(\"calc\")\r\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "1531", "code": "    p.wait()\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1532", "code": "\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1533", "code": "\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1534", "code": "if __name__ == \"__main__\":\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1535", "code": "    if mswindows:\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1536", "code": "        _demo_windows()\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1537", "code": "    else:\r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "1538", "code": "        _demo_posix()\r\n", "colour": "black", "author": "tom@organisms.be"}]]}