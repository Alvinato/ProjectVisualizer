{"path": "/home/asumal/git/cs410/pattern/pattern/server/cherrypy/cherrypy/_cpwsgi.py", "lines": [[{"index": "1", "colour": "orange", "code": "\"\"\"WSGI interface (see PEP 333 and 3333).\n", "error": "none", "author": "tom@organisms.be"}, {"index": "2", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "3", "colour": "orange", "code": "Note that WSGI environ keys and values are 'native strings'; that is,\n", "error": "none", "author": "tom@organisms.be"}, {"index": "4", "colour": "orange", "code": "whatever the type of \"\" is. For Python 2, that's a byte string; for Python 3,\n", "error": "none", "author": "tom@organisms.be"}, {"index": "5", "colour": "orange", "code": "it's a unicode string. But PEP 3333 says: \"even if Python's str type is\n", "error": "none", "author": "tom@organisms.be"}, {"index": "6", "colour": "orange", "code": "actually Unicode \"under the hood\", the content of native strings must\n", "error": "none", "author": "tom@organisms.be"}, {"index": "7", "colour": "orange", "code": "still be translatable to bytes via the Latin-1 encoding!\"\n", "error": "none", "author": "tom@organisms.be"}, {"index": "8", "colour": "orange", "code": "\"\"\"\n", "error": "none", "author": "tom@organisms.be"}, {"index": "9", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "10", "colour": "orange", "code": "import sys as _sys\n", "error": "none", "author": "tom@organisms.be"}, {"index": "11", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "12", "colour": "orange", "code": "import cherrypy as _cherrypy\n", "error": "none", "author": "tom@organisms.be"}, {"index": "13", "colour": "orange", "code": "from cherrypy._cpcompat import BytesIO, bytestr, ntob, ntou, py3k, unicodestr\n", "error": "none", "author": "tom@organisms.be"}, {"index": "14", "colour": "orange", "code": "from cherrypy import _cperror\n", "error": "none", "author": "tom@organisms.be"}, {"index": "15", "colour": "orange", "code": "from cherrypy.lib import httputil\n", "error": "none", "author": "tom@organisms.be"}, {"index": "16", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "17", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "18", "colour": "orange", "code": "def downgrade_wsgi_ux_to_1x(environ):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "19", "colour": "orange", "code": "    \"\"\"Return a new environ dict for WSGI 1.x from the given WSGI u.x environ.\"\"\"\n", "error": "none", "author": "tom@organisms.be"}, {"index": "20", "colour": "orange", "code": "    env1x = {}\n", "error": "none", "author": "tom@organisms.be"}, {"index": "21", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "22", "colour": "orange", "code": "    url_encoding = environ[ntou('wsgi.url_encoding')]\n", "error": "none", "author": "tom@organisms.be"}, {"index": "23", "colour": "orange", "code": "    for k, v in list(environ.items()):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "24", "colour": "orange", "code": "        if k in [ntou('PATH_INFO'), ntou('SCRIPT_NAME'), ntou('QUERY_STRING')]:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "25", "colour": "orange", "code": "            v = v.encode(url_encoding)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "26", "colour": "orange", "code": "        elif isinstance(v, unicodestr):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "27", "colour": "orange", "code": "            v = v.encode('ISO-8859-1')\n", "error": "none", "author": "tom@organisms.be"}, {"index": "28", "colour": "orange", "code": "        env1x[k.encode('ISO-8859-1')] = v\n", "error": "none", "author": "tom@organisms.be"}, {"index": "29", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "30", "colour": "orange", "code": "    return env1x\n", "error": "none", "author": "tom@organisms.be"}, {"index": "31", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "32", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "33", "colour": "blue", "code": "class VirtualHost(object):\n", "error": "R", "author": "tom@organisms.be"}, {"index": "34", "colour": "orange", "code": "    \"\"\"Select a different WSGI application based on the Host header.\n", "error": "none", "author": "tom@organisms.be"}, {"index": "35", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "36", "colour": "orange", "code": "    This can be useful when running multiple sites within one CP server.\n", "error": "none", "author": "tom@organisms.be"}, {"index": "37", "colour": "orange", "code": "    It allows several domains to point to different applications. For example::\n", "error": "none", "author": "tom@organisms.be"}, {"index": "38", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "39", "colour": "orange", "code": "        root = Root()\n", "error": "none", "author": "tom@organisms.be"}, {"index": "40", "colour": "orange", "code": "        RootApp = cherrypy.Application(root)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "41", "colour": "orange", "code": "        Domain2App = cherrypy.Application(root)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "42", "colour": "orange", "code": "        SecureApp = cherrypy.Application(Secure())\n", "error": "none", "author": "tom@organisms.be"}, {"index": "43", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "44", "colour": "orange", "code": "        vhost = cherrypy._cpwsgi.VirtualHost(RootApp,\n", "error": "none", "author": "tom@organisms.be"}, {"index": "45", "colour": "orange", "code": "            domains={'www.domain2.example': Domain2App,\n", "error": "none", "author": "tom@organisms.be"}, {"index": "46", "colour": "orange", "code": "                     'www.domain2.example:443': SecureApp,\n", "error": "none", "author": "tom@organisms.be"}, {"index": "47", "colour": "orange", "code": "                     })\n", "error": "none", "author": "tom@organisms.be"}, {"index": "48", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "49", "colour": "orange", "code": "        cherrypy.tree.graft(vhost)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "50", "colour": "orange", "code": "    \"\"\"\n", "error": "none", "author": "tom@organisms.be"}, {"index": "51", "colour": "orange", "code": "    default = None\n", "error": "none", "author": "tom@organisms.be"}, {"index": "52", "colour": "orange", "code": "    \"\"\"Required. The default WSGI application.\"\"\"\n", "error": "none", "author": "tom@organisms.be"}, {"index": "53", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "54", "colour": "orange", "code": "    use_x_forwarded_host = True\n", "error": "none", "author": "tom@organisms.be"}, {"index": "55", "colour": "orange", "code": "    \"\"\"If True (the default), any \"X-Forwarded-Host\"\n", "error": "none", "author": "tom@organisms.be"}, {"index": "56", "colour": "orange", "code": "    request header will be used instead of the \"Host\" header. This\n", "error": "none", "author": "tom@organisms.be"}, {"index": "57", "colour": "orange", "code": "    is commonly added by HTTP servers (such as Apache) when proxying.\"\"\"\n", "error": "none", "author": "tom@organisms.be"}, {"index": "58", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "59", "colour": "orange", "code": "    domains = {}\n", "error": "none", "author": "tom@organisms.be"}, {"index": "60", "colour": "orange", "code": "    \"\"\"A dict of {host header value: application} pairs.\n", "error": "none", "author": "tom@organisms.be"}, {"index": "61", "colour": "orange", "code": "    The incoming \"Host\" request header is looked up in this dict,\n", "error": "none", "author": "tom@organisms.be"}, {"index": "62", "colour": "orange", "code": "    and, if a match is found, the corresponding WSGI application\n", "error": "none", "author": "tom@organisms.be"}, {"index": "63", "colour": "orange", "code": "    will be called instead of the default. Note that you often need\n", "error": "none", "author": "tom@organisms.be"}, {"index": "64", "colour": "orange", "code": "    separate entries for \"example.com\" and \"www.example.com\".\n", "error": "none", "author": "tom@organisms.be"}, {"index": "65", "colour": "orange", "code": "    In addition, \"Host\" headers may contain the port number.\n", "error": "none", "author": "tom@organisms.be"}, {"index": "66", "colour": "orange", "code": "    \"\"\"\n", "error": "none", "author": "tom@organisms.be"}, {"index": "67", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "68", "colour": "orange", "code": "    def __init__(self, default, domains=None, use_x_forwarded_host=True):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "69", "colour": "orange", "code": "        self.default = default\n", "error": "none", "author": "tom@organisms.be"}, {"index": "70", "colour": "orange", "code": "        self.domains = domains or {}\n", "error": "none", "author": "tom@organisms.be"}, {"index": "71", "colour": "orange", "code": "        self.use_x_forwarded_host = use_x_forwarded_host\n", "error": "none", "author": "tom@organisms.be"}, {"index": "72", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "73", "colour": "orange", "code": "    def __call__(self, environ, start_response):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "74", "colour": "orange", "code": "        domain = environ.get('HTTP_HOST', '')\n", "error": "none", "author": "tom@organisms.be"}, {"index": "75", "colour": "orange", "code": "        if self.use_x_forwarded_host:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "76", "colour": "orange", "code": "            domain = environ.get(\"HTTP_X_FORWARDED_HOST\", domain)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "77", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "78", "colour": "orange", "code": "        nextapp = self.domains.get(domain)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "79", "colour": "orange", "code": "        if nextapp is None:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "80", "colour": "orange", "code": "            nextapp = self.default\n", "error": "none", "author": "tom@organisms.be"}, {"index": "81", "colour": "orange", "code": "        return nextapp(environ, start_response)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "82", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "83", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "84", "colour": "blue", "code": "class InternalRedirector(object):\n", "error": "R", "author": "tom@organisms.be"}, {"index": "85", "colour": "orange", "code": "    \"\"\"WSGI middleware that handles raised cherrypy.InternalRedirect.\"\"\"\n", "error": "none", "author": "tom@organisms.be"}, {"index": "86", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "87", "colour": "orange", "code": "    def __init__(self, nextapp, recursive=False):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "88", "colour": "orange", "code": "        self.nextapp = nextapp\n", "error": "none", "author": "tom@organisms.be"}, {"index": "89", "colour": "orange", "code": "        self.recursive = recursive\n", "error": "none", "author": "tom@organisms.be"}, {"index": "90", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "91", "colour": "orange", "code": "    def __call__(self, environ, start_response):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "92", "colour": "orange", "code": "        redirections = []\n", "error": "none", "author": "tom@organisms.be"}, {"index": "93", "colour": "orange", "code": "        while True:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "94", "colour": "orange", "code": "            environ = environ.copy()\n", "error": "none", "author": "tom@organisms.be"}, {"index": "95", "colour": "orange", "code": "            try:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "96", "colour": "orange", "code": "                return self.nextapp(environ, start_response)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "97", "colour": "orange", "code": "            except _cherrypy.InternalRedirect:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "98", "colour": "orange", "code": "                ir = _sys.exc_info()[1]\n", "error": "none", "author": "tom@organisms.be"}, {"index": "99", "colour": "orange", "code": "                sn = environ.get('SCRIPT_NAME', '')\n", "error": "none", "author": "tom@organisms.be"}, {"index": "100", "colour": "orange", "code": "                path = environ.get('PATH_INFO', '')\n", "error": "none", "author": "tom@organisms.be"}, {"index": "101", "colour": "orange", "code": "                qs = environ.get('QUERY_STRING', '')\n", "error": "none", "author": "tom@organisms.be"}, {"index": "102", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "103", "colour": "orange", "code": "                # Add the *previous* path_info + qs to redirections.\n", "error": "none", "author": "tom@organisms.be"}, {"index": "104", "colour": "orange", "code": "                old_uri = sn + path\n", "error": "none", "author": "tom@organisms.be"}, {"index": "105", "colour": "orange", "code": "                if qs:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "106", "colour": "orange", "code": "                    old_uri += \"?\" + qs\n", "error": "none", "author": "tom@organisms.be"}, {"index": "107", "colour": "orange", "code": "                redirections.append(old_uri)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "108", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "109", "colour": "orange", "code": "                if not self.recursive:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "110", "colour": "orange", "code": "                    # Check to see if the new URI has been redirected to already\n", "error": "none", "author": "tom@organisms.be"}, {"index": "111", "colour": "orange", "code": "                    new_uri = sn + ir.path\n", "error": "none", "author": "tom@organisms.be"}, {"index": "112", "colour": "orange", "code": "                    if ir.query_string:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "113", "colour": "orange", "code": "                        new_uri += \"?\" + ir.query_string\n", "error": "none", "author": "tom@organisms.be"}, {"index": "114", "colour": "orange", "code": "                    if new_uri in redirections:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "115", "colour": "orange", "code": "                        ir.request.close()\n", "error": "none", "author": "tom@organisms.be"}, {"index": "116", "colour": "orange", "code": "                        raise RuntimeError(\"InternalRedirector visited the \"\n", "error": "none", "author": "tom@organisms.be"}, {"index": "117", "colour": "orange", "code": "                                           \"same URL twice: %r\" % new_uri)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "118", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "119", "colour": "orange", "code": "                # Munge the environment and try again.\n", "error": "none", "author": "tom@organisms.be"}, {"index": "120", "colour": "orange", "code": "                environ['REQUEST_METHOD'] = \"GET\"\n", "error": "none", "author": "tom@organisms.be"}, {"index": "121", "colour": "orange", "code": "                environ['PATH_INFO'] = ir.path\n", "error": "none", "author": "tom@organisms.be"}, {"index": "122", "colour": "orange", "code": "                environ['QUERY_STRING'] = ir.query_string\n", "error": "none", "author": "tom@organisms.be"}, {"index": "123", "colour": "orange", "code": "                environ['wsgi.input'] = BytesIO()\n", "error": "none", "author": "tom@organisms.be"}, {"index": "124", "colour": "orange", "code": "                environ['CONTENT_LENGTH'] = \"0\"\n", "error": "none", "author": "tom@organisms.be"}, {"index": "125", "colour": "orange", "code": "                environ['cherrypy.previous_request'] = ir.request\n", "error": "none", "author": "tom@organisms.be"}, {"index": "126", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "127", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "128", "colour": "blue", "code": "class ExceptionTrapper(object):\n", "error": "R", "author": "tom@organisms.be"}, {"index": "129", "colour": "orange", "code": "    \"\"\"WSGI middleware that traps exceptions.\"\"\"\n", "error": "none", "author": "tom@organisms.be"}, {"index": "130", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "131", "colour": "orange", "code": "    def __init__(self, nextapp, throws=(KeyboardInterrupt, SystemExit)):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "132", "colour": "orange", "code": "        self.nextapp = nextapp\n", "error": "none", "author": "tom@organisms.be"}, {"index": "133", "colour": "orange", "code": "        self.throws = throws\n", "error": "none", "author": "tom@organisms.be"}, {"index": "134", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "135", "colour": "orange", "code": "    def __call__(self, environ, start_response):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "136", "colour": "orange", "code": "        return _TrappedResponse(self.nextapp, environ, start_response, self.throws)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "137", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "138", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "139", "colour": "orange", "code": "class _TrappedResponse(object):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "140", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "141", "colour": "orange", "code": "    response = iter([])\n", "error": "none", "author": "tom@organisms.be"}, {"index": "142", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "143", "colour": "orange", "code": "    def __init__(self, nextapp, environ, start_response, throws):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "144", "colour": "orange", "code": "        self.nextapp = nextapp\n", "error": "none", "author": "tom@organisms.be"}, {"index": "145", "colour": "orange", "code": "        self.environ = environ\n", "error": "none", "author": "tom@organisms.be"}, {"index": "146", "colour": "orange", "code": "        self.start_response = start_response\n", "error": "none", "author": "tom@organisms.be"}, {"index": "147", "colour": "orange", "code": "        self.throws = throws\n", "error": "none", "author": "tom@organisms.be"}, {"index": "148", "colour": "orange", "code": "        self.started_response = False\n", "error": "none", "author": "tom@organisms.be"}, {"index": "149", "colour": "orange", "code": "        self.response = self.trap(self.nextapp, self.environ, self.start_response)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "150", "colour": "orange", "code": "        self.iter_response = iter(self.response)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "151", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "152", "colour": "orange", "code": "    def __iter__(self):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "153", "colour": "orange", "code": "        self.started_response = True\n", "error": "none", "author": "tom@organisms.be"}, {"index": "154", "colour": "orange", "code": "        return self\n", "error": "none", "author": "tom@organisms.be"}, {"index": "155", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "156", "colour": "orange", "code": "    if py3k:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "157", "colour": "orange", "code": "        def __next__(self):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "158", "colour": "orange", "code": "            return self.trap(next, self.iter_response)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "159", "colour": "orange", "code": "    else:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "160", "colour": "orange", "code": "        def next(self):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "161", "colour": "orange", "code": "            return self.trap(self.iter_response.next)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "162", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "163", "colour": "orange", "code": "    def close(self):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "164", "colour": "orange", "code": "        if hasattr(self.response, 'close'):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "165", "colour": "red", "code": "            self.response.close()\n", "error": "E", "author": "tom@organisms.be"}, {"index": "166", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "167", "colour": "orange", "code": "    def trap(self, func, *args, **kwargs):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "168", "colour": "orange", "code": "        try:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "169", "colour": "orange", "code": "            return func(*args, **kwargs)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "170", "colour": "orange", "code": "        except self.throws:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "171", "colour": "orange", "code": "            raise\n", "error": "none", "author": "tom@organisms.be"}, {"index": "172", "colour": "orange", "code": "        except StopIteration:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "173", "colour": "orange", "code": "            raise\n", "error": "none", "author": "tom@organisms.be"}, {"index": "174", "colour": "green", "code": "        except:\n", "error": "W", "author": "tom@organisms.be"}, {"index": "175", "colour": "orange", "code": "            tb = _cperror.format_exc()\n", "error": "none", "author": "tom@organisms.be"}, {"index": "176", "colour": "orange", "code": "            #print('trapped (started %s):' % self.started_response, tb)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "177", "colour": "orange", "code": "            _cherrypy.log(tb, severity=40)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "178", "colour": "orange", "code": "            if not _cherrypy.request.show_tracebacks:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "179", "colour": "orange", "code": "                tb = \"\"\n", "error": "none", "author": "tom@organisms.be"}, {"index": "180", "colour": "orange", "code": "            s, h, b = _cperror.bare_error(tb)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "181", "colour": "orange", "code": "            if py3k:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "182", "colour": "orange", "code": "                # What fun.\n", "error": "none", "author": "tom@organisms.be"}, {"index": "183", "colour": "orange", "code": "                s = s.decode('ISO-8859-1')\n", "error": "none", "author": "tom@organisms.be"}, {"index": "184", "colour": "orange", "code": "                h = [(k.decode('ISO-8859-1'), v.decode('ISO-8859-1'))\n", "error": "none", "author": "tom@organisms.be"}, {"index": "185", "colour": "orange", "code": "                     for k, v in h]\n", "error": "none", "author": "tom@organisms.be"}, {"index": "186", "colour": "orange", "code": "            if self.started_response:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "187", "colour": "orange", "code": "                # Empty our iterable (so future calls raise StopIteration)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "188", "colour": "orange", "code": "                self.iter_response = iter([])\n", "error": "none", "author": "tom@organisms.be"}, {"index": "189", "colour": "orange", "code": "            else:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "190", "colour": "orange", "code": "                self.iter_response = iter(b)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "191", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "192", "colour": "orange", "code": "            try:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "193", "colour": "orange", "code": "                self.start_response(s, h, _sys.exc_info())\n", "error": "none", "author": "tom@organisms.be"}, {"index": "194", "colour": "orange", "code": "            except:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "195", "colour": "orange", "code": "                # \"The application must not trap any exceptions raised by\n", "error": "none", "author": "tom@organisms.be"}, {"index": "196", "colour": "orange", "code": "                # start_response, if it called start_response with exc_info.\n", "error": "none", "author": "tom@organisms.be"}, {"index": "197", "colour": "orange", "code": "                # Instead, it should allow such exceptions to propagate\n", "error": "none", "author": "tom@organisms.be"}, {"index": "198", "colour": "orange", "code": "                # back to the server or gateway.\"\n", "error": "none", "author": "tom@organisms.be"}, {"index": "199", "colour": "orange", "code": "                # But we still log and call close() to clean up ourselves.\n", "error": "none", "author": "tom@organisms.be"}, {"index": "200", "colour": "orange", "code": "                _cherrypy.log(traceback=True, severity=40)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "201", "colour": "orange", "code": "                raise\n", "error": "none", "author": "tom@organisms.be"}, {"index": "202", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "203", "colour": "orange", "code": "            if self.started_response:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "204", "colour": "orange", "code": "                return ntob(\"\").join(b)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "205", "colour": "orange", "code": "            else:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "206", "colour": "orange", "code": "                return b\n", "error": "none", "author": "tom@organisms.be"}, {"index": "207", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "208", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "209", "colour": "orange", "code": "#                           WSGI-to-CP Adapter                           #\n", "error": "none", "author": "tom@organisms.be"}, {"index": "210", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "211", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "212", "colour": "orange", "code": "class AppResponse(object):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "213", "colour": "orange", "code": "    \"\"\"WSGI response iterable for CherryPy applications.\"\"\"\n", "error": "none", "author": "tom@organisms.be"}, {"index": "214", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "215", "colour": "orange", "code": "    def __init__(self, environ, start_response, cpapp):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "216", "colour": "orange", "code": "        self.cpapp = cpapp\n", "error": "none", "author": "tom@organisms.be"}, {"index": "217", "colour": "orange", "code": "        try:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "218", "colour": "orange", "code": "            if not py3k:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "219", "colour": "orange", "code": "                if environ.get(ntou('wsgi.version')) == (ntou('u'), 0):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "220", "colour": "orange", "code": "                    environ = downgrade_wsgi_ux_to_1x(environ)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "221", "colour": "orange", "code": "            self.environ = environ\n", "error": "none", "author": "tom@organisms.be"}, {"index": "222", "colour": "orange", "code": "            self.run()\n", "error": "none", "author": "tom@organisms.be"}, {"index": "223", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "224", "colour": "orange", "code": "            r = _cherrypy.serving.response\n", "error": "none", "author": "tom@organisms.be"}, {"index": "225", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "226", "colour": "orange", "code": "            outstatus = r.output_status\n", "error": "none", "author": "tom@organisms.be"}, {"index": "227", "colour": "orange", "code": "            if not isinstance(outstatus, bytestr):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "228", "colour": "orange", "code": "                raise TypeError(\"response.output_status is not a byte string.\")\n", "error": "none", "author": "tom@organisms.be"}, {"index": "229", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "230", "colour": "orange", "code": "            outheaders = []\n", "error": "none", "author": "tom@organisms.be"}, {"index": "231", "colour": "orange", "code": "            for k, v in r.header_list:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "232", "colour": "orange", "code": "                if not isinstance(k, bytestr):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "233", "colour": "orange", "code": "                    raise TypeError(\"response.header_list key %r is not a byte string.\" % k)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "234", "colour": "orange", "code": "                if not isinstance(v, bytestr):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "235", "colour": "orange", "code": "                    raise TypeError(\"response.header_list value %r is not a byte string.\" % v)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "236", "colour": "orange", "code": "                outheaders.append((k, v))\n", "error": "none", "author": "tom@organisms.be"}, {"index": "237", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "238", "colour": "orange", "code": "            if py3k:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "239", "colour": "orange", "code": "                # According to PEP 3333, when using Python 3, the response status\n", "error": "none", "author": "tom@organisms.be"}, {"index": "240", "colour": "orange", "code": "                # and headers must be bytes masquerading as unicode; that is, they\n", "error": "none", "author": "tom@organisms.be"}, {"index": "241", "colour": "orange", "code": "                # must be of type \"str\" but are restricted to code points in the\n", "error": "none", "author": "tom@organisms.be"}, {"index": "242", "colour": "orange", "code": "                # \"latin-1\" set.\n", "error": "none", "author": "tom@organisms.be"}, {"index": "243", "colour": "orange", "code": "                outstatus = outstatus.decode('ISO-8859-1')\n", "error": "none", "author": "tom@organisms.be"}, {"index": "244", "colour": "orange", "code": "                outheaders = [(k.decode('ISO-8859-1'), v.decode('ISO-8859-1'))\n", "error": "none", "author": "tom@organisms.be"}, {"index": "245", "colour": "orange", "code": "                              for k, v in outheaders]\n", "error": "none", "author": "tom@organisms.be"}, {"index": "246", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "247", "colour": "orange", "code": "            self.iter_response = iter(r.body)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "248", "colour": "orange", "code": "            self.write = start_response(outstatus, outheaders)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "249", "colour": "orange", "code": "        except:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "250", "colour": "orange", "code": "            self.close()\n", "error": "none", "author": "tom@organisms.be"}, {"index": "251", "colour": "orange", "code": "            raise\n", "error": "none", "author": "tom@organisms.be"}, {"index": "252", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "253", "colour": "orange", "code": "    def __iter__(self):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "254", "colour": "orange", "code": "        return self\n", "error": "none", "author": "tom@organisms.be"}, {"index": "255", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "256", "colour": "orange", "code": "    if py3k:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "257", "colour": "orange", "code": "        def __next__(self):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "258", "colour": "orange", "code": "            return next(self.iter_response)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "259", "colour": "orange", "code": "    else:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "260", "colour": "orange", "code": "        def next(self):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "261", "colour": "orange", "code": "            return self.iter_response.next()\n", "error": "none", "author": "tom@organisms.be"}, {"index": "262", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "263", "colour": "orange", "code": "    def close(self):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "264", "colour": "orange", "code": "        \"\"\"Close and de-reference the current request and response. (Core)\"\"\"\n", "error": "none", "author": "tom@organisms.be"}, {"index": "265", "colour": "orange", "code": "        self.cpapp.release_serving()\n", "error": "none", "author": "tom@organisms.be"}, {"index": "266", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "267", "colour": "blue", "code": "    def run(self):\n", "error": "R", "author": "tom@organisms.be"}, {"index": "268", "colour": "orange", "code": "        \"\"\"Create a Request object using environ.\"\"\"\n", "error": "none", "author": "tom@organisms.be"}, {"index": "269", "colour": "orange", "code": "        env = self.environ.get\n", "error": "none", "author": "tom@organisms.be"}, {"index": "270", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "271", "colour": "orange", "code": "        local = httputil.Host('', int(env('SERVER_PORT', 80)),\n", "error": "none", "author": "tom@organisms.be"}, {"index": "272", "colour": "orange", "code": "                           env('SERVER_NAME', ''))\n", "error": "none", "author": "tom@organisms.be"}, {"index": "273", "colour": "orange", "code": "        remote = httputil.Host(env('REMOTE_ADDR', ''),\n", "error": "none", "author": "tom@organisms.be"}, {"index": "274", "colour": "orange", "code": "                               int(env('REMOTE_PORT', -1) or -1),\n", "error": "none", "author": "tom@organisms.be"}, {"index": "275", "colour": "orange", "code": "                               env('REMOTE_HOST', ''))\n", "error": "none", "author": "tom@organisms.be"}, {"index": "276", "colour": "orange", "code": "        scheme = env('wsgi.url_scheme')\n", "error": "none", "author": "tom@organisms.be"}, {"index": "277", "colour": "orange", "code": "        sproto = env('ACTUAL_SERVER_PROTOCOL', \"HTTP/1.1\")\n", "error": "none", "author": "tom@organisms.be"}, {"index": "278", "colour": "green", "code": "        request, resp = self.cpapp.get_serving(local, remote, scheme, sproto)\n", "error": "W", "author": "tom@organisms.be"}, {"index": "279", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "280", "colour": "orange", "code": "        # LOGON_USER is served by IIS, and is the name of the\n", "error": "none", "author": "tom@organisms.be"}, {"index": "281", "colour": "orange", "code": "        # user after having been mapped to a local account.\n", "error": "none", "author": "tom@organisms.be"}, {"index": "282", "colour": "orange", "code": "        # Both IIS and Apache set REMOTE_USER, when possible.\n", "error": "none", "author": "tom@organisms.be"}, {"index": "283", "colour": "orange", "code": "        request.login = env('LOGON_USER') or env('REMOTE_USER') or None\n", "error": "none", "author": "tom@organisms.be"}, {"index": "284", "colour": "orange", "code": "        request.multithread = self.environ['wsgi.multithread']\n", "error": "none", "author": "tom@organisms.be"}, {"index": "285", "colour": "orange", "code": "        request.multiprocess = self.environ['wsgi.multiprocess']\n", "error": "none", "author": "tom@organisms.be"}, {"index": "286", "colour": "orange", "code": "        request.wsgi_environ = self.environ\n", "error": "none", "author": "tom@organisms.be"}, {"index": "287", "colour": "orange", "code": "        request.prev = env('cherrypy.previous_request', None)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "288", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "289", "colour": "orange", "code": "        meth = self.environ['REQUEST_METHOD']\n", "error": "none", "author": "tom@organisms.be"}, {"index": "290", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "291", "colour": "orange", "code": "        path = httputil.urljoin(self.environ.get('SCRIPT_NAME', ''),\n", "error": "none", "author": "tom@organisms.be"}, {"index": "292", "colour": "orange", "code": "                                self.environ.get('PATH_INFO', ''))\n", "error": "none", "author": "tom@organisms.be"}, {"index": "293", "colour": "orange", "code": "        qs = self.environ.get('QUERY_STRING', '')\n", "error": "none", "author": "tom@organisms.be"}, {"index": "294", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "295", "colour": "orange", "code": "        if py3k:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "296", "colour": "orange", "code": "            # This isn't perfect; if the given PATH_INFO is in the wrong encoding,\n", "error": "none", "author": "tom@organisms.be"}, {"index": "297", "colour": "orange", "code": "            # it may fail to match the appropriate config section URI. But meh.\n", "error": "none", "author": "tom@organisms.be"}, {"index": "298", "colour": "orange", "code": "            old_enc = self.environ.get('wsgi.url_encoding', 'ISO-8859-1')\n", "error": "none", "author": "tom@organisms.be"}, {"index": "299", "colour": "orange", "code": "            new_enc = self.cpapp.find_config(self.environ.get('PATH_INFO', ''),\n", "error": "none", "author": "tom@organisms.be"}, {"index": "300", "colour": "orange", "code": "                                             \"request.uri_encoding\", 'utf-8')\n", "error": "none", "author": "tom@organisms.be"}, {"index": "301", "colour": "orange", "code": "            if new_enc.lower() != old_enc.lower():\n", "error": "none", "author": "tom@organisms.be"}, {"index": "302", "colour": "orange", "code": "                # Even though the path and qs are unicode, the WSGI server is\n", "error": "none", "author": "tom@organisms.be"}, {"index": "303", "colour": "orange", "code": "                # required by PEP 3333 to coerce them to ISO-8859-1 masquerading\n", "error": "none", "author": "tom@organisms.be"}, {"index": "304", "colour": "orange", "code": "                # as unicode. So we have to encode back to bytes and then decode\n", "error": "none", "author": "tom@organisms.be"}, {"index": "305", "colour": "orange", "code": "                # again using the \"correct\" encoding.\n", "error": "none", "author": "tom@organisms.be"}, {"index": "306", "colour": "orange", "code": "                try:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "307", "colour": "orange", "code": "                    u_path = path.encode(old_enc).decode(new_enc)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "308", "colour": "orange", "code": "                    u_qs = qs.encode(old_enc).decode(new_enc)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "309", "colour": "orange", "code": "                except (UnicodeEncodeError, UnicodeDecodeError):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "310", "colour": "orange", "code": "                    # Just pass them through without transcoding and hope.\n", "error": "none", "author": "tom@organisms.be"}, {"index": "311", "colour": "orange", "code": "                    pass\n", "error": "none", "author": "tom@organisms.be"}, {"index": "312", "colour": "orange", "code": "                else:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "313", "colour": "orange", "code": "                    # Only set transcoded values if they both succeed.\n", "error": "none", "author": "tom@organisms.be"}, {"index": "314", "colour": "orange", "code": "                    path = u_path\n", "error": "none", "author": "tom@organisms.be"}, {"index": "315", "colour": "orange", "code": "                    qs = u_qs\n", "error": "none", "author": "tom@organisms.be"}, {"index": "316", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "317", "colour": "orange", "code": "        rproto = self.environ.get('SERVER_PROTOCOL')\n", "error": "none", "author": "tom@organisms.be"}, {"index": "318", "colour": "orange", "code": "        headers = self.translate_headers(self.environ)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "319", "colour": "orange", "code": "        rfile = self.environ['wsgi.input']\n", "error": "none", "author": "tom@organisms.be"}, {"index": "320", "colour": "orange", "code": "        request.run(meth, path, qs, rproto, headers, rfile)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "321", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "322", "colour": "orange", "code": "    headerNames = {'HTTP_CGI_AUTHORIZATION': 'Authorization',\n", "error": "none", "author": "tom@organisms.be"}, {"index": "323", "colour": "orange", "code": "                   'CONTENT_LENGTH': 'Content-Length',\n", "error": "none", "author": "tom@organisms.be"}, {"index": "324", "colour": "orange", "code": "                   'CONTENT_TYPE': 'Content-Type',\n", "error": "none", "author": "tom@organisms.be"}, {"index": "325", "colour": "orange", "code": "                   'REMOTE_HOST': 'Remote-Host',\n", "error": "none", "author": "tom@organisms.be"}, {"index": "326", "colour": "orange", "code": "                   'REMOTE_ADDR': 'Remote-Addr',\n", "error": "none", "author": "tom@organisms.be"}, {"index": "327", "colour": "orange", "code": "                   }\n", "error": "none", "author": "tom@organisms.be"}, {"index": "328", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "329", "colour": "orange", "code": "    def translate_headers(self, environ):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "330", "colour": "orange", "code": "        \"\"\"Translate CGI-environ header names to HTTP header names.\"\"\"\n", "error": "none", "author": "tom@organisms.be"}, {"index": "331", "colour": "orange", "code": "        for cgiName in environ:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "332", "colour": "orange", "code": "            # We assume all incoming header keys are uppercase already.\n", "error": "none", "author": "tom@organisms.be"}, {"index": "333", "colour": "orange", "code": "            if cgiName in self.headerNames:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "334", "colour": "orange", "code": "                yield self.headerNames[cgiName], environ[cgiName]\n", "error": "none", "author": "tom@organisms.be"}, {"index": "335", "colour": "orange", "code": "            elif cgiName[:5] == \"HTTP_\":\n", "error": "none", "author": "tom@organisms.be"}, {"index": "336", "colour": "orange", "code": "                # Hackish attempt at recovering original header names.\n", "error": "none", "author": "tom@organisms.be"}, {"index": "337", "colour": "orange", "code": "                translatedHeader = cgiName[5:].replace(\"_\", \"-\")\n", "error": "none", "author": "tom@organisms.be"}, {"index": "338", "colour": "orange", "code": "                yield translatedHeader, environ[cgiName]\n", "error": "none", "author": "tom@organisms.be"}, {"index": "339", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "340", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "341", "colour": "orange", "code": "class CPWSGIApp(object):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "342", "colour": "orange", "code": "    \"\"\"A WSGI application object for a CherryPy Application.\"\"\"\n", "error": "none", "author": "tom@organisms.be"}, {"index": "343", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "344", "colour": "orange", "code": "    pipeline = [('ExceptionTrapper', ExceptionTrapper),\n", "error": "none", "author": "tom@organisms.be"}, {"index": "345", "colour": "orange", "code": "                ('InternalRedirector', InternalRedirector),\n", "error": "none", "author": "tom@organisms.be"}, {"index": "346", "colour": "orange", "code": "                ]\n", "error": "none", "author": "tom@organisms.be"}, {"index": "347", "colour": "orange", "code": "    \"\"\"A list of (name, wsgiapp) pairs. Each 'wsgiapp' MUST be a\n", "error": "none", "author": "tom@organisms.be"}, {"index": "348", "colour": "orange", "code": "    constructor that takes an initial, positional 'nextapp' argument,\n", "error": "none", "author": "tom@organisms.be"}, {"index": "349", "colour": "orange", "code": "    plus optional keyword arguments, and returns a WSGI application\n", "error": "none", "author": "tom@organisms.be"}, {"index": "350", "colour": "orange", "code": "    (that takes environ and start_response arguments). The 'name' can\n", "error": "none", "author": "tom@organisms.be"}, {"index": "351", "colour": "orange", "code": "    be any you choose, and will correspond to keys in self.config.\"\"\"\n", "error": "none", "author": "tom@organisms.be"}, {"index": "352", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "353", "colour": "orange", "code": "    head = None\n", "error": "none", "author": "tom@organisms.be"}, {"index": "354", "colour": "orange", "code": "    \"\"\"Rather than nest all apps in the pipeline on each call, it's only\n", "error": "none", "author": "tom@organisms.be"}, {"index": "355", "colour": "orange", "code": "    done the first time, and the result is memoized into self.head. Set\n", "error": "none", "author": "tom@organisms.be"}, {"index": "356", "colour": "orange", "code": "    this to None again if you change self.pipeline after calling self.\"\"\"\n", "error": "none", "author": "tom@organisms.be"}, {"index": "357", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "358", "colour": "orange", "code": "    config = {}\n", "error": "none", "author": "tom@organisms.be"}, {"index": "359", "colour": "orange", "code": "    \"\"\"A dict whose keys match names listed in the pipeline. Each\n", "error": "none", "author": "tom@organisms.be"}, {"index": "360", "colour": "orange", "code": "    value is a further dict which will be passed to the corresponding\n", "error": "none", "author": "tom@organisms.be"}, {"index": "361", "colour": "orange", "code": "    named WSGI callable (from the pipeline) as keyword arguments.\"\"\"\n", "error": "none", "author": "tom@organisms.be"}, {"index": "362", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "363", "colour": "orange", "code": "    response_class = AppResponse\n", "error": "none", "author": "tom@organisms.be"}, {"index": "364", "colour": "orange", "code": "    \"\"\"The class to instantiate and return as the next app in the WSGI chain.\"\"\"\n", "error": "none", "author": "tom@organisms.be"}, {"index": "365", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "366", "colour": "orange", "code": "    def __init__(self, cpapp, pipeline=None):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "367", "colour": "orange", "code": "        self.cpapp = cpapp\n", "error": "none", "author": "tom@organisms.be"}, {"index": "368", "colour": "orange", "code": "        self.pipeline = self.pipeline[:]\n", "error": "none", "author": "tom@organisms.be"}, {"index": "369", "colour": "orange", "code": "        if pipeline:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "370", "colour": "orange", "code": "            self.pipeline.extend(pipeline)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "371", "colour": "orange", "code": "        self.config = self.config.copy()\n", "error": "none", "author": "tom@organisms.be"}, {"index": "372", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "373", "colour": "orange", "code": "    def tail(self, environ, start_response):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "374", "colour": "orange", "code": "        \"\"\"WSGI application callable for the actual CherryPy application.\n", "error": "none", "author": "tom@organisms.be"}, {"index": "375", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "376", "colour": "orange", "code": "        You probably shouldn't call this; call self.__call__ instead,\n", "error": "none", "author": "tom@organisms.be"}, {"index": "377", "colour": "orange", "code": "        so that any WSGI middleware in self.pipeline can run first.\n", "error": "none", "author": "tom@organisms.be"}, {"index": "378", "colour": "orange", "code": "        \"\"\"\n", "error": "none", "author": "tom@organisms.be"}, {"index": "379", "colour": "orange", "code": "        return self.response_class(environ, start_response, self.cpapp)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "380", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "381", "colour": "orange", "code": "    def __call__(self, environ, start_response):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "382", "colour": "orange", "code": "        head = self.head\n", "error": "none", "author": "tom@organisms.be"}, {"index": "383", "colour": "orange", "code": "        if head is None:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "384", "colour": "orange", "code": "            # Create and nest the WSGI apps in our pipeline (in reverse order).\n", "error": "none", "author": "tom@organisms.be"}, {"index": "385", "colour": "orange", "code": "            # Then memoize the result in self.head.\n", "error": "none", "author": "tom@organisms.be"}, {"index": "386", "colour": "orange", "code": "            head = self.tail\n", "error": "none", "author": "tom@organisms.be"}, {"index": "387", "colour": "green", "code": "            for name, callable in self.pipeline[::-1]:\n", "error": "W", "author": "tom@organisms.be"}, {"index": "388", "colour": "orange", "code": "                conf = self.config.get(name, {})\n", "error": "none", "author": "tom@organisms.be"}, {"index": "389", "colour": "green", "code": "                head = callable(head, **conf)\n", "error": "W", "author": "tom@organisms.be"}, {"index": "390", "colour": "orange", "code": "            self.head = head\n", "error": "none", "author": "tom@organisms.be"}, {"index": "391", "colour": "orange", "code": "        return head(environ, start_response)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "392", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}, {"index": "393", "colour": "orange", "code": "    def namespace_handler(self, k, v):\n", "error": "none", "author": "tom@organisms.be"}, {"index": "394", "colour": "orange", "code": "        \"\"\"Config handler for the 'wsgi' namespace.\"\"\"\n", "error": "none", "author": "tom@organisms.be"}, {"index": "395", "colour": "orange", "code": "        if k == \"pipeline\":\n", "error": "none", "author": "tom@organisms.be"}, {"index": "396", "colour": "orange", "code": "            # Note this allows multiple 'wsgi.pipeline' config entries\n", "error": "none", "author": "tom@organisms.be"}, {"index": "397", "colour": "orange", "code": "            # (but each entry will be processed in a 'random' order).\n", "error": "none", "author": "tom@organisms.be"}, {"index": "398", "colour": "orange", "code": "            # It should also allow developers to set default middleware\n", "error": "none", "author": "tom@organisms.be"}, {"index": "399", "colour": "orange", "code": "            # in code (passed to self.__init__) that deployers can add to\n", "error": "none", "author": "tom@organisms.be"}, {"index": "400", "colour": "orange", "code": "            # (but not remove) via config.\n", "error": "none", "author": "tom@organisms.be"}, {"index": "401", "colour": "orange", "code": "            self.pipeline.extend(v)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "402", "colour": "orange", "code": "        elif k == \"response_class\":\n", "error": "none", "author": "tom@organisms.be"}, {"index": "403", "colour": "orange", "code": "            self.response_class = v\n", "error": "none", "author": "tom@organisms.be"}, {"index": "404", "colour": "orange", "code": "        else:\n", "error": "none", "author": "tom@organisms.be"}, {"index": "405", "colour": "orange", "code": "            name, arg = k.split(\".\", 1)\n", "error": "none", "author": "tom@organisms.be"}, {"index": "406", "colour": "orange", "code": "            bucket = self.config.setdefault(name, {})\n", "error": "none", "author": "tom@organisms.be"}, {"index": "407", "colour": "orange", "code": "            bucket[arg] = v\n", "error": "none", "author": "tom@organisms.be"}, {"index": "408", "colour": "orange", "code": "\n", "error": "none", "author": "tom@organisms.be"}]]}