{"path": "/home/asumal/git/cs410/pattern/pattern/server/cherrypy/cherrypy/_cpwsgi.py", "lines": [[{"error": "none", "line": "1", "code": "\"\"\"WSGI interface (see PEP 333 and 3333).\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "2", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "3", "code": "Note that WSGI environ keys and values are 'native strings'; that is,\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "4", "code": "whatever the type of \"\" is. For Python 2, that's a byte string; for Python 3,\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "5", "code": "it's a unicode string. But PEP 3333 says: \"even if Python's str type is\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "6", "code": "actually Unicode \"under the hood\", the content of native strings must\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "7", "code": "still be translatable to bytes via the Latin-1 encoding!\"\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "8", "code": "\"\"\"\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "9", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "10", "code": "import sys as _sys\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "11", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "12", "code": "import cherrypy as _cherrypy\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "13", "code": "from cherrypy._cpcompat import BytesIO, bytestr, ntob, ntou, py3k, unicodestr\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "14", "code": "from cherrypy import _cperror\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "15", "code": "from cherrypy.lib import httputil\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "16", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "17", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "18", "code": "def downgrade_wsgi_ux_to_1x(environ):\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "19", "code": "    \"\"\"Return a new environ dict for WSGI 1.x from the given WSGI u.x environ.\"\"\"\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "20", "code": "    env1x = {}\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "21", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "22", "code": "    url_encoding = environ[ntou('wsgi.url_encoding')]\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "23", "code": "    for k, v in list(environ.items()):\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "24", "code": "        if k in [ntou('PATH_INFO'), ntou('SCRIPT_NAME'), ntou('QUERY_STRING')]:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "25", "code": "            v = v.encode(url_encoding)\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "26", "code": "        elif isinstance(v, unicodestr):\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "27", "code": "            v = v.encode('ISO-8859-1')\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "28", "code": "        env1x[k.encode('ISO-8859-1')] = v\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "29", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "30", "code": "    return env1x\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "31", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "32", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "R", "line": "33", "code": "class VirtualHost(object):\n", "colour": "green", "author": "tom@organisms.be"}, {"error": "none", "line": "34", "code": "    \"\"\"Select a different WSGI application based on the Host header.\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "35", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "36", "code": "    This can be useful when running multiple sites within one CP server.\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "37", "code": "    It allows several domains to point to different applications. For example::\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "38", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "39", "code": "        root = Root()\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "40", "code": "        RootApp = cherrypy.Application(root)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "41", "code": "        Domain2App = cherrypy.Application(root)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "42", "code": "        SecureApp = cherrypy.Application(Secure())\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "43", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "44", "code": "        vhost = cherrypy._cpwsgi.VirtualHost(RootApp,\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "45", "code": "            domains={'www.domain2.example': Domain2App,\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "46", "code": "                     'www.domain2.example:443': SecureApp,\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "47", "code": "                     })\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "48", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "49", "code": "        cherrypy.tree.graft(vhost)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "50", "code": "    \"\"\"\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "51", "code": "    default = None\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "52", "code": "    \"\"\"Required. The default WSGI application.\"\"\"\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "53", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "54", "code": "    use_x_forwarded_host = True\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "55", "code": "    \"\"\"If True (the default), any \"X-Forwarded-Host\"\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "56", "code": "    request header will be used instead of the \"Host\" header. This\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "57", "code": "    is commonly added by HTTP servers (such as Apache) when proxying.\"\"\"\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "58", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "59", "code": "    domains = {}\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "60", "code": "    \"\"\"A dict of {host header value: application} pairs.\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "61", "code": "    The incoming \"Host\" request header is looked up in this dict,\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "62", "code": "    and, if a match is found, the corresponding WSGI application\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "63", "code": "    will be called instead of the default. Note that you often need\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "64", "code": "    separate entries for \"example.com\" and \"www.example.com\".\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "65", "code": "    In addition, \"Host\" headers may contain the port number.\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "66", "code": "    \"\"\"\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "67", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "68", "code": "    def __init__(self, default, domains=None, use_x_forwarded_host=True):\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "69", "code": "        self.default = default\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "70", "code": "        self.domains = domains or {}\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "71", "code": "        self.use_x_forwarded_host = use_x_forwarded_host\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "72", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "73", "code": "    def __call__(self, environ, start_response):\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "74", "code": "        domain = environ.get('HTTP_HOST', '')\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "75", "code": "        if self.use_x_forwarded_host:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "76", "code": "            domain = environ.get(\"HTTP_X_FORWARDED_HOST\", domain)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "77", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "78", "code": "        nextapp = self.domains.get(domain)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "79", "code": "        if nextapp is None:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "80", "code": "            nextapp = self.default\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "81", "code": "        return nextapp(environ, start_response)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "82", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "83", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "R", "line": "84", "code": "class InternalRedirector(object):\n", "colour": "green", "author": "tom@organisms.be"}, {"error": "none", "line": "85", "code": "    \"\"\"WSGI middleware that handles raised cherrypy.InternalRedirect.\"\"\"\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "86", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "87", "code": "    def __init__(self, nextapp, recursive=False):\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "88", "code": "        self.nextapp = nextapp\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "89", "code": "        self.recursive = recursive\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "90", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "91", "code": "    def __call__(self, environ, start_response):\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "92", "code": "        redirections = []\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "93", "code": "        while True:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "94", "code": "            environ = environ.copy()\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "95", "code": "            try:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "96", "code": "                return self.nextapp(environ, start_response)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "97", "code": "            except _cherrypy.InternalRedirect:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "98", "code": "                ir = _sys.exc_info()[1]\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "C", "line": "99", "code": "                sn = environ.get('SCRIPT_NAME', '')\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "100", "code": "                path = environ.get('PATH_INFO', '')\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "101", "code": "                qs = environ.get('QUERY_STRING', '')\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "102", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "103", "code": "                # Add the *previous* path_info + qs to redirections.\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "104", "code": "                old_uri = sn + path\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "105", "code": "                if qs:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "106", "code": "                    old_uri += \"?\" + qs\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "107", "code": "                redirections.append(old_uri)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "108", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "109", "code": "                if not self.recursive:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "110", "code": "                    # Check to see if the new URI has been redirected to already\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "111", "code": "                    new_uri = sn + ir.path\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "112", "code": "                    if ir.query_string:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "113", "code": "                        new_uri += \"?\" + ir.query_string\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "114", "code": "                    if new_uri in redirections:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "115", "code": "                        ir.request.close()\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "116", "code": "                        raise RuntimeError(\"InternalRedirector visited the \"\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "117", "code": "                                           \"same URL twice: %r\" % new_uri)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "118", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "119", "code": "                # Munge the environment and try again.\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "120", "code": "                environ['REQUEST_METHOD'] = \"GET\"\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "121", "code": "                environ['PATH_INFO'] = ir.path\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "122", "code": "                environ['QUERY_STRING'] = ir.query_string\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "123", "code": "                environ['wsgi.input'] = BytesIO()\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "124", "code": "                environ['CONTENT_LENGTH'] = \"0\"\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "125", "code": "                environ['cherrypy.previous_request'] = ir.request\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "126", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "127", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "R", "line": "128", "code": "class ExceptionTrapper(object):\n", "colour": "green", "author": "tom@organisms.be"}, {"error": "none", "line": "129", "code": "    \"\"\"WSGI middleware that traps exceptions.\"\"\"\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "130", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "131", "code": "    def __init__(self, nextapp, throws=(KeyboardInterrupt, SystemExit)):\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "132", "code": "        self.nextapp = nextapp\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "133", "code": "        self.throws = throws\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "134", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "135", "code": "    def __call__(self, environ, start_response):\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "136", "code": "        return _TrappedResponse(self.nextapp, environ, start_response, self.throws)\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "137", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "138", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "139", "code": "class _TrappedResponse(object):\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "140", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "141", "code": "    response = iter([])\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "142", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "143", "code": "    def __init__(self, nextapp, environ, start_response, throws):\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "144", "code": "        self.nextapp = nextapp\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "145", "code": "        self.environ = environ\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "146", "code": "        self.start_response = start_response\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "147", "code": "        self.throws = throws\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "148", "code": "        self.started_response = False\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "149", "code": "        self.response = self.trap(self.nextapp, self.environ, self.start_response)\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "150", "code": "        self.iter_response = iter(self.response)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "151", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "152", "code": "    def __iter__(self):\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "153", "code": "        self.started_response = True\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "154", "code": "        return self\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "155", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "156", "code": "    if py3k:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "157", "code": "        def __next__(self):\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "158", "code": "            return self.trap(next, self.iter_response)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "159", "code": "    else:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "160", "code": "        def next(self):\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "161", "code": "            return self.trap(self.iter_response.next)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "162", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "163", "code": "    def close(self):\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "164", "code": "        if hasattr(self.response, 'close'):\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "E", "line": "165", "code": "            self.response.close()\n", "colour": "yellow", "author": "tom@organisms.be"}, {"error": "none", "line": "166", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "167", "code": "    def trap(self, func, *args, **kwargs):\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "168", "code": "        try:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "169", "code": "            return func(*args, **kwargs)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "170", "code": "        except self.throws:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "171", "code": "            raise\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "172", "code": "        except StopIteration:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "173", "code": "            raise\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "W", "line": "174", "code": "        except:\n", "colour": "purple", "author": "tom@organisms.be"}, {"error": "C", "line": "175", "code": "            tb = _cperror.format_exc()\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "176", "code": "            #print('trapped (started %s):' % self.started_response, tb)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "177", "code": "            _cherrypy.log(tb, severity=40)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "178", "code": "            if not _cherrypy.request.show_tracebacks:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "179", "code": "                tb = \"\"\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "C", "line": "180", "code": "            s, h, b = _cperror.bare_error(tb)\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "181", "code": "            if py3k:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "182", "code": "                # What fun.\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "183", "code": "                s = s.decode('ISO-8859-1')\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "C", "line": "184", "code": "                h = [(k.decode('ISO-8859-1'), v.decode('ISO-8859-1'))\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "185", "code": "                     for k, v in h]\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "186", "code": "            if self.started_response:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "187", "code": "                # Empty our iterable (so future calls raise StopIteration)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "188", "code": "                self.iter_response = iter([])\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "189", "code": "            else:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "190", "code": "                self.iter_response = iter(b)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "191", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "192", "code": "            try:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "193", "code": "                self.start_response(s, h, _sys.exc_info())\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "194", "code": "            except:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "195", "code": "                # \"The application must not trap any exceptions raised by\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "196", "code": "                # start_response, if it called start_response with exc_info.\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "197", "code": "                # Instead, it should allow such exceptions to propagate\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "198", "code": "                # back to the server or gateway.\"\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "199", "code": "                # But we still log and call close() to clean up ourselves.\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "200", "code": "                _cherrypy.log(traceback=True, severity=40)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "201", "code": "                raise\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "202", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "203", "code": "            if self.started_response:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "204", "code": "                return ntob(\"\").join(b)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "205", "code": "            else:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "206", "code": "                return b\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "207", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "208", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "209", "code": "#                           WSGI-to-CP Adapter                           #\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "210", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "211", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "212", "code": "class AppResponse(object):\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "213", "code": "    \"\"\"WSGI response iterable for CherryPy applications.\"\"\"\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "214", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "215", "code": "    def __init__(self, environ, start_response, cpapp):\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "216", "code": "        self.cpapp = cpapp\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "217", "code": "        try:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "218", "code": "            if not py3k:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "219", "code": "                if environ.get(ntou('wsgi.version')) == (ntou('u'), 0):\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "220", "code": "                    environ = downgrade_wsgi_ux_to_1x(environ)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "221", "code": "            self.environ = environ\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "222", "code": "            self.run()\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "223", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "224", "code": "            r = _cherrypy.serving.response\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "225", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "226", "code": "            outstatus = r.output_status\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "227", "code": "            if not isinstance(outstatus, bytestr):\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "228", "code": "                raise TypeError(\"response.output_status is not a byte string.\")\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "229", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "230", "code": "            outheaders = []\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "231", "code": "            for k, v in r.header_list:\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "232", "code": "                if not isinstance(k, bytestr):\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "233", "code": "                    raise TypeError(\"response.header_list key %r is not a byte string.\" % k)\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "234", "code": "                if not isinstance(v, bytestr):\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "235", "code": "                    raise TypeError(\"response.header_list value %r is not a byte string.\" % v)\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "236", "code": "                outheaders.append((k, v))\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "237", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "238", "code": "            if py3k:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "239", "code": "                # According to PEP 3333, when using Python 3, the response status\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "C", "line": "240", "code": "                # and headers must be bytes masquerading as unicode; that is, they\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "241", "code": "                # must be of type \"str\" but are restricted to code points in the\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "242", "code": "                # \"latin-1\" set.\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "243", "code": "                outstatus = outstatus.decode('ISO-8859-1')\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "244", "code": "                outheaders = [(k.decode('ISO-8859-1'), v.decode('ISO-8859-1'))\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "245", "code": "                              for k, v in outheaders]\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "246", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "247", "code": "            self.iter_response = iter(r.body)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "248", "code": "            self.write = start_response(outstatus, outheaders)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "249", "code": "        except:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "250", "code": "            self.close()\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "251", "code": "            raise\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "252", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "253", "code": "    def __iter__(self):\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "254", "code": "        return self\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "255", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "256", "code": "    if py3k:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "257", "code": "        def __next__(self):\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "258", "code": "            return next(self.iter_response)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "259", "code": "    else:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "260", "code": "        def next(self):\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "261", "code": "            return self.iter_response.next()\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "262", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "263", "code": "    def close(self):\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "264", "code": "        \"\"\"Close and de-reference the current request and response. (Core)\"\"\"\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "265", "code": "        self.cpapp.release_serving()\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "266", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "R", "line": "267", "code": "    def run(self):\n", "colour": "green", "author": "tom@organisms.be"}, {"error": "none", "line": "268", "code": "        \"\"\"Create a Request object using environ.\"\"\"\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "269", "code": "        env = self.environ.get\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "270", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "271", "code": "        local = httputil.Host('', int(env('SERVER_PORT', 80)),\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "272", "code": "                           env('SERVER_NAME', ''))\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "273", "code": "        remote = httputil.Host(env('REMOTE_ADDR', ''),\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "274", "code": "                               int(env('REMOTE_PORT', -1) or -1),\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "275", "code": "                               env('REMOTE_HOST', ''))\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "276", "code": "        scheme = env('wsgi.url_scheme')\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "277", "code": "        sproto = env('ACTUAL_SERVER_PROTOCOL', \"HTTP/1.1\")\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "W", "line": "278", "code": "        request, resp = self.cpapp.get_serving(local, remote, scheme, sproto)\n", "colour": "purple", "author": "tom@organisms.be"}, {"error": "none", "line": "279", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "280", "code": "        # LOGON_USER is served by IIS, and is the name of the\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "281", "code": "        # user after having been mapped to a local account.\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "282", "code": "        # Both IIS and Apache set REMOTE_USER, when possible.\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "283", "code": "        request.login = env('LOGON_USER') or env('REMOTE_USER') or None\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "284", "code": "        request.multithread = self.environ['wsgi.multithread']\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "285", "code": "        request.multiprocess = self.environ['wsgi.multiprocess']\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "286", "code": "        request.wsgi_environ = self.environ\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "287", "code": "        request.prev = env('cherrypy.previous_request', None)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "288", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "289", "code": "        meth = self.environ['REQUEST_METHOD']\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "290", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "291", "code": "        path = httputil.urljoin(self.environ.get('SCRIPT_NAME', ''),\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "292", "code": "                                self.environ.get('PATH_INFO', ''))\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "293", "code": "        qs = self.environ.get('QUERY_STRING', '')\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "294", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "295", "code": "        if py3k:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "296", "code": "            # This isn't perfect; if the given PATH_INFO is in the wrong encoding,\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "297", "code": "            # it may fail to match the appropriate config section URI. But meh.\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "298", "code": "            old_enc = self.environ.get('wsgi.url_encoding', 'ISO-8859-1')\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "299", "code": "            new_enc = self.cpapp.find_config(self.environ.get('PATH_INFO', ''),\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "300", "code": "                                             \"request.uri_encoding\", 'utf-8')\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "301", "code": "            if new_enc.lower() != old_enc.lower():\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "302", "code": "                # Even though the path and qs are unicode, the WSGI server is\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "303", "code": "                # required by PEP 3333 to coerce them to ISO-8859-1 masquerading\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "304", "code": "                # as unicode. So we have to encode back to bytes and then decode\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "305", "code": "                # again using the \"correct\" encoding.\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "306", "code": "                try:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "307", "code": "                    u_path = path.encode(old_enc).decode(new_enc)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "308", "code": "                    u_qs = qs.encode(old_enc).decode(new_enc)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "309", "code": "                except (UnicodeEncodeError, UnicodeDecodeError):\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "310", "code": "                    # Just pass them through without transcoding and hope.\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "311", "code": "                    pass\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "312", "code": "                else:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "313", "code": "                    # Only set transcoded values if they both succeed.\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "314", "code": "                    path = u_path\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "315", "code": "                    qs = u_qs\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "316", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "317", "code": "        rproto = self.environ.get('SERVER_PROTOCOL')\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "318", "code": "        headers = self.translate_headers(self.environ)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "319", "code": "        rfile = self.environ['wsgi.input']\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "320", "code": "        request.run(meth, path, qs, rproto, headers, rfile)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "321", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "322", "code": "    headerNames = {'HTTP_CGI_AUTHORIZATION': 'Authorization',\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "323", "code": "                   'CONTENT_LENGTH': 'Content-Length',\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "324", "code": "                   'CONTENT_TYPE': 'Content-Type',\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "325", "code": "                   'REMOTE_HOST': 'Remote-Host',\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "326", "code": "                   'REMOTE_ADDR': 'Remote-Addr',\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "327", "code": "                   }\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "328", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "329", "code": "    def translate_headers(self, environ):\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "330", "code": "        \"\"\"Translate CGI-environ header names to HTTP header names.\"\"\"\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "331", "code": "        for cgiName in environ:\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "332", "code": "            # We assume all incoming header keys are uppercase already.\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "333", "code": "            if cgiName in self.headerNames:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "334", "code": "                yield self.headerNames[cgiName], environ[cgiName]\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "335", "code": "            elif cgiName[:5] == \"HTTP_\":\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "336", "code": "                # Hackish attempt at recovering original header names.\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "337", "code": "                translatedHeader = cgiName[5:].replace(\"_\", \"-\")\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "338", "code": "                yield translatedHeader, environ[cgiName]\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "339", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "340", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "341", "code": "class CPWSGIApp(object):\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "342", "code": "    \"\"\"A WSGI application object for a CherryPy Application.\"\"\"\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "343", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "344", "code": "    pipeline = [('ExceptionTrapper', ExceptionTrapper),\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "345", "code": "                ('InternalRedirector', InternalRedirector),\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "346", "code": "                ]\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "347", "code": "    \"\"\"A list of (name, wsgiapp) pairs. Each 'wsgiapp' MUST be a\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "348", "code": "    constructor that takes an initial, positional 'nextapp' argument,\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "349", "code": "    plus optional keyword arguments, and returns a WSGI application\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "350", "code": "    (that takes environ and start_response arguments). The 'name' can\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "351", "code": "    be any you choose, and will correspond to keys in self.config.\"\"\"\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "352", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "353", "code": "    head = None\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "354", "code": "    \"\"\"Rather than nest all apps in the pipeline on each call, it's only\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "355", "code": "    done the first time, and the result is memoized into self.head. Set\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "356", "code": "    this to None again if you change self.pipeline after calling self.\"\"\"\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "357", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "358", "code": "    config = {}\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "359", "code": "    \"\"\"A dict whose keys match names listed in the pipeline. Each\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "360", "code": "    value is a further dict which will be passed to the corresponding\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "361", "code": "    named WSGI callable (from the pipeline) as keyword arguments.\"\"\"\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "362", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "363", "code": "    response_class = AppResponse\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "364", "code": "    \"\"\"The class to instantiate and return as the next app in the WSGI chain.\"\"\"\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "365", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "366", "code": "    def __init__(self, cpapp, pipeline=None):\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "367", "code": "        self.cpapp = cpapp\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "368", "code": "        self.pipeline = self.pipeline[:]\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "369", "code": "        if pipeline:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "370", "code": "            self.pipeline.extend(pipeline)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "371", "code": "        self.config = self.config.copy()\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "372", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "373", "code": "    def tail(self, environ, start_response):\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "374", "code": "        \"\"\"WSGI application callable for the actual CherryPy application.\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "375", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "376", "code": "        You probably shouldn't call this; call self.__call__ instead,\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "377", "code": "        so that any WSGI middleware in self.pipeline can run first.\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "378", "code": "        \"\"\"\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "379", "code": "        return self.response_class(environ, start_response, self.cpapp)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "380", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "381", "code": "    def __call__(self, environ, start_response):\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "382", "code": "        head = self.head\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "383", "code": "        if head is None:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "384", "code": "            # Create and nest the WSGI apps in our pipeline (in reverse order).\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "385", "code": "            # Then memoize the result in self.head.\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "386", "code": "            head = self.tail\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "W", "line": "387", "code": "            for name, callable in self.pipeline[::-1]:\n", "colour": "purple", "author": "tom@organisms.be"}, {"error": "none", "line": "388", "code": "                conf = self.config.get(name, {})\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "W", "line": "389", "code": "                head = callable(head, **conf)\n", "colour": "purple", "author": "tom@organisms.be"}, {"error": "none", "line": "390", "code": "            self.head = head\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "391", "code": "        return head(environ, start_response)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "392", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "393", "code": "    def namespace_handler(self, k, v):\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "394", "code": "        \"\"\"Config handler for the 'wsgi' namespace.\"\"\"\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "395", "code": "        if k == \"pipeline\":\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "396", "code": "            # Note this allows multiple 'wsgi.pipeline' config entries\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "397", "code": "            # (but each entry will be processed in a 'random' order).\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "398", "code": "            # It should also allow developers to set default middleware\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "399", "code": "            # in code (passed to self.__init__) that deployers can add to\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "400", "code": "            # (but not remove) via config.\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "401", "code": "            self.pipeline.extend(v)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "402", "code": "        elif k == \"response_class\":\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "403", "code": "            self.response_class = v\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "404", "code": "        else:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "405", "code": "            name, arg = k.split(\".\", 1)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "406", "code": "            bucket = self.config.setdefault(name, {})\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "407", "code": "            bucket[arg] = v\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "408", "code": "\n", "colour": "black", "author": "tom@organisms.be"}]]}