{"path": "/home/asumal/git/cs410/pattern/pattern/server/cherrypy/cherrypy/lib/gctools.py", "lines": [[{"error": "C", "line": "1", "code": "import gc\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "2", "code": "import inspect\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "W", "line": "3", "code": "import os\n", "colour": "purple", "author": "tom@organisms.be"}, {"error": "none", "line": "4", "code": "import sys\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "5", "code": "import time\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "6", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "7", "code": "try:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "F", "line": "8", "code": "    import objgraph\n", "colour": "red", "author": "tom@organisms.be"}, {"error": "none", "line": "9", "code": "except ImportError:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "10", "code": "    objgraph = None\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "11", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "12", "code": "import cherrypy\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "13", "code": "from cherrypy import _cprequest, _cpwsgi\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "14", "code": "from cherrypy.process.plugins import SimplePlugin\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "15", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "16", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "17", "code": "class ReferrerTree(object):\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "18", "code": "    \"\"\"An object which gathers all referrers of an object to a given depth.\"\"\"\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "19", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "20", "code": "    peek_length = 40\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "21", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "22", "code": "    def __init__(self, ignore=None, maxdepth=2, maxparents=10):\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "23", "code": "        self.ignore = ignore or []\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "24", "code": "        self.ignore.append(inspect.currentframe().f_back)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "25", "code": "        self.maxdepth = maxdepth\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "26", "code": "        self.maxparents = maxparents\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "27", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "28", "code": "    def ascend(self, obj, depth=1):\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "29", "code": "        \"\"\"Return a nested list containing referrers of the given object.\"\"\"\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "30", "code": "        depth += 1\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "31", "code": "        parents = []\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "32", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "33", "code": "        # Gather all referrers in one step to minimize\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "34", "code": "        # cascading references due to repr() logic.\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "35", "code": "        refs = gc.get_referrers(obj)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "36", "code": "        self.ignore.append(refs)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "37", "code": "        if len(refs) > self.maxparents:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "38", "code": "            return [(\"[%s referrers]\" % len(refs), [])]\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "39", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "40", "code": "        try:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "41", "code": "            ascendcode = self.ascend.__code__\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "42", "code": "        except AttributeError:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "43", "code": "            ascendcode = self.ascend.im_func.func_code\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "44", "code": "        for parent in refs:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "45", "code": "            if inspect.isframe(parent) and parent.f_code is ascendcode:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "46", "code": "                continue\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "47", "code": "            if parent in self.ignore:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "48", "code": "                continue\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "49", "code": "            if depth <= self.maxdepth:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "50", "code": "                parents.append((parent, self.ascend(parent, depth)))\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "51", "code": "            else:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "52", "code": "                parents.append((parent, []))\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "53", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "54", "code": "        return parents\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "55", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "56", "code": "    def peek(self, s):\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "57", "code": "        \"\"\"Return s, restricted to a sane length.\"\"\"\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "58", "code": "        if len(s) > (self.peek_length + 3):\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "59", "code": "            half = self.peek_length // 2\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "60", "code": "            return s[:half] + '...' + s[-half:]\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "61", "code": "        else:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "62", "code": "            return s\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "63", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "R", "line": "64", "code": "    def _format(self, obj, descend=True):\n", "colour": "green", "author": "tom@organisms.be"}, {"error": "none", "line": "65", "code": "        \"\"\"Return a string representation of a single object.\"\"\"\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "66", "code": "        if inspect.isframe(obj):\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "W", "line": "67", "code": "            filename, lineno, func, context, index = inspect.getframeinfo(obj)\n", "colour": "purple", "author": "tom@organisms.be"}, {"error": "none", "line": "68", "code": "            return \"<frame of function '%s'>\" % func\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "69", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "70", "code": "        if not descend:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "71", "code": "            return self.peek(repr(obj))\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "72", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "73", "code": "        if isinstance(obj, dict):\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "74", "code": "            return \"{\" + \", \".join([\"%s: %s\" % (self._format(k, descend=False),\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "75", "code": "                                                self._format(v, descend=False))\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "76", "code": "                                    for k, v in obj.items()]) + \"}\"\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "77", "code": "        elif isinstance(obj, list):\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "78", "code": "            return \"[\" + \", \".join([self._format(item, descend=False)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "79", "code": "                                    for item in obj]) + \"]\"\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "80", "code": "        elif isinstance(obj, tuple):\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "81", "code": "            return \"(\" + \", \".join([self._format(item, descend=False)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "82", "code": "                                    for item in obj]) + \")\"\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "83", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "84", "code": "        r = self.peek(repr(obj))\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "85", "code": "        if isinstance(obj, (str, int, float)):\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "86", "code": "            return r\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "87", "code": "        return \"%s: %s\" % (type(obj), r)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "88", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "89", "code": "    def format(self, tree):\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "90", "code": "        \"\"\"Return a list of string reprs from a nested list of referrers.\"\"\"\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "91", "code": "        output = []\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "92", "code": "        def ascend(branch, depth=1):\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "93", "code": "            for parent, grandparents in branch:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "94", "code": "                output.append((\"    \" * depth) + self._format(parent))\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "95", "code": "                if grandparents:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "96", "code": "                    ascend(grandparents, depth + 1)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "97", "code": "        ascend(tree)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "98", "code": "        return output\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "99", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "100", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "101", "code": "def get_instances(cls):\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "102", "code": "    return [x for x in gc.get_objects() if isinstance(x, cls)]\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "103", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "104", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "105", "code": "class RequestCounter(SimplePlugin):\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "106", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "107", "code": "    def start(self):\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "W", "line": "108", "code": "        self.count = 0\n", "colour": "purple", "author": "tom@organisms.be"}, {"error": "none", "line": "109", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "110", "code": "    def before_request(self):\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "111", "code": "        self.count += 1\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "112", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "113", "code": "    def after_request(self):\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "C", "line": "114", "code": "        self.count -=1\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "C", "line": "115", "code": "request_counter = RequestCounter(cherrypy.engine)\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "116", "code": "request_counter.subscribe()\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "117", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "118", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "119", "code": "def get_context(obj):\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "120", "code": "    if isinstance(obj, _cprequest.Request):\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "121", "code": "        return \"path=%s;stage=%s\" % (obj.path_info, obj.stage)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "122", "code": "    elif isinstance(obj, _cprequest.Response):\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "123", "code": "        return \"status=%s\" % obj.status\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "124", "code": "    elif isinstance(obj, _cpwsgi.AppResponse):\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "125", "code": "        return \"PATH_INFO=%s\" % obj.environ.get('PATH_INFO', '')\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "126", "code": "    elif hasattr(obj, \"tb_lineno\"):\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "127", "code": "        return \"tb_lineno=%s\" % obj.tb_lineno\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "128", "code": "    return \"\"\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "129", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "130", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "131", "code": "class GCRoot(object):\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "132", "code": "    \"\"\"A CherryPy page handler for testing reference leaks.\"\"\"\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "133", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "134", "code": "    classes = [(_cprequest.Request, 2, 2,\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "135", "code": "                \"Should be 1 in this request thread and 1 in the main thread.\"),\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "136", "code": "               (_cprequest.Response, 2, 2,\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "137", "code": "                \"Should be 1 in this request thread and 1 in the main thread.\"),\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "138", "code": "               (_cpwsgi.AppResponse, 1, 1,\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "139", "code": "                \"Should be 1 in this request thread only.\"),\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "140", "code": "               ]\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "141", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "R", "line": "142", "code": "    def index(self):\n", "colour": "green", "author": "tom@organisms.be"}, {"error": "none", "line": "143", "code": "        return \"Hello, world!\"\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "144", "code": "    index.exposed = True\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "145", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "R", "line": "146", "code": "    def stats(self):\n", "colour": "green", "author": "tom@organisms.be"}, {"error": "none", "line": "147", "code": "        output = [\"Statistics:\"]\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "148", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "W", "line": "149", "code": "        for trial in range(10):\n", "colour": "purple", "author": "tom@organisms.be"}, {"error": "none", "line": "150", "code": "            if request_counter.count > 0:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "151", "code": "                break\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "152", "code": "            time.sleep(0.5)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "153", "code": "        else:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "154", "code": "            output.append(\"\\nNot all requests closed properly.\")\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "155", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "156", "code": "        # gc_collect isn't perfectly synchronous, because it may\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "157", "code": "        # break reference cycles that then take time to fully\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "158", "code": "        # finalize. Call it thrice and hope for the best.\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "159", "code": "        gc.collect()\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "160", "code": "        gc.collect()\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "161", "code": "        unreachable = gc.collect()\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "162", "code": "        if unreachable:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "163", "code": "            if objgraph is not None:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "164", "code": "                final = objgraph.by_type('Nondestructible')\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "165", "code": "                if final:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "166", "code": "                    objgraph.show_backrefs(final, filename='finalizers.png')\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "167", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "168", "code": "            trash = {}\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "169", "code": "            for x in gc.garbage:\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "170", "code": "                trash[type(x)] = trash.get(type(x), 0) + 1\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "171", "code": "            if trash:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "172", "code": "                output.insert(0, \"\\n%s unreachable objects:\" % unreachable)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "173", "code": "                trash = [(v, k) for k, v in trash.items()]\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "174", "code": "                trash.sort()\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "175", "code": "                for pair in trash:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "176", "code": "                    output.append(\"    \" + repr(pair))\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "177", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "178", "code": "        # Check declared classes to verify uncollected instances.\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "179", "code": "        # These don't have to be part of a cycle; they can be\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "180", "code": "        # any objects that have unanticipated referrers that keep\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "181", "code": "        # them from being collected.\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "182", "code": "        allobjs = {}\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "W", "line": "183", "code": "        for cls, minobj, maxobj, msg in self.classes:\n", "colour": "purple", "author": "tom@organisms.be"}, {"error": "none", "line": "184", "code": "            allobjs[cls] = get_instances(cls)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "185", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "186", "code": "        for cls, minobj, maxobj, msg in self.classes:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "187", "code": "            objs = allobjs[cls]\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "188", "code": "            lenobj = len(objs)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "189", "code": "            if lenobj < minobj or lenobj > maxobj:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "190", "code": "                if minobj == maxobj:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "191", "code": "                    output.append(\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "192", "code": "                        \"\\nExpected %s %r references, got %s.\" %\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "193", "code": "                        (minobj, cls, lenobj))\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "194", "code": "                else:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "195", "code": "                    output.append(\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "196", "code": "                        \"\\nExpected %s to %s %r references, got %s.\" %\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "197", "code": "                        (minobj, maxobj, cls, lenobj))\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "198", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "199", "code": "                for obj in objs:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "200", "code": "                    if objgraph is not None:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "201", "code": "                        ig = [id(objs), id(inspect.currentframe())]\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "202", "code": "                        fname = \"graph_%s_%s.png\" % (cls.__name__, id(obj))\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "203", "code": "                        objgraph.show_backrefs(\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "204", "code": "                            obj, extra_ignore=ig, max_depth=4, too_many=20,\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "205", "code": "                            filename=fname, extra_info=get_context)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "206", "code": "                    output.append(\"\\nReferrers for %s (refcount=%s):\" %\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "207", "code": "                                  (repr(obj), sys.getrefcount(obj)))\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "208", "code": "                    t = ReferrerTree(ignore=[objs], maxdepth=3)\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "209", "code": "                    tree = t.ascend(obj)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "210", "code": "                    output.extend(t.format(tree))\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "211", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "212", "code": "        return \"\\n\".join(output)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "213", "code": "    stats.exposed = True\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "214", "code": "\n", "colour": "black", "author": "tom@organisms.be"}]]}