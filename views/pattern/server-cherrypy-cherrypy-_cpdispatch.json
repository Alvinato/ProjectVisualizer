{"path": "/home/asumal/git/cs410/pattern/pattern/server/cherrypy/cherrypy/_cpdispatch.py", "lines": [[{"error": "none", "line": "1", "code": "\"\"\"CherryPy dispatchers.\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "2", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "3", "code": "A 'dispatcher' is the object which looks up the 'page handler' callable\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "4", "code": "and collects config for the current request based on the path_info, other\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "5", "code": "request attributes, and the application architecture. The core calls the\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "6", "code": "dispatcher as early as possible, passing it a 'path_info' argument.\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "7", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "8", "code": "The default dispatcher discovers the page handler by matching path_info\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "9", "code": "to a hierarchical arrangement of objects, starting at request.app.root.\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "10", "code": "\"\"\"\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "11", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "12", "code": "import string\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "13", "code": "import sys\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "14", "code": "import types\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "15", "code": "try:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "16", "code": "    classtype = (type, types.ClassType)\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "17", "code": "except AttributeError:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "18", "code": "    classtype = type\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "19", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "20", "code": "import cherrypy\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "W", "line": "21", "code": "from cherrypy._cpcompat import set\n", "colour": "purple", "author": "tom@organisms.be"}, {"error": "none", "line": "22", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "23", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "R", "line": "24", "code": "class PageHandler(object):\n", "colour": "green", "author": "tom@organisms.be"}, {"error": "none", "line": "25", "code": "    \"\"\"Callable which sets response.body.\"\"\"\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "26", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "W", "line": "27", "code": "    def __init__(self, callable, *args, **kwargs):\n", "colour": "purple", "author": "tom@organisms.be"}, {"error": "none", "line": "28", "code": "        self.callable = callable\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "29", "code": "        self.args = args\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "30", "code": "        self.kwargs = kwargs\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "31", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "32", "code": "    def __call__(self):\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "33", "code": "        try:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "34", "code": "            return self.callable(*self.args, **self.kwargs)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "35", "code": "        except TypeError:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "36", "code": "            x = sys.exc_info()[1]\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "37", "code": "            try:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "38", "code": "                test_callable_spec(self.callable, self.args, self.kwargs)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "39", "code": "            except cherrypy.HTTPError:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "40", "code": "                raise sys.exc_info()[1]\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "41", "code": "            except:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "42", "code": "                raise x\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "43", "code": "            raise\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "44", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "45", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "R", "line": "46", "code": "def test_callable_spec(callable, callable_args, callable_kwargs):\n", "colour": "green", "author": "tom@organisms.be"}, {"error": "none", "line": "47", "code": "    \"\"\"\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "48", "code": "    Inspect callable and test to see if the given args are suitable for it.\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "49", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "50", "code": "    When an error occurs during the handler's invoking stage there are 2\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "51", "code": "    erroneous cases:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "52", "code": "    1.  Too many parameters passed to a function which doesn't define\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "53", "code": "        one of *args or **kwargs.\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "54", "code": "    2.  Too little parameters are passed to the function.\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "55", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "56", "code": "    There are 3 sources of parameters to a cherrypy handler.\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "57", "code": "    1.  query string parameters are passed as keyword parameters to the handler.\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "58", "code": "    2.  body parameters are also passed as keyword parameters.\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "59", "code": "    3.  when partial matching occurs, the final path atoms are passed as\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "60", "code": "        positional args.\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "61", "code": "    Both the query string and path atoms are part of the URI.  If they are\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "62", "code": "    incorrect, then a 404 Not Found should be raised. Conversely the body\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "63", "code": "    parameters are part of the request; if they are invalid a 400 Bad Request.\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "64", "code": "    \"\"\"\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "65", "code": "    show_mismatched_params = getattr(\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "66", "code": "        cherrypy.serving.request, 'show_mismatched_params', False)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "67", "code": "    try:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "68", "code": "        (args, varargs, varkw, defaults) = inspect.getargspec(callable)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "69", "code": "    except TypeError:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "70", "code": "        if isinstance(callable, object) and hasattr(callable, '__call__'):\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "71", "code": "            (args, varargs, varkw, defaults) = inspect.getargspec(callable.__call__)\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "72", "code": "        else:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "73", "code": "            # If it wasn't one of our own types, re-raise\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "74", "code": "            # the original error\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "75", "code": "            raise\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "76", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "77", "code": "    if args and args[0] == 'self':\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "78", "code": "        args = args[1:]\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "79", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "80", "code": "    arg_usage = dict([(arg, 0,) for arg in args])\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "81", "code": "    vararg_usage = 0\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "82", "code": "    varkw_usage = 0\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "83", "code": "    extra_kwargs = set()\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "84", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "W", "line": "85", "code": "    for i, value in enumerate(callable_args):\n", "colour": "purple", "author": "tom@organisms.be"}, {"error": "none", "line": "86", "code": "        try:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "87", "code": "            arg_usage[args[i]] += 1\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "88", "code": "        except IndexError:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "89", "code": "            vararg_usage += 1\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "90", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "91", "code": "    for key in callable_kwargs.keys():\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "92", "code": "        try:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "93", "code": "            arg_usage[key] += 1\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "94", "code": "        except KeyError:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "95", "code": "            varkw_usage += 1\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "96", "code": "            extra_kwargs.add(key)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "97", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "98", "code": "    # figure out which args have defaults.\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "99", "code": "    args_with_defaults = args[-len(defaults or []):]\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "W", "line": "100", "code": "    for i, val in enumerate(defaults or []):\n", "colour": "purple", "author": "tom@organisms.be"}, {"error": "none", "line": "101", "code": "        # Defaults take effect only when the arg hasn't been used yet.\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "102", "code": "        if arg_usage[args_with_defaults[i]] == 0:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "103", "code": "            arg_usage[args_with_defaults[i]] += 1\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "104", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "105", "code": "    missing_args = []\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "106", "code": "    multiple_args = []\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "107", "code": "    for key, usage in arg_usage.items():\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "108", "code": "        if usage == 0:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "109", "code": "            missing_args.append(key)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "110", "code": "        elif usage > 1:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "111", "code": "            multiple_args.append(key)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "112", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "113", "code": "    if missing_args:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "114", "code": "        # In the case where the method allows body arguments\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "115", "code": "        # there are 3 potential errors:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "116", "code": "        # 1. not enough query string parameters -> 404\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "117", "code": "        # 2. not enough body parameters -> 400\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "118", "code": "        # 3. not enough path parts (partial matches) -> 404\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "119", "code": "        #\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "120", "code": "        # We can't actually tell which case it is,\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "121", "code": "        # so I'm raising a 404 because that covers 2/3 of the\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "122", "code": "        # possibilities\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "123", "code": "        #\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "124", "code": "        # In the case where the method does not allow body\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "125", "code": "        # arguments it's definitely a 404.\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "126", "code": "        message = None\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "127", "code": "        if show_mismatched_params:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "128", "code": "            message=\"Missing parameters: %s\" % \",\".join(missing_args)\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "129", "code": "        raise cherrypy.HTTPError(404, message=message)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "130", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "131", "code": "    # the extra positional arguments come from the path - 404 Not Found\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "132", "code": "    if not varargs and vararg_usage > 0:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "133", "code": "        raise cherrypy.HTTPError(404)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "134", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "135", "code": "    body_params = cherrypy.serving.request.body.params or {}\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "136", "code": "    body_params = set(body_params.keys())\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "137", "code": "    qs_params = set(callable_kwargs.keys()) - body_params\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "138", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "139", "code": "    if multiple_args:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "140", "code": "        if qs_params.intersection(set(multiple_args)):\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "141", "code": "            # If any of the multiple parameters came from the query string then\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "142", "code": "            # it's a 404 Not Found\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "143", "code": "            error = 404\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "144", "code": "        else:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "145", "code": "            # Otherwise it's a 400 Bad Request\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "146", "code": "            error = 400\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "147", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "148", "code": "        message = None\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "149", "code": "        if show_mismatched_params:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "150", "code": "            message=\"Multiple values for parameters: \"\\\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "151", "code": "                    \"%s\" % \",\".join(multiple_args)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "152", "code": "        raise cherrypy.HTTPError(error, message=message)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "153", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "154", "code": "    if not varkw and varkw_usage > 0:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "155", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "156", "code": "        # If there were extra query string parameters, it's a 404 Not Found\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "157", "code": "        extra_qs_params = set(qs_params).intersection(extra_kwargs)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "158", "code": "        if extra_qs_params:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "159", "code": "            message = None\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "160", "code": "            if show_mismatched_params:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "161", "code": "                message=\"Unexpected query string \"\\\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "162", "code": "                        \"parameters: %s\" % \", \".join(extra_qs_params)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "163", "code": "            raise cherrypy.HTTPError(404, message=message)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "164", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "165", "code": "        # If there were any extra body parameters, it's a 400 Not Found\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "166", "code": "        extra_body_params = set(body_params).intersection(extra_kwargs)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "167", "code": "        if extra_body_params:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "168", "code": "            message = None\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "169", "code": "            if show_mismatched_params:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "170", "code": "                message=\"Unexpected body parameters: \"\\\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "171", "code": "                        \"%s\" % \", \".join(extra_body_params)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "172", "code": "            raise cherrypy.HTTPError(400, message=message)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "173", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "174", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "175", "code": "try:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "176", "code": "    import inspect\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "177", "code": "except ImportError:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "178", "code": "    test_callable_spec = lambda callable, args, kwargs: None\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "179", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "180", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "181", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "R", "line": "182", "code": "class LateParamPageHandler(PageHandler):\n", "colour": "green", "author": "tom@organisms.be"}, {"error": "none", "line": "183", "code": "    \"\"\"When passing cherrypy.request.params to the page handler, we do not\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "184", "code": "    want to capture that dict too early; we want to give tools like the\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "185", "code": "    decoding tool a chance to modify the params dict in-between the lookup\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "186", "code": "    of the handler and the actual calling of the handler. This subclass\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "187", "code": "    takes that into account, and allows request.params to be 'bound late'\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "188", "code": "    (it's more complicated than that, but that's the effect).\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "189", "code": "    \"\"\"\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "190", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "191", "code": "    def _get_kwargs(self):\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "192", "code": "        kwargs = cherrypy.serving.request.params.copy()\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "193", "code": "        if self._kwargs:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "194", "code": "            kwargs.update(self._kwargs)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "195", "code": "        return kwargs\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "196", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "197", "code": "    def _set_kwargs(self, kwargs):\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "W", "line": "198", "code": "        self._kwargs = kwargs\n", "colour": "purple", "author": "tom@organisms.be"}, {"error": "none", "line": "199", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "200", "code": "    kwargs = property(_get_kwargs, _set_kwargs,\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "201", "code": "                      doc='page handler kwargs (with '\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "202", "code": "                      'cherrypy.request.params copied in)')\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "203", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "204", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "205", "code": "if sys.version_info < (3, 0):\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "206", "code": "    punctuation_to_underscores = string.maketrans(\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "207", "code": "        string.punctuation, '_' * len(string.punctuation))\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "208", "code": "    def validate_translator(t):\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "209", "code": "        if not isinstance(t, str) or len(t) != 256:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "210", "code": "            raise ValueError(\"The translate argument must be a str of len 256.\")\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "211", "code": "else:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "E", "line": "212", "code": "    punctuation_to_underscores = str.maketrans(\n", "colour": "yellow", "author": "tom@organisms.be"}, {"error": "none", "line": "213", "code": "        string.punctuation, '_' * len(string.punctuation))\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "214", "code": "    def validate_translator(t):\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "215", "code": "        if not isinstance(t, dict):\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "216", "code": "            raise ValueError(\"The translate argument must be a dict.\")\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "217", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "R", "line": "218", "code": "class Dispatcher(object):\n", "colour": "green", "author": "tom@organisms.be"}, {"error": "none", "line": "219", "code": "    \"\"\"CherryPy Dispatcher which walks a tree of objects to find a handler.\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "220", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "221", "code": "    The tree is rooted at cherrypy.request.app.root, and each hierarchical\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "222", "code": "    component in the path_info argument is matched to a corresponding nested\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "223", "code": "    attribute of the root object. Matching handlers must have an 'exposed'\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "224", "code": "    attribute which evaluates to True. The special method name \"index\"\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "225", "code": "    matches a URI which ends in a slash (\"/\"). The special method name\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "226", "code": "    \"default\" may match a portion of the path_info (but only when no longer\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "227", "code": "    substring of the path_info matches some other object).\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "228", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "229", "code": "    This is the default, built-in dispatcher for CherryPy.\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "230", "code": "    \"\"\"\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "231", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "232", "code": "    dispatch_method_name = '_cp_dispatch'\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "233", "code": "    \"\"\"\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "234", "code": "    The name of the dispatch method that nodes may optionally implement\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "235", "code": "    to provide their own dynamic dispatch algorithm.\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "236", "code": "    \"\"\"\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "237", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "238", "code": "    def __init__(self, dispatch_method_name=None,\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "239", "code": "                 translate=punctuation_to_underscores):\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "240", "code": "        validate_translator(translate)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "241", "code": "        self.translate = translate\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "242", "code": "        if dispatch_method_name:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "243", "code": "            self.dispatch_method_name = dispatch_method_name\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "244", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "245", "code": "    def __call__(self, path_info):\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "246", "code": "        \"\"\"Set handler and config for the current request.\"\"\"\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "247", "code": "        request = cherrypy.serving.request\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "248", "code": "        func, vpath = self.find_handler(path_info)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "249", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "250", "code": "        if func:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "251", "code": "            # Decode any leftover %2F in the virtual_path atoms.\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "252", "code": "            vpath = [x.replace(\"%2F\", \"/\") for x in vpath]\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "W", "line": "253", "code": "            request.handler = LateParamPageHandler(func, *vpath)\n", "colour": "purple", "author": "tom@organisms.be"}, {"error": "none", "line": "254", "code": "        else:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "255", "code": "            request.handler = cherrypy.NotFound()\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "256", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "R", "line": "257", "code": "    def find_handler(self, path):\n", "colour": "green", "author": "tom@organisms.be"}, {"error": "none", "line": "258", "code": "        \"\"\"Return the appropriate page handler, plus any virtual path.\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "259", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "260", "code": "        This will return two objects. The first will be a callable,\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "261", "code": "        which can be used to generate page output. Any parameters from\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "262", "code": "        the query string or request body will be sent to that callable\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "263", "code": "        as keyword arguments.\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "264", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "265", "code": "        The callable is found by traversing the application's tree,\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "266", "code": "        starting from cherrypy.request.app.root, and matching path\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "267", "code": "        components to successive objects in the tree. For example, the\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "268", "code": "        URL \"/path/to/handler\" might return root.path.to.handler.\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "269", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "270", "code": "        The second object returned will be a list of names which are\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "271", "code": "        'virtual path' components: parts of the URL which are dynamic,\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "272", "code": "        and were not used when looking up the handler.\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "273", "code": "        These virtual path components are passed to the handler as\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "274", "code": "        positional arguments.\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "275", "code": "        \"\"\"\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "276", "code": "        request = cherrypy.serving.request\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "277", "code": "        app = request.app\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "278", "code": "        root = app.root\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "279", "code": "        dispatch_name = self.dispatch_method_name\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "280", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "281", "code": "        # Get config for the root object/path.\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "282", "code": "        fullpath = [x for x in path.strip('/').split('/') if x] + ['index']\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "283", "code": "        fullpath_len = len(fullpath)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "284", "code": "        segleft = fullpath_len\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "285", "code": "        nodeconf = {}\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "286", "code": "        if hasattr(root, \"_cp_config\"):\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "W", "line": "287", "code": "            nodeconf.update(root._cp_config)\n", "colour": "purple", "author": "tom@organisms.be"}, {"error": "none", "line": "288", "code": "        if \"/\" in app.config:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "289", "code": "            nodeconf.update(app.config[\"/\"])\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "290", "code": "        object_trail = [['root', root, nodeconf, segleft]]\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "291", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "292", "code": "        node = root\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "293", "code": "        iternames = fullpath[:]\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "294", "code": "        while iternames:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "295", "code": "            name = iternames[0]\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "296", "code": "            # map to legal Python identifiers (e.g. replace '.' with '_')\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "297", "code": "            objname = name.translate(self.translate)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "298", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "299", "code": "            nodeconf = {}\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "300", "code": "            subnode = getattr(node, objname, None)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "301", "code": "            pre_len = len(iternames)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "302", "code": "            if subnode is None:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "303", "code": "                dispatch = getattr(node, dispatch_name, None)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "304", "code": "                if dispatch and hasattr(dispatch, '__call__') and not \\\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "305", "code": "                        getattr(dispatch, 'exposed', False) and \\\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "306", "code": "                        pre_len > 1:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "307", "code": "                    #Don't expose the hidden 'index' token to _cp_dispatch\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "308", "code": "                    #We skip this if pre_len == 1 since it makes no sense\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "309", "code": "                    #to call a dispatcher when we have no tokens left.\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "310", "code": "                    index_name = iternames.pop()\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "311", "code": "                    subnode = dispatch(vpath=iternames)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "312", "code": "                    iternames.append(index_name)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "313", "code": "                else:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "314", "code": "                    #We didn't find a path, but keep processing in case there\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "315", "code": "                    #is a default() handler.\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "316", "code": "                    iternames.pop(0)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "317", "code": "            else:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "318", "code": "                #We found the path, remove the vpath entry\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "319", "code": "                iternames.pop(0)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "320", "code": "            segleft = len(iternames)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "321", "code": "            if segleft > pre_len:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "322", "code": "                #No path segment was removed.  Raise an error.\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "323", "code": "                raise cherrypy.CherryPyException(\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "324", "code": "                    \"A vpath segment was added.  Custom dispatchers may only \"\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "325", "code": "                    + \"remove elements.  While trying to process \"\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "326", "code": "                    + \"{0} in {1}\".format(name, fullpath)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "327", "code": "                    )\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "328", "code": "            elif segleft == pre_len:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "329", "code": "                #Assume that the handler used the current path segment, but\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "330", "code": "                #did not pop it.  This allows things like\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "331", "code": "                #return getattr(self, vpath[0], None)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "332", "code": "                iternames.pop(0)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "333", "code": "                segleft -= 1\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "334", "code": "            node = subnode\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "335", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "336", "code": "            if node is not None:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "337", "code": "                # Get _cp_config attached to this node.\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "338", "code": "                if hasattr(node, \"_cp_config\"):\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "W", "line": "339", "code": "                    nodeconf.update(node._cp_config)\n", "colour": "purple", "author": "tom@organisms.be"}, {"error": "none", "line": "340", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "341", "code": "            # Mix in values from app.config for this path.\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "342", "code": "            existing_len = fullpath_len - pre_len\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "343", "code": "            if existing_len != 0:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "344", "code": "                curpath = '/' + '/'.join(fullpath[0:existing_len])\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "345", "code": "            else:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "346", "code": "                curpath = ''\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "347", "code": "            new_segs = fullpath[fullpath_len - pre_len:fullpath_len - segleft]\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "348", "code": "            for seg in new_segs:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "349", "code": "                curpath += '/' + seg\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "350", "code": "                if curpath in app.config:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "351", "code": "                    nodeconf.update(app.config[curpath])\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "352", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "353", "code": "            object_trail.append([name, node, nodeconf, segleft])\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "354", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "355", "code": "        def set_conf():\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "356", "code": "            \"\"\"Collapse all object_trail config into cherrypy.request.config.\"\"\"\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "357", "code": "            base = cherrypy.config.copy()\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "358", "code": "            # Note that we merge the config from each node\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "359", "code": "            # even if that node was None.\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "W", "line": "360", "code": "            for name, obj, conf, segleft in object_trail:\n", "colour": "purple", "author": "tom@organisms.be"}, {"error": "none", "line": "361", "code": "                base.update(conf)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "362", "code": "                if 'tools.staticdir.dir' in conf:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "363", "code": "                    base['tools.staticdir.section'] = '/' + '/'.join(fullpath[0:fullpath_len - segleft])\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "364", "code": "            return base\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "365", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "366", "code": "        # Try successive objects (reverse order)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "367", "code": "        num_candidates = len(object_trail) - 1\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "368", "code": "        for i in range(num_candidates, -1, -1):\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "369", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "370", "code": "            name, candidate, nodeconf, segleft = object_trail[i]\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "371", "code": "            if candidate is None:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "372", "code": "                continue\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "373", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "374", "code": "            # Try a \"default\" method on the current leaf.\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "375", "code": "            if hasattr(candidate, \"default\"):\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "376", "code": "                defhandler = candidate.default\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "377", "code": "                if getattr(defhandler, 'exposed', False):\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "378", "code": "                    # Insert any extra _cp_config from the default handler.\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "379", "code": "                    conf = getattr(defhandler, \"_cp_config\", {})\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "380", "code": "                    object_trail.insert(i+1, [\"default\", defhandler, conf, segleft])\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "381", "code": "                    request.config = set_conf()\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "382", "code": "                    # See http://www.cherrypy.org/ticket/613\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "383", "code": "                    request.is_index = path.endswith(\"/\")\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "384", "code": "                    return defhandler, fullpath[fullpath_len - segleft:-1]\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "385", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "386", "code": "            # Uncomment the next line to restrict positional params to \"default\".\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "387", "code": "            # if i < num_candidates - 2: continue\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "388", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "389", "code": "            # Try the current leaf.\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "390", "code": "            if getattr(candidate, 'exposed', False):\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "391", "code": "                request.config = set_conf()\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "392", "code": "                if i == num_candidates:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "393", "code": "                    # We found the extra \".index\". Mark request so tools\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "394", "code": "                    # can redirect if path_info has no trailing slash.\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "395", "code": "                    request.is_index = True\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "396", "code": "                else:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "397", "code": "                    # We're not at an 'index' handler. Mark request so tools\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "398", "code": "                    # can redirect if path_info has NO trailing slash.\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "399", "code": "                    # Note that this also includes handlers which take\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "400", "code": "                    # positional parameters (virtual paths).\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "401", "code": "                    request.is_index = False\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "402", "code": "                return candidate, fullpath[fullpath_len - segleft:-1]\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "403", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "404", "code": "        # We didn't find anything\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "405", "code": "        request.config = set_conf()\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "406", "code": "        return None, []\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "407", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "408", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "R", "line": "409", "code": "class MethodDispatcher(Dispatcher):\n", "colour": "green", "author": "tom@organisms.be"}, {"error": "none", "line": "410", "code": "    \"\"\"Additional dispatch based on cherrypy.request.method.upper().\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "411", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "412", "code": "    Methods named GET, POST, etc will be called on an exposed class.\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "413", "code": "    The method names must be all caps; the appropriate Allow header\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "414", "code": "    will be output showing all capitalized method names as allowable\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "415", "code": "    HTTP verbs.\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "416", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "417", "code": "    Note that the containing class must be exposed, not the methods.\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "418", "code": "    \"\"\"\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "419", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "420", "code": "    def __call__(self, path_info):\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "421", "code": "        \"\"\"Set handler and config for the current request.\"\"\"\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "422", "code": "        request = cherrypy.serving.request\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "423", "code": "        resource, vpath = self.find_handler(path_info)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "424", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "425", "code": "        if resource:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "426", "code": "            # Set Allow header\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "427", "code": "            avail = [m for m in dir(resource) if m.isupper()]\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "428", "code": "            if \"GET\" in avail and \"HEAD\" not in avail:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "429", "code": "                avail.append(\"HEAD\")\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "430", "code": "            avail.sort()\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "431", "code": "            cherrypy.serving.response.headers['Allow'] = \", \".join(avail)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "432", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "433", "code": "            # Find the subhandler\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "434", "code": "            meth = request.method.upper()\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "435", "code": "            func = getattr(resource, meth, None)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "436", "code": "            if func is None and meth == \"HEAD\":\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "437", "code": "                func = getattr(resource, \"GET\", None)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "438", "code": "            if func:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "439", "code": "                # Grab any _cp_config on the subhandler.\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "440", "code": "                if hasattr(func, \"_cp_config\"):\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "W", "line": "441", "code": "                    request.config.update(func._cp_config)\n", "colour": "purple", "author": "tom@organisms.be"}, {"error": "none", "line": "442", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "443", "code": "                # Decode any leftover %2F in the virtual_path atoms.\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "444", "code": "                vpath = [x.replace(\"%2F\", \"/\") for x in vpath]\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "W", "line": "445", "code": "                request.handler = LateParamPageHandler(func, *vpath)\n", "colour": "purple", "author": "tom@organisms.be"}, {"error": "none", "line": "446", "code": "            else:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "447", "code": "                request.handler = cherrypy.HTTPError(405)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "448", "code": "        else:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "449", "code": "            request.handler = cherrypy.NotFound()\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "450", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "451", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "452", "code": "class RoutesDispatcher(object):\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "453", "code": "    \"\"\"A Routes based dispatcher for CherryPy.\"\"\"\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "454", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "455", "code": "    def __init__(self, full_result=False):\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "456", "code": "        \"\"\"\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "457", "code": "        Routes dispatcher\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "458", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "459", "code": "        Set full_result to True if you wish the controller\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "460", "code": "        and the action to be passed on to the page handler\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "461", "code": "        parameters. By default they won't be.\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "462", "code": "        \"\"\"\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "F", "line": "463", "code": "        import routes\n", "colour": "red", "author": "tom@organisms.be"}, {"error": "none", "line": "464", "code": "        self.full_result = full_result\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "465", "code": "        self.controllers = {}\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "466", "code": "        self.mapper = routes.Mapper()\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "467", "code": "        self.mapper.controller_scan = self.controllers.keys\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "468", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "469", "code": "    def connect(self, name, route, controller, **kwargs):\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "470", "code": "        self.controllers[name] = controller\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "471", "code": "        self.mapper.connect(name, route, controller=name, **kwargs)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "472", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "R", "line": "473", "code": "    def redirect(self, url):\n", "colour": "green", "author": "tom@organisms.be"}, {"error": "none", "line": "474", "code": "        raise cherrypy.HTTPRedirect(url)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "475", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "476", "code": "    def __call__(self, path_info):\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "477", "code": "        \"\"\"Set handler and config for the current request.\"\"\"\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "478", "code": "        func = self.find_handler(path_info)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "479", "code": "        if func:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "480", "code": "            cherrypy.serving.request.handler = LateParamPageHandler(func)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "481", "code": "        else:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "482", "code": "            cherrypy.serving.request.handler = cherrypy.NotFound()\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "483", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "R", "line": "484", "code": "    def find_handler(self, path_info):\n", "colour": "green", "author": "tom@organisms.be"}, {"error": "none", "line": "485", "code": "        \"\"\"Find the right page handler, and set request.config.\"\"\"\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "F", "line": "486", "code": "        import routes\n", "colour": "red", "author": "tom@organisms.be"}, {"error": "none", "line": "487", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "488", "code": "        request = cherrypy.serving.request\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "489", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "490", "code": "        config = routes.request_config()\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "491", "code": "        config.mapper = self.mapper\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "492", "code": "        if hasattr(request, 'wsgi_environ'):\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "493", "code": "            config.environ = request.wsgi_environ\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "494", "code": "        config.host = request.headers.get('Host', None)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "495", "code": "        config.protocol = request.scheme\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "496", "code": "        config.redirect = self.redirect\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "497", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "498", "code": "        result = self.mapper.match(path_info)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "499", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "500", "code": "        config.mapper_dict = result\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "501", "code": "        params = {}\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "502", "code": "        if result:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "503", "code": "            params = result.copy()\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "504", "code": "        if not self.full_result:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "505", "code": "            params.pop('controller', None)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "506", "code": "            params.pop('action', None)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "507", "code": "        request.params.update(params)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "508", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "509", "code": "        # Get config for the root object/path.\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "510", "code": "        request.config = base = cherrypy.config.copy()\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "511", "code": "        curpath = \"\"\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "512", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "513", "code": "        def merge(nodeconf):\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "514", "code": "            if 'tools.staticdir.dir' in nodeconf:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "515", "code": "                nodeconf['tools.staticdir.section'] = curpath or \"/\"\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "516", "code": "            base.update(nodeconf)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "517", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "518", "code": "        app = request.app\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "519", "code": "        root = app.root\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "520", "code": "        if hasattr(root, \"_cp_config\"):\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "W", "line": "521", "code": "            merge(root._cp_config)\n", "colour": "purple", "author": "tom@organisms.be"}, {"error": "none", "line": "522", "code": "        if \"/\" in app.config:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "523", "code": "            merge(app.config[\"/\"])\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "524", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "525", "code": "        # Mix in values from app.config.\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "526", "code": "        atoms = [x for x in path_info.split(\"/\") if x]\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "527", "code": "        if atoms:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "528", "code": "            last = atoms.pop()\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "529", "code": "        else:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "530", "code": "            last = None\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "531", "code": "        for atom in atoms:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "532", "code": "            curpath = \"/\".join((curpath, atom))\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "533", "code": "            if curpath in app.config:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "534", "code": "                merge(app.config[curpath])\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "535", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "536", "code": "        handler = None\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "537", "code": "        if result:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "538", "code": "            controller = result.get('controller')\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "539", "code": "            controller = self.controllers.get(controller, controller)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "540", "code": "            if controller:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "541", "code": "                if isinstance(controller, classtype):\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "542", "code": "                    controller = controller()\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "543", "code": "                # Get config from the controller.\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "544", "code": "                if hasattr(controller, \"_cp_config\"):\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "W", "line": "545", "code": "                    merge(controller._cp_config)\n", "colour": "purple", "author": "tom@organisms.be"}, {"error": "none", "line": "546", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "547", "code": "            action = result.get('action')\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "548", "code": "            if action is not None:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "549", "code": "                handler = getattr(controller, action, None)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "550", "code": "                # Get config from the handler\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "551", "code": "                if hasattr(handler, \"_cp_config\"):\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "W", "line": "552", "code": "                    merge(handler._cp_config)\n", "colour": "purple", "author": "tom@organisms.be"}, {"error": "none", "line": "553", "code": "            else:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "554", "code": "                handler = controller\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "555", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "556", "code": "        # Do the last path atom here so it can\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "557", "code": "        # override the controller's _cp_config.\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "558", "code": "        if last:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "559", "code": "            curpath = \"/\".join((curpath, last))\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "560", "code": "            if curpath in app.config:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "561", "code": "                merge(app.config[curpath])\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "562", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "563", "code": "        return handler\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "564", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "565", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "566", "code": "def XMLRPCDispatcher(next_dispatcher=Dispatcher()):\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "567", "code": "    from cherrypy.lib import xmlrpcutil\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "568", "code": "    def xmlrpc_dispatch(path_info):\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "569", "code": "        path_info = xmlrpcutil.patched_path(path_info)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "570", "code": "        return next_dispatcher(path_info)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "571", "code": "    return xmlrpc_dispatch\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "572", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "573", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "574", "code": "def VirtualHost(next_dispatcher=Dispatcher(), use_x_forwarded_host=True, **domains):\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "575", "code": "    \"\"\"\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "576", "code": "    Select a different handler based on the Host header.\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "577", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "578", "code": "    This can be useful when running multiple sites within one CP server.\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "579", "code": "    It allows several domains to point to different parts of a single\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "580", "code": "    website structure. For example::\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "581", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "582", "code": "        http://www.domain.example  ->  root\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "583", "code": "        http://www.domain2.example  ->  root/domain2/\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "584", "code": "        http://www.domain2.example:443  ->  root/secure\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "585", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "586", "code": "    can be accomplished via the following config::\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "587", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "588", "code": "        [/]\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "589", "code": "        request.dispatch = cherrypy.dispatch.VirtualHost(\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "590", "code": "            **{'www.domain2.example': '/domain2',\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "591", "code": "               'www.domain2.example:443': '/secure',\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "592", "code": "              })\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "593", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "594", "code": "    next_dispatcher\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "595", "code": "        The next dispatcher object in the dispatch chain.\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "596", "code": "        The VirtualHost dispatcher adds a prefix to the URL and calls\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "597", "code": "        another dispatcher. Defaults to cherrypy.dispatch.Dispatcher().\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "598", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "599", "code": "    use_x_forwarded_host\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "600", "code": "        If True (the default), any \"X-Forwarded-Host\"\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "601", "code": "        request header will be used instead of the \"Host\" header. This\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "602", "code": "        is commonly added by HTTP servers (such as Apache) when proxying.\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "603", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "604", "code": "    ``**domains``\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "605", "code": "        A dict of {host header value: virtual prefix} pairs.\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "606", "code": "        The incoming \"Host\" request header is looked up in this dict,\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "607", "code": "        and, if a match is found, the corresponding \"virtual prefix\"\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "608", "code": "        value will be prepended to the URL path before calling the\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "609", "code": "        next dispatcher. Note that you often need separate entries\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "610", "code": "        for \"example.com\" and \"www.example.com\". In addition, \"Host\"\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "611", "code": "        headers may contain the port number.\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "612", "code": "    \"\"\"\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "613", "code": "    from cherrypy.lib import httputil\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "C", "line": "614", "code": "    def vhost_dispatch(path_info):\n", "colour": "blue", "author": "tom@organisms.be"}, {"error": "none", "line": "615", "code": "        request = cherrypy.serving.request\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "616", "code": "        header = request.headers.get\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "617", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "618", "code": "        domain = header('Host', '')\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "619", "code": "        if use_x_forwarded_host:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "620", "code": "            domain = header(\"X-Forwarded-Host\", domain)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "621", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "622", "code": "        prefix = domains.get(domain, \"\")\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "623", "code": "        if prefix:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "624", "code": "            path_info = httputil.urljoin(prefix, path_info)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "625", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "626", "code": "        result = next_dispatcher(path_info)\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "627", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "628", "code": "        # Touch up staticdir config. See http://www.cherrypy.org/ticket/614.\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "629", "code": "        section = request.config.get('tools.staticdir.section')\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "630", "code": "        if section:\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "631", "code": "            section = section[len(prefix):]\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "632", "code": "            request.config['tools.staticdir.section'] = section\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "633", "code": "\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "634", "code": "        return result\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "635", "code": "    return vhost_dispatch\n", "colour": "black", "author": "tom@organisms.be"}, {"error": "none", "line": "636", "code": "\n", "colour": "black", "author": "tom@organisms.be"}]]}